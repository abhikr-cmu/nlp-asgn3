{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 41067960, "retrieval_score": 14.481967}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357, "for": 41067960, "retrieval_score": 14.347743}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632, "for": 41067960, "retrieval_score": 13.714321}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 41067960, "retrieval_score": 13.495432}
{"snippet": "ssl.OPENSSL_VERSION_NUMBER", "intent": "The raw version number of the OpenSSL library, as a single integer:", "question_id": 8959, "for": 41067960, "retrieval_score": 13.440804}
{"snippet": "sys.hexversion", "intent": "The version number encoded as a single integer.", "question_id": 9814, "for": 41067960, "retrieval_score": 12.383423}
{"snippet": "ssl.OPENSSL_VERSION_NUMBER", "intent": "The raw version number of the OpenSSL library, as a single integer:", "question_id": 8959, "for": 41067960, "retrieval_score": 12.327762}
{"snippet": "@functools.singledispatch", "intent": "Transform a function into a single-dispatch generic function.", "question_id": 4155, "for": 41067960, "retrieval_score": 11.8920145}
{"snippet": "socket.ntohl(x)", "intent": "Convert 32-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8657, "for": 41067960, "retrieval_score": 11.863165}
{"snippet": "socket.ntohs(x)", "intent": "Convert 16-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8658, "for": 41067960, "retrieval_score": 11.863165}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 4170655, "retrieval_score": 32.74881}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 4170655, "retrieval_score": 27.130337}
{"snippet": "datetime.strptime(date_string, format)", "intent": "Return a datetime corresponding to `date_string` , parsed according to `format` .", "question_id": 2268, "for": 4170655, "retrieval_score": 22.560762}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 4170655, "retrieval_score": 21.716675}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 4170655, "retrieval_score": 21.156477}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 29565452, "retrieval_score": 20.298372}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 29565452, "retrieval_score": 18.090445}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 29565452, "retrieval_score": 16.915388}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 29565452, "retrieval_score": 16.614311}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 29565452, "retrieval_score": 16.57945}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 13704860, "retrieval_score": 26.968697}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 13704860, "retrieval_score": 26.233164}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 13704860, "retrieval_score": 25.311737}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 13704860, "retrieval_score": 25.30725}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508, "for": 13704860, "retrieval_score": 24.896029}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 13331419, "retrieval_score": 13.042947}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627, "for": 13331419, "retrieval_score": 12.537658}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947, "for": 13331419, "retrieval_score": 12.09009}
{"snippet": "Unpacker.unpack_list(unpack_item)", "intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "question_id": 12297, "for": 13331419, "retrieval_score": 11.949091}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 13331419, "retrieval_score": 11.843873}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 25474338, "retrieval_score": 13.273996}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 25474338, "retrieval_score": 13.273996}
{"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241, "for": 25474338, "retrieval_score": 13.273996}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242, "for": 25474338, "retrieval_score": 13.273996}
{"snippet": "element.tag", "intent": "A string identifying what kind of data this element represents (the element type, in other words).", "question_id": 12479, "for": 25474338, "retrieval_score": 12.197939}
{"snippet": "decimal.normalize()", "intent": "Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal ( ' 0 ' ) to Decimal ( '0e0 ' ) .", "question_id": 2457, "for": 18594469, "retrieval_score": 10.227155}
{"snippet": "os.path.normcase(path)", "intent": "Normalize the case of a pathname . On other operating systems , return the `path` unchanged .", "question_id": 7161, "for": 18594469, "retrieval_score": 9.987826}
{"snippet": "decimal.normalize(context=None)", "intent": "Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal ( ' 0 ' ) to Decimal ( '0e0 ' ) . With arguments `context`.", "question_id": 2458, "for": 18594469, "retrieval_score": 9.652417}
{"snippet": "connection.row_factory", "intent": "You can change this attribute to a callable that accepts the cursor and the original row as a tuple and will return the real result row.", "question_id": 8825, "for": 18594469, "retrieval_score": 8.490002}
{"snippet": "os.path.normpath(path)", "intent": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a `path` that contains symbolic links .", "question_id": 7162, "for": 18594469, "retrieval_score": 8.4418955}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 13384841, "retrieval_score": 15.500094}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 13384841, "retrieval_score": 15.136118}
{"snippet": "tkinter.ttk.Widget", "intent": "statespec will usually be a list or a tuple.", "question_id": 10591, "for": 13384841, "retrieval_score": 14.826923}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045, "for": 13384841, "retrieval_score": 14.480543}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970, "for": 13384841, "retrieval_score": 13.955396}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 13384841, "retrieval_score": 16.567091}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 13384841, "retrieval_score": 15.732505}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045, "for": 13384841, "retrieval_score": 15.0303135}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 13384841, "retrieval_score": 14.781209}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129, "for": 13384841, "retrieval_score": 14.4611225}
{"snippet": "widget.next(item)", "intent": "Returns the identifier of `item` \u2019 s next sibling , or \u2018 \u2019 if item is the last child of its parent .", "question_id": 10645, "for": 23887592, "retrieval_score": 14.190298}
{"snippet": "bdb.set_next(frame)", "intent": "Stop on the next line in or below the given `frame` .", "question_id": 786, "for": 23887592, "retrieval_score": 8.824884}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682, "for": 23887592, "retrieval_score": 8.748666}
{"snippet": "random.random()", "intent": "Return the next random floating point number in the range [ 0.0 , 1.0 ) .", "question_id": 7906, "for": 23887592, "retrieval_score": 8.61667}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126, "for": 23887592, "retrieval_score": 8.607633}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 17352321, "retrieval_score": 17.141912}
{"snippet": "re.split(pattern, string, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . With arguments `flags`.", "question_id": 7945, "for": 17352321, "retrieval_score": 15.868477}
{"snippet": "message.__delitem__(name)", "intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "question_id": 2968, "for": 17352321, "retrieval_score": 15.464823}
{"snippet": "email_message.__delitem__(name)", "intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "question_id": 3245, "for": 17352321, "retrieval_score": 15.464823}
{"snippet": "file_finder.find_spec(fullname)", "intent": "Attempt to find the spec to handle `fullname` within path .", "question_id": 4884, "for": 17352321, "retrieval_score": 14.321965}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 10115967, "retrieval_score": 28.297852}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 10115967, "retrieval_score": 22.680397}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 10115967, "retrieval_score": 19.455078}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 10115967, "retrieval_score": 19.455078}
{"snippet": "errno.EL3HLT", "intent": "Level 3 halted", "question_id": 3551, "for": 10115967, "retrieval_score": 16.105307}
{"snippet": "tracemalloc.Traceback", "intent": "Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "question_id": 10894, "for": 30026815, "retrieval_score": 12.295514}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951, "for": 30026815, "retrieval_score": 11.888807}
{"snippet": "bdb.set_trace(frame)", "intent": "Start debugging from `frame` .", "question_id": 789, "for": 30026815, "retrieval_score": 10.963014}
{"snippet": "bdb.set_trace()", "intent": "Start debugging from `frame` .", "question_id": 790, "for": 30026815, "retrieval_score": 10.963014}
{"snippet": "heapq.merge(*iterables, key=None)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element .", "question_id": 4322, "for": 30026815, "retrieval_score": 10.724871}
{"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356, "for": 31958637, "retrieval_score": 13.28273}
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014, "for": 31958637, "retrieval_score": 10.120287}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH", "intent": "An end tag did not match the innermost open start tag.", "question_id": 7802, "for": 31958637, "retrieval_score": 9.160403}
{"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501, "for": 31958637, "retrieval_score": 9.041453}
{"snippet": "Dialect.doublequote", "intent": "Controls how instances of quotechar appearing inside a field should themselves be quoted.", "question_id": 1724, "for": 31958637, "retrieval_score": 8.542535}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 2158347, "retrieval_score": 25.10741}
{"snippet": "datetime.strptime(date_string, format)", "intent": "Return a datetime corresponding to `date_string` , parsed according to `format` .", "question_id": 2268, "for": 2158347, "retrieval_score": 20.157436}
{"snippet": "datetime.min", "intent": "The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None).", "question_id": 2269, "for": 2158347, "retrieval_score": 18.608168}
{"snippet": "email.utils.localtime()", "intent": "Return local time as an aware datetime object .", "question_id": 3452, "for": 2158347, "retrieval_score": 17.963112}
{"snippet": "datetime.max", "intent": "The latest representable datetime, datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None).", "question_id": 2270, "for": 2158347, "retrieval_score": 17.509617}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455, "for": 17888152, "retrieval_score": 14.065909}
{"snippet": "time.strptime(string)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10456, "for": 17888152, "retrieval_score": 14.065909}
{"snippet": "config_parser.read_string(string)", "intent": "Parse configuration data from a `string` .", "question_id": 1516, "for": 17888152, "retrieval_score": 13.876344}
{"snippet": "urllib.parse.parse_qs(qs, max_num_fields=None)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `max_num_fields` is the maximum number of fields to read . With arguments `qs`.", "question_id": 11674, "for": 17888152, "retrieval_score": 13.223703}
{"snippet": "urllib.parse.parse_qsl(qs, max_num_fields=None)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `max_num_fields` is the maximum number of fields to read . With arguments `qs`.", "question_id": 11684, "for": 17888152, "retrieval_score": 13.223703}
{"snippet": "mh.get_sequences()", "intent": "Return a dictionary of sequence names mapped to key lists .", "question_id": 5783, "for": 37855490, "retrieval_score": 17.274126}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 37855490, "retrieval_score": 17.066637}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393, "for": 37855490, "retrieval_score": 16.85671}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 37855490, "retrieval_score": 16.394241}
{"snippet": "patch.dict(in_dict, **kwargs)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . With arguments `**kwargs`.", "question_id": 11628, "for": 37855490, "retrieval_score": 16.16951}
{"snippet": "formatter.format(record)", "intent": "The `record` \u2019 s attribute dictionary is used as the operand to a string formatting operation .", "question_id": 5618, "for": 4127344, "retrieval_score": 10.695103}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277, "for": 4127344, "retrieval_score": 10.399909}
{"snippet": "simple_http_request_handler.extensions_map", "intent": "A dictionary mapping suffixes into MIME types.", "question_id": 4662, "for": 4127344, "retrieval_score": 10.038481}
{"snippet": "cgi.parse_header(string)", "intent": "Parse a MIME header ( such as Content-Type ) into a main value and a dictionary of parameters . With arguments `string`.", "question_id": 1051, "for": 4127344, "retrieval_score": 9.719726}
{"snippet": "dict.keys()", "intent": "Return a new view of the dictionary \u2019 s keys .", "question_id": 9485, "for": 4127344, "retrieval_score": 9.289591}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729, "for": 19035186, "retrieval_score": 10.267451}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730, "for": 19035186, "retrieval_score": 10.267451}
{"snippet": "select.select(rlist, wlist, xlist)", "intent": "This is a straightforward interface to the Unix select ( ) system call . With arguments `rlist`, `wlist`, `xlist`.", "question_id": 8167, "for": 19035186, "retrieval_score": 9.700965}
{"snippet": "NNTP.xover(start, end, file=None)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select . With arguments `file`.", "question_id": 6500, "for": 19035186, "retrieval_score": 8.930795}
{"snippet": "tkinter.tix.Select", "intent": "The Select widget is a container of button subwidgets.", "question_id": 10561, "for": 19035186, "retrieval_score": 8.703225}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424, "for": 25823608, "retrieval_score": 16.404531}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682, "for": 25823608, "retrieval_score": 16.298754}
{"snippet": "datetime.fold", "intent": "In [0, 1].", "question_id": 2280, "for": 25823608, "retrieval_score": 15.381046}
{"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332, "for": 25823608, "retrieval_score": 15.381046}
{"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425, "for": 25823608, "retrieval_score": 14.743597}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_SEQ", "intent": "Models which represent a series of models which follow one after the other are indicated with this model type.", "question_id": 7782, "for": 3805958, "retrieval_score": 12.772543}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797, "for": 3805958, "retrieval_score": 10.073965}
{"snippet": "bdb.clear_break(filename, lineno)", "intent": "Delete the breakpoints in `filename` and `lineno` .", "question_id": 795, "for": 3805958, "retrieval_score": 9.535012}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_CHOICE", "intent": "The named element allows a choice from a number of options; this is used for content models such as (A | B | C).", "question_id": 7780, "for": 3805958, "retrieval_score": 9.416283}
{"snippet": "queue_listener.filter(record)", "intent": "Applies this logger \u2019 s filters to the `record` and returns a true value if the record is to be processed .", "question_id": 5579, "for": 3805958, "retrieval_score": 9.217742}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 6900955, "retrieval_score": 27.480274}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 6900955, "retrieval_score": 26.838375}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 6900955, "retrieval_score": 26.273886}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 6900955, "retrieval_score": 25.711815}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 6900955, "retrieval_score": 21.896236}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 6900955, "retrieval_score": 19.832764}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 6900955, "retrieval_score": 16.140003}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 6900955, "retrieval_score": 15.927481}
{"snippet": "urllib.parse.urlencode(query, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11737, "for": 6900955, "retrieval_score": 15.608281}
{"snippet": "urllib.parse.urlencode(query, doseq=False, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11741, "for": 6900955, "retrieval_score": 15.57287}
{"snippet": "errno.EADDRNOTAVAIL", "intent": "Cannot assign requested address", "question_id": 3604, "for": 18224991, "retrieval_score": 10.960748}
{"snippet": "_func_ptr.errcheck", "intent": "Assign a Python function or another callable to this attribute.", "question_id": 1789, "for": 18224991, "retrieval_score": 10.570164}
{"snippet": "ArgumentParser.parse_args()", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 69, "for": 18224991, "retrieval_score": 9.839229}
{"snippet": "ArgumentParser.parse_args(namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 71, "for": 18224991, "retrieval_score": 9.839229}
{"snippet": "_func_ptr.restype", "intent": "Assign a ctypes type to specify the result type of the foreign function.", "question_id": 1787, "for": 18224991, "retrieval_score": 9.839229}
{"snippet": "Dialect.delimiter", "intent": "A one-character string used to separate fields.", "question_id": 1723, "for": 15103484, "retrieval_score": 11.133122}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513, "for": 15103484, "retrieval_score": 10.736679}
{"snippet": "buffered_io_base.detach()", "intent": "Separate the underlying raw stream from the buffer and return it .", "question_id": 5091, "for": 15103484, "retrieval_score": 10.44523}
{"snippet": "text_io_base.detach()", "intent": "Separate the underlying binary buffer from the TextIOBase and return it .", "question_id": 5137, "for": 15103484, "retrieval_score": 10.44523}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 15103484, "retrieval_score": 10.225649}
{"snippet": "Dialect.delimiter", "intent": "A one-character string used to separate fields.", "question_id": 1723, "for": 15103484, "retrieval_score": 11.133122}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513, "for": 15103484, "retrieval_score": 10.736679}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 15103484, "retrieval_score": 10.225649}
{"snippet": "os.linesep", "intent": "The string used to separate (or, rather, terminate) lines on the current platform.", "question_id": 7128, "for": 15103484, "retrieval_score": 9.850018}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 15103484, "retrieval_score": 9.731459}
{"snippet": "Dialect.delimiter", "intent": "A one-character string used to separate fields.", "question_id": 1723, "for": 15103484, "retrieval_score": 11.133122}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513, "for": 15103484, "retrieval_score": 10.736679}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 15103484, "retrieval_score": 10.225649}
{"snippet": "os.linesep", "intent": "The string used to separate (or, rather, terminate) lines on the current platform.", "question_id": 7128, "for": 15103484, "retrieval_score": 9.850018}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 15103484, "retrieval_score": 9.731459}
{"snippet": "wsgiref.simple_server.demo_app(environ, start_response)", "intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "question_id": 12227, "for": 7633274, "retrieval_score": 18.996733}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 7633274, "retrieval_score": 17.380196}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 7633274, "retrieval_score": 17.380196}
{"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241, "for": 7633274, "retrieval_score": 17.380196}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242, "for": 7633274, "retrieval_score": 17.380196}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355, "for": 14295673, "retrieval_score": 16.12919}
{"snippet": "email.utils.localtime()", "intent": "Return local time as an aware datetime object .", "question_id": 3452, "for": 14295673, "retrieval_score": 15.668962}
{"snippet": "email.utils.localtime(dt=None)", "intent": "Return local time as an aware datetime object . Otherwise `dt` argument should be a datetime instance , and it is converted to the local time zone according to the system time zone database .", "question_id": 3453, "for": 14295673, "retrieval_score": 14.193687}
{"snippet": "time.ctime()", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time .", "question_id": 10439, "for": 14295673, "retrieval_score": 13.681777}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 14295673, "retrieval_score": 12.929659}
{"snippet": "urllib.request.urlopen(url, cafile=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "question_id": 11754, "for": 28667684, "retrieval_score": 18.972588}
{"snippet": "urllib.request.urlopen(url, capath=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "question_id": 11755, "for": 28667684, "retrieval_score": 18.972588}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773, "for": 28667684, "retrieval_score": 15.449946}
{"snippet": "urllib.request.urlopen(url, data=None, cafile=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "question_id": 11758, "for": 28667684, "retrieval_score": 14.226103}
{"snippet": "urllib.request.urlopen(url, data=None, capath=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "question_id": 11759, "for": 28667684, "retrieval_score": 14.226103}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283, "for": 5927180, "retrieval_score": 12.953952}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126, "for": 5927180, "retrieval_score": 12.258508}
{"snippet": "ZipFile.extractall(path=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12819, "for": 5927180, "retrieval_score": 12.177782}
{"snippet": "ZipFile.extractall(path=None, members=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12822, "for": 5927180, "retrieval_score": 12.177782}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372, "for": 5927180, "retrieval_score": 12.096331}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 209840, "retrieval_score": 15.461841}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 209840, "retrieval_score": 15.461841}
{"snippet": "http.cookies.BaseCookie()", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances .", "question_id": 4579, "for": 209840, "retrieval_score": 14.1565895}
{"snippet": "dict.keys()", "intent": "Return a new view of the dictionary \u2019 s keys .", "question_id": 9485, "for": 209840, "retrieval_score": 12.553467}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 209840, "retrieval_score": 12.398228}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 209840, "retrieval_score": 15.461841}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 209840, "retrieval_score": 15.461841}
{"snippet": "http.cookies.BaseCookie()", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances .", "question_id": 4579, "for": 209840, "retrieval_score": 14.1565895}
{"snippet": "dict.keys()", "intent": "Return a new view of the dictionary \u2019 s keys .", "question_id": 9485, "for": 209840, "retrieval_score": 12.553467}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 209840, "retrieval_score": 12.398228}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 209840, "retrieval_score": 15.461841}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 209840, "retrieval_score": 15.461841}
{"snippet": "http.cookies.BaseCookie()", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances .", "question_id": 4579, "for": 209840, "retrieval_score": 14.1565895}
{"snippet": "dict.keys()", "intent": "Return a new view of the dictionary \u2019 s keys .", "question_id": 9485, "for": 209840, "retrieval_score": 12.553467}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 209840, "retrieval_score": 12.398228}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403, "for": 8569201, "retrieval_score": 19.114265}
{"snippet": "test_case.assertRaisesRegex(exception, regex, msg=None)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` . With arguments `msg`.", "question_id": 11404, "for": 8569201, "retrieval_score": 17.96198}
{"snippet": "test_case.assertRaisesRegex(exception, regex, callable, *args, **kwds)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` . With arguments `callable`, `*args`, `**kwds`.", "question_id": 11402, "for": 8569201, "retrieval_score": 17.268158}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 8569201, "retrieval_score": 16.197514}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 8569201, "retrieval_score": 16.197514}
{"snippet": "socket.getsockname()", "intent": "Return the socket \u2019 s own address .", "question_id": 8683, "for": 12362542, "retrieval_score": 25.897682}
{"snippet": "socket.sendto(bytes, address)", "intent": "Send data to the socket . Return the number of `bytes` sent . The socket should not be connected to a remote socket , since the destination socket is specified by `address` .", "question_id": 8721, "for": 12362542, "retrieval_score": 24.52832}
{"snippet": "resource.RLIMIT_SBSIZE", "intent": "The maximum size (in bytes) of socket buffer usage for this user.", "question_id": 8092, "for": 12362542, "retrieval_score": 24.513042}
{"snippet": "dispatcher.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 671, "for": 12362542, "retrieval_score": 23.768877}
{"snippet": "socket.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 8674, "for": 12362542, "retrieval_score": 23.768877}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 11703064, "retrieval_score": 23.067102}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 11703064, "retrieval_score": 21.833496}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 11703064, "retrieval_score": 21.664148}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 11703064, "retrieval_score": 21.314596}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 11703064, "retrieval_score": 20.714052}
{"snippet": "widget.index(item)", "intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "question_id": 10639, "for": 7595148, "retrieval_score": 12.256152}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 7595148, "retrieval_score": 11.849233}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 7595148, "retrieval_score": 11.849233}
{"snippet": "Packer.pack_string(s)", "intent": "Packs a variable length string , s. The length of the string is first packed as an unsigned integer , then the string data is packed with pack_fstring ( ) . With arguments `s`.", "question_id": 12279, "for": 7595148, "retrieval_score": 10.269038}
{"snippet": "Repr.maxlevel", "intent": "Depth limit on the creation of recursive representations.", "question_id": 8055, "for": 7595148, "retrieval_score": 9.669516}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 16537636, "retrieval_score": 31.300596}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426, "for": 16537636, "retrieval_score": 31.234957}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 16537636, "retrieval_score": 29.709063}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 16537636, "retrieval_score": 29.265665}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 16537636, "retrieval_score": 27.709562}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 3925465, "retrieval_score": 14.087929}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 3925465, "retrieval_score": 13.747504}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 3925465, "retrieval_score": 12.816387}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 3925465, "retrieval_score": 12.443775}
{"snippet": "SSLContext.get_ca_certs()", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates .", "question_id": 9011, "for": 3925465, "retrieval_score": 11.840111}
{"snippet": "os.preadv(fd, buffers, offset)", "intent": "Read from a file descriptor `fd` at a position of `offset` into mutable bytes-like objects `buffers` , leaving the file offset unchanged .", "question_id": 6784, "for": 3278850, "retrieval_score": 14.210758}
{"snippet": "os.readv(fd, buffers)", "intent": "Read from a file descriptor `fd` into a number of mutable bytes-like objects `buffers` .", "question_id": 6805, "for": 3278850, "retrieval_score": 13.8675375}
{"snippet": "shutil.copyfileobj(fsrc, fdst)", "intent": "Copy the contents of the file-like object `fsrc` to the file-like object `fdst` .", "question_id": 8310, "for": 3278850, "retrieval_score": 13.861452}
{"snippet": "os.writev(fd, buffers)", "intent": "Write the contents of `buffers` to file descriptor `fd` .", "question_id": 6810, "for": 3278850, "retrieval_score": 13.819923}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747, "for": 3278850, "retrieval_score": 13.231734}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 8244915, "retrieval_score": 13.078273}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 8244915, "retrieval_score": 12.656955}
{"snippet": "memoryview.itemsize", "intent": "The size in bytes of each element of the memoryview:", "question_id": 9423, "for": 8244915, "retrieval_score": 12.343536}
{"snippet": "doc_test_parser.parse(string)", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings .", "question_id": 2859, "for": 8244915, "retrieval_score": 11.558491}
{"snippet": "memoryview.format", "intent": "A string containing the format (in struct module style) for each element in the view.", "question_id": 9422, "for": 8244915, "retrieval_score": 11.533003}
{"snippet": "base_http_request_handler.sys_version", "intent": "Contains the Python system version, in a form usable by the version_string method and the server_version class variable.", "question_id": 4628, "for": 7934620, "retrieval_score": 13.646456}
{"snippet": "netrc.__repr__()", "intent": "Dump the class data as a string in the format of a netrc file .", "question_id": 6388, "for": 7934620, "retrieval_score": 12.830953}
{"snippet": "context_var.name", "intent": "The name of the variable.", "question_id": 1639, "for": 7934620, "retrieval_score": 12.809739}
{"snippet": "winreg.ExpandEnvironmentStrings(str)", "intent": "Expands environment variable placeholders % NAME % in strings like REG_EXPAND_SZ : With arguments `str`.", "question_id": 12135, "for": 7934620, "retrieval_score": 12.804783}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358, "for": 7934620, "retrieval_score": 12.728867}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`.", "question_id": 11728, "for": 42462530, "retrieval_score": 11.234436}
{"snippet": "urllib.parse.unquote_plus(string, errors='replace')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `errors`.", "question_id": 11729, "for": 42462530, "retrieval_score": 11.234436}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`, `errors`.", "question_id": 11730, "for": 42462530, "retrieval_score": 11.031588}
{"snippet": "urllib.parse.unquote_plus(string)", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str .", "question_id": 11727, "for": 42462530, "retrieval_score": 10.776962}
{"snippet": "urllib.parse.quote_plus(string, encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `encoding`.", "question_id": 11715, "for": 42462530, "retrieval_score": 10.118128}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196, "for": 15661013, "retrieval_score": 19.292286}
{"snippet": "datetime.MAXYEAR", "intent": "The largest year number allowed in a date or datetime object.", "question_id": 2197, "for": 15661013, "retrieval_score": 19.292286}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201, "for": 15661013, "retrieval_score": 18.693436}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 15661013, "retrieval_score": 18.578407}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 15661013, "retrieval_score": 17.873857}
{"snippet": "time.strftime(format)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument .", "question_id": 10454, "for": 3886669, "retrieval_score": 10.77431}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 3886669, "retrieval_score": 10.582789}
{"snippet": "time.asctime()", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' .", "question_id": 10430, "for": 3886669, "retrieval_score": 9.851591}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 3886669, "retrieval_score": 9.559889}
{"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346, "for": 3886669, "retrieval_score": 9.559889}
{"snippet": "stat_result.st_birthtime", "intent": "Time of file creation.", "question_id": 6940, "for": 237079, "retrieval_score": 13.762272}
{"snippet": "os.utime(path)", "intent": "Set the access and modified `times` of the file specified by `path` .", "question_id": 6967, "for": 237079, "retrieval_score": 13.509213}
{"snippet": "os.utime(path, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` .", "question_id": 6968, "for": 237079, "retrieval_score": 13.509213}
{"snippet": "os.utime(path, dir_fd=None)", "intent": "Set the access and modified `times` of the file specified by `path` . With arguments `dir_fd`.", "question_id": 6969, "for": 237079, "retrieval_score": 12.616208}
{"snippet": "os.utime(path, follow_symlinks=True)", "intent": "Set the access and modified `times` of the file specified by `path` . With arguments `follow_symlinks`.", "question_id": 6970, "for": 237079, "retrieval_score": 12.616208}
{"snippet": "stat_result.st_birthtime", "intent": "Time of file creation.", "question_id": 6940, "for": 237079, "retrieval_score": 22.672064}
{"snippet": "os.fstat(fd)", "intent": "Get the status of the file descriptor `fd` .", "question_id": 6723, "for": 237079, "retrieval_score": 12.42072}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343, "for": 237079, "retrieval_score": 11.491062}
{"snippet": "robot_file_parser.modified()", "intent": "Sets the time the robots.txt file was last fetched to the current time .", "question_id": 11914, "for": 237079, "retrieval_score": 11.260826}
{"snippet": "os.stat(path)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` .", "question_id": 6917, "for": 237079, "retrieval_score": 11.036028}
{"snippet": "stat.ST_MTIME", "intent": "Time of last modification.", "question_id": 9082, "for": 237079, "retrieval_score": 17.23474}
{"snippet": "TarInfo.mtime", "intent": "Time of last modification.", "question_id": 9983, "for": 237079, "retrieval_score": 17.23474}
{"snippet": "os.path.getmtime(path)", "intent": "Return the time of last modification of `path` .", "question_id": 7152, "for": 237079, "retrieval_score": 15.737436}
{"snippet": "stat_result.st_mtime", "intent": "Time of most recent content modification expressed in seconds.", "question_id": 6930, "for": 237079, "retrieval_score": 15.046673}
{"snippet": "stat_result.st_mtime_ns", "intent": "Time of most recent content modification expressed in nanoseconds as an integer.", "question_id": 6933, "for": 237079, "retrieval_score": 13.981636}
{"snippet": "os.path.getmtime(path)", "intent": "Return the time of last modification of `path` .", "question_id": 7152, "for": 237079, "retrieval_score": 20.028543}
{"snippet": "stat.ST_MTIME", "intent": "Time of last modification.", "question_id": 9082, "for": 237079, "retrieval_score": 17.23474}
{"snippet": "TarInfo.mtime", "intent": "Time of last modification.", "question_id": 9983, "for": 237079, "retrieval_score": 17.23474}
{"snippet": "source_loader.path_mtime(path)", "intent": "Optional abstract method which returns the modification time for the specified `path` .", "question_id": 4843, "for": 237079, "retrieval_score": 16.754723}
{"snippet": "Path.touch(exist_ok=True)", "intent": "Create a file at this given path . If the file already exists , the function succeeds if `exist_ok` is true ( and its modification time is updated to the current time ) , otherwise FileExistsError is raised .", "question_id": 7319, "for": 237079, "retrieval_score": 15.227856}
{"snippet": "stat_result.st_birthtime", "intent": "Time of file creation.", "question_id": 6940, "for": 237079, "retrieval_score": 13.762272}
{"snippet": "os.utime(path)", "intent": "Set the access and modified `times` of the file specified by `path` .", "question_id": 6967, "for": 237079, "retrieval_score": 13.509213}
{"snippet": "os.utime(path, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` .", "question_id": 6968, "for": 237079, "retrieval_score": 13.509213}
{"snippet": "os.utime(path, dir_fd=None)", "intent": "Set the access and modified `times` of the file specified by `path` . With arguments `dir_fd`.", "question_id": 6969, "for": 237079, "retrieval_score": 12.616208}
{"snippet": "os.utime(path, follow_symlinks=True)", "intent": "Set the access and modified `times` of the file specified by `path` . With arguments `follow_symlinks`.", "question_id": 6970, "for": 237079, "retrieval_score": 12.616208}
{"snippet": "stat_result.st_birthtime", "intent": "Time of file creation.", "question_id": 6940, "for": 237079, "retrieval_score": 22.672064}
{"snippet": "os.fstat(fd)", "intent": "Get the status of the file descriptor `fd` .", "question_id": 6723, "for": 237079, "retrieval_score": 12.935055}
{"snippet": "robot_file_parser.modified()", "intent": "Sets the time the robots.txt file was last fetched to the current time .", "question_id": 11914, "for": 237079, "retrieval_score": 11.789461}
{"snippet": "os.stat(path)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` .", "question_id": 6917, "for": 237079, "retrieval_score": 11.516666}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343, "for": 237079, "retrieval_score": 11.491062}
{"snippet": "stat_result.st_birthtime", "intent": "Time of file creation.", "question_id": 6940, "for": 237079, "retrieval_score": 22.672064}
{"snippet": "os.stat(path)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` .", "question_id": 6917, "for": 237079, "retrieval_score": 14.6609335}
{"snippet": "os.path.getctime(path)", "intent": "Return the system \u2019 s ctime which , on some systems ( like Unix ) is the time of the last metadata change , and , on others ( like Windows ) , is the creation time for `path` .", "question_id": 7153, "for": 237079, "retrieval_score": 14.048763}
{"snippet": "os.stat(path, dir_fd=None)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` . With arguments `dir_fd`.", "question_id": 6918, "for": 237079, "retrieval_score": 13.991019}
{"snippet": "os.stat(path, follow_symlinks=True)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` . With arguments `follow_symlinks`.", "question_id": 6919, "for": 237079, "retrieval_score": 13.991019}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068, "for": 5625524, "retrieval_score": 11.888859}
{"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750, "for": 5625524, "retrieval_score": 10.766831}
{"snippet": "IMAP4.uid(command, arg)", "intent": "Execute `command` args with messages identified by UID , rather than message number . With arguments `arg`.", "question_id": 4749, "for": 5625524, "retrieval_score": 10.055107}
{"snippet": "trace.runctx(cmd)", "intent": "Execute the command and gather statistics from the execution with the current tracing parameters , in the defined global and local environments . With arguments `cmd`.", "question_id": 10717, "for": 5625524, "retrieval_score": 8.391074}
{"snippet": "trace.run(cmd)", "intent": "Execute the command and gather statistics from the execution with the current tracing parameters . `cmd` must be a string or code object , suitable for passing into exec ( ) .", "question_id": 10716, "for": 5625524, "retrieval_score": 7.9523907}
{"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300, "for": 3862010, "retrieval_score": 18.28647}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 3862010, "retrieval_score": 17.369625}
{"snippet": "Pattern.split(string)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`.", "question_id": 7979, "for": 3862010, "retrieval_score": 15.730343}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980, "for": 3862010, "retrieval_score": 15.367755}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 3862010, "retrieval_score": 14.373796}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 7568627, "retrieval_score": 15.283881}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506, "for": 7568627, "retrieval_score": 14.035554}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319, "for": 7568627, "retrieval_score": 13.117515}
{"snippet": "window.syncdown()", "intent": "Touch each location in the window that has been touched in any of its ancestor windows .", "question_id": 2121, "for": 7568627, "retrieval_score": 12.766707}
{"snippet": "Unpacker.get_position()", "intent": "Returns the current unpack position in the data buffer .", "question_id": 12286, "for": 7568627, "retrieval_score": 12.312628}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293, "for": 9891814, "retrieval_score": 21.313454}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 9891814, "retrieval_score": 20.229633}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 9891814, "retrieval_score": 19.91723}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 9891814, "retrieval_score": 18.758501}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 9891814, "retrieval_score": 18.291304}
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701, "for": 20894525, "retrieval_score": 16.674547}
{"snippet": "widget.identify(x, y)", "intent": "Returns the name of the element at position `x` `y` , or the empty string if the point does not lie within any element .", "question_id": 10592, "for": 20894525, "retrieval_score": 14.940382}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204, "for": 20894525, "retrieval_score": 12.999595}
{"snippet": "str.isprintable()", "intent": "Return true if all characters in the string are printable or the string is empty , false otherwise .", "question_id": 9210, "for": 20894525, "retrieval_score": 12.999595}
{"snippet": "pyclbr.readmodule(module)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package .", "question_id": 7706, "for": 20894525, "retrieval_score": 12.804329}
{"snippet": "POP3.list(which)", "intent": "Request message list , result is in the form ( response , [ 'mesg_num octets ' , ... ] , octets ) . If `which` is set , it is the message to list .", "question_id": 7609, "for": 18448469, "retrieval_score": 43.374832}
{"snippet": "POP3.list()", "intent": "Request message list , result is in the form ( response , [ 'mesg_num octets ' , ... ] , octets ) .", "question_id": 7610, "for": 18448469, "retrieval_score": 40.64924}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 18448469, "retrieval_score": 39.819305}
{"snippet": "NNTP.list()", "intent": "Send a LIST or LIST ACTIVE command .", "question_id": 6465, "for": 18448469, "retrieval_score": 39.54434}
{"snippet": "POP3.uidl(which=None)", "intent": "Return message digest ( unique id ) list . If `which` is specified , result contains the unique id for that message in the form 'response mesgnum uid , otherwise result is list ( response , [ 'mesgnum uid ' , ... ] , octets ) .", "question_id": 7618, "for": 18448469, "retrieval_score": 39.288776}
{"snippet": "itertools.permutations(iterable)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5258, "for": 4059550, "retrieval_score": 19.851517}
{"snippet": "itertools.permutations(iterable, r=None)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5259, "for": 4059550, "retrieval_score": 19.851517}
{"snippet": "bytes.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9262, "for": 4059550, "retrieval_score": 14.0732155}
{"snippet": "bytearray.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9268, "for": 4059550, "retrieval_score": 14.0732155}
{"snippet": "memoryview.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the buffer .", "question_id": 9414, "for": 4059550, "retrieval_score": 14.0732155}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745, "for": 6889785, "retrieval_score": 21.485065}
{"snippet": "widget.selection_toggle(*items)", "intent": "Toggle the selection state of each item in items . With arguments `*items`.", "question_id": 10657, "for": 6889785, "retrieval_score": 20.645002}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 6889785, "retrieval_score": 20.460638}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 6889785, "retrieval_score": 20.42735}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 6889785, "retrieval_score": 20.101}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 17555218, "retrieval_score": 27.73145}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 17555218, "retrieval_score": 22.211191}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 17555218, "retrieval_score": 21.020529}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 17555218, "retrieval_score": 20.209732}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 17555218, "retrieval_score": 19.638268}
{"snippet": "logging.info(msg, *args, **kwargs)", "intent": "Logs a message with level INFO on the root logger . With arguments `msg`, `*args`, `**kwargs`.", "question_id": 5638, "for": 18292500, "retrieval_score": 19.308226}
{"snippet": "logging.warning(msg, *args, **kwargs)", "intent": "Logs a message with level WARNING on the root logger . With arguments `msg`, `*args`, `**kwargs`.", "question_id": 5639, "for": 18292500, "retrieval_score": 19.308226}
{"snippet": "logging.error(msg, *args, **kwargs)", "intent": "Logs a message with level ERROR on the root logger . With arguments `msg`, `*args`, `**kwargs`.", "question_id": 5640, "for": 18292500, "retrieval_score": 19.308226}
{"snippet": "logging.critical(msg, *args, **kwargs)", "intent": "Logs a message with level CRITICAL on the root logger . With arguments `msg`, `*args`, `**kwargs`.", "question_id": 5641, "for": 18292500, "retrieval_score": 19.308226}
{"snippet": "logging.exception(msg, *args, **kwargs)", "intent": "Logs a message with level ERROR on the root logger . With arguments `msg`, `*args`, `**kwargs`.", "question_id": 5642, "for": 18292500, "retrieval_score": 19.308226}
{"snippet": "date.toordinal()", "intent": "Return the proleptic Gregorian ordinal of the date , where January 1 of year 1 has ordinal 1 .", "question_id": 2238, "for": 1358977, "retrieval_score": 22.924984}
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221, "for": 1358977, "retrieval_score": 22.665417}
{"snippet": "datetime.fromordinal(ordinal)", "intent": "Return the datetime corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2264, "for": 1358977, "retrieval_score": 22.665417}
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223, "for": 1358977, "retrieval_score": 21.547659}
{"snippet": "datetime.min", "intent": "The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None).", "question_id": 2269, "for": 1358977, "retrieval_score": 20.864199}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 613183, "retrieval_score": 13.638994}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865, "for": 613183, "retrieval_score": 11.690344}
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866, "for": 613183, "retrieval_score": 11.690344}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867, "for": 613183, "retrieval_score": 11.690344}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 613183, "retrieval_score": 11.606222}
{"snippet": "plistlib.dump(value, fp, sort_keys=True)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . With arguments `fp`.", "question_id": 7565, "for": 613183, "retrieval_score": 11.345879}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490, "for": 613183, "retrieval_score": 10.511571}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518, "for": 613183, "retrieval_score": 10.36816}
{"snippet": "config_parser.read_dict(dictionary, source='<dict>')", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order . Optional argument `source` specifies a context-specific name of the dictionary passed .", "question_id": 1519, "for": 613183, "retrieval_score": 10.255745}
{"snippet": "plistlib.dump(value, fp, sort_keys=True, skipkeys=False)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . When `skipkeys` is false ( the default ) the function raises TypeError when a key of a dictionary is not a string , otherwise such keys are skipped . With arguments `fp`.", "question_id": 7569, "for": 613183, "retrieval_score": 10.062386}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 613183, "retrieval_score": 15.211424}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 613183, "retrieval_score": 14.134725}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 613183, "retrieval_score": 12.994127}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 613183, "retrieval_score": 12.297206}
{"snippet": "plistlib.dump(value, fp, sort_keys=True)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . With arguments `fp`.", "question_id": 7565, "for": 613183, "retrieval_score": 11.345879}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 613183, "retrieval_score": 15.211424}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 613183, "retrieval_score": 14.134725}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 613183, "retrieval_score": 12.994127}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 613183, "retrieval_score": 12.297206}
{"snippet": "plistlib.dump(value, fp, sort_keys=True)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . With arguments `fp`.", "question_id": 7565, "for": 613183, "retrieval_score": 11.345879}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427, "for": 31957364, "retrieval_score": 12.087711}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893, "for": 31957364, "retrieval_score": 11.457872}
{"snippet": "context.multiply(x, y)", "intent": "Return the product of `x` and `y` .", "question_id": 2554, "for": 31957364, "retrieval_score": 11.343064}
{"snippet": "itertools.product(*iterables)", "intent": "Cartesian product of input iterables . With arguments `*iterables`.", "question_id": 5260, "for": 31957364, "retrieval_score": 11.0475445}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261, "for": 31957364, "retrieval_score": 10.565634}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197, "for": 14041791, "retrieval_score": 15.312611}
{"snippet": "formatter.format(record)", "intent": "The `record` \u2019 s attribute dictionary is used as the operand to a string formatting operation .", "question_id": 5618, "for": 14041791, "retrieval_score": 12.027593}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160, "for": 14041791, "retrieval_score": 11.428283}
{"snippet": "queue_listener.debug(msg, *args, **kwargs)", "intent": "Logs a message with level DEBUG on this logger . The `msg` is the message format string , and the args are the arguments which are merged into msg using the string formatting operator . With arguments `*args`, `**kwargs`.", "question_id": 5570, "for": 14041791, "retrieval_score": 11.149776}
{"snippet": "logging.debug(msg, *args, **kwargs)", "intent": "Logs a message with level DEBUG on the root logger . The `msg` is the message format string , and the args are the arguments which are merged into msg using the string formatting operator . With arguments `*args`, `**kwargs`.", "question_id": 5637, "for": 14041791, "retrieval_score": 11.008673}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 30994370, "retrieval_score": 17.978422}
{"snippet": "ZipFile.comment", "intent": "The comment associated with the ZIP file as a bytes object.", "question_id": 12845, "for": 30994370, "retrieval_score": 16.027061}
{"snippet": "doctest.run_docstring_examples(f, globs)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context .", "question_id": 2786, "for": 30994370, "retrieval_score": 15.823913}
{"snippet": "ZipInfo.comment", "intent": "Comment for the individual archive member as a bytes object.", "question_id": 12866, "for": 30994370, "retrieval_score": 15.694128}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126, "for": 30994370, "retrieval_score": 15.44776}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394, "for": 6490560, "retrieval_score": 21.597797}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 6490560, "retrieval_score": 12.90697}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640, "for": 6490560, "retrieval_score": 12.905284}
{"snippet": "widget.next(item)", "intent": "Returns the identifier of `item` \u2019 s next sibling , or \u2018 \u2019 if item is the last child of its parent .", "question_id": 10645, "for": 6490560, "retrieval_score": 12.87576}
{"snippet": "widget.get_children()", "intent": "Returns the list of children belonging to `item` .", "question_id": 10622, "for": 6490560, "retrieval_score": 12.714267}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 40173569, "retrieval_score": 17.125551}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 40173569, "retrieval_score": 16.40823}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 40173569, "retrieval_score": 13.56011}
{"snippet": "datetime.strptime(date_string, format)", "intent": "Return a datetime corresponding to `date_string` , parsed according to `format` .", "question_id": 2268, "for": 40173569, "retrieval_score": 11.977925}
{"snippet": "datetime.utctimetuple()", "intent": "If datetime instance d is naive , this is the same as d.timetuple ( ) except that tm_isdst is forced to 0 regardless of what d.dst ( ) returns .", "question_id": 2300, "for": 40173569, "retrieval_score": 11.382681}
{"snippet": "str.endswith(suffix)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False .", "question_id": 9191, "for": 1749466, "retrieval_score": 10.867704}
{"snippet": "os.path.normcase(path)", "intent": "Normalize the case of a pathname . On other operating systems , return the `path` unchanged .", "question_id": 7161, "for": 1749466, "retrieval_score": 9.987826}
{"snippet": "readline.parse_and_bind(string)", "intent": "Execute the init line provided in the `string` argument .", "question_id": 8015, "for": 1749466, "retrieval_score": 9.419302}
{"snippet": "text_calendar.formatmonth(theyear, themonth)", "intent": "Return a month \u2019 s calendar in a multi-line string . With arguments `theyear`, `themonth`.", "question_id": 928, "for": 1749466, "retrieval_score": 9.35365}
{"snippet": "doctest.DONT_ACCEPT_BLANKLINE", "intent": "By default, if an expected output block contains a line containing only the string <BLANKLINE>, then that line will match a blank line in the actual output.", "question_id": 2753, "for": 1749466, "retrieval_score": 9.333622}
{"snippet": "Path.home()", "intent": "Return a new path object representing the user \u2019 s home directory ( as returned by os.path.expanduser ( ) with ~ construct ) :", "question_id": 7266, "for": 2668909, "retrieval_score": 18.272196}
{"snippet": "os.path.expanduser(path)", "intent": "On Unix and Windows , return the argument with an initial component of ~ or ~user replaced by that user \u2019 s home directory . An initial ~user is handled by stripping the last directory component from the created user `path` derived above .", "question_id": 7149, "for": 2668909, "retrieval_score": 17.169348}
{"snippet": "os.getuid()", "intent": "Return the current process \u2019 s real user id .", "question_id": 6690, "for": 2668909, "retrieval_score": 13.623395}
{"snippet": "os.setreuid(ruid, euid)", "intent": "Set the current process \u2019 s real and effective user ids . With arguments `ruid`, `euid`.", "question_id": 6703, "for": 2668909, "retrieval_score": 11.781712}
{"snippet": "os.setresuid(ruid, euid, suid)", "intent": "Set the current process \u2019 s real , effective , and saved user ids . With arguments `ruid`, `euid`, `suid`.", "question_id": 6702, "for": 2668909, "retrieval_score": 11.273698}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670, "for": 1012185, "retrieval_score": 14.597841}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 1012185, "retrieval_score": 14.135662}
{"snippet": "widget.index(item)", "intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "question_id": 10639, "for": 1012185, "retrieval_score": 13.484001}
{"snippet": "NNTP.list(file=None)", "intent": "Send a LIST or LIST ACTIVE command . With arguments `file`.", "question_id": 6467, "for": 1012185, "retrieval_score": 12.281648}
{"snippet": "NNTP.list(group_pattern=None, file=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` . With arguments `file`.", "question_id": 6468, "for": 1012185, "retrieval_score": 11.672954}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 7745260, "retrieval_score": 22.05953}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 7745260, "retrieval_score": 22.05953}
{"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241, "for": 7745260, "retrieval_score": 22.05953}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242, "for": 7745260, "retrieval_score": 22.05953}
{"snippet": "element.tag", "intent": "A string identifying what kind of data this element represents (the element type, in other words).", "question_id": 12479, "for": 7745260, "retrieval_score": 18.137352}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 37619348, "retrieval_score": 25.604624}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 37619348, "retrieval_score": 23.52023}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 37619348, "retrieval_score": 21.853134}
{"snippet": "SSLContext.get_ca_certs(binary_form=False)", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "question_id": 9012, "for": 37619348, "retrieval_score": 20.610016}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 37619348, "retrieval_score": 19.433775}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 37619348, "retrieval_score": 20.023201}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454, "for": 37619348, "retrieval_score": 17.501335}
{"snippet": "test_case.assertTupleEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11456, "for": 37619348, "retrieval_score": 17.501335}
{"snippet": "test_case.assertListEqual(first, second, msg=None)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`, `msg`.", "question_id": 11455, "for": 37619348, "retrieval_score": 17.097925}
{"snippet": "test_case.assertTupleEqual(first, second, msg=None)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`, `msg`.", "question_id": 11457, "for": 37619348, "retrieval_score": 17.097925}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 35097130, "retrieval_score": 12.19403}
{"snippet": "NNTP.over(message_spec)", "intent": "Send an OVER command , or an XOVER command on legacy servers . `message_spec` can be either a string representing a message id , or a ( first , last ) tuple of numbers indicating a range of articles in the current group , or a ( first , None ) tuple indicating a range of articles starting from first to the last article in the current group , or None to select the current article in the current group .", "question_id": 6472, "for": 35097130, "retrieval_score": 11.897904}
{"snippet": "asyncio.PriorityQueue", "intent": "A variant of Queue; retrieves entries in priority order (lowest first).", "question_id": 459, "for": 35097130, "retrieval_score": 11.604712}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271, "for": 35097130, "retrieval_score": 11.604712}
{"snippet": "NNTP.over(message_spec, file=None)", "intent": "Send an OVER command , or an XOVER command on legacy servers . `message_spec` can be either a string representing a message id , or a ( first , last ) tuple of numbers indicating a range of articles in the current group , or a ( first , None ) tuple indicating a range of articles starting from first to the last article in the current group , or None to select the current article in the current group . With arguments `file`.", "question_id": 6473, "for": 35097130, "retrieval_score": 11.545232}
{"snippet": "datetime.utcnow()", "intent": "Return the current UTC date and time , with tzinfo None .", "question_id": 2260, "for": 27587127, "retrieval_score": 22.032585}
{"snippet": "datetime.astimezone()", "intent": "Return a datetime object with new tzinfo attribute `tz` , adjusting the date and time data so the result is the same UTC time as self , but in tz \u2019 s local time .", "question_id": 2294, "for": 27587127, "retrieval_score": 18.957886}
{"snippet": "datetime.astimezone(tz=None)", "intent": "Return a datetime object with new tzinfo attribute `tz` , adjusting the date and time data so the result is the same UTC time as self , but in tz \u2019 s local time .", "question_id": 2295, "for": 27587127, "retrieval_score": 18.957886}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263, "for": 27587127, "retrieval_score": 18.313887}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 27587127, "retrieval_score": 17.346342}
{"snippet": "ZipFile.infolist()", "intent": "Return a list containing a ZipInfo object for each member of the archive .", "question_id": 12804, "for": 10271484, "retrieval_score": 23.87745}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 10271484, "retrieval_score": 21.387537}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 10271484, "retrieval_score": 21.169483}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 10271484, "retrieval_score": 21.07314}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243, "for": 10271484, "retrieval_score": 20.940105}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 14571103, "retrieval_score": 20.889868}
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925, "for": 14571103, "retrieval_score": 20.889868}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991, "for": 14571103, "retrieval_score": 18.388264}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706, "for": 14571103, "retrieval_score": 16.730003}
{"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707, "for": 14571103, "retrieval_score": 16.730003}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939, "for": 14571103, "retrieval_score": 15.012878}
{"snippet": "re.fullmatch(pattern, string)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object .", "question_id": 7941, "for": 14571103, "retrieval_score": 14.965103}
{"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937, "for": 14571103, "retrieval_score": 14.528689}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940, "for": 14571103, "retrieval_score": 14.298492}
{"snippet": "re.fullmatch(pattern, string, flags=0)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7942, "for": 14571103, "retrieval_score": 14.037221}
{"snippet": "json.JSONDecoder(parse_float=None)", "intent": "Simple JSON decoder . `parse_float` , if specified , will be called with the string of every JSON float to be decoded .", "question_id": 5312, "for": 26033239, "retrieval_score": 21.593096}
{"snippet": "json.JSONDecoder(parse_int=None)", "intent": "Simple JSON decoder . `parse_int` , if specified , will be called with the string of every JSON int to be decoded .", "question_id": 5313, "for": 26033239, "retrieval_score": 21.593096}
{"snippet": "json.JSONDecoder(object_pairs_hook=None)", "intent": "Simple JSON decoder . `object_pairs_hook` , if specified will be called with the result of every JSON object decoded with an ordered list of pairs .", "question_id": 5316, "for": 26033239, "retrieval_score": 21.428051}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333, "for": 26033239, "retrieval_score": 20.889713}
{"snippet": "json.JSONDecoder(object_hook=None, parse_float=None)", "intent": "Simple JSON decoder . `object_hook` , if specified , will be called with the result of every JSON object decoded and its return value will be used in place of the given dict . `parse_float` , if specified , will be called with the string of every JSON float to be decoded .", "question_id": 5317, "for": 26033239, "retrieval_score": 18.087317}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639, "for": 8528178, "retrieval_score": 10.083201}
{"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325, "for": 8528178, "retrieval_score": 9.724781}
{"snippet": "heapq.nsmallest(n, iterable)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` .", "question_id": 4327, "for": 8528178, "retrieval_score": 9.724781}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343, "for": 8528178, "retrieval_score": 9.695433}
{"snippet": "counter.most_common()", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1344, "for": 8528178, "retrieval_score": 9.695433}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 4182603, "retrieval_score": 17.75611}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 4182603, "retrieval_score": 16.8863}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 4182603, "retrieval_score": 16.8863}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 4182603, "retrieval_score": 15.794124}
{"snippet": "bytes.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9278, "for": 4182603, "retrieval_score": 14.38999}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 11985628, "retrieval_score": 15.140866}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 11985628, "retrieval_score": 15.140866}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939, "for": 11985628, "retrieval_score": 14.820929}
{"snippet": "re.fullmatch(pattern, string)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object .", "question_id": 7941, "for": 11985628, "retrieval_score": 14.787368}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 11985628, "retrieval_score": 14.660501}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 12905999, "retrieval_score": 25.27558}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488, "for": 12905999, "retrieval_score": 24.016632}
{"snippet": "element.get(key, default=None)", "intent": "Gets the element attribute named `key` . Returns the attribute value , or `default` if the attribute was not found .", "question_id": 12485, "for": 12905999, "retrieval_score": 23.049389}
{"snippet": "urllib.parse.urlencode(query, doseq=False, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11741, "for": 12905999, "retrieval_score": 22.555887}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 12905999, "retrieval_score": 22.317007}
{"snippet": "os.sched_get_priority_min(policy)", "intent": "Get the minimum priority value for `policy` .", "question_id": 7105, "for": 14956683, "retrieval_score": 19.24681}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 14956683, "retrieval_score": 18.26371}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426, "for": 14956683, "retrieval_score": 15.4725275}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 14956683, "retrieval_score": 15.19462}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 14956683, "retrieval_score": 14.989519}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 577234, "retrieval_score": 27.044}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 577234, "retrieval_score": 25.767843}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 577234, "retrieval_score": 25.767843}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 577234, "retrieval_score": 24.62785}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 577234, "retrieval_score": 24.62785}
{"snippet": "mailbox.iteritems()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5734, "for": 13254241, "retrieval_score": 21.544014}
{"snippet": "mailbox.items()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5735, "for": 13254241, "retrieval_score": 21.544014}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 13254241, "retrieval_score": 19.72759}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 13254241, "retrieval_score": 19.72759}
{"snippet": "mailbox.update(arg)", "intent": "Parameter `arg` should be a key-to-message mapping or an iterable of ( key , message ) pairs .", "question_id": 5749, "for": 13254241, "retrieval_score": 19.274923}
{"snippet": "mailbox.iteritems()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5734, "for": 13254241, "retrieval_score": 16.016754}
{"snippet": "mailbox.items()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5735, "for": 13254241, "retrieval_score": 16.016754}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 13254241, "retrieval_score": 13.799397}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 13254241, "retrieval_score": 13.731976}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 13254241, "retrieval_score": 13.731976}
{"snippet": "errno.EL3HLT", "intent": "Level 3 halted", "question_id": 3551, "for": 15451958, "retrieval_score": 16.105307}
{"snippet": "errno.EL3RST", "intent": "Level 3 reset", "question_id": 3552, "for": 15451958, "retrieval_score": 16.105307}
{"snippet": "secrets.SystemRandom", "intent": "A class for generating random numbers using the highest-quality sources provided by the operating system.", "question_id": 8131, "for": 15451958, "retrieval_score": 14.861177}
{"snippet": "random.SystemRandom()", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system .", "question_id": 7921, "for": 15451958, "retrieval_score": 14.54754}
{"snippet": "netrc.authenticators(host)", "intent": "Return a 3-tuple ( login , account , password ) of authenticators for `host` .", "question_id": 6387, "for": 15451958, "retrieval_score": 14.131867}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 34023918, "retrieval_score": 14.951639}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 34023918, "retrieval_score": 14.951639}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939, "for": 34023918, "retrieval_score": 14.951639}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 34023918, "retrieval_score": 14.951639}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 34023918, "retrieval_score": 14.951639}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 10484261, "retrieval_score": 23.250448}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 10484261, "retrieval_score": 23.250448}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927, "for": 10484261, "retrieval_score": 22.186947}
{"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928, "for": 10484261, "retrieval_score": 22.186947}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 10484261, "retrieval_score": 22.153828}
{"snippet": "resource_reader.resource_path(resource)", "intent": "Returns the file system path to the `resource` .", "question_id": 4820, "for": 9153527, "retrieval_score": 19.766838}
{"snippet": "os.pathsep", "intent": "The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows.", "question_id": 7126, "for": 9153527, "retrieval_score": 19.290688}
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309, "for": 9153527, "retrieval_score": 19.15596}
{"snippet": "os.statvfs(path)", "intent": "Perform a statvfs ( ) system call on the given `path` .", "question_id": 6946, "for": 9153527, "retrieval_score": 18.851892}
{"snippet": "os.fspath(path)", "intent": "Return the file system representation of the `path` .", "question_id": 6665, "for": 9153527, "retrieval_score": 18.46442}
{"snippet": "locale.THOUSEP", "intent": "Get the separator character for thousands (groups of three digits).", "question_id": 5364, "for": 34338341, "retrieval_score": 17.60051}
{"snippet": "str.isdigit()", "intent": "Return true if all characters in the string are digits and there is at least one character , false otherwise .", "question_id": 9206, "for": 34338341, "retrieval_score": 17.04396}
{"snippet": "locale.CODESET", "intent": "Get a string with the name of the character encoding used in the selected locale.", "question_id": 5354, "for": 34338341, "retrieval_score": 14.85004}
{"snippet": "context.logical_invert(x)", "intent": "Invert all the digits in `x` .", "question_id": 2546, "for": 34338341, "retrieval_score": 14.434122}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348, "for": 34338341, "retrieval_score": 13.820223}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392, "for": 18229082, "retrieval_score": 14.924557}
{"snippet": "pickle.Unpickler(file, fix_imports=True)", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7399, "for": 18229082, "retrieval_score": 13.710003}
{"snippet": "pickle.Unpickler(file, encoding=\"ASCII\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7400, "for": 18229082, "retrieval_score": 13.710003}
{"snippet": "pickle.Unpickler(file, errors=\"strict\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7401, "for": 18229082, "retrieval_score": 13.710003}
{"snippet": "pickle.Unpickler(file, fix_imports=True, encoding=\"ASCII\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7402, "for": 18229082, "retrieval_score": 13.710003}
{"snippet": "json.loads(s, **kw)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5300, "for": 17498027, "retrieval_score": 10.502684}
{"snippet": "json.loads(s, **kw, cls=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`, `cls`.", "question_id": 5302, "for": 17498027, "retrieval_score": 10.318149}
{"snippet": "json.loads(s, **kw, object_hook=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`, `object_hook`.", "question_id": 5303, "for": 17498027, "retrieval_score": 10.318149}
{"snippet": "json.loads(s, **kw, parse_float=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`, `parse_float`.", "question_id": 5304, "for": 17498027, "retrieval_score": 10.318149}
{"snippet": "json.loads(s, **kw, parse_int=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`, `parse_int`.", "question_id": 5305, "for": 17498027, "retrieval_score": 10.318149}
{"snippet": "mmap.move(dest, src, count)", "intent": "Copy the `count` bytes starting at offset `src` to the destination index `dest` .", "question_id": 6008, "for": 35178812, "retrieval_score": 12.399146}
{"snippet": "mailbox.__len__()", "intent": "Return a count of messages in the mailbox .", "question_id": 5744, "for": 35178812, "retrieval_score": 12.040332}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 35178812, "retrieval_score": 11.642427}
{"snippet": "POP3.uidl(which=None)", "intent": "Return message digest ( unique id ) list . If `which` is specified , result contains the unique id for that message in the form 'response mesgnum uid , otherwise result is list ( response , [ 'mesgnum uid ' , ... ] , octets ) .", "question_id": 7618, "for": 35178812, "retrieval_score": 11.286217}
{"snippet": "xmlparser.CurrentByteIndex", "intent": "Current byte index in the parser input.", "question_id": 7752, "for": 35178812, "retrieval_score": 11.262043}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds)", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "question_id": 1702, "for": 15455388, "retrieval_score": 17.86765}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "question_id": 1703, "for": 15455388, "retrieval_score": 17.86765}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704, "for": 15455388, "retrieval_score": 17.655437}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1706, "for": 15455388, "retrieval_score": 17.655437}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1708, "for": 15455388, "retrieval_score": 17.655437}
{"snippet": "Match.lastindex", "intent": "The integer index of the last matched capturing group, or None if no group was matched at all.", "question_id": 8011, "for": 14914615, "retrieval_score": 22.521578}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 14914615, "retrieval_score": 20.747698}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 14914615, "retrieval_score": 20.747698}
{"snippet": "operator.getitem(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6575, "for": 14914615, "retrieval_score": 20.747698}
{"snippet": "operator.__getitem__(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6576, "for": 14914615, "retrieval_score": 20.747698}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 21833383, "retrieval_score": 23.869741}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 21833383, "retrieval_score": 18.476818}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 21833383, "retrieval_score": 15.211424}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 21833383, "retrieval_score": 13.796541}
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925, "for": 21833383, "retrieval_score": 13.796541}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426, "for": 19643099, "retrieval_score": 34.91189}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 19643099, "retrieval_score": 30.334034}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 19643099, "retrieval_score": 28.43114}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 19643099, "retrieval_score": 27.428339}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 19643099, "retrieval_score": 27.264397}
{"snippet": "float.fromhex(s)", "intent": "Class method to return the float represented by a hexadecimal string s. The string `s` may have leading and trailing whitespace .", "question_id": 9150, "for": 1185524, "retrieval_score": 13.23106}
{"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515, "for": 1185524, "retrieval_score": 10.625662}
{"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580, "for": 1185524, "retrieval_score": 10.226831}
{"snippet": "str.isspace()", "intent": "Return true if there are only whitespace characters in the string and there is at least one character , false otherwise .", "question_id": 9211, "for": 1185524, "retrieval_score": 10.062459}
{"snippet": "mime_version_header.version", "intent": "The version number as a string, with any whitespace and/or comments removed.", "question_id": 3164, "for": 1185524, "retrieval_score": 9.89089}
{"snippet": "deque.appendleft(x)", "intent": "Add `x` to the left side of the deque .", "question_id": 1354, "for": 1185524, "retrieval_score": 15.27123}
{"snippet": "deque.extendleft(iterable)", "intent": "Extend the left side of the deque by appending elements from `iterable` .", "question_id": 1359, "for": 1185524, "retrieval_score": 14.203032}
{"snippet": "deque.popleft()", "intent": "Remove and return an element from the left side of the deque .", "question_id": 1365, "for": 1185524, "retrieval_score": 14.203032}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, istext=True)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded .", "question_id": 832, "for": 1185524, "retrieval_score": 12.057275}
{"snippet": "errno.ENOSPC", "intent": "No space left on device", "question_id": 3533, "for": 1185524, "retrieval_score": 11.540989}
{"snippet": "deque.append(x)", "intent": "Add `x` to the right side of the deque .", "question_id": 1353, "for": 1185524, "retrieval_score": 15.702807}
{"snippet": "deque.pop()", "intent": "Remove and return an element from the right side of the deque .", "question_id": 1364, "for": 1185524, "retrieval_score": 14.60406}
{"snippet": "deque.extend(iterable)", "intent": "Extend the right side of the deque by appending elements from the `iterable` argument .", "question_id": 1358, "for": 1185524, "retrieval_score": 14.007529}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857, "for": 1185524, "retrieval_score": 12.658231}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 1185524, "retrieval_score": 12.658231}
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445, "for": 1185524, "retrieval_score": 12.862478}
{"snippet": "stringprep.in_table_d1(code)", "intent": "Determine whether `code` is in tableD.1 ( Characters with bidirectional property \u201c R \u201d or \u201c AL \u201d ) .", "question_id": 9548, "for": 1185524, "retrieval_score": 12.833788}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990, "for": 1185524, "retrieval_score": 11.346969}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 1185524, "retrieval_score": 10.620059}
{"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346, "for": 1185524, "retrieval_score": 10.620059}
{"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300, "for": 1185524, "retrieval_score": 13.144431}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018, "for": 1185524, "retrieval_score": 10.971385}
{"snippet": "text_wrapper.break_on_hyphens", "intent": "(default: True) If true, wrapping will occur preferably on whitespaces and right after hyphens in compound words, as it is customary in English.", "question_id": 10336, "for": 1185524, "retrieval_score": 10.267689}
{"snippet": "binascii.b2a_qp(data, quotetabs=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded .", "question_id": 829, "for": 1185524, "retrieval_score": 10.03524}
{"snippet": "widget.index(tab_id)", "intent": "Returns the numeric index of the tab specified by `tab_id` , or the total number of tabs if tab_id is the string \u201c end \u201d .", "question_id": 10607, "for": 1185524, "retrieval_score": 9.379082}
{"snippet": "asyncio.gather(*aws, return_exceptions=False)", "intent": "Run awaitable objects in the aws sequence concurrently . If `return_exceptions` is False ( default ) , the first raised exception is immediately propagated to the task that awaits on gather ( ) . With arguments `*aws`.", "question_id": 601, "for": 1516795, "retrieval_score": 13.09262}
{"snippet": "asyncio.gather(*aws, loop=None, return_exceptions=False)", "intent": "Run awaitable objects in the aws sequence concurrently . If `return_exceptions` is False ( default ) , the first raised exception is immediately propagated to the task that awaits on gather ( ) . With arguments `*aws`, `loop`.", "question_id": 602, "for": 1516795, "retrieval_score": 12.87933}
{"snippet": "tkinter.tix.Form", "intent": "The Form geometry manager based on attachment rules for all Tk widgets.", "question_id": 10578, "for": 1516795, "retrieval_score": 12.559848}
{"snippet": "asyncio.all_tasks()", "intent": "Return a set of not yet finished Task objects run by the `loop` .", "question_id": 622, "for": 1516795, "retrieval_score": 12.228343}
{"snippet": "asyncio.all_tasks(loop=None)", "intent": "Return a set of not yet finished Task objects run by the `loop` .", "question_id": 623, "for": 1516795, "retrieval_score": 12.228343}
{"snippet": "turtle.bgcolor(*args)", "intent": "Set or return background color of the TurtleScreen . With arguments `*args`.", "question_id": 11040, "for": 2744795, "retrieval_score": 16.725765}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081, "for": 2744795, "retrieval_score": 11.457872}
{"snippet": "turtle.done()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11082, "for": 2744795, "retrieval_score": 11.457872}
{"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946, "for": 2744795, "retrieval_score": 10.462961}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927, "for": 2744795, "retrieval_score": 10.4254055}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 15579649, "retrieval_score": 14.794095}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 15579649, "retrieval_score": 13.364143}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136, "for": 15579649, "retrieval_score": 11.514525}
{"snippet": "email.headerregistry.AddressHeader", "intent": "Address headers are one of the most complex structured header types.", "question_id": 3158, "for": 15579649, "retrieval_score": 11.261951}
{"snippet": "array.typecode", "intent": "The typecode character used to create the array.", "question_id": 118, "for": 15579649, "retrieval_score": 8.385504}
{"snippet": "aifc.getnchannels()", "intent": "Return the number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 11, "for": 41192805, "retrieval_score": 12.134945}
{"snippet": "AU_read.getnchannels()", "intent": "Returns number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 9708, "for": 41192805, "retrieval_score": 12.044413}
{"snippet": "Wave_read.getnchannels()", "intent": "Returns number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 12051, "for": 41192805, "retrieval_score": 12.044413}
{"snippet": "logging.handlers.RotatingFileHandler(filename, maxBytes=0)", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . You can use the `maxBytes` and `backupCount` values to allow the file to rollover at a predetermined size .", "question_id": 5460, "for": 41192805, "retrieval_score": 11.64457}
{"snippet": "logging.handlers.RotatingFileHandler(filename, backupCount=0)", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . You can use the `maxBytes` and `backupCount` values to allow the file to rollover at a predetermined size .", "question_id": 5461, "for": 41192805, "retrieval_score": 11.64457}
{"snippet": "errno.EBADFD", "intent": "File descriptor in bad state", "question_id": 3582, "for": 2556108, "retrieval_score": 13.241851}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 2556108, "retrieval_score": 12.250983}
{"snippet": "errno.EFAULT", "intent": "Bad address", "question_id": 3519, "for": 2556108, "retrieval_score": 12.063629}
{"snippet": "ast.literal_eval(node_or_string)", "intent": "Safely evaluate an expression node or a string containing a Python literal or container display . With arguments `node_or_string`.", "question_id": 149, "for": 2556108, "retrieval_score": 12.001106}
{"snippet": "errno.EBADF", "intent": "Bad file number", "question_id": 3514, "for": 2556108, "retrieval_score": 11.702264}
{"snippet": "tracemalloc.get_traceback_limit()", "intent": "Get the maximum number of frames stored in the traceback of a trace .", "question_id": 10843, "for": 42211584, "retrieval_score": 15.109793}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 42211584, "retrieval_score": 14.527619}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 42211584, "retrieval_score": 13.060219}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 42211584, "retrieval_score": 12.865631}
{"snippet": "os.sched_get_priority_max(policy)", "intent": "Get the maximum priority value for `policy` .", "question_id": 7106, "for": 42211584, "retrieval_score": 12.78194}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 5301996, "retrieval_score": 11.203967}
{"snippet": "AU_read.getnchannels()", "intent": "Returns number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 9708, "for": 5301996, "retrieval_score": 10.904476}
{"snippet": "Wave_read.getnchannels()", "intent": "Returns number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 12051, "for": 5301996, "retrieval_score": 10.904476}
{"snippet": "aifc.getnchannels()", "intent": "Return the number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 11, "for": 5301996, "retrieval_score": 10.647194}
{"snippet": "os.getgroups()", "intent": "Return list of supplemental group ids associated with the current process .", "question_id": 6678, "for": 5301996, "retrieval_score": 10.35098}
{"snippet": "re.L", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7929, "for": 8993904, "retrieval_score": 23.405159}
{"snippet": "re.LOCALE", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7930, "for": 8993904, "retrieval_score": 23.405159}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927, "for": 8993904, "retrieval_score": 20.762947}
{"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928, "for": 8993904, "retrieval_score": 20.762947}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 8993904, "retrieval_score": 17.369625}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857, "for": 40498088, "retrieval_score": 12.921388}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 40498088, "retrieval_score": 12.816387}
{"snippet": "SSLContext.get_ca_certs()", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates .", "question_id": 9011, "for": 40498088, "retrieval_score": 11.840111}
{"snippet": "IMAP4.getquotaroot(mailbox)", "intent": "Get the list of quota roots for the named `mailbox` .", "question_id": 4705, "for": 40498088, "retrieval_score": 11.54692}
{"snippet": "locale.CODESET", "intent": "Get a string with the name of the character encoding used in the selected locale.", "question_id": 5354, "for": 40498088, "retrieval_score": 10.989918}
{"snippet": "http.cookies.BaseCookie()", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances .", "question_id": 4579, "for": 1920145, "retrieval_score": 18.260883}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 1920145, "retrieval_score": 17.01177}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 1920145, "retrieval_score": 17.01177}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 1920145, "retrieval_score": 16.53596}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 1920145, "retrieval_score": 16.53596}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 13837848, "retrieval_score": 16.413794}
{"snippet": "ctypes.c_wchar", "intent": "Represents the C wchar_t datatype, and interprets the value as a single character unicode string.", "question_id": 1881, "for": 13837848, "retrieval_score": 16.332542}
{"snippet": "gnu_translations.gettext(message)", "intent": "Look up the `message` id in the catalog and return the corresponding message string , as a Unicode string .", "question_id": 4261, "for": 13837848, "retrieval_score": 13.624604}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 13837848, "retrieval_score": 13.416223}
{"snippet": "Node.toxml(encoding=None)", "intent": "Return a string or byte string containing the XML represented by the DOM node . With an explicit `encoding` 1 argument , the result is a byte string in the specified encoding .", "question_id": 12412, "for": 13837848, "retrieval_score": 13.098682}
{"snippet": "os.terminal_size", "intent": "A subclass of tuple, holding (columns, lines) of the terminal window size.", "question_id": 6813, "for": 23354124, "retrieval_score": 16.327847}
{"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957, "for": 23354124, "retrieval_score": 15.968555}
{"snippet": "os.get_terminal_size()", "intent": "Return the size of the terminal window as ( columns , lines ) , tuple of type terminal_size .", "question_id": 6811, "for": 23354124, "retrieval_score": 14.832244}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073, "for": 23354124, "retrieval_score": 14.013411}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997, "for": 23354124, "retrieval_score": 13.950975}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 6416131, "retrieval_score": 17.15612}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 6416131, "retrieval_score": 17.15612}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 6416131, "retrieval_score": 16.835993}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 6416131, "retrieval_score": 15.927481}
{"snippet": "dict.pop(key, default)", "intent": "If `key` is in the dictionary , remove it and return its value , else return `default` .", "question_id": 9486, "for": 6416131, "retrieval_score": 15.059834}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 6416131, "retrieval_score": 17.15612}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 6416131, "retrieval_score": 17.15612}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 6416131, "retrieval_score": 16.835993}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 6416131, "retrieval_score": 15.927481}
{"snippet": "dict.pop(key, default)", "intent": "If `key` is in the dictionary , remove it and return its value , else return `default` .", "question_id": 9486, "for": 6416131, "retrieval_score": 15.059834}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 6416131, "retrieval_score": 20.118885}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 6416131, "retrieval_score": 19.16951}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 6416131, "retrieval_score": 19.16951}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 6416131, "retrieval_score": 18.72765}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 6416131, "retrieval_score": 18.72765}
{"snippet": "NNTP.xhdr(hdr, str)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search .", "question_id": 6497, "for": 40016359, "retrieval_score": 12.356343}
{"snippet": "asyncio.LifoQueue", "intent": "A variant of Queue that retrieves most recently added entries first (last in, first out).", "question_id": 460, "for": 40016359, "retrieval_score": 12.09626}
{"snippet": "turtle.clearstamps()", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10931, "for": 40016359, "retrieval_score": 12.068993}
{"snippet": "turtle.clearstamps(n=None)", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10932, "for": 40016359, "retrieval_score": 12.068993}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013, "for": 40016359, "retrieval_score": 11.852228}
{"snippet": "event.clear()", "intent": "Reset the internal flag to false .", "question_id": 10409, "for": 20490274, "retrieval_score": 10.420789}
{"snippet": "incremental_encoder.reset()", "intent": "Reset the encoder to the initial state .", "question_id": 1269, "for": 20490274, "retrieval_score": 10.1420355}
{"snippet": "incremental_decoder.reset()", "intent": "Reset the decoder to the initial state .", "question_id": 1276, "for": 20490274, "retrieval_score": 10.1420355}
{"snippet": "errno.EL3RST", "intent": "Level 3 reset", "question_id": 3552, "for": 20490274, "retrieval_score": 9.859764}
{"snippet": "HTMLParser.reset()", "intent": "Reset the instance .", "question_id": 4353, "for": 20490274, "retrieval_score": 9.859764}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360, "for": 18872717, "retrieval_score": 43.795807}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361, "for": 18872717, "retrieval_score": 43.795807}
{"snippet": "deque.index(x)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1362, "for": 18872717, "retrieval_score": 43.795807}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 18872717, "retrieval_score": 39.30467}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 18872717, "retrieval_score": 39.30467}
{"snippet": "os.path.realpath(path)", "intent": "Return the canonical `path` of the specified filename , eliminating any symbolic links encountered in the path ( if they are supported by the operating system ) .", "question_id": 7163, "for": 3220755, "retrieval_score": 19.311596}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770, "for": 3220755, "retrieval_score": 15.528864}
{"snippet": "shutil.unpack_archive(filename)", "intent": "Unpack an archive . `filename` is the full path of the archive .", "question_id": 8365, "for": 3220755, "retrieval_score": 13.948207}
{"snippet": "test.support.findfile(filename)", "intent": "Return the path to the file named `filename` .", "question_id": 10151, "for": 3220755, "retrieval_score": 13.794837}
{"snippet": "dir_entry.name", "intent": "The entry\u2019s base filename, relative to the scandir() path argument.", "question_id": 6907, "for": 3220755, "retrieval_score": 13.120984}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 18170459, "retrieval_score": 26.121353}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 18170459, "retrieval_score": 25.03342}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 18170459, "retrieval_score": 24.957006}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126, "for": 18170459, "retrieval_score": 21.4553}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 18170459, "retrieval_score": 21.42398}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 27175400, "retrieval_score": 12.737146}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122, "for": 27175400, "retrieval_score": 12.487175}
{"snippet": "date.toordinal()", "intent": "Return the proleptic Gregorian ordinal of the date , where January 1 of year 1 has ordinal 1 .", "question_id": 2238, "for": 27175400, "retrieval_score": 12.24135}
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221, "for": 27175400, "retrieval_score": 12.064796}
{"snippet": "datetime.fromordinal(ordinal)", "intent": "Return the datetime corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2264, "for": 27175400, "retrieval_score": 12.064796}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 27175400, "retrieval_score": 15.859163}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 27175400, "retrieval_score": 14.166238}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424, "for": 27175400, "retrieval_score": 13.935703}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 27175400, "retrieval_score": 13.603724}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 27175400, "retrieval_score": 13.603724}
{"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322, "for": 14507794, "retrieval_score": 13.08693}
{"snippet": "tkinter.tix.Tree", "intent": "The Tree widget can be used to display hierarchical data in a tree form.", "question_id": 10572, "for": 14507794, "retrieval_score": 12.400199}
{"snippet": "Telnet.msg(msg, *args)", "intent": "Print a debug message when the debug level is > 0 . With arguments `msg`, `*args`.", "question_id": 10022, "for": 14507794, "retrieval_score": 9.586296}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 14507794, "retrieval_score": 9.559143}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 14507794, "retrieval_score": 9.499569}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 4690366, "retrieval_score": 15.866804}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 4690366, "retrieval_score": 13.774036}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 4690366, "retrieval_score": 13.774036}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 4690366, "retrieval_score": 12.829831}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 4690366, "retrieval_score": 11.649732}
{"snippet": "readline.set_completer_delims(string)", "intent": "Set or get the word delimiters for completion . With arguments `string`.", "question_id": 8046, "for": 20735384, "retrieval_score": 16.422316}
{"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047, "for": 20735384, "retrieval_score": 14.724363}
{"snippet": "locale.CODESET", "intent": "Get a string with the name of the character encoding used in the selected locale.", "question_id": 5354, "for": 20735384, "retrieval_score": 13.363844}
{"snippet": "writer.send_flowing_data(data)", "intent": "Output character `data` which may be word-wrapped and re-flowed as needed .", "question_id": 3850, "for": 20735384, "retrieval_score": 12.796749}
{"snippet": "textwrap.indent(text, prefix)", "intent": "Add `prefix` to the beginning of selected lines in `text` .", "question_id": 10324, "for": 20735384, "retrieval_score": 12.126143}
{"snippet": "os.sched_get_priority_min(policy)", "intent": "Get the minimum priority value for `policy` .", "question_id": 7105, "for": 39277638, "retrieval_score": 14.723332}
{"snippet": "curses.ascii.controlnames", "intent": "A 33-element string array that contains the ASCII mnemonics for the thirty-two ASCII control characters from 0 (NUL) to 0x1f (US), in order, plus the mnemonic SP for the space character.", "question_id": 1918, "for": 39277638, "retrieval_score": 14.265682}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 39277638, "retrieval_score": 14.076117}
{"snippet": "locale.THOUSEP", "intent": "Get the separator character for thousands (groups of three digits).", "question_id": 5364, "for": 39277638, "retrieval_score": 14.037839}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427, "for": 39277638, "retrieval_score": 12.087711}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002, "for": 12168648, "retrieval_score": 11.801114}
{"snippet": "mmap.find(sub, start)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6003, "for": 12168648, "retrieval_score": 11.801114}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 12168648, "retrieval_score": 11.801114}
{"snippet": "mmap.rfind(sub, start, end)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6014, "for": 12168648, "retrieval_score": 11.801114}
{"snippet": "mmap.rfind(sub, start)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6015, "for": 12168648, "retrieval_score": 11.801114}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 5971312, "retrieval_score": 17.017183}
{"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287, "for": 5971312, "retrieval_score": 16.605976}
{"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288, "for": 5971312, "retrieval_score": 13.88158}
{"snippet": "context.Etop()", "intent": "Returns a value equal to Emax - prec + 1 .", "question_id": 2516, "for": 5971312, "retrieval_score": 13.810047}
{"snippet": "base_handler.wsgi_multithread", "intent": "The value to be used for the wsgi.multithread environment variable.", "question_id": 12253, "for": 5971312, "retrieval_score": 13.744519}
{"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288, "for": 5971312, "retrieval_score": 13.88158}
{"snippet": "os.unsetenv(key)", "intent": "Unset ( delete ) the environment variable named `key` .", "question_id": 6711, "for": 5971312, "retrieval_score": 13.510251}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 5971312, "retrieval_score": 12.506605}
{"snippet": "base_handler.wsgi_multithread", "intent": "The value to be used for the wsgi.multithread environment variable.", "question_id": 12253, "for": 5971312, "retrieval_score": 12.506605}
{"snippet": "base_handler.wsgi_multiprocess", "intent": "The value to be used for the wsgi.multiprocess environment variable.", "question_id": 12254, "for": 5971312, "retrieval_score": 12.506605}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 5971312, "retrieval_score": 17.017183}
{"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287, "for": 5971312, "retrieval_score": 16.605976}
{"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288, "for": 5971312, "retrieval_score": 13.88158}
{"snippet": "base_handler.wsgi_multithread", "intent": "The value to be used for the wsgi.multithread environment variable.", "question_id": 12253, "for": 5971312, "retrieval_score": 13.744519}
{"snippet": "base_handler.wsgi_multiprocess", "intent": "The value to be used for the wsgi.multiprocess environment variable.", "question_id": 12254, "for": 5971312, "retrieval_score": 13.744519}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 12717716, "retrieval_score": 30.75062}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 12717716, "retrieval_score": 30.75062}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 12717716, "retrieval_score": 25.62927}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 12717716, "retrieval_score": 25.086447}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 12717716, "retrieval_score": 24.279455}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 17193850, "retrieval_score": 16.079165}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027, "for": 17193850, "retrieval_score": 15.486175}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026, "for": 17193850, "retrieval_score": 15.206425}
{"snippet": "inspect.getinnerframes(traceback, context=1)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "question_id": 5028, "for": 17193850, "retrieval_score": 14.6772785}
{"snippet": "inspect.getframeinfo(frame)", "intent": "Get information about a `frame` or traceback object .", "question_id": 5023, "for": 17193850, "retrieval_score": 12.236133}
{"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919, "for": 13395888, "retrieval_score": 23.688547}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404, "for": 13395888, "retrieval_score": 23.41849}
{"snippet": "window.getstr(y, x)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`.", "question_id": 2061, "for": 13395888, "retrieval_score": 22.891325}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062, "for": 13395888, "retrieval_score": 22.419651}
{"snippet": "context.copy_sign(x, y)", "intent": "Copies the sign from `y` to `x` .", "question_id": 2526, "for": 13395888, "retrieval_score": 22.02361}
{"snippet": "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name)", "intent": "Create zip file at `zip_dir` and `zip_basename` with extension zip which contains the files in `script_name` .", "question_id": 10310, "for": 3608411, "retrieval_score": 13.831627}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500, "for": 3608411, "retrieval_score": 13.060005}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271, "for": 3608411, "retrieval_score": 12.836081}
{"snippet": "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name, name_in_zip=None)", "intent": "Create zip file at `zip_dir` and `zip_basename` with extension zip which contains the files in `script_name` . `name_in_zip` is the archive name .", "question_id": 10311, "for": 3608411, "retrieval_score": 12.485705}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761, "for": 3608411, "retrieval_score": 12.406097}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 31771758, "retrieval_score": 25.095259}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 31771758, "retrieval_score": 25.095259}
{"snippet": "bytes.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9278, "for": 31771758, "retrieval_score": 20.938545}
{"snippet": "bytearray.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9282, "for": 31771758, "retrieval_score": 20.938545}
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440, "for": 31771758, "retrieval_score": 18.946081}
{"snippet": "re.sub(pattern, repl, string)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` .", "question_id": 7951, "for": 39414085, "retrieval_score": 38.30643}
{"snippet": "re.sub(pattern, repl, string, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . With arguments `flags`.", "question_id": 7953, "for": 39414085, "retrieval_score": 37.39404}
{"snippet": "re.sub(pattern, repl, string, count=0, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "question_id": 7954, "for": 39414085, "retrieval_score": 33.27031}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952, "for": 39414085, "retrieval_score": 33.24539}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 39414085, "retrieval_score": 26.516947}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 5061582, "retrieval_score": 12.500981}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168, "for": 5061582, "retrieval_score": 11.92468}
{"snippet": "turtle.write_docstringdict(filename=\"turtle_docstringdict\")", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11169, "for": 5061582, "retrieval_score": 11.92468}
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` .", "question_id": 10308, "for": 5061582, "retrieval_score": 9.385413}
{"snippet": "sys.abiflags", "intent": "On POSIX systems where Python was built with the standard configure script, this contains the ABI flags as specified by PEP 3149.", "question_id": 9766, "for": 5061582, "retrieval_score": 9.232104}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688, "for": 2389846, "retrieval_score": 16.830498}
{"snippet": "queue_listener.debug(msg, *args, **kwargs)", "intent": "Logs a message with level DEBUG on this logger . The `msg` is the message format string , and the args are the arguments which are merged into msg using the string formatting operator . With arguments `*args`, `**kwargs`.", "question_id": 5570, "for": 2389846, "retrieval_score": 15.065308}
{"snippet": "logging.debug(msg, *args, **kwargs)", "intent": "Logs a message with level DEBUG on the root logger . The `msg` is the message format string , and the args are the arguments which are merged into msg using the string formatting operator . With arguments `*args`, `**kwargs`.", "question_id": 5637, "for": 2389846, "retrieval_score": 14.861223}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197, "for": 2389846, "retrieval_score": 13.859974}
{"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653, "for": 2389846, "retrieval_score": 13.714204}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124, "for": 7332841, "retrieval_score": 23.917435}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 7332841, "retrieval_score": 23.8303}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 7332841, "retrieval_score": 20.979355}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 7332841, "retrieval_score": 20.394701}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126, "for": 7332841, "retrieval_score": 19.261576}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 38331568, "retrieval_score": 12.482851}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 38331568, "retrieval_score": 12.482851}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 38331568, "retrieval_score": 12.482851}
{"snippet": "widget.set(item)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` .", "question_id": 10658, "for": 38331568, "retrieval_score": 11.535059}
{"snippet": "os.getloadavg()", "intent": "Return the number of processes in the system run queue averaged over the last 1 , 5 , and 15 minutes or raises OSError if the load average was unobtainable .", "question_id": 7118, "for": 38331568, "retrieval_score": 11.172605}
{"snippet": "date.replace(year=self.year)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `year`.", "question_id": 2230, "for": 41463763, "retrieval_score": 14.70807}
{"snippet": "date.replace(month=self.month)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `month`.", "question_id": 2231, "for": 41463763, "retrieval_score": 14.70807}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232, "for": 41463763, "retrieval_score": 14.70807}
{"snippet": "date.replace()", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified .", "question_id": 2229, "for": 41463763, "retrieval_score": 14.695879}
{"snippet": "coverage_results.update(other)", "intent": "Merge in data from another CoverageResults object . With arguments `other`.", "question_id": 10724, "for": 41463763, "retrieval_score": 14.648371}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333, "for": 23970693, "retrieval_score": 30.645712}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322, "for": 23970693, "retrieval_score": 29.710482}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328, "for": 23970693, "retrieval_score": 26.484398}
{"snippet": "json.JSONDecoder(parse_float=None)", "intent": "Simple JSON decoder . `parse_float` , if specified , will be called with the string of every JSON float to be decoded .", "question_id": 5312, "for": 23970693, "retrieval_score": 24.803518}
{"snippet": "json.JSONDecoder(parse_int=None)", "intent": "Simple JSON decoder . `parse_int` , if specified , will be called with the string of every JSON int to be decoded .", "question_id": 5313, "for": 23970693, "retrieval_score": 24.803518}
{"snippet": "math.degrees(x)", "intent": "Convert angle `x` from radians to degrees .", "question_id": 5922, "for": 9875964, "retrieval_score": 28.951296}
{"snippet": "math.radians(x)", "intent": "Convert angle `x` from degrees to radians .", "question_id": 5923, "for": 9875964, "retrieval_score": 28.951296}
{"snippet": "turtle.radians()", "intent": "Set the angle measurement units to radians .", "question_id": 10947, "for": 9875964, "retrieval_score": 11.002647}
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917, "for": 9875964, "retrieval_score": 9.931044}
{"snippet": "math.cos(x)", "intent": "Return the cosine of `x` radians .", "question_id": 5918, "for": 9875964, "retrieval_score": 9.931044}
{"snippet": "sqlite3.version_info", "intent": "The version number of this module, as a tuple of integers.", "question_id": 8792, "for": 25355705, "retrieval_score": 13.431849}
{"snippet": "test.support.fd_count()", "intent": "Count the number of open file descriptors .", "question_id": 10154, "for": 25355705, "retrieval_score": 13.009403}
{"snippet": "sqlite3.sqlite_version_info", "intent": "The version number of the run-time SQLite library, as a tuple of integers.", "question_id": 8794, "for": 25355705, "retrieval_score": 12.66889}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357, "for": 25355705, "retrieval_score": 12.348751}
{"snippet": "mailbox.__len__()", "intent": "Return a count of messages in the mailbox .", "question_id": 5744, "for": 25355705, "retrieval_score": 11.654114}
{"snippet": "Telnet.expect(list)", "intent": "Read until one from a `list` of a regular expressions matches .", "question_id": 10030, "for": 31522361, "retrieval_score": 15.41471}
{"snippet": "Telnet.expect(list, timeout=None)", "intent": "Read until one from a `list` of a regular expressions matches . The optional second argument is a `timeout` , in seconds ; the default is to block indefinitely .", "question_id": 10031, "for": 31522361, "retrieval_score": 12.9116745}
{"snippet": "re.sub(pattern, repl, string, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . With arguments `flags`.", "question_id": 7953, "for": 31522361, "retrieval_score": 12.085773}
{"snippet": "re.sub(pattern, repl, string)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` .", "question_id": 7951, "for": 31522361, "retrieval_score": 11.60253}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816, "for": 31522361, "retrieval_score": 11.468335}
{"snippet": "glob.iglob(pathname)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`.", "question_id": 4266, "for": 2108126, "retrieval_score": 8.905671}
{"snippet": "code.interact()", "intent": "Convenience function to run a read-eval-print loop .", "question_id": 1161, "for": 2108126, "retrieval_score": 8.853804}
{"snippet": "glob.iglob(pathname, recursive=False)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`, `recursive`.", "question_id": 4267, "for": 2108126, "retrieval_score": 8.728914}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 2108126, "retrieval_score": 7.358969}
{"snippet": "doc_test_runner.run(test, out=None)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2875, "for": 2108126, "retrieval_score": 7.358969}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 26894227, "retrieval_score": 16.931786}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 26894227, "retrieval_score": 11.9621}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518, "for": 26894227, "retrieval_score": 11.9418125}
{"snippet": "time.process_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current process .", "question_id": 10450, "for": 26894227, "retrieval_score": 10.927113}
{"snippet": "time.thread_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current thread .", "question_id": 10459, "for": 26894227, "retrieval_score": 10.927113}
{"snippet": "time.process_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current process .", "question_id": 10450, "for": 26894227, "retrieval_score": 16.164488}
{"snippet": "time.thread_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current thread .", "question_id": 10459, "for": 26894227, "retrieval_score": 16.164488}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 26894227, "retrieval_score": 14.576939}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518, "for": 26894227, "retrieval_score": 14.053373}
{"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930, "for": 26894227, "retrieval_score": 12.04968}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 1747817, "retrieval_score": 17.077688}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 1747817, "retrieval_score": 17.077688}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 1747817, "retrieval_score": 16.864767}
{"snippet": "dict(iterable, **kwarg)", "intent": "Create a new dictionary . With arguments `iterable`, `**kwarg`.", "question_id": 4006, "for": 1747817, "retrieval_score": 16.192314}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 1747817, "retrieval_score": 13.457097}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 1747817, "retrieval_score": 17.077688}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 1747817, "retrieval_score": 17.077688}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 1747817, "retrieval_score": 16.864767}
{"snippet": "dict(iterable, **kwarg)", "intent": "Create a new dictionary . With arguments `iterable`, `**kwarg`.", "question_id": 4006, "for": 1747817, "retrieval_score": 16.192314}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 1747817, "retrieval_score": 13.457097}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 1747817, "retrieval_score": 22.122152}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 1747817, "retrieval_score": 21.479206}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 1747817, "retrieval_score": 21.479206}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 1747817, "retrieval_score": 21.078249}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 1747817, "retrieval_score": 21.078249}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417, "for": 19100540, "retrieval_score": 22.713537}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418, "for": 19100540, "retrieval_score": 22.713537}
{"snippet": "test_case.assertNotAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11425, "for": 19100540, "retrieval_score": 22.713537}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11426, "for": 19100540, "retrieval_score": 22.713537}
{"snippet": "test_case.assertAlmostEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11419, "for": 19100540, "retrieval_score": 21.65292}
{"snippet": "POP3.noop()", "intent": "Do nothing .", "question_id": 7614, "for": 7668141, "retrieval_score": 10.491083}
{"snippet": "stringprep.in_table_b1(code)", "intent": "Determine whether `code` is in tableB.1 ( Commonly mapped to nothing ) .", "question_id": 9532, "for": 7668141, "retrieval_score": 10.091424}
{"snippet": "formatter.NullFormatter()", "intent": "A formatter which does nothing .", "question_id": 3838, "for": 7668141, "retrieval_score": 9.601594}
{"snippet": "os.defpath", "intent": "The default search path used by exec*p* and spawn*p* if the environment doesn\u2019t have a 'PATH' key.", "question_id": 7127, "for": 7668141, "retrieval_score": 9.422348}
{"snippet": "null_handler.emit(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5437, "for": 7668141, "retrieval_score": 9.087913}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638, "for": 1456617, "retrieval_score": 22.572575}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529, "for": 1456617, "retrieval_score": 22.449978}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640, "for": 1456617, "retrieval_score": 20.064835}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639, "for": 1456617, "retrieval_score": 19.793938}
{"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047, "for": 1456617, "retrieval_score": 18.39757}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 12829889, "retrieval_score": 18.833542}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 12829889, "retrieval_score": 18.728462}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 12829889, "retrieval_score": 17.322206}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 12829889, "retrieval_score": 17.026474}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 12829889, "retrieval_score": 16.915388}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947, "for": 2606976, "retrieval_score": 19.941948}
{"snippet": "deque.reverse()", "intent": "Reverse the elements of the deque in-place and then return None .", "question_id": 1367, "for": 2606976, "retrieval_score": 19.651838}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653, "for": 2606976, "retrieval_score": 19.52167}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 2606976, "retrieval_score": 19.165707}
{"snippet": "re.findall(pattern, string, flags=0)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings . With arguments `flags`.", "question_id": 7948, "for": 2606976, "retrieval_score": 18.737604}
{"snippet": "doc_test_parser.parse(string)", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings .", "question_id": 2859, "for": 2606976, "retrieval_score": 19.166492}
{"snippet": "re.findall(pattern, string, flags=0)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings . With arguments `flags`.", "question_id": 7948, "for": 2606976, "retrieval_score": 18.200048}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947, "for": 2606976, "retrieval_score": 18.110159}
{"snippet": "text_io_base.encoding", "intent": "The name of the encoding used to decode the stream\u2019s bytes into strings, and to encode strings into bytes.", "question_id": 5133, "for": 2606976, "retrieval_score": 17.736727}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832, "for": 2606976, "retrieval_score": 17.578457}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156, "for": 940822, "retrieval_score": 20.766953}
{"snippet": "Match.re", "intent": "The regular expression object whose match() or search() method produced this match instance.", "question_id": 8013, "for": 940822, "retrieval_score": 19.60076}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922, "for": 940822, "retrieval_score": 17.90336}
{"snippet": "Pattern.fullmatch(string)", "intent": "If the whole `string` matches this regular expression , return a corresponding match object .", "question_id": 7978, "for": 940822, "retrieval_score": 17.894854}
{"snippet": "Pattern.match(string)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object .", "question_id": 7975, "for": 940822, "retrieval_score": 17.507992}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156, "for": 940822, "retrieval_score": 20.766953}
{"snippet": "Match.re", "intent": "The regular expression object whose match() or search() method produced this match instance.", "question_id": 8013, "for": 940822, "retrieval_score": 19.60076}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922, "for": 940822, "retrieval_score": 19.334661}
{"snippet": "Pattern.search(string)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object .", "question_id": 7972, "for": 940822, "retrieval_score": 18.451838}
{"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937, "for": 940822, "retrieval_score": 18.138493}
{"snippet": "re.fullmatch(pattern, string)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object .", "question_id": 7941, "for": 940822, "retrieval_score": 27.067772}
{"snippet": "re.fullmatch(pattern, string, flags=0)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7942, "for": 940822, "retrieval_score": 26.561403}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922, "for": 940822, "retrieval_score": 26.072521}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939, "for": 940822, "retrieval_score": 25.6389}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940, "for": 940822, "retrieval_score": 25.3843}
{"snippet": "audioop.max(fragment, width)", "intent": "Return the maximum of the absolute value of all samples in a `fragment` . With arguments `width`.", "question_id": 696, "for": 26897536, "retrieval_score": 14.00276}
{"snippet": "winreg.QueryValue(key, sub_key)", "intent": "Retrieves the unnamed value for a `key` , as a string . `sub_key` is a string that holds the name of the subkey with which the value is associated .", "question_id": 12147, "for": 26897536, "retrieval_score": 11.82108}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 26897536, "retrieval_score": 11.465382}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 26897536, "retrieval_score": 11.465382}
{"snippet": "smtp_channel.smtp_server", "intent": "Holds the SMTPServer that spawned this channel.", "question_id": 8437, "for": 26897536, "retrieval_score": 11.432732}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 6407362, "retrieval_score": 23.620668}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266, "for": 6407362, "retrieval_score": 20.134388}
{"snippet": "date.resolution", "intent": "The smallest possible difference between non-equal date objects, timedelta(days=1).", "question_id": 2225, "for": 6407362, "retrieval_score": 18.034233}
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223, "for": 6407362, "retrieval_score": 16.250862}
{"snippet": "date.max", "intent": "The latest representable date, date(MAXYEAR, 12, 31).", "question_id": 2224, "for": 6407362, "retrieval_score": 16.250862}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828, "for": 8924173, "retrieval_score": 10.047947}
{"snippet": "wsgiref.simple_server.demo_app(environ, start_response)", "intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "question_id": 12227, "for": 8924173, "retrieval_score": 9.650677}
{"snippet": "copyright", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1612, "for": 8924173, "retrieval_score": 9.549389}
{"snippet": "credits", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1613, "for": 8924173, "retrieval_score": 9.549389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 8924173, "retrieval_score": 8.944786}
{"snippet": "symbol_table.get_identifiers()", "intent": "Return a list of names of symbols in this table .", "question_id": 9742, "for": 4358701, "retrieval_score": 16.877731}
{"snippet": "policy.mangle_from_", "intent": "If True, lines starting with \u201cFrom \u201c in the body are escaped by putting a > in front of them.", "question_id": 3417, "for": 4358701, "retrieval_score": 12.223227}
{"snippet": "Path.rglob(pattern)", "intent": "This is like calling Path.glob ( ) with \u201c **/ \u201d added in front of the given relative `pattern` :", "question_id": 7312, "for": 4358701, "retrieval_score": 12.101555}
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311, "for": 4358701, "retrieval_score": 11.800372}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 4358701, "retrieval_score": 10.095965}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 17589590, "retrieval_score": 12.827264}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 17589590, "retrieval_score": 12.827264}
{"snippet": "OptionParser.add_option(option)", "intent": "To define an `option` with only a short option string :", "question_id": 6623, "for": 17589590, "retrieval_score": 12.577533}
{"snippet": "typing.Type(GenericCT_co)", "intent": "A variable annotated with C may accept a value of type C. In contrast , a variable annotated with Type [ C ] may accept values that are classes themselves \u2013 specifically , it will accept the class object of C. For example : With arguments `GenericCT_co`.", "question_id": 11231, "for": 17589590, "retrieval_score": 12.522762}
{"snippet": "typing.Type()", "intent": "A variable annotated with C may accept a value of type C. In contrast , a variable annotated with Type [ C ] may accept values that are classes themselves \u2013 specifically , it will accept the class object of C. For example :", "question_id": 11232, "for": 17589590, "retrieval_score": 12.50629}
{"snippet": "mime_version_header.version", "intent": "The version number as a string, with any whitespace and/or comments removed.", "question_id": 3164, "for": 2077897, "retrieval_score": 18.462606}
{"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580, "for": 2077897, "retrieval_score": 18.424654}
{"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515, "for": 2077897, "retrieval_score": 18.417486}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 2077897, "retrieval_score": 17.51217}
{"snippet": "formatter.add_flowing_data(data)", "intent": "Provide `data` which should be formatted with collapsed whitespace .", "question_id": 3822, "for": 2077897, "retrieval_score": 17.431974}
{"snippet": "Unpacker.unpack_float()", "intent": "Unpacks a single-precision floating point number .", "question_id": 12290, "for": 20048987, "retrieval_score": 19.022951}
{"snippet": "cmath.nan", "intent": "A floating-point \u201cnot a number\u201d (NaN) value.", "question_id": 1125, "for": 20048987, "retrieval_score": 18.740925}
{"snippet": "math.nan", "intent": "A floating-point \u201cnot a number\u201d (NaN) value.", "question_id": 5938, "for": 20048987, "retrieval_score": 18.740925}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019, "for": 20048987, "retrieval_score": 18.036314}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020, "for": 20048987, "retrieval_score": 18.036314}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 1602934, "retrieval_score": 10.885977}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 1602934, "retrieval_score": 9.863136}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 1602934, "retrieval_score": 9.863136}
{"snippet": "Popen.poll()", "intent": "Check if child process has terminated .", "question_id": 9609, "for": 1602934, "retrieval_score": 9.760395}
{"snippet": "mapping_proxy_type.get(key, default)", "intent": "Return the value for `key` if key is in the underlying mapping , else `default` .", "question_id": 11212, "for": 1602934, "retrieval_score": 9.688156}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 1602934, "retrieval_score": 19.641891}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 1602934, "retrieval_score": 17.32126}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 1602934, "retrieval_score": 16.57945}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 1602934, "retrieval_score": 14.971519}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 1602934, "retrieval_score": 14.846977}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 1602934, "retrieval_score": 18.898792}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 1602934, "retrieval_score": 16.57945}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 1602934, "retrieval_score": 16.486156}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 1602934, "retrieval_score": 14.971519}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 1602934, "retrieval_score": 14.846977}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 1602934, "retrieval_score": 14.444635}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 1602934, "retrieval_score": 14.444635}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490, "for": 1602934, "retrieval_score": 14.367294}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 1602934, "retrieval_score": 13.777223}
{"snippet": "mimetypes.read_mime_types(filename)", "intent": "Load the type map given in the file `filename` , if it exists .", "question_id": 5947, "for": 1602934, "retrieval_score": 13.422346}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 1602934, "retrieval_score": 25.543995}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 1602934, "retrieval_score": 23.686235}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 1602934, "retrieval_score": 22.156178}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 1602934, "retrieval_score": 21.54263}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 1602934, "retrieval_score": 20.58131}
{"snippet": "winreg.KEY_QUERY_VALUE", "intent": "Required to query the values of a registry key.", "question_id": 12166, "for": 9304908, "retrieval_score": 13.929369}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847, "for": 9304908, "retrieval_score": 13.31022}
{"snippet": "cursor.fetchmany()", "intent": "Fetches the next set of rows of a query result , returning a list .", "question_id": 8845, "for": 9304908, "retrieval_score": 13.056206}
{"snippet": "message.get_all(name)", "intent": "Return a list of all the values for the field named `name` .", "question_id": 2974, "for": 9304908, "retrieval_score": 12.508358}
{"snippet": "email_message.get_all(name)", "intent": "Return a list of all the values for the field named `name` .", "question_id": 3251, "for": 9304908, "retrieval_score": 12.508358}
{"snippet": "plistlib.load(fp)", "intent": "Read a plist file . `fp` should be a readable and binary file object .", "question_id": 7547, "for": 2497027, "retrieval_score": 13.241128}
{"snippet": "test_result.addSuccess(test)", "intent": "Called when the `test` case test succeeds .", "question_id": 11526, "for": 2497027, "retrieval_score": 13.187256}
{"snippet": "test_result.addSkip(test, reason)", "intent": "Called when the `test` case test is skipped . `reason` is the reason the test gave for skipping .", "question_id": 11527, "for": 2497027, "retrieval_score": 12.767767}
{"snippet": "test_result.addSubTest(test, subtest, outcome)", "intent": "Called when a `subtest` finishes . `test` is the test case corresponding to the test method . If `outcome` is None , the subtest succeeded .", "question_id": 11530, "for": 2497027, "retrieval_score": 12.767556}
{"snippet": "plistlib.readPlist(pathOrFile)", "intent": "Read a plist file . `pathOrFile` may be either a file name or a ( readable and binary ) file object .", "question_id": 7579, "for": 2497027, "retrieval_score": 12.538477}
{"snippet": "BaseHandler.http_error_<nnn>(req, fp, code, msg, hdrs)", "intent": "nnn should be a three-digit HTTP error `code` . With arguments `req`, `fp`, `msg`, `hdrs`.", "question_id": 11847, "for": 17484631, "retrieval_score": 15.650753}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 17484631, "retrieval_score": 14.835733}
{"snippet": "formatter.end_paragraph(blanklines)", "intent": "Close any open paragraphs and insert at least `blanklines` before the next paragraph .", "question_id": 3819, "for": 17484631, "retrieval_score": 11.7218685}
{"snippet": "window.insstr(str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`.", "question_id": 2082, "for": 17484631, "retrieval_score": 10.800072}
{"snippet": "window.insstr(str, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`, `attr`.", "question_id": 2081, "for": 17484631, "retrieval_score": 10.597761}
{"snippet": "queue.join_thread()", "intent": "Join the background thread .", "question_id": 6209, "for": 20375561, "retrieval_score": 28.719017}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254, "for": 20375561, "retrieval_score": 27.907368}
{"snippet": "test.support.join_thread(thread, timeout=30.0)", "intent": "Join a `thread` within `timeout` .", "question_id": 10255, "for": 20375561, "retrieval_score": 27.907368}
{"snippet": "tracemalloc.Traceback", "intent": "Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "question_id": 10894, "for": 20375561, "retrieval_score": 25.438807}
{"snippet": "inspect.currentframe()", "intent": "Return the frame object for the caller \u2019 s stack frame .", "question_id": 5029, "for": 20375561, "retrieval_score": 24.24025}
{"snippet": "float.as_integer_ratio()", "intent": "Return a pair of integers whose ratio is exactly equal to the original float and with a positive denominator .", "question_id": 9147, "for": 38708621, "retrieval_score": 11.36473}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983, "for": 38708621, "retrieval_score": 11.345666}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 38708621, "retrieval_score": 11.221321}
{"snippet": "sequence_matcher.quick_ratio()", "intent": "Return an upper bound on ratio ( ) relatively quickly .", "question_id": 2688, "for": 38708621, "retrieval_score": 11.007135}
{"snippet": "sequence_matcher.real_quick_ratio()", "intent": "Return an upper bound on ratio ( ) very quickly .", "question_id": 2689, "for": 38708621, "retrieval_score": 11.007135}
{"snippet": "widget.selection_toggle(*items)", "intent": "Toggle the selection state of each item in items . With arguments `*items`.", "question_id": 10657, "for": 10194713, "retrieval_score": 23.581707}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 10194713, "retrieval_score": 23.389664}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 10194713, "retrieval_score": 23.1282}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 10194713, "retrieval_score": 20.890362}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 10194713, "retrieval_score": 20.591621}
{"snippet": "test_case.assertCountEqual(first, second)", "intent": "Test that sequence `first` contains the same elements as `second` , regardless of their order .", "question_id": 11445, "for": 10194713, "retrieval_score": 16.635609}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 10194713, "retrieval_score": 15.677011}
{"snippet": "test_case.assertCountEqual(first, second, msg=None)", "intent": "Test that sequence `first` contains the same elements as `second` , regardless of their order . With arguments `msg`.", "question_id": 11446, "for": 10194713, "retrieval_score": 15.582354}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 10194713, "retrieval_score": 14.197748}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 10194713, "retrieval_score": 13.972804}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 10194713, "retrieval_score": 15.677011}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 10194713, "retrieval_score": 13.233934}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941, "for": 10194713, "retrieval_score": 12.649967}
{"snippet": "mimetypes.guess_extension(type)", "intent": "Guess the extension for a file based on its MIME `type` , given by type .", "question_id": 5943, "for": 10194713, "retrieval_score": 12.649967}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 10194713, "retrieval_score": 12.470076}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 10194713, "retrieval_score": 12.994127}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405, "for": 10194713, "retrieval_score": 11.040812}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 10194713, "retrieval_score": 10.949921}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 10194713, "retrieval_score": 10.77354}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693, "for": 10194713, "retrieval_score": 10.475631}
{"snippet": "importlib.resources.open_text(package, resource, encoding='utf-8')", "intent": "Open for text reading the `resource` within `package` . `encoding` and `errors` have the same meaning as with built-in open ( ) .", "question_id": 4854, "for": 4060221, "retrieval_score": 18.18856}
{"snippet": "importlib.resources.open_text(package, resource, errors='strict')", "intent": "Open for text reading the `resource` within `package` . `encoding` and `errors` have the same meaning as with built-in open ( ) .", "question_id": 4855, "for": 4060221, "retrieval_score": 18.18856}
{"snippet": "importlib.resources.open_text(package, resource, encoding='utf-8', errors='strict')", "intent": "Open for text reading the `resource` within `package` . `encoding` and `errors` have the same meaning as with built-in open ( ) .", "question_id": 4856, "for": 4060221, "retrieval_score": 18.18856}
{"snippet": "importlib.resources.read_text(package, resource, encoding='utf-8')", "intent": "Read and return the contents of `resource` within `package` as a str . `encoding` and `errors` have the same meaning as with built-in open ( ) .", "question_id": 4859, "for": 4060221, "retrieval_score": 17.511063}
{"snippet": "importlib.resources.read_text(package, resource, errors='strict')", "intent": "Read and return the contents of `resource` within `package` as a str . `encoding` and `errors` have the same meaning as with built-in open ( ) .", "question_id": 4860, "for": 4060221, "retrieval_score": 17.511063}
{"snippet": "lzma.LZMAFile()", "intent": "Open an LZMA-compressed file in binary `mode` .", "question_id": 5666, "for": 13954840, "retrieval_score": 14.44662}
{"snippet": "lzma.LZMAFile(mode=\"r\")", "intent": "Open an LZMA-compressed file in binary `mode` .", "question_id": 5668, "for": 13954840, "retrieval_score": 14.44662}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063, "for": 13954840, "retrieval_score": 13.337355}
{"snippet": "Path.open(mode='r')", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`.", "question_id": 7293, "for": 13954840, "retrieval_score": 13.318462}
{"snippet": "bz2.BZ2File(filename)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly .", "question_id": 886, "for": 13954840, "retrieval_score": 13.2671585}
{"snippet": "configparser.ConfigParser(':'), ';'), delimiters=('=')", "intent": "The main configuration parser . When `delimiters` is given , it is used as the set of substrings that divide keys from values . With arguments `':')`, `';')`.", "question_id": 1500, "for": 11840111, "retrieval_score": 18.493935}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 11840111, "retrieval_score": 16.003187}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 11840111, "retrieval_score": 16.003187}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 11840111, "retrieval_score": 14.854598}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 11840111, "retrieval_score": 13.815111}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 11840111, "retrieval_score": 27.51155}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 11840111, "retrieval_score": 27.161491}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 11840111, "retrieval_score": 27.161491}
{"snippet": "mapping_proxy_type.get(key, default)", "intent": "Return the value for `key` if key is in the underlying mapping , else `default` .", "question_id": 11212, "for": 11840111, "retrieval_score": 26.655104}
{"snippet": "mapping_proxy_type.get(key)", "intent": "Return the value for `key` if key is in the underlying mapping , else `default` .", "question_id": 11213, "for": 11840111, "retrieval_score": 26.655104}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 11840111, "retrieval_score": 31.078405}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 11840111, "retrieval_score": 30.580828}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 11840111, "retrieval_score": 28.182516}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 11840111, "retrieval_score": 25.386997}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 11840111, "retrieval_score": 25.386997}
{"snippet": "json.dump(obj, fp, **kw)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . With arguments `**kw`.", "question_id": 5270, "for": 13999850, "retrieval_score": 14.322644}
{"snippet": "snapshot.dump(filename)", "intent": "Write the snapshot into a file . With arguments `filename`.", "question_id": 10873, "for": 13999850, "retrieval_score": 13.965688}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 13999850, "retrieval_score": 13.4560795}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735, "for": 13999850, "retrieval_score": 13.30181}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736, "for": 13999850, "retrieval_score": 12.880734}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 11277432, "retrieval_score": 25.83564}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 11277432, "retrieval_score": 21.47227}
{"snippet": "dict.pop(key, default)", "intent": "If `key` is in the dictionary , remove it and return its value , else return `default` .", "question_id": 9486, "for": 11277432, "retrieval_score": 18.872772}
{"snippet": "dict.pop(key)", "intent": "If `key` is in the dictionary , remove it and return its value , else return `default` .", "question_id": 9487, "for": 11277432, "retrieval_score": 18.872772}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 11277432, "retrieval_score": 18.294073}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982, "for": 1800187, "retrieval_score": 10.199866}
{"snippet": "message.replace_header(_name, _value)", "intent": "Replace a header . Replace the first header found in the message that matches `_name` , retaining header order and field name case . With arguments `_value`.", "question_id": 2977, "for": 1800187, "retrieval_score": 10.159208}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 1800187, "retrieval_score": 10.157973}
{"snippet": "bytearray(source, encoding, errors)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`, `errors`.", "question_id": 3981, "for": 1800187, "retrieval_score": 10.059299}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136, "for": 1800187, "retrieval_score": 9.971739}
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673, "for": 9554544, "retrieval_score": 25.661537}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds)", "intent": "Run the `cmd` shell command . With arguments `**kwds`.", "question_id": 533, "for": 9554544, "retrieval_score": 25.651402}
{"snippet": "subprocess.check_call(args, stdin=None, shell=False)", "intent": "Run command with arguments . With arguments `args`, `stdin`, `shell`.", "question_id": 9678, "for": 9554544, "retrieval_score": 25.030457}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534, "for": 9554544, "retrieval_score": 25.000078}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, loop=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `loop`.", "question_id": 537, "for": 9554544, "retrieval_score": 25.000078}
{"snippet": "sys.flags", "intent": "The named tuple flags exposes the status of command line flags.", "question_id": 9790, "for": 9554544, "retrieval_score": 25.698883}
{"snippet": "subprocess.check_call(args)", "intent": "Run command with arguments . With arguments `args`.", "question_id": 9669, "for": 9554544, "retrieval_score": 23.900429}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68, "for": 9554544, "retrieval_score": 23.55837}
{"snippet": "subprocess.check_call(args, stdin=None)", "intent": "Run command with arguments . With arguments `args`, `stdin`.", "question_id": 9670, "for": 9554544, "retrieval_score": 23.299479}
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673, "for": 9554544, "retrieval_score": 23.299479}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723, "for": 12527959, "retrieval_score": 27.04922}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724, "for": 12527959, "retrieval_score": 27.02573}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 12527959, "retrieval_score": 27.02573}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726, "for": 12527959, "retrieval_score": 27.02573}
{"snippet": "urllib.parse.unquote_to_bytes(string)", "intent": "Replace % xx escapes by their single-octet equivalent , and return a bytes object . `string` may be either a str or a bytes .", "question_id": 11731, "for": 12527959, "retrieval_score": 18.544075}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 2372573, "retrieval_score": 11.132322}
{"snippet": "joinable_queue.recv_bytes()", "intent": "Return a complete message of byte data sent from the other end of the connection as a string .", "question_id": 6240, "for": 2372573, "retrieval_score": 11.091456}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843, "for": 2372573, "retrieval_score": 10.861251}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126, "for": 2372573, "retrieval_score": 10.73732}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 2372573, "retrieval_score": 10.642273}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 8905864, "retrieval_score": 45.737785}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706, "for": 8905864, "retrieval_score": 33.608673}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707, "for": 8905864, "retrieval_score": 32.056877}
{"snippet": "urllib.parse.quote(string, errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11708, "for": 8905864, "retrieval_score": 32.056877}
{"snippet": "urllib.parse.quote(string, encoding=None, errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11711, "for": 8905864, "retrieval_score": 32.056877}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474, "for": 8905864, "retrieval_score": 9.294674}
{"snippet": "codecs.lookup(encoding)", "intent": "Looks up the codec info in the Python codec registry and returns a CodecInfo object as defined below . With arguments `encoding`.", "question_id": 1200, "for": 8905864, "retrieval_score": 8.795903}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770, "for": 8905864, "retrieval_score": 8.405454}
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106, "for": 8905864, "retrieval_score": 8.269726}
{"snippet": "Request.get_full_url()", "intent": "Return the URL given in the constructor .", "question_id": 11829, "for": 8905864, "retrieval_score": 8.157838}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 28207743, "retrieval_score": 13.92276}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 28207743, "retrieval_score": 13.109265}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 28207743, "retrieval_score": 13.109265}
{"snippet": "sync_manager.Array(typecode, sequence)", "intent": "Create an array and return a proxy for it . With arguments `typecode`, `sequence`.", "question_id": 6311, "for": 28207743, "retrieval_score": 12.10419}
{"snippet": "json.dump(obj, fp, **kw, indent=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level . With arguments `**kw`.", "question_id": 5276, "for": 28207743, "retrieval_score": 11.892433}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 28207743, "retrieval_score": 18.757467}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136, "for": 28207743, "retrieval_score": 16.120665}
{"snippet": "ctypes.create_unicode_buffer(init_or_size)", "intent": "This function creates a mutable unicode character buffer . `init_or_size` must be an integer which specifies the `size` of the array , or a string which will be used to initialize the array items .", "question_id": 1815, "for": 28207743, "retrieval_score": 13.736277}
{"snippet": "ctypes.create_unicode_buffer(init_or_size, size=None)", "intent": "This function creates a mutable unicode character buffer . `init_or_size` must be an integer which specifies the `size` of the array , or a string which will be used to initialize the array items .", "question_id": 1816, "for": 28207743, "retrieval_score": 13.736277}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 28207743, "retrieval_score": 13.37402}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403, "for": 12201577, "retrieval_score": 13.700112}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404, "for": 12201577, "retrieval_score": 13.700112}
{"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405, "for": 12201577, "retrieval_score": 13.700112}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 12201577, "retrieval_score": 13.700112}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407, "for": 12201577, "retrieval_score": 13.700112}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 11584773, "retrieval_score": 16.119665}
{"snippet": "widget.selection_toggle(*items)", "intent": "Toggle the selection state of each item in items . With arguments `*items`.", "question_id": 10657, "for": 11584773, "retrieval_score": 15.818083}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227, "for": 11584773, "retrieval_score": 15.815728}
{"snippet": "ast.iter_fields(node)", "intent": "Yield a tuple of ( fieldname , value ) for each field in node._fields that is present on `node` .", "question_id": 156, "for": 11584773, "retrieval_score": 15.316035}
{"snippet": "typing.Tuple", "intent": "Tuple type; Tuple[X, Y] is the type of a tuple of two items with the first item of type X and the second of type Y.", "question_id": 11335, "for": 11584773, "retrieval_score": 15.311683}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453, "for": 6294179, "retrieval_score": 13.08914}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461, "for": 6294179, "retrieval_score": 13.08914}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 6294179, "retrieval_score": 12.755346}
{"snippet": "re.split(pattern, string, maxsplit=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list .", "question_id": 7944, "for": 6294179, "retrieval_score": 12.5781355}
{"snippet": "xml.etree.ElementTree.tostring(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12456, "for": 6294179, "retrieval_score": 12.545787}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068, "for": 18050937, "retrieval_score": 15.01006}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663, "for": 18050937, "retrieval_score": 14.8450575}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664, "for": 18050937, "retrieval_score": 14.8450575}
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673, "for": 18050937, "retrieval_score": 14.692573}
{"snippet": "os.popen(cmd, mode='r')", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' .", "question_id": 7042, "for": 18050937, "retrieval_score": 14.39265}
{"snippet": "test.support.fd_count()", "intent": "Count the number of open file descriptors .", "question_id": 10154, "for": 42178481, "retrieval_score": 13.009403}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952, "for": 42178481, "retrieval_score": 12.99512}
{"snippet": "re.sub(pattern, repl, string, count=0, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "question_id": 7954, "for": 42178481, "retrieval_score": 12.70608}
{"snippet": "mbox_message.get_from()", "intent": "Return a string representing the \u201c From \u201d line that marks the start of the message in an mbox mailbox .", "question_id": 5825, "for": 42178481, "retrieval_score": 12.672408}
{"snippet": "mmdf_message.get_from()", "intent": "Return a string representing the \u201c From \u201d line that marks the start of the message in an mbox mailbox .", "question_id": 5849, "for": 42178481, "retrieval_score": 12.672408}
{"snippet": "auto.end", "intent": "The index after the last invalid data in object.", "question_id": 3678, "for": 32464280, "retrieval_score": 16.208712}
{"snippet": "binascii.a2b_hqx(string)", "intent": "Convert binhex4 formatted ASCII data to binary , without doing RLE-decompression . The `string` should contain a complete number of binary bytes , or ( in case of the last portion of the binhex4 data ) have the remaining bits zero .", "question_id": 836, "for": 32464280, "retrieval_score": 15.918931}
{"snippet": "loop.sock_recv_into(sock, buf)", "intent": "Receive data from `sock` into the `buf` buffer .", "question_id": 277, "for": 32464280, "retrieval_score": 15.747735}
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824, "for": 32464280, "retrieval_score": 15.377431}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826, "for": 32464280, "retrieval_score": 15.059486}
{"snippet": "readline.set_completer_delims(string)", "intent": "Set or get the word delimiters for completion . With arguments `string`.", "question_id": 8046, "for": 42060144, "retrieval_score": 18.446314}
{"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047, "for": 42060144, "retrieval_score": 18.39757}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 42060144, "retrieval_score": 17.035002}
{"snippet": "writer.send_flowing_data(data)", "intent": "Output character `data` which may be word-wrapped and re-flowed as needed .", "question_id": 3850, "for": 42060144, "retrieval_score": 16.277227}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674, "for": 42060144, "retrieval_score": 16.204773}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193, "for": 30628176, "retrieval_score": 15.246252}
{"snippet": "bytes.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9262, "for": 30628176, "retrieval_score": 14.833057}
{"snippet": "bytearray.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9268, "for": 30628176, "retrieval_score": 14.833057}
{"snippet": "memoryview.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the buffer .", "question_id": 9414, "for": 30628176, "retrieval_score": 14.833057}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 30628176, "retrieval_score": 13.898492}
{"snippet": "dis.hasjrel", "intent": "Sequence of bytecodes that have a relative jump target.", "question_id": 2748, "for": 1892339, "retrieval_score": 11.583958}
{"snippet": "dis.hasjabs", "intent": "Sequence of bytecodes that have an absolute jump target.", "question_id": 2749, "for": 1892339, "retrieval_score": 10.72765}
{"snippet": "dis.findlabels(code)", "intent": "Detect all offsets in the `code` object code which are jump targets , and return a list of these offsets .", "question_id": 2730, "for": 1892339, "retrieval_score": 9.559838}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490, "for": 1892339, "retrieval_score": 9.153893}
{"snippet": "Panel.replace(win)", "intent": "Change the window associated with the panel to the window `win` .", "question_id": 2151, "for": 1892339, "retrieval_score": 8.635626}
{"snippet": "dis.hasjrel", "intent": "Sequence of bytecodes that have a relative jump target.", "question_id": 2748, "for": 1892339, "retrieval_score": 11.583958}
{"snippet": "dis.hasjabs", "intent": "Sequence of bytecodes that have an absolute jump target.", "question_id": 2749, "for": 1892339, "retrieval_score": 10.72765}
{"snippet": "dis.findlabels(code)", "intent": "Detect all offsets in the `code` object code which are jump targets , and return a list of these offsets .", "question_id": 2730, "for": 1892339, "retrieval_score": 9.559838}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490, "for": 1892339, "retrieval_score": 9.153893}
{"snippet": "Panel.replace(win)", "intent": "Change the window associated with the panel to the window `win` .", "question_id": 2151, "for": 1892339, "retrieval_score": 8.635626}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 17731822, "retrieval_score": 11.526371}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 17731822, "retrieval_score": 11.526371}
{"snippet": "xmlrpc.client.dumps(params, methodresponse=None)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true .", "question_id": 12700, "for": 17731822, "retrieval_score": 10.971733}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698, "for": 17731822, "retrieval_score": 10.905937}
{"snippet": "doc_test_parser.parse(string)", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings .", "question_id": 2859, "for": 17731822, "retrieval_score": 10.553378}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518, "for": 17731822, "retrieval_score": 12.366638}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 17731822, "retrieval_score": 11.171318}
{"snippet": "xmlrpc.client.dumps(params, methodresponse=None)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true .", "question_id": 12700, "for": 17731822, "retrieval_score": 10.971733}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698, "for": 17731822, "retrieval_score": 10.905937}
{"snippet": "email_message.make_related()", "intent": "Convert a non-multipart message into a multipart/related message , moving any existing Content- headers and payload into a ( new ) first part of the multipart .", "question_id": 3294, "for": 17731822, "retrieval_score": 10.7860775}
{"snippet": "sysconfig.get_config_var(name)", "intent": "Return the value of a single variable `name` .", "question_id": 9859, "for": 15286401, "retrieval_score": 28.813286}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642, "for": 15286401, "retrieval_score": 28.463491}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 15286401, "retrieval_score": 28.072018}
{"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287, "for": 15286401, "retrieval_score": 26.015095}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653, "for": 15286401, "retrieval_score": 25.970854}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632, "for": 15286401, "retrieval_score": 8.695572}
{"snippet": "collections.ChainMap(*maps)", "intent": "A ChainMap groups multiple dicts or other mappings together to create a single , updateable view . With arguments `*maps`.", "question_id": 1335, "for": 15286401, "retrieval_score": 7.437519}
{"snippet": "text_calendar.prmonth(theyear, themonth)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`.", "question_id": 932, "for": 15286401, "retrieval_score": 6.9051156}
{"snippet": "patch.multiple(target, **kwargs, spec=None)", "intent": "Perform multiple patches in a single call . The arguments `spec` , `spec_set` , create , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `target`, `**kwargs`.", "question_id": 11633, "for": 15286401, "retrieval_score": 6.8736086}
{"snippet": "patch.multiple(target, **kwargs, spec_set=None)", "intent": "Perform multiple patches in a single call . The arguments `spec` , `spec_set` , create , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `target`, `**kwargs`.", "question_id": 11635, "for": 15286401, "retrieval_score": 6.8736086}
{"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564, "for": 15286401, "retrieval_score": 9.420873}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 15286401, "retrieval_score": 9.399977}
{"snippet": "raw_io_base.readall()", "intent": "Read and return all the bytes from the stream until EOF , using multiple calls to the stream if necessary .", "question_id": 5086, "for": 15286401, "retrieval_score": 9.119505}
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440, "for": 15286401, "retrieval_score": 8.993098}
{"snippet": "text_io_base.encoding", "intent": "The name of the encoding used to decode the stream\u2019s bytes into strings, and to encode strings into bytes.", "question_id": 5133, "for": 15286401, "retrieval_score": 8.64296}
{"snippet": "cgi.print_environ_usage()", "intent": "Print a list of useful ( used by CGI ) environment variables in HTML .", "question_id": 1056, "for": 15286401, "retrieval_score": 11.814141}
{"snippet": "ArgumentParser.print_help()", "intent": "Print a help message , including the program usage and information about the arguments registered with the ArgumentParser .", "question_id": 105, "for": 15286401, "retrieval_score": 10.582993}
{"snippet": "winreg.REG_EXPAND_SZ", "intent": "Null-terminated string containing references to environment variables (%PATH%).", "question_id": 12178, "for": 15286401, "retrieval_score": 9.712989}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453, "for": 15286401, "retrieval_score": 9.261326}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461, "for": 15286401, "retrieval_score": 9.261326}
{"snippet": "html_calendar.formatyearpage(theyear)", "intent": "Return a year \u2019 s calendar as a complete HTML page . With arguments `theyear`.", "question_id": 962, "for": 30650254, "retrieval_score": 21.348946}
{"snippet": "html_calendar.formatyearpage(theyear, width=3)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 963, "for": 30650254, "retrieval_score": 18.313082}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964, "for": 30650254, "retrieval_score": 17.256493}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054, "for": 30650254, "retrieval_score": 16.301924}
{"snippet": "html_calendar.formatyearpage(theyear, encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 965, "for": 30650254, "retrieval_score": 16.199495}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847, "for": 12096252, "retrieval_score": 16.488016}
{"snippet": "cursor.fetchmany()", "intent": "Fetches the next set of rows of a query result , returning a list .", "question_id": 8845, "for": 12096252, "retrieval_score": 16.104317}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846, "for": 12096252, "retrieval_score": 16.090435}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970, "for": 12096252, "retrieval_score": 15.74444}
{"snippet": "email_message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 3247, "for": 12096252, "retrieval_score": 15.74444}
{"snippet": "source_file_loader.load_module()", "intent": "Concrete implementation of importlib.abc.Loader.load_module ( ) where specifying the `name` of the module to load is optional .", "question_id": 4895, "for": 521502, "retrieval_score": 11.411278}
{"snippet": "source_file_loader.load_module(name=None)", "intent": "Concrete implementation of importlib.abc.Loader.load_module ( ) where specifying the `name` of the module to load is optional .", "question_id": 4896, "for": 521502, "retrieval_score": 11.411278}
{"snippet": "locale.CODESET", "intent": "Get a string with the name of the character encoding used in the selected locale.", "question_id": 5354, "for": 521502, "retrieval_score": 11.369587}
{"snippet": "time.get_clock_info(name)", "intent": "Get information on the specified clock as a namespace object . With arguments `name`.", "question_id": 10440, "for": 521502, "retrieval_score": 11.214628}
{"snippet": "locale.D_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent a date in a locale-specific way.", "question_id": 5356, "for": 521502, "retrieval_score": 10.892778}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830, "for": 39538010, "retrieval_score": 14.128525}
{"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179, "for": 39538010, "retrieval_score": 13.842147}
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309, "for": 39538010, "retrieval_score": 12.627896}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304, "for": 39538010, "retrieval_score": 12.416334}
{"snippet": "codeop.compile_command(source, filename=\"<input>\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . In that case , the `filename` attribute of the code object will be filename , which defaults to ' < input > ' .", "question_id": 1305, "for": 39538010, "retrieval_score": 12.308053}
{"snippet": "message.get_all(name)", "intent": "Return a list of all the values for the field named `name` .", "question_id": 2974, "for": 7503241, "retrieval_score": 21.157993}
{"snippet": "email_message.get_all(name)", "intent": "Return a list of all the values for the field named `name` .", "question_id": 3251, "for": 7503241, "retrieval_score": 21.157993}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971, "for": 7503241, "retrieval_score": 20.73506}
{"snippet": "email_message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 3248, "for": 7503241, "retrieval_score": 20.73506}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970, "for": 7503241, "retrieval_score": 18.81691}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857, "for": 31465002, "retrieval_score": 15.181572}
{"snippet": "context.logical_invert(x)", "intent": "Invert all the digits in `x` .", "question_id": 2546, "for": 31465002, "retrieval_score": 14.434122}
{"snippet": "gc.unfreeze()", "intent": "Unfreeze the objects in the permanent generation , put them back into the oldest generation .", "question_id": 4185, "for": 31465002, "retrieval_score": 14.174724}
{"snippet": "stream_reader.readlines()", "intent": "Read all lines available on the input stream and return them as a list of lines .", "question_id": 1295, "for": 31465002, "retrieval_score": 13.0416155}
{"snippet": "str.isdigit()", "intent": "Return true if all characters in the string are digits and there is at least one character , false otherwise .", "question_id": 9206, "for": 31465002, "retrieval_score": 12.951778}
{"snippet": "pdb.set_trace(header=None)", "intent": "Enter the debugger at the calling stack frame . If given , `header` is printed to the console just before debugging begins .", "question_id": 7337, "for": 983354, "retrieval_score": 16.644554}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160, "for": 983354, "retrieval_score": 14.998499}
{"snippet": "turtle.onkeypress(fun)", "intent": "Bind `fun` to key-press event of `key` if key is given , or to any key-press-event if no key is given .", "question_id": 11069, "for": 983354, "retrieval_score": 13.614023}
{"snippet": "turtle.onkeypress(fun, key=None)", "intent": "Bind `fun` to key-press event of `key` if key is given , or to any key-press-event if no key is given .", "question_id": 11070, "for": 983354, "retrieval_score": 13.614023}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205, "for": 983354, "retrieval_score": 13.012524}
{"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606, "for": 21947035, "retrieval_score": 12.603822}
{"snippet": "abc_meta.register(subclass)", "intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "question_id": 2, "for": 21947035, "retrieval_score": 10.904264}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 21947035, "retrieval_score": 10.857017}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 21947035, "retrieval_score": 10.857017}
{"snippet": "ast.literal_eval(node_or_string)", "intent": "Safely evaluate an expression node or a string containing a Python literal or container display . With arguments `node_or_string`.", "question_id": 149, "for": 21947035, "retrieval_score": 9.929914}
{"snippet": "xml.dom.InuseAttributeErr", "intent": "Raised when an attempt is made to insert an Attr node that is already present elsewhere in the document.", "question_id": 12384, "for": 15666169, "retrieval_score": 13.607296}
{"snippet": "Node.insertBefore(newChild, refChild)", "intent": "Insert a new child node before an existing child . `newChild` is returned . It must be the case that `refChild` is a child of this node ; if not , ValueError is raised .", "question_id": 12331, "for": 15666169, "retrieval_score": 13.555383}
{"snippet": "loop.start_tls(transport, protocol, sslcontext)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "question_id": 264, "for": 15666169, "retrieval_score": 11.985895}
{"snippet": "somenamedtuple._make(iterable)", "intent": "Class method that makes a new instance from an existing sequence or `iterable` .", "question_id": 1384, "for": 15666169, "retrieval_score": 11.948605}
{"snippet": "loop.start_tls(transport, protocol, sslcontext, server_side=False)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`, `server_side`.", "question_id": 265, "for": 15666169, "retrieval_score": 11.777022}
{"snippet": "Match.pos", "intent": "The value of pos which was passed to the search() or match() method of a regex object.", "question_id": 8009, "for": 3895874, "retrieval_score": 15.333707}
{"snippet": "Match.endpos", "intent": "The value of endpos which was passed to the search() or match() method of a regex object.", "question_id": 8010, "for": 3895874, "retrieval_score": 15.333707}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 3895874, "retrieval_score": 15.140866}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 3895874, "retrieval_score": 15.140866}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442, "for": 3895874, "retrieval_score": 14.1174555}
{"snippet": "struct.unpack_from(format, buffer)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9554, "for": 8724352, "retrieval_score": 15.742387}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555, "for": 8724352, "retrieval_score": 15.742387}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 8724352, "retrieval_score": 14.804818}
{"snippet": "ast.walk(node)", "intent": "Recursively yield all descendant nodes in the tree starting at `node` ( including node itself ) , in no specified order .", "question_id": 158, "for": 8724352, "retrieval_score": 14.56829}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_XML_DECL", "intent": "The document contained no document element at all.", "question_id": 7813, "for": 8724352, "retrieval_score": 14.543731}
{"snippet": "context.logical_invert(x)", "intent": "Invert all the digits in `x` .", "question_id": 2546, "for": 2051744, "retrieval_score": 11.336716}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 2051744, "retrieval_score": 10.680715}
{"snippet": "deque.reverse()", "intent": "Reverse the elements of the deque in-place and then return None .", "question_id": 1367, "for": 2051744, "retrieval_score": 9.924709}
{"snippet": "exit_stack.close()", "intent": "Immediately unwinds the callback stack , invoking callbacks in the reverse order of registration .", "question_id": 1631, "for": 2051744, "retrieval_score": 9.695943}
{"snippet": "audioop.reverse(fragment, width)", "intent": "Reverse the samples in a `fragment` and returns the modified fragment . With arguments `width`.", "question_id": 703, "for": 2051744, "retrieval_score": 9.477485}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 2051744, "retrieval_score": 10.680715}
{"snippet": "deque.reverse()", "intent": "Reverse the elements of the deque in-place and then return None .", "question_id": 1367, "for": 2051744, "retrieval_score": 9.924709}
{"snippet": "exit_stack.close()", "intent": "Immediately unwinds the callback stack , invoking callbacks in the reverse order of registration .", "question_id": 1631, "for": 2051744, "retrieval_score": 9.695943}
{"snippet": "audioop.reverse(fragment, width)", "intent": "Reverse the samples in a `fragment` and returns the modified fragment . With arguments `width`.", "question_id": 703, "for": 2051744, "retrieval_score": 9.477485}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 2051744, "retrieval_score": 9.268653}
{"snippet": "decimal.compare_total_mag(other)", "intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . With arguments `other`.", "question_id": 2405, "for": 13079852, "retrieval_score": 13.085989}
{"snippet": "PurePath.joinpath(*other)", "intent": "Calling this method is equivalent to combining the path with each of the other arguments in turn : With arguments `*other`.", "question_id": 7257, "for": 13079852, "retrieval_score": 12.074489}
{"snippet": "bytes.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9262, "for": 13079852, "retrieval_score": 11.494774}
{"snippet": "bytearray.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9268, "for": 13079852, "retrieval_score": 11.494774}
{"snippet": "memoryview.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the buffer .", "question_id": 9414, "for": 13079852, "retrieval_score": 11.494774}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726, "for": 2428092, "retrieval_score": 17.443802}
{"snippet": "nntplib.NNTPDataError", "intent": "Exception raised when there is some error in the response data.", "question_id": 6445, "for": 2428092, "retrieval_score": 16.60077}
{"snippet": "NNTP.date()", "intent": "Return a pair ( response , date ) .", "question_id": 6494, "for": 2428092, "retrieval_score": 16.232954}
{"snippet": "base_handler.error_body", "intent": "The error response body.", "question_id": 12265, "for": 2428092, "retrieval_score": 15.7242365}
{"snippet": "HTTPResponse.msg", "intent": "A http.client.HTTPMessage instance containing the response headers.", "question_id": 4462, "for": 2428092, "retrieval_score": 15.364498}
{"snippet": "window.notimeout(flag)", "intent": "If `flag` is True , escape sequences will not be timed out .", "question_id": 2097, "for": 4020539, "retrieval_score": 14.505394}
{"snippet": "xml.sax.saxutils.escape(data)", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` .", "question_id": 12652, "for": 4020539, "retrieval_score": 13.886785}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 4020539, "retrieval_score": 13.181577}
{"snippet": "shlex.escapedquotes", "intent": "Characters in quotes that will interpret escape characters defined in escape.", "question_id": 8299, "for": 4020539, "retrieval_score": 12.499225}
{"snippet": "window.keypad(flag)", "intent": "If `flag` is True , escape sequences generated by some keys ( keypad , function keys ) will be interpreted by curses .", "question_id": 2091, "for": 4020539, "retrieval_score": 12.406792}
{"snippet": "mime_types.read(filename)", "intent": "Load MIME information from a file named `filename` .", "question_id": 5970, "for": 16874598, "retrieval_score": 13.583339}
{"snippet": "FTP.size(filename)", "intent": "Request the size of the file named `filename` on the server .", "question_id": 3965, "for": 16874598, "retrieval_score": 13.464292}
{"snippet": "FTP.delete(filename)", "intent": "Remove the file named `filename` from the server .", "question_id": 3960, "for": 16874598, "retrieval_score": 13.219056}
{"snippet": "test.support.findfile(filename)", "intent": "Return the path to the file named `filename` .", "question_id": 10151, "for": 16874598, "retrieval_score": 13.219056}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343, "for": 16874598, "retrieval_score": 13.044571}
{"snippet": "http.cookies.BaseCookie()", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances .", "question_id": 4579, "for": 7657457, "retrieval_score": 24.772354}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 7657457, "retrieval_score": 22.827919}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 7657457, "retrieval_score": 21.379131}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 7657457, "retrieval_score": 21.379131}
{"snippet": "http.cookies.BaseCookie(input)", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "question_id": 4578, "for": 7657457, "retrieval_score": 20.676792}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 11399384, "retrieval_score": 20.848522}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 11399384, "retrieval_score": 20.848522}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 11399384, "retrieval_score": 15.220309}
{"snippet": "hashlib.algorithms_guaranteed", "intent": "A set containing the names of the hash algorithms guaranteed to be supported by this module on all platforms.", "question_id": 4299, "for": 11399384, "retrieval_score": 14.260388}
{"snippet": "sysconfig.get_path_names()", "intent": "Return a tuple containing all path names currently supported in sysconfig .", "question_id": 9861, "for": 11399384, "retrieval_score": 13.823535}
{"snippet": "message.get_charsets()", "intent": "Return a list containing the character set names in the message .", "question_id": 3024, "for": 11399384, "retrieval_score": 17.238806}
{"snippet": "email_message.get_charsets()", "intent": "Return a list containing the character set names in the message .", "question_id": 3281, "for": 11399384, "retrieval_score": 17.238806}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175, "for": 11399384, "retrieval_score": 16.340961}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 11399384, "retrieval_score": 16.267023}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 11399384, "retrieval_score": 16.267023}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857, "for": 11399384, "retrieval_score": 16.552061}
{"snippet": "mailbox.iterkeys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5729, "for": 11399384, "retrieval_score": 15.859294}
{"snippet": "mailbox.keys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5730, "for": 11399384, "retrieval_score": 15.859294}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 11399384, "retrieval_score": 15.415619}
{"snippet": "ZipFile.extractall(path=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12819, "for": 11399384, "retrieval_score": 13.669057}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 6612769, "retrieval_score": 20.385555}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 6612769, "retrieval_score": 19.589859}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 6612769, "retrieval_score": 15.461841}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 6612769, "retrieval_score": 15.461841}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 6612769, "retrieval_score": 14.431761}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 1094717, "retrieval_score": 18.002455}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 1094717, "retrieval_score": 15.972573}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 1094717, "retrieval_score": 15.765169}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 1094717, "retrieval_score": 15.729681}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 1094717, "retrieval_score": 14.953588}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 1094717, "retrieval_score": 16.640085}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 1094717, "retrieval_score": 16.399511}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 1094717, "retrieval_score": 16.393282}
{"snippet": "unicodedata.decimal(chr)", "intent": "Returns the decimal value assigned to the character `chr` as integer .", "question_id": 11344, "for": 1094717, "retrieval_score": 12.878599}
{"snippet": "i_pv4_address.exploded", "intent": "The string representation in dotted decimal notation.", "question_id": 5177, "for": 1094717, "retrieval_score": 12.695437}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 10565598, "retrieval_score": 20.821121}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 10565598, "retrieval_score": 20.821121}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 10565598, "retrieval_score": 20.816792}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122, "for": 10565598, "retrieval_score": 20.383207}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer, lock=True)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed . If `lock` is True ( the default ) then a new lock object is created to synchronize access to the value .", "question_id": 6268, "for": 10565598, "retrieval_score": 18.99207}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122, "for": 10565598, "retrieval_score": 19.523117}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 10565598, "retrieval_score": 17.382051}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 10565598, "retrieval_score": 17.382051}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983, "for": 10565598, "retrieval_score": 17.151707}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982, "for": 10565598, "retrieval_score": 16.474453}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841, "for": 15548506, "retrieval_score": 28.467052}
{"snippet": "babyl_message.get_labels()", "intent": "Return a list of labels on the message .", "question_id": 5840, "for": 15548506, "retrieval_score": 24.399488}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842, "for": 15548506, "retrieval_score": 23.191101}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843, "for": 15548506, "retrieval_score": 23.191101}
{"snippet": "babyl.get_labels()", "intent": "Return a list of the names of all user-defined labels used in the mailbox .", "question_id": 5798, "for": 15548506, "retrieval_score": 17.594595}
{"snippet": "context.rotate(x, y)", "intent": "Returns a rotated copy of `x` , `y` times .", "question_id": 2567, "for": 6532881, "retrieval_score": 18.562645}
{"snippet": "context.shift(x, y)", "intent": "Returns a shifted copy of `x` , `y` times .", "question_id": 2570, "for": 6532881, "retrieval_score": 18.562645}
{"snippet": "connection.row_factory", "intent": "You can change this attribute to a callable that accepts the cursor and the original row as a tuple and will return the real result row.", "question_id": 8825, "for": 6532881, "retrieval_score": 16.134308}
{"snippet": "html_calendar.cssclasses_weekday_head", "intent": "A list of CSS classes used for weekday names in the header row.", "question_id": 972, "for": 6532881, "retrieval_score": 15.9178915}
{"snippet": "cursor.lastrowid", "intent": "This read-only attribute provides the rowid of the last modified row.", "question_id": 8850, "for": 6532881, "retrieval_score": 15.497763}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692, "for": 7356042, "retrieval_score": 19.162954}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1693, "for": 7356042, "retrieval_score": 19.162954}
{"snippet": "csv.DictReader(f, *args, **kwds, restval=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `restval`.", "question_id": 1695, "for": 7356042, "retrieval_score": 18.757164}
{"snippet": "csv.DictReader(f, *args, **kwds, dialect='excel')", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `dialect`.", "question_id": 1696, "for": 7356042, "retrieval_score": 18.757164}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None, restval=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `restval`.", "question_id": 1698, "for": 7356042, "retrieval_score": 18.757164}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 4843158, "retrieval_score": 24.59051}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 4843158, "retrieval_score": 22.38099}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 4843158, "retrieval_score": 21.234472}
{"snippet": "Unpacker.unpack_list(unpack_item)", "intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "question_id": 12297, "for": 4843158, "retrieval_score": 20.839752}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 4843158, "retrieval_score": 20.826067}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105, "for": 11041411, "retrieval_score": 10.140229}
{"snippet": "slice(start, stop, step)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4106, "for": 11041411, "retrieval_score": 10.140229}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107, "for": 11041411, "retrieval_score": 10.140229}
{"snippet": "tracemalloc.Traceback", "intent": "Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "question_id": 10894, "for": 11041411, "retrieval_score": 10.074739}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 11041411, "retrieval_score": 9.737737}
{"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617, "for": 9755538, "retrieval_score": 14.752117}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 9755538, "retrieval_score": 13.609188}
{"snippet": "secrets.SystemRandom", "intent": "A class for generating random numbers using the highest-quality sources provided by the operating system.", "question_id": 8131, "for": 9755538, "retrieval_score": 13.309221}
{"snippet": "POP3.uidl(which=None)", "intent": "Return message digest ( unique id ) list . If `which` is specified , result contains the unique id for that message in the form 'response mesgnum uid , otherwise result is list ( response , [ 'mesgnum uid ' , ... ] , octets ) .", "question_id": 7618, "for": 9755538, "retrieval_score": 12.5177765}
{"snippet": "random.SystemRandom()", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system .", "question_id": 7921, "for": 9755538, "retrieval_score": 12.316605}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 15012228, "retrieval_score": 15.084452}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 15012228, "retrieval_score": 15.084452}
{"snippet": "bytearray.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9355, "for": 15012228, "retrieval_score": 15.084452}
{"snippet": "bytearray.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9356, "for": 15012228, "retrieval_score": 15.084452}
{"snippet": "bytes.split()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9363, "for": 15012228, "retrieval_score": 15.084452}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 13252333, "retrieval_score": 14.3766165}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 13252333, "retrieval_score": 14.000479}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 13252333, "retrieval_score": 13.648423}
{"snippet": "difflib.SequenceMatcher", "intent": "This is a flexible class for comparing pairs of sequences of any type, so long as the sequence elements are hashable.", "question_id": 2595, "for": 13252333, "retrieval_score": 13.493633}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801, "for": 13252333, "retrieval_score": 13.046951}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 13252333, "retrieval_score": 14.5013275}
{"snippet": "bytes.split(maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given and non-negative , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9365, "for": 13252333, "retrieval_score": 13.828615}
{"snippet": "bytes.split(sep=None, maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given and non-negative , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9366, "for": 13252333, "retrieval_score": 13.828615}
{"snippet": "bytearray.split(maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given and non-negative , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9369, "for": 13252333, "retrieval_score": 13.828615}
{"snippet": "bytearray.split(sep=None, maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given and non-negative , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9370, "for": 13252333, "retrieval_score": 13.828615}
{"snippet": "shlex.lineno", "intent": "Source line number (count of newlines seen so far plus one).", "question_id": 8305, "for": 13656519, "retrieval_score": 12.976011}
{"snippet": "email.iterators.body_line_iterator(msg)", "intent": "This iterates over all the payloads in all the subparts of `msg` , returning the string payloads line-by-line .", "question_id": 3208, "for": 13656519, "retrieval_score": 12.325853}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170, "for": 13656519, "retrieval_score": 12.051911}
{"snippet": "curses.ascii.isspace(c)", "intent": "Checks for ASCII white-space characters ; space , line feed , carriage return , form feed , horizontal tab , vertical tab . With arguments `c`.", "question_id": 1909, "for": 13656519, "retrieval_score": 11.931223}
{"snippet": "doctest.NORMALIZE_WHITESPACE", "intent": "When specified, all sequences of whitespace (blanks and newlines) are treated as equal.", "question_id": 2754, "for": 13656519, "retrieval_score": 11.733469}
{"snippet": "http_handler.emit(record)", "intent": "Sends the `record` to the Web server as a URL-encoded dictionary .", "question_id": 5552, "for": 20986631, "retrieval_score": 12.426566}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543, "for": 20986631, "retrieval_score": 11.823811}
{"snippet": "Panel.bottom()", "intent": "Push the panel to the bottom of the stack .", "question_id": 2147, "for": 20986631, "retrieval_score": 11.723584}
{"snippet": "http_handler.mapLogRecord(record)", "intent": "Provides a dictionary , based on `record` , which is to be URL-encoded and sent to the web server .", "question_id": 5551, "for": 20986631, "retrieval_score": 11.1508045}
{"snippet": "resource.getpagesize()", "intent": "Returns the number of bytes in a system page .", "question_id": 8096, "for": 20986631, "retrieval_score": 10.815035}
{"snippet": "http_handler.emit(record)", "intent": "Sends the `record` to the Web server as a URL-encoded dictionary .", "question_id": 5552, "for": 20986631, "retrieval_score": 13.222262}
{"snippet": "http_handler.mapLogRecord(record)", "intent": "Provides a dictionary , based on `record` , which is to be URL-encoded and sent to the web server .", "question_id": 5551, "for": 20986631, "retrieval_score": 11.847827}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543, "for": 20986631, "retrieval_score": 11.823811}
{"snippet": "Panel.bottom()", "intent": "Push the panel to the bottom of the stack .", "question_id": 2147, "for": 20986631, "retrieval_score": 11.723584}
{"snippet": "resource.getpagesize()", "intent": "Returns the number of bytes in a system page .", "question_id": 8096, "for": 20986631, "retrieval_score": 11.671343}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196, "for": 11619169, "retrieval_score": 18.698627}
{"snippet": "datetime.MAXYEAR", "intent": "The largest year number allowed in a date or datetime object.", "question_id": 2197, "for": 11619169, "retrieval_score": 18.698627}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 11619169, "retrieval_score": 17.291672}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201, "for": 11619169, "retrieval_score": 12.80668}
{"snippet": "email.utils.localtime()", "intent": "Return local time as an aware datetime object .", "question_id": 3452, "for": 11619169, "retrieval_score": 12.744944}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 740287, "retrieval_score": 15.5619755}
{"snippet": "widget.get_children()", "intent": "Returns the list of children belonging to `item` .", "question_id": 10622, "for": 740287, "retrieval_score": 14.7492695}
{"snippet": "widget.get_children(item=None)", "intent": "Returns the list of children belonging to `item` .", "question_id": 10623, "for": 740287, "retrieval_score": 14.7492695}
{"snippet": "email_message.get_charsets(failobj=None)", "intent": "Return a list containing the character set names in the message . If the subpart has no Content-Type header , no charset parameter , or is not of the text main MIME type , then that item in the returned list will be `failobj` .", "question_id": 3282, "for": 740287, "retrieval_score": 14.52331}
{"snippet": "message.get_charsets(failobj=None)", "intent": "Return a list containing the character set names in the message . However , if the subpart has no Content-Type header , no charset parameter , or is not of the text main MIME type , then that item in the returned list will be `failobj` .", "question_id": 3025, "for": 740287, "retrieval_score": 14.179224}
{"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042, "for": 902761, "retrieval_score": 20.490503}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757, "for": 902761, "retrieval_score": 18.913984}
{"snippet": "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None)", "intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Otherwise you can explicitly specify the image subtype via the `_subtype` argument . With arguments `**_params`.", "question_id": 3343, "for": 902761, "retrieval_score": 17.22909}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 902761, "retrieval_score": 16.971155}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 902761, "retrieval_score": 16.971155}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 452, "for": 19794051, "retrieval_score": 16.093391}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 6206, "for": 19794051, "retrieval_score": 16.093391}
{"snippet": "simple_queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 6213, "for": 19794051, "retrieval_score": 16.093391}
{"snippet": "Queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 7854, "for": 19794051, "retrieval_score": 16.093391}
{"snippet": "SimpleQueue.get()", "intent": "Remove and return an item from the queue .", "question_id": 7868, "for": 19794051, "retrieval_score": 16.093391}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 452, "for": 19794051, "retrieval_score": 16.093391}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 6206, "for": 19794051, "retrieval_score": 16.093391}
{"snippet": "simple_queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 6213, "for": 19794051, "retrieval_score": 16.093391}
{"snippet": "Queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 7854, "for": 19794051, "retrieval_score": 16.093391}
{"snippet": "SimpleQueue.get()", "intent": "Remove and return an item from the queue .", "question_id": 7868, "for": 19794051, "retrieval_score": 16.093391}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 452, "for": 19794051, "retrieval_score": 12.983403}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 6206, "for": 19794051, "retrieval_score": 12.983403}
{"snippet": "simple_queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 6213, "for": 19794051, "retrieval_score": 12.983403}
{"snippet": "Queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 7854, "for": 19794051, "retrieval_score": 12.983403}
{"snippet": "SimpleQueue.get()", "intent": "Remove and return an item from the queue .", "question_id": 7868, "for": 19794051, "retrieval_score": 12.983403}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 16138015, "retrieval_score": 17.638786}
{"snippet": "counter.update()", "intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) .", "question_id": 1349, "for": 16138015, "retrieval_score": 17.580914}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 16138015, "retrieval_score": 17.212559}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243, "for": 16138015, "retrieval_score": 16.324265}
{"snippet": "str.split(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9244, "for": 16138015, "retrieval_score": 16.324265}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 9210525, "retrieval_score": 13.21385}
{"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346, "for": 9210525, "retrieval_score": 13.21385}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 9210525, "retrieval_score": 12.9020815}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 9210525, "retrieval_score": 12.049211}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 9210525, "retrieval_score": 11.849233}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 9210525, "retrieval_score": 11.849233}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 9210525, "retrieval_score": 11.849233}
{"snippet": "i_pv4_address.exploded", "intent": "The string representation in dotted decimal notation.", "question_id": 5177, "for": 9210525, "retrieval_score": 10.612152}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 9210525, "retrieval_score": 10.582789}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 9210525, "retrieval_score": 9.559889}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 9210525, "retrieval_score": 11.849233}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 9210525, "retrieval_score": 11.849233}
{"snippet": "i_pv4_address.exploded", "intent": "The string representation in dotted decimal notation.", "question_id": 5177, "for": 9210525, "retrieval_score": 10.612152}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 9210525, "retrieval_score": 10.582789}
{"snippet": "i_pv6_address.ipv4_mapped", "intent": "For addresses that appear to be IPv4 mapped addresses (starting with ::FFFF/96), this property will report the embedded IPv4 address.", "question_id": 5189, "for": 9210525, "retrieval_score": 10.043112}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 9210525, "retrieval_score": 11.849233}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 9210525, "retrieval_score": 11.849233}
{"snippet": "i_pv4_address.exploded", "intent": "The string representation in dotted decimal notation.", "question_id": 5177, "for": 9210525, "retrieval_score": 10.612152}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 9210525, "retrieval_score": 10.582789}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 9210525, "retrieval_score": 9.559889}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 9210525, "retrieval_score": 11.849233}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 9210525, "retrieval_score": 11.849233}
{"snippet": "i_pv4_address.exploded", "intent": "The string representation in dotted decimal notation.", "question_id": 5177, "for": 9210525, "retrieval_score": 10.612152}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 9210525, "retrieval_score": 10.582789}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 9210525, "retrieval_score": 9.559889}
{"snippet": "@test.support.requires_mac_version(*min_version)", "intent": "Decorator for the minimum version when running test on Mac OS X . With arguments `*min_version`.", "question_id": 10213, "for": 4524723, "retrieval_score": 20.725035}
{"snippet": "stat.UF_COMPRESSED", "intent": "The file is stored compressed (Mac OS X 10.6+).", "question_id": 9118, "for": 4524723, "retrieval_score": 20.377602}
{"snippet": "stat.UF_HIDDEN", "intent": "The file should not be displayed in a GUI (Mac OS X 10.5+).", "question_id": 9119, "for": 4524723, "retrieval_score": 18.498768}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 4524723, "retrieval_score": 12.621269}
{"snippet": "os.sendfile(out, in, offset, count, headers, trailers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6795, "for": 4524723, "retrieval_score": 12.313847}
{"snippet": "turtle.setup()", "intent": "Set the size and position of the main window .", "question_id": 11107, "for": 21899953, "retrieval_score": 14.09365}
{"snippet": "turtle.setup()", "intent": "Set the size and position of the main window .", "question_id": 11117, "for": 21899953, "retrieval_score": 14.09365}
{"snippet": "turtle.setup()", "intent": "Set the size and position of the main window .", "question_id": 11127, "for": 21899953, "retrieval_score": 14.09365}
{"snippet": "turtle.setup()", "intent": "Set the size and position of the main window .", "question_id": 11137, "for": 21899953, "retrieval_score": 14.09365}
{"snippet": "turtle.setup()", "intent": "Set the size and position of the main window .", "question_id": 11147, "for": 21899953, "retrieval_score": 14.09365}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976, "for": 3704731, "retrieval_score": 20.174416}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707, "for": 3704731, "retrieval_score": 13.517696}
{"snippet": "urllib.parse.quote(string, errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11708, "for": 3704731, "retrieval_score": 13.517696}
{"snippet": "urllib.parse.quote(string, encoding=None, errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11711, "for": 3704731, "retrieval_score": 13.517696}
{"snippet": "urllib.parse.quote(string, safe='/', encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11709, "for": 3704731, "retrieval_score": 11.99867}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964, "for": 21317384, "retrieval_score": 11.007135}
{"snippet": "email_message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 3241, "for": 21317384, "retrieval_score": 11.007135}
{"snippet": "set.difference_update(*others)", "intent": "Update the set , removing elements found in others . With arguments `*others`.", "question_id": 9458, "for": 21317384, "retrieval_score": 10.009996}
{"snippet": "set -= other | ...", "intent": "Update the set, removing elements found in others.", "question_id": 9459, "for": 21317384, "retrieval_score": 9.301882}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207, "for": 21317384, "retrieval_score": 8.229829}
{"snippet": "sndhdr.what(filename)", "intent": "Determines the type of sound data stored in the file `filename` using whathdr ( ) .", "question_id": 8549, "for": 4365964, "retrieval_score": 18.950901}
{"snippet": "FTP.retrbinary(cmd, callback)", "intent": "Retrieve a file in binary transfer mode . `cmd` should be an appropriate RETR command : 'RETR filename ' . The `callback` function is called for each block of data received , with a single bytes argument giving the data block .", "question_id": 3926, "for": 4365964, "retrieval_score": 18.11876}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 4365964, "retrieval_score": 17.478842}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757, "for": 4365964, "retrieval_score": 17.331312}
{"snippet": "sndhdr.whathdr(filename)", "intent": "Determines the type of sound data stored in a file based on the file header . The name of the file is given by `filename` .", "question_id": 8550, "for": 4365964, "retrieval_score": 16.964233}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068, "for": 21804935, "retrieval_score": 15.01006}
{"snippet": "maildir_message.set_subdir(subdir)", "intent": "Set the subdirectory the message should be stored in . Parameter `subdir` must be either \u201c new \u201d or \u201c cur \u201d .", "question_id": 5814, "for": 21804935, "retrieval_score": 10.925188}
{"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750, "for": 21804935, "retrieval_score": 10.766831}
{"snippet": "IMAP4.uid(command, arg)", "intent": "Execute `command` args with messages identified by UID , rather than message number . With arguments `arg`.", "question_id": 4749, "for": 21804935, "retrieval_score": 10.055107}
{"snippet": "Path.home()", "intent": "Return a new path object representing the user \u2019 s home directory ( as returned by os.path.expanduser ( ) with ~ construct ) :", "question_id": 7266, "for": 21804935, "retrieval_score": 9.993301}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303, "for": 21804935, "retrieval_score": 13.580914}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`.", "question_id": 10304, "for": 21804935, "retrieval_score": 13.281913}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stderr`.", "question_id": 10305, "for": 21804935, "retrieval_score": 13.281913}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306, "for": 21804935, "retrieval_score": 12.995981}
{"snippet": "subprocess.run(args, stdin=None)", "intent": "Run the command described by `args` . The input argument is passed to Popen.communicate ( ) and thus to the subprocess \u2019 s `stdin` .", "question_id": 9568, "for": 21804935, "retrieval_score": 11.674753}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 16658068, "retrieval_score": 15.315205}
{"snippet": "html.entities.html5", "intent": "A dictionary that maps HTML5 named character references 1 to the equivalent Unicode character(s), e.g.", "question_id": 4342, "for": 16658068, "retrieval_score": 14.568136}
{"snippet": "ctypes.c_wchar", "intent": "Represents the C wchar_t datatype, and interprets the value as a single character unicode string.", "question_id": 1881, "for": 16658068, "retrieval_score": 14.23019}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 16658068, "retrieval_score": 11.456407}
{"snippet": "unicodedata.ucd_3_2_0", "intent": "This is an object that has the same methods as the entire module, but uses the Unicode database version 3.2 instead, for applications that require this specific version of the Unicode database (such as IDNA).", "question_id": 11357, "for": 16658068, "retrieval_score": 11.35009}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 977491, "retrieval_score": 10.366148}
{"snippet": "decimal.compare_total(other)", "intent": "Compare two operands using their abstract representation rather than their numerical value . With arguments `other`.", "question_id": 2403, "for": 977491, "retrieval_score": 9.408825}
{"snippet": "os.pwritev(fd, buffers, offset)", "intent": "Write the `buffers` contents to file descriptor `fd` at a `offset` offset , leaving the file offset unchanged .", "question_id": 6789, "for": 977491, "retrieval_score": 8.615977}
{"snippet": "decimal.compare_total_mag(other)", "intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . With arguments `other`.", "question_id": 2405, "for": 977491, "retrieval_score": 7.8517456}
{"snippet": "difflib.diff_bytes(dfunc, a, b)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc .", "question_id": 2657, "for": 977491, "retrieval_score": 7.8517456}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 4627981, "retrieval_score": 13.204882}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 4627981, "retrieval_score": 13.204882}
{"snippet": "configparser.DuplicateOptionError", "intent": "Exception raised by strict parsers if a single option appears twice during reading from a single file, string or dictionary.", "question_id": 1594, "for": 4627981, "retrieval_score": 11.59822}
{"snippet": "TarInfo.tobuf()", "intent": "Create a string buffer from a TarInfo object .", "question_id": 9973, "for": 4627981, "retrieval_score": 11.314321}
{"snippet": "xml.etree.ElementTree.XMLID(text)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data .", "question_id": 12471, "for": 4627981, "retrieval_score": 11.156551}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 34468983, "retrieval_score": 27.167404}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 34468983, "retrieval_score": 23.172958}
{"snippet": "Match.groups()", "intent": "Return a tuple containing all the subgroups of the match , from 1 up to however many groups are in the pattern .", "question_id": 7999, "for": 34468983, "retrieval_score": 20.865799}
{"snippet": "nntplib.NNTPProtocolError", "intent": "Exception raised when a reply is received from the server that does not begin with a digit in the range 1\u20135.", "question_id": 6444, "for": 34468983, "retrieval_score": 18.210743}
{"snippet": "pool.starmap(func, iterable)", "intent": "Like map ( ) except that the elements of the `iterable` are expected to be iterables that are unpacked as arguments . Hence an iterable of [ ( 1,2 ) , ( 3 , 4 ) ] results in [ `func` ( 1,2 ) , func ( 3,4 ) ] .", "question_id": 6351, "for": 34468983, "retrieval_score": 18.074362}
{"snippet": "datetime.now()", "intent": "Return the current local date and time .", "question_id": 2258, "for": 14673394, "retrieval_score": 12.28965}
{"snippet": "datetime.datetime", "intent": "A combination of a date and a time.", "question_id": 2200, "for": 14673394, "retrieval_score": 11.969468}
{"snippet": "tzinfo.fromutc(dt)", "intent": "This is called from the default datetime.astimezone ( ) implementation . When called from that , dt.tzinfo is self , and `dt` \u2019 s date and time data are to be viewed as expressing a UTC time .", "question_id": 2356, "for": 14673394, "retrieval_score": 11.825068}
{"snippet": "base_http_request_handler.log_date_time_string()", "intent": "Returns the current date and time , formatted for logging .", "question_id": 4657, "for": 14673394, "retrieval_score": 11.665548}
{"snippet": "datetime.utcnow()", "intent": "Return the current UTC date and time , with tzinfo None .", "question_id": 2260, "for": 14673394, "retrieval_score": 11.376678}
{"snippet": "str.rjust(width)", "intent": "Return the string right justified in a string of length `width` .", "question_id": 9233, "for": 16159228, "retrieval_score": 17.95194}
{"snippet": "turtle.write(arg, 8, \"normal\"))", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10969, "for": 16159228, "retrieval_score": 15.073714}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10971, "for": 16159228, "retrieval_score": 15.073714}
{"snippet": "turtle.write(arg, 8, \"normal\"), font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10972, "for": 16159228, "retrieval_score": 15.073714}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10975, "for": 16159228, "retrieval_score": 15.073714}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 118516, "retrieval_score": 17.865652}
{"snippet": "csv.excel_tab", "intent": "The excel_tab class defines the usual properties of an Excel-generated TAB-delimited file.", "question_id": 1712, "for": 118516, "retrieval_score": 14.492677}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939, "for": 118516, "retrieval_score": 9.0271225}
{"snippet": "errno.EROFS", "intent": "Read-only file system", "question_id": 3535, "for": 118516, "retrieval_score": 8.635778}
{"snippet": "pickle.load(file)", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein .", "question_id": 7371, "for": 118516, "retrieval_score": 8.414667}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 17141558, "retrieval_score": 19.118286}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340, "for": 17141558, "retrieval_score": 15.796842}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 17141558, "retrieval_score": 15.677011}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 17141558, "retrieval_score": 15.506535}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 17141558, "retrieval_score": 15.506535}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 17141558, "retrieval_score": 19.118286}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 17141558, "retrieval_score": 16.374033}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340, "for": 17141558, "retrieval_score": 15.796842}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855, "for": 17141558, "retrieval_score": 15.440799}
{"snippet": "xmlparser.ErrorColumnNumber", "intent": "Column number at which an error occurred.", "question_id": 7750, "for": 17141558, "retrieval_score": 14.951717}
{"snippet": "inspect.trace(context=1)", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in . With arguments `context`.", "question_id": 5033, "for": 17141558, "retrieval_score": 13.144681}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 17141558, "retrieval_score": 13.087731}
{"snippet": "inspect.trace()", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in .", "question_id": 5032, "for": 17141558, "retrieval_score": 12.595122}
{"snippet": "dircmp.common_dirs", "intent": "Subdirectories in both a and b.", "question_id": 3774, "for": 17141558, "retrieval_score": 11.930903}
{"snippet": "dircmp.common_files", "intent": "Files in both a and b.", "question_id": 3775, "for": 17141558, "retrieval_score": 11.930903}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 17141558, "retrieval_score": 19.118286}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636, "for": 17141558, "retrieval_score": 17.042812}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855, "for": 17141558, "retrieval_score": 16.319416}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340, "for": 17141558, "retrieval_score": 15.796842}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 17141558, "retrieval_score": 15.412365}
{"snippet": "collections.abc.MappingView", "intent": "ABCs for mapping, items, keys, and values views.", "question_id": 1326, "for": 7284952, "retrieval_score": 10.670478}
{"snippet": "collections.abc.ItemsView", "intent": "ABCs for mapping, items, keys, and values views.", "question_id": 1327, "for": 7284952, "retrieval_score": 10.670478}
{"snippet": "collections.abc.KeysView", "intent": "ABCs for mapping, items, keys, and values views.", "question_id": 1328, "for": 7284952, "retrieval_score": 10.670478}
{"snippet": "collections.abc.ValuesView", "intent": "ABCs for mapping, items, keys, and values views.", "question_id": 1329, "for": 7284952, "retrieval_score": 10.670478}
{"snippet": "HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)", "intent": "Return a Request or None in response to a redirect . If a redirection should take place , return a new Request to allow http_error_30* ( ) to perform the redirect to `newurl` . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11850, "for": 7284952, "retrieval_score": 10.591318}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971, "for": 2514961, "retrieval_score": 20.145582}
{"snippet": "email_message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 3248, "for": 2514961, "retrieval_score": 20.145582}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 2514961, "retrieval_score": 19.711256}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 2514961, "retrieval_score": 18.993534}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 2514961, "retrieval_score": 18.993534}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513, "for": 16050952, "retrieval_score": 13.746717}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126, "for": 16050952, "retrieval_score": 10.73732}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 16050952, "retrieval_score": 10.642273}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 16050952, "retrieval_score": 10.642273}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463, "for": 16050952, "retrieval_score": 10.642273}
{"snippet": "Element.setAttribute(name, value)", "intent": "Set an attribute `value` from a string . With arguments `name`.", "question_id": 12366, "for": 11205386, "retrieval_score": 21.209425}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE", "intent": "An attribute was used more than once in a start tag.", "question_id": 7792, "for": 11205386, "retrieval_score": 20.96508}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347, "for": 11205386, "retrieval_score": 20.445396}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058, "for": 11205386, "retrieval_score": 20.376188}
{"snippet": "test.support.get_attribute(obj, name)", "intent": "Get an attribute , raising unittest.SkipTest if AttributeError is raised . With arguments `obj`, `name`.", "question_id": 10257, "for": 11205386, "retrieval_score": 20.183357}
{"snippet": "urllib.parse.parse_qs(qs, encoding='utf-8')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional `encoding` and errors parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method . With arguments `qs`.", "question_id": 11672, "for": 300445, "retrieval_score": 11.376654}
{"snippet": "urllib.parse.parse_qsl(qs, encoding='utf-8')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional `encoding` and errors parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method . With arguments `qs`.", "question_id": 11682, "for": 300445, "retrieval_score": 11.376654}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 300445, "retrieval_score": 11.2570915}
{"snippet": "xml.dom.pulldom.parseString(string)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` .", "question_id": 12429, "for": 300445, "retrieval_score": 10.963811}
{"snippet": "urllib.parse.parse_qs(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11669, "for": 300445, "retrieval_score": 10.504295}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 300445, "retrieval_score": 26.438547}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 300445, "retrieval_score": 24.115553}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 300445, "retrieval_score": 24.115553}
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440, "for": 300445, "retrieval_score": 23.052807}
{"snippet": "tarfile.ENCODING", "intent": "The default character encoding: 'utf-8' on Windows, the value returned by sys.getfilesystemencoding() otherwise.", "question_id": 9908, "for": 300445, "retrieval_score": 20.882647}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221, "for": 1400608, "retrieval_score": 9.182899}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 1400608, "retrieval_score": 9.081409}
{"snippet": "glob.glob(pathname)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification .", "question_id": 4264, "for": 1400608, "retrieval_score": 8.861345}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801, "for": 1400608, "retrieval_score": 8.681202}
{"snippet": "queue_listener.__init__()", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5594, "for": 1400608, "retrieval_score": 8.135815}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221, "for": 1400608, "retrieval_score": 9.182899}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 1400608, "retrieval_score": 9.081409}
{"snippet": "glob.glob(pathname)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification .", "question_id": 4264, "for": 1400608, "retrieval_score": 8.861345}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801, "for": 1400608, "retrieval_score": 8.681202}
{"snippet": "queue_listener.__init__()", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5594, "for": 1400608, "retrieval_score": 8.135815}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221, "for": 1400608, "retrieval_score": 9.182899}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 1400608, "retrieval_score": 9.081409}
{"snippet": "glob.glob(pathname)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification .", "question_id": 4264, "for": 1400608, "retrieval_score": 8.861345}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801, "for": 1400608, "retrieval_score": 8.681202}
{"snippet": "queue_listener.__init__()", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5594, "for": 1400608, "retrieval_score": 8.135815}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221, "for": 1400608, "retrieval_score": 9.182899}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 1400608, "retrieval_score": 9.081409}
{"snippet": "glob.glob(pathname)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification .", "question_id": 4264, "for": 1400608, "retrieval_score": 8.861345}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801, "for": 1400608, "retrieval_score": 8.681202}
{"snippet": "queue_listener.__init__()", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5594, "for": 1400608, "retrieval_score": 8.135815}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 18624039, "retrieval_score": 11.203545}
{"snippet": "widget.index(item)", "intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "question_id": 10639, "for": 18624039, "retrieval_score": 11.013026}
{"snippet": "errno.ENETRESET", "intent": "Network dropped connection because of reset", "question_id": 3607, "for": 18624039, "retrieval_score": 10.34337}
{"snippet": "errno.EL3RST", "intent": "Level 3 reset", "question_id": 3552, "for": 18624039, "retrieval_score": 9.859764}
{"snippet": "HTMLParser.reset()", "intent": "Reset the instance .", "question_id": 4353, "for": 18624039, "retrieval_score": 9.859764}
{"snippet": "doctest.DocFileSuite(*paths, encoding=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `encoding` specifies an encoding that should be used to convert the file to unicode . With arguments `*paths`.", "question_id": 2804, "for": 36623789, "retrieval_score": 20.390915}
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440, "for": 36623789, "retrieval_score": 19.4234}
{"snippet": "turtle.write(arg, 8, \"normal\"))", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10969, "for": 36623789, "retrieval_score": 18.55901}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10971, "for": 36623789, "retrieval_score": 18.55901}
{"snippet": "turtle.write(arg, 8, \"normal\"), font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10972, "for": 36623789, "retrieval_score": 18.55901}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640, "for": 4029436, "retrieval_score": 25.26551}
{"snippet": "widget.insert(parent, index, **kw, iid=None)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . If `iid` is specified , it is used as the item identifier ; iid must not already exist in the tree . With arguments `**kw`.", "question_id": 10641, "for": 4029436, "retrieval_score": 24.75274}
{"snippet": "widget.get_children()", "intent": "Returns the list of children belonging to `item` .", "question_id": 10622, "for": 4029436, "retrieval_score": 24.527634}
{"snippet": "widget.get_children(item=None)", "intent": "Returns the list of children belonging to `item` .", "question_id": 10623, "for": 4029436, "retrieval_score": 24.527634}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 4029436, "retrieval_score": 23.863955}
{"snippet": "text_calendar.formatmonth(theyear, themonth)", "intent": "Return a month \u2019 s calendar in a multi-line string . With arguments `theyear`, `themonth`.", "question_id": 928, "for": 32950347, "retrieval_score": 15.172134}
{"snippet": "shlex.quote(s)", "intent": "Return a shell-escaped version of the string s. The returned value is a string that can safely be used as one token in a shell command line , for cases where you can not use a list . With arguments `s`.", "question_id": 8272, "for": 32950347, "retrieval_score": 14.48865}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617, "for": 32950347, "retrieval_score": 14.211247}
{"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618, "for": 32950347, "retrieval_score": 14.211247}
{"snippet": "date_time.decode(string)", "intent": "Accept a `string` as the instance \u2019 s new time value .", "question_id": 12683, "for": 32950347, "retrieval_score": 13.723629}
{"snippet": "test.support.import_fresh_module(name, deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10245, "for": 4116061, "retrieval_score": 15.691811}
{"snippet": "test.support.import_fresh_module(name, fresh=(), deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10247, "for": 4116061, "retrieval_score": 15.691811}
{"snippet": "test.support.import_fresh_module(name, blocked=(), deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10248, "for": 4116061, "retrieval_score": 14.887487}
{"snippet": "test.support.import_fresh_module(name, fresh=(), blocked=(), deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10249, "for": 4116061, "retrieval_score": 14.887487}
{"snippet": "importlib.import_module(name, package=None)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g . If the name is specified in relative terms , then the `package` argument must be set to the name of the package which is to act as the anchor for resolving the package name ( e.g .", "question_id": 4794, "for": 4116061, "retrieval_score": 14.836266}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 4481724, "retrieval_score": 16.412117}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 4481724, "retrieval_score": 15.61577}
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925, "for": 4481724, "retrieval_score": 15.61577}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 4481724, "retrieval_score": 15.597302}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513, "for": 4481724, "retrieval_score": 15.553645}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773, "for": 258746, "retrieval_score": 28.251572}
{"snippet": "widget.identify_row(y)", "intent": "Returns the item ID of the item at position `y` .", "question_id": 10635, "for": 258746, "retrieval_score": 27.523663}
{"snippet": "webbrowser.open_new_tab(url)", "intent": "Open `url` in a new page ( \u201c tab \u201d ) of the default browser , if possible , otherwise equivalent to open_new ( ) .", "question_id": 12107, "for": 258746, "retrieval_score": 24.533314}
{"snippet": "urllib.request.Request(url, data=None, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11777, "for": 258746, "retrieval_score": 24.141558}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689, "for": 258746, "retrieval_score": 23.46763}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 9001509, "retrieval_score": 15.281354}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 9001509, "retrieval_score": 14.971519}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 9001509, "retrieval_score": 14.846977}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 9001509, "retrieval_score": 14.438908}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 9001509, "retrieval_score": 14.349354}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 9001509, "retrieval_score": 16.024452}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 9001509, "retrieval_score": 15.184458}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 9001509, "retrieval_score": 14.971519}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 9001509, "retrieval_score": 14.846977}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 9001509, "retrieval_score": 14.438908}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 33127636, "retrieval_score": 19.893887}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752, "for": 33127636, "retrieval_score": 19.672964}
{"snippet": "urllib.request.Request(url, unverifiable=False)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `unverifiable` should indicate whether the request is unverifiable , as defined by RFC 2965 .", "question_id": 11772, "for": 33127636, "retrieval_score": 18.941437}
{"snippet": "urllib.request.Request(url, origin_req_host=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `origin_req_host` should be the request-host of the origin transaction , as defined by RFC 2965 .", "question_id": 11771, "for": 33127636, "retrieval_score": 18.68436}
{"snippet": "urllib.request.urlopen(url, cadefault=False)", "intent": "Open the URL `url` , which can be either a string or a Request object . The `cadefault` parameter is ignored .", "question_id": 11756, "for": 33127636, "retrieval_score": 18.264503}
{"snippet": "base64.b32decode(s, casefold=False, map01=None)", "intent": "Decode the Base32 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `casefold` is a flag specifying whether a lowercase alphabet is acceptable as input . The optional argument `map01` when not None , specifies which letter the digit 1 should be mapped to ( when map01 is not None , the digit 0 is always mapped to the letter O ) .", "question_id": 722, "for": 6323296, "retrieval_score": 17.47386}
{"snippet": "nntplib.NNTPProtocolError", "intent": "Exception raised when a reply is received from the server that does not begin with a digit in the range 1\u20135.", "question_id": 6444, "for": 6323296, "retrieval_score": 15.949494}
{"snippet": "base64.b64decode(s, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 712, "for": 6323296, "retrieval_score": 14.228347}
{"snippet": "base64.b32decode(s, map01=None)", "intent": "Decode the Base32 encoded bytes-like object or ASCII string `s` and return the decoded bytes . The optional argument `map01` when not None , specifies which letter the digit 1 should be mapped to ( when map01 is not None , the digit 0 is always mapped to the letter O ) .", "question_id": 721, "for": 6323296, "retrieval_score": 14.015835}
{"snippet": "Node.replaceChild(newChild, oldChild)", "intent": "Replace an existing node with a new node . It must be the case that `oldChild` is a child of this node ; if not , ValueError is raised . With arguments `newChild`.", "question_id": 12333, "for": 6323296, "retrieval_score": 13.766657}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 16568056, "retrieval_score": 25.93744}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 16568056, "retrieval_score": 25.45503}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895, "for": 16568056, "retrieval_score": 23.304718}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898, "for": 16568056, "retrieval_score": 23.304718}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 16568056, "retrieval_score": 22.754602}
{"snippet": "context.to_eng_string(x)", "intent": "Convert to a string , using engineering notation if an exponent is needed . With arguments `x`.", "question_id": 2573, "for": 1246444, "retrieval_score": 16.23838}
{"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478, "for": 1246444, "retrieval_score": 13.048855}
{"snippet": "math.degrees(x)", "intent": "Convert angle `x` from radians to degrees .", "question_id": 5922, "for": 1246444, "retrieval_score": 12.440778}
{"snippet": "math.radians(x)", "intent": "Convert angle `x` from degrees to radians .", "question_id": 5923, "for": 1246444, "retrieval_score": 12.440778}
{"snippet": "decimal.to_eng_string(context=None)", "intent": "Convert to a string , using engineering notation if an exponent is needed . With arguments `context`.", "question_id": 2479, "for": 1246444, "retrieval_score": 12.186281}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 9754729, "retrieval_score": 18.993534}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 9754729, "retrieval_score": 18.993534}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843, "for": 9754729, "retrieval_score": 17.112219}
{"snippet": "Element.removeAttributeNode(oldAttr)", "intent": "Remove and return `oldAttr` from the attribute list , if present .", "question_id": 12364, "for": 9754729, "retrieval_score": 17.112219}
{"snippet": "mh_message.remove_sequence(sequence)", "intent": "Remove `sequence` from the list of sequences that include this message .", "question_id": 5837, "for": 9754729, "retrieval_score": 16.698715}
{"snippet": "turtle.clear()", "intent": "Delete the turtle \u2019 s drawings from the screen .", "question_id": 10968, "for": 3559559, "retrieval_score": 14.307125}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 3559559, "retrieval_score": 13.2108755}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040, "for": 3559559, "retrieval_score": 13.2108755}
{"snippet": "message.__delitem__(name)", "intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "question_id": 2968, "for": 3559559, "retrieval_score": 12.373012}
{"snippet": "email_message.__delitem__(name)", "intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "question_id": 3245, "for": 3559559, "retrieval_score": 12.373012}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 3559559, "retrieval_score": 13.2108755}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040, "for": 3559559, "retrieval_score": 13.2108755}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762, "for": 3559559, "retrieval_score": 12.453854}
{"snippet": "window.idcok(flag)", "intent": "If `flag` is False , curses no longer considers using the hardware insert/delete character feature of the terminal ; if flag is True , use of character insertion and deletion is enabled .", "question_id": 2066, "for": 3559559, "retrieval_score": 12.046244}
{"snippet": "curses.has_ic()", "intent": "Return True if the terminal has insert- and delete-character capabilities .", "question_id": 1941, "for": 3559559, "retrieval_score": 11.614723}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 41821112, "retrieval_score": 15.716876}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 41821112, "retrieval_score": 15.34838}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 41821112, "retrieval_score": 15.34838}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518, "for": 41821112, "retrieval_score": 15.315283}
{"snippet": "difflib.diff_bytes(dfunc, a, b)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc .", "question_id": 2657, "for": 41821112, "retrieval_score": 15.159787}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 41821112, "retrieval_score": 20.747698}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 41821112, "retrieval_score": 20.747698}
{"snippet": "operator.getitem(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6575, "for": 41821112, "retrieval_score": 20.747698}
{"snippet": "operator.__getitem__(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6576, "for": 41821112, "retrieval_score": 20.747698}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 41821112, "retrieval_score": 19.720165}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 41821112, "retrieval_score": 20.747698}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 41821112, "retrieval_score": 20.747698}
{"snippet": "operator.getitem(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6575, "for": 41821112, "retrieval_score": 20.747698}
{"snippet": "operator.__getitem__(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6576, "for": 41821112, "retrieval_score": 20.747698}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 41821112, "retrieval_score": 19.720165}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518, "for": 41821112, "retrieval_score": 13.628548}
{"snippet": "differ.compare(a, b)", "intent": "Compare two sequences of lines , and generate the delta ( `a` sequence of lines ) . With arguments `b`.", "question_id": 2694, "for": 41821112, "retrieval_score": 13.216902}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 41821112, "retrieval_score": 13.048763}
{"snippet": "context.multiply(x, y)", "intent": "Return the product of `x` and `y` .", "question_id": 2554, "for": 41821112, "retrieval_score": 13.029799}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 41821112, "retrieval_score": 12.551105}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 12426043, "retrieval_score": 18.662819}
{"snippet": "pickle.dump(obj, file)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file .", "question_id": 7363, "for": 12426043, "retrieval_score": 13.721964}
{"snippet": "os.writev(fd, buffers)", "intent": "Write the contents of `buffers` to file descriptor `fd` .", "question_id": 6810, "for": 12426043, "retrieval_score": 13.565604}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35, "for": 12426043, "retrieval_score": 13.387562}
{"snippet": "pyc_invalidation_mode.UNCHECKED_HASH", "intent": "Like CHECKED_HASH, the .pyc file includes a hash of the source file content.", "question_id": 7834, "for": 12426043, "retrieval_score": 13.21196}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112, "for": 9304408, "retrieval_score": 15.203064}
{"snippet": "directory.glob(pattern)", "intent": "Add a list of files to the current component as specified in the glob `pattern` .", "question_id": 6111, "for": 9304408, "retrieval_score": 14.723745}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842, "for": 9304408, "retrieval_score": 14.618216}
{"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836, "for": 9304408, "retrieval_score": 14.2649765}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506, "for": 9304408, "retrieval_score": 13.564964}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 4587915, "retrieval_score": 19.466427}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970, "for": 4587915, "retrieval_score": 18.019945}
{"snippet": "email_message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 3247, "for": 4587915, "retrieval_score": 18.019945}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026, "for": 4587915, "retrieval_score": 17.931923}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 4587915, "retrieval_score": 17.829817}
{"snippet": "writer.new_styles(styles)", "intent": "Set additional `styles` .", "question_id": 3846, "for": 8409095, "retrieval_score": 16.227535}
{"snippet": "turtle.bgcolor(*args)", "intent": "Set or return background color of the TurtleScreen . With arguments `*args`.", "question_id": 11040, "for": 8409095, "retrieval_score": 11.476194}
{"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967, "for": 8409095, "retrieval_score": 10.947137}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927, "for": 8409095, "retrieval_score": 10.4254055}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928, "for": 8409095, "retrieval_score": 10.4254055}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934, "for": 8409095, "retrieval_score": 26.791344}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935, "for": 8409095, "retrieval_score": 26.791344}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 8409095, "retrieval_score": 22.374426}
{"snippet": "cmath.log10(x)", "intent": "Return the base-10 logarithm of `x` .", "question_id": 1099, "for": 8409095, "retrieval_score": 19.330782}
{"snippet": "context.log10(x)", "intent": "Returns the base 10 logarithm of `x` .", "question_id": 2543, "for": 8409095, "retrieval_score": 19.330782}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224, "for": 6696027, "retrieval_score": 19.053215}
{"snippet": "gettext.translation(domain, codeset=None)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths . If provided , `codeset` will change the charset used to encode translated strings in the lgettext ( ) and lngettext ( ) methods .", "question_id": 4234, "for": 6696027, "retrieval_score": 17.906479}
{"snippet": "gettext.translation(domain, localedir=None, codeset=None)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths . If provided , `codeset` will change the charset used to encode translated strings in the lgettext ( ) and lngettext ( ) methods .", "question_id": 4238, "for": 6696027, "retrieval_score": 17.906479}
{"snippet": "asyncio.Queue()", "intent": "A first in , first out ( FIFO ) queue .", "question_id": 445, "for": 6696027, "retrieval_score": 17.733189}
{"snippet": "os.SCHED_FIFO", "intent": "A First In First Out scheduling policy.", "question_id": 7100, "for": 6696027, "retrieval_score": 17.733189}
{"snippet": "text_wrapper.replace_whitespace", "intent": "(default: True) If true, after tab expansion but before wrapping, the wrap() method will replace each whitespace character with a single space.", "question_id": 10330, "for": 6696027, "retrieval_score": 14.018751}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193, "for": 6696027, "retrieval_score": 13.148878}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254, "for": 6696027, "retrieval_score": 12.835656}
{"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931, "for": 6696027, "retrieval_score": 12.690322}
{"snippet": "re.MULTILINE", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7932, "for": 6696027, "retrieval_score": 12.690322}
{"snippet": "config_parser.sections()", "intent": "Return a list of the sections available ; the default section is not included in the list .", "question_id": 1507, "for": 11344827, "retrieval_score": 11.573293}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 11344827, "retrieval_score": 11.529538}
{"snippet": "NNTP.list()", "intent": "Send a LIST or LIST ACTIVE command .", "question_id": 6465, "for": 11344827, "retrieval_score": 11.427258}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 11344827, "retrieval_score": 11.036706}
{"snippet": "aifc.getmarkers()", "intent": "Return a list of markers in the audio file .", "question_id": 18, "for": 11344827, "retrieval_score": 10.952161}
{"snippet": "pdb.Pdb()", "intent": "Pdb is the debugger class .", "question_id": 7341, "for": 4716533, "retrieval_score": 23.039272}
{"snippet": "pdb.Pdb(nosigint=False)", "intent": "Pdb is the debugger class . If you want Pdb not to touch the SIGINT handler , set `nosigint` to true .", "question_id": 7346, "for": 4716533, "retrieval_score": 20.531721}
{"snippet": "pdb.Pdb(readrc=True)", "intent": "Pdb is the debugger class . The `readrc` argument defaults to true and controls whether Pdb will load .pdbrc files from the filesystem .", "question_id": 7347, "for": 4716533, "retrieval_score": 19.192446}
{"snippet": "pdb.Pdb(completekey='tab')", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7342, "for": 4716533, "retrieval_score": 17.51327}
{"snippet": "pdb.Pdb(stdin=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7343, "for": 4716533, "retrieval_score": 17.51327}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 17846545, "retrieval_score": 23.336245}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 17846545, "retrieval_score": 23.336245}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 17846545, "retrieval_score": 21.128822}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 17846545, "retrieval_score": 19.27043}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 17846545, "retrieval_score": 19.27043}
{"snippet": "email.utils.localtime(dt=None)", "intent": "Return local time as an aware datetime object . Otherwise `dt` argument should be a datetime instance , and it is converted to the local time zone according to the system time zone database .", "question_id": 3453, "for": 6310475, "retrieval_score": 14.186283}
{"snippet": "email.utils.localtime()", "intent": "Return local time as an aware datetime object .", "question_id": 3452, "for": 6310475, "retrieval_score": 13.160036}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355, "for": 6310475, "retrieval_score": 12.9761305}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201, "for": 6310475, "retrieval_score": 12.581688}
{"snippet": "maildir.clean()", "intent": "Delete temporary files from the mailbox that have not been accessed in the last 36 hours .", "question_id": 5762, "for": 6310475, "retrieval_score": 12.137617}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 1386811, "retrieval_score": 15.028915}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 1386811, "retrieval_score": 14.75656}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 1386811, "retrieval_score": 13.425169}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826, "for": 1386811, "retrieval_score": 13.084449}
{"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478, "for": 1386811, "retrieval_score": 13.048855}
{"snippet": "shelve.Shelf(dict, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8247, "for": 8305518, "retrieval_score": 15.491389}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 8305518, "retrieval_score": 15.461841}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 8305518, "retrieval_score": 15.461841}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150, "for": 8305518, "retrieval_score": 14.667891}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518, "for": 8305518, "retrieval_score": 14.3815775}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 21361604, "retrieval_score": 12.138526}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 21361604, "retrieval_score": 12.138526}
{"snippet": "gc.callbacks", "intent": "A list of callbacks that will be invoked by the garbage collector before and after collection.", "question_id": 4188, "for": 21361604, "retrieval_score": 11.16612}
{"snippet": "text_calendar.prmonth(theyear, themonth, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 934, "for": 21361604, "retrieval_score": 10.043908}
{"snippet": "calendar.prmonth(theyear, themonth, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 995, "for": 21361604, "retrieval_score": 10.043908}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 17149561, "retrieval_score": 17.182161}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392, "for": 17149561, "retrieval_score": 16.560911}
{"snippet": "ordered_dict.popitem()", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair .", "question_id": 1391, "for": 17149561, "retrieval_score": 16.344852}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842, "for": 17149561, "retrieval_score": 15.85871}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843, "for": 17149561, "retrieval_score": 15.85871}
{"snippet": "Match.groups()", "intent": "Return a tuple containing all the subgroups of the match , from 1 up to however many groups are in the pattern .", "question_id": 7999, "for": 2186656, "retrieval_score": 15.296855}
{"snippet": "date.toordinal()", "intent": "Return the proleptic Gregorian ordinal of the date , where January 1 of year 1 has ordinal 1 .", "question_id": 2238, "for": 2186656, "retrieval_score": 15.199062}
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221, "for": 2186656, "retrieval_score": 14.694861}
{"snippet": "datetime.fromordinal(ordinal)", "intent": "Return the datetime corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2264, "for": 2186656, "retrieval_score": 14.694861}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 2186656, "retrieval_score": 14.599652}
{"snippet": "Match.groups()", "intent": "Return a tuple containing all the subgroups of the match , from 1 up to however many groups are in the pattern .", "question_id": 7999, "for": 2186656, "retrieval_score": 15.953182}
{"snippet": "date.toordinal()", "intent": "Return the proleptic Gregorian ordinal of the date , where January 1 of year 1 has ordinal 1 .", "question_id": 2238, "for": 2186656, "retrieval_score": 15.199062}
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221, "for": 2186656, "retrieval_score": 14.694861}
{"snippet": "datetime.fromordinal(ordinal)", "intent": "Return the datetime corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2264, "for": 2186656, "retrieval_score": 14.694861}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 2186656, "retrieval_score": 14.599652}
{"snippet": "urllib.parse.urlencode(query, doseq=False, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11741, "for": 4576115, "retrieval_score": 29.01278}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 4576115, "retrieval_score": 28.731077}
{"snippet": "tree_builder.start(tag, attrs)", "intent": "Opens a new element . `tag` is the element name . `attrs` is a dictionary containing element attributes .", "question_id": 12544, "for": 4576115, "retrieval_score": 28.403528}
{"snippet": "urllib.parse.urlencode(query, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11737, "for": 4576115, "retrieval_score": 27.905382}
{"snippet": "urllib.parse.urlencode(query, doseq=False, encoding=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11739, "for": 4576115, "retrieval_score": 27.206371}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_NONE", "intent": "No modifier is given, so it can appear exactly once, as for A.", "question_id": 7783, "for": 3899782, "retrieval_score": 14.765128}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_OPT", "intent": "The model is optional: it can appear once or not at all, as for A?.", "question_id": 7784, "for": 3899782, "retrieval_score": 14.114446}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 3899782, "retrieval_score": 12.282554}
{"snippet": "itertools.combinations_with_replacement(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` allowing individual elements to be repeated more than once .", "question_id": 5244, "for": 3899782, "retrieval_score": 12.133214}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540, "for": 3899782, "retrieval_score": 12.070597}
{"snippet": "shutil.unpack_archive(filename)", "intent": "Unpack an archive . `filename` is the full path of the archive .", "question_id": 8365, "for": 3431825, "retrieval_score": 16.279495}
{"snippet": "dir_entry.path", "intent": "The entry\u2019s full path name: equivalent to os.path.join(scandir_path, entry.name) where scandir_path is the scandir() path argument.", "question_id": 6908, "for": 3431825, "retrieval_score": 15.602279}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152, "for": 3431825, "retrieval_score": 15.22292}
{"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961, "for": 3431825, "retrieval_score": 14.893431}
{"snippet": "os.path.getsize(path)", "intent": "Return the size , in bytes , of `path` .", "question_id": 7154, "for": 3431825, "retrieval_score": 14.6650915}
{"snippet": "email_policy.fold(name, value)", "intent": "Header folding is controlled by the refold_source policy setting . A `value` is considered to be a \u2018 source value \u2019 if and only if it does not have a `name` attribute ( having a name attribute means it is a header object of some sort ) .", "question_id": 3437, "for": 42765620, "retrieval_score": 27.805489}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 42765620, "retrieval_score": 27.278767}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 42765620, "retrieval_score": 27.278767}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663, "for": 42765620, "retrieval_score": 26.345177}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664, "for": 42765620, "retrieval_score": 26.345177}
{"snippet": "sys.setswitchinterval(interval)", "intent": "Set the interpreter \u2019 s thread switch `interval` ( in seconds ) .", "question_id": 9838, "for": 8344905, "retrieval_score": 16.216549}
{"snippet": "sys.getswitchinterval()", "intent": "Return the interpreter \u2019 s \u201c thread switch interval \u201d ; see setswitchinterval ( ) .", "question_id": 9804, "for": 8344905, "retrieval_score": 14.2390585}
{"snippet": "shlex.quote(s)", "intent": "Return a shell-escaped version of the string s. The returned value is a string that can safely be used as one token in a shell command line , for cases where you can not use a list . With arguments `s`.", "question_id": 8272, "for": 8344905, "retrieval_score": 11.270232}
{"snippet": "string.ascii_lowercase", "intent": "The lowercase letters 'abcdefghijklmnopqrstuvwxyz'.", "question_id": 9508, "for": 8344905, "retrieval_score": 11.147922}
{"snippet": "string.ascii_uppercase", "intent": "The uppercase letters 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "question_id": 9509, "for": 8344905, "retrieval_score": 11.147922}
{"snippet": "base_handler._flush()", "intent": "Force buffered data to be transmitted to the client .", "question_id": 12249, "for": 21822054, "retrieval_score": 12.501735}
{"snippet": "test.support.gc_collect()", "intent": "Force as many objects as possible to be collected .", "question_id": 10192, "for": 21822054, "retrieval_score": 12.177871}
{"snippet": "os.sync()", "intent": "Force write of everything to disk .", "question_id": 6955, "for": 21822054, "retrieval_score": 12.008298}
{"snippet": "cgihttp_request_handler.cgi_directories", "intent": "This defaults to ['/cgi-bin', '/htbin'] and describes directories to treat as containing CGI scripts.", "question_id": 4667, "for": 21822054, "retrieval_score": 11.144775}
{"snippet": "os.fdatasync(fd)", "intent": "Force write of file with filedescriptor `fd` to disk .", "question_id": 6721, "for": 21822054, "retrieval_score": 11.093578}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds)", "intent": "Run the `cmd` shell command . With arguments `**kwds`.", "question_id": 533, "for": 21822054, "retrieval_score": 18.254944}
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673, "for": 21822054, "retrieval_score": 18.254944}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534, "for": 21822054, "retrieval_score": 17.791426}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, loop=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `loop`.", "question_id": 537, "for": 21822054, "retrieval_score": 17.791426}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573, "for": 21822054, "retrieval_score": 17.791426}
{"snippet": "test_loader.loadTestsFromName(name)", "intent": "Return a suite of all test cases given a string specifier . The specifier `name` is a \u201c dotted name \u201d that may resolve either to a `module` , a test case class , a test method within a test case class , a TestSuite instance , or a callable object which returns a TestCase or TestSuite instance .", "question_id": 11494, "for": 13303100, "retrieval_score": 15.718217}
{"snippet": "test_loader.loadTestsFromName(name, module=None)", "intent": "Return a suite of all test cases given a string specifier . The specifier `name` is a \u201c dotted name \u201d that may resolve either to a `module` , a test case class , a test method within a test case class , a TestSuite instance , or a callable object which returns a TestCase or TestSuite instance .", "question_id": 11495, "for": 13303100, "retrieval_score": 15.718217}
{"snippet": "types.DynamicClassAttribute()", "intent": "Route attribute access on a class to __getattr__ .", "question_id": 11218, "for": 13303100, "retrieval_score": 15.040567}
{"snippet": "base_http_request_handler.headers", "intent": "Holds an instance of the class specified by the MessageClass class variable.", "question_id": 4624, "for": 13303100, "retrieval_score": 14.78456}
{"snippet": "dis.haslocal", "intent": "Sequence of bytecodes that access a local variable.", "question_id": 2750, "for": 13303100, "retrieval_score": 14.572876}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757, "for": 5333244, "retrieval_score": 12.000447}
{"snippet": "winsound.SND_MEMORY", "intent": "The sound parameter to PlaySound() is a memory image of a WAV file, as a bytes-like object.", "question_id": 12199, "for": 5333244, "retrieval_score": 10.164694}
{"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042, "for": 5333244, "retrieval_score": 9.661301}
{"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758, "for": 5333244, "retrieval_score": 9.203363}
{"snippet": "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None)", "intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Otherwise you can explicitly specify the image subtype via the `_subtype` argument . With arguments `**_params`.", "question_id": 3343, "for": 5333244, "retrieval_score": 8.913608}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723, "for": 3151146, "retrieval_score": 21.031736}
{"snippet": "urllib.parse.quote_plus(string, safe='', encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`.", "question_id": 11717, "for": 3151146, "retrieval_score": 15.190658}
{"snippet": "urllib.parse.quote_plus(string, safe='', errors=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `errors`.", "question_id": 11718, "for": 3151146, "retrieval_score": 15.190658}
{"snippet": "urllib.parse.quote_plus(string, safe='', encoding=None, errors=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`, `errors`.", "question_id": 11720, "for": 3151146, "retrieval_score": 15.190658}
{"snippet": "urllib.parse.quote_plus(string, safe='')", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` .", "question_id": 11714, "for": 3151146, "retrieval_score": 15.15222}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 9466017, "retrieval_score": 15.677011}
{"snippet": "zipfile.is_zipfile(filename)", "intent": "Returns True if `filename` is a valid ZIP file based on its magic number , otherwise returns False .", "question_id": 12787, "for": 9466017, "retrieval_score": 13.5278845}
{"snippet": "msilib.FCICreate(cabname, files)", "intent": "Create a new CAB file named `cabname` . `files` must be a list of tuples , each containing the name of the file on disk , and the name of the file inside the CAB file .", "question_id": 6058, "for": 9466017, "retrieval_score": 11.3814335}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 9466017, "retrieval_score": 11.352001}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 9466017, "retrieval_score": 11.352001}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 8270092, "retrieval_score": 15.959268}
{"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515, "for": 8270092, "retrieval_score": 15.192253}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 8270092, "retrieval_score": 11.066555}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 8270092, "retrieval_score": 11.066555}
{"snippet": "bytes.isspace()", "intent": "Return true if all bytes in the sequence are ASCII whitespace and the sequence is not empty , false otherwise .", "question_id": 9391, "for": 8270092, "retrieval_score": 11.000276}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 8270092, "retrieval_score": 15.959268}
{"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515, "for": 8270092, "retrieval_score": 15.192253}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 8270092, "retrieval_score": 11.066555}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 8270092, "retrieval_score": 11.066555}
{"snippet": "bytes.isspace()", "intent": "Return true if all bytes in the sequence are ASCII whitespace and the sequence is not empty , false otherwise .", "question_id": 9391, "for": 8270092, "retrieval_score": 11.000276}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 8270092, "retrieval_score": 18.915232}
{"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931, "for": 8270092, "retrieval_score": 12.839689}
{"snippet": "re.MULTILINE", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7932, "for": 8270092, "retrieval_score": 12.839689}
{"snippet": "text_wrapper.drop_whitespace", "intent": "(default: True) If true, whitespace at the beginning and ending of every line (after wrapping but before indenting) is dropped.", "question_id": 10331, "for": 8270092, "retrieval_score": 12.107136}
{"snippet": "str.startswith(prefix, start, end)", "intent": "Return True if string starts with the `prefix` , otherwise return False . With optional `start` , test string beginning at that position . With optional `end` , stop comparing string at that position .", "question_id": 9247, "for": 8270092, "retrieval_score": 11.876016}
{"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300, "for": 8270092, "retrieval_score": 13.144431}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 8270092, "retrieval_score": 11.066555}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 8270092, "retrieval_score": 11.066555}
{"snippet": "email_message.clear_content()", "intent": "Remove the payload and all of the Content- headers , leaving all other headers intact and in their original order .", "question_id": 3307, "for": 8270092, "retrieval_score": 10.821336}
{"snippet": "email_message.clear()", "intent": "Remove the payload and all of the headers .", "question_id": 3306, "for": 8270092, "retrieval_score": 10.4899235}
{"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300, "for": 8270092, "retrieval_score": 13.144431}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 8270092, "retrieval_score": 11.066555}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 8270092, "retrieval_score": 11.066555}
{"snippet": "email_message.clear_content()", "intent": "Remove the payload and all of the Content- headers , leaving all other headers intact and in their original order .", "question_id": 3307, "for": 8270092, "retrieval_score": 10.821336}
{"snippet": "email_message.clear()", "intent": "Remove the payload and all of the headers .", "question_id": 3306, "for": 8270092, "retrieval_score": 10.4899235}
{"snippet": "time.perf_counter()", "intent": "Return the value ( in fractional seconds ) of a performance counter , i.e .", "question_id": 10448, "for": 32511444, "retrieval_score": 19.645832}
{"snippet": "semaphore.release()", "intent": "Release a semaphore , incrementing the internal counter by one .", "question_id": 587, "for": 32511444, "retrieval_score": 18.66601}
{"snippet": "semaphore.release()", "intent": "Release a semaphore , incrementing the internal counter by one .", "question_id": 10403, "for": 32511444, "retrieval_score": 18.66601}
{"snippet": "collections.Counter()", "intent": "A Counter is a dict subclass for counting hashable objects .", "question_id": 1341, "for": 32511444, "retrieval_score": 18.033352}
{"snippet": "counter.update()", "intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) .", "question_id": 1349, "for": 32511444, "retrieval_score": 17.200253}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 40319433, "retrieval_score": 14.660501}
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925, "for": 40319433, "retrieval_score": 14.660501}
{"snippet": "operator.lt(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6513, "for": 40319433, "retrieval_score": 13.047415}
{"snippet": "operator.le(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6514, "for": 40319433, "retrieval_score": 13.047415}
{"snippet": "operator.eq(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6515, "for": 40319433, "retrieval_score": 13.047415}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175, "for": 4411811, "retrieval_score": 14.518234}
{"snippet": "glob.glob(pathname)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification .", "question_id": 4264, "for": 4411811, "retrieval_score": 11.414856}
{"snippet": "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source)", "intent": "Create a zip package directory with a path of `zip_dir` and `zip_basename` containing an empty __init__ file and a file `script_basename` containing the `source` . With arguments `pkg_name`.", "question_id": 10314, "for": 4411811, "retrieval_score": 11.328922}
{"snippet": "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source, depth=1)", "intent": "Create a zip package directory with a path of `zip_dir` and `zip_basename` containing an empty __init__ file and a file `script_basename` containing the `source` . With arguments `pkg_name`, `depth`.", "question_id": 10315, "for": 4411811, "retrieval_score": 11.156845}
{"snippet": "test.support.create_empty_file(filename)", "intent": "Create an empty file with `filename` .", "question_id": 10153, "for": 4411811, "retrieval_score": 10.79245}
{"snippet": "NamedNodeMap.length", "intent": "The length of the attribute list.", "question_id": 12374, "for": 6133434, "retrieval_score": 13.7244625}
{"snippet": "Packer.pack_array(list, pack_item)", "intent": "Packs a variable length `list` of homogeneous items . With arguments `pack_item`.", "question_id": 12284, "for": 6133434, "retrieval_score": 12.413856}
{"snippet": "Unpacker.unpack_array(unpack_item)", "intent": "Unpacks and returns a variable length list of homogeneous items . With arguments `unpack_item`.", "question_id": 12299, "for": 6133434, "retrieval_score": 11.84157}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 6133434, "retrieval_score": 11.669664}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 6133434, "retrieval_score": 11.319543}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 5844672, "retrieval_score": 18.654753}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725, "for": 5844672, "retrieval_score": 15.256255}
{"snippet": "mailbox.__delitem__(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5726, "for": 5844672, "retrieval_score": 15.256255}
{"snippet": "mailbox.discard(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5727, "for": 5844672, "retrieval_score": 15.256255}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 5844672, "retrieval_score": 15.184458}
{"snippet": "xml.etree.ElementTree.XMLID(text)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data .", "question_id": 12471, "for": 5844672, "retrieval_score": 13.560586}
{"snippet": "tree_builder.start(tag, attrs)", "intent": "Opens a new element . `tag` is the element name . `attrs` is a dictionary containing element attributes .", "question_id": 12544, "for": 5844672, "retrieval_score": 13.157443}
{"snippet": "xml.etree.ElementTree.XMLID(text, parser=None)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12472, "for": 5844672, "retrieval_score": 13.13218}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478, "for": 5844672, "retrieval_score": 12.857845}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139, "for": 5844672, "retrieval_score": 11.5736885}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478, "for": 5844672, "retrieval_score": 12.857845}
{"snippet": "xml.etree.ElementTree.XMLID(text)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data .", "question_id": 12471, "for": 5844672, "retrieval_score": 12.598199}
{"snippet": "xml.etree.ElementTree.XMLID(text, parser=None)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12472, "for": 5844672, "retrieval_score": 12.221754}
{"snippet": "tree_builder.start(tag, attrs)", "intent": "Opens a new element . `tag` is the element name . `attrs` is a dictionary containing element attributes .", "question_id": 12544, "for": 5844672, "retrieval_score": 12.190511}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139, "for": 5844672, "retrieval_score": 11.5736885}
{"snippet": "mailbox.popitem()", "intent": "Return an arbitrary ( key , message ) pair , where key is a key and message is a message representation , and delete the corresponding message .", "question_id": 5748, "for": 5844672, "retrieval_score": 19.40697}
{"snippet": "mh.remove(key)", "intent": "These methods immediately delete the message . With arguments `key`.", "question_id": 5786, "for": 5844672, "retrieval_score": 18.829796}
{"snippet": "mh.__delitem__(key)", "intent": "These methods immediately delete the message . With arguments `key`.", "question_id": 5787, "for": 5844672, "retrieval_score": 18.829796}
{"snippet": "mh.discard(key)", "intent": "These methods immediately delete the message . With arguments `key`.", "question_id": 5788, "for": 5844672, "retrieval_score": 18.829796}
{"snippet": "os.unsetenv(key)", "intent": "Unset ( delete ) the environment variable named `key` .", "question_id": 6711, "for": 5844672, "retrieval_score": 18.306828}
{"snippet": "random.uniform(a, b)", "intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "question_id": 7907, "for": 41648246, "retrieval_score": 10.134628}
{"snippet": "operator.add(a, b)", "intent": "Return `a` + `b` , for a and b numbers .", "question_id": 6532, "for": 41648246, "retrieval_score": 9.986882}
{"snippet": "operator.__add__(a, b)", "intent": "Return `a` + `b` , for a and b numbers .", "question_id": 6533, "for": 41648246, "retrieval_score": 9.986882}
{"snippet": "operator.mul(a, b)", "intent": "Return `a` * `b` , for a and b numbers .", "question_id": 6548, "for": 41648246, "retrieval_score": 9.986882}
{"snippet": "operator.__mul__(a, b)", "intent": "Return `a` * `b` , for a and b numbers .", "question_id": 6549, "for": 41648246, "retrieval_score": 9.986882}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 38231591, "retrieval_score": 13.707682}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855, "for": 38231591, "retrieval_score": 12.324643}
{"snippet": "multiprocessing.Process(kwargs={})", "intent": "Process objects represent activity that is run in a separate process . `kwargs` is a dictionary of keyword arguments for the target invocation .", "question_id": 6170, "for": 38231591, "retrieval_score": 12.144463}
{"snippet": "widget.set(item)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` .", "question_id": 10658, "for": 38231591, "retrieval_score": 11.534909}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 38231591, "retrieval_score": 11.497176}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934, "for": 2990121, "retrieval_score": 14.180677}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935, "for": 2990121, "retrieval_score": 14.180677}
{"snippet": "Record.ClearData()", "intent": "Set all fields of the record to 0 , through MsiRecordClearData ( ) .", "question_id": 6087, "for": 2990121, "retrieval_score": 13.604289}
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904, "for": 2990121, "retrieval_score": 11.844487}
{"snippet": "range(start, stop, step)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` . If the `step` argument is omitted , it defaults to 1 .", "question_id": 9163, "for": 2990121, "retrieval_score": 11.4196}
{"snippet": "asyncio.Event(loop=None)", "intent": "An event object . With arguments `loop`.", "question_id": 564, "for": 2990121, "retrieval_score": 8.3316}
{"snippet": "asyncio.Condition(loop=None)", "intent": "A Condition object . With arguments `loop`.", "question_id": 571, "for": 2990121, "retrieval_score": 8.3316}
{"snippet": "asyncio.Semaphore(loop=None)", "intent": "A Semaphore object . With arguments `loop`.", "question_id": 583, "for": 2990121, "retrieval_score": 8.3316}
{"snippet": "mock.configure_mock(**kwargs)", "intent": "Set attributes on the mock through keyword arguments . With arguments `**kwargs`.", "question_id": 11585, "for": 2990121, "retrieval_score": 8.180477}
{"snippet": "random.randrange(stop)", "intent": "Return a randomly selected element from range ( start , `stop` , step ) .", "question_id": 7890, "for": 2990121, "retrieval_score": 8.150692}
{"snippet": "test_case.output", "intent": "A list of str objects with the formatted output of matching messages.", "question_id": 11416, "for": 42353686, "retrieval_score": 13.804458}
{"snippet": "test_case.records", "intent": "A list of logging.LogRecord objects of the matching log messages.", "question_id": 11415, "for": 42353686, "retrieval_score": 13.04541}
{"snippet": "mailbox.itervalues()", "intent": "Return an iterator over representations of all messages if called as itervalues ( ) or __iter__ ( ) or return a list of such representations if called as values ( ) .", "question_id": 5731, "for": 42353686, "retrieval_score": 12.816022}
{"snippet": "mailbox.__iter__()", "intent": "Return an iterator over representations of all messages if called as itervalues ( ) or __iter__ ( ) or return a list of such representations if called as values ( ) .", "question_id": 5732, "for": 42353686, "retrieval_score": 12.816022}
{"snippet": "mailbox.values()", "intent": "Return an iterator over representations of all messages if called as itervalues ( ) or __iter__ ( ) or return a list of such representations if called as values ( ) .", "question_id": 5733, "for": 42353686, "retrieval_score": 12.816022}
{"snippet": "urllib.parse.quote_plus(string, encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `encoding`.", "question_id": 11715, "for": 12309976, "retrieval_score": 15.871258}
{"snippet": "urllib.parse.quote_plus(string, errors=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `errors`.", "question_id": 11716, "for": 12309976, "retrieval_score": 15.871258}
{"snippet": "urllib.parse.quote_plus(string)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL .", "question_id": 11713, "for": 12309976, "retrieval_score": 15.691845}
{"snippet": "urllib.parse.quote_plus(string, encoding=None, errors=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `encoding`, `errors`.", "question_id": 11719, "for": 12309976, "retrieval_score": 15.616317}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 12309976, "retrieval_score": 14.694976}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 4695143, "retrieval_score": 25.034554}
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925, "for": 4695143, "retrieval_score": 25.034554}
{"snippet": "widget.index(item)", "intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "question_id": 10639, "for": 4695143, "retrieval_score": 21.935146}
{"snippet": "text_calendar.prmonth(theyear, themonth, w=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`.", "question_id": 933, "for": 4695143, "retrieval_score": 21.784752}
{"snippet": "calendar.prmonth(theyear, themonth, w=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`.", "question_id": 994, "for": 4695143, "retrieval_score": 21.784752}
{"snippet": "faulthandler.is_enabled()", "intent": "Check if the fault handler is enabled .", "question_id": 3721, "for": 17331290, "retrieval_score": 11.072291}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 17331290, "retrieval_score": 10.491693}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800, "for": 17331290, "retrieval_score": 10.249756}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, charset='utf-8'                     cte=None)", "intent": "Add `headers` and payload to `msg` : If `charset` is provided ( which is valid only for str ) , encode the string to bytes using the specified character set . With arguments `<'str'>`.", "question_id": 3041, "for": 17331290, "retrieval_score": 9.88057}
{"snippet": "lzma.is_check_supported(check)", "intent": "Returns true if the given integrity `check` is supported on this system .", "question_id": 5722, "for": 17331290, "retrieval_score": 9.7660885}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849, "for": 2911754, "retrieval_score": 9.600077}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747, "for": 2911754, "retrieval_score": 8.635679}
{"snippet": "InputSource.setByteStream(bytefile)", "intent": "Set the byte stream ( a binary file ) for this input source . With arguments `bytefile`.", "question_id": 12640, "for": 2911754, "retrieval_score": 8.269702}
{"snippet": "lzma.LZMAFile()", "intent": "Open an LZMA-compressed file in binary `mode` .", "question_id": 5666, "for": 2911754, "retrieval_score": 8.071916}
{"snippet": "lzma.LZMAFile(mode=\"r\")", "intent": "Open an LZMA-compressed file in binary `mode` .", "question_id": 5668, "for": 2911754, "retrieval_score": 8.071916}
{"snippet": "str.isdecimal()", "intent": "Return true if all characters in the string are decimal characters and there is at least one character , false otherwise .", "question_id": 9205, "for": 30945784, "retrieval_score": 14.978588}
{"snippet": "str.isnumeric()", "intent": "Return true if all characters in the string are numeric characters , and there is at least one character , false otherwise .", "question_id": 9209, "for": 30945784, "retrieval_score": 14.978588}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 30945784, "retrieval_score": 14.347498}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 30945784, "retrieval_score": 14.347498}
{"snippet": "str.isalnum()", "intent": "Return true if all characters in the string are alphanumeric and there is at least one character , false otherwise .", "question_id": 9202, "for": 30945784, "retrieval_score": 13.721549}
{"snippet": "locale.delocalize(string)", "intent": "Converts a `string` into a normalized number string , following the LC_NUMERIC settings .", "question_id": 5401, "for": 2953746, "retrieval_score": 12.224832}
{"snippet": "frame.lineno", "intent": "Line number (int).", "question_id": 10869, "for": 2953746, "retrieval_score": 12.140768}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363, "for": 2953746, "retrieval_score": 11.833863}
{"snippet": "cgi.parse_header(string)", "intent": "Parse a MIME header ( such as Content-Type ) into a main value and a dictionary of parameters . With arguments `string`.", "question_id": 1051, "for": 2953746, "retrieval_score": 11.624828}
{"snippet": "statistic.count", "intent": "Number of memory blocks (int).", "question_id": 10881, "for": 2953746, "retrieval_score": 11.454531}
{"snippet": "widget.index(tab_id)", "intent": "Returns the numeric index of the tab specified by `tab_id` , or the total number of tabs if tab_id is the string \u201c end \u201d .", "question_id": 10607, "for": 28773683, "retrieval_score": 9.956941}
{"snippet": "socket.if_nametoindex(if_name)", "intent": "Return a network interface index number corresponding to an interface name . With arguments `if_name`.", "question_id": 8671, "for": 28773683, "retrieval_score": 9.36992}
{"snippet": "socket.if_indextoname(if_index)", "intent": "Return a network interface name corresponding to an interface index number . With arguments `if_index`.", "question_id": 8672, "for": 28773683, "retrieval_score": 9.36992}
{"snippet": "urllib.parse.urlunsplit(parts)", "intent": "Combine the elements of a tuple as returned by urlsplit ( ) into a complete URL as a string . The `parts` argument can be any five-item iterable .", "question_id": 11694, "for": 28773683, "retrieval_score": 9.138841}
{"snippet": "contextlib.ExitStack", "intent": "A context manager that is designed to make it easy to programmatically combine other context managers and cleanup functions, especially those that are optional or otherwise driven by input data.", "question_id": 1626, "for": 28773683, "retrieval_score": 8.533454}
{"snippet": "context.same_quantum(x, y)", "intent": "Returns True if the two operands have the same exponent . With arguments `x`, `y`.", "question_id": 2568, "for": 28773683, "retrieval_score": 10.591909}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 28773683, "retrieval_score": 8.625825}
{"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648, "for": 28773683, "retrieval_score": 8.187782}
{"snippet": "audioop.getsample(fragment, width, index)", "intent": "Return the value of sample `index` from the `fragment` . With arguments `width`.", "question_id": 691, "for": 28773683, "retrieval_score": 8.091279}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 28773683, "retrieval_score": 7.9829416}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 2806611, "retrieval_score": 15.8318205}
{"snippet": "config_parser.get(section, option, raw=False, vars=None)", "intent": "Get an `option` value for the named `section` . All the ' % ' interpolations are expanded in the return values , unless the `raw` argument is true . If `vars` is provided , it must be a dictionary .", "question_id": 1527, "for": 2806611, "retrieval_score": 15.693029}
{"snippet": "shelve.Shelf(dict, writeback=False)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times .", "question_id": 8246, "for": 2806611, "retrieval_score": 15.361245}
{"snippet": "shelve.Shelf(dict, writeback=False, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8250, "for": 2806611, "retrieval_score": 15.281301}
{"snippet": "barrier.broken", "intent": "A boolean that is True if the barrier is in the broken state.", "question_id": 10427, "for": 2806611, "retrieval_score": 14.437818}
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244, "for": 40273313, "retrieval_score": 30.977205}
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311, "for": 40273313, "retrieval_score": 28.609724}
{"snippet": "date.month", "intent": "Between 1 and 12 inclusive.", "question_id": 2227, "for": 40273313, "retrieval_score": 21.301956}
{"snippet": "datetime.month", "intent": "Between 1 and 12 inclusive.", "question_id": 2273, "for": 40273313, "retrieval_score": 21.301956}
{"snippet": "date.max", "intent": "The latest representable date, date(MAXYEAR, 12, 31).", "question_id": 2224, "for": 40273313, "retrieval_score": 19.637024}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 3940128, "retrieval_score": 12.056128}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 3940128, "retrieval_score": 11.319396}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 3940128, "retrieval_score": 9.14398}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 3940128, "retrieval_score": 8.703225}
{"snippet": "audioop.reverse(fragment, width)", "intent": "Reverse the samples in a `fragment` and returns the modified fragment . With arguments `width`.", "question_id": 703, "for": 3940128, "retrieval_score": 8.482609}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 3940128, "retrieval_score": 15.6064625}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 3940128, "retrieval_score": 12.056128}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 3940128, "retrieval_score": 11.319396}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 3940128, "retrieval_score": 10.432623}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283, "for": 3940128, "retrieval_score": 9.148658}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 3940128, "retrieval_score": 12.056128}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 3940128, "retrieval_score": 11.319396}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 3940128, "retrieval_score": 9.14398}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 3940128, "retrieval_score": 8.703225}
{"snippet": "audioop.reverse(fragment, width)", "intent": "Reverse the samples in a `fragment` and returns the modified fragment . With arguments `width`.", "question_id": 703, "for": 3940128, "retrieval_score": 8.482609}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 3940128, "retrieval_score": 15.6064625}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 3940128, "retrieval_score": 12.056128}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 3940128, "retrieval_score": 11.319396}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 3940128, "retrieval_score": 10.432623}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283, "for": 3940128, "retrieval_score": 9.148658}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426, "for": 31302904, "retrieval_score": 16.249216}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 31302904, "retrieval_score": 15.466244}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 31302904, "retrieval_score": 14.132422}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 31302904, "retrieval_score": 14.120847}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 31302904, "retrieval_score": 13.854781}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF", "intent": "A character reference referred to a character which is illegal in XML (for example, character 0, or \u2018&#0;\u2019).", "question_id": 7790, "for": 10562778, "retrieval_score": 28.04214}
{"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934, "for": 10562778, "retrieval_score": 28.02749}
{"snippet": "curses.ascii.ctrl(c)", "intent": "Return the control character corresponding to the given character ( the character bit value is bitwise-anded with 0x1f ) . With arguments `c`.", "question_id": 1915, "for": 10562778, "retrieval_score": 27.774319}
{"snippet": "curses.ascii.alt(c)", "intent": "Return the 8-bit character corresponding to the given ASCII character ( the character bit value is bitwise-ored with 0x80 ) . With arguments `c`.", "question_id": 1916, "for": 10562778, "retrieval_score": 27.200918}
{"snippet": "html.entities.html5", "intent": "A dictionary that maps HTML5 named character references 1 to the equivalent Unicode character(s), e.g.", "question_id": 4342, "for": 10562778, "retrieval_score": 27.163698}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735, "for": 5022066, "retrieval_score": 12.157836}
{"snippet": "json.dump(obj, fp, **kw, indent=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level . With arguments `**kw`.", "question_id": 5276, "for": 5022066, "retrieval_score": 10.804336}
{"snippet": "json.dump(obj, fp, **kw)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . With arguments `**kw`.", "question_id": 5270, "for": 5022066, "retrieval_score": 10.726628}
{"snippet": "json.JSONDecoder(object_pairs_hook=None)", "intent": "Simple JSON decoder . `object_pairs_hook` , if specified will be called with the result of every JSON object decoded with an ordered list of pairs .", "question_id": 5316, "for": 5022066, "retrieval_score": 10.712674}
{"snippet": "csvreader.__next__()", "intent": "Return the next row of the reader \u2019 s iterable object as a list ( if the object was returned from reader ( ) ) or a dict ( if it is a DictReader instance ) , parsed according to the current dialect .", "question_id": 1731, "for": 5022066, "retrieval_score": 10.669267}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343, "for": 3227624, "retrieval_score": 8.582225}
{"snippet": "os.fstat(fd)", "intent": "Get the status of the file descriptor `fd` .", "question_id": 6723, "for": 3227624, "retrieval_score": 8.358633}
{"snippet": "os.get_inheritable(fd)", "intent": "Get the \u201c inheritable \u201d flag of the specified file descriptor ( a boolean ) . With arguments `fd`.", "question_id": 6816, "for": 3227624, "retrieval_score": 7.228668}
{"snippet": "os.stat(path)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` .", "question_id": 6917, "for": 3227624, "retrieval_score": 6.9196987}
{"snippet": "os.path.normpath(path)", "intent": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a `path` that contains symbolic links .", "question_id": 7162, "for": 3227624, "retrieval_score": 6.6217074}
{"snippet": "urllib.parse.urljoin(base, url, allow_fragments=True)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) . The `allow_fragments` argument has the same meaning and default as for urlparse ( ) .", "question_id": 11696, "for": 14734750, "retrieval_score": 11.831988}
{"snippet": "locale.CODESET", "intent": "Get a string with the name of the character encoding used in the selected locale.", "question_id": 5354, "for": 14734750, "retrieval_score": 11.307442}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632, "for": 14734750, "retrieval_score": 11.157427}
{"snippet": "patch.multiple(target, **kwargs, spec=None)", "intent": "Perform multiple patches in a single call . The arguments `spec` , `spec_set` , create , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `target`, `**kwargs`.", "question_id": 11633, "for": 14734750, "retrieval_score": 11.115573}
{"snippet": "patch.multiple(target, **kwargs, spec_set=None)", "intent": "Perform multiple patches in a single call . The arguments `spec` , `spec_set` , create , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `target`, `**kwargs`.", "question_id": 11635, "for": 14734750, "retrieval_score": 11.115573}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 18432823, "retrieval_score": 14.358959}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 18432823, "retrieval_score": 12.156142}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 18432823, "retrieval_score": 11.572665}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 18432823, "retrieval_score": 11.286097}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 18432823, "retrieval_score": 11.28301}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 3090175, "retrieval_score": 15.866804}
{"snippet": "aifc.getnchannels()", "intent": "Return the number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 11, "for": 3090175, "retrieval_score": 14.575555}
{"snippet": "AU_read.getnchannels()", "intent": "Returns number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 9708, "for": 3090175, "retrieval_score": 14.543999}
{"snippet": "Wave_read.getnchannels()", "intent": "Returns number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 12051, "for": 3090175, "retrieval_score": 14.543999}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 3090175, "retrieval_score": 13.440406}
{"snippet": "HTTPConnection.getresponse()", "intent": "Should be called after a request is sent to get the response from the server .", "question_id": 4435, "for": 1391026, "retrieval_score": 12.8517685}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655, "for": 1391026, "retrieval_score": 12.089667}
{"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654, "for": 1391026, "retrieval_score": 11.57707}
{"snippet": "winsound.SND_ALIAS", "intent": "The sound parameter is a sound association name from the registry.", "question_id": 12197, "for": 1391026, "retrieval_score": 10.986595}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653, "for": 1391026, "retrieval_score": 10.670478}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 21188504, "retrieval_score": 13.854781}
{"snippet": "memoryview.itemsize", "intent": "The size in bytes of each element of the memoryview:", "question_id": 9423, "for": 21188504, "retrieval_score": 13.823398}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426, "for": 21188504, "retrieval_score": 13.822299}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462, "for": 21188504, "retrieval_score": 13.35743}
{"snippet": "deque.append(x)", "intent": "Add `x` to the right side of the deque .", "question_id": 1353, "for": 21188504, "retrieval_score": 12.738281}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779, "for": 40079728, "retrieval_score": 25.924015}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758, "for": 40079728, "retrieval_score": 21.814219}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_PLUS", "intent": "The model must occur one or more times (like A+).", "question_id": 7785, "for": 40079728, "retrieval_score": 18.664497}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_EMPTY", "intent": "Elements which are declared to be EMPTY have this model type.", "question_id": 7781, "for": 40079728, "retrieval_score": 18.213484}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_REP", "intent": "The model must occur zero or more times, as for A*.", "question_id": 7786, "for": 40079728, "retrieval_score": 18.213484}
{"snippet": "asyncio.sleep(delay)", "intent": "Block for `delay` seconds .", "question_id": 595, "for": 510348, "retrieval_score": 17.844282}
{"snippet": "asyncio.sleep(delay, loop=None)", "intent": "Block for `delay` seconds . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 597, "for": 510348, "retrieval_score": 13.791528}
{"snippet": "asyncio.sleep(delay, result=None)", "intent": "Block for `delay` seconds . If `result` is provided , it is returned to the caller when the coroutine completes .", "question_id": 596, "for": 510348, "retrieval_score": 12.680952}
{"snippet": "asyncio.sleep(delay, result=None, loop=None)", "intent": "Block for `delay` seconds . If `result` is provided , it is returned to the caller when the coroutine completes . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 598, "for": 510348, "retrieval_score": 10.740989}
{"snippet": "loop.call_later(delay, callback, *args)", "intent": "Schedule `callback` to be called after the given `delay` number of seconds ( can be either an int or a float ) . With arguments `*args`.", "question_id": 193, "for": 510348, "retrieval_score": 10.008305}
{"snippet": "datetime.time", "intent": "An idealized time, independent of any particular day, assuming that every day has exactly 24*60*60 seconds (there is no notion of \u201cleap seconds\u201d here).", "question_id": 2199, "for": 510348, "retrieval_score": 19.464045}
{"snippet": "asyncio.sleep(delay)", "intent": "Block for `delay` seconds .", "question_id": 595, "for": 510348, "retrieval_score": 15.538802}
{"snippet": "timer_handle.when()", "intent": "Return a scheduled callback time as float seconds .", "question_id": 333, "for": 510348, "retrieval_score": 12.289154}
{"snippet": "scheduler.enter(delay, priority, action)", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`.", "question_id": 8122, "for": 510348, "retrieval_score": 12.112563}
{"snippet": "time.ctime()", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time .", "question_id": 10439, "for": 510348, "retrieval_score": 12.102605}
{"snippet": "asyncio.sleep(delay)", "intent": "Block for `delay` seconds .", "question_id": 595, "for": 510348, "retrieval_score": 15.538802}
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324, "for": 510348, "retrieval_score": 14.612074}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 510348, "retrieval_score": 13.63712}
{"snippet": "datetime.fold", "intent": "In [0, 1].", "question_id": 2280, "for": 510348, "retrieval_score": 13.048143}
{"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332, "for": 510348, "retrieval_score": 13.048143}
{"snippet": "datetime.time", "intent": "An idealized time, independent of any particular day, assuming that every day has exactly 24*60*60 seconds (there is no notion of \u201cleap seconds\u201d here).", "question_id": 2199, "for": 510348, "retrieval_score": 19.464045}
{"snippet": "asyncio.sleep(delay)", "intent": "Block for `delay` seconds .", "question_id": 595, "for": 510348, "retrieval_score": 15.538802}
{"snippet": "timer_handle.when()", "intent": "Return a scheduled callback time as float seconds .", "question_id": 333, "for": 510348, "retrieval_score": 12.289154}
{"snippet": "scheduler.enter(delay, priority, action)", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`.", "question_id": 8122, "for": 510348, "retrieval_score": 12.112563}
{"snippet": "time.ctime()", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time .", "question_id": 10439, "for": 510348, "retrieval_score": 12.102605}
{"snippet": "asyncio.sleep(delay)", "intent": "Block for `delay` seconds .", "question_id": 595, "for": 510348, "retrieval_score": 15.538802}
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324, "for": 510348, "retrieval_score": 14.612074}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 510348, "retrieval_score": 13.63712}
{"snippet": "datetime.fold", "intent": "In [0, 1].", "question_id": 2280, "for": 510348, "retrieval_score": 13.048143}
{"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332, "for": 510348, "retrieval_score": 13.048143}
{"snippet": "mh_message.remove_sequence(sequence)", "intent": "Remove `sequence` from the list of sequences that include this message .", "question_id": 5837, "for": 16084642, "retrieval_score": 20.652845}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 16084642, "retrieval_score": 19.430037}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 16084642, "retrieval_score": 19.430037}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843, "for": 16084642, "retrieval_score": 18.778584}
{"snippet": "shutil.unregister_archive_format(name)", "intent": "Remove the archive format `name` from the list of supported formats .", "question_id": 8362, "for": 16084642, "retrieval_score": 18.329159}
{"snippet": "statistics.median(data)", "intent": "Return the median ( middle value ) of numeric `data` , using the common \u201c mean of middle two \u201d method .", "question_id": 9127, "for": 20970279, "retrieval_score": 20.066458}
{"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037, "for": 20970279, "retrieval_score": 15.798572}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036, "for": 20970279, "retrieval_score": 14.624931}
{"snippet": "winreg.REG_MULTI_SZ", "intent": "A sequence of null-terminated strings, terminated by two null characters.", "question_id": 12180, "for": 20970279, "retrieval_score": 13.34137}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513, "for": 20970279, "retrieval_score": 12.190136}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 8209568, "retrieval_score": 11.1367}
{"snippet": "window.border()", "intent": "Draw a border around the edges of the window .", "question_id": 2027, "for": 8209568, "retrieval_score": 10.680539}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923, "for": 8209568, "retrieval_score": 10.264609}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 8209568, "retrieval_score": 10.203199}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026, "for": 8209568, "retrieval_score": 9.924546}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 42394627, "retrieval_score": 15.677011}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 42394627, "retrieval_score": 14.87615}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 42394627, "retrieval_score": 14.87615}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489, "for": 42394627, "retrieval_score": 14.491933}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 42394627, "retrieval_score": 14.470769}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426, "for": 6018916, "retrieval_score": 18.538988}
{"snippet": "array.itemsize", "intent": "The length in bytes of one array item in the internal representation.", "question_id": 119, "for": 6018916, "retrieval_score": 17.445608}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 6018916, "retrieval_score": 17.081045}
{"snippet": "os.sched_get_priority_max(policy)", "intent": "Get the maximum priority value for `policy` .", "question_id": 7106, "for": 6018916, "retrieval_score": 16.880592}
{"snippet": "tracemalloc.get_traceback_limit()", "intent": "Get the maximum number of frames stored in the traceback of a trace .", "question_id": 10843, "for": 6018916, "retrieval_score": 15.190055}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 39607540, "retrieval_score": 21.742813}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 39607540, "retrieval_score": 21.742813}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 39607540, "retrieval_score": 21.742813}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 39607540, "retrieval_score": 19.543112}
{"snippet": "widget.set(item)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` .", "question_id": 10658, "for": 39607540, "retrieval_score": 19.234476}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921, "for": 13114512, "retrieval_score": 20.894192}
{"snippet": "csv.DictReader(f, *args, **kwds, restkey=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`.", "question_id": 1694, "for": 13114512, "retrieval_score": 18.446966}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None, restkey=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`.", "question_id": 1697, "for": 13114512, "retrieval_score": 18.446966}
{"snippet": "csv.DictReader(f, *args, **kwds, restkey=None, restval=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`, `restval`.", "question_id": 1700, "for": 13114512, "retrieval_score": 17.94687}
{"snippet": "csv.DictReader(f, *args, **kwds, restkey=None, dialect='excel')", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`, `dialect`.", "question_id": 1701, "for": 13114512, "retrieval_score": 17.94687}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 3392354, "retrieval_score": 12.431047}
{"snippet": "audioop.lin2adpcm(fragment, width, state)", "intent": "Convert samples to 4 bit Intel/DVI ADPCM encoding . adpcmfrag is the ADPCM coded `fragment` packed 2 4-bit values per byte . `state` is a tuple containing the state of the coder . With arguments `width`.", "question_id": 692, "for": 3392354, "retrieval_score": 11.149053}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126, "for": 3392354, "retrieval_score": 10.543493}
{"snippet": "readline.append_history_file(nelements)", "intent": "Append the last `nelements` items of history to a file .", "question_id": 8026, "for": 3392354, "retrieval_score": 10.456686}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 3392354, "retrieval_score": 10.289626}
{"snippet": "set.issubset(other)", "intent": "Test whether every element in the set is in `other` .", "question_id": 9439, "for": 7154739, "retrieval_score": 23.095749}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 7154739, "retrieval_score": 23.095749}
{"snippet": "set.issuperset(other)", "intent": "Test whether every element in `other` is in the set .", "question_id": 9442, "for": 7154739, "retrieval_score": 23.095749}
{"snippet": "set >= other", "intent": "Test whether every element in other is in the set.", "question_id": 9443, "for": 7154739, "retrieval_score": 23.095749}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 7154739, "retrieval_score": 19.818556}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 26720916, "retrieval_score": 27.053839}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 26720916, "retrieval_score": 27.053839}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 26720916, "retrieval_score": 27.053839}
{"snippet": "widget.set(item)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` .", "question_id": 10658, "for": 26720916, "retrieval_score": 24.002575}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207, "for": 26720916, "retrieval_score": 21.489136}
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244, "for": 8153631, "retrieval_score": 35.594017}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196, "for": 8153631, "retrieval_score": 15.556657}
{"snippet": "datetime.MAXYEAR", "intent": "The largest year number allowed in a date or datetime object.", "question_id": 2197, "for": 8153631, "retrieval_score": 15.556657}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 8153631, "retrieval_score": 15.188851}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201, "for": 8153631, "retrieval_score": 13.1651125}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 33769531, "retrieval_score": 14.745058}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 33769531, "retrieval_score": 14.478569}
{"snippet": "binascii.b2a_uu(data)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char .", "question_id": 821, "for": 33769531, "retrieval_score": 13.212324}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826, "for": 33769531, "retrieval_score": 12.788081}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849, "for": 33769531, "retrieval_score": 12.468535}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 8243188, "retrieval_score": 17.651363}
{"snippet": "readline.read_history_file()", "intent": "Load a readline history file , and append it to the history list .", "question_id": 8022, "for": 8243188, "retrieval_score": 15.915588}
{"snippet": "readline.read_history_file(filename)", "intent": "Load a readline history file , and append it to the history list . The default `filename` is ~/.history .", "question_id": 8021, "for": 8243188, "retrieval_score": 14.236143}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036, "for": 8243188, "retrieval_score": 13.761983}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039, "for": 8243188, "retrieval_score": 13.465283}
{"snippet": "readline.insert_text(string)", "intent": "Insert text into the line buffer at the cursor position . With arguments `string`.", "question_id": 8019, "for": 8243188, "retrieval_score": 18.008781}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 8243188, "retrieval_score": 17.373184}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023, "for": 8243188, "retrieval_score": 15.032225}
{"snippet": "str.splitlines()", "intent": "Return a list of the lines in the string , breaking at line boundaries .", "question_id": 9246, "for": 8243188, "retrieval_score": 14.792382}
{"snippet": "warnings.filterwarnings(action, category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`, `category`.", "question_id": 12025, "for": 8243188, "retrieval_score": 14.693537}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266, "for": 3296499, "retrieval_score": 14.8487835}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927, "for": 3296499, "retrieval_score": 14.1642475}
{"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928, "for": 3296499, "retrieval_score": 14.1642475}
{"snippet": "re.L", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7929, "for": 3296499, "retrieval_score": 13.845115}
{"snippet": "re.LOCALE", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7930, "for": 3296499, "retrieval_score": 13.845115}
{"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080, "for": 4008546, "retrieval_score": 12.722629}
{"snippet": "window.insnstr(y, x, str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`, `attr`.", "question_id": 2079, "for": 4008546, "retrieval_score": 12.561753}
{"snippet": "window.hline(ch, n)", "intent": "Display a horizontal line starting at ( y , x ) with length `n` consisting of the character `ch` .", "question_id": 2064, "for": 4008546, "retrieval_score": 11.8101845}
{"snippet": "window.hline(y, x, ch, n)", "intent": "Display a horizontal line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "question_id": 2065, "for": 4008546, "retrieval_score": 11.8101845}
{"snippet": "window.vline(ch, n)", "intent": "Display a vertical line starting at ( y , x ) with length `n` consisting of the character `ch` .", "question_id": 2129, "for": 4008546, "retrieval_score": 11.8101845}
{"snippet": "Packer.pack_string(s)", "intent": "Packs a variable length string , s. The length of the string is first packed as an unsigned integer , then the string data is packed with pack_fstring ( ) . With arguments `s`.", "question_id": 12279, "for": 4843173, "retrieval_score": 13.961739}
{"snippet": "typing.TypeVar", "intent": "Type variable.", "question_id": 11229, "for": 4843173, "retrieval_score": 12.882931}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800, "for": 4843173, "retrieval_score": 12.253024}
{"snippet": "message.get_param(param, failobj=None)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . If the message has no Content-Type header or if there is no such parameter , then `failobj` is returned ( defaults to None ) .", "question_id": 2992, "for": 4843173, "retrieval_score": 12.074749}
{"snippet": "message.get_param(param, failobj=None, header='content-type')", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . If the message has no Content-Type header or if there is no such parameter , then `failobj` is returned ( defaults to None ) .", "question_id": 2995, "for": 4843173, "retrieval_score": 12.074749}
{"snippet": "Packer.pack_string(s)", "intent": "Packs a variable length string , s. The length of the string is first packed as an unsigned integer , then the string data is packed with pack_fstring ( ) . With arguments `s`.", "question_id": 12279, "for": 4843173, "retrieval_score": 13.961739}
{"snippet": "typing.TypeVar", "intent": "Type variable.", "question_id": 11229, "for": 4843173, "retrieval_score": 12.882931}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800, "for": 4843173, "retrieval_score": 12.253024}
{"snippet": "message.get_param(param, failobj=None)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . If the message has no Content-Type header or if there is no such parameter , then `failobj` is returned ( defaults to None ) .", "question_id": 2992, "for": 4843173, "retrieval_score": 12.074749}
{"snippet": "message.get_param(param, failobj=None, header='content-type')", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . If the message has no Content-Type header or if there is no such parameter , then `failobj` is returned ( defaults to None ) .", "question_id": 2995, "for": 4843173, "retrieval_score": 12.074749}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175, "for": 3494906, "retrieval_score": 12.259782}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 3494906, "retrieval_score": 12.111256}
{"snippet": "mime_types.types_map_inv", "intent": "Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types.", "question_id": 5963, "for": 3494906, "retrieval_score": 12.102494}
{"snippet": "xmlrpc.client.dumps(params, methodresponse=None)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true .", "question_id": 12700, "for": 3494906, "retrieval_score": 10.971733}
{"snippet": "simple_http_request_handler.extensions_map", "intent": "A dictionary mapping suffixes into MIME types.", "question_id": 4662, "for": 3494906, "retrieval_score": 10.9406}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175, "for": 3494906, "retrieval_score": 16.62152}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319, "for": 3494906, "retrieval_score": 16.026512}
{"snippet": "SSLContext.get_ca_certs(binary_form=False)", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "question_id": 9012, "for": 3494906, "retrieval_score": 15.634061}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321, "for": 3494906, "retrieval_score": 15.10183}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 3494906, "retrieval_score": 14.7346115}
{"snippet": "audioop.maxpp(fragment, width)", "intent": "Return the maximum peak-peak value in the sound `fragment` . With arguments `width`.", "question_id": 697, "for": 13636592, "retrieval_score": 16.248247}
{"snippet": "calendar.monthdatescalendar(year, month)", "intent": "Return a list of the weeks in the `month` month of the `year` as full weeks .", "question_id": 917, "for": 13636592, "retrieval_score": 15.828225}
{"snippet": "calendar.monthdays2calendar(year, month)", "intent": "Return a list of the weeks in the `month` month of the `year` as full weeks .", "question_id": 918, "for": 13636592, "retrieval_score": 15.828225}
{"snippet": "calendar.monthdayscalendar(year, month)", "intent": "Return a list of the weeks in the `month` month of the `year` as full weeks .", "question_id": 919, "for": 13636592, "retrieval_score": 15.828225}
{"snippet": "audioop.avgpp(fragment, width)", "intent": "Return the average peak-peak value over all samples in the `fragment` . With arguments `width`.", "question_id": 684, "for": 13636592, "retrieval_score": 15.721823}
{"snippet": "audioop.maxpp(fragment, width)", "intent": "Return the maximum peak-peak value in the sound `fragment` . With arguments `width`.", "question_id": 697, "for": 13636592, "retrieval_score": 16.248247}
{"snippet": "calendar.monthdatescalendar(year, month)", "intent": "Return a list of the weeks in the `month` month of the `year` as full weeks .", "question_id": 917, "for": 13636592, "retrieval_score": 15.828225}
{"snippet": "calendar.monthdays2calendar(year, month)", "intent": "Return a list of the weeks in the `month` month of the `year` as full weeks .", "question_id": 918, "for": 13636592, "retrieval_score": 15.828225}
{"snippet": "calendar.monthdayscalendar(year, month)", "intent": "Return a list of the weeks in the `month` month of the `year` as full weeks .", "question_id": 919, "for": 13636592, "retrieval_score": 15.828225}
{"snippet": "audioop.avgpp(fragment, width)", "intent": "Return the average peak-peak value over all samples in the `fragment` . With arguments `width`.", "question_id": 684, "for": 13636592, "retrieval_score": 15.721823}
{"snippet": "test.support.run_in_subinterp(code)", "intent": "Run `code` in subinterpreter .", "question_id": 10270, "for": 1015142, "retrieval_score": 13.747878}
{"snippet": "dis.show_code(x)", "intent": "Print detailed code object information for the supplied function , method , source code string or code object to `file` ( or sys.stdout if file is not specified ) . This is a convenient shorthand for print ( code_info ( `x` ) , file=file ) , intended for interactive exploration at the interpreter prompt .", "question_id": 2705, "for": 1015142, "retrieval_score": 11.253608}
{"snippet": "dis.show_code(x, file=None)", "intent": "Print detailed code object information for the supplied function , method , source code string or code object to `file` ( or sys.stdout if file is not specified ) . This is a convenient shorthand for print ( code_info ( `x` ) , file=file ) , intended for interactive exploration at the interpreter prompt .", "question_id": 2706, "for": 1015142, "retrieval_score": 11.253608}
{"snippet": "code.interact()", "intent": "Convenience function to run a read-eval-print loop .", "question_id": 1161, "for": 1015142, "retrieval_score": 11.18454}
{"snippet": "timer.print_exc()", "intent": "Helper to print a traceback from the timed code .", "question_id": 10515, "for": 1015142, "retrieval_score": 11.057468}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 35883459, "retrieval_score": 39.052204}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 35883459, "retrieval_score": 31.289738}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 35883459, "retrieval_score": 30.276272}
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925, "for": 35883459, "retrieval_score": 30.276272}
{"snippet": "random.randint(a, b)", "intent": "Return `a` random integer N such that a < = N < = b. Alias for randrange ( a , b+1 ) . With arguments `b`.", "question_id": 7893, "for": 35883459, "retrieval_score": 29.534168}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175, "for": 35883459, "retrieval_score": 12.259782}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782, "for": 35883459, "retrieval_score": 12.166}
{"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012, "for": 35883459, "retrieval_score": 10.608354}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013, "for": 35883459, "retrieval_score": 10.608354}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014, "for": 35883459, "retrieval_score": 10.608354}
{"snippet": "locale.LC_ALL", "intent": "Combination of all locale settings.", "question_id": 5410, "for": 8249836, "retrieval_score": 15.570724}
{"snippet": "widget.detach(*items)", "intent": "Unlinks all of the specified items from the tree . With arguments `*items`.", "question_id": 10628, "for": 8249836, "retrieval_score": 15.2485485}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 8249836, "retrieval_score": 15.105549}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 8249836, "retrieval_score": 14.438218}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 8249836, "retrieval_score": 14.144896}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997, "for": 32751229, "retrieval_score": 19.04443}
{"snippet": "os.terminal_size", "intent": "A subclass of tuple, holding (columns, lines) of the terminal window size.", "question_id": 6813, "for": 32751229, "retrieval_score": 18.401852}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 32751229, "retrieval_score": 18.071722}
{"snippet": "os.get_terminal_size()", "intent": "Return the size of the terminal window as ( columns , lines ) , tuple of type terminal_size .", "question_id": 6811, "for": 32751229, "retrieval_score": 17.617237}
{"snippet": "formatter.DumbWriter(maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3857, "for": 32751229, "retrieval_score": 17.179363}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 9962293, "retrieval_score": 25.029097}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 9962293, "retrieval_score": 20.670187}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 9962293, "retrieval_score": 19.925491}
{"snippet": "msilib.FCICreate(cabname, files)", "intent": "Create a new CAB file named `cabname` . `files` must be a list of tuples , each containing the name of the file on disk , and the name of the file inside the CAB file .", "question_id": 6058, "for": 9962293, "retrieval_score": 19.8778}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508, "for": 9962293, "retrieval_score": 19.508192}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 11620914, "retrieval_score": 21.001022}
{"snippet": "context.is_qnan(x)", "intent": "Returns True if `x` is a quiet NaN ; otherwise returns False .", "question_id": 2537, "for": 11620914, "retrieval_score": 12.286982}
{"snippet": "context.is_snan(x)", "intent": "Returns True if `x` is a signaling NaN ; otherwise returns False .", "question_id": 2539, "for": 11620914, "retrieval_score": 12.286982}
{"snippet": "math.isnan(x)", "intent": "Return True if `x` is a NaN ( not a number ) , and False otherwise .", "question_id": 5900, "for": 11620914, "retrieval_score": 11.720545}
{"snippet": "math.isfinite(x)", "intent": "Return True if `x` is neither an infinity nor a NaN , and False otherwise .", "question_id": 5898, "for": 11620914, "retrieval_score": 11.456472}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 26724275, "retrieval_score": 19.196877}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 26724275, "retrieval_score": 17.49881}
{"snippet": "os.rmdir(path)", "intent": "Remove ( delete ) the directory `path` .", "question_id": 6901, "for": 26724275, "retrieval_score": 17.098291}
{"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375, "for": 26724275, "retrieval_score": 16.288778}
{"snippet": "test_case.assertNotEqual(first, second)", "intent": "Test that `first` and `second` are not equal .", "question_id": 11377, "for": 26724275, "retrieval_score": 15.8644085}
{"snippet": "readline.replace_history_item(pos, line)", "intent": "Replace history item specified by its position with `line` . With arguments `pos`.", "question_id": 8033, "for": 12723751, "retrieval_score": 12.42652}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 12723751, "retrieval_score": 11.847731}
{"snippet": "text_calendar.formatmonth(theyear, themonth)", "intent": "Return a month \u2019 s calendar in a multi-line string . With arguments `theyear`, `themonth`.", "question_id": 928, "for": 12723751, "retrieval_score": 10.642641}
{"snippet": "message.replace_header(_name, _value)", "intent": "Replace a header . Replace the first header found in the message that matches `_name` , retaining header order and field name case . With arguments `_value`.", "question_id": 2977, "for": 12723751, "retrieval_score": 10.159208}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723, "for": 12723751, "retrieval_score": 9.737551}
{"snippet": "os.popen(cmd)", "intent": "Open a pipe to or from command `cmd` .", "question_id": 7041, "for": 7323859, "retrieval_score": 12.752386}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716, "for": 7323859, "retrieval_score": 11.301575}
{"snippet": "tarfile.GNU_FORMAT", "intent": "GNU tar format.", "question_id": 9910, "for": 7323859, "retrieval_score": 10.5765295}
{"snippet": "os.popen(cmd, mode='r')", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' .", "question_id": 7042, "for": 7323859, "retrieval_score": 9.574137}
{"snippet": "tarfile.TarFile", "intent": "Class for reading and writing tar archives.", "question_id": 9900, "for": 7323859, "retrieval_score": 9.444851}
{"snippet": "binascii.b2a_uu(data)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char .", "question_id": 821, "for": 10618586, "retrieval_score": 13.470487}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302, "for": 10618586, "retrieval_score": 13.09938}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207, "for": 10618586, "retrieval_score": 12.851235}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 10618586, "retrieval_score": 12.518587}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 10618586, "retrieval_score": 12.518587}
{"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157, "for": 8586738, "retrieval_score": 19.015503}
{"snippet": "test_result.unexpectedSuccesses", "intent": "A list containing TestCase instances that were marked as expected failures, but succeeded.", "question_id": 11512, "for": 8586738, "retrieval_score": 16.221354}
{"snippet": "babyl.get_labels()", "intent": "Return a list of the names of all user-defined labels used in the mailbox .", "question_id": 5798, "for": 8586738, "retrieval_score": 15.561231}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 8586738, "retrieval_score": 14.144896}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604, "for": 8586738, "retrieval_score": 13.968734}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 19973489, "retrieval_score": 13.474621}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 19973489, "retrieval_score": 13.474621}
{"snippet": "deque.clear()", "intent": "Remove all elements from the deque leaving it with length 0 .", "question_id": 1355, "for": 19973489, "retrieval_score": 11.357668}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 19973489, "retrieval_score": 10.917729}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 19973489, "retrieval_score": 10.917729}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670, "for": 19555472, "retrieval_score": 16.298517}
{"snippet": "text_wrapper.fix_sentence_endings", "intent": "(default: False) If true, TextWrapper attempts to detect sentence endings and ensure that sentences are always separated by exactly two spaces.", "question_id": 10334, "for": 19555472, "retrieval_score": 14.785963}
{"snippet": "os.fchmod(fd, mode)", "intent": "Change the `mode` of the file given by `fd` to the numeric mode .", "question_id": 6719, "for": 19555472, "retrieval_score": 12.086033}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 19555472, "retrieval_score": 11.962884}
{"snippet": "socket.ntohl(x)", "intent": "Convert 32-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8657, "for": 19555472, "retrieval_score": 11.923991}
{"snippet": "socket.ntohl(x)", "intent": "Convert 32-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8657, "for": 19555472, "retrieval_score": 23.787157}
{"snippet": "socket.ntohs(x)", "intent": "Convert 16-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8658, "for": 19555472, "retrieval_score": 23.787157}
{"snippet": "socket.htonl(x)", "intent": "Convert 32-bit positive integers from host to network byte order . With arguments `x`.", "question_id": 8659, "for": 19555472, "retrieval_score": 23.787157}
{"snippet": "socket.htons(x)", "intent": "Convert 16-bit positive integers from host to network byte order . With arguments `x`.", "question_id": 8660, "for": 19555472, "retrieval_score": 23.787157}
{"snippet": "sqlite3.version_info", "intent": "The version number of this module, as a tuple of integers.", "question_id": 8792, "for": 19555472, "retrieval_score": 18.817123}
{"snippet": "html_calendar.cssclass_month_head", "intent": "The month\u2019s head CSS class (used by formatmonthname()).", "question_id": 973, "for": 21691126, "retrieval_score": 12.167616}
{"snippet": "html_calendar.cssclass_month", "intent": "The CSS class for the whole month\u2019s table (used by formatmonth()).", "question_id": 974, "for": 21691126, "retrieval_score": 11.285553}
{"snippet": "html_calendar.cssclass_year", "intent": "The CSS class for the whole year\u2019s table of tables (used by formatyear()).", "question_id": 975, "for": 21691126, "retrieval_score": 10.765284}
{"snippet": "html_calendar.cssclass_year_head", "intent": "The CSS class for the table head for the whole year (used by formatyear()).", "question_id": 976, "for": 21691126, "retrieval_score": 10.522733}
{"snippet": "base_selector.close()", "intent": "Close the selector .", "question_id": 8222, "for": 21691126, "retrieval_score": 10.091232}
{"snippet": "stat.S_ISCHR(mode)", "intent": "Return non-zero if the `mode` is from a character special device file .", "question_id": 9062, "for": 25991612, "retrieval_score": 13.658488}
{"snippet": "Dialect.quotechar", "intent": "A one-character string used to quote fields containing special characters, such as the delimiter or quotechar, or which contain new-line characters.", "question_id": 1727, "for": 25991612, "retrieval_score": 11.007542}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 25991612, "retrieval_score": 10.205771}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 25991612, "retrieval_score": 10.205771}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126, "for": 25991612, "retrieval_score": 10.205771}
{"snippet": "writer.send_literal_data(data)", "intent": "Output character `data` which has already been formatted for display .", "question_id": 3851, "for": 21684346, "retrieval_score": 17.225113}
{"snippet": "curses.isendwin()", "intent": "Return True if endwin ( ) has been called ( that is , the curses library has been deinitialized ) .", "question_id": 1949, "for": 21684346, "retrieval_score": 14.754642}
{"snippet": "zipfile.LargeZipFile", "intent": "The error raised when a ZIP file would require ZIP64 functionality but that has not been enabled.", "question_id": 12780, "for": 21684346, "retrieval_score": 14.226237}
{"snippet": "Panel.show()", "intent": "Display the panel ( which might have been hidden ) .", "question_id": 2153, "for": 21684346, "retrieval_score": 13.11548}
{"snippet": "termios.tcdrain(fd)", "intent": "Wait until all output written to file descriptor `fd` has been transmitted .", "question_id": 10105, "for": 21684346, "retrieval_score": 12.735731}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458, "for": 3160752, "retrieval_score": 19.861969}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 3160752, "retrieval_score": 14.753524}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204, "for": 3160752, "retrieval_score": 13.054176}
{"snippet": "str.isprintable()", "intent": "Return true if all characters in the string are printable or the string is empty , false otherwise .", "question_id": 9210, "for": 3160752, "retrieval_score": 13.054176}
{"snippet": "Node.toxml(encoding=None)", "intent": "Return a string or byte string containing the XML represented by the DOM node . With an explicit `encoding` 1 argument , the result is a byte string in the specified encoding .", "question_id": 12412, "for": 3160752, "retrieval_score": 12.505473}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458, "for": 3160752, "retrieval_score": 14.909343}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557, "for": 3160752, "retrieval_score": 14.104156}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 3160752, "retrieval_score": 10.205771}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 3160752, "retrieval_score": 10.205771}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126, "for": 3160752, "retrieval_score": 10.205771}
{"snippet": "cmath.nan", "intent": "A floating-point \u201cnot a number\u201d (NaN) value.", "question_id": 1125, "for": 42172204, "retrieval_score": 12.0343485}
{"snippet": "math.nan", "intent": "A floating-point \u201cnot a number\u201d (NaN) value.", "question_id": 5938, "for": 42172204, "retrieval_score": 12.0343485}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 42172204, "retrieval_score": 11.783032}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 42172204, "retrieval_score": 11.783032}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 42172204, "retrieval_score": 11.783032}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196, "for": 3743222, "retrieval_score": 19.765623}
{"snippet": "datetime.MAXYEAR", "intent": "The largest year number allowed in a date or datetime object.", "question_id": 2197, "for": 3743222, "retrieval_score": 19.765623}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 3743222, "retrieval_score": 17.936985}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266, "for": 3743222, "retrieval_score": 13.47214}
{"snippet": "datetime.astimezone()", "intent": "Return a datetime object with new tzinfo attribute `tz` , adjusting the date and time data so the result is the same UTC time as self , but in tz \u2019 s local time .", "question_id": 2294, "for": 3743222, "retrieval_score": 13.325579}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196, "for": 3743222, "retrieval_score": 15.111531}
{"snippet": "datetime.MAXYEAR", "intent": "The largest year number allowed in a date or datetime object.", "question_id": 2197, "for": 3743222, "retrieval_score": 15.111531}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201, "for": 3743222, "retrieval_score": 13.1651125}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 3743222, "retrieval_score": 12.990192}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404, "for": 3743222, "retrieval_score": 12.47865}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508, "for": 10408927, "retrieval_score": 15.546022}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453, "for": 10408927, "retrieval_score": 15.377489}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461, "for": 10408927, "retrieval_score": 15.377489}
{"snippet": "xml.etree.ElementTree.tostring(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12456, "for": 10408927, "retrieval_score": 14.46343}
{"snippet": "xml.etree.ElementTree.tostringlist(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12464, "for": 10408927, "retrieval_score": 14.46343}
{"snippet": "element_tree.iter(tag=None)", "intent": "Creates and returns a tree iterator for the root element . `tag` is the tag to look for ( default is to return all elements ) .", "question_id": 12522, "for": 10408927, "retrieval_score": 25.975761}
{"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511, "for": 10408927, "retrieval_score": 25.659105}
{"snippet": "element_tree.getroot()", "intent": "Returns the root element for this tree .", "question_id": 12520, "for": 10408927, "retrieval_score": 25.659105}
{"snippet": "element_tree.iter()", "intent": "Creates and returns a tree iterator for the root element .", "question_id": 12521, "for": 10408927, "retrieval_score": 24.58805}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436, "for": 10408927, "retrieval_score": 24.381844}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013, "for": 5749195, "retrieval_score": 11.916213}
{"snippet": "config_parser.read_string(string)", "intent": "Parse configuration data from a `string` .", "question_id": 1516, "for": 5749195, "retrieval_score": 10.730953}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214, "for": 5749195, "retrieval_score": 10.620721}
{"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218, "for": 5749195, "retrieval_score": 10.620721}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 5749195, "retrieval_score": 10.561672}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393, "for": 42364593, "retrieval_score": 27.358538}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394, "for": 42364593, "retrieval_score": 25.136436}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 42364593, "retrieval_score": 24.49907}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 42364593, "retrieval_score": 23.564106}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227, "for": 42364593, "retrieval_score": 22.705484}
{"snippet": "bound_arguments.kwargs", "intent": "A dict of keyword arguments values.", "question_id": 5005, "for": 35253971, "retrieval_score": 14.420143}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 35253971, "retrieval_score": 13.880462}
{"snippet": "shelve.Shelf(dict, writeback=False, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8250, "for": 35253971, "retrieval_score": 13.643467}
{"snippet": "shelve.Shelf(dict, writeback=False)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times .", "question_id": 8246, "for": 35253971, "retrieval_score": 13.302374}
{"snippet": "decimal.ROUND_05UP", "intent": "Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero.", "question_id": 2584, "for": 35253971, "retrieval_score": 13.092498}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621, "for": 9550867, "retrieval_score": 15.803046}
{"snippet": "str.maketrans(x, y)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` .", "question_id": 9221, "for": 9550867, "retrieval_score": 14.533046}
{"snippet": "str.maketrans(x)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` .", "question_id": 9222, "for": 9550867, "retrieval_score": 14.533046}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 9550867, "retrieval_score": 13.826882}
{"snippet": "widget.bbox(item)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) .", "question_id": 10620, "for": 9550867, "retrieval_score": 13.183221}
{"snippet": "async_result.successful()", "intent": "Return whether the call completed without raising an exception .", "question_id": 6365, "for": 730764, "retrieval_score": 16.384573}
{"snippet": "codecs.ignore_errors(exception)", "intent": "Implements the 'ignore ' error handling : malformed data is ignored and encoding or decoding is continued without further notice . With arguments `exception`.", "question_id": 1257, "for": 730764, "retrieval_score": 14.194057}
{"snippet": "codecs.replace_errors(exception)", "intent": "Implements the 'replace ' error handling ( for text encodings only ) : substitutes ' ? ' With arguments `exception`.", "question_id": 1256, "for": 730764, "retrieval_score": 11.432221}
{"snippet": "codecs.strict_errors(exception)", "intent": "Implements the 'strict ' error handling : each encoding or decoding error raises a UnicodeError . With arguments `exception`.", "question_id": 1255, "for": 730764, "retrieval_score": 11.419884}
{"snippet": "future.exception()", "intent": "Return the exception raised by the call .", "question_id": 1474, "for": 730764, "retrieval_score": 11.116505}
{"snippet": "async_result.successful()", "intent": "Return whether the call completed without raising an exception .", "question_id": 6365, "for": 730764, "retrieval_score": 16.384573}
{"snippet": "codecs.ignore_errors(exception)", "intent": "Implements the 'ignore ' error handling : malformed data is ignored and encoding or decoding is continued without further notice . With arguments `exception`.", "question_id": 1257, "for": 730764, "retrieval_score": 14.194057}
{"snippet": "codecs.replace_errors(exception)", "intent": "Implements the 'replace ' error handling ( for text encodings only ) : substitutes ' ? ' With arguments `exception`.", "question_id": 1256, "for": 730764, "retrieval_score": 11.432221}
{"snippet": "codecs.strict_errors(exception)", "intent": "Implements the 'strict ' error handling : each encoding or decoding error raises a UnicodeError . With arguments `exception`.", "question_id": 1255, "for": 730764, "retrieval_score": 11.419884}
{"snippet": "future.exception()", "intent": "Return the exception raised by the call .", "question_id": 1474, "for": 730764, "retrieval_score": 11.116505}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518, "for": 24841306, "retrieval_score": 11.9418125}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 24841306, "retrieval_score": 10.787555}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984, "for": 24841306, "retrieval_score": 9.695951}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 24841306, "retrieval_score": 9.523173}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 24841306, "retrieval_score": 9.523173}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355, "for": 7238226, "retrieval_score": 18.879452}
{"snippet": "email.utils.format_datetime(dt)", "intent": "Like formatdate , but the input is a datetime instance . With arguments `dt`.", "question_id": 3476, "for": 7238226, "retrieval_score": 16.318695}
{"snippet": "email.utils.localtime(dt=None)", "intent": "Return local time as an aware datetime object . Otherwise `dt` argument should be a datetime instance , and it is converted to the local time zone according to the system time zone database .", "question_id": 3453, "for": 7238226, "retrieval_score": 15.959396}
{"snippet": "tzinfo.dst(dt)", "intent": "Return the daylight saving time ( DST ) adjustment , as a timedelta object or None if DST information isn \u2019 t known . tz.utcoffset ( `dt` ) - tz.dst ( dt )", "question_id": 2354, "for": 7238226, "retrieval_score": 11.85069}
{"snippet": "timezone.fromutc(dt)", "intent": "Return `dt` + offset .", "question_id": 2362, "for": 7238226, "retrieval_score": 10.823494}
{"snippet": "math.ceil(x)", "intent": "Return the ceiling of `x` , the smallest integer greater than or equal to x .", "question_id": 5885, "for": 40156469, "retrieval_score": 35.366516}
{"snippet": "math.floor(x)", "intent": "Return the floor of `x` , the largest integer less than or equal to x .", "question_id": 5889, "for": 40156469, "retrieval_score": 35.366516}
{"snippet": "asyncio.Queue(maxsize=0)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .", "question_id": 446, "for": 40156469, "retrieval_score": 27.934677}
{"snippet": "context.next_minus(x)", "intent": "Returns the largest representable number smaller than `x` .", "question_id": 2555, "for": 40156469, "retrieval_score": 26.985752}
{"snippet": "asyncio.Queue(maxsize=0, loop=None)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite . With arguments `loop`.", "question_id": 448, "for": 40156469, "retrieval_score": 26.419779}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027, "for": 4174941, "retrieval_score": 19.414371}
{"snippet": "inspect.getinnerframes(traceback, context=1)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "question_id": 5028, "for": 4174941, "retrieval_score": 18.230404}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 4174941, "retrieval_score": 17.68945}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 4174941, "retrieval_score": 17.381008}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 4174941, "retrieval_score": 17.381008}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027, "for": 4174941, "retrieval_score": 19.414371}
{"snippet": "inspect.getinnerframes(traceback, context=1)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "question_id": 5028, "for": 4174941, "retrieval_score": 18.230404}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 4174941, "retrieval_score": 17.68945}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 4174941, "retrieval_score": 17.381008}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 4174941, "retrieval_score": 17.381008}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 4174941, "retrieval_score": 17.36663}
{"snippet": "widget.index(item)", "intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "question_id": 10639, "for": 4174941, "retrieval_score": 17.258064}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 4174941, "retrieval_score": 14.592626}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640, "for": 4174941, "retrieval_score": 14.103709}
{"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648, "for": 4174941, "retrieval_score": 12.991548}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 4174941, "retrieval_score": 28.73301}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 4174941, "retrieval_score": 28.73301}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027, "for": 4174941, "retrieval_score": 22.936903}
{"snippet": "inspect.getinnerframes(traceback, context=1)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "question_id": 5028, "for": 4174941, "retrieval_score": 21.534523}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 4174941, "retrieval_score": 21.461313}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 36381230, "retrieval_score": 23.530941}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 36381230, "retrieval_score": 23.530941}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 36381230, "retrieval_score": 17.860472}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 36381230, "retrieval_score": 17.827824}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 36381230, "retrieval_score": 17.827824}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 18470323, "retrieval_score": 15.020562}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 18470323, "retrieval_score": 15.020562}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 18470323, "retrieval_score": 15.020562}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 18470323, "retrieval_score": 14.951639}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 18470323, "retrieval_score": 14.951639}
{"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957, "for": 18470323, "retrieval_score": 18.321228}
{"snippet": "os.terminal_size", "intent": "A subclass of tuple, holding (columns, lines) of the terminal window size.", "question_id": 6813, "for": 18470323, "retrieval_score": 17.123543}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 18470323, "retrieval_score": 15.221291}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 18470323, "retrieval_score": 15.221291}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939, "for": 18470323, "retrieval_score": 15.221291}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927, "for": 18663644, "retrieval_score": 16.080605}
{"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928, "for": 18663644, "retrieval_score": 16.080605}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 18663644, "retrieval_score": 15.9557905}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 18663644, "retrieval_score": 15.9557905}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442, "for": 18663644, "retrieval_score": 14.877296}
{"snippet": "os.rename(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6892, "for": 2759067, "retrieval_score": 27.696846}
{"snippet": "os.replace(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6897, "for": 2759067, "retrieval_score": 27.696846}
{"snippet": "os.rename(src, dst, src_dir_fd=None)", "intent": "Rename the file or directory `src` to `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors .", "question_id": 6893, "for": 2759067, "retrieval_score": 20.112026}
{"snippet": "os.rename(src, dst, dst_dir_fd=None)", "intent": "Rename the file or directory `src` to `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors .", "question_id": 6894, "for": 2759067, "retrieval_score": 20.112026}
{"snippet": "os.rename(src, dst, src_dir_fd=None, dst_dir_fd=None)", "intent": "Rename the file or directory `src` to `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors .", "question_id": 6895, "for": 2759067, "retrieval_score": 20.112026}
{"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501, "for": 10258584, "retrieval_score": 30.058334}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH", "intent": "An end tag did not match the innermost open start tag.", "question_id": 7802, "for": 10258584, "retrieval_score": 27.48121}
{"snippet": "element_tree.iter(tag=None)", "intent": "Creates and returns a tree iterator for the root element . `tag` is the tag to look for ( default is to return all elements ) .", "question_id": 12522, "for": 10258584, "retrieval_score": 26.639309}
{"snippet": "element.findall(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12493, "for": 10258584, "retrieval_score": 24.548922}
{"snippet": "element.iterfind(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12502, "for": 10258584, "retrieval_score": 24.548922}
{"snippet": "json.dumps(obj, **kw)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "question_id": 5280, "for": 12337583, "retrieval_score": 20.611067}
{"snippet": "json.dumps(obj, **kw, skipkeys=False)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `skipkeys`.", "question_id": 5281, "for": 12337583, "retrieval_score": 20.156912}
{"snippet": "json.dumps(obj, **kw, ensure_ascii=True)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `ensure_ascii`.", "question_id": 5282, "for": 12337583, "retrieval_score": 20.156912}
{"snippet": "json.dumps(obj, **kw, check_circular=True)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `check_circular`.", "question_id": 5283, "for": 12337583, "retrieval_score": 20.156912}
{"snippet": "json.dumps(obj, **kw, allow_nan=True)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `allow_nan`.", "question_id": 5284, "for": 12337583, "retrieval_score": 20.156912}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 20205455, "retrieval_score": 19.914839}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 20205455, "retrieval_score": 17.75611}
{"snippet": "str.encode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9188, "for": 20205455, "retrieval_score": 16.968489}
{"snippet": "base_handler.error_body", "intent": "The error response body.", "question_id": 12265, "for": 20205455, "retrieval_score": 15.7242365}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490, "for": 20205455, "retrieval_score": 15.677317}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797, "for": 39998424, "retrieval_score": 12.96956}
{"snippet": "bdb.clear_break(filename, lineno)", "intent": "Delete the breakpoints in `filename` and `lineno` .", "question_id": 795, "for": 39998424, "retrieval_score": 12.275694}
{"snippet": "os.remove(path)", "intent": "Remove ( delete ) the file `path` .", "question_id": 6889, "for": 39998424, "retrieval_score": 10.946182}
{"snippet": "os.unlink(path)", "intent": "Remove ( delete ) the file `path` .", "question_id": 6957, "for": 39998424, "retrieval_score": 10.946182}
{"snippet": "os.remove(path, dir_fd=None)", "intent": "Remove ( delete ) the file `path` . With arguments `dir_fd`.", "question_id": 6890, "for": 39998424, "retrieval_score": 10.090643}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 29471884, "retrieval_score": 16.84059}
{"snippet": "cursor.fetchmany()", "intent": "Fetches the next set of rows of a query result , returning a list .", "question_id": 8845, "for": 29471884, "retrieval_score": 16.782547}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 29471884, "retrieval_score": 16.035488}
{"snippet": "SSLContext.get_ca_certs()", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates .", "question_id": 9011, "for": 29471884, "retrieval_score": 15.557775}
{"snippet": "IMAP4.getquotaroot(mailbox)", "intent": "Get the list of quota roots for the named `mailbox` .", "question_id": 4705, "for": 29471884, "retrieval_score": 14.835621}
{"snippet": "email_message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3260, "for": 39602824, "retrieval_score": 15.039109}
{"snippet": "email_message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3261, "for": 39602824, "retrieval_score": 15.039109}
{"snippet": "email_message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3265, "for": 39602824, "retrieval_score": 15.039109}
{"snippet": "email_message.set_param(param, value, header='Content-Type', replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3269, "for": 39602824, "retrieval_score": 15.039109}
{"snippet": "email_message.set_param(param, value, requote=True)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . Use of the `requote` parameter with EmailMessage objects is deprecated . With arguments `param`.", "question_id": 3262, "for": 39602824, "retrieval_score": 13.966419}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 40620804, "retrieval_score": 16.765438}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 40620804, "retrieval_score": 16.765438}
{"snippet": "snapshot.statistics(key_type: str)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`.", "question_id": 10876, "for": 40620804, "retrieval_score": 12.586364}
{"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877, "for": 40620804, "retrieval_score": 12.06609}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 40620804, "retrieval_score": 11.623059}
{"snippet": "datetime.now(tz=None)", "intent": "Return the current local date and time . If optional argument `tz` is None or not specified , this is like today ( ) , but , if possible , supplies more precision than can be gotten from going through a time.time ( ) timestamp ( for example , this may be possible on platforms supplying the C gettimeofday ( ) function ) .", "question_id": 2259, "for": 546321, "retrieval_score": 10.981816}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370, "for": 546321, "retrieval_score": 9.771032}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175, "for": 546321, "retrieval_score": 9.583898}
{"snippet": "locale.ERA_D_T_FMT", "intent": "Get a format string for time.strftime() to represent date and time in a locale-specific era-based way.", "question_id": 5369, "for": 546321, "retrieval_score": 9.569083}
{"snippet": "calendar.month_name", "intent": "An array that represents the months of the year in the current locale.", "question_id": 1024, "for": 546321, "retrieval_score": 9.21555}
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223, "for": 546321, "retrieval_score": 15.583821}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912, "for": 546321, "retrieval_score": 13.566124}
{"snippet": "datetime.date()", "intent": "Return date object with same year , month and day .", "question_id": 2281, "for": 546321, "retrieval_score": 13.215323}
{"snippet": "MON_1 ... MON_12", "intent": "Get the name of the n-th month.", "question_id": 5361, "for": 546321, "retrieval_score": 13.063008}
{"snippet": "ABMON_1 ... ABMON_12", "intent": "Get the abbreviated name of the n-th month.", "question_id": 5362, "for": 546321, "retrieval_score": 12.736185}
{"snippet": "datetime.now(tz=None)", "intent": "Return the current local date and time . If optional argument `tz` is None or not specified , this is like today ( ) , but , if possible , supplies more precision than can be gotten from going through a time.time ( ) timestamp ( for example , this may be possible on platforms supplying the C gettimeofday ( ) function ) .", "question_id": 2259, "for": 546321, "retrieval_score": 10.981816}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370, "for": 546321, "retrieval_score": 9.771032}
{"snippet": "locale.ERA_D_T_FMT", "intent": "Get a format string for time.strftime() to represent date and time in a locale-specific era-based way.", "question_id": 5369, "for": 546321, "retrieval_score": 9.569083}
{"snippet": "calendar.month_name", "intent": "An array that represents the months of the year in the current locale.", "question_id": 1024, "for": 546321, "retrieval_score": 9.21555}
{"snippet": "pkgutil.get_data(package, resource)", "intent": "Get a `resource` from a `package` .", "question_id": 7457, "for": 546321, "retrieval_score": 9.110263}
{"snippet": "date.today()", "intent": "Return the current local date .", "question_id": 2219, "for": 546321, "retrieval_score": 19.709429}
{"snippet": "datetime.now()", "intent": "Return the current local date and time .", "question_id": 2258, "for": 546321, "retrieval_score": 18.654984}
{"snippet": "base_http_request_handler.log_date_time_string()", "intent": "Returns the current date and time , formatted for logging .", "question_id": 4657, "for": 546321, "retrieval_score": 17.707634}
{"snippet": "datetime.utcnow()", "intent": "Return the current UTC date and time , with tzinfo None .", "question_id": 2260, "for": 546321, "retrieval_score": 17.269146}
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223, "for": 546321, "retrieval_score": 17.078377}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 42352887, "retrieval_score": 23.948534}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 42352887, "retrieval_score": 23.518623}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 42352887, "retrieval_score": 23.518623}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643, "for": 42352887, "retrieval_score": 23.212553}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 42352887, "retrieval_score": 22.634386}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 7429118, "retrieval_score": 15.661104}
{"snippet": "array.pop()", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 133, "for": 7429118, "retrieval_score": 15.661104}
{"snippet": "gc.get_objects()", "intent": "Returns a list of all objects tracked by the collector , excluding the list returned .", "question_id": 4174, "for": 7429118, "retrieval_score": 14.611649}
{"snippet": "readline.get_begidx()", "intent": "Get the beginning or ending index of the completion scope .", "question_id": 8044, "for": 7429118, "retrieval_score": 12.31849}
{"snippet": "readline.get_endidx()", "intent": "Get the beginning or ending index of the completion scope .", "question_id": 8045, "for": 7429118, "retrieval_score": 12.31849}
{"snippet": "element.keys()", "intent": "Returns the elements attribute names as a list .", "question_id": 12487, "for": 3895424, "retrieval_score": 18.112133}
{"snippet": "deque.clear()", "intent": "Remove all elements from the deque leaving it with length 0 .", "question_id": 1355, "for": 3895424, "retrieval_score": 17.518063}
{"snippet": "executor.submit(fn, *args, **kwargs)", "intent": "Schedules the callable , `fn` , to be executed as fn ( `*args` `**kwargs` ) and returns a Future object representing the execution of the callable .", "question_id": 1440, "for": 3895424, "retrieval_score": 15.361454}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762, "for": 3895424, "retrieval_score": 15.108859}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 3895424, "retrieval_score": 15.102597}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 15752422, "retrieval_score": 9.911267}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 15752422, "retrieval_score": 9.911267}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939, "for": 15752422, "retrieval_score": 9.911267}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 15752422, "retrieval_score": 9.911267}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 15752422, "retrieval_score": 9.911267}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714, "for": 1532810, "retrieval_score": 22.81916}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713, "for": 1532810, "retrieval_score": 21.343258}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 1532810, "retrieval_score": 21.26445}
{"snippet": "io_base.readlines()", "intent": "Read and return a list of lines from the stream .", "question_id": 5072, "for": 1532810, "retrieval_score": 19.996216}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 1532810, "retrieval_score": 19.465237}
{"snippet": "bz2.BZ2File(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 889, "for": 15248272, "retrieval_score": 9.628828}
{"snippet": "bz2.BZ2File(filename, mode='r', compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 891, "for": 15248272, "retrieval_score": 9.628828}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156, "for": 15248272, "retrieval_score": 9.508891}
{"snippet": "sys.int_info", "intent": "A named tuple that holds information about Python\u2019s internal representation of integers.", "question_id": 9816, "for": 15248272, "retrieval_score": 9.341333}
{"snippet": "bz2.BZ2File(filename, buffering=None, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . The `buffering` argument is ignored . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 892, "for": 15248272, "retrieval_score": 9.248805}
{"snippet": "HMAC.hexdigest()", "intent": "Like digest ( ) except the digest is returned as a string twice the length containing only hexadecimal digits .", "question_id": 4336, "for": 18116235, "retrieval_score": 13.303932}
{"snippet": "hash.hexdigest()", "intent": "Like digest ( ) except the digest is returned as a string object of double length , containing only hexadecimal digits .", "question_id": 4306, "for": 18116235, "retrieval_score": 13.028965}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309, "for": 18116235, "retrieval_score": 13.028965}
{"snippet": "locale.THOUSEP", "intent": "Get the separator character for thousands (groups of three digits).", "question_id": 5364, "for": 18116235, "retrieval_score": 12.596332}
{"snippet": "pkgutil.get_data(package, resource)", "intent": "Get a `resource` from a `package` .", "question_id": 7457, "for": 18116235, "retrieval_score": 10.239011}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193, "for": 17038426, "retrieval_score": 13.203441}
{"snippet": "str.expandtabs()", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size .", "question_id": 9192, "for": 17038426, "retrieval_score": 12.694038}
{"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378, "for": 17038426, "retrieval_score": 11.52512}
{"snippet": "bytearray.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9380, "for": 17038426, "retrieval_score": 11.52512}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 17038426, "retrieval_score": 10.561672}
{"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415, "for": 3809265, "retrieval_score": 11.301575}
{"snippet": "decimal.fma(other, third, context=None)", "intent": "Fused multiply-add . With arguments `other`, `third`, `context`.", "question_id": 2416, "for": 3809265, "retrieval_score": 11.007135}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992, "for": 3809265, "retrieval_score": 9.772758}
{"snippet": "operator.lshift(a, b)", "intent": "Return `a` shifted left by `b` .", "question_id": 6544, "for": 3809265, "retrieval_score": 9.628327}
{"snippet": "operator.__lshift__(a, b)", "intent": "Return `a` shifted left by `b` .", "question_id": 6545, "for": 3809265, "retrieval_score": 9.628327}
{"snippet": "str.rstrip()", "intent": "Return a copy of the string with trailing characters removed .", "question_id": 9240, "for": 275018, "retrieval_score": 13.144488}
{"snippet": "window.instr(n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at y , x if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2085, "for": 275018, "retrieval_score": 12.619522}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087, "for": 275018, "retrieval_score": 12.619522}
{"snippet": "str.strip()", "intent": "Return a copy of the string with the leading and trailing characters removed .", "question_id": 9251, "for": 275018, "retrieval_score": 12.235537}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034, "for": 275018, "retrieval_score": 12.128794}
{"snippet": "window.instr(n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at y , x if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2085, "for": 275018, "retrieval_score": 17.697214}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087, "for": 275018, "retrieval_score": 17.697214}
{"snippet": "Unpacker.unpack_fstring(n)", "intent": "Unpacks and returns a fixed length string . `n` is the number of characters expected .", "question_id": 12292, "for": 275018, "retrieval_score": 15.882971}
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445, "for": 275018, "retrieval_score": 15.7788105}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277, "for": 275018, "retrieval_score": 14.408161}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 275018, "retrieval_score": 8.301241}
{"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346, "for": 275018, "retrieval_score": 8.301241}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 275018, "retrieval_score": 8.167443}
{"snippet": "formatter.formatStack(stack_info)", "intent": "Formats the specified stack information ( a string as returned by traceback.print_stack ( ) , but with the last newline removed ) as a string . With arguments `stack_info`.", "question_id": 5622, "for": 275018, "retrieval_score": 7.8642807}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825, "for": 275018, "retrieval_score": 7.812142}
{"snippet": "deque.pop()", "intent": "Remove and return an element from the right side of the deque .", "question_id": 1364, "for": 275018, "retrieval_score": 20.548578}
{"snippet": "deque.append(x)", "intent": "Add `x` to the right side of the deque .", "question_id": 1353, "for": 275018, "retrieval_score": 15.702807}
{"snippet": "deque.extend(iterable)", "intent": "Extend the right side of the deque by appending elements from the `iterable` argument .", "question_id": 1358, "for": 275018, "retrieval_score": 14.007529}
{"snippet": "deque.popleft()", "intent": "Remove and return an element from the left side of the deque .", "question_id": 1365, "for": 275018, "retrieval_score": 13.769427}
{"snippet": "str.rjust(width)", "intent": "Return the string right justified in a string of length `width` .", "question_id": 9233, "for": 275018, "retrieval_score": 12.743187}
{"snippet": "deque.popleft()", "intent": "Remove and return an element from the left side of the deque .", "question_id": 1365, "for": 275018, "retrieval_score": 20.147549}
{"snippet": "deque.appendleft(x)", "intent": "Add `x` to the left side of the deque .", "question_id": 1354, "for": 275018, "retrieval_score": 15.27123}
{"snippet": "deque.extendleft(iterable)", "intent": "Extend the left side of the deque by appending elements from `iterable` .", "question_id": 1359, "for": 275018, "retrieval_score": 14.203032}
{"snippet": "deque.pop()", "intent": "Remove and return an element from the right side of the deque .", "question_id": 1364, "for": 275018, "retrieval_score": 13.769427}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216, "for": 275018, "retrieval_score": 12.332467}
{"snippet": "stat.UF_HIDDEN", "intent": "The file should not be displayed in a GUI (Mac OS X 10.5+).", "question_id": 9119, "for": 275018, "retrieval_score": 9.770041}
{"snippet": "socket.makefile(mode='r', newline=None)", "intent": "Return a file object associated with the socket . These arguments are interpreted the same way as by the built-in open ( ) function , except the only supported `mode` values are ' r ' ( default ) , ' w ' and ' b ' . With arguments `newline`.", "question_id": 8700, "for": 275018, "retrieval_score": 9.198741}
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445, "for": 275018, "retrieval_score": 8.961687}
{"snippet": "itertools.permutations(iterable)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5258, "for": 275018, "retrieval_score": 8.894903}
{"snippet": "itertools.permutations(iterable, r=None)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5259, "for": 275018, "retrieval_score": 8.894903}
{"snippet": "deque.pop()", "intent": "Remove and return an element from the right side of the deque .", "question_id": 1364, "for": 275018, "retrieval_score": 20.548578}
{"snippet": "deque.append(x)", "intent": "Add `x` to the right side of the deque .", "question_id": 1353, "for": 275018, "retrieval_score": 15.702807}
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445, "for": 275018, "retrieval_score": 15.35503}
{"snippet": "deque.rotate()", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1368, "for": 275018, "retrieval_score": 14.201328}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369, "for": 275018, "retrieval_score": 14.201328}
{"snippet": "deque.pop()", "intent": "Remove and return an element from the right side of the deque .", "question_id": 1364, "for": 275018, "retrieval_score": 20.548578}
{"snippet": "deque.append(x)", "intent": "Add `x` to the right side of the deque .", "question_id": 1353, "for": 275018, "retrieval_score": 15.702807}
{"snippet": "deque.rotate()", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1368, "for": 275018, "retrieval_score": 14.201328}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369, "for": 275018, "retrieval_score": 14.201328}
{"snippet": "deque.extend(iterable)", "intent": "Extend the right side of the deque by appending elements from the `iterable` argument .", "question_id": 1358, "for": 275018, "retrieval_score": 14.007529}
{"snippet": "deque.rotate()", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1368, "for": 275018, "retrieval_score": 26.604084}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369, "for": 275018, "retrieval_score": 26.604084}
{"snippet": "random.uniform(a, b)", "intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "question_id": 7907, "for": 275018, "retrieval_score": 21.611345}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507, "for": 275018, "retrieval_score": 20.768444}
{"snippet": "turtle.tracer(n=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11059, "for": 275018, "retrieval_score": 20.626736}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 18551752, "retrieval_score": 13.33489}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 18551752, "retrieval_score": 13.33489}
{"snippet": "bytearray.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9355, "for": 18551752, "retrieval_score": 13.33489}
{"snippet": "bytearray.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9356, "for": 18551752, "retrieval_score": 13.33489}
{"snippet": "bytes.split()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9363, "for": 18551752, "retrieval_score": 13.33489}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 21360028, "retrieval_score": 16.84059}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 21360028, "retrieval_score": 15.87989}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 21360028, "retrieval_score": 15.758243}
{"snippet": "SSLContext.get_ca_certs()", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates .", "question_id": 9011, "for": 21360028, "retrieval_score": 15.557775}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319, "for": 21360028, "retrieval_score": 15.390074}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 11174790, "retrieval_score": 20.93776}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348, "for": 11174790, "retrieval_score": 15.535378}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303, "for": 11174790, "retrieval_score": 13.714664}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916, "for": 11174790, "retrieval_score": 13.111719}
{"snippet": "charset.output_codec", "intent": "The name of the Python codec used to convert Unicode to the output_charset.", "question_id": 2917, "for": 11174790, "retrieval_score": 13.111719}
{"snippet": "parse_error.position", "intent": "A tuple of line, column numbers, specifying where the error occurred.", "question_id": 12563, "for": 13353233, "retrieval_score": 14.142103}
{"snippet": "html_diff.__init__(wrapcolumn=None)", "intent": "Initializes instance of HtmlDiff . `wrapcolumn` is an optional keyword to specify column number where lines are broken and wrapped , defaults to None where lines are not wrapped .", "question_id": 2600, "for": 13353233, "retrieval_score": 13.131227}
{"snippet": "Locator.getColumnNumber()", "intent": "Return the column number where the current event begins .", "question_id": 12630, "for": 13353233, "retrieval_score": 12.90903}
{"snippet": "context.quantize(x, y)", "intent": "Returns a value equal to `x` ( rounded ) , having the exponent of `y` .", "question_id": 2563, "for": 13353233, "retrieval_score": 12.89834}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 13353233, "retrieval_score": 12.858478}
{"snippet": "json_decoder.raw_decode(s)", "intent": "Decode a JSON document from `s` ( a str beginning with a JSON document ) and return a 2-tuple of the Python representation and the index in s where the document ended .", "question_id": 5321, "for": 3040904, "retrieval_score": 24.041113}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322, "for": 3040904, "retrieval_score": 19.71965}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333, "for": 3040904, "retrieval_score": 18.855202}
{"snippet": "json.load(fp, **kw, parse_float=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_float` , if specified , will be called with the string of every JSON float to be decoded . With arguments `**kw`.", "question_id": 5293, "for": 3040904, "retrieval_score": 18.60886}
{"snippet": "json.load(fp, **kw, parse_int=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_int` , if specified , will be called with the string of every JSON int to be decoded . With arguments `**kw`.", "question_id": 5294, "for": 3040904, "retrieval_score": 18.60886}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357, "for": 4588628, "retrieval_score": 19.816782}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 4588628, "retrieval_score": 15.801513}
{"snippet": "element.extend(subelements)", "intent": "Appends `subelements` from a sequence object with zero or more elements .", "question_id": 12490, "for": 4588628, "retrieval_score": 14.273666}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003, "for": 4588628, "retrieval_score": 13.618006}
{"snippet": "Match.start()", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8004, "for": 4588628, "retrieval_score": 13.618006}
{"snippet": "writer.flush()", "intent": "Flush any buffered output or device control events .", "question_id": 3841, "for": 3804727, "retrieval_score": 13.852488}
{"snippet": "base_http_request_handler.flush_headers()", "intent": "Finally send the headers to the output stream and flush the internal headers buffer .", "question_id": 4647, "for": 3804727, "retrieval_score": 11.979834}
{"snippet": "breakpoint.bpprint()", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 766, "for": 3804727, "retrieval_score": 11.561411}
{"snippet": "breakpoint.bpprint(out=None)", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 767, "for": 3804727, "retrieval_score": 11.561411}
{"snippet": "curses.noqiflush()", "intent": "When the noqiflush ( ) routine is used , normal flush of input and output queues associated with the INTR , QUIT and SUSP characters will not be done .", "question_id": 1964, "for": 3804727, "retrieval_score": 10.452237}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404, "for": 961632, "retrieval_score": 12.47865}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 961632, "retrieval_score": 10.582789}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 961632, "retrieval_score": 9.559889}
{"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346, "for": 961632, "retrieval_score": 9.559889}
{"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478, "for": 961632, "retrieval_score": 9.334332}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 961632, "retrieval_score": 11.484909}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 961632, "retrieval_score": 10.3600855}
{"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478, "for": 961632, "retrieval_score": 10.13003}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 961632, "retrieval_score": 9.698298}
{"snippet": "time.ctime()", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time .", "question_id": 10439, "for": 961632, "retrieval_score": 9.698298}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 961632, "retrieval_score": 11.484909}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 961632, "retrieval_score": 10.3600855}
{"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478, "for": 961632, "retrieval_score": 10.13003}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 961632, "retrieval_score": 9.698298}
{"snippet": "time.ctime()", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time .", "question_id": 10439, "for": 961632, "retrieval_score": 9.698298}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 5201191, "retrieval_score": 18.049925}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 5201191, "retrieval_score": 16.701914}
{"snippet": "widget.get_children()", "intent": "Returns the list of children belonging to `item` .", "question_id": 10622, "for": 5201191, "retrieval_score": 16.39206}
{"snippet": "widget.get_children(item=None)", "intent": "Returns the list of children belonging to `item` .", "question_id": 10623, "for": 5201191, "retrieval_score": 16.39206}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 5201191, "retrieval_score": 15.494269}
{"snippet": "Unpacker.unpack_string()", "intent": "Unpacks and returns a variable length string .", "question_id": 12294, "for": 9969684, "retrieval_score": 16.68679}
{"snippet": "typing.TypeVar", "intent": "Type variable.", "question_id": 11229, "for": 9969684, "retrieval_score": 15.729316}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 9969684, "retrieval_score": 15.447165}
{"snippet": "Packer.pack_opaque(data)", "intent": "Packs a variable length opaque `data` string , similarly to pack_string ( ) .", "question_id": 12280, "for": 9969684, "retrieval_score": 15.447165}
{"snippet": "winreg.ExpandEnvironmentStrings(str)", "intent": "Expands environment variable placeholders % NAME % in strings like REG_EXPAND_SZ : With arguments `str`.", "question_id": 12135, "for": 9969684, "retrieval_score": 15.205461}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 38457059, "retrieval_score": 16.766369}
{"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734, "for": 38457059, "retrieval_score": 13.347406}
{"snippet": "os.P_PID", "intent": "These are the possible values for idtype in waitid().", "question_id": 7072, "for": 38457059, "retrieval_score": 13.315756}
{"snippet": "os.P_PGID", "intent": "These are the possible values for idtype in waitid().", "question_id": 7073, "for": 38457059, "retrieval_score": 13.315756}
{"snippet": "os.P_ALL", "intent": "These are the possible values for idtype in waitid().", "question_id": 7074, "for": 38457059, "retrieval_score": 13.315756}
{"snippet": "widget.state()", "intent": "Modify or inquire widget state .", "question_id": 10595, "for": 3842155, "retrieval_score": 15.804831}
{"snippet": "widget.state(statespec=None)", "intent": "Modify or inquire widget state . If `statespec` is specified , sets the widget state according to it and return a new statespec indicating which flags were changed .", "question_id": 10596, "for": 3842155, "retrieval_score": 15.473597}
{"snippet": "widget.instate(statespec, *args, **kw)", "intent": "Test the widget \u2019 s state . If a `callback` is not specified , returns True if the widget state matches `statespec` and False otherwise . With arguments `*args`, `**kw`.", "question_id": 10593, "for": 3842155, "retrieval_score": 14.820137}
{"snippet": "widget.instate(statespec, *args, **kw, callback=None)", "intent": "Test the widget \u2019 s state . If a `callback` is not specified , returns True if the widget state matches `statespec` and False otherwise . With arguments `*args`, `**kw`.", "question_id": 10594, "for": 3842155, "retrieval_score": 14.820137}
{"snippet": "cmath.exp(x)", "intent": "Return e raised to the power `x` , where e is the base of natural logarithms .", "question_id": 1096, "for": 3842155, "retrieval_score": 12.444187}
{"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515, "for": 12492137, "retrieval_score": 20.745838}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513, "for": 12492137, "retrieval_score": 20.48422}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204, "for": 12492137, "retrieval_score": 20.252167}
{"snippet": "string.printable", "intent": "String of ASCII characters which are considered printable.", "question_id": 9514, "for": 12492137, "retrieval_score": 19.480345}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 12492137, "retrieval_score": 18.071722}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 3034014, "retrieval_score": 13.542877}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261, "for": 3034014, "retrieval_score": 12.768105}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 3034014, "retrieval_score": 12.680508}
{"snippet": "context.multiply(x, y)", "intent": "Return the product of `x` and `y` .", "question_id": 2554, "for": 3034014, "retrieval_score": 12.604974}
{"snippet": "itertools.product(*iterables)", "intent": "Cartesian product of input iterables . With arguments `*iterables`.", "question_id": 5260, "for": 3034014, "retrieval_score": 12.276578}
{"snippet": "locale.THOUSEP", "intent": "Get the separator character for thousands (groups of three digits).", "question_id": 5364, "for": 1823058, "retrieval_score": 10.462006}
{"snippet": "locale.format_string(format, val, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5386, "for": 1823058, "retrieval_score": 9.336525}
{"snippet": "locale.format_string(format, val, grouping=False, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5387, "for": 1823058, "retrieval_score": 8.142655}
{"snippet": "traceback.print_exception(etype, value, tb, limit=None)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . The optional `limit` argument has the same meaning as for print_tb ( ) . With arguments `etype`, `value`.", "question_id": 10738, "for": 1823058, "retrieval_score": 7.9224677}
{"snippet": "traceback.print_exception(etype, value, tb, limit=None, file=None)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . The optional `limit` argument has the same meaning as for print_tb ( ) . With arguments `etype`, `value`.", "question_id": 10741, "for": 1823058, "retrieval_score": 7.9224677}
{"snippet": "locale.THOUSEP", "intent": "Get the separator character for thousands (groups of three digits).", "question_id": 5364, "for": 1823058, "retrieval_score": 10.462006}
{"snippet": "locale.format_string(format, val, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5386, "for": 1823058, "retrieval_score": 9.336525}
{"snippet": "locale.format_string(format, val, grouping=False, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5387, "for": 1823058, "retrieval_score": 8.142655}
{"snippet": "json.dumps(obj, **kw, separators=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `separators`.", "question_id": 5287, "for": 1823058, "retrieval_score": 7.867149}
{"snippet": "json.JSONEncoder(separators=None)", "intent": "Extensible JSON encoder for Python data structures . If specified , `separators` should be an ( item_separator , key_separator ) tuple .", "question_id": 5329, "for": 1823058, "retrieval_score": 7.697538}
{"snippet": "parse_error.position", "intent": "A tuple of line, column numbers, specifying where the error occurred.", "question_id": 12563, "for": 39988589, "retrieval_score": 12.943416}
{"snippet": "Locator.getColumnNumber()", "intent": "Return the column number where the current event begins .", "question_id": 12630, "for": 39988589, "retrieval_score": 12.402891}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 39988589, "retrieval_score": 11.133909}
{"snippet": "html_diff.__init__(wrapcolumn=None)", "intent": "Initializes instance of HtmlDiff . `wrapcolumn` is an optional keyword to specify column number where lines are broken and wrapped , defaults to None where lines are not wrapped .", "question_id": 2600, "for": 39988589, "retrieval_score": 10.868385}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372, "for": 39988589, "retrieval_score": 10.646975}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670, "for": 4800811, "retrieval_score": 17.385563}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 4800811, "retrieval_score": 16.72418}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 4800811, "retrieval_score": 16.72418}
{"snippet": "operator.getitem(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6575, "for": 4800811, "retrieval_score": 16.72418}
{"snippet": "operator.__getitem__(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6576, "for": 4800811, "retrieval_score": 16.72418}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529, "for": 7286879, "retrieval_score": 17.691626}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530, "for": 7286879, "retrieval_score": 14.8086815}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 7286879, "retrieval_score": 12.317835}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 7286879, "retrieval_score": 12.317835}
{"snippet": "bytearray.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9355, "for": 7286879, "retrieval_score": 12.317835}
{"snippet": "Unpacker.unpack_fstring(n)", "intent": "Unpacks and returns a fixed length string . `n` is the number of characters expected .", "question_id": 12292, "for": 12804801, "retrieval_score": 15.04403}
{"snippet": "readline.set_history_length(length)", "intent": "Set or return the desired number of lines to save in the history file . With arguments `length`.", "question_id": 8028, "for": 12804801, "retrieval_score": 15.015855}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779, "for": 12804801, "retrieval_score": 14.828602}
{"snippet": "Repr.maxlong", "intent": "Maximum number of characters in the representation for an integer.", "question_id": 8063, "for": 12804801, "retrieval_score": 13.9649315}
{"snippet": "Repr.maxstring", "intent": "Limit on the number of characters in the representation of the string.", "question_id": 8064, "for": 12804801, "retrieval_score": 13.627761}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 42442428, "retrieval_score": 21.38089}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 42442428, "retrieval_score": 17.482191}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490, "for": 42442428, "retrieval_score": 17.156599}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 42442428, "retrieval_score": 16.976763}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 42442428, "retrieval_score": 16.976763}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136, "for": 3262437, "retrieval_score": 11.02651}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372, "for": 3262437, "retrieval_score": 10.989369}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038, "for": 3262437, "retrieval_score": 10.408022}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126, "for": 3262437, "retrieval_score": 10.323866}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010, "for": 3262437, "retrieval_score": 9.949351}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927, "for": 13840883, "retrieval_score": 18.16771}
{"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928, "for": 13840883, "retrieval_score": 18.16771}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 13840883, "retrieval_score": 13.273996}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 13840883, "retrieval_score": 13.273996}
{"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241, "for": 13840883, "retrieval_score": 13.273996}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 6667201, "retrieval_score": 21.795052}
{"snippet": "decimal.ROUND_05UP", "intent": "Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero.", "question_id": 2584, "for": 6667201, "retrieval_score": 16.56302}
{"snippet": "stringprep.in_table_c5(code)", "intent": "Determine whether `code` is in tableC.5 ( Surrogate codes ) .", "question_id": 9543, "for": 6667201, "retrieval_score": 16.072605}
{"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157, "for": 6667201, "retrieval_score": 15.321683}
{"snippet": "Record.ClearData()", "intent": "Set all fields of the record to 0 , through MsiRecordClearData ( ) .", "question_id": 6087, "for": 6667201, "retrieval_score": 14.810225}
{"snippet": "os.defpath", "intent": "The default search path used by exec*p* and spawn*p* if the environment doesn\u2019t have a 'PATH' key.", "question_id": 7127, "for": 18253210, "retrieval_score": 28.949953}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688, "for": 18253210, "retrieval_score": 25.173988}
{"snippet": "Pattern.groupindex", "intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "question_id": 7993, "for": 18253210, "retrieval_score": 23.928146}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 18253210, "retrieval_score": 23.702337}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 18253210, "retrieval_score": 22.752539}
{"snippet": "os.sched_get_priority_min(policy)", "intent": "Get the minimum priority value for `policy` .", "question_id": 7105, "for": 11764260, "retrieval_score": 12.723774}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 11764260, "retrieval_score": 12.371075}
{"snippet": "context.Etiny()", "intent": "Returns a value equal to Emin - prec + 1 which is the minimum exponent value for subnormal results .", "question_id": 2515, "for": 11764260, "retrieval_score": 11.733863}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 11764260, "retrieval_score": 10.685651}
{"snippet": "int.bit_length()", "intent": "Return the number of bits necessary to represent an integer in binary , excluding the sign and leading zeros :", "question_id": 9142, "for": 11764260, "retrieval_score": 10.517386}
{"snippet": "set -= other | ...", "intent": "Update the set, removing elements found in others.", "question_id": 9459, "for": 12579061, "retrieval_score": 12.552401}
{"snippet": "config_parser.get(section, option, fallback)", "intent": "Get an `option` value for the named `section` . If the key is not found and `fallback` is provided , it is used as a fallback value .", "question_id": 1520, "for": 12579061, "retrieval_score": 11.857161}
{"snippet": "readline.get_completion_type()", "intent": "Get the type of completion being attempted .", "question_id": 8043, "for": 12579061, "retrieval_score": 11.707206}
{"snippet": "set.difference_update(*others)", "intent": "Update the set , removing elements found in others . With arguments `*others`.", "question_id": 9458, "for": 12579061, "retrieval_score": 11.642444}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 12579061, "retrieval_score": 11.579919}
{"snippet": "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)", "intent": "Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , \u2026 `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .", "question_id": 7759, "for": 12579061, "retrieval_score": 23.261076}
{"snippet": "property(fget=None, fset=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value . `fset` is a function for setting an attribute value .", "question_id": 4090, "for": 12579061, "retrieval_score": 19.83846}
{"snippet": "property(fget=None, fdel=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value . `fdel` is a function for deleting an attribute value .", "question_id": 4091, "for": 12579061, "retrieval_score": 19.83846}
{"snippet": "property(fset=None, fdel=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value . `fdel` is a function for deleting an attribute value .", "question_id": 4093, "for": 12579061, "retrieval_score": 19.83846}
{"snippet": "property(fget=None, doc=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value . And `doc` creates a docstring for the attribute .", "question_id": 4092, "for": 12579061, "retrieval_score": 19.251589}
{"snippet": "sysconfig.parse_config_h(fp)", "intent": "Parse a config.h-style file . `fp` is a file-like object pointing to the config.h-like file .", "question_id": 9874, "for": 1773805, "retrieval_score": 9.531933}
{"snippet": "configparser.ParsingError", "intent": "Exception raised when errors occur attempting to parse a file.", "question_id": 1601, "for": 1773805, "retrieval_score": 9.5269575}
{"snippet": "cgi.parse()", "intent": "Parse a query in the environment or from a file ( the file defaults to sys.stdin ) .", "question_id": 1029, "for": 1773805, "retrieval_score": 9.482338}
{"snippet": "config_parser.read_file(f, source=None)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) . Optional argument `source` specifies the name of the file being read .", "question_id": 1515, "for": 1773805, "retrieval_score": 9.381207}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514, "for": 1773805, "retrieval_score": 9.275273}
{"snippet": "sysconfig.parse_config_h(fp)", "intent": "Parse a config.h-style file . `fp` is a file-like object pointing to the config.h-like file .", "question_id": 9874, "for": 1773805, "retrieval_score": 9.531933}
{"snippet": "configparser.ParsingError", "intent": "Exception raised when errors occur attempting to parse a file.", "question_id": 1601, "for": 1773805, "retrieval_score": 9.5269575}
{"snippet": "cgi.parse()", "intent": "Parse a query in the environment or from a file ( the file defaults to sys.stdin ) .", "question_id": 1029, "for": 1773805, "retrieval_score": 9.482338}
{"snippet": "config_parser.read_file(f, source=None)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) . Optional argument `source` specifies the name of the file being read .", "question_id": 1515, "for": 1773805, "retrieval_score": 9.381207}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514, "for": 1773805, "retrieval_score": 9.275273}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 41572822, "retrieval_score": 17.447632}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 41572822, "retrieval_score": 11.807373}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 41572822, "retrieval_score": 11.807373}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995, "for": 41572822, "retrieval_score": 11.783632}
{"snippet": "asyncio.SelectorEventLoop", "intent": "An event loop based on the selectors module.", "question_id": 342, "for": 41572822, "retrieval_score": 11.597839}
{"snippet": "date.isoformat()", "intent": "Return a string representing the date in ISO 8601 format , \u2018 YYYY-MM-DD \u2019 .", "question_id": 2242, "for": 32490629, "retrieval_score": 36.359234}
{"snippet": "datetime.isoformat()", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS", "question_id": 2306, "for": 32490629, "retrieval_score": 27.642681}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307, "for": 32490629, "retrieval_score": 24.09695}
{"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308, "for": 32490629, "retrieval_score": 22.774595}
{"snippet": "datetime.isoformat(sep='T', timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2309, "for": 32490629, "retrieval_score": 21.18799}
{"snippet": "base64.b64decode(s, altchars=None)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters .", "question_id": 711, "for": 5607551, "retrieval_score": 14.174286}
{"snippet": "base64.b64decode(s, altchars=None, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 713, "for": 5607551, "retrieval_score": 12.725603}
{"snippet": "base64.b64encode(s, altchars=None)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes . Optional `altchars` must be a bytes-like object of at least length 2 ( additional characters are ignored ) which specifies an alternative alphabet for the + and / characters .", "question_id": 709, "for": 5607551, "retrieval_score": 12.528154}
{"snippet": "stringprep.in_table_d2(code)", "intent": "Determine whether `code` is in tableD.2 ( Characters with bidirectional property \u201c L \u201d ) .", "question_id": 9549, "for": 5607551, "retrieval_score": 12.316698}
{"snippet": "stringprep.in_table_c21_c22(code)", "intent": "Determine whether `code` is in tableC.2 ( Control characters , union of C.2.1 and C.2.2 ) .", "question_id": 9540, "for": 5607551, "retrieval_score": 12.271591}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 16868457, "retrieval_score": 14.431761}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 16868457, "retrieval_score": 14.205944}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 16868457, "retrieval_score": 14.068461}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 16868457, "retrieval_score": 13.604129}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 16868457, "retrieval_score": 13.410248}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 8081545, "retrieval_score": 27.46857}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 8081545, "retrieval_score": 17.811144}
{"snippet": "audioop.lin2adpcm(fragment, width, state)", "intent": "Convert samples to 4 bit Intel/DVI ADPCM encoding . adpcmfrag is the ADPCM coded `fragment` packed 2 4-bit values per byte . `state` is a tuple containing the state of the coder . With arguments `width`.", "question_id": 692, "for": 8081545, "retrieval_score": 16.512064}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175, "for": 8081545, "retrieval_score": 16.503983}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 8081545, "retrieval_score": 15.403978}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 8081545, "retrieval_score": 12.61539}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454, "for": 8081545, "retrieval_score": 12.347857}
{"snippet": "test_case.assertTupleEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11456, "for": 8081545, "retrieval_score": 12.347857}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916, "for": 8081545, "retrieval_score": 12.336535}
{"snippet": "charset.output_codec", "intent": "The name of the Python codec used to convert Unicode to the output_charset.", "question_id": 2917, "for": 8081545, "retrieval_score": 12.336535}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 8081545, "retrieval_score": 12.61539}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454, "for": 8081545, "retrieval_score": 12.347857}
{"snippet": "test_case.assertTupleEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11456, "for": 8081545, "retrieval_score": 12.347857}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916, "for": 8081545, "retrieval_score": 12.336535}
{"snippet": "charset.output_codec", "intent": "The name of the Python codec used to convert Unicode to the output_charset.", "question_id": 2917, "for": 8081545, "retrieval_score": 12.336535}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 38251245, "retrieval_score": 21.568775}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219, "for": 38251245, "retrieval_score": 20.698439}
{"snippet": "wsgiref.headers.Headers()", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12220, "for": 38251245, "retrieval_score": 20.698439}
{"snippet": "mock.call_args_list", "intent": "This is a list of all the calls made to the mock object in sequence (so the length of the list is the number of times it has been called).", "question_id": 11593, "for": 38251245, "retrieval_score": 20.325356}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 38251245, "retrieval_score": 19.743313}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773, "for": 29983106, "retrieval_score": 14.125786}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427, "for": 29983106, "retrieval_score": 13.827245}
{"snippet": "urllib.request.urlretrieve(url)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11881, "for": 29983106, "retrieval_score": 12.957073}
{"snippet": "urllib.request.urlretrieve(url, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11884, "for": 29983106, "retrieval_score": 12.957073}
{"snippet": "urllib.request.urlretrieve(url, reporthook=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . With arguments `reporthook`.", "question_id": 11883, "for": 29983106, "retrieval_score": 12.63167}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 34015615, "retrieval_score": 18.074938}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 34015615, "retrieval_score": 18.074938}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 34015615, "retrieval_score": 16.905884}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 34015615, "retrieval_score": 16.11045}
{"snippet": "bytes.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9278, "for": 34015615, "retrieval_score": 14.913622}
{"snippet": "UUID.hex", "intent": "The UUID as a 32-character hexadecimal string.", "question_id": 11950, "for": 3276180, "retrieval_score": 11.690304}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857, "for": 3276180, "retrieval_score": 11.417583}
{"snippet": "doctest.DocTestParser", "intent": "A processing class used to extract interactive examples from a string, and use them to create a DocTest object.", "question_id": 2855, "for": 3276180, "retrieval_score": 11.324761}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948, "for": 3276180, "retrieval_score": 10.785675}
{"snippet": "ZipFile.extractall(path=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12819, "for": 3276180, "retrieval_score": 10.617622}
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311, "for": 3276180, "retrieval_score": 16.93943}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857, "for": 3276180, "retrieval_score": 11.417583}
{"snippet": "doctest.DocTestParser", "intent": "A processing class used to extract interactive examples from a string, and use them to create a DocTest object.", "question_id": 2855, "for": 3276180, "retrieval_score": 11.324761}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948, "for": 3276180, "retrieval_score": 10.785675}
{"snippet": "ZipFile.extractall(path=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12819, "for": 3276180, "retrieval_score": 10.617622}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857, "for": 3276180, "retrieval_score": 11.417583}
{"snippet": "doctest.DocTestParser", "intent": "A processing class used to extract interactive examples from a string, and use them to create a DocTest object.", "question_id": 2855, "for": 3276180, "retrieval_score": 11.324761}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948, "for": 3276180, "retrieval_score": 10.785675}
{"snippet": "ZipFile.extractall(path=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12819, "for": 3276180, "retrieval_score": 10.617622}
{"snippet": "ZipFile.extractall(path=None, members=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12822, "for": 3276180, "retrieval_score": 10.617622}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 16374540, "retrieval_score": 27.46857}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 16374540, "retrieval_score": 18.869745}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 16374540, "retrieval_score": 18.869745}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 16374540, "retrieval_score": 17.660463}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 16374540, "retrieval_score": 17.641201}
{"snippet": "charset.__str__()", "intent": "Returns input_charset as a string coerced to lower case .", "question_id": 2923, "for": 9072844, "retrieval_score": 20.747507}
{"snippet": "curses.ascii.islower(c)", "intent": "Checks for an ASCII lower-case character . With arguments `c`.", "question_id": 1906, "for": 9072844, "retrieval_score": 19.867565}
{"snippet": "PurePath.drive", "intent": "A string representing the drive letter or name, if any:", "question_id": 7244, "for": 9072844, "retrieval_score": 15.268536}
{"snippet": "PurePath.root", "intent": "A string representing the (local or global) root, if any:", "question_id": 7245, "for": 9072844, "retrieval_score": 15.268536}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204, "for": 9072844, "retrieval_score": 15.266106}
{"snippet": "marshal.loads(bytes)", "intent": "Convert the bytes-like object to a value . Extra `bytes` in the input are ignored .", "question_id": 5883, "for": 10373660, "retrieval_score": 9.060719}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 10373660, "retrieval_score": 8.423657}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887, "for": 10373660, "retrieval_score": 8.410566}
{"snippet": "audioop.lin2alaw(fragment, width)", "intent": "Convert samples in the audio `fragment` to a-LAW encoding and return this as a bytes object . With arguments `width`.", "question_id": 693, "for": 10373660, "retrieval_score": 8.406682}
{"snippet": "wsgiref.util.FileWrapper(filelike)", "intent": "A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object \u2019 s read ( ) method to obtain bytestrings to yield .", "question_id": 12217, "for": 10373660, "retrieval_score": 8.259338}
{"snippet": "str.isnumeric()", "intent": "Return true if all characters in the string are numeric characters , and there is at least one character , false otherwise .", "question_id": 9209, "for": 1249388, "retrieval_score": 16.05658}
{"snippet": "csv.QUOTE_NONNUMERIC", "intent": "Instructs writer objects to quote all non-numeric fields.", "question_id": 1720, "for": 1249388, "retrieval_score": 15.412553}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348, "for": 1249388, "retrieval_score": 14.527199}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 1249388, "retrieval_score": 14.347498}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 1249388, "retrieval_score": 14.347498}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 15474933, "retrieval_score": 19.957577}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 15474933, "retrieval_score": 19.62361}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 15474933, "retrieval_score": 17.996704}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 15474933, "retrieval_score": 16.423725}
{"snippet": "Unpacker.unpack_list(unpack_item)", "intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "question_id": 12297, "for": 15474933, "retrieval_score": 16.2107}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846, "for": 40987319, "retrieval_score": 11.678025}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948, "for": 40987319, "retrieval_score": 11.572208}
{"snippet": "turtle.Screen", "intent": "Subclass of TurtleScreen, with four methods added.", "question_id": 11162, "for": 40987319, "retrieval_score": 11.515218}
{"snippet": "ZipFile.extractall(path=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12819, "for": 40987319, "retrieval_score": 11.490765}
{"snippet": "ZipFile.extractall(path=None, members=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12822, "for": 40987319, "retrieval_score": 11.490765}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 12974474, "retrieval_score": 22.275078}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 12974474, "retrieval_score": 21.768085}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 12974474, "retrieval_score": 19.957886}
{"snippet": "Request.header_items()", "intent": "Return a list of tuples ( header_name , header_value ) of the Request headers .", "question_id": 11833, "for": 12974474, "retrieval_score": 18.66296}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 12974474, "retrieval_score": 18.3085}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 7271385, "retrieval_score": 22.374426}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 7271385, "retrieval_score": 21.340698}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 7271385, "retrieval_score": 18.869745}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 7271385, "retrieval_score": 18.869745}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 7271385, "retrieval_score": 14.660501}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 7271385, "retrieval_score": 22.374426}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 7271385, "retrieval_score": 21.340698}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 7271385, "retrieval_score": 18.869745}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 7271385, "retrieval_score": 18.869745}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 7271385, "retrieval_score": 14.660501}
{"snippet": "base_http_request_handler.path", "intent": "Contains the request path.", "question_id": 4622, "for": 15974730, "retrieval_score": 11.594509}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059, "for": 15974730, "retrieval_score": 10.907136}
{"snippet": "simple_http_request_handler.do_GET()", "intent": "The request is mapped to a local file by interpreting the request as a path relative to the current working directory .", "question_id": 4665, "for": 15974730, "retrieval_score": 10.427497}
{"snippet": "DefaultCookiePolicy.strict_ns_set_path", "intent": "Don\u2019t allow setting cookies whose path doesn\u2019t path-match request URI.", "question_id": 4551, "for": 15974730, "retrieval_score": 10.356577}
{"snippet": "pkgutil.get_importer(path_item)", "intent": "Retrieve a finder for the given `path_item` .", "question_id": 7441, "for": 15974730, "retrieval_score": 9.952066}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 11755208, "retrieval_score": 14.753524}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204, "for": 11755208, "retrieval_score": 14.731836}
{"snippet": "str.isprintable()", "intent": "Return true if all characters in the string are printable or the string is empty , false otherwise .", "question_id": 9210, "for": 11755208, "retrieval_score": 14.731836}
{"snippet": "Packer.reset()", "intent": "Resets the pack buffer to the empty string .", "question_id": 12274, "for": 11755208, "retrieval_score": 12.062452}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723, "for": 11755208, "retrieval_score": 11.598071}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 715550, "retrieval_score": 34.782955}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 715550, "retrieval_score": 34.485104}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 715550, "retrieval_score": 33.53728}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 715550, "retrieval_score": 33.262825}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 715550, "retrieval_score": 32.417465}
{"snippet": "datetime.min", "intent": "The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None).", "question_id": 2269, "for": 466345, "retrieval_score": 22.95137}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 466345, "retrieval_score": 21.540773}
{"snippet": "datetime.fromordinal(ordinal)", "intent": "Return the datetime corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2264, "for": 466345, "retrieval_score": 19.84989}
{"snippet": "tarfile.USTAR_FORMAT", "intent": "POSIX.1-1988 (ustar) format.", "question_id": 9909, "for": 466345, "retrieval_score": 17.583391}
{"snippet": "tarfile.PAX_FORMAT", "intent": "POSIX.1-2001 (pax) format.", "question_id": 9911, "for": 466345, "retrieval_score": 17.583391}
{"snippet": "datetime.max", "intent": "The latest representable datetime, datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None).", "question_id": 2270, "for": 466345, "retrieval_score": 17.246002}
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311, "for": 466345, "retrieval_score": 14.226294}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145, "for": 466345, "retrieval_score": 11.2021885}
{"snippet": "date.month", "intent": "Between 1 and 12 inclusive.", "question_id": 2227, "for": 466345, "retrieval_score": 10.650978}
{"snippet": "datetime.month", "intent": "Between 1 and 12 inclusive.", "question_id": 2273, "for": 466345, "retrieval_score": 10.650978}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343, "for": 17057544, "retrieval_score": 13.406191}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761, "for": 17057544, "retrieval_score": 12.406097}
{"snippet": "mh.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5782, "for": 17057544, "retrieval_score": 12.406097}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770, "for": 17057544, "retrieval_score": 12.174218}
{"snippet": "test.support.findfile(filename)", "intent": "Return the path to the file named `filename` .", "question_id": 10151, "for": 17057544, "retrieval_score": 11.82245}
{"snippet": "ZipFile.extractall(path=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12819, "for": 17057544, "retrieval_score": 16.60527}
{"snippet": "ZipFile.extractall(path=None, members=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12822, "for": 17057544, "retrieval_score": 16.60527}
{"snippet": "TarFile.extractall()", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9932, "for": 17057544, "retrieval_score": 16.273071}
{"snippet": "TarFile.extractall(path=\".\")", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9933, "for": 17057544, "retrieval_score": 16.273071}
{"snippet": "TarFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9934, "for": 17057544, "retrieval_score": 16.273071}
{"snippet": "urllib.request.urlretrieve(url, reporthook=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . With arguments `reporthook`.", "question_id": 11883, "for": 9733638, "retrieval_score": 26.850325}
{"snippet": "urllib.request.urlretrieve(url, reporthook=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . With arguments `reporthook`.", "question_id": 11887, "for": 9733638, "retrieval_score": 26.850325}
{"snippet": "urllib.request.urlretrieve(url)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11881, "for": 9733638, "retrieval_score": 26.706102}
{"snippet": "urllib.request.urlretrieve(url, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11884, "for": 9733638, "retrieval_score": 26.706102}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773, "for": 9733638, "retrieval_score": 26.584064}
{"snippet": "dict.pop(key, default)", "intent": "If `key` is in the dictionary , remove it and return its value , else return `default` .", "question_id": 9486, "for": 42260840, "retrieval_score": 26.653286}
{"snippet": "dict.pop(key)", "intent": "If `key` is in the dictionary , remove it and return its value , else return `default` .", "question_id": 9487, "for": 42260840, "retrieval_score": 26.653286}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490, "for": 42260840, "retrieval_score": 24.316528}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 42260840, "retrieval_score": 23.77036}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 42260840, "retrieval_score": 23.517866}
{"snippet": "HTTPConnection.getresponse()", "intent": "Should be called after a request is sent to get the response from the server .", "question_id": 4435, "for": 9647586, "retrieval_score": 10.964567}
{"snippet": "simple_http_request_handler.do_HEAD()", "intent": "This method serves the 'HEAD ' request type : it sends the headers it would send for the equivalent GET request .", "question_id": 4664, "for": 9647586, "retrieval_score": 10.289396}
{"snippet": "urllib.request.urlretrieve(url)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11881, "for": 9647586, "retrieval_score": 9.802786}
{"snippet": "urllib.request.urlretrieve(url, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11884, "for": 9647586, "retrieval_score": 9.802786}
{"snippet": "urllib.request.urlopen(url, cadefault=False)", "intent": "Open the URL `url` , which can be either a string or a Request object . The `cadefault` parameter is ignored .", "question_id": 11756, "for": 9647586, "retrieval_score": 9.698289}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971, "for": 18265935, "retrieval_score": 14.342135}
{"snippet": "email_message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 3248, "for": 18265935, "retrieval_score": 14.342135}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 18265935, "retrieval_score": 14.032928}
{"snippet": "email.utils.getaddresses(fieldvalues)", "intent": "This method returns a list of 2-tuples of the form returned by parseaddr ( ) . `fieldvalues` is a sequence of header field values as might be returned by Message.get_all .", "question_id": 3463, "for": 18265935, "retrieval_score": 11.934207}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508, "for": 18265935, "retrieval_score": 10.9375}
{"snippet": "json.JSONEncoder(skipkeys=False)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None .", "question_id": 5323, "for": 40707158, "retrieval_score": 21.82256}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636, "for": 40707158, "retrieval_score": 19.641987}
{"snippet": "types.MethodDescriptorType", "intent": "The type of methods of some built-in data types such as str.join().", "question_id": 11194, "for": 40707158, "retrieval_score": 18.487526}
{"snippet": "Compress.compress(data)", "intent": "Compress `data` , returning a bytes object containing compressed data for at least part of the data in data .", "question_id": 12927, "for": 40707158, "retrieval_score": 18.379389}
{"snippet": "types.MethodWrapperType", "intent": "The type of bound methods of some built-in data types and base classes.", "question_id": 11193, "for": 40707158, "retrieval_score": 18.092955}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 4800419, "retrieval_score": 18.438868}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 4800419, "retrieval_score": 18.116335}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489, "for": 4800419, "retrieval_score": 17.440708}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 4800419, "retrieval_score": 17.383638}
{"snippet": "mailcap.findmatch(caps, plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5872, "for": 4800419, "retrieval_score": 17.107065}
{"snippet": "str.strip()", "intent": "Return a copy of the string with the leading and trailing characters removed .", "question_id": 9251, "for": 13142347, "retrieval_score": 16.910007}
{"snippet": "int.bit_length()", "intent": "Return the number of bits necessary to represent an integer in binary , excluding the sign and leading zeros :", "question_id": 9142, "for": 13142347, "retrieval_score": 15.971549}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 13142347, "retrieval_score": 15.511851}
{"snippet": "float.fromhex(s)", "intent": "Class method to return the float represented by a hexadecimal string s. The string `s` may have leading and trailing whitespace .", "question_id": 9150, "for": 13142347, "retrieval_score": 15.134961}
{"snippet": "bytes.strip()", "intent": "Return a copy of the sequence with specified leading and trailing bytes removed .", "question_id": 9372, "for": 13142347, "retrieval_score": 14.162393}
{"snippet": "inspect.getmembers(object)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name .", "question_id": 4946, "for": 14169122, "retrieval_score": 17.347723}
{"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617, "for": 14169122, "retrieval_score": 14.752117}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 14169122, "retrieval_score": 14.648654}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 14169122, "retrieval_score": 14.133797}
{"snippet": "POP3.uidl(which=None)", "intent": "Return message digest ( unique id ) list . If `which` is specified , result contains the unique id for that message in the form 'response mesgnum uid , otherwise result is list ( response , [ 'mesgnum uid ' , ... ] , octets ) .", "question_id": 7618, "for": 14169122, "retrieval_score": 13.766191}
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445, "for": 587345, "retrieval_score": 39.423195}
{"snippet": "random.uniform(a, b)", "intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "question_id": 7907, "for": 587345, "retrieval_score": 31.891157}
{"snippet": "sequence_matcher.get_grouped_opcodes()", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2685, "for": 587345, "retrieval_score": 30.014788}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 587345, "retrieval_score": 30.014788}
{"snippet": "random.randint(a, b)", "intent": "Return `a` random integer N such that a < = N < = b. Alias for randrange ( a , b+1 ) . With arguments `b`.", "question_id": 7893, "for": 587345, "retrieval_score": 29.262432}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922, "for": 587345, "retrieval_score": 19.471111}
{"snippet": "re.compile(pattern, flags=0)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below . The expression \u2019 s behaviour can be modified by specifying a `flags` value .", "question_id": 7923, "for": 587345, "retrieval_score": 17.945103}
{"snippet": "turtle.tracer(n=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11059, "for": 587345, "retrieval_score": 16.795633}
{"snippet": "turtle.tracer(n=None, delay=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11061, "for": 587345, "retrieval_score": 16.795633}
{"snippet": "random.uniform(a, b)", "intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "question_id": 7907, "for": 587345, "retrieval_score": 15.56353}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303, "for": 33218968, "retrieval_score": 25.468628}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`.", "question_id": 10304, "for": 33218968, "retrieval_score": 24.912043}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stderr`.", "question_id": 10305, "for": 33218968, "retrieval_score": 24.912043}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306, "for": 33218968, "retrieval_score": 24.379658}
{"snippet": "sysconfig.is_python_build()", "intent": "Return True if the running Python interpreter was built from source and is being run from its built location , and not from a location resulting from e.g .", "question_id": 9872, "for": 33218968, "retrieval_score": 18.645838}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855, "for": 1683775, "retrieval_score": 13.20326}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 1683775, "retrieval_score": 12.925052}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 1683775, "retrieval_score": 12.925052}
{"snippet": "xmlrpc.client.ServerProxy(uri, transport=None, encoding=None)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . The optional second argument is a `transport` factory instance ; by default it is an internal SafeTransport instance for https : URLs and an internal HTTP Transport instance otherwise . The optional third argument is an `encoding` , by default UTF-8 . With arguments `uri`.", "question_id": 12677, "for": 1683775, "retrieval_score": 9.825088}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 1683775, "retrieval_score": 9.183248}
{"snippet": "collections.namedtuple(typename, field_names, module=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `module` is defined , the __module__ attribute of the named tuple is set to that value .", "question_id": 1379, "for": 3523048, "retrieval_score": 14.247799}
{"snippet": "collections.namedtuple(typename, field_names, rename=False, module=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names . If `module` is defined , the __module__ attribute of the named tuple is set to that value .", "question_id": 1381, "for": 3523048, "retrieval_score": 13.510725}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486, "for": 3523048, "retrieval_score": 13.440203}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7487, "for": 3523048, "retrieval_score": 13.440203}
{"snippet": "platform.java_ver('', ''), '', ''), vminfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7488, "for": 3523048, "retrieval_score": 13.440203}
{"snippet": "collections.namedtuple(typename, field_names, module=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `module` is defined , the __module__ attribute of the named tuple is set to that value .", "question_id": 1379, "for": 3523048, "retrieval_score": 14.247799}
{"snippet": "collections.namedtuple(typename, field_names, rename=False, module=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names . If `module` is defined , the __module__ attribute of the named tuple is set to that value .", "question_id": 1381, "for": 3523048, "retrieval_score": 13.510725}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486, "for": 3523048, "retrieval_score": 13.440203}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7487, "for": 3523048, "retrieval_score": 13.440203}
{"snippet": "platform.java_ver('', ''), '', ''), vminfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7488, "for": 3523048, "retrieval_score": 13.440203}
{"snippet": "test.support.temp_cwd(name='tempcwd')", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory .", "question_id": 10183, "for": 5137497, "retrieval_score": 10.622433}
{"snippet": "cgi.print_directory()", "intent": "Format the current directory in HTML .", "question_id": 1055, "for": 5137497, "retrieval_score": 10.116064}
{"snippet": "simple_http_request_handler.directory", "intent": "If not specified, the directory to serve is the current working directory.", "question_id": 4663, "for": 5137497, "retrieval_score": 10.077118}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832, "for": 5137497, "retrieval_score": 9.845462}
{"snippet": "os.fchdir(fd)", "intent": "Change the current working directory to the directory represented by the file descriptor `fd` .", "question_id": 6844, "for": 5137497, "retrieval_score": 9.773622}
{"snippet": "test.support.temp_cwd(name='tempcwd')", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory .", "question_id": 10183, "for": 5137497, "retrieval_score": 10.622433}
{"snippet": "cgi.print_directory()", "intent": "Format the current directory in HTML .", "question_id": 1055, "for": 5137497, "retrieval_score": 10.116064}
{"snippet": "simple_http_request_handler.directory", "intent": "If not specified, the directory to serve is the current working directory.", "question_id": 4663, "for": 5137497, "retrieval_score": 10.077118}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832, "for": 5137497, "retrieval_score": 9.845462}
{"snippet": "os.fchdir(fd)", "intent": "Change the current working directory to the directory represented by the file descriptor `fd` .", "question_id": 6844, "for": 5137497, "retrieval_score": 9.773622}
{"snippet": "os.path.dirname(path)", "intent": "Return the directory name of pathname `path` .", "question_id": 7146, "for": 5137497, "retrieval_score": 14.668756}
{"snippet": "Path.iterdir()", "intent": "When the path points to a directory , yield path objects of the directory contents :", "question_id": 7281, "for": 5137497, "retrieval_score": 11.952917}
{"snippet": "msilib.Directory(database, cab, basedir, physical, logical, default, componentflags)", "intent": "Create a new directory in the Directory table . Files are added into the current component , and into the `cab` file . To create a directory , a base directory object needs to be specified ( can be None ) , the path to the `physical` directory , and a `logical` directory name . `default` specifies the DefaultDir slot in the directory table . `componentflags` specifies the default flags that new components get . With arguments `database`, `basedir`.", "question_id": 6091, "for": 5137497, "retrieval_score": 11.184377}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941, "for": 5137497, "retrieval_score": 10.884375}
{"snippet": "MON_1 ... MON_12", "intent": "Get the name of the n-th month.", "question_id": 5361, "for": 5137497, "retrieval_score": 10.71484}
{"snippet": "os.path.realpath(path)", "intent": "Return the canonical `path` of the specified filename , eliminating any symbolic links encountered in the path ( if they are supported by the operating system ) .", "question_id": 7163, "for": 5137497, "retrieval_score": 15.995577}
{"snippet": "os.stat(path)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` .", "question_id": 6917, "for": 5137497, "retrieval_score": 14.934316}
{"snippet": "os.stat(path, dir_fd=None)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` . With arguments `dir_fd`.", "question_id": 6918, "for": 5137497, "retrieval_score": 14.203444}
{"snippet": "os.stat(path, follow_symlinks=True)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` . With arguments `follow_symlinks`.", "question_id": 6919, "for": 5137497, "retrieval_score": 14.203444}
{"snippet": "os.stat(path, dir_fd=None, follow_symlinks=True)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` . With arguments `dir_fd`, `follow_symlinks`.", "question_id": 6920, "for": 5137497, "retrieval_score": 13.975865}
{"snippet": "test.support.temp_cwd(name='tempcwd')", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory .", "question_id": 10183, "for": 5137497, "retrieval_score": 13.0751915}
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763, "for": 5137497, "retrieval_score": 11.686179}
{"snippet": "test.support.temp_cwd(name='tempcwd', quiet=False)", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory . If `quiet` is False and it is not possible to create or change the CWD , an error is raised .", "question_id": 10185, "for": 5137497, "retrieval_score": 11.337621}
{"snippet": "test_loader.discover(start_dir)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory .", "question_id": 11499, "for": 5137497, "retrieval_score": 11.049982}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940, "for": 5137497, "retrieval_score": 10.674403}
{"snippet": "test.support.temp_cwd(name='tempcwd')", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory .", "question_id": 10183, "for": 5137497, "retrieval_score": 10.160424}
{"snippet": "cgi.print_directory()", "intent": "Format the current directory in HTML .", "question_id": 1055, "for": 5137497, "retrieval_score": 9.679562}
{"snippet": "simple_http_request_handler.directory", "intent": "If not specified, the directory to serve is the current working directory.", "question_id": 4663, "for": 5137497, "retrieval_score": 9.594071}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832, "for": 5137497, "retrieval_score": 9.420636}
{"snippet": "os.fchdir(fd)", "intent": "Change the current working directory to the directory represented by the file descriptor `fd` .", "question_id": 6844, "for": 5137497, "retrieval_score": 9.250788}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941, "for": 5137497, "retrieval_score": 16.661148}
{"snippet": "ZipFile.extract(member, path=None)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object . `path` specifies a different directory to extract to .", "question_id": 12815, "for": 5137497, "retrieval_score": 15.129583}
{"snippet": "os.chroot(path)", "intent": "Change the root directory of the current process to `path` .", "question_id": 6843, "for": 5137497, "retrieval_score": 14.465754}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940, "for": 5137497, "retrieval_score": 14.321411}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832, "for": 5137497, "retrieval_score": 14.251356}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 10078470, "retrieval_score": 16.475138}
{"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145, "for": 10078470, "retrieval_score": 13.046227}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136, "for": 10078470, "retrieval_score": 12.777146}
{"snippet": "typing.TYPE_CHECKING", "intent": "A special constant that is assumed to be True by 3rd party static type checkers.", "question_id": 11339, "for": 10078470, "retrieval_score": 12.5985985}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 10078470, "retrieval_score": 11.600429}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736, "for": 10078470, "retrieval_score": 17.02546}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009, "for": 10078470, "retrieval_score": 13.8069515}
{"snippet": "turtle.shapetransform(t12=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11010, "for": 10078470, "retrieval_score": 13.8069515}
{"snippet": "turtle.shapetransform(t21=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11011, "for": 10078470, "retrieval_score": 13.8069515}
{"snippet": "turtle.shapetransform(t11=None, t12=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11013, "for": 10078470, "retrieval_score": 13.8069515}
{"snippet": "curses.ascii.isgraph(c)", "intent": "Checks for ASCII any printable character except space . With arguments `c`.", "question_id": 1905, "for": 373459, "retrieval_score": 17.567757}
{"snippet": "curses.ascii.isprint(c)", "intent": "Checks for any ASCII printable character including space . With arguments `c`.", "question_id": 1907, "for": 373459, "retrieval_score": 17.567757}
{"snippet": "curses.ascii.ispunct(c)", "intent": "Checks for any printable ASCII character which is not a space or an alphanumeric character . With arguments `c`.", "question_id": 1908, "for": 373459, "retrieval_score": 17.179003}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902, "for": 373459, "retrieval_score": 16.757875}
{"snippet": "curses.ascii.unctrl(c)", "intent": "Return a string representation of the ASCII character c. If `c` is printable , this string is the character itself .", "question_id": 1917, "for": 373459, "retrieval_score": 15.972745}
{"snippet": "shutil.copyfileobj(fsrc, fdst)", "intent": "Copy the contents of the file-like object `fsrc` to the file-like object `fdst` .", "question_id": 8310, "for": 36875258, "retrieval_score": 17.008764}
{"snippet": "pyc_invalidation_mode.UNCHECKED_HASH", "intent": "Like CHECKED_HASH, the .pyc file includes a hash of the source file content.", "question_id": 7834, "for": 36875258, "retrieval_score": 16.469898}
{"snippet": "shutil.copyfile(src, dst)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst .", "question_id": 8311, "for": 36875258, "retrieval_score": 16.103357}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6794, "for": 36875258, "retrieval_score": 15.726541}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6799, "for": 36875258, "retrieval_score": 15.726541}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962, "for": 18319101, "retrieval_score": 17.421276}
{"snippet": "string.printable", "intent": "String of ASCII characters which are considered printable.", "question_id": 9514, "for": 18319101, "retrieval_score": 15.2698145}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513, "for": 18319101, "retrieval_score": 14.963796}
{"snippet": "base64.b64decode(s, altchars=None)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters .", "question_id": 711, "for": 18319101, "retrieval_score": 14.706928}
{"snippet": "Unpacker.unpack_fstring(n)", "intent": "Unpacks and returns a fixed length string . `n` is the number of characters expected .", "question_id": 12292, "for": 18319101, "retrieval_score": 13.469113}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 39646401, "retrieval_score": 12.77306}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 39646401, "retrieval_score": 12.249799}
{"snippet": "coverage_results.update(other)", "intent": "Merge in data from another CoverageResults object . With arguments `other`.", "question_id": 10724, "for": 39646401, "retrieval_score": 11.81504}
{"snippet": "element.keys()", "intent": "Returns the elements attribute names as a list .", "question_id": 12487, "for": 39646401, "retrieval_score": 11.62729}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895, "for": 39646401, "retrieval_score": 10.2872305}
{"snippet": "base_handler.log_exception(exc_info)", "intent": "Log the `exc_info` tuple in the server log .", "question_id": 12260, "for": 19758364, "retrieval_score": 11.634414}
{"snippet": "mh.pack()", "intent": "Rename messages in the mailbox as necessary to eliminate gaps in numbering .", "question_id": 5785, "for": 19758364, "retrieval_score": 11.496684}
{"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725, "for": 19758364, "retrieval_score": 10.633172}
{"snippet": "FTP.login()", "intent": "Log in as the given `user` .", "question_id": 3915, "for": 19758364, "retrieval_score": 10.292395}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916, "for": 19758364, "retrieval_score": 10.292395}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 14694482, "retrieval_score": 12.948797}
{"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346, "for": 14694482, "retrieval_score": 12.948797}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 14694482, "retrieval_score": 11.389696}
{"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796, "for": 14694482, "retrieval_score": 11.151798}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531, "for": 14694482, "retrieval_score": 10.724285}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 18142090, "retrieval_score": 21.674564}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271, "for": 18142090, "retrieval_score": 20.171879}
{"snippet": "msilib.FCICreate(cabname, files)", "intent": "Create a new CAB file named `cabname` . `files` must be a list of tuples , each containing the name of the file on disk , and the name of the file inside the CAB file .", "question_id": 6058, "for": 18142090, "retrieval_score": 20.088133}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 18142090, "retrieval_score": 19.851862}
{"snippet": "pwd.getpwall()", "intent": "Return a list of all available password database entries , in arbitrary order .", "question_id": 7705, "for": 18142090, "retrieval_score": 19.69594}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 31888871, "retrieval_score": 18.176506}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 31888871, "retrieval_score": 18.176506}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 31888871, "retrieval_score": 18.176506}
{"snippet": "email_message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3260, "for": 31888871, "retrieval_score": 17.055065}
{"snippet": "email_message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3261, "for": 31888871, "retrieval_score": 17.055065}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529, "for": 19894478, "retrieval_score": 32.260693}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530, "for": 19894478, "retrieval_score": 28.077192}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 19894478, "retrieval_score": 25.786716}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 19894478, "retrieval_score": 25.786716}
{"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241, "for": 19894478, "retrieval_score": 25.786716}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454, "for": 3329386, "retrieval_score": 14.514597}
{"snippet": "test_case.assertTupleEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11456, "for": 3329386, "retrieval_score": 14.514597}
{"snippet": "test_case.assertListEqual(first, second, msg=None)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`, `msg`.", "question_id": 11455, "for": 3329386, "retrieval_score": 14.180031}
{"snippet": "test_case.assertTupleEqual(first, second, msg=None)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`, `msg`.", "question_id": 11457, "for": 3329386, "retrieval_score": 14.180031}
{"snippet": "test_case.assertIn(first, second)", "intent": "Test that `first` is ( or is not ) in `second` .", "question_id": 11391, "for": 3329386, "retrieval_score": 13.80914}
{"snippet": "counter.elements()", "intent": "Return an iterator over elements repeating each as many times as its count .", "question_id": 1342, "for": 9505526, "retrieval_score": 16.201653}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 9505526, "retrieval_score": 14.226059}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 9505526, "retrieval_score": 13.33489}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 9505526, "retrieval_score": 13.33489}
{"snippet": "bytearray.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9355, "for": 9505526, "retrieval_score": 13.33489}
{"snippet": "msilib.UuidCreate()", "intent": "Return the string representation of a new unique identifier .", "question_id": 6059, "for": 29360607, "retrieval_score": 16.213615}
{"snippet": "doctest.register_optionflag(name)", "intent": "Create a new option flag with a given `name` , and return the new flag \u2019 s integer value .", "question_id": 2765, "for": 29360607, "retrieval_score": 11.906659}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 29360607, "retrieval_score": 11.503498}
{"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346, "for": 29360607, "retrieval_score": 11.503498}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 29360607, "retrieval_score": 11.118753}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463, "for": 29360607, "retrieval_score": 13.838232}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 29360607, "retrieval_score": 13.838232}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688, "for": 29360607, "retrieval_score": 13.117316}
{"snippet": "set.pop()", "intent": "Remove and return an arbitrary element from the set .", "question_id": 9465, "for": 29360607, "retrieval_score": 12.784119}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 29360607, "retrieval_score": 12.7115}
{"snippet": "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name)", "intent": "Create zip file at `zip_dir` and `zip_basename` with extension zip which contains the files in `script_name` .", "question_id": 10310, "for": 6510477, "retrieval_score": 15.839356}
{"snippet": "maildir.list_folders()", "intent": "Return a list of the names of all folders .", "question_id": 5758, "for": 6510477, "retrieval_score": 15.226124}
{"snippet": "mh.list_folders()", "intent": "Return a list of the names of all folders .", "question_id": 5779, "for": 6510477, "retrieval_score": 15.226124}
{"snippet": "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name, name_in_zip=None)", "intent": "Create zip file at `zip_dir` and `zip_basename` with extension zip which contains the files in `script_name` . `name_in_zip` is the archive name .", "question_id": 10311, "for": 6510477, "retrieval_score": 14.548692}
{"snippet": "ZipFile.filename", "intent": "Name of the ZIP file.", "question_id": 12843, "for": 6510477, "retrieval_score": 14.266798}
{"snippet": "readline.set_completer_delims(string)", "intent": "Set or get the word delimiters for completion . With arguments `string`.", "question_id": 8046, "for": 11300383, "retrieval_score": 14.4464245}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638, "for": 11300383, "retrieval_score": 14.430155}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952, "for": 11300383, "retrieval_score": 14.25474}
{"snippet": "re.sub(pattern, repl, string, count=0, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "question_id": 7954, "for": 11300383, "retrieval_score": 13.94736}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640, "for": 11300383, "retrieval_score": 13.828392}
{"snippet": "urllib.parse.urlencode(query, doseq=False, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11741, "for": 27436748, "retrieval_score": 16.408323}
{"snippet": "secrets.compare_digest(a, b)", "intent": "Return True if strings `a` and `b` are equal , otherwise False , in such a way as to reduce the risk of timing attacks .", "question_id": 8147, "for": 27436748, "retrieval_score": 15.858917}
{"snippet": "urllib.parse.urlencode(query, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11737, "for": 27436748, "retrieval_score": 15.799216}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653, "for": 27436748, "retrieval_score": 15.636404}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 27436748, "retrieval_score": 15.359329}
{"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022, "for": 14332141, "retrieval_score": 18.798424}
{"snippet": "mmap.tell()", "intent": "Returns the current position of the file pointer .", "question_id": 6020, "for": 14332141, "retrieval_score": 18.306368}
{"snippet": "window.move(new_y, new_x)", "intent": "Move cursor to ( `new_y` , `new_x` ) .", "question_id": 2093, "for": 14332141, "retrieval_score": 17.345402}
{"snippet": "AU_read.rewind()", "intent": "Rewind the file pointer to the beginning of the audio stream .", "question_id": 9716, "for": 14332141, "retrieval_score": 17.170038}
{"snippet": "Wave_read.rewind()", "intent": "Rewind the file pointer to the beginning of the audio stream .", "question_id": 12059, "for": 14332141, "retrieval_score": 17.170038}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 15852295, "retrieval_score": 25.53995}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271, "for": 15852295, "retrieval_score": 24.823584}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154, "for": 15852295, "retrieval_score": 24.552544}
{"snippet": "pwd.getpwall()", "intent": "Return a list of all available password database entries , in arbitrary order .", "question_id": 7705, "for": 15852295, "retrieval_score": 24.237894}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 15852295, "retrieval_score": 24.234232}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 15852295, "retrieval_score": 24.711287}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 15852295, "retrieval_score": 23.956747}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508, "for": 15852295, "retrieval_score": 23.672903}
{"snippet": "test_result.failures", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11509, "for": 15852295, "retrieval_score": 23.672903}
{"snippet": "test_result.expectedFailures", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11511, "for": 15852295, "retrieval_score": 23.672903}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 21129020, "retrieval_score": 21.778683}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 21129020, "retrieval_score": 21.778683}
{"snippet": "tarfile.ENCODING", "intent": "The default character encoding: 'utf-8' on Windows, the value returned by sys.getfilesystemencoding() otherwise.", "question_id": 9908, "for": 21129020, "retrieval_score": 21.398956}
{"snippet": "bytes.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9278, "for": 21129020, "retrieval_score": 20.722984}
{"snippet": "bytearray.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9282, "for": 21129020, "retrieval_score": 20.722984}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 7999935, "retrieval_score": 36.513004}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 7999935, "retrieval_score": 20.216496}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 7999935, "retrieval_score": 18.853008}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 7999935, "retrieval_score": 18.853008}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 7999935, "retrieval_score": 18.400639}
{"snippet": "ssl.enum_certificates(store_name)", "intent": "Retrieve certificates from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8899, "for": 36661837, "retrieval_score": 18.63382}
{"snippet": "ssl.enum_crls(store_name)", "intent": "Retrieve CRLs from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8900, "for": 36661837, "retrieval_score": 18.63382}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716, "for": 36661837, "retrieval_score": 11.301575}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059, "for": 36661837, "retrieval_score": 10.424089}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 36661837, "retrieval_score": 10.327494}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h')", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5471, "for": 11073609, "retrieval_score": 13.500587}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5472, "for": 11073609, "retrieval_score": 13.500587}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478, "for": 11073609, "retrieval_score": 13.500587}
{"snippet": "asyncio.SelectorEventLoop", "intent": "An event loop based on the selectors module.", "question_id": 342, "for": 11073609, "retrieval_score": 9.942808}
{"snippet": "datetime.time(minute=0)", "intent": "All arguments are optional . With arguments `minute`.", "question_id": 2316, "for": 11073609, "retrieval_score": 9.928173}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 5404665, "retrieval_score": 24.431139}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 5404665, "retrieval_score": 21.32742}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 5404665, "retrieval_score": 21.171314}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 5404665, "retrieval_score": 21.171314}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 5404665, "retrieval_score": 20.8541}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 14991195, "retrieval_score": 14.347498}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 14991195, "retrieval_score": 14.347498}
{"snippet": "inspect.formatargvalues(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "intent": "Format a pretty argument spec from the four values returned by getargvalues ( ) . With arguments `args`, `varargs`, `varkw`, `locals`, `formatarg`, `formatvarargs`, `formatvarkw`.", "question_id": 5017, "for": 14991195, "retrieval_score": 13.215644}
{"snippet": "inspect.formatargvalues(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw, formatvalue)", "intent": "Format a pretty argument spec from the four values returned by getargvalues ( ) . With arguments `args`, `varargs`, `varkw`, `locals`, `formatarg`, `formatvarargs`, `formatvarkw`, `formatvalue`.", "question_id": 5016, "for": 14991195, "retrieval_score": 12.963358}
{"snippet": "deque.clear()", "intent": "Remove all elements from the deque leaving it with length 0 .", "question_id": 1355, "for": 14991195, "retrieval_score": 12.6140175}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028, "for": 8785554, "retrieval_score": 20.030994}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895, "for": 8785554, "retrieval_score": 18.431932}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898, "for": 8785554, "retrieval_score": 18.431932}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032, "for": 8785554, "retrieval_score": 18.271791}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 8785554, "retrieval_score": 17.619656}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895, "for": 8785554, "retrieval_score": 22.747387}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898, "for": 8785554, "retrieval_score": 22.747387}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 8785554, "retrieval_score": 21.971828}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 8785554, "retrieval_score": 21.744934}
{"snippet": "readline.insert_text(string)", "intent": "Insert text into the line buffer at the cursor position . With arguments `string`.", "question_id": 8019, "for": 8785554, "retrieval_score": 19.439548}
{"snippet": "audioop.rms(fragment, width)", "intent": "Return the root-mean-square of the `fragment` , i.e . With arguments `width`.", "question_id": 704, "for": 39719140, "retrieval_score": 11.616179}
{"snippet": "statistics.harmonic_mean(data)", "intent": "Return the harmonic mean of `data` , a sequence or iterator of real-valued numbers .", "question_id": 9126, "for": 39719140, "retrieval_score": 11.545044}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367, "for": 39719140, "retrieval_score": 11.526544}
{"snippet": "statistics.median(data)", "intent": "Return the median ( middle value ) of numeric `data` , using the common \u201c mean of middle two \u201d method .", "question_id": 9127, "for": 39719140, "retrieval_score": 11.3133745}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105, "for": 39719140, "retrieval_score": 11.082903}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 16176996, "retrieval_score": 19.284185}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 16176996, "retrieval_score": 19.284185}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939, "for": 16176996, "retrieval_score": 19.284185}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 16176996, "retrieval_score": 19.284185}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 16176996, "retrieval_score": 19.284185}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 9053260, "retrieval_score": 18.993534}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 9053260, "retrieval_score": 18.993534}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843, "for": 9053260, "retrieval_score": 17.112219}
{"snippet": "Element.removeAttributeNode(oldAttr)", "intent": "Remove and return `oldAttr` from the attribute list , if present .", "question_id": 12364, "for": 9053260, "retrieval_score": 17.112219}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 9053260, "retrieval_score": 16.714914}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 35015693, "retrieval_score": 15.931257}
{"snippet": "urllib.parse.urlunsplit(parts)", "intent": "Combine the elements of a tuple as returned by urlsplit ( ) into a complete URL as a string . The `parts` argument can be any five-item iterable .", "question_id": 11694, "for": 35015693, "retrieval_score": 14.362643}
{"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326, "for": 35015693, "retrieval_score": 13.721389}
{"snippet": "heapq.nsmallest(n, iterable, key=None)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4328, "for": 35015693, "retrieval_score": 13.721389}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529, "for": 35015693, "retrieval_score": 13.570594}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 35015693, "retrieval_score": 23.956747}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508, "for": 35015693, "retrieval_score": 23.286493}
{"snippet": "test_result.failures", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11509, "for": 35015693, "retrieval_score": 23.286493}
{"snippet": "test_result.expectedFailures", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11511, "for": 35015693, "retrieval_score": 23.286493}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 35015693, "retrieval_score": 22.881126}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156, "for": 1197600, "retrieval_score": 15.106277}
{"snippet": "Telnet.expect(list)", "intent": "Read until one from a `list` of a regular expressions matches .", "question_id": 10030, "for": 1197600, "retrieval_score": 14.373117}
{"snippet": "Match.re", "intent": "The regular expression object whose match() or search() method produced this match instance.", "question_id": 8013, "for": 1197600, "retrieval_score": 13.404263}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927, "for": 1197600, "retrieval_score": 13.393417}
{"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928, "for": 1197600, "retrieval_score": 13.393417}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 4299741, "retrieval_score": 22.374426}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 4299741, "retrieval_score": 18.409723}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 4299741, "retrieval_score": 18.108414}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321, "for": 4299741, "retrieval_score": 15.10183}
{"snippet": "heapq.merge(*iterables, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `reverse` is a boolean value .", "question_id": 4323, "for": 4299741, "retrieval_score": 14.665314}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363, "for": 10677350, "retrieval_score": 11.833863}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 10677350, "retrieval_score": 10.582789}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000, "for": 10677350, "retrieval_score": 10.015512}
{"snippet": "float.fromhex(s)", "intent": "Class method to return the float represented by a hexadecimal string s. The string `s` may have leading and trailing whitespace .", "question_id": 9150, "for": 10677350, "retrieval_score": 9.566332}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 10677350, "retrieval_score": 9.559889}
{"snippet": "_thread.start_new_thread(function, args, kwargs)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "question_id": 12943, "for": 21986194, "retrieval_score": 13.688408}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 21986194, "retrieval_score": 13.505455}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 21986194, "retrieval_score": 13.455566}
{"snippet": "Unpacker.unpack_list(unpack_item)", "intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "question_id": 12297, "for": 21986194, "retrieval_score": 12.720631}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 21986194, "retrieval_score": 12.478503}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343, "for": 845058, "retrieval_score": 13.360919}
{"snippet": "fileinput.nextfile()", "intent": "Close the current file so that the next iteration will read the first line from the next file ( if any ) ; lines not read from the file will not count towards the cumulative line count .", "question_id": 3798, "for": 845058, "retrieval_score": 13.22123}
{"snippet": "shlex.lineno", "intent": "Source line number (count of newlines seen so far plus one).", "question_id": 8305, "for": 845058, "retrieval_score": 12.045468}
{"snippet": "test.support.fd_count()", "intent": "Count the number of open file descriptors .", "question_id": 10154, "for": 845058, "retrieval_score": 11.464467}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125, "for": 845058, "retrieval_score": 11.175581}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343, "for": 845058, "retrieval_score": 18.184885}
{"snippet": "fileinput.nextfile()", "intent": "Close the current file so that the next iteration will read the first line from the next file ( if any ) ; lines not read from the file will not count towards the cumulative line count .", "question_id": 3798, "for": 845058, "retrieval_score": 13.22123}
{"snippet": "shlex.lineno", "intent": "Source line number (count of newlines seen so far plus one).", "question_id": 8305, "for": 845058, "retrieval_score": 12.045468}
{"snippet": "test.support.fd_count()", "intent": "Count the number of open file descriptors .", "question_id": 10154, "for": 845058, "retrieval_score": 11.464467}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125, "for": 845058, "retrieval_score": 11.175581}
{"snippet": "decimal.ROUND_HALF_EVEN", "intent": "Round to nearest with ties going to nearest even integer.", "question_id": 2581, "for": 3348825, "retrieval_score": 14.87989}
{"snippet": "decimal.to_integral_value()", "intent": "Round to the nearest integer without signaling Inexact or Rounded .", "question_id": 2488, "for": 3348825, "retrieval_score": 14.5495825}
{"snippet": "decimal.to_integral_exact()", "intent": "Round to the nearest integer , signaling Inexact or Rounded as appropriate if `rounding` occurs .", "question_id": 2484, "for": 3348825, "retrieval_score": 13.238323}
{"snippet": "decimal.to_integral_exact(rounding=None)", "intent": "Round to the nearest integer , signaling Inexact or Rounded as appropriate if `rounding` occurs .", "question_id": 2485, "for": 3348825, "retrieval_score": 13.238323}
{"snippet": "decimal.ROUND_CEILING", "intent": "Round towards Infinity.", "question_id": 2577, "for": 3348825, "retrieval_score": 10.091232}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 6618515, "retrieval_score": 15.677011}
{"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919, "for": 6618515, "retrieval_score": 14.550038}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843, "for": 6618515, "retrieval_score": 14.291363}
{"snippet": "context.copy_sign(x, y)", "intent": "Copies the sign from `y` to `x` .", "question_id": 2526, "for": 6618515, "retrieval_score": 14.186973}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 6618515, "retrieval_score": 13.914614}
{"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919, "for": 6618515, "retrieval_score": 14.550038}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843, "for": 6618515, "retrieval_score": 14.291363}
{"snippet": "context.copy_sign(x, y)", "intent": "Copies the sign from `y` to `x` .", "question_id": 2526, "for": 6618515, "retrieval_score": 14.186973}
{"snippet": "context.compare_signal(x, y)", "intent": "Compares the values of the two operands numerically . With arguments `x`, `y`.", "question_id": 2521, "for": 6618515, "retrieval_score": 13.858596}
{"snippet": "context.max(x, y)", "intent": "Compares two values numerically and returns the maximum . With arguments `x`, `y`.", "question_id": 2549, "for": 6618515, "retrieval_score": 13.858596}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985, "for": 2600775, "retrieval_score": 15.939931}
{"snippet": "date.weekday()", "intent": "Return the day of the week as an integer , where Monday is 0 and Sunday is 6 .", "question_id": 2239, "for": 2600775, "retrieval_score": 14.59432}
{"snippet": "datetime.weekday()", "intent": "Return the day of the week as an integer , where Monday is 0 and Sunday is 6 .", "question_id": 2303, "for": 2600775, "retrieval_score": 14.59432}
{"snippet": "queue.get_nowait()", "intent": "Equivalent to get ( False ) .", "question_id": 6207, "for": 2600775, "retrieval_score": 12.977435}
{"snippet": "Queue.get_nowait()", "intent": "Equivalent to get ( False ) .", "question_id": 7858, "for": 2600775, "retrieval_score": 12.977435}
{"snippet": "os.getloadavg()", "intent": "Return the number of processes in the system run queue averaged over the last 1 , 5 , and 15 minutes or raises OSError if the load average was unobtainable .", "question_id": 7118, "for": 41256648, "retrieval_score": 13.850422}
{"snippet": "fraction.__round__(ndigits)", "intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "question_id": 3876, "for": 41256648, "retrieval_score": 13.637483}
{"snippet": "cmath.log10(x)", "intent": "Return the base-10 logarithm of `x` .", "question_id": 1099, "for": 41256648, "retrieval_score": 10.9273}
{"snippet": "context.log10(x)", "intent": "Returns the base 10 logarithm of `x` .", "question_id": 2543, "for": 41256648, "retrieval_score": 10.9273}
{"snippet": "math.log10(x)", "intent": "Return the base-10 logarithm of `x` .", "question_id": 5911, "for": 41256648, "retrieval_score": 10.9273}
{"snippet": "statistics.median(data)", "intent": "Return the median ( middle value ) of numeric `data` , using the common \u201c mean of middle two \u201d method .", "question_id": 9127, "for": 12589481, "retrieval_score": 16.203846}
{"snippet": "statistics.variance(data, xbar=None)", "intent": "Return the sample variance of `data` , an iterable of at least two real-valued numbers . If the optional second argument `xbar` is given , it should be the mean of data .", "question_id": 9140, "for": 12589481, "retrieval_score": 13.61291}
{"snippet": "email.header.Header(charset=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `charset` serves two purposes : it has the same meaning as the charset argument to the append ( ) method .", "question_id": 3118, "for": 12589481, "retrieval_score": 13.178175}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 12589481, "retrieval_score": 11.913301}
{"snippet": "email.header.Header(s=None, charset=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value . Optional `charset` serves two purposes : it has the same meaning as the charset argument to the append ( ) method .", "question_id": 3123, "for": 12589481, "retrieval_score": 11.892351}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 6797984, "retrieval_score": 13.21385}
{"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346, "for": 6797984, "retrieval_score": 13.21385}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 6797984, "retrieval_score": 12.9020815}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 6797984, "retrieval_score": 12.049211}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 6797984, "retrieval_score": 11.997432}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 6797984, "retrieval_score": 17.75611}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 6797984, "retrieval_score": 16.520227}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 6797984, "retrieval_score": 16.520227}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 6797984, "retrieval_score": 15.451729}
{"snippet": "bytes.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9278, "for": 6797984, "retrieval_score": 14.097963}
{"snippet": "ftplib.FTP_TLS(host='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `host`.", "question_id": 3889, "for": 11573817, "retrieval_score": 12.088284}
{"snippet": "ftplib.FTP_TLS(passwd='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `passwd`.", "question_id": 3891, "for": 11573817, "retrieval_score": 12.088284}
{"snippet": "ftplib.FTP_TLS(acct='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `acct`.", "question_id": 3892, "for": 11573817, "retrieval_score": 12.088284}
{"snippet": "ftplib.FTP_TLS(timeout=None)", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `timeout`.", "question_id": 3896, "for": 11573817, "retrieval_score": 12.088284}
{"snippet": "ftplib.FTP_TLS(source_address=None)", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `source_address`.", "question_id": 3897, "for": 11573817, "retrieval_score": 12.088284}
{"snippet": "base_handler.get_scheme()", "intent": "Return the URL scheme being used for the current request .", "question_id": 12258, "for": 19445682, "retrieval_score": 19.107712}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 19445682, "retrieval_score": 18.830332}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752, "for": 19445682, "retrieval_score": 18.67749}
{"snippet": "urllib.request.Request(url, unverifiable=False)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `unverifiable` should indicate whether the request is unverifiable , as defined by RFC 2965 .", "question_id": 11772, "for": 19445682, "retrieval_score": 18.00575}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773, "for": 19445682, "retrieval_score": 17.979713}
{"snippet": "example.indent", "intent": "The example\u2019s indentation in the containing string, i.e., the number of space characters that precede the example\u2019s first prompt.", "question_id": 2838, "for": 3486384, "retrieval_score": 14.36758}
{"snippet": "text_wrapper.initial_indent", "intent": "(default: '') String that will be prepended to the first line of wrapped output.", "question_id": 10332, "for": 3486384, "retrieval_score": 14.322136}
{"snippet": "text_wrapper.subsequent_indent", "intent": "(default: '') String that will be prepended to all lines of wrapped output except the first.", "question_id": 10333, "for": 3486384, "retrieval_score": 13.690975}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513, "for": 3486384, "retrieval_score": 13.374556}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 3486384, "retrieval_score": 13.131442}
{"snippet": "Token.MISSING", "intent": "A marker object used by Token.old_value.", "question_id": 1647, "for": 6146778, "retrieval_score": 10.358235}
{"snippet": "doctest.ELLIPSIS", "intent": "When specified, an ellipsis marker (...) in the expected output can match any substring in the actual output.", "question_id": 2755, "for": 6146778, "retrieval_score": 10.154987}
{"snippet": "memory_bio.write_eof()", "intent": "Write an EOF marker to the memory BIO .", "question_id": 9059, "for": 6146778, "retrieval_score": 9.818512}
{"snippet": "itertools.compress(data, selectors)", "intent": "Make an iterator that filters elements from `data` returning only those that have a corresponding element in `selectors` that evaluates to True .", "question_id": 5245, "for": 6146778, "retrieval_score": 9.680837}
{"snippet": "SimpleQueue.put(item, block=True)", "intent": "Put `item` into the queue . The optional args `block` and `timeout` are ignored and only provided for compatibility with Queue.put ( ) .", "question_id": 7864, "for": 6146778, "retrieval_score": 9.452233}
{"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047, "for": 638360, "retrieval_score": 8.968767}
{"snippet": "connection.isolation_level", "intent": "Get or set the current default isolation level.", "question_id": 8804, "for": 638360, "retrieval_score": 8.968767}
{"snippet": "sys.getprofile()", "intent": "Get the profiler function as set by setprofile ( ) .", "question_id": 9807, "for": 638360, "retrieval_score": 8.968767}
{"snippet": "sys.gettrace()", "intent": "Get the trace function as set by settrace ( ) .", "question_id": 9808, "for": 638360, "retrieval_score": 8.968767}
{"snippet": "readline.set_completer_delims(string)", "intent": "Set or get the word delimiters for completion . With arguments `string`.", "question_id": 8046, "for": 638360, "retrieval_score": 8.318598}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 4315506, "retrieval_score": 20.177065}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714, "for": 4315506, "retrieval_score": 20.177065}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 4315506, "retrieval_score": 19.465237}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713, "for": 4315506, "retrieval_score": 18.872047}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 4315506, "retrieval_score": 13.84183}
{"snippet": "date.max", "intent": "The latest representable date, date(MAXYEAR, 12, 31).", "question_id": 2224, "for": 4668619, "retrieval_score": 18.94085}
{"snippet": "date.resolution", "intent": "The smallest possible difference between non-equal date objects, timedelta(days=1).", "question_id": 2225, "for": 4668619, "retrieval_score": 16.449806}
{"snippet": "AU_read.getsampwidth()", "intent": "Returns sample width in bytes .", "question_id": 9709, "for": 4668619, "retrieval_score": 11.313682}
{"snippet": "Wave_read.getsampwidth()", "intent": "Returns sample width in bytes .", "question_id": 12052, "for": 4668619, "retrieval_score": 11.313682}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779, "for": 4668619, "retrieval_score": 11.260782}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912, "for": 4668619, "retrieval_score": 19.215576}
{"snippet": "calendar.itermonthdays(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 913, "for": 4668619, "retrieval_score": 16.982885}
{"snippet": "calendar.itermonthdays2(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 914, "for": 4668619, "retrieval_score": 16.982885}
{"snippet": "calendar.itermonthdays3(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 915, "for": 4668619, "retrieval_score": 16.982885}
{"snippet": "calendar.itermonthdays4(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 916, "for": 4668619, "retrieval_score": 16.982885}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 3817529, "retrieval_score": 18.280754}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3817529, "retrieval_score": 17.782497}
{"snippet": "somenamedtuple._field_defaults", "intent": "Dictionary mapping field names to default values.", "question_id": 1388, "for": 3817529, "retrieval_score": 17.250593}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 3817529, "retrieval_score": 16.986801}
{"snippet": "simple_http_request_handler.extensions_map", "intent": "A dictionary mapping suffixes into MIME types.", "question_id": 4662, "for": 3817529, "retrieval_score": 16.257423}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009, "for": 7741878, "retrieval_score": 16.838829}
{"snippet": "turtle.shapetransform(t12=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11010, "for": 7741878, "retrieval_score": 16.838829}
{"snippet": "turtle.shapetransform(t21=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11011, "for": 7741878, "retrieval_score": 16.838829}
{"snippet": "turtle.shapetransform(t11=None, t12=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11013, "for": 7741878, "retrieval_score": 16.838829}
{"snippet": "turtle.shapetransform(t11=None, t21=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11014, "for": 7741878, "retrieval_score": 16.838829}
{"snippet": "collections.ChainMap(*maps)", "intent": "A ChainMap groups multiple dicts or other mappings together to create a single , updateable view . With arguments `*maps`.", "question_id": 1335, "for": 38987, "retrieval_score": 14.31174}
{"snippet": "trace.Trace()", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10706, "for": 38987, "retrieval_score": 12.0266}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708, "for": 38987, "retrieval_score": 12.0266}
{"snippet": "coverage_results.update(other)", "intent": "Merge in data from another CoverageResults object . With arguments `other`.", "question_id": 10724, "for": 38987, "retrieval_score": 11.81504}
{"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012, "for": 38987, "retrieval_score": 11.312788}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 42548362, "retrieval_score": 22.876915}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 42548362, "retrieval_score": 22.876915}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 42548362, "retrieval_score": 21.397278}
{"snippet": "bytes.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9278, "for": 42548362, "retrieval_score": 19.168901}
{"snippet": "bytearray.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9282, "for": 42548362, "retrieval_score": 19.168901}
{"snippet": "sys.is_finalizing()", "intent": "Return True if the Python interpreter is shutting down , False otherwise .", "question_id": 9819, "for": 12765833, "retrieval_score": 31.446949}
{"snippet": "operator.truth(obj)", "intent": "Return True if `obj` is true , and False otherwise .", "question_id": 6527, "for": 12765833, "retrieval_score": 31.34151}
{"snippet": "context.is_normal(x)", "intent": "Returns True if `x` is a normal number ; otherwise returns False .", "question_id": 2536, "for": 12765833, "retrieval_score": 30.881485}
{"snippet": "tracemalloc.is_tracing()", "intent": "True if the tracemalloc module is tracing Python memory allocations , False otherwise .", "question_id": 10846, "for": 12765833, "retrieval_score": 30.704987}
{"snippet": "math.isnan(x)", "intent": "Return True if `x` is a NaN ( not a number ) , and False otherwise .", "question_id": 5900, "for": 12765833, "retrieval_score": 29.690865}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112, "for": 15882395, "retrieval_score": 22.406582}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11122, "for": 15882395, "retrieval_score": 22.406582}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11132, "for": 15882395, "retrieval_score": 22.406582}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11142, "for": 15882395, "retrieval_score": 22.406582}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11152, "for": 15882395, "retrieval_score": 22.406582}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150, "for": 20677660, "retrieval_score": 16.770237}
{"snippet": "weakref.WeakKeyDictionary(dict)", "intent": "Mapping class that references keys weakly . With arguments `dict`.", "question_id": 12081, "for": 20677660, "retrieval_score": 16.344418}
{"snippet": "shelve.Shelf(dict, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8247, "for": 20677660, "retrieval_score": 12.616857}
{"snippet": "shelve.Shelf(dict, protocol=None, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The version of the pickle `protocol` can be specified with the protocol parameter . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8249, "for": 20677660, "retrieval_score": 11.592623}
{"snippet": "loop.call_exception_handler(context)", "intent": "Call the current event loop exception handler . `context` is a dict object containing the following keys ( new keys may be introduced in future Python versions ) :", "question_id": 310, "for": 20677660, "retrieval_score": 11.478871}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857, "for": 19334374, "retrieval_score": 16.760046}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 19334374, "retrieval_score": 15.132536}
{"snippet": "divmod(a, b)", "intent": "Take two ( non complex ) numbers as arguments and return `a` pair of numbers consisting of their quotient and remainder when using integer division . For integers , the result is the same as ( a // `b` , a % b ) .", "question_id": 4009, "for": 19334374, "retrieval_score": 15.075209}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 19334374, "retrieval_score": 14.485639}
{"snippet": "doc_test_parser.parse(string)", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings .", "question_id": 2859, "for": 19334374, "retrieval_score": 14.430428}
{"snippet": "parse_error.position", "intent": "A tuple of line, column numbers, specifying where the error occurred.", "question_id": 12563, "for": 19334374, "retrieval_score": 18.123814}
{"snippet": "statistics.harmonic_mean(data)", "intent": "Return the harmonic mean of `data` , a sequence or iterator of real-valued numbers .", "question_id": 9126, "for": 19334374, "retrieval_score": 17.557997}
{"snippet": "statistics.pvariance(data)", "intent": "Return the population variance of `data` , a non-empty iterable of real-valued numbers .", "question_id": 9135, "for": 19334374, "retrieval_score": 17.557997}
{"snippet": "operator.add(a, b)", "intent": "Return `a` + `b` , for a and b numbers .", "question_id": 6532, "for": 19334374, "retrieval_score": 17.50943}
{"snippet": "operator.__add__(a, b)", "intent": "Return `a` + `b` , for a and b numbers .", "question_id": 6533, "for": 19334374, "retrieval_score": 17.50943}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319, "for": 15096021, "retrieval_score": 8.306769}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853, "for": 15096021, "retrieval_score": 6.173806}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 15096021, "retrieval_score": 6.173806}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855, "for": 15096021, "retrieval_score": 6.173806}
{"snippet": "email.generator.Generator(outfp)", "intent": "Return a Generator object that will write any message provided to the flatten ( ) method , or any text provided to the write ( ) method , to the file-like object `outfp` .", "question_id": 3092, "for": 15096021, "retrieval_score": 5.8708954}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319, "for": 15096021, "retrieval_score": 17.249977}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 15096021, "retrieval_score": 13.312543}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 15096021, "retrieval_score": 12.504065}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 15096021, "retrieval_score": 12.504065}
{"snippet": "warnings.simplefilter(action)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12033, "for": 15096021, "retrieval_score": 11.94061}
{"snippet": "typing.Tuple", "intent": "Tuple type; Tuple[X, Y] is the type of a tuple of two items with the first item of type X and the second of type Y.", "question_id": 11335, "for": 15096021, "retrieval_score": 22.708925}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 15096021, "retrieval_score": 18.137182}
{"snippet": "window.getmaxyx()", "intent": "Return a tuple ( y , x ) of the height and width of the window .", "question_id": 2057, "for": 15096021, "retrieval_score": 17.691854}
{"snippet": "window.getbegyx()", "intent": "Return a tuple ( y , x ) of co-ordinates of upper-left corner .", "question_id": 2049, "for": 15096021, "retrieval_score": 17.598536}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 15096021, "retrieval_score": 17.5693}
{"snippet": "message.get_all(name)", "intent": "Return a list of all the values for the field named `name` .", "question_id": 2974, "for": 25148611, "retrieval_score": 24.636417}
{"snippet": "email_message.get_all(name)", "intent": "Return a list of all the values for the field named `name` .", "question_id": 3251, "for": 25148611, "retrieval_score": 24.636417}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970, "for": 25148611, "retrieval_score": 20.82567}
{"snippet": "email_message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 3247, "for": 25148611, "retrieval_score": 20.82567}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221, "for": 25148611, "retrieval_score": 20.823172}
{"snippet": "date.isoformat()", "intent": "Return a string representing the date in ISO 8601 format , \u2018 YYYY-MM-DD \u2019 .", "question_id": 2242, "for": 2150739, "retrieval_score": 13.939311}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358, "for": 2150739, "retrieval_score": 12.0566435}
{"snippet": "datetime.today()", "intent": "Return the current local datetime , with tzinfo None .", "question_id": 2257, "for": 2150739, "retrieval_score": 11.995495}
{"snippet": "datetime.strptime(date_string, format)", "intent": "Return a datetime corresponding to `date_string` , parsed according to `format` .", "question_id": 2268, "for": 2150739, "retrieval_score": 11.977925}
{"snippet": "cgi.print_directory()", "intent": "Format the current directory in HTML .", "question_id": 1055, "for": 2150739, "retrieval_score": 11.786506}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263, "for": 2150739, "retrieval_score": 14.60545}
{"snippet": "date.isoformat()", "intent": "Return a string representing the date in ISO 8601 format , \u2018 YYYY-MM-DD \u2019 .", "question_id": 2242, "for": 2150739, "retrieval_score": 13.939311}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358, "for": 2150739, "retrieval_score": 12.0566435}
{"snippet": "datetime.strptime(date_string, format)", "intent": "Return a datetime corresponding to `date_string` , parsed according to `format` .", "question_id": 2268, "for": 2150739, "retrieval_score": 11.977925}
{"snippet": "socket.CAN_ISOTP", "intent": "CAN_ISOTP, in the CAN protocol family, is the ISO-TP (ISO 15765-2) protocol.", "question_id": 8586, "for": 2150739, "retrieval_score": 11.783079}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321, "for": 38549915, "retrieval_score": 12.973133}
{"snippet": "heapq.merge(*iterables, key=None)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element .", "question_id": 4322, "for": 38549915, "retrieval_score": 12.798708}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193, "for": 38549915, "retrieval_score": 12.271311}
{"snippet": "heapq.merge(*iterables, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `reverse` is a boolean value .", "question_id": 4323, "for": 38549915, "retrieval_score": 12.236203}
{"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324, "for": 38549915, "retrieval_score": 11.964356}
{"snippet": "csvreader.__next__()", "intent": "Return the next row of the reader \u2019 s iterable object as a list ( if the object was returned from reader ( ) ) or a dict ( if it is a DictReader instance ) , parsed according to the current dialect .", "question_id": 1731, "for": 22093471, "retrieval_score": 9.216052}
{"snippet": "connection.row_factory", "intent": "You can change this attribute to a callable that accepts the cursor and the original row as a tuple and will return the real result row.", "question_id": 8825, "for": 22093471, "retrieval_score": 8.490002}
{"snippet": "socket.fromshare(data)", "intent": "Instantiate a socket from `data` obtained from the socket.share ( ) method .", "question_id": 8632, "for": 22093471, "retrieval_score": 8.324489}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854, "for": 22093471, "retrieval_score": 8.218114}
{"snippet": "sysconfig.is_python_build()", "intent": "Return True if the running Python interpreter was built from source and is being run from its built location , and not from a location resulting from e.g .", "question_id": 9872, "for": 22093471, "retrieval_score": 8.077766}
{"snippet": "io.IncrementalNewlineDecoder", "intent": "A helper codec that decodes newlines for universal newlines mode.", "question_id": 5169, "for": 2798627, "retrieval_score": 15.33651}
{"snippet": "tokenize.open(filename)", "intent": "Open a file in read only mode using the encoding detected by detect_encoding ( ) . With arguments `filename`.", "question_id": 10704, "for": 2798627, "retrieval_score": 13.666743}
{"snippet": "curses.nl()", "intent": "Enter newline mode .", "question_id": 1960, "for": 2798627, "retrieval_score": 13.185699}
{"snippet": "curses.nonl()", "intent": "Leave newline mode .", "question_id": 1963, "for": 2798627, "retrieval_score": 13.185699}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976, "for": 2798627, "retrieval_score": 12.387391}
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440, "for": 19328874, "retrieval_score": 17.65489}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 19328874, "retrieval_score": 16.53801}
{"snippet": "difflib.HtmlDiff", "intent": "This class can be used to create an HTML table (or a complete HTML file containing the table) showing a side by side, line by line comparison of text with inter-line and intra-line change highlights.", "question_id": 2597, "for": 19328874, "retrieval_score": 15.694229}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343, "for": 19328874, "retrieval_score": 15.659407}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114, "for": 19328874, "retrieval_score": 14.164067}
{"snippet": "Path.write_text(data, encoding=None)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file : With arguments `encoding`.", "question_id": 7324, "for": 19328874, "retrieval_score": 20.063791}
{"snippet": "Path.write_text(data, encoding=None, errors=None)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file : With arguments `encoding`, `errors`.", "question_id": 7326, "for": 19328874, "retrieval_score": 19.68437}
{"snippet": "Path.write_text(data, errors=None)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file : With arguments `errors`.", "question_id": 7325, "for": 19328874, "retrieval_score": 16.373816}
{"snippet": "Path.write_text(data)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file :", "question_id": 7323, "for": 19328874, "retrieval_score": 16.134653}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065, "for": 19328874, "retrieval_score": 15.418615}
{"snippet": "sndhdr.whathdr(filename)", "intent": "Determines the type of sound data stored in a file based on the file header . The name of the file is given by `filename` .", "question_id": 8550, "for": 19618912, "retrieval_score": 17.690422}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636, "for": 19618912, "retrieval_score": 16.105703}
{"snippet": "stat.ST_UID", "intent": "User id of the owner.", "question_id": 9078, "for": 19618912, "retrieval_score": 15.819275}
{"snippet": "stat.ST_SIZE", "intent": "Size in bytes of a plain file; amount of data waiting on some special files.", "question_id": 9080, "for": 19618912, "retrieval_score": 15.667285}
{"snippet": "TarInfo.uid", "intent": "User ID of the user who originally stored this member.", "question_id": 9987, "for": 19618912, "retrieval_score": 15.326047}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 3487377, "retrieval_score": 21.573675}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 3487377, "retrieval_score": 17.875666}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 3487377, "retrieval_score": 17.875666}
{"snippet": "str.encode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9188, "for": 3487377, "retrieval_score": 17.438158}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 3487377, "retrieval_score": 16.11045}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424, "for": 3061761, "retrieval_score": 17.825241}
{"snippet": "curses.resizeterm(nlines, ncols)", "intent": "Resize the standard and current windows to the specified dimensions , and adjusts other bookkeeping data used by the curses library that record the window dimensions ( in particular the SIGWINCH handler ) . With arguments `nlines`, `ncols`.", "question_id": 1976, "for": 3061761, "retrieval_score": 10.131848}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 3061761, "retrieval_score": 10.031406}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 3061761, "retrieval_score": 10.031406}
{"snippet": "window.resize(nlines, ncols)", "intent": "Reallocate storage for a curses window to adjust its dimensions to the specified values . With arguments `nlines`, `ncols`.", "question_id": 2108, "for": 3061761, "retrieval_score": 9.757423}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424, "for": 3061761, "retrieval_score": 17.825241}
{"snippet": "curses.resizeterm(nlines, ncols)", "intent": "Resize the standard and current windows to the specified dimensions , and adjusts other bookkeeping data used by the curses library that record the window dimensions ( in particular the SIGWINCH handler ) . With arguments `nlines`, `ncols`.", "question_id": 1976, "for": 3061761, "retrieval_score": 10.131848}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 3061761, "retrieval_score": 10.031406}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 3061761, "retrieval_score": 10.031406}
{"snippet": "window.resize(nlines, ncols)", "intent": "Reallocate storage for a curses window to adjust its dimensions to the specified values . With arguments `nlines`, `ncols`.", "question_id": 2108, "for": 3061761, "retrieval_score": 9.757423}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424, "for": 3061761, "retrieval_score": 17.825241}
{"snippet": "curses.resizeterm(nlines, ncols)", "intent": "Resize the standard and current windows to the specified dimensions , and adjusts other bookkeeping data used by the curses library that record the window dimensions ( in particular the SIGWINCH handler ) . With arguments `nlines`, `ncols`.", "question_id": 1976, "for": 3061761, "retrieval_score": 10.131848}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 3061761, "retrieval_score": 10.031406}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 3061761, "retrieval_score": 10.031406}
{"snippet": "window.resize(nlines, ncols)", "intent": "Reallocate storage for a curses window to adjust its dimensions to the specified values . With arguments `nlines`, `ncols`.", "question_id": 2108, "for": 3061761, "retrieval_score": 9.757423}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424, "for": 3061761, "retrieval_score": 17.825241}
{"snippet": "curses.resizeterm(nlines, ncols)", "intent": "Resize the standard and current windows to the specified dimensions , and adjusts other bookkeeping data used by the curses library that record the window dimensions ( in particular the SIGWINCH handler ) . With arguments `nlines`, `ncols`.", "question_id": 1976, "for": 3061761, "retrieval_score": 10.131848}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 3061761, "retrieval_score": 10.031406}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 3061761, "retrieval_score": 10.031406}
{"snippet": "window.resize(nlines, ncols)", "intent": "Reallocate storage for a curses window to adjust its dimensions to the specified values . With arguments `nlines`, `ncols`.", "question_id": 2108, "for": 3061761, "retrieval_score": 9.757423}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 2917372, "retrieval_score": 24.628262}
{"snippet": "Request.header_items()", "intent": "Return a list of tuples ( header_name , header_value ) of the Request headers .", "question_id": 11833, "for": 2917372, "retrieval_score": 20.330711}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 2917372, "retrieval_score": 19.634304}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 2917372, "retrieval_score": 19.630404}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 2917372, "retrieval_score": 19.252394}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698, "for": 444591, "retrieval_score": 13.439139}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 444591, "retrieval_score": 12.844409}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 444591, "retrieval_score": 12.593695}
{"snippet": "xmlrpc.client.dumps(params, methodname=None)", "intent": "Convert `params` into an XML-RPC request . With arguments `methodname`.", "question_id": 12699, "for": 444591, "retrieval_score": 12.440775}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 444591, "retrieval_score": 12.407208}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 14162026, "retrieval_score": 43.32558}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009, "for": 14162026, "retrieval_score": 37.854755}
{"snippet": "turtle.shapetransform(t12=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11010, "for": 14162026, "retrieval_score": 37.854755}
{"snippet": "turtle.shapetransform(t21=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11011, "for": 14162026, "retrieval_score": 37.854755}
{"snippet": "turtle.shapetransform(t11=None, t12=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11013, "for": 14162026, "retrieval_score": 37.854755}
{"snippet": "itertools.permutations(iterable)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5258, "for": 1482308, "retrieval_score": 12.058584}
{"snippet": "itertools.permutations(iterable, r=None)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5259, "for": 1482308, "retrieval_score": 12.058584}
{"snippet": "snapshot.filter_traces(filters)", "intent": "Create a new Snapshot instance with a filtered traces sequence , `filters` is a list of DomainFilter and Filter instances .", "question_id": 10874, "for": 1482308, "retrieval_score": 9.614012}
{"snippet": "sync_manager.list(sequence)", "intent": "Create a shared list object and return a proxy for it . With arguments `sequence`.", "question_id": 6317, "for": 1482308, "retrieval_score": 9.458604}
{"snippet": "NNTP.list(group_pattern=None, file=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` . With arguments `file`.", "question_id": 6468, "for": 1482308, "retrieval_score": 9.102667}
{"snippet": "ArgumentParser.parse_args()", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 69, "for": 715417, "retrieval_score": 12.570111}
{"snippet": "ArgumentParser.parse_args(namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 71, "for": 715417, "retrieval_score": 12.570111}
{"snippet": "Request.unverifiable", "intent": "boolean, indicates whether the request is unverifiable as defined by RFC 2965.", "question_id": 11822, "for": 715417, "retrieval_score": 12.014871}
{"snippet": "ArgumentParser.parse_args(args=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 70, "for": 715417, "retrieval_score": 11.757099}
{"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72, "for": 715417, "retrieval_score": 11.757099}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 5399112, "retrieval_score": 42.831993}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706, "for": 5399112, "retrieval_score": 31.578997}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707, "for": 5399112, "retrieval_score": 30.129736}
{"snippet": "urllib.parse.quote(string, errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11708, "for": 5399112, "retrieval_score": 30.129736}
{"snippet": "urllib.parse.quote(string, encoding=None, errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11711, "for": 5399112, "retrieval_score": 30.129736}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503, "for": 24525111, "retrieval_score": 11.8801565}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499, "for": 24525111, "retrieval_score": 11.774923}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4502, "for": 24525111, "retrieval_score": 11.754257}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4505, "for": 24525111, "retrieval_score": 11.750565}
{"snippet": "FileCookieJar.save(ignore_expires=False)", "intent": "Save cookies to a file . `ignore_expires` : save even cookies that have expired", "question_id": 4501, "for": 24525111, "retrieval_score": 11.749405}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 187455, "retrieval_score": 19.444204}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357, "for": 187455, "retrieval_score": 18.362066}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 187455, "retrieval_score": 14.368526}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 187455, "retrieval_score": 13.084917}
{"snippet": "test.support.fd_count()", "intent": "Count the number of open file descriptors .", "question_id": 10154, "for": 187455, "retrieval_score": 13.009403}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832, "for": 24492327, "retrieval_score": 21.539099}
{"snippet": "TarFile.extractall()", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9932, "for": 24492327, "retrieval_score": 20.77391}
{"snippet": "TarFile.extractall(path=\".\")", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9933, "for": 24492327, "retrieval_score": 20.77391}
{"snippet": "TarFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9934, "for": 24492327, "retrieval_score": 20.77391}
{"snippet": "TarFile.extractall(path=\".\", members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9936, "for": 24492327, "retrieval_score": 20.77391}
{"snippet": "widget.parent(item)", "intent": "Returns the ID of the parent of `item` , or \u2018 \u2019 if item is at the top level of the hierarchy .", "question_id": 10646, "for": 8639973, "retrieval_score": 11.580492}
{"snippet": "Panel.top()", "intent": "Push panel to the top of the stack .", "question_id": 2154, "for": 8639973, "retrieval_score": 11.018395}
{"snippet": "window.chgat(attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( y , x ) if supplied . With arguments `attr`.", "question_id": 2030, "for": 8639973, "retrieval_score": 10.751551}
{"snippet": "window.chgat(num, attr)", "intent": "Set the attributes of `num` characters at the current cursor position , or at position ( y , x ) if supplied . With arguments `attr`.", "question_id": 2031, "for": 8639973, "retrieval_score": 10.751551}
{"snippet": "window.chgat(y, x, attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2032, "for": 8639973, "retrieval_score": 10.751551}
{"snippet": "cursor.rowcount", "intent": "Although the Cursor class of the sqlite3 module implements this attribute, the database engine\u2019s own support for the determination of \u201crows affected\u201d/\u201drows selected\u201d is quirky.", "question_id": 8849, "for": 8215686, "retrieval_score": 15.869871}
{"snippet": "window.insertln()", "intent": "Insert a blank line under the cursor .", "question_id": 2076, "for": 8215686, "retrieval_score": 15.530518}
{"snippet": "window.clrtoeol()", "intent": "Erase from cursor to the end of the line .", "question_id": 2037, "for": 8215686, "retrieval_score": 14.195068}
{"snippet": "readline.insert_text(string)", "intent": "Insert text into the line buffer at the cursor position . With arguments `string`.", "question_id": 8019, "for": 8215686, "retrieval_score": 13.382624}
{"snippet": "window.clrtobot()", "intent": "Erase from cursor to the end of the window : all lines below the cursor are deleted , and then the equivalent of clrtoeol ( ) is performed .", "question_id": 2036, "for": 8215686, "retrieval_score": 13.137671}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927, "for": 2317134, "retrieval_score": 24.355526}
{"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928, "for": 2317134, "retrieval_score": 24.355526}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 2317134, "retrieval_score": 21.593681}
{"snippet": "pow(x, y)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4074, "for": 2317134, "retrieval_score": 21.593681}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 2317134, "retrieval_score": 19.856346}
{"snippet": "re.L", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7929, "for": 2317134, "retrieval_score": 17.336859}
{"snippet": "re.LOCALE", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7930, "for": 2317134, "retrieval_score": 17.336859}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 2317134, "retrieval_score": 15.9557905}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 2317134, "retrieval_score": 15.9557905}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927, "for": 2317134, "retrieval_score": 15.800435}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 209513, "retrieval_score": 11.849233}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 209513, "retrieval_score": 11.849233}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 209513, "retrieval_score": 11.709978}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 209513, "retrieval_score": 11.709978}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 209513, "retrieval_score": 11.546103}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 209513, "retrieval_score": 12.518587}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 209513, "retrieval_score": 12.518587}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 209513, "retrieval_score": 12.515285}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 209513, "retrieval_score": 12.341908}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 209513, "retrieval_score": 12.268481}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 209513, "retrieval_score": 11.849233}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 209513, "retrieval_score": 11.849233}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 209513, "retrieval_score": 11.709978}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 209513, "retrieval_score": 11.709978}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 209513, "retrieval_score": 11.546103}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 209513, "retrieval_score": 13.21385}
{"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346, "for": 209513, "retrieval_score": 13.21385}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 209513, "retrieval_score": 12.9020815}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 209513, "retrieval_score": 12.049211}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 209513, "retrieval_score": 11.849233}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 209513, "retrieval_score": 11.849233}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 209513, "retrieval_score": 11.849233}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 209513, "retrieval_score": 11.135459}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 209513, "retrieval_score": 11.135459}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 209513, "retrieval_score": 10.9594145}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160, "for": 28669459, "retrieval_score": 11.539468}
{"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287, "for": 28669459, "retrieval_score": 10.396091}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653, "for": 28669459, "retrieval_score": 10.21339}
{"snippet": "sysconfig.get_config_var(name)", "intent": "Return the value of a single variable `name` .", "question_id": 9859, "for": 28669459, "retrieval_score": 10.21339}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 28669459, "retrieval_score": 9.707571}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197, "for": 28669459, "retrieval_score": 15.312611}
{"snippet": "formatter.format(record)", "intent": "The `record` \u2019 s attribute dictionary is used as the operand to a string formatting operation .", "question_id": 5618, "for": 28669459, "retrieval_score": 12.027593}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160, "for": 28669459, "retrieval_score": 11.428283}
{"snippet": "Element.setAttribute(name, value)", "intent": "Set an attribute `value` from a string . With arguments `name`.", "question_id": 12366, "for": 28669459, "retrieval_score": 11.320353}
{"snippet": "queue_listener.debug(msg, *args, **kwargs)", "intent": "Logs a message with level DEBUG on this logger . The `msg` is the message format string , and the args are the arguments which are merged into msg using the string formatting operator . With arguments `*args`, `**kwargs`.", "question_id": 5570, "for": 28669459, "retrieval_score": 11.149776}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 13002848, "retrieval_score": 13.432254}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 13002848, "retrieval_score": 11.504758}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 13002848, "retrieval_score": 11.504758}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328, "for": 13002848, "retrieval_score": 11.083585}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 13002848, "retrieval_score": 10.618644}
{"snippet": "mimetypes.knownfiles", "intent": "List of type map file names commonly installed.", "question_id": 5951, "for": 739993, "retrieval_score": 14.100153}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 739993, "retrieval_score": 12.446709}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827, "for": 739993, "retrieval_score": 11.749004}
{"snippet": "SSLContext.get_ca_certs()", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates .", "question_id": 9011, "for": 739993, "retrieval_score": 11.498592}
{"snippet": "importlib.machinery.SOURCE_SUFFIXES", "intent": "A list of strings representing the recognized file suffixes for source modules.", "question_id": 4865, "for": 739993, "retrieval_score": 11.471798}
{"snippet": "memoryview.itemsize", "intent": "The size in bytes of each element of the memoryview:", "question_id": 9423, "for": 40852575, "retrieval_score": 16.299658}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 40852575, "retrieval_score": 16.064884}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 40852575, "retrieval_score": 15.994125}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 40852575, "retrieval_score": 15.863266}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 40852575, "retrieval_score": 14.921708}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 7371935, "retrieval_score": 11.99985}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 7371935, "retrieval_score": 11.99985}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018, "for": 7371935, "retrieval_score": 10.86192}
{"snippet": "UUID.bytes", "intent": "The UUID as a 16-byte string (containing the six integer fields in big-endian byte order).", "question_id": 11947, "for": 7371935, "retrieval_score": 9.627373}
{"snippet": "UUID.bytes_le", "intent": "The UUID as a 16-byte string (with time_low, time_mid, and time_hi_version in little-endian byte order).", "question_id": 11948, "for": 7371935, "retrieval_score": 9.627373}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 7371935, "retrieval_score": 11.213325}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 7371935, "retrieval_score": 11.213325}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018, "for": 7371935, "retrieval_score": 10.118822}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667, "for": 7371935, "retrieval_score": 9.203389}
{"snippet": "profile.runctx(command, globals, locals, filename=None, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `filename`, `sort`.", "question_id": 7668, "for": 7371935, "retrieval_score": 9.034158}
{"snippet": "string.ascii_lowercase", "intent": "The lowercase letters 'abcdefghijklmnopqrstuvwxyz'.", "question_id": 9508, "for": 7371935, "retrieval_score": 20.870136}
{"snippet": "str.lower()", "intent": "Return a copy of the string with all the cased characters 4 converted to lowercase .", "question_id": 9217, "for": 7371935, "retrieval_score": 18.718102}
{"snippet": "snapshot.statistics(key_type: str)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`.", "question_id": 10876, "for": 7371935, "retrieval_score": 18.686695}
{"snippet": "str.swapcase()", "intent": "Return a copy of the string with uppercase characters converted to lowercase and vice versa .", "question_id": 9252, "for": 7371935, "retrieval_score": 18.60607}
{"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877, "for": 7371935, "retrieval_score": 17.914255}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 29464234, "retrieval_score": 17.270151}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 29464234, "retrieval_score": 16.599842}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682, "for": 29464234, "retrieval_score": 16.35736}
{"snippet": "typing.Type()", "intent": "A variable annotated with C may accept a value of type C. In contrast , a variable annotated with Type [ C ] may accept values that are classes themselves \u2013 specifically , it will accept the class object of C. For example :", "question_id": 11232, "for": 29464234, "retrieval_score": 14.889963}
{"snippet": "os.O_ASYNC", "intent": "The above constants are extensions and not present if they are not defined by the C library.", "question_id": 6763, "for": 29464234, "retrieval_score": 14.80187}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 8650415, "retrieval_score": 20.953987}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 8650415, "retrieval_score": 19.965208}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 8650415, "retrieval_score": 19.965208}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 8650415, "retrieval_score": 18.72765}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 8650415, "retrieval_score": 18.72765}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 6504200, "retrieval_score": 18.693361}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 6504200, "retrieval_score": 18.55081}
{"snippet": "xml.dom.pulldom.parseString(string)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` .", "question_id": 12429, "for": 6504200, "retrieval_score": 18.067509}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 6504200, "retrieval_score": 17.473204}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724, "for": 6504200, "retrieval_score": 17.417725}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832, "for": 2424412, "retrieval_score": 20.605808}
{"snippet": "doc_test_parser.parse(string)", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings .", "question_id": 2859, "for": 2424412, "retrieval_score": 19.201426}
{"snippet": "test_case.output", "intent": "A list of str objects with the formatted output of matching messages.", "question_id": 11416, "for": 2424412, "retrieval_score": 19.143923}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827, "for": 2424412, "retrieval_score": 19.112038}
{"snippet": "importlib.machinery.SOURCE_SUFFIXES", "intent": "A list of strings representing the recognized file suffixes for source modules.", "question_id": 4865, "for": 2424412, "retrieval_score": 18.661106}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 2424412, "retrieval_score": 23.482124}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 2424412, "retrieval_score": 16.077408}
{"snippet": "termios.tcgetattr(fd)", "intent": "Return a list containing the tty attributes for file descriptor `fd` , as follows : [ iflag , oflag , cflag , lflag , ispeed , ospeed , cc ] where cc is a list of the tty special characters ( each a string of length 1 , except the items with indices VMIN and VTIME , which are integers when these fields are defined ) .", "question_id": 10102, "for": 2424412, "retrieval_score": 15.83337}
{"snippet": "warnings.simplefilter(action)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12033, "for": 2424412, "retrieval_score": 14.518591}
{"snippet": "socket.ntohl(x)", "intent": "Convert 32-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8657, "for": 2424412, "retrieval_score": 14.441147}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 2424412, "retrieval_score": 16.077408}
{"snippet": "test_case.output", "intent": "A list of str objects with the formatted output of matching messages.", "question_id": 11416, "for": 2424412, "retrieval_score": 15.20199}
{"snippet": "typing.Callable", "intent": "Callable type; Callable[[int], str] is a function of (int) -> str.", "question_id": 11336, "for": 2424412, "retrieval_score": 14.357077}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, domain: int=None)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `domain: int`.", "question_id": 10859, "for": 2424412, "retrieval_score": 14.300064}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023, "for": 2424412, "retrieval_score": 14.0758915}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773, "for": 15313250, "retrieval_score": 15.264664}
{"snippet": "http.client.HTTPResponse(sock, url=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `url`.", "question_id": 4405, "for": 15313250, "retrieval_score": 12.799094}
{"snippet": "urllib.request.Request(url, data=None, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11777, "for": 15313250, "retrieval_score": 12.516866}
{"snippet": "http.client.HTTPResponse(sock, debuglevel=0, url=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `debuglevel`, `url`.", "question_id": 4407, "for": 15313250, "retrieval_score": 12.504072}
{"snippet": "http.client.HTTPResponse(sock, method=None, url=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `method`, `url`.", "question_id": 4408, "for": 15313250, "retrieval_score": 12.504072}
{"snippet": "re.findall(pattern, string, flags=0)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings . With arguments `flags`.", "question_id": 7948, "for": 15313250, "retrieval_score": 18.169865}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947, "for": 15313250, "retrieval_score": 18.109026}
{"snippet": "re.fullmatch(pattern, string, flags=0)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7942, "for": 15313250, "retrieval_score": 15.438544}
{"snippet": "re.finditer(pattern, string, flags=0)", "intent": "Return an iterator yielding match objects over all non-overlapping matches for the RE `pattern` in `string` . With arguments `flags`.", "question_id": 7950, "for": 15313250, "retrieval_score": 15.395121}
{"snippet": "re.fullmatch(pattern, string)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object .", "question_id": 7941, "for": 15313250, "retrieval_score": 15.182621}
{"snippet": "readline.read_init_file()", "intent": "Execute a readline initialization file .", "question_id": 8017, "for": 7372592, "retrieval_score": 11.240187}
{"snippet": "readline.read_init_file(filename)", "intent": "Execute a readline initialization file . The default `filename` is the last filename used .", "question_id": 8016, "for": 7372592, "retrieval_score": 9.167474}
{"snippet": "SubprocessTransport.kill()", "intent": "Kill the subprocess .", "question_id": 422, "for": 7372592, "retrieval_score": 8.810173}
{"snippet": "SubprocessTransport.terminate()", "intent": "Stop the subprocess .", "question_id": 424, "for": 7372592, "retrieval_score": 8.810173}
{"snippet": "base_manager.start()", "intent": "Start a subprocess to start the manager .", "question_id": 6284, "for": 7372592, "retrieval_score": 8.769613}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 5507948, "retrieval_score": 15.992173}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 5507948, "retrieval_score": 15.992173}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 5507948, "retrieval_score": 15.992173}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 5507948, "retrieval_score": 14.591234}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 5507948, "retrieval_score": 14.322583}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003, "for": 1038824, "retrieval_score": 14.339204}
{"snippet": "Match.start()", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8004, "for": 1038824, "retrieval_score": 14.339204}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005, "for": 1038824, "retrieval_score": 14.339204}
{"snippet": "Match.end()", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8006, "for": 1038824, "retrieval_score": 14.339204}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194, "for": 1038824, "retrieval_score": 14.122264}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003, "for": 1038824, "retrieval_score": 14.339204}
{"snippet": "Match.start()", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8004, "for": 1038824, "retrieval_score": 14.339204}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005, "for": 1038824, "retrieval_score": 14.339204}
{"snippet": "Match.end()", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8006, "for": 1038824, "retrieval_score": 14.339204}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194, "for": 1038824, "retrieval_score": 14.122264}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003, "for": 1038824, "retrieval_score": 14.339204}
{"snippet": "Match.start()", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8004, "for": 1038824, "retrieval_score": 14.339204}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005, "for": 1038824, "retrieval_score": 14.339204}
{"snippet": "Match.end()", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8006, "for": 1038824, "retrieval_score": 14.339204}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194, "for": 1038824, "retrieval_score": 14.122264}
{"snippet": "InteractiveConsole.resetbuffer()", "intent": "Remove any unhandled source text from the input buffer .", "question_id": 1189, "for": 1038824, "retrieval_score": 14.686481}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003, "for": 1038824, "retrieval_score": 14.339204}
{"snippet": "Match.start()", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8004, "for": 1038824, "retrieval_score": 14.339204}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005, "for": 1038824, "retrieval_score": 14.339204}
{"snippet": "Match.end()", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8006, "for": 1038824, "retrieval_score": 14.339204}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 19112735, "retrieval_score": 17.191338}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 19112735, "retrieval_score": 16.574383}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 19112735, "retrieval_score": 15.284554}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 19112735, "retrieval_score": 14.997007}
{"snippet": "NNTP.list(group_pattern=None, file=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` . With arguments `file`.", "question_id": 6468, "for": 19112735, "retrieval_score": 14.800505}
{"snippet": "cmath.nan", "intent": "A floating-point \u201cnot a number\u201d (NaN) value.", "question_id": 1125, "for": 9775731, "retrieval_score": 22.116602}
{"snippet": "math.nan", "intent": "A floating-point \u201cnot a number\u201d (NaN) value.", "question_id": 5938, "for": 9775731, "retrieval_score": 22.116602}
{"snippet": "Packer.pack_float(value)", "intent": "Packs the single-precision floating point number `value` .", "question_id": 12275, "for": 9775731, "retrieval_score": 22.116602}
{"snippet": "Packer.pack_double(value)", "intent": "Packs the double-precision floating point number `value` .", "question_id": 12276, "for": 9775731, "retrieval_score": 22.116602}
{"snippet": "socket.settimeout(value)", "intent": "Set a timeout on blocking socket operations . The `value` argument can be a nonnegative floating point number expressing seconds , or None .", "question_id": 8738, "for": 9775731, "retrieval_score": 18.27027}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513, "for": 367155, "retrieval_score": 20.771671}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530, "for": 367155, "retrieval_score": 19.623938}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529, "for": 367155, "retrieval_score": 18.783762}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 367155, "retrieval_score": 17.606136}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 367155, "retrieval_score": 17.606136}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068, "for": 17972020, "retrieval_score": 26.378576}
{"snippet": "connection.iterdump()", "intent": "Returns an iterator to dump the database in an SQL text format .", "question_id": 8828, "for": 17972020, "retrieval_score": 26.171993}
{"snippet": "cursor.execute(sql)", "intent": "Executes an SQL statement . With arguments `sql`.", "question_id": 8841, "for": 17972020, "retrieval_score": 23.004187}
{"snippet": "cursor.executemany(sql, seq_of_parameters)", "intent": "Executes an SQL command against all parameter sequences or mappings found in the sequence `seq_of_parameters` . With arguments `sql`.", "question_id": 8842, "for": 17972020, "retrieval_score": 22.69698}
{"snippet": "cursor.execute(sql, parameters)", "intent": "Executes an SQL statement . With arguments `sql`, `parameters`.", "question_id": 8840, "for": 17972020, "retrieval_score": 22.631685}
{"snippet": "NNTP.quit()", "intent": "Send a QUIT command and close the connection .", "question_id": 6448, "for": 2823472, "retrieval_score": 9.818512}
{"snippet": "FTP.quit()", "intent": "Send a QUIT command to the server and close the connection .", "question_id": 3966, "for": 2823472, "retrieval_score": 9.106742}
{"snippet": "queue_listener.enqueue_sentinel()", "intent": "Writes a sentinel to the queue to tell the listener to quit .", "question_id": 5564, "for": 2823472, "retrieval_score": 8.891876}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608, "for": 2823472, "retrieval_score": 8.491193}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610, "for": 2823472, "retrieval_score": 8.491193}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 12005558, "retrieval_score": 13.638935}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 12005558, "retrieval_score": 13.638935}
{"snippet": "bytes.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9262, "for": 12005558, "retrieval_score": 13.594105}
{"snippet": "bytearray.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9268, "for": 12005558, "retrieval_score": 13.594105}
{"snippet": "memoryview.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the buffer .", "question_id": 9414, "for": 12005558, "retrieval_score": 13.594105}
{"snippet": "Pattern.match(string)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object .", "question_id": 7975, "for": 10974932, "retrieval_score": 20.29463}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939, "for": 10974932, "retrieval_score": 19.891829}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940, "for": 10974932, "retrieval_score": 19.84564}
{"snippet": "str.expandtabs()", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size .", "question_id": 9192, "for": 10974932, "retrieval_score": 18.616383}
{"snippet": "bytes.expandtabs()", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size .", "question_id": 9377, "for": 10974932, "retrieval_score": 16.062256}
{"snippet": "system_random.pattern", "intent": "The regular expression pattern.", "question_id": 7966, "for": 10974932, "retrieval_score": 15.39872}
{"snippet": "re.purge()", "intent": "Clear the regular expression cache .", "question_id": 7960, "for": 10974932, "retrieval_score": 14.963525}
{"snippet": "Pattern.fullmatch(string)", "intent": "If the whole `string` matches this regular expression , return a corresponding match object .", "question_id": 7978, "for": 10974932, "retrieval_score": 14.842097}
{"snippet": "re.fullmatch(pattern, string)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object .", "question_id": 7941, "for": 10974932, "retrieval_score": 14.507692}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156, "for": 10974932, "retrieval_score": 14.162983}
{"snippet": "Function.children", "intent": "A dictionary mapping names to descriptors for nested functions and classes.", "question_id": 7715, "for": 14925239, "retrieval_score": 15.932583}
{"snippet": "Class.children", "intent": "A dictionary mapping names to descriptors for nested functions and classes.", "question_id": 7721, "for": 14925239, "retrieval_score": 15.932583}
{"snippet": "uuid.uuid1(clock_seq=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `clock_seq` is given , it is used as the sequence number ; otherwise a random 14-bit sequence number is chosen .", "question_id": 11959, "for": 14925239, "retrieval_score": 15.931295}
{"snippet": "uuid.uuid1(node=None, clock_seq=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `node` is not given , getnode ( ) is used to obtain the hardware address . If `clock_seq` is given , it is used as the sequence number ; otherwise a random 14-bit sequence number is chosen .", "question_id": 11960, "for": 14925239, "retrieval_score": 15.465855}
{"snippet": "uuid.uuid1(node=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `node` is not given , getnode ( ) is used to obtain the hardware address .", "question_id": 11958, "for": 14925239, "retrieval_score": 14.400454}
{"snippet": "doctest.DocTestSuite(globs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "question_id": 2808, "for": 17815945, "retrieval_score": 10.000917}
{"snippet": "doctest.DocTestSuite(module=None, globs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "question_id": 2814, "for": 17815945, "retrieval_score": 10.000917}
{"snippet": "inspect.isgenerator(object)", "intent": "Return true if the `object` is a generator .", "question_id": 4953, "for": 17815945, "retrieval_score": 9.782247}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 17815945, "retrieval_score": 9.623014}
{"snippet": "dis.Bytecode(x)", "intent": "Analyse the bytecode corresponding to a function , generator , asynchronous generator , coroutine , method , string of source code , or a code object ( as returned by compile ( ) ) . With arguments `x`.", "question_id": 2695, "for": 17815945, "retrieval_score": 9.463486}
{"snippet": "doctest.DocTestSuite(globs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "question_id": 2808, "for": 17815945, "retrieval_score": 10.000917}
{"snippet": "doctest.DocTestSuite(module=None, globs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "question_id": 2814, "for": 17815945, "retrieval_score": 10.000917}
{"snippet": "inspect.isgenerator(object)", "intent": "Return true if the `object` is a generator .", "question_id": 4953, "for": 17815945, "retrieval_score": 9.782247}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 17815945, "retrieval_score": 9.623014}
{"snippet": "dis.Bytecode(x)", "intent": "Analyse the bytecode corresponding to a function , generator , asynchronous generator , coroutine , method , string of source code , or a code object ( as returned by compile ( ) ) . With arguments `x`.", "question_id": 2695, "for": 17815945, "retrieval_score": 9.463486}
{"snippet": "readline.clear_history()", "intent": "Clear the current history .", "question_id": 8029, "for": 741877, "retrieval_score": 14.13665}
{"snippet": "window.erase()", "intent": "Clear the window .", "question_id": 2048, "for": 741877, "retrieval_score": 9.652411}
{"snippet": "linecache.clearcache()", "intent": "Clear the cache .", "question_id": 5345, "for": 741877, "retrieval_score": 9.652411}
{"snippet": "event.clear()", "intent": "Clear ( unset ) the event .", "question_id": 567, "for": 741877, "retrieval_score": 9.371684}
{"snippet": "filecmp.clear_cache()", "intent": "Clear the filecmp cache .", "question_id": 3759, "for": 741877, "retrieval_score": 9.371684}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 21212706, "retrieval_score": 14.226059}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 21212706, "retrieval_score": 13.909927}
{"snippet": "float.fromhex(s)", "intent": "Class method to return the float represented by a hexadecimal string s. The string `s` may have leading and trailing whitespace .", "question_id": 9150, "for": 21212706, "retrieval_score": 13.611889}
{"snippet": "struct.pack_into(format, buffer, offset, v1, v2)", "intent": "Pack the values `v1` , `v2` , \u2026 according to the `format` string format and write the packed bytes into the writable `buffer` buffer starting at position `offset` .", "question_id": 9552, "for": 21212706, "retrieval_score": 13.019426}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 21212706, "retrieval_score": 12.317835}
{"snippet": "binascii.b2a_uu(data)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char .", "question_id": 821, "for": 4523551, "retrieval_score": 16.547098}
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824, "for": 4523551, "retrieval_score": 16.429983}
{"snippet": "binascii.b2a_qp(data)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding .", "question_id": 828, "for": 4523551, "retrieval_score": 15.68962}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825, "for": 4523551, "retrieval_score": 14.52858}
{"snippet": "binascii.b2a_uu(data, backtick=False)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "question_id": 822, "for": 4523551, "retrieval_score": 13.581838}
{"snippet": "auto.reason", "intent": "A string describing the specific codec error.", "question_id": 3675, "for": 12572362, "retrieval_score": 17.541252}
{"snippet": "locale.D_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent a date in a locale-specific way.", "question_id": 5356, "for": 12572362, "retrieval_score": 17.429825}
{"snippet": "locale.T_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent a time in a locale-specific way.", "question_id": 5357, "for": 12572362, "retrieval_score": 17.429825}
{"snippet": "test_case.id()", "intent": "Return a string identifying the specific test case .", "question_id": 11469, "for": 12572362, "retrieval_score": 17.084253}
{"snippet": "locale.D_T_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent date and time in a locale-specific way.", "question_id": 5355, "for": 12572362, "retrieval_score": 17.014746}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 23306653, "retrieval_score": 26.657223}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 23306653, "retrieval_score": 22.267029}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 23306653, "retrieval_score": 21.87595}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 23306653, "retrieval_score": 21.1732}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 23306653, "retrieval_score": 20.8541}
{"snippet": "writer.send_flowing_data(data)", "intent": "Output character `data` which may be word-wrapped and re-flowed as needed .", "question_id": 3850, "for": 33724111, "retrieval_score": 12.796749}
{"snippet": "getopt.getopt(args, shortopts)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program . `shortopts` is the string of option letters that the script wants to recognize , with options that require an argument followed by a colon ( ' : ' ; i.e. , the same format that Unix getopt ( ) uses ) .", "question_id": 4194, "for": 33724111, "retrieval_score": 11.488715}
{"snippet": "readline.set_completer_delims(string)", "intent": "Set or get the word delimiters for completion . With arguments `string`.", "question_id": 8046, "for": 33724111, "retrieval_score": 11.2973}
{"snippet": "string.ascii_lowercase", "intent": "The lowercase letters 'abcdefghijklmnopqrstuvwxyz'.", "question_id": 9508, "for": 33724111, "retrieval_score": 11.147922}
{"snippet": "string.ascii_uppercase", "intent": "The uppercase letters 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "question_id": 9509, "for": 33724111, "retrieval_score": 11.147922}
{"snippet": "os.major(device)", "intent": "Extract the `device` major number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6882, "for": 6407780, "retrieval_score": 14.091874}
{"snippet": "os.minor(device)", "intent": "Extract the `device` minor number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6883, "for": 6407780, "retrieval_score": 14.091874}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948, "for": 6407780, "retrieval_score": 12.112414}
{"snippet": "ZipInfo.extra", "intent": "Expansion field data.", "question_id": 12867, "for": 6407780, "retrieval_score": 11.793501}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543, "for": 6407780, "retrieval_score": 11.611737}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 10973614, "retrieval_score": 22.066652}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328, "for": 10973614, "retrieval_score": 19.986797}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 10973614, "retrieval_score": 19.933758}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136, "for": 10973614, "retrieval_score": 18.006609}
{"snippet": "array.typecode", "intent": "The typecode character used to create the array.", "question_id": 118, "for": 10973614, "retrieval_score": 15.46859}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 10973614, "retrieval_score": 22.066652}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328, "for": 10973614, "retrieval_score": 19.986797}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 10973614, "retrieval_score": 19.933758}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136, "for": 10973614, "retrieval_score": 18.006609}
{"snippet": "array.typecode", "intent": "The typecode character used to create the array.", "question_id": 118, "for": 10973614, "retrieval_score": 15.46859}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857, "for": 2527892, "retrieval_score": 14.039469}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 2527892, "retrieval_score": 12.573186}
{"snippet": "mime_version_header.version", "intent": "The version number as a string, with any whitespace and/or comments removed.", "question_id": 3164, "for": 2527892, "retrieval_score": 11.970324}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269, "for": 2527892, "retrieval_score": 11.92924}
{"snippet": "Morsel.output()", "intent": "Return a string representation of the Morsel , suitable to be sent as an HTTP `header` .", "question_id": 4601, "for": 2527892, "retrieval_score": 11.619919}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 14411633, "retrieval_score": 19.578176}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 14411633, "retrieval_score": 18.296093}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api)", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10267, "for": 14411633, "retrieval_score": 15.8874235}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268, "for": 14411633, "retrieval_score": 15.8874235}
{"snippet": "socket.has_ipv6", "intent": "This constant contains a boolean value which indicates if IPv6 is supported on this platform.", "question_id": 8607, "for": 14411633, "retrieval_score": 15.354319}
{"snippet": "statistics.median(data)", "intent": "Return the median ( middle value ) of numeric `data` , using the common \u201c mean of middle two \u201d method .", "question_id": 9127, "for": 17812978, "retrieval_score": 12.797724}
{"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957, "for": 17812978, "retrieval_score": 11.606092}
{"snippet": "Path.is_dir()", "intent": "Return True if the path points to a directory ( or a symbolic link pointing to a directory ) , False if it points to another kind of file .", "question_id": 7273, "for": 17812978, "retrieval_score": 10.709546}
{"snippet": "Path.is_fifo()", "intent": "Return True if the path points to a FIFO ( or a symbolic link pointing to a FIFO ) , False if it points to another kind of file .", "question_id": 7278, "for": 17812978, "retrieval_score": 10.709546}
{"snippet": "tracemalloc.Traceback", "intent": "Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "question_id": 10894, "for": 17812978, "retrieval_score": 10.668838}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 11709079, "retrieval_score": 15.073896}
{"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346, "for": 11709079, "retrieval_score": 15.073896}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054, "for": 11709079, "retrieval_score": 14.395701}
{"snippet": "cgi.print_environ()", "intent": "Format the shell environment in HTML .", "question_id": 1053, "for": 11709079, "retrieval_score": 14.000035}
{"snippet": "cgi.print_directory()", "intent": "Format the current directory in HTML .", "question_id": 1055, "for": 11709079, "retrieval_score": 14.000035}
{"snippet": "urllib.parse.parse_qs(qs, strict_parsing=False)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11671, "for": 11709079, "retrieval_score": 9.702707}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673, "for": 11709079, "retrieval_score": 9.702707}
{"snippet": "urllib.parse.parse_qsl(qs, strict_parsing=False)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11681, "for": 11709079, "retrieval_score": 9.702707}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683, "for": 11709079, "retrieval_score": 9.702707}
{"snippet": "prototype(vtbl_index, name)", "intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method .", "question_id": 1807, "for": 11709079, "retrieval_score": 9.421277}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 17109608, "retrieval_score": 12.431047}
{"snippet": "pool.starmap(func, iterable)", "intent": "Like map ( ) except that the elements of the `iterable` are expected to be iterables that are unpacked as arguments . Hence an iterable of [ ( 1,2 ) , ( 3 , 4 ) ] results in [ `func` ( 1,2 ) , func ( 3,4 ) ] .", "question_id": 6351, "for": 17109608, "retrieval_score": 11.093258}
{"snippet": "pool.starmap(func, iterable, chunksize)", "intent": "Like map ( ) except that the elements of the `iterable` are expected to be iterables that are unpacked as arguments . Hence an iterable of [ ( 1,2 ) , ( 3 , 4 ) ] results in [ `func` ( 1,2 ) , func ( 3,4 ) ] . With arguments `chunksize`.", "question_id": 6350, "for": 17109608, "retrieval_score": 10.584264}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 17109608, "retrieval_score": 10.459569}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828, "for": 17109608, "retrieval_score": 10.2233515}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513, "for": 265960, "retrieval_score": 13.380646}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170, "for": 265960, "retrieval_score": 12.899647}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 265960, "retrieval_score": 8.874945}
{"snippet": "email.message_from_string(s)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) .", "question_id": 3404, "for": 265960, "retrieval_score": 8.483835}
{"snippet": "xml.etree.ElementTree.XMLID(text)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data .", "question_id": 12471, "for": 265960, "retrieval_score": 8.309811}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710, "for": 2229827, "retrieval_score": 14.835091}
{"snippet": "base64.standard_b64decode(s)", "intent": "Decode bytes-like object or ASCII string `s` using the standard Base64 alphabet and return the decoded bytes .", "question_id": 715, "for": 2229827, "retrieval_score": 14.221862}
{"snippet": "binary.decode(bytes)", "intent": "Accept a base64 `bytes` object and decode it as the instance \u2019 s new data .", "question_id": 12687, "for": 2229827, "retrieval_score": 12.925146}
{"snippet": "base64.urlsafe_b64decode(s)", "intent": "Decode bytes-like object or ASCII string `s` using the URL- and filesystem-safe alphabet , which substitutes - instead of + and _ instead of / in the standard Base64 alphabet , and return the decoded bytes .", "question_id": 717, "for": 2229827, "retrieval_score": 11.030215}
{"snippet": "base64.decodebytes(s)", "intent": "Decode the bytes-like object `s` , which must contain one or more lines of base64 encoded data , and return the decoded bytes .", "question_id": 748, "for": 2229827, "retrieval_score": 10.951219}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 35427814, "retrieval_score": 22.113129}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745, "for": 35427814, "retrieval_score": 16.039995}
{"snippet": "mailbox.iterkeys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5729, "for": 35427814, "retrieval_score": 15.1899395}
{"snippet": "mailbox.keys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5730, "for": 35427814, "retrieval_score": 15.1899395}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150, "for": 35427814, "retrieval_score": 15.018307}
{"snippet": "decimal.as_integer_ratio()", "intent": "Return a pair ( n , d ) of integers that represent the given Decimal instance as a fraction , in lowest terms and with a positive denominator :", "question_id": 2396, "for": 5796238, "retrieval_score": 14.032697}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 5796238, "retrieval_score": 12.52799}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 5796238, "retrieval_score": 12.415663}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 5796238, "retrieval_score": 11.562321}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 5796238, "retrieval_score": 11.562321}
{"snippet": "test.support.script_helper.make_pkg(pkg_dir)", "intent": "Create a directory named `pkg_dir` containing an __init__ file with `init_source` as its contents .", "question_id": 10312, "for": 13905936, "retrieval_score": 14.55017}
{"snippet": "test.support.script_helper.make_pkg(pkg_dir, init_source='')", "intent": "Create a directory named `pkg_dir` containing an __init__ file with `init_source` as its contents .", "question_id": 10313, "for": 13905936, "retrieval_score": 14.55017}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 13905936, "retrieval_score": 13.77739}
{"snippet": "element.keys()", "intent": "Returns the elements attribute names as a list .", "question_id": 12487, "for": 13905936, "retrieval_score": 13.625178}
{"snippet": "hash.hexdigest()", "intent": "Like digest ( ) except the digest is returned as a string object of double length , containing only hexadecimal digits .", "question_id": 4306, "for": 13905936, "retrieval_score": 13.459058}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688, "for": 13905936, "retrieval_score": 11.959749}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885, "for": 13905936, "retrieval_score": 9.790516}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512, "for": 13905936, "retrieval_score": 9.535444}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141, "for": 13905936, "retrieval_score": 8.652229}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513, "for": 13905936, "retrieval_score": 8.635524}
{"snippet": "FieldStorage.getfirst(name, default=None)", "intent": "This method always returns only one value associated with form field `name` . 1 If no such form field or value exists then the method returns the value specified by the optional parameter `default` .", "question_id": 1027, "for": 2582580, "retrieval_score": 11.487327}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729, "for": 2582580, "retrieval_score": 11.277663}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730, "for": 2582580, "retrieval_score": 11.277663}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028, "for": 2582580, "retrieval_score": 10.541297}
{"snippet": "NNTP.over(message_spec, file=None)", "intent": "Send an OVER command , or an XOVER command on legacy servers . `message_spec` can be either a string representing a message id , or a ( first , last ) tuple of numbers indicating a range of articles in the current group , or a ( first , None ) tuple indicating a range of articles starting from first to the last article in the current group , or None to select the current article in the current group . With arguments `file`.", "question_id": 6473, "for": 2582580, "retrieval_score": 10.265972}
{"snippet": "tokenize.open(filename)", "intent": "Open a file in read only mode using the encoding detected by detect_encoding ( ) . With arguments `filename`.", "question_id": 10704, "for": 13156395, "retrieval_score": 21.174152}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 13156395, "retrieval_score": 20.913338}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 13156395, "retrieval_score": 18.082653}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 13156395, "retrieval_score": 18.082653}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 13156395, "retrieval_score": 17.930157}
{"snippet": "json.JSONDecoder()", "intent": "Simple JSON decoder .", "question_id": 5310, "for": 13156395, "retrieval_score": 16.3353}
{"snippet": "json.JSONDecoder(parse_float=None)", "intent": "Simple JSON decoder . `parse_float` , if specified , will be called with the string of every JSON float to be decoded .", "question_id": 5312, "for": 13156395, "retrieval_score": 16.14924}
{"snippet": "json.JSONDecoder(parse_int=None)", "intent": "Simple JSON decoder . `parse_int` , if specified , will be called with the string of every JSON int to be decoded .", "question_id": 5313, "for": 13156395, "retrieval_score": 16.14924}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 13156395, "retrieval_score": 16.11045}
{"snippet": "json.JSONDecoder(object_pairs_hook=None)", "intent": "Simple JSON decoder . `object_pairs_hook` , if specified will be called with the result of every JSON object decoded with an ordered list of pairs .", "question_id": 5316, "for": 13156395, "retrieval_score": 15.700243}
{"snippet": "SMTP.helo()", "intent": "Identify yourself to the SMTP server using HELO .", "question_id": 8515, "for": 12030179, "retrieval_score": 19.101028}
{"snippet": "smtplib.SMTP(host='')", "intent": "An SMTP instance encapsulates an SMTP connection . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8459, "for": 12030179, "retrieval_score": 18.941185}
{"snippet": "smtplib.SMTP(port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8460, "for": 12030179, "retrieval_score": 18.941185}
{"snippet": "smtplib.SMTP(host='', port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8463, "for": 12030179, "retrieval_score": 18.941185}
{"snippet": "smtplib.SMTPDataError", "intent": "The SMTP server refused to accept the message data.", "question_id": 8503, "for": 12030179, "retrieval_score": 18.616028}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 12681945, "retrieval_score": 13.023512}
{"snippet": "int.bit_length()", "intent": "Return the number of bits necessary to represent an integer in binary , excluding the sign and leading zeros :", "question_id": 9142, "for": 12681945, "retrieval_score": 11.3068}
{"snippet": "random.randint(a, b)", "intent": "Return `a` random integer N such that a < = N < = b. Alias for randrange ( a , b+1 ) . With arguments `b`.", "question_id": 7893, "for": 12681945, "retrieval_score": 10.607239}
{"snippet": "context.remainder_near(x, y)", "intent": "Returns `x` - `y` * n , where n is the integer nearest the exact value of x / y ( if the result is 0 then its sign will be the sign of x ) .", "question_id": 2566, "for": 12681945, "retrieval_score": 10.134036}
{"snippet": "i_pv4_network.prefixlen", "intent": "Length of the network prefix, in bits.", "question_id": 5204, "for": 12681945, "retrieval_score": 9.265358}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 11040626, "retrieval_score": 11.352732}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 11040626, "retrieval_score": 11.166616}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 11040626, "retrieval_score": 10.525486}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 11040626, "retrieval_score": 10.236193}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 11040626, "retrieval_score": 9.818861}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 3294889, "retrieval_score": 17.922949}
{"snippet": "asyncio.AbstractEventLoop", "intent": "Abstract base class for asyncio-compliant event loops.", "question_id": 344, "for": 3294889, "retrieval_score": 13.523095}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 3294889, "retrieval_score": 13.233934}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3294889, "retrieval_score": 13.092902}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 3294889, "retrieval_score": 12.912863}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 3294889, "retrieval_score": 17.922949}
{"snippet": "asyncio.AbstractEventLoop", "intent": "Abstract base class for asyncio-compliant event loops.", "question_id": 344, "for": 3294889, "retrieval_score": 13.523095}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 3294889, "retrieval_score": 13.233934}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3294889, "retrieval_score": 13.092902}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 3294889, "retrieval_score": 12.912863}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 3294889, "retrieval_score": 19.71508}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 3294889, "retrieval_score": 17.922949}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 3294889, "retrieval_score": 17.424875}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 3294889, "retrieval_score": 15.499249}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 3294889, "retrieval_score": 15.281354}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 3294889, "retrieval_score": 19.71508}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 3294889, "retrieval_score": 17.922949}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 3294889, "retrieval_score": 17.424875}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 3294889, "retrieval_score": 15.499249}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 3294889, "retrieval_score": 15.281354}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 3294889, "retrieval_score": 20.912905}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3294889, "retrieval_score": 19.589859}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 3294889, "retrieval_score": 19.589859}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 3294889, "retrieval_score": 14.851066}
{"snippet": "collections.abc.MappingView", "intent": "ABCs for mapping, items, keys, and values views.", "question_id": 1326, "for": 3294889, "retrieval_score": 13.473596}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3294889, "retrieval_score": 24.15742}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 3294889, "retrieval_score": 20.912905}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 3294889, "retrieval_score": 19.589859}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 3294889, "retrieval_score": 16.652567}
{"snippet": "mailbox.iterkeys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5729, "for": 3294889, "retrieval_score": 15.378542}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 3294889, "retrieval_score": 19.71508}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 3294889, "retrieval_score": 17.922949}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 3294889, "retrieval_score": 17.424875}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 3294889, "retrieval_score": 15.499249}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 3294889, "retrieval_score": 15.281354}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 3294889, "retrieval_score": 19.71508}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 3294889, "retrieval_score": 17.922949}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 3294889, "retrieval_score": 17.424875}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 3294889, "retrieval_score": 15.499249}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 3294889, "retrieval_score": 15.281354}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 3294889, "retrieval_score": 19.71508}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 3294889, "retrieval_score": 17.922949}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 3294889, "retrieval_score": 17.424875}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 3294889, "retrieval_score": 15.499249}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 3294889, "retrieval_score": 15.281354}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 18102109, "retrieval_score": 18.348074}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 18102109, "retrieval_score": 18.348074}
{"snippet": "cursor.description", "intent": "This read-only attribute provides the column names of the last query.", "question_id": 8852, "for": 18102109, "retrieval_score": 14.267253}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 18102109, "retrieval_score": 14.128056}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210, "for": 18102109, "retrieval_score": 13.850517}
{"snippet": "sys._xoptions", "intent": "A dictionary of the various implementation-specific flags passed through the -X command-line option.", "question_id": 9857, "for": 498106, "retrieval_score": 15.02799}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 498106, "retrieval_score": 14.195794}
{"snippet": "inspect_loader.source_to_code(data)", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e .", "question_id": 4829, "for": 498106, "retrieval_score": 12.329429}
{"snippet": "py_compile.main(args=None)", "intent": "Compile several source files . The files named in `args` ( or on the command line , if args is None ) are compiled and the resulting byte-code is cached in the normal manner .", "question_id": 7836, "for": 498106, "retrieval_score": 10.968344}
{"snippet": "unittest.main(failfast=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `failfast` , `catchbreak` and `buffer` parameters have the same effect as the same-name command-line options .", "question_id": 11553, "for": 498106, "retrieval_score": 10.203241}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 3108042, "retrieval_score": 12.455594}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 3108042, "retrieval_score": 12.455594}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490, "for": 3108042, "retrieval_score": 12.176235}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 3108042, "retrieval_score": 10.812257}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 3108042, "retrieval_score": 10.660431}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 6856119, "retrieval_score": 16.54514}
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` .", "question_id": 10308, "for": 6856119, "retrieval_score": 12.618475}
{"snippet": "typing.Pattern", "intent": "These type aliases correspond to the return types from re.compile() and re.match().", "question_id": 11318, "for": 6856119, "retrieval_score": 12.479916}
{"snippet": "typing.Match", "intent": "These type aliases correspond to the return types from re.compile() and re.match().", "question_id": 11319, "for": 6856119, "retrieval_score": 12.479916}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836, "for": 6856119, "retrieval_score": 12.06954}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020, "for": 251464, "retrieval_score": 15.308147}
{"snippet": "sys.getprofile()", "intent": "Get the profiler function as set by setprofile ( ) .", "question_id": 9807, "for": 251464, "retrieval_score": 15.275843}
{"snippet": "sys.gettrace()", "intent": "Get the trace function as set by settrace ( ) .", "question_id": 9808, "for": 251464, "retrieval_score": 15.275843}
{"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816, "for": 251464, "retrieval_score": 13.800856}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010, "for": 251464, "retrieval_score": 13.405671}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020, "for": 251464, "retrieval_score": 18.030487}
{"snippet": "sys.float_repr_style", "intent": "A string indicating how the repr() function behaves for floats.", "question_id": 9792, "for": 251464, "retrieval_score": 14.17884}
{"snippet": "__import__(name)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4135, "for": 251464, "retrieval_score": 13.870185}
{"snippet": "__import__(name, globals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4136, "for": 251464, "retrieval_score": 13.870185}
{"snippet": "__import__(name, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4137, "for": 251464, "retrieval_score": 13.870185}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997, "for": 14859458, "retrieval_score": 16.175318}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 14859458, "retrieval_score": 14.5013275}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929, "for": 14859458, "retrieval_score": 13.092545}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 14859458, "retrieval_score": 12.939098}
{"snippet": "message.get_all(name, failobj=None)", "intent": "Return a list of all the values for the field named `name` . If there are no such named headers in the message , `failobj` is returned ( defaults to None ) .", "question_id": 2975, "for": 14859458, "retrieval_score": 12.841369}
{"snippet": "test_case.assertCountEqual(first, second)", "intent": "Test that sequence `first` contains the same elements as `second` , regardless of their order .", "question_id": 11445, "for": 40384599, "retrieval_score": 18.414143}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227, "for": 40384599, "retrieval_score": 17.943247}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 40384599, "retrieval_score": 17.425362}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 40384599, "retrieval_score": 17.259344}
{"snippet": "test_case.assertCountEqual(first, second, msg=None)", "intent": "Test that sequence `first` contains the same elements as `second` , regardless of their order . With arguments `msg`.", "question_id": 11446, "for": 40384599, "retrieval_score": 17.248281}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 40384599, "retrieval_score": 25.207666}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 40384599, "retrieval_score": 23.087444}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 40384599, "retrieval_score": 21.273184}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734, "for": 40384599, "retrieval_score": 20.654593}
{"snippet": "urllib.parse.urlencode(query, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11737, "for": 40384599, "retrieval_score": 20.534773}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 40384599, "retrieval_score": 20.318905}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 40384599, "retrieval_score": 19.588633}
{"snippet": "urllib.parse.urlencode(query, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11737, "for": 40384599, "retrieval_score": 18.443151}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 40384599, "retrieval_score": 18.324827}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734, "for": 40384599, "retrieval_score": 18.236029}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 40384599, "retrieval_score": 22.462782}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 40384599, "retrieval_score": 21.224955}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 40384599, "retrieval_score": 21.132507}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 40384599, "retrieval_score": 20.243383}
{"snippet": "time.process_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current process .", "question_id": 10450, "for": 40384599, "retrieval_score": 19.944769}
{"snippet": "headers.add_header(name, value, **_params)", "intent": "Add a ( possibly multi-valued ) header , with optional MIME parameters specified via keyword arguments . `name` is the header field to add . If the parameter `value` is a string , it is added to the header value parameters in the form name= '' value '' . With arguments `**_params`.", "question_id": 12222, "for": 19410585, "retrieval_score": 15.43844}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967, "for": 19410585, "retrieval_score": 14.642818}
{"snippet": "email_message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 3244, "for": 19410585, "retrieval_score": 14.642818}
{"snippet": "unittest.TextTestRunner(descriptions=True)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `descriptions`.", "question_id": 11535, "for": 19410585, "retrieval_score": 14.160843}
{"snippet": "unittest.TextTestRunner(verbosity=1)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `verbosity`.", "question_id": 11536, "for": 19410585, "retrieval_score": 14.160843}
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060, "for": 2375335, "retrieval_score": 11.46722}
{"snippet": "CookieJar.clear_session_cookies()", "intent": "Discard all session cookies .", "question_id": 4497, "for": 2375335, "retrieval_score": 9.797743}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027, "for": 2375335, "retrieval_score": 9.522398}
{"snippet": "window.erase()", "intent": "Clear the window .", "question_id": 2048, "for": 2375335, "retrieval_score": 9.176683}
{"snippet": "CookieJar.clear()", "intent": "Clear some cookies .", "question_id": 4496, "for": 2375335, "retrieval_score": 9.176683}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 2803852, "retrieval_score": 27.925873}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 2803852, "retrieval_score": 23.778336}
{"snippet": "date.isoformat()", "intent": "Return a string representing the date in ISO 8601 format , \u2018 YYYY-MM-DD \u2019 .", "question_id": 2242, "for": 2803852, "retrieval_score": 20.312511}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245, "for": 2803852, "retrieval_score": 19.73492}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246, "for": 2803852, "retrieval_score": 19.73325}
{"snippet": "stringprep.in_table_c12(code)", "intent": "Determine whether `code` is in tableC.1.2 ( Non-ASCII space characters ) .", "question_id": 9536, "for": 20078816, "retrieval_score": 23.862926}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707, "for": 20078816, "retrieval_score": 20.877466}
{"snippet": "urllib.parse.quote(string, errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11708, "for": 20078816, "retrieval_score": 20.877466}
{"snippet": "urllib.parse.quote(string, encoding=None, errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11711, "for": 20078816, "retrieval_score": 20.877466}
{"snippet": "stringprep.in_table_c11(code)", "intent": "Determine whether `code` is in tableC.1.1 ( ASCII space characters ) .", "question_id": 9535, "for": 20078816, "retrieval_score": 19.503532}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 10346336, "retrieval_score": 15.476971}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283, "for": 10346336, "retrieval_score": 11.664924}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 10346336, "retrieval_score": 11.640494}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 10346336, "retrieval_score": 10.432623}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 10346336, "retrieval_score": 9.160606}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 11479392, "retrieval_score": 11.150116}
{"snippet": "SSLContext.get_ca_certs()", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates .", "question_id": 9011, "for": 11479392, "retrieval_score": 10.300767}
{"snippet": "pkgutil.get_data(package, resource)", "intent": "Get a `resource` from a `package` .", "question_id": 7457, "for": 11479392, "retrieval_score": 10.239011}
{"snippet": "fraction.__round__(ndigits)", "intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "question_id": 3876, "for": 11479392, "retrieval_score": 9.9044485}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 11479392, "retrieval_score": 9.719839}
{"snippet": "errno.EL2HLT", "intent": "Level 2 halted", "question_id": 3556, "for": 40582103, "retrieval_score": 28.007038}
{"snippet": "errno.EL2NSYNC", "intent": "Level 2 not synchronized", "question_id": 3550, "for": 40582103, "retrieval_score": 27.192492}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 40582103, "retrieval_score": 25.010313}
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910, "for": 40582103, "retrieval_score": 25.010313}
{"snippet": "ssl.PROTOCOL_SSLv2", "intent": "Selects SSL version 2 as the channel encryption protocol.", "question_id": 8925, "for": 40582103, "retrieval_score": 23.740221}
{"snippet": "system_random.pattern", "intent": "The regular expression pattern.", "question_id": 7966, "for": 40582103, "retrieval_score": 15.39872}
{"snippet": "re.compile(pattern, flags=0)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below . The expression \u2019 s behaviour can be modified by specifying a `flags` value .", "question_id": 7923, "for": 40582103, "retrieval_score": 15.054245}
{"snippet": "re.purge()", "intent": "Clear the regular expression cache .", "question_id": 7960, "for": 40582103, "retrieval_score": 14.963525}
{"snippet": "Pattern.fullmatch(string)", "intent": "If the whole `string` matches this regular expression , return a corresponding match object .", "question_id": 7978, "for": 40582103, "retrieval_score": 14.842097}
{"snippet": "ConfigParser.SECTCRE", "intent": "A compiled regular expression used to parse section headers.", "question_id": 1495, "for": 40582103, "retrieval_score": 14.713096}
{"snippet": "resource.RLIMIT_MEMLOCK", "intent": "The maximum address space which may be locked in memory.", "question_id": 8084, "for": 41071947, "retrieval_score": 9.385227}
{"snippet": "stringprep.in_table_c11(code)", "intent": "Determine whether `code` is in tableC.1.1 ( ASCII space characters ) .", "question_id": 9535, "for": 41071947, "retrieval_score": 8.991961}
{"snippet": "stringprep.in_table_c12(code)", "intent": "Determine whether `code` is in tableC.1.2 ( Non-ASCII space characters ) .", "question_id": 9536, "for": 41071947, "retrieval_score": 8.774676}
{"snippet": "domain_filter.inclusive", "intent": "If inclusive is True (include), match memory blocks allocated in the address space domain.", "question_id": 10852, "for": 41071947, "retrieval_score": 8.539397}
{"snippet": "resource.RLIMIT_AS", "intent": "The maximum area (in bytes) of address space which may be taken by the process.", "question_id": 8086, "for": 41071947, "retrieval_score": 8.463265}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 10201977, "retrieval_score": 11.075131}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 10201977, "retrieval_score": 10.607663}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 10201977, "retrieval_score": 8.703225}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319, "for": 10201977, "retrieval_score": 8.306769}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 10201977, "retrieval_score": 8.280191}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322, "for": 983855, "retrieval_score": 12.42593}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333, "for": 983855, "retrieval_score": 11.224878}
{"snippet": "json_decoder.decode(s)", "intent": "Return the Python representation of `s` ( a str instance containing a JSON document ) .", "question_id": 5320, "for": 983855, "retrieval_score": 10.707405}
{"snippet": "json.JSONEncoder(skipkeys=False)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None .", "question_id": 5323, "for": 983855, "retrieval_score": 10.536196}
{"snippet": "json.JSONEncoder(default=None)", "intent": "Extensible JSON encoder for Python data structures . Supports the following objects and types by `default` :", "question_id": 5330, "for": 983855, "retrieval_score": 10.235542}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 6916542, "retrieval_score": 15.155273}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 6916542, "retrieval_score": 14.93359}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735, "for": 6916542, "retrieval_score": 14.4739}
{"snippet": "csv.writer(csvfile, **fmtparams, dialect='excel')", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1683, "for": 6916542, "retrieval_score": 14.091352}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736, "for": 6916542, "retrieval_score": 13.042747}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 794995, "retrieval_score": 22.54042}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 794995, "retrieval_score": 21.372799}
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223, "for": 794995, "retrieval_score": 16.250862}
{"snippet": "date.max", "intent": "The latest representable date, date(MAXYEAR, 12, 31).", "question_id": 2224, "for": 794995, "retrieval_score": 16.250862}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 794995, "retrieval_score": 14.819809}
{"snippet": "locale.YESEXPR", "intent": "Get a regular expression that can be used with the regex function to recognize a positive response to a yes/no question.", "question_id": 5365, "for": 5801945, "retrieval_score": 16.782862}
{"snippet": "locale.NOEXPR", "intent": "Get a regular expression that can be used with the regex(3) function to recognize a negative response to a yes/no question.", "question_id": 5366, "for": 5801945, "retrieval_score": 16.477404}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442, "for": 5801945, "retrieval_score": 16.295847}
{"snippet": "test_case.assertNotRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11444, "for": 5801945, "retrieval_score": 16.295847}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 5801945, "retrieval_score": 16.094742}
{"snippet": "system_random.pattern", "intent": "The regular expression pattern.", "question_id": 7966, "for": 372102, "retrieval_score": 23.459341}
{"snippet": "re.fullmatch(pattern, string)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object .", "question_id": 7941, "for": 372102, "retrieval_score": 21.214302}
{"snippet": "re.fullmatch(pattern, string, flags=0)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7942, "for": 372102, "retrieval_score": 21.088339}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922, "for": 372102, "retrieval_score": 20.758451}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816, "for": 372102, "retrieval_score": 20.222572}
{"snippet": "contextvars.ContextVar(name)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes .", "question_id": 1638, "for": 1514553, "retrieval_score": 13.257578}
{"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637, "for": 1514553, "retrieval_score": 11.123169}
{"snippet": "multiprocessing.Condition()", "intent": "A condition variable : an alias for threading.Condition .", "question_id": 6249, "for": 1514553, "retrieval_score": 9.34597}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 1514553, "retrieval_score": 8.8579645}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 1514553, "retrieval_score": 8.653728}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 1514553, "retrieval_score": 13.870441}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 1514553, "retrieval_score": 13.870441}
{"snippet": "array.pop()", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 133, "for": 1514553, "retrieval_score": 13.870441}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 1514553, "retrieval_score": 13.000733}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 1514553, "retrieval_score": 12.372152}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 39821166, "retrieval_score": 22.850142}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 39821166, "retrieval_score": 21.885664}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 39821166, "retrieval_score": 18.512821}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 39821166, "retrieval_score": 17.721937}
{"snippet": "deque.reverse()", "intent": "Reverse the elements of the deque in-place and then return None .", "question_id": 1367, "for": 39821166, "retrieval_score": 17.140474}
{"snippet": "str.isalnum()", "intent": "Return true if all characters in the string are alphanumeric and there is at least one character , false otherwise .", "question_id": 9202, "for": 12985456, "retrieval_score": 19.761757}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 12985456, "retrieval_score": 17.190098}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707, "for": 12985456, "retrieval_score": 16.30881}
{"snippet": "urllib.parse.quote(string, errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11708, "for": 12985456, "retrieval_score": 16.30881}
{"snippet": "urllib.parse.quote(string, encoding=None, errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11711, "for": 12985456, "retrieval_score": 16.30881}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976, "for": 20876077, "retrieval_score": 34.895874}
{"snippet": "audioop.ulaw2lin(fragment, width)", "intent": "Convert sound fragments in u-LAW encoding to linearly encoded sound fragments . u-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .", "question_id": 707, "for": 20876077, "retrieval_score": 30.298847}
{"snippet": "audioop.lin2ulaw(fragment, width)", "intent": "Convert samples in the audio `fragment` to u-LAW encoding and return this as a bytes object . With arguments `width`.", "question_id": 695, "for": 20876077, "retrieval_score": 25.932922}
{"snippet": "xml.sax.saxutils.unescape(data, entities={})", "intent": "Unescape ' & amp ; ' , ' & lt ; ' , and ' & gt ; ' in a string of `data` . You can unescape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12655, "for": 20876077, "retrieval_score": 25.269842}
{"snippet": "SSLContext.set_servername_callback(server_name_callback)", "intent": "This is a legacy API retained for backwards compatibility . The given `server_name_callback` is similar to sni_callback , except that when the server hostname is an IDN-encoded internationalized domain name , the server_name_callback receives a decoded U-label ( `` pyth\u00f6n.org '' ) .", "question_id": 9019, "for": 20876077, "retrieval_score": 18.234594}
{"snippet": "test.support.WarningsRecorder", "intent": "Class used to record warnings for unit tests.", "question_id": 10295, "for": 5255657, "retrieval_score": 16.368706}
{"snippet": "test_loader.errors", "intent": "A list of the non-fatal errors encountered while loading tests.", "question_id": 11490, "for": 5255657, "retrieval_score": 13.371493}
{"snippet": "@test.support.skip_unless_xattr", "intent": "A decorator for running tests that require support for xattr.", "question_id": 10206, "for": 5255657, "retrieval_score": 12.589372}
{"snippet": "@test.support.skip_unless_symlink", "intent": "A decorator for running tests that require support for symbolic links.", "question_id": 10205, "for": 5255657, "retrieval_score": 12.285159}
{"snippet": "future.set_running_or_notify_cancel()", "intent": "This method should only be called by Executor implementations before executing the work associated with the Future and by unit tests .", "question_id": 1477, "for": 5255657, "retrieval_score": 12.22743}
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695, "for": 13042013, "retrieval_score": 15.729143}
{"snippet": "robot_file_parser.set_url(url)", "intent": "Sets the URL referring to a robots.txt file . With arguments `url`.", "question_id": 11909, "for": 13042013, "retrieval_score": 15.235434}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 13042013, "retrieval_score": 14.323204}
{"snippet": "urllib.parse.urljoin(base, url, allow_fragments=True)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) . The `allow_fragments` argument has the same meaning and default as for urlparse ( ) .", "question_id": 11696, "for": 13042013, "retrieval_score": 14.248745}
{"snippet": "Request.full_url", "intent": "The original URL passed to the constructor.", "question_id": 11816, "for": 13042013, "retrieval_score": 13.486363}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 19738169, "retrieval_score": 19.118286}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340, "for": 19738169, "retrieval_score": 17.209684}
{"snippet": "ArgumentParser.parse_args()", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 69, "for": 19738169, "retrieval_score": 16.886703}
{"snippet": "ArgumentParser.parse_args(namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 71, "for": 19738169, "retrieval_score": 16.886703}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 19738169, "retrieval_score": 16.34804}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 15210485, "retrieval_score": 14.639816}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 15210485, "retrieval_score": 13.814204}
{"snippet": "re.split(pattern, string, maxsplit=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list .", "question_id": 7944, "for": 15210485, "retrieval_score": 13.012045}
{"snippet": "re.split(pattern, string, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . With arguments `flags`.", "question_id": 7945, "for": 15210485, "retrieval_score": 12.787978}
{"snippet": "re.split(pattern, string, maxsplit=0, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "question_id": 7946, "for": 15210485, "retrieval_score": 12.453399}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 41513324, "retrieval_score": 31.709467}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 41513324, "retrieval_score": 31.709467}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 41513324, "retrieval_score": 26.162043}
{"snippet": "context.next_minus(x)", "intent": "Returns the largest representable number smaller than `x` .", "question_id": 2555, "for": 41513324, "retrieval_score": 22.608429}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841, "for": 41513324, "retrieval_score": 21.725021}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 41513324, "retrieval_score": 28.190514}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 41513324, "retrieval_score": 28.190514}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194, "for": 41513324, "retrieval_score": 22.832985}
{"snippet": "str.find(sub, start)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9195, "for": 41513324, "retrieval_score": 22.832985}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 41513324, "retrieval_score": 22.832985}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 26266362, "retrieval_score": 14.012918}
{"snippet": "tracemalloc.get_traceback_limit()", "intent": "Get the maximum number of frames stored in the traceback of a trace .", "question_id": 10843, "for": 26266362, "retrieval_score": 13.458175}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038, "for": 26266362, "retrieval_score": 13.290571}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 26266362, "retrieval_score": 12.4522085}
{"snippet": "cmath.nan", "intent": "A floating-point \u201cnot a number\u201d (NaN) value.", "question_id": 1125, "for": 26266362, "retrieval_score": 12.3802185}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 20110170, "retrieval_score": 20.240824}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 20110170, "retrieval_score": 16.936632}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360, "for": 20110170, "retrieval_score": 15.991113}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361, "for": 20110170, "retrieval_score": 15.991113}
{"snippet": "deque.index(x)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1362, "for": 20110170, "retrieval_score": 15.991113}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 7271482, "retrieval_score": 25.82638}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028, "for": 7271482, "retrieval_score": 25.070965}
{"snippet": "ZipFile.infolist()", "intent": "Return a list containing a ZipInfo object for each member of the archive .", "question_id": 12804, "for": 7271482, "retrieval_score": 23.51138}
{"snippet": "msilib.FCICreate(cabname, files)", "intent": "Create a new CAB file named `cabname` . `files` must be a list of tuples , each containing the name of the file on disk , and the name of the file inside the CAB file .", "question_id": 6058, "for": 7271482, "retrieval_score": 22.830729}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 7271482, "retrieval_score": 22.724525}
{"snippet": "SSLContext.get_ca_certs(binary_form=False)", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "question_id": 9012, "for": 7271482, "retrieval_score": 15.971346}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 7271482, "retrieval_score": 15.652459}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 7271482, "retrieval_score": 15.456962}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 7271482, "retrieval_score": 14.512194}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 7271482, "retrieval_score": 14.356211}
{"snippet": "SSLContext.get_ca_certs(binary_form=False)", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "question_id": 9012, "for": 7271482, "retrieval_score": 15.971346}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 7271482, "retrieval_score": 15.652459}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 7271482, "retrieval_score": 15.456962}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 7271482, "retrieval_score": 14.512194}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 7271482, "retrieval_score": 14.356211}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 1966207, "retrieval_score": 16.01915}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 1966207, "retrieval_score": 13.456839}
{"snippet": "sqlite3.register_adapter(type, callable)", "intent": "Registers a `callable` to convert the custom Python `type` type into one of SQLite \u2019 s supported types .", "question_id": 8800, "for": 1966207, "retrieval_score": 12.653394}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333, "for": 1966207, "retrieval_score": 11.1321125}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698, "for": 1966207, "retrieval_score": 10.905937}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 3945856, "retrieval_score": 22.374426}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 3945856, "retrieval_score": 17.091795}
{"snippet": "audioop.lin2adpcm(fragment, width, state)", "intent": "Convert samples to 4 bit Intel/DVI ADPCM encoding . adpcmfrag is the ADPCM coded `fragment` packed 2 4-bit values per byte . `state` is a tuple containing the state of the coder . With arguments `width`.", "question_id": 692, "for": 3945856, "retrieval_score": 14.2565365}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 3945856, "retrieval_score": 12.959112}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 3945856, "retrieval_score": 12.959112}
{"snippet": "snapshot.statistics(key_type: str)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`.", "question_id": 10876, "for": 12324456, "retrieval_score": 16.138407}
{"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877, "for": 12324456, "retrieval_score": 15.471303}
{"snippet": "inspect.getmembers(object)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name .", "question_id": 4946, "for": 12324456, "retrieval_score": 14.182099}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 12324456, "retrieval_score": 13.19219}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 12324456, "retrieval_score": 12.940626}
{"snippet": "widget.selection_remove(*items)", "intent": "Remove items from the selection . With arguments `*items`.", "question_id": 10656, "for": 3724551, "retrieval_score": 17.94048}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 3724551, "retrieval_score": 17.22132}
{"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700, "for": 3724551, "retrieval_score": 16.760653}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 3724551, "retrieval_score": 15.105549}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 3724551, "retrieval_score": 14.599652}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 3724551, "retrieval_score": 11.31233}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 3724551, "retrieval_score": 10.106317}
{"snippet": "email.utils.make_msgid(idstring=None)", "intent": "Returns a string suitable for an RFC 2822-compliant Message-ID header . Optional `idstring` if given , is a string used to strengthen the uniqueness of the message id .", "question_id": 3455, "for": 3724551, "retrieval_score": 9.698601}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 3724551, "retrieval_score": 9.160606}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045, "for": 3724551, "retrieval_score": 8.732241}
{"snippet": "TarInfo.gid", "intent": "Group ID of the user who originally stored this member.", "question_id": 9988, "for": 4789021, "retrieval_score": 18.612198}
{"snippet": "TarInfo.uid", "intent": "User ID of the user who originally stored this member.", "question_id": 9987, "for": 4789021, "retrieval_score": 13.812016}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 4789021, "retrieval_score": 13.710991}
{"snippet": "inspect.isroutine(object)", "intent": "Return true if the `object` is a user-defined or built-in function or method .", "question_id": 4963, "for": 4789021, "retrieval_score": 13.002318}
{"snippet": "os.initgroups(username, gid)", "intent": "Call the system initgroups ( ) to initialize the group access list with all of the groups of which the specified `username` is a member , plus the specified group id . With arguments `gid`.", "question_id": 6691, "for": 4789021, "retrieval_score": 12.5371}
{"snippet": "os.getgrouplist(user, group)", "intent": "Return list of `group` ids that `user` belongs to .", "question_id": 6677, "for": 4789021, "retrieval_score": 22.944565}
{"snippet": "chain_map.maps", "intent": "A user updateable list of mappings.", "question_id": 1336, "for": 4789021, "retrieval_score": 19.73586}
{"snippet": "shutil.chown(path)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8341, "for": 4789021, "retrieval_score": 18.41773}
{"snippet": "shutil.chown(path, user=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8342, "for": 4789021, "retrieval_score": 18.41773}
{"snippet": "shutil.chown(path, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8343, "for": 4789021, "retrieval_score": 18.41773}
{"snippet": "ZipFile.debug", "intent": "The level of debug output to use.", "question_id": 12844, "for": 19617355, "retrieval_score": 15.210301}
{"snippet": "SMTP.set_debuglevel(level)", "intent": "Set the debug output `level` .", "question_id": 8508, "for": 19617355, "retrieval_score": 14.657198}
{"snippet": "Telnet.msg(msg, *args)", "intent": "Print a debug message when the debug level is > 0 . With arguments `msg`, `*args`.", "question_id": 10022, "for": 19617355, "retrieval_score": 13.748583}
{"snippet": "Telnet.set_debuglevel(debuglevel)", "intent": "Set the debug level . The higher the value of `debuglevel` , the more debug output you get ( on sys.stdout ) .", "question_id": 10023, "for": 19617355, "retrieval_score": 13.054545}
{"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508, "for": 19617355, "retrieval_score": 12.916055}
{"snippet": "winreg.REG_QWORD_LITTLE_ENDIAN", "intent": "A 64-bit number in little-endian format.", "question_id": 12183, "for": 17426386, "retrieval_score": 13.321688}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372, "for": 17426386, "retrieval_score": 12.694493}
{"snippet": "winreg.REG_QWORD", "intent": "A 64-bit number.", "question_id": 12182, "for": 17426386, "retrieval_score": 12.606412}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426, "for": 17426386, "retrieval_score": 12.369302}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020, "for": 17426386, "retrieval_score": 12.066117}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 4605439, "retrieval_score": 13.385419}
{"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346, "for": 4605439, "retrieval_score": 13.385419}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513, "for": 4605439, "retrieval_score": 11.824064}
{"snippet": "text_io_base.write(s)", "intent": "Write the string `s` to the stream and return the number of characters written .", "question_id": 5145, "for": 4605439, "retrieval_score": 11.788832}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348, "for": 4605439, "retrieval_score": 10.994384}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499, "for": 9402255, "retrieval_score": 14.22531}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4502, "for": 9402255, "retrieval_score": 14.104721}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503, "for": 9402255, "retrieval_score": 14.0664625}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4505, "for": 9402255, "retrieval_score": 13.906099}
{"snippet": "FileCookieJar.save(ignore_discard=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4500, "for": 9402255, "retrieval_score": 13.05044}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 41313232, "retrieval_score": 24.59051}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 41313232, "retrieval_score": 23.474407}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762, "for": 41313232, "retrieval_score": 22.903536}
{"snippet": "Packer.pack_list(list, pack_item)", "intent": "Packs a `list` of homogeneous items . `pack_item` is the function that is called to pack the individual item .", "question_id": 12282, "for": 41313232, "retrieval_score": 21.756428}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 41313232, "retrieval_score": 20.888178}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 2191699, "retrieval_score": 18.093458}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 2191699, "retrieval_score": 17.749847}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 2191699, "retrieval_score": 16.891968}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971, "for": 2191699, "retrieval_score": 15.548121}
{"snippet": "email_message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 3248, "for": 2191699, "retrieval_score": 15.548121}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 2191699, "retrieval_score": 23.81517}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 2191699, "retrieval_score": 21.60479}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 2191699, "retrieval_score": 20.208914}
{"snippet": "urllib.parse.urlencode(query, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11737, "for": 2191699, "retrieval_score": 20.137114}
{"snippet": "urllib.parse.urlencode(query, doseq=False, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11741, "for": 2191699, "retrieval_score": 19.451042}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 18816297, "retrieval_score": 21.762512}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 18816297, "retrieval_score": 19.965002}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156, "for": 18816297, "retrieval_score": 19.079859}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 18816297, "retrieval_score": 19.010965}
{"snippet": "FTP.mlsd()", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) .", "question_id": 3947, "for": 18816297, "retrieval_score": 18.273993}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 6280978, "retrieval_score": 12.755346}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 6280978, "retrieval_score": 11.662018}
{"snippet": "SSLContext.get_ca_certs(binary_form=False)", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "question_id": 9012, "for": 6280978, "retrieval_score": 10.7794895}
{"snippet": "loop.call_exception_handler(context)", "intent": "Call the current event loop exception handler . `context` is a dict object containing the following keys ( new keys may be introduced in future Python versions ) :", "question_id": 310, "for": 6280978, "retrieval_score": 10.306892}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244, "for": 6280978, "retrieval_score": 10.054537}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184, "for": 5280178, "retrieval_score": 15.91082}
{"snippet": "FileCookieJar.load()", "intent": "Load cookies from a file .", "question_id": 4506, "for": 5280178, "retrieval_score": 14.6763525}
{"snippet": "winreg.LoadKey(key, sub_key, file_name)", "intent": "Creates a subkey under the specified `key` and stores registration information from a specified file into that subkey . `sub_key` is a string that identifies the subkey to load . `file_name` is the name of the file to load registry data from .", "question_id": 12137, "for": 5280178, "retrieval_score": 14.182155}
{"snippet": "py_zip_file.writepy(pathname)", "intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) .", "question_id": 12856, "for": 5280178, "retrieval_score": 13.591211}
{"snippet": "FileCookieJar.load(filename=None)", "intent": "Load cookies from a file . With arguments `filename`.", "question_id": 4507, "for": 5280178, "retrieval_score": 13.529268}
{"snippet": "cursor.arraysize", "intent": "Read/write attribute that controls the number of rows returned by fetchmany().", "question_id": 8851, "for": 10822635, "retrieval_score": 13.20444}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846, "for": 10822635, "retrieval_score": 13.009974}
{"snippet": "test.support.fd_count()", "intent": "Count the number of open file descriptors .", "question_id": 10154, "for": 10822635, "retrieval_score": 13.009403}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357, "for": 10822635, "retrieval_score": 12.348751}
{"snippet": "symbol_table.get_lineno()", "intent": "Return the number of the first line in the block this table represents .", "question_id": 9737, "for": 10822635, "retrieval_score": 12.220139}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168, "for": 18742657, "retrieval_score": 12.466026}
{"snippet": "turtle.write_docstringdict(filename=\"turtle_docstringdict\")", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11169, "for": 18742657, "retrieval_score": 12.466026}
{"snippet": "Template.append(cmd, kind)", "intent": "Append a new action at the end . The `cmd` variable must be a valid bourne shell command . The `kind` variable consists of two letters .", "question_id": 7431, "for": 18742657, "retrieval_score": 11.915606}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 18742657, "retrieval_score": 11.686057}
{"snippet": "subprocess.Popen(args, executable=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9601, "for": 18742657, "retrieval_score": 10.350047}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 16888888, "retrieval_score": 18.189337}
{"snippet": "csv.excel_tab", "intent": "The excel_tab class defines the usual properties of an Excel-generated TAB-delimited file.", "question_id": 1712, "for": 16888888, "retrieval_score": 14.809069}
{"snippet": "fileinput.filename()", "intent": "Return the name of the file currently being read .", "question_id": 3792, "for": 16888888, "retrieval_score": 13.658925}
{"snippet": "plistlib.readPlist(pathOrFile)", "intent": "Read a plist file . `pathOrFile` may be either a file name or a ( readable and binary ) file object .", "question_id": 7579, "for": 16888888, "retrieval_score": 13.481906}
{"snippet": "fileinput.hook_encoded(encoding)", "intent": "Returns a hook which opens each file with open ( ) , using the given `encoding` and `errors` to read the file .", "question_id": 3811, "for": 16888888, "retrieval_score": 12.977222}
{"snippet": "binascii.a2b_hex(hexstr)", "intent": "Return the binary data represented by the hexadecimal string `hexstr` .", "question_id": 845, "for": 38831808, "retrieval_score": 29.952795}
{"snippet": "binascii.unhexlify(hexstr)", "intent": "Return the binary data represented by the hexadecimal string `hexstr` .", "question_id": 846, "for": 38831808, "retrieval_score": 29.952795}
{"snippet": "float.fromhex(s)", "intent": "Class method to return the float represented by a hexadecimal string s. The string `s` may have leading and trailing whitespace .", "question_id": 9150, "for": 38831808, "retrieval_score": 24.841272}
{"snippet": "binascii.b2a_hex(data)", "intent": "Return the hexadecimal representation of the binary `data` .", "question_id": 843, "for": 38831808, "retrieval_score": 18.187172}
{"snippet": "binascii.hexlify(data)", "intent": "Return the hexadecimal representation of the binary `data` .", "question_id": 844, "for": 38831808, "retrieval_score": 18.187172}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 5508352, "retrieval_score": 19.966366}
{"snippet": "array.pop()", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 133, "for": 5508352, "retrieval_score": 19.966366}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 5508352, "retrieval_score": 17.678808}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984, "for": 5508352, "retrieval_score": 17.168394}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 5508352, "retrieval_score": 17.080627}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 9040939, "retrieval_score": 17.581448}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 9040939, "retrieval_score": 15.585413}
{"snippet": "pool.starmap(func, iterable)", "intent": "Like map ( ) except that the elements of the `iterable` are expected to be iterables that are unpacked as arguments . Hence an iterable of [ ( 1,2 ) , ( 3 , 4 ) ] results in [ `func` ( 1,2 ) , func ( 3,4 ) ] .", "question_id": 6351, "for": 9040939, "retrieval_score": 15.188397}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 9040939, "retrieval_score": 15.157933}
{"snippet": "pool.starmap(func, iterable, chunksize)", "intent": "Like map ( ) except that the elements of the `iterable` are expected to be iterables that are unpacked as arguments . Hence an iterable of [ ( 1,2 ) , ( 3 , 4 ) ] results in [ `func` ( 1,2 ) , func ( 3,4 ) ] . With arguments `chunksize`.", "question_id": 6350, "for": 9040939, "retrieval_score": 14.504799}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 36518800, "retrieval_score": 24.334162}
{"snippet": "NNTP.list()", "intent": "Send a LIST or LIST ACTIVE command .", "question_id": 6465, "for": 36518800, "retrieval_score": 21.952394}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 36518800, "retrieval_score": 21.89111}
{"snippet": "snapshot.statistics(key_type: str)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`.", "question_id": 10876, "for": 36518800, "retrieval_score": 21.186382}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 36518800, "retrieval_score": 21.162985}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020, "for": 19779790, "retrieval_score": 10.991822}
{"snippet": "tracemalloc.get_object_traceback(obj)", "intent": "Get the traceback where the Python object `obj` was allocated .", "question_id": 10842, "for": 19779790, "retrieval_score": 10.002874}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010, "for": 19779790, "retrieval_score": 8.900835}
{"snippet": "inspect.getfullargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5011, "for": 19779790, "retrieval_score": 8.900835}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2805, "for": 19779790, "retrieval_score": 8.386478}
{"snippet": "str.zfill(width)", "intent": "Return a copy of the string left filled with ASCII ' 0 ' digits to make a string of length `width` .", "question_id": 9256, "for": 22963263, "retrieval_score": 21.420761}
{"snippet": "bytes.zfill(width)", "intent": "Return a copy of the sequence left filled with ASCII b ' 0 ' digits to make a sequence of length `width` .", "question_id": 9409, "for": 22963263, "retrieval_score": 21.009596}
{"snippet": "bytearray.zfill(width)", "intent": "Return a copy of the sequence left filled with ASCII b ' 0 ' digits to make a sequence of length `width` .", "question_id": 9410, "for": 22963263, "retrieval_score": 21.009596}
{"snippet": "deque.clear()", "intent": "Remove all elements from the deque leaving it with length 0 .", "question_id": 1355, "for": 22963263, "retrieval_score": 19.259495}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855, "for": 22963263, "retrieval_score": 18.933964}
{"snippet": "str.rfind(sub, start, end)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9226, "for": 674764, "retrieval_score": 16.253283}
{"snippet": "str.rfind(sub, start)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9227, "for": 674764, "retrieval_score": 16.253283}
{"snippet": "str.rfind(sub)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9228, "for": 674764, "retrieval_score": 16.253283}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194, "for": 674764, "retrieval_score": 15.306552}
{"snippet": "str.find(sub, start)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9195, "for": 674764, "retrieval_score": 15.306552}
{"snippet": "str.rfind(sub, start, end)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9226, "for": 674764, "retrieval_score": 16.253283}
{"snippet": "str.rfind(sub, start)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9227, "for": 674764, "retrieval_score": 16.253283}
{"snippet": "str.rfind(sub)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9228, "for": 674764, "retrieval_score": 16.253283}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194, "for": 674764, "retrieval_score": 15.306552}
{"snippet": "str.find(sub, start)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9195, "for": 674764, "retrieval_score": 15.306552}
{"snippet": "str.rfind(sub, start, end)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9226, "for": 674764, "retrieval_score": 18.480463}
{"snippet": "str.rfind(sub, start)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9227, "for": 674764, "retrieval_score": 18.480463}
{"snippet": "str.rfind(sub)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9228, "for": 674764, "retrieval_score": 18.480463}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194, "for": 674764, "retrieval_score": 17.671827}
{"snippet": "str.find(sub, start)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9195, "for": 674764, "retrieval_score": 17.671827}
{"snippet": "str.rfind(sub, start, end)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9226, "for": 674764, "retrieval_score": 18.480463}
{"snippet": "str.rfind(sub, start)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9227, "for": 674764, "retrieval_score": 18.480463}
{"snippet": "str.rfind(sub)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9228, "for": 674764, "retrieval_score": 18.480463}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194, "for": 674764, "retrieval_score": 17.671827}
{"snippet": "str.find(sub, start)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9195, "for": 674764, "retrieval_score": 17.671827}
{"snippet": "str.rfind(sub, start, end)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9226, "for": 674764, "retrieval_score": 18.480463}
{"snippet": "str.rfind(sub, start)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9227, "for": 674764, "retrieval_score": 18.480463}
{"snippet": "str.rfind(sub)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9228, "for": 674764, "retrieval_score": 18.480463}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194, "for": 674764, "retrieval_score": 17.671827}
{"snippet": "str.find(sub, start)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9195, "for": 674764, "retrieval_score": 17.671827}
{"snippet": "str.rfind(sub, start, end)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9226, "for": 674764, "retrieval_score": 18.480463}
{"snippet": "str.rfind(sub, start)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9227, "for": 674764, "retrieval_score": 18.480463}
{"snippet": "str.rfind(sub)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9228, "for": 674764, "retrieval_score": 18.480463}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194, "for": 674764, "retrieval_score": 17.671827}
{"snippet": "str.find(sub, start)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9195, "for": 674764, "retrieval_score": 17.671827}
{"snippet": "str.rfind(sub, start, end)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9226, "for": 674764, "retrieval_score": 26.58554}
{"snippet": "str.rfind(sub, start)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9227, "for": 674764, "retrieval_score": 26.58554}
{"snippet": "str.rfind(sub)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9228, "for": 674764, "retrieval_score": 26.58554}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194, "for": 674764, "retrieval_score": 26.279457}
{"snippet": "str.find(sub, start)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9195, "for": 674764, "retrieval_score": 26.279457}
{"snippet": "str.rfind(sub, start, end)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9226, "for": 674764, "retrieval_score": 26.58554}
{"snippet": "str.rfind(sub, start)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9227, "for": 674764, "retrieval_score": 26.58554}
{"snippet": "str.rfind(sub)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9228, "for": 674764, "retrieval_score": 26.58554}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194, "for": 674764, "retrieval_score": 26.279457}
{"snippet": "str.find(sub, start)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9195, "for": 674764, "retrieval_score": 26.279457}
{"snippet": "str.rfind(sub, start, end)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9226, "for": 674764, "retrieval_score": 26.58554}
{"snippet": "str.rfind(sub, start)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9227, "for": 674764, "retrieval_score": 26.58554}
{"snippet": "str.rfind(sub)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9228, "for": 674764, "retrieval_score": 26.58554}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194, "for": 674764, "retrieval_score": 26.279457}
{"snippet": "str.find(sub, start)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9195, "for": 674764, "retrieval_score": 26.279457}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194, "for": 674764, "retrieval_score": 31.761774}
{"snippet": "str.find(sub, start)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9195, "for": 674764, "retrieval_score": 31.761774}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 674764, "retrieval_score": 31.761774}
{"snippet": "str.rfind(sub, start, end)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9226, "for": 674764, "retrieval_score": 31.747774}
{"snippet": "str.rfind(sub, start)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9227, "for": 674764, "retrieval_score": 31.747774}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 17627531, "retrieval_score": 16.32762}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 17627531, "retrieval_score": 12.492516}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 17627531, "retrieval_score": 12.452213}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 17627531, "retrieval_score": 12.452213}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832, "for": 17627531, "retrieval_score": 11.046904}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 27946742, "retrieval_score": 13.795459}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 27946742, "retrieval_score": 13.795459}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442, "for": 27946742, "retrieval_score": 12.8629875}
{"snippet": "test_case.assertNotRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11444, "for": 27946742, "retrieval_score": 12.8629875}
{"snippet": "locale.YESEXPR", "intent": "Get a regular expression that can be used with the regex function to recognize a positive response to a yes/no question.", "question_id": 5365, "for": 27946742, "retrieval_score": 11.977345}
{"snippet": "system_random.pattern", "intent": "The regular expression pattern.", "question_id": 7966, "for": 27946742, "retrieval_score": 15.39872}
{"snippet": "re.purge()", "intent": "Clear the regular expression cache .", "question_id": 7960, "for": 27946742, "retrieval_score": 14.963525}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156, "for": 27946742, "retrieval_score": 14.162983}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922, "for": 27946742, "retrieval_score": 13.445724}
{"snippet": "ConfigParser.SECTCRE", "intent": "A compiled regular expression used to parse section headers.", "question_id": 1495, "for": 27946742, "retrieval_score": 13.443748}
{"snippet": "inspect.getdoc(object)", "intent": "Get the documentation string for an `object` , cleaned up with cleandoc ( ) .", "question_id": 4969, "for": 8247792, "retrieval_score": 13.550324}
{"snippet": "os.getrandom(size)", "intent": "Get up to `size` random bytes .", "question_id": 7137, "for": 8247792, "retrieval_score": 13.2045965}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204, "for": 8247792, "retrieval_score": 12.947963}
{"snippet": "str.isprintable()", "intent": "Return true if all characters in the string are printable or the string is empty , false otherwise .", "question_id": 9210, "for": 8247792, "retrieval_score": 12.947963}
{"snippet": "str.isdecimal()", "intent": "Return true if all characters in the string are decimal characters and there is at least one character , false otherwise .", "question_id": 9205, "for": 8247792, "retrieval_score": 12.828593}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 8247792, "retrieval_score": 10.788929}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 8247792, "retrieval_score": 10.788929}
{"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241, "for": 8247792, "retrieval_score": 10.788929}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242, "for": 8247792, "retrieval_score": 10.788929}
{"snippet": "Dialect.escapechar", "intent": "A one-character string used by the writer to escape the delimiter if quoting is set to QUOTE_NONE and the quotechar if doublequote is False.", "question_id": 1725, "for": 8247792, "retrieval_score": 10.088052}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 8247792, "retrieval_score": 14.257909}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 8247792, "retrieval_score": 14.257909}
{"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241, "for": 8247792, "retrieval_score": 14.257909}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242, "for": 8247792, "retrieval_score": 14.257909}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 8247792, "retrieval_score": 12.433562}
{"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678, "for": 32874539, "retrieval_score": 15.43032}
{"snippet": "style.lookup(style, option, state=None, default=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "question_id": 10680, "for": 32874539, "retrieval_score": 15.385701}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE", "intent": "An attribute was used more than once in a start tag.", "question_id": 7792, "for": 32874539, "retrieval_score": 14.880933}
{"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501, "for": 32874539, "retrieval_score": 14.470659}
{"snippet": "style.lookup(style, option, default=None)", "intent": "Returns the value specified for `option` in `style` . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "question_id": 10679, "for": 32874539, "retrieval_score": 13.32992}
{"snippet": "stat.UF_APPEND", "intent": "The file may only be appended to.", "question_id": 9115, "for": 4706499, "retrieval_score": 14.499403}
{"snippet": "stat.SF_APPEND", "intent": "The file may only be appended to.", "question_id": 9122, "for": 4706499, "retrieval_score": 14.499403}
{"snippet": "readline.add_history(line)", "intent": "Append `line` to the history buffer , as if it was the last line typed .", "question_id": 8034, "for": 4706499, "retrieval_score": 13.267821}
{"snippet": "readline.append_history_file(nelements)", "intent": "Append the last `nelements` items of history to a file .", "question_id": 8026, "for": 4706499, "retrieval_score": 11.479226}
{"snippet": "readline.read_history_file()", "intent": "Load a readline history file , and append it to the history list .", "question_id": 8022, "for": 4706499, "retrieval_score": 10.937542}
{"snippet": "readline.add_history(line)", "intent": "Append `line` to the history buffer , as if it was the last line typed .", "question_id": 8034, "for": 4706499, "retrieval_score": 13.267821}
{"snippet": "readline.append_history_file(nelements)", "intent": "Append the last `nelements` items of history to a file .", "question_id": 8026, "for": 4706499, "retrieval_score": 11.479226}
{"snippet": "readline.read_history_file()", "intent": "Load a readline history file , and append it to the history list .", "question_id": 8022, "for": 4706499, "retrieval_score": 10.937542}
{"snippet": "readline.append_history_file(nelements, filename)", "intent": "Append the last `nelements` items of history to a file . The default `filename` is ~/.history .", "question_id": 8025, "for": 4706499, "retrieval_score": 10.214533}
{"snippet": "readline.read_history_file(filename)", "intent": "Load a readline history file , and append it to the history list . The default `filename` is ~/.history .", "question_id": 8021, "for": 4706499, "retrieval_score": 9.78339}
{"snippet": "readline.append_history_file(nelements)", "intent": "Append the last `nelements` items of history to a file .", "question_id": 8026, "for": 4706499, "retrieval_score": 11.479226}
{"snippet": "readline.read_history_file()", "intent": "Load a readline history file , and append it to the history list .", "question_id": 8022, "for": 4706499, "retrieval_score": 10.937542}
{"snippet": "readline.append_history_file(nelements, filename)", "intent": "Append the last `nelements` items of history to a file . The default `filename` is ~/.history .", "question_id": 8025, "for": 4706499, "retrieval_score": 10.214533}
{"snippet": "readline.read_history_file(filename)", "intent": "Load a readline history file , and append it to the history list . The default `filename` is ~/.history .", "question_id": 8021, "for": 4706499, "retrieval_score": 9.78339}
{"snippet": "header.append(s)", "intent": "Append the string `s` to the MIME header .", "question_id": 3126, "for": 4706499, "retrieval_score": 9.244305}
{"snippet": "readline.append_history_file(nelements)", "intent": "Append the last `nelements` items of history to a file .", "question_id": 8026, "for": 4706499, "retrieval_score": 11.479226}
{"snippet": "readline.read_history_file()", "intent": "Load a readline history file , and append it to the history list .", "question_id": 8022, "for": 4706499, "retrieval_score": 10.937542}
{"snippet": "readline.append_history_file(nelements, filename)", "intent": "Append the last `nelements` items of history to a file . The default `filename` is ~/.history .", "question_id": 8025, "for": 4706499, "retrieval_score": 10.214533}
{"snippet": "readline.read_history_file(filename)", "intent": "Load a readline history file , and append it to the history list . The default `filename` is ~/.history .", "question_id": 8021, "for": 4706499, "retrieval_score": 9.78339}
{"snippet": "header.append(s)", "intent": "Append the string `s` to the MIME header .", "question_id": 3126, "for": 4706499, "retrieval_score": 9.244305}
{"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300, "for": 18312447, "retrieval_score": 16.543522}
{"snippet": "shlex.wordchars", "intent": "The string of characters that will accumulate into multi-character tokens.", "question_id": 8295, "for": 18312447, "retrieval_score": 15.999184}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 18312447, "retrieval_score": 12.317835}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 18312447, "retrieval_score": 12.317835}
{"snippet": "bytearray.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9355, "for": 18312447, "retrieval_score": 12.317835}
{"snippet": "str.isdecimal()", "intent": "Return true if all characters in the string are decimal characters and there is at least one character , false otherwise .", "question_id": 9205, "for": 34587346, "retrieval_score": 12.513381}
{"snippet": "str.isnumeric()", "intent": "Return true if all characters in the string are numeric characters , and there is at least one character , false otherwise .", "question_id": 9209, "for": 34587346, "retrieval_score": 12.513381}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204, "for": 34587346, "retrieval_score": 12.499051}
{"snippet": "str.isprintable()", "intent": "Return true if all characters in the string are printable or the string is empty , false otherwise .", "question_id": 9210, "for": 34587346, "retrieval_score": 12.499051}
{"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515, "for": 34587346, "retrieval_score": 11.7754}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 13128565, "retrieval_score": 18.165607}
{"snippet": "shlex.split(s, posix=True)", "intent": "Split the string `s` using shell-like syntax . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8270, "for": 13128565, "retrieval_score": 13.9930315}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 13128565, "retrieval_score": 13.389379}
{"snippet": "float.fromhex(s)", "intent": "Class method to return the float represented by a hexadecimal string s. The string `s` may have leading and trailing whitespace .", "question_id": 9150, "for": 13128565, "retrieval_score": 13.210106}
{"snippet": "re.split(pattern, string, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . With arguments `flags`.", "question_id": 7945, "for": 13128565, "retrieval_score": 12.3947115}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds)", "intent": "Run the `cmd` shell command . With arguments `**kwds`.", "question_id": 533, "for": 1196074, "retrieval_score": 18.668701}
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673, "for": 1196074, "retrieval_score": 18.254944}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534, "for": 1196074, "retrieval_score": 18.194677}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, loop=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `loop`.", "question_id": 537, "for": 1196074, "retrieval_score": 18.194677}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573, "for": 1196074, "retrieval_score": 18.194677}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175, "for": 8303993, "retrieval_score": 20.917667}
{"snippet": "mime_types.types_map_inv", "intent": "Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types.", "question_id": 5963, "for": 8303993, "retrieval_score": 18.3626}
{"snippet": "ordered_dict.popitem()", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair .", "question_id": 1391, "for": 8303993, "retrieval_score": 15.540131}
{"snippet": "test_case.assertDictEqual(first, second)", "intent": "Test that two dictionaries are equal . With arguments `first`, `second`.", "question_id": 11460, "for": 8303993, "retrieval_score": 15.024365}
{"snippet": "test_case.assertDictEqual(first, second, msg=None)", "intent": "Test that two dictionaries are equal . With arguments `first`, `second`, `msg`.", "question_id": 11461, "for": 8303993, "retrieval_score": 14.661313}
{"snippet": "datetime.now()", "intent": "Return the current local date and time .", "question_id": 2258, "for": 311627, "retrieval_score": 16.67223}
{"snippet": "locale.ERA_D_T_FMT", "intent": "Get a format string for time.strftime() to represent date and time in a locale-specific era-based way.", "question_id": 5369, "for": 311627, "retrieval_score": 15.912611}
{"snippet": "base_http_request_handler.log_date_time_string()", "intent": "Returns the current date and time , formatted for logging .", "question_id": 4657, "for": 311627, "retrieval_score": 15.825569}
{"snippet": "datetime.utcnow()", "intent": "Return the current UTC date and time , with tzinfo None .", "question_id": 2260, "for": 311627, "retrieval_score": 15.433687}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312, "for": 311627, "retrieval_score": 15.327141}
{"snippet": "datetime.now()", "intent": "Return the current local date and time .", "question_id": 2258, "for": 311627, "retrieval_score": 16.67223}
{"snippet": "locale.ERA_D_T_FMT", "intent": "Get a format string for time.strftime() to represent date and time in a locale-specific era-based way.", "question_id": 5369, "for": 311627, "retrieval_score": 15.912611}
{"snippet": "base_http_request_handler.log_date_time_string()", "intent": "Returns the current date and time , formatted for logging .", "question_id": 4657, "for": 311627, "retrieval_score": 15.825569}
{"snippet": "datetime.utcnow()", "intent": "Return the current UTC date and time , with tzinfo None .", "question_id": 2260, "for": 311627, "retrieval_score": 15.433687}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312, "for": 311627, "retrieval_score": 15.327141}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529, "for": 27744882, "retrieval_score": 11.504932}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991, "for": 27744882, "retrieval_score": 10.06233}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674, "for": 27744882, "retrieval_score": 9.970766}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682, "for": 27744882, "retrieval_score": 9.544362}
{"snippet": "random.vonmisesvariate(mu, kappa)", "intent": "`mu` is the mean angle , expressed in radians between 0 and 2*pi , and `kappa` is the concentration parameter , which must be greater than or equal to zero .", "question_id": 7915, "for": 27744882, "retrieval_score": 9.316663}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 4111412, "retrieval_score": 20.055285}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 4111412, "retrieval_score": 19.991013}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947, "for": 4111412, "retrieval_score": 18.52719}
{"snippet": "SSLContext.get_ca_certs()", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates .", "question_id": 9011, "for": 4111412, "retrieval_score": 18.468216}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 4111412, "retrieval_score": 18.046595}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056, "for": 11339210, "retrieval_score": 12.333527}
{"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055, "for": 11339210, "retrieval_score": 12.079976}
{"snippet": "uuid.getnode()", "intent": "Get the hardware address as a 48-bit positive integer .", "question_id": 11956, "for": 11339210, "retrieval_score": 11.056658}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372, "for": 11339210, "retrieval_score": 10.356997}
{"snippet": "pkgutil.get_data(package, resource)", "intent": "Get a `resource` from a `package` .", "question_id": 7457, "for": 11339210, "retrieval_score": 10.239011}
{"snippet": "PurePath.is_reserved()", "intent": "With PureWindowsPath , return True if the path is considered reserved under Windows , False otherwise .", "question_id": 7256, "for": 647515, "retrieval_score": 16.063725}
{"snippet": "auto.winerror", "intent": "Under Windows, this gives you the native Windows error code.", "question_id": 3655, "for": 647515, "retrieval_score": 15.125639}
{"snippet": "sys.executable", "intent": "A string giving the absolute path of the executable binary for the Python interpreter, on systems where this makes sense.", "question_id": 9787, "for": 647515, "retrieval_score": 14.227924}
{"snippet": "Path.symlink_to(target, target_is_directory=False)", "intent": "Make this path a symbolic link to `target` . Under Windows , `target_is_directory` must be true ( default False ) if the link \u2019 s target is a directory .", "question_id": 7316, "for": 647515, "retrieval_score": 13.109936}
{"snippet": "platform.architecture()", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information .", "question_id": 7458, "for": 647515, "retrieval_score": 11.289372}
{"snippet": "Panel.move(y, x)", "intent": "Move the panel to the screen coordinates ( `y` , `x` ) .", "question_id": 2150, "for": 14406214, "retrieval_score": 14.529575}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393, "for": 14406214, "retrieval_score": 12.966731}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302, "for": 14406214, "retrieval_score": 12.568854}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303, "for": 14406214, "retrieval_score": 12.568854}
{"snippet": "window.mvderwin(y, x)", "intent": "Move the window inside its parent window . With arguments `y`, `x`.", "question_id": 2094, "for": 14406214, "retrieval_score": 12.521468}
{"snippet": "Panel.move(y, x)", "intent": "Move the panel to the screen coordinates ( `y` , `x` ) .", "question_id": 2150, "for": 14406214, "retrieval_score": 14.529575}
{"snippet": "window.mvderwin(y, x)", "intent": "Move the window inside its parent window . With arguments `y`, `x`.", "question_id": 2094, "for": 14406214, "retrieval_score": 12.521468}
{"snippet": "Panel.top()", "intent": "Push panel to the top of the stack .", "question_id": 2154, "for": 14406214, "retrieval_score": 10.504061}
{"snippet": "window.move(new_y, new_x)", "intent": "Move cursor to ( `new_y` , `new_x` ) .", "question_id": 2093, "for": 14406214, "retrieval_score": 10.411453}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393, "for": 14406214, "retrieval_score": 10.041882}
{"snippet": "Panel.move(y, x)", "intent": "Move the panel to the screen coordinates ( `y` , `x` ) .", "question_id": 2150, "for": 14406214, "retrieval_score": 15.035714}
{"snippet": "window.mvderwin(y, x)", "intent": "Move the window inside its parent window . With arguments `y`, `x`.", "question_id": 2094, "for": 14406214, "retrieval_score": 12.905231}
{"snippet": "Panel.top()", "intent": "Push panel to the top of the stack .", "question_id": 2154, "for": 14406214, "retrieval_score": 12.247429}
{"snippet": "ast.increment_lineno(node)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file .", "question_id": 153, "for": 14406214, "retrieval_score": 11.799845}
{"snippet": "inspect.getcomments(object)", "intent": "Return in a single string any lines of comments immediately preceding the `object` \u2019 s source code ( for a class , function , or method ) , or at the top of the Python source file ( if the object is a module ) .", "question_id": 4970, "for": 14406214, "retrieval_score": 11.416142}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 25279993, "retrieval_score": 22.999985}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 25279993, "retrieval_score": 19.276512}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 25279993, "retrieval_score": 18.333553}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 25279993, "retrieval_score": 17.422943}
{"snippet": "datetime.max", "intent": "The latest representable datetime, datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None).", "question_id": 2270, "for": 25279993, "retrieval_score": 17.246002}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757, "for": 16387069, "retrieval_score": 9.115538}
{"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042, "for": 16387069, "retrieval_score": 8.991946}
{"snippet": "turtle.bgpic()", "intent": "Set background image or return name of current backgroundimage .", "question_id": 11041, "for": 16387069, "retrieval_score": 8.41983}
{"snippet": "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None)", "intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Otherwise you can explicitly specify the image subtype via the `_subtype` argument . With arguments `**_params`.", "question_id": 3343, "for": 16387069, "retrieval_score": 8.315482}
{"snippet": "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None, _encoder=email.encoders.encode_base64)", "intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Otherwise you can explicitly specify the image subtype via the `_subtype` argument . Optional `_encoder` is a callable ( i.e . With arguments `**_params`.", "question_id": 3346, "for": 16387069, "retrieval_score": 7.733677}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757, "for": 16387069, "retrieval_score": 9.115538}
{"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042, "for": 16387069, "retrieval_score": 8.991946}
{"snippet": "turtle.bgpic()", "intent": "Set background image or return name of current backgroundimage .", "question_id": 11041, "for": 16387069, "retrieval_score": 8.41983}
{"snippet": "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None)", "intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Otherwise you can explicitly specify the image subtype via the `_subtype` argument . With arguments `**_params`.", "question_id": 3343, "for": 16387069, "retrieval_score": 8.315482}
{"snippet": "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None, _encoder=email.encoders.encode_base64)", "intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Otherwise you can explicitly specify the image subtype via the `_subtype` argument . Optional `_encoder` is a callable ( i.e . With arguments `**_params`.", "question_id": 3346, "for": 16387069, "retrieval_score": 7.733677}
{"snippet": "process.kill()", "intent": "Same as terminate ( ) but using the SIGKILL signal on Unix .", "question_id": 6187, "for": 179369, "retrieval_score": 12.779462}
{"snippet": "process.terminate()", "intent": "Terminate the process .", "question_id": 6186, "for": 179369, "retrieval_score": 10.743179}
{"snippet": "Popen.wait(timeout=None)", "intent": "Wait for child process to terminate . If the process does not terminate after `timeout` seconds , raise a TimeoutExpired exception .", "question_id": 9611, "for": 179369, "retrieval_score": 9.743942}
{"snippet": "process.wait()", "intent": "Wait for the child process to terminate .", "question_id": 547, "for": 179369, "retrieval_score": 9.593669}
{"snippet": "os.WIFEXITED(status)", "intent": "Return True if the process exited using the exit ( 2 ) system call , otherwise return False . With arguments `status`.", "question_id": 7092, "for": 179369, "retrieval_score": 9.571234}
{"snippet": "errno.ECONNABORTED", "intent": "Software caused connection abort", "question_id": 3608, "for": 179369, "retrieval_score": 12.28765}
{"snippet": "FTP.abort()", "intent": "Abort a file transfer that is in progress .", "question_id": 3923, "for": 179369, "retrieval_score": 11.007135}
{"snippet": "traceback_exception.msg", "intent": "For syntax errors - the compiler error message.", "question_id": 10811, "for": 179369, "retrieval_score": 10.9096155}
{"snippet": "concurrent.futures.Future", "intent": "Encapsulates the asynchronous execution of a callable.", "question_id": 1467, "for": 179369, "retrieval_score": 9.493337}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367, "for": 179369, "retrieval_score": 9.221187}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 179369, "retrieval_score": 14.024681}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168, "for": 179369, "retrieval_score": 12.290751}
{"snippet": "turtle.write_docstringdict(filename=\"turtle_docstringdict\")", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11169, "for": 179369, "retrieval_score": 12.290751}
{"snippet": "errno.ECONNABORTED", "intent": "Software caused connection abort", "question_id": 3608, "for": 179369, "retrieval_score": 12.28765}
{"snippet": "FTP.abort()", "intent": "Abort a file transfer that is in progress .", "question_id": 3923, "for": 179369, "retrieval_score": 11.885753}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682, "for": 34543513, "retrieval_score": 9.544362}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762, "for": 34543513, "retrieval_score": 9.127498}
{"snippet": "xml.dom.XML_NAMESPACE", "intent": "The namespace URI associated with the reserved prefix xml, as defined by Namespaces in XML (section 4).", "question_id": 12308, "for": 34543513, "retrieval_score": 9.083944}
{"snippet": "audioop.max(fragment, width)", "intent": "Return the maximum of the absolute value of all samples in a `fragment` . With arguments `width`.", "question_id": 696, "for": 34543513, "retrieval_score": 9.026397}
{"snippet": "stringprep.in_table_c4(code)", "intent": "Determine whether `code` is in tableC.4 ( Non-character code points ) .", "question_id": 9542, "for": 34543513, "retrieval_score": 9.01855}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832, "for": 1810743, "retrieval_score": 19.082962}
{"snippet": "simple_http_request_handler.directory", "intent": "If not specified, the directory to serve is the current working directory.", "question_id": 4663, "for": 1810743, "retrieval_score": 18.224865}
{"snippet": "os.fchdir(fd)", "intent": "Change the current working directory to the directory represented by the file descriptor `fd` .", "question_id": 6844, "for": 1810743, "retrieval_score": 17.554216}
{"snippet": "TarFile.extractall()", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9932, "for": 1810743, "retrieval_score": 17.500172}
{"snippet": "TarFile.extractall(path=\".\")", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9933, "for": 1810743, "retrieval_score": 17.500172}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832, "for": 1810743, "retrieval_score": 27.894749}
{"snippet": "TarFile.extractall()", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9932, "for": 1810743, "retrieval_score": 24.922197}
{"snippet": "TarFile.extractall(path=\".\")", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9933, "for": 1810743, "retrieval_score": 24.922197}
{"snippet": "TarFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9934, "for": 1810743, "retrieval_score": 24.922197}
{"snippet": "TarFile.extractall(path=\".\", members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9936, "for": 1810743, "retrieval_score": 24.922197}
{"snippet": "email_message.get_charsets(failobj=None)", "intent": "Return a list containing the character set names in the message . If the subpart has no Content-Type header , no charset parameter , or is not of the text main MIME type , then that item in the returned list will be `failobj` .", "question_id": 3282, "for": 3159155, "retrieval_score": 21.764698}
{"snippet": "message.get_charsets(failobj=None)", "intent": "Return a list containing the character set names in the message . However , if the subpart has no Content-Type header , no charset parameter , or is not of the text main MIME type , then that item in the returned list will be `failobj` .", "question_id": 3025, "for": 3159155, "retrieval_score": 21.27973}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 3159155, "retrieval_score": 18.917202}
{"snippet": "Unpacker.unpack_list(unpack_item)", "intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "question_id": 12297, "for": 3159155, "retrieval_score": 18.557812}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 3159155, "retrieval_score": 18.137182}
{"snippet": "doctest.IGNORE_EXCEPTION_DETAIL", "intent": "When specified, an example that expects an exception passes if an exception of the expected type is raised, even if the exception detail does not match.", "question_id": 2756, "for": 2637760, "retrieval_score": 12.290621}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902, "for": 2637760, "retrieval_score": 11.679592}
{"snippet": "element.findtext(match, default=None, namespaces=None)", "intent": "Finds text for the first subelement matching `match` . Returns the text content of the first matching element , or `default` if no element was found . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12498, "for": 2637760, "retrieval_score": 11.5637865}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436, "for": 2637760, "retrieval_score": 11.290175}
{"snippet": "Element.setAttributeNodeNS(newAttr)", "intent": "Add a new attribute node to the element , replacing an existing attribute if necessary if the namespaceURI and localName attributes match . If `newAttr` is already in use , InuseAttributeErr will be raised .", "question_id": 12368, "for": 2637760, "retrieval_score": 11.156682}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 40512124, "retrieval_score": 21.789091}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 40512124, "retrieval_score": 20.760904}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 40512124, "retrieval_score": 20.760904}
{"snippet": "turtle.pen(**pendict)", "intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "question_id": 10958, "for": 40512124, "retrieval_score": 20.561539}
{"snippet": "turtle.pen(**pendict, pen=None)", "intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "question_id": 10959, "for": 40512124, "retrieval_score": 20.561539}
{"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515, "for": 16866261, "retrieval_score": 17.912}
{"snippet": "SMTP.sendmail(from_addr, to_addrs, msg)", "intent": "Send mail . If SMTPUTF8 is included in mail_options , and the server supports it , `from_addr` and `to_addrs` may contain non-ASCII characters . `msg` may be a string containing characters in the ASCII range , or a byte string .", "question_id": 8534, "for": 16866261, "retrieval_score": 15.771875}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204, "for": 16866261, "retrieval_score": 15.3737335}
{"snippet": "stringprep.in_table_c12(code)", "intent": "Determine whether `code` is in tableC.1.2 ( Non-ASCII space characters ) .", "question_id": 9536, "for": 16866261, "retrieval_score": 15.088249}
{"snippet": "stringprep.in_table_c22(code)", "intent": "Determine whether `code` is in tableC.2.2 ( Non-ASCII control characters ) .", "question_id": 9539, "for": 16866261, "retrieval_score": 15.088249}
{"snippet": "SMTP.sendmail(from_addr, to_addrs, msg)", "intent": "Send mail . If SMTPUTF8 is included in mail_options , and the server supports it , `from_addr` and `to_addrs` may contain non-ASCII characters . `msg` may be a string containing characters in the ASCII range , or a byte string .", "question_id": 8534, "for": 16866261, "retrieval_score": 18.393085}
{"snippet": "stringprep.in_table_c12(code)", "intent": "Determine whether `code` is in tableC.1.2 ( Non-ASCII space characters ) .", "question_id": 9536, "for": 16866261, "retrieval_score": 18.391115}
{"snippet": "stringprep.in_table_c22(code)", "intent": "Determine whether `code` is in tableC.2.2 ( Non-ASCII control characters ) .", "question_id": 9539, "for": 16866261, "retrieval_score": 18.391115}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204, "for": 16866261, "retrieval_score": 18.25837}
{"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515, "for": 16866261, "retrieval_score": 17.912}
{"snippet": "bound_arguments.kwargs", "intent": "A dict of keyword arguments values.", "question_id": 5005, "for": 988228, "retrieval_score": 20.071085}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 988228, "retrieval_score": 20.038677}
{"snippet": "mailbox.iteritems()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5734, "for": 988228, "retrieval_score": 19.438025}
{"snippet": "mailbox.items()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5735, "for": 988228, "retrieval_score": 19.438025}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 988228, "retrieval_score": 19.093088}
{"snippet": "xml.dom.pulldom.parseString(string, parser=None)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` . With arguments `parser`.", "question_id": 12430, "for": 13793973, "retrieval_score": 10.736524}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 13793973, "retrieval_score": 10.636878}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 13793973, "retrieval_score": 10.635419}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 13793973, "retrieval_score": 10.354971}
{"snippet": "xml.dom.pulldom.parseString(string)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` .", "question_id": 12429, "for": 13793973, "retrieval_score": 10.085194}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 10525301, "retrieval_score": 19.271786}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 10525301, "retrieval_score": 19.271786}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 10525301, "retrieval_score": 17.75611}
{"snippet": "email.mime.text.MIMEText(_text, _charset=None)", "intent": "Module : email.mime.text `_text` is the string for the payload . `_charset` is the character set of the text and is passed as an argument to the MIMENonMultipart constructor ; it defaults to us-ascii if the string contains only ascii code points , and utf-8 otherwise .", "question_id": 3356, "for": 10525301, "retrieval_score": 16.488003}
{"snippet": "bytes.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9278, "for": 10525301, "retrieval_score": 16.29297}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 2407398, "retrieval_score": 29.40239}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 2407398, "retrieval_score": 24.612091}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 2407398, "retrieval_score": 22.972322}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 2407398, "retrieval_score": 21.852238}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 2407398, "retrieval_score": 21.36428}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 2407398, "retrieval_score": 17.86406}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 2407398, "retrieval_score": 17.678877}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 2407398, "retrieval_score": 15.321751}
{"snippet": "Request.header_items()", "intent": "Return a list of tuples ( header_name , header_value ) of the Request headers .", "question_id": 11833, "for": 2407398, "retrieval_score": 14.157868}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 2407398, "retrieval_score": 13.941772}
{"snippet": "somenamedtuple._field_defaults", "intent": "Dictionary mapping field names to default values.", "question_id": 1388, "for": 18695605, "retrieval_score": 13.271027}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 18695605, "retrieval_score": 12.590098}
{"snippet": "mh.get_sequences()", "intent": "Return a dictionary of sequence names mapped to key lists .", "question_id": 5783, "for": 18695605, "retrieval_score": 12.019217}
{"snippet": "Pattern.groupindex", "intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "question_id": 7993, "for": 18695605, "retrieval_score": 11.853134}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 18695605, "retrieval_score": 11.174567}
{"snippet": "Pattern.groupindex", "intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "question_id": 7993, "for": 18695605, "retrieval_score": 11.093293}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 18695605, "retrieval_score": 10.2182455}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 18695605, "retrieval_score": 10.2182455}
{"snippet": "format(value, format_spec)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4021, "for": 18695605, "retrieval_score": 10.1132555}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022, "for": 18695605, "retrieval_score": 10.1132555}
{"snippet": "io.StringIO(initial_value='')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` .", "question_id": 5165, "for": 1534542, "retrieval_score": 18.406553}
{"snippet": "io.StringIO(initial_value='', newline='\\n')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "question_id": 5167, "for": 1534542, "retrieval_score": 15.400534}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164, "for": 1534542, "retrieval_score": 14.114061}
{"snippet": "io.StringIO(newline='\\n')", "intent": "An in-memory stream for text I/O . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "question_id": 5166, "for": 1534542, "retrieval_score": 12.600476}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013, "for": 1534542, "retrieval_score": 11.916213}
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701, "for": 640001, "retrieval_score": 17.955317}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 640001, "retrieval_score": 12.902096}
{"snippet": "importlib.resources.open_text(package, resource)", "intent": "Open for text reading the `resource` within `package` .", "question_id": 4853, "for": 640001, "retrieval_score": 12.00445}
{"snippet": "FTP.delete(filename)", "intent": "Remove the file named `filename` from the server .", "question_id": 3960, "for": 640001, "retrieval_score": 11.262292}
{"snippet": "InteractiveConsole.resetbuffer()", "intent": "Remove any unhandled source text from the input buffer .", "question_id": 1189, "for": 640001, "retrieval_score": 11.252209}
{"snippet": "TabError", "intent": "Raised when indentation contains an inconsistent use of tabs and spaces.", "question_id": 3667, "for": 29454773, "retrieval_score": 12.85437}
{"snippet": "os.path.normpath(path)", "intent": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a `path` that contains symbolic links .", "question_id": 7162, "for": 29454773, "retrieval_score": 12.768364}
{"snippet": "doctest.DONT_ACCEPT_BLANKLINE", "intent": "By default, if an expected output block contains a line containing only the string <BLANKLINE>, then that line will match a blank line in the actual output.", "question_id": 2753, "for": 29454773, "retrieval_score": 11.96815}
{"snippet": "string.ascii_lowercase", "intent": "The lowercase letters 'abcdefghijklmnopqrstuvwxyz'.", "question_id": 9508, "for": 29454773, "retrieval_score": 11.147922}
{"snippet": "string.ascii_uppercase", "intent": "The uppercase letters 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "question_id": 9509, "for": 29454773, "retrieval_score": 11.147922}
{"snippet": "widget.identify_element(x, y)", "intent": "Returns the element at position `x` , `y` .", "question_id": 10638, "for": 14050824, "retrieval_score": 27.232302}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 14050824, "retrieval_score": 25.606113}
{"snippet": "widget.identify(x, y)", "intent": "Returns the name of the element at position `x` `y` , or the empty string if the point does not lie within any element .", "question_id": 10592, "for": 14050824, "retrieval_score": 22.44231}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518, "for": 14050824, "retrieval_score": 22.098522}
{"snippet": "widget.identify(x, y)", "intent": "Returns the name of the tab element at position `x` , `y` , or the empty string if none .", "question_id": 10606, "for": 14050824, "retrieval_score": 21.65609}
{"snippet": "tree_builder.start(tag, attrs)", "intent": "Opens a new element . `tag` is the element name . `attrs` is a dictionary containing element attributes .", "question_id": 12544, "for": 11932729, "retrieval_score": 13.499838}
{"snippet": "collections.OrderedDict()", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order .", "question_id": 1390, "for": 11932729, "retrieval_score": 12.79654}
{"snippet": "email_policy.fold(name, value)", "intent": "Header folding is controlled by the refold_source policy setting . A `value` is considered to be a \u2018 source value \u2019 if and only if it does not have a `name` attribute ( having a name attribute means it is a header object of some sort ) .", "question_id": 3437, "for": 11932729, "retrieval_score": 12.439843}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582, "for": 11932729, "retrieval_score": 12.403531}
{"snippet": "urllib.parse.urlencode(query, doseq=False, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11741, "for": 11932729, "retrieval_score": 12.217295}
{"snippet": "modulefinder.ModuleFinder(excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6028, "for": 4108561, "retrieval_score": 11.011829}
{"snippet": "modulefinder.ModuleFinder(excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6038, "for": 4108561, "retrieval_score": 11.011829}
{"snippet": "modulefinder.ModuleFinder(excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6048, "for": 4108561, "retrieval_score": 11.011829}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470, "for": 4108561, "retrieval_score": 10.378851}
{"snippet": "Pattern.groupindex", "intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "question_id": 7993, "for": 4108561, "retrieval_score": 10.114845}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971, "for": 13070461, "retrieval_score": 16.474638}
{"snippet": "email_message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 3248, "for": 13070461, "retrieval_score": 16.474638}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 13070461, "retrieval_score": 16.119457}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 13070461, "retrieval_score": 14.670217}
{"snippet": "readline.get_begidx()", "intent": "Get the beginning or ending index of the completion scope .", "question_id": 8044, "for": 13070461, "retrieval_score": 14.6548195}
{"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325, "for": 13070461, "retrieval_score": 15.809166}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971, "for": 13070461, "retrieval_score": 15.435173}
{"snippet": "email_message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 3248, "for": 13070461, "retrieval_score": 15.435173}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 13070461, "retrieval_score": 15.102401}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 13070461, "retrieval_score": 13.373624}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971, "for": 13070461, "retrieval_score": 16.824577}
{"snippet": "email_message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 3248, "for": 13070461, "retrieval_score": 16.824577}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 13070461, "retrieval_score": 16.461851}
{"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325, "for": 13070461, "retrieval_score": 16.277954}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 13070461, "retrieval_score": 14.670217}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360, "for": 14538885, "retrieval_score": 14.018035}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361, "for": 14538885, "retrieval_score": 14.018035}
{"snippet": "deque.index(x)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1362, "for": 14538885, "retrieval_score": 14.018035}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 14538885, "retrieval_score": 13.671696}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 14538885, "retrieval_score": 13.671696}
{"snippet": "datetime.fold", "intent": "In [0, 1].", "question_id": 2280, "for": 8337004, "retrieval_score": 13.048143}
{"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332, "for": 8337004, "retrieval_score": 13.048143}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 8337004, "retrieval_score": 12.940098}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608, "for": 8337004, "retrieval_score": 12.506239}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610, "for": 8337004, "retrieval_score": 12.506239}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 3460161, "retrieval_score": 37.82563}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 3460161, "retrieval_score": 29.903782}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 3460161, "retrieval_score": 29.903782}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 3460161, "retrieval_score": 28.515545}
{"snippet": "errno.EL2HLT", "intent": "Level 2 halted", "question_id": 3556, "for": 3460161, "retrieval_score": 28.007038}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 2168123, "retrieval_score": 15.084452}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 2168123, "retrieval_score": 15.084452}
{"snippet": "bytearray.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9355, "for": 2168123, "retrieval_score": 15.084452}
{"snippet": "bytearray.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9356, "for": 2168123, "retrieval_score": 15.084452}
{"snippet": "bytes.split()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9363, "for": 2168123, "retrieval_score": 15.084452}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 2168123, "retrieval_score": 15.645365}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 2168123, "retrieval_score": 15.037522}
{"snippet": "curses.curs_set(visibility)", "intent": "Set the cursor state . `visibility` can be set to 0 , 1 , or 2 , for invisible , normal , or very visible .", "question_id": 1926, "for": 2168123, "retrieval_score": 14.887741}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640, "for": 2168123, "retrieval_score": 13.409346}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2641, "for": 2168123, "retrieval_score": 13.057902}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 6586310, "retrieval_score": 21.062965}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 6586310, "retrieval_score": 20.960947}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 6586310, "retrieval_score": 18.054821}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 6586310, "retrieval_score": 18.054821}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 6586310, "retrieval_score": 18.007708}
{"snippet": "stats.dump_stats(filename)", "intent": "Save the data loaded into the Stats object to a file named `filename` .", "question_id": 7692, "for": 3685265, "retrieval_score": 13.534971}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503, "for": 3685265, "retrieval_score": 11.8801565}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499, "for": 3685265, "retrieval_score": 11.774923}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4502, "for": 3685265, "retrieval_score": 11.754257}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4505, "for": 3685265, "retrieval_score": 11.750565}
{"snippet": "subprocess.check_output(args)", "intent": "Run command with arguments and return its output . With arguments `args`.", "question_id": 9679, "for": 19267591, "retrieval_score": 14.529823}
{"snippet": "subprocess.check_output(args, stdin=None)", "intent": "Run command with arguments and return its output . With arguments `args`, `stdin`.", "question_id": 9680, "for": 19267591, "retrieval_score": 14.187006}
{"snippet": "subprocess.check_output(args, stderr=None)", "intent": "Run command with arguments and return its output . With arguments `args`, `stderr`.", "question_id": 9681, "for": 19267591, "retrieval_score": 14.187006}
{"snippet": "subprocess.check_output(args, shell=False)", "intent": "Run command with arguments and return its output . With arguments `args`, `shell`.", "question_id": 9682, "for": 19267591, "retrieval_score": 14.187006}
{"snippet": "subprocess.check_output(args, cwd=None)", "intent": "Run command with arguments and return its output . With arguments `args`, `cwd`.", "question_id": 9683, "for": 19267591, "retrieval_score": 14.187006}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 32032836, "retrieval_score": 16.823818}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 32032836, "retrieval_score": 16.823818}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 32032836, "retrieval_score": 16.823818}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 32032836, "retrieval_score": 16.477596}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340, "for": 32032836, "retrieval_score": 15.796842}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372, "for": 9560207, "retrieval_score": 25.261501}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038, "for": 9560207, "retrieval_score": 15.902929}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136, "for": 9560207, "retrieval_score": 15.685055}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020, "for": 9560207, "retrieval_score": 14.956528}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070, "for": 9560207, "retrieval_score": 14.906927}
{"snippet": "DAY_1 ... DAY_7", "intent": "Get the name of the n-th day of the week.", "question_id": 5359, "for": 8380389, "retrieval_score": 15.687265}
{"snippet": "ABDAY_1 ... ABDAY_7", "intent": "Get the abbreviated name of the n-th day of the week.", "question_id": 5360, "for": 8380389, "retrieval_score": 15.317139}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355, "for": 8380389, "retrieval_score": 12.592159}
{"snippet": "datetime.replace(day=self.day)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2287, "for": 8380389, "retrieval_score": 11.897959}
{"snippet": "time.get_clock_info(name)", "intent": "Get information on the specified clock as a namespace object . With arguments `name`.", "question_id": 10440, "for": 8380389, "retrieval_score": 10.934624}
{"snippet": "Pattern.fullmatch(string)", "intent": "If the whole `string` matches this regular expression , return a corresponding match object .", "question_id": 7978, "for": 15863066, "retrieval_score": 25.279692}
{"snippet": "re.fullmatch(pattern, string)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object .", "question_id": 7941, "for": 15863066, "retrieval_score": 24.71012}
{"snippet": "re.fullmatch(pattern, string, flags=0)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7942, "for": 15863066, "retrieval_score": 23.145641}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156, "for": 15863066, "retrieval_score": 20.766953}
{"snippet": "Match.re", "intent": "The regular expression object whose match() or search() method produced this match instance.", "question_id": 8013, "for": 15863066, "retrieval_score": 19.60076}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196, "for": 4830535, "retrieval_score": 22.723593}
{"snippet": "datetime.MAXYEAR", "intent": "The largest year number allowed in a date or datetime object.", "question_id": 2197, "for": 4830535, "retrieval_score": 22.723593}
{"snippet": "datetime.strptime(date_string, format)", "intent": "Return a datetime corresponding to `date_string` , parsed according to `format` .", "question_id": 2268, "for": 4830535, "retrieval_score": 20.890556}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 4830535, "retrieval_score": 20.268932}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201, "for": 4830535, "retrieval_score": 19.70037}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 4830535, "retrieval_score": 28.401726}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370, "for": 4830535, "retrieval_score": 23.07383}
{"snippet": "locale.ERA_D_T_FMT", "intent": "Get a format string for time.strftime() to represent date and time in a locale-specific era-based way.", "question_id": 5369, "for": 4830535, "retrieval_score": 22.596935}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 4830535, "retrieval_score": 22.54042}
{"snippet": "locale.D_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent a date in a locale-specific way.", "question_id": 5356, "for": 4830535, "retrieval_score": 21.708082}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 952914, "retrieval_score": 15.87989}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 952914, "retrieval_score": 14.271506}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045, "for": 952914, "retrieval_score": 13.648453}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 952914, "retrieval_score": 13.623499}
{"snippet": "NNTP.list(group_pattern=None, file=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` . With arguments `file`.", "question_id": 6468, "for": 952914, "retrieval_score": 13.29556}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 952914, "retrieval_score": 15.87989}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 952914, "retrieval_score": 14.271506}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045, "for": 952914, "retrieval_score": 13.648453}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 952914, "retrieval_score": 13.623499}
{"snippet": "NNTP.list(group_pattern=None, file=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` . With arguments `file`.", "question_id": 6468, "for": 952914, "retrieval_score": 13.29556}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 952914, "retrieval_score": 15.87989}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 952914, "retrieval_score": 14.271506}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045, "for": 952914, "retrieval_score": 13.648453}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 952914, "retrieval_score": 13.623499}
{"snippet": "NNTP.list(group_pattern=None, file=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` . With arguments `file`.", "question_id": 6468, "for": 952914, "retrieval_score": 13.29556}
{"snippet": "binascii.b2a_uu(data)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char .", "question_id": 821, "for": 3673428, "retrieval_score": 13.470487}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302, "for": 3673428, "retrieval_score": 13.09938}
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824, "for": 3673428, "retrieval_score": 12.481243}
{"snippet": "binascii.b2a_qp(data)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding .", "question_id": 828, "for": 3673428, "retrieval_score": 11.918817}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825, "for": 3673428, "retrieval_score": 11.859558}
{"snippet": "random.uniform(a, b)", "intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "question_id": 7907, "for": 3984539, "retrieval_score": 22.449392}
{"snippet": "random.randint(a, b)", "intent": "Return `a` random integer N such that a < = N < = b. Alias for randrange ( a , b+1 ) . With arguments `b`.", "question_id": 7893, "for": 3984539, "retrieval_score": 21.878807}
{"snippet": "Unpacker.unpack_fstring(n)", "intent": "Unpacks and returns a fixed length string . `n` is the number of characters expected .", "question_id": 12292, "for": 3984539, "retrieval_score": 16.64281}
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445, "for": 3984539, "retrieval_score": 16.366512}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`.", "question_id": 11728, "for": 3984539, "retrieval_score": 16.063198}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2658, "for": 3984539, "retrieval_score": 24.158873}
{"snippet": "difflib.diff_bytes(dfunc, a, b, tofile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2659, "for": 3984539, "retrieval_score": 24.158873}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2660, "for": 3984539, "retrieval_score": 24.158873}
{"snippet": "difflib.diff_bytes(dfunc, a, b, tofiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2661, "for": 3984539, "retrieval_score": 24.158873}
{"snippet": "difflib.diff_bytes(dfunc, a, b, lineterm=b'\\n')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2663, "for": 3984539, "retrieval_score": 24.158873}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 19300174, "retrieval_score": 18.054821}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 19300174, "retrieval_score": 18.054821}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 19300174, "retrieval_score": 16.009964}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 19300174, "retrieval_score": 15.866804}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 19300174, "retrieval_score": 14.606932}
{"snippet": "bytes.split(maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given and non-negative , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9365, "for": 13368723, "retrieval_score": 20.904587}
{"snippet": "bytes.split(sep=None, maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given and non-negative , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9366, "for": 13368723, "retrieval_score": 20.904587}
{"snippet": "bytearray.split(maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given and non-negative , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9369, "for": 13368723, "retrieval_score": 20.904587}
{"snippet": "bytearray.split(sep=None, maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given and non-negative , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9370, "for": 13368723, "retrieval_score": 20.904587}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 13368723, "retrieval_score": 20.419239}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 37584492, "retrieval_score": 18.353235}
{"snippet": "Node.normalize()", "intent": "Join adjacent text nodes so that all stretches of text are stored as single Text instances .", "question_id": 12334, "for": 37584492, "retrieval_score": 17.275091}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 37584492, "retrieval_score": 14.347498}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 37584492, "retrieval_score": 14.347498}
{"snippet": "InteractiveConsole.resetbuffer()", "intent": "Remove any unhandled source text from the input buffer .", "question_id": 1189, "for": 37584492, "retrieval_score": 14.28323}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825, "for": 17027690, "retrieval_score": 11.272602}
{"snippet": "chunk.skip()", "intent": "Skip to the end of the chunk .", "question_id": 1092, "for": 17027690, "retrieval_score": 10.4509735}
{"snippet": "binascii.b2a_uu(data)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char .", "question_id": 821, "for": 17027690, "retrieval_score": 10.447933}
{"snippet": "chunk.close()", "intent": "Close and skip to the end of the chunk .", "question_id": 1085, "for": 17027690, "retrieval_score": 9.930133}
{"snippet": "mmap.readline()", "intent": "Returns a single line , starting at the current file position and up to the next newline .", "question_id": 6012, "for": 17027690, "retrieval_score": 9.925964}
{"snippet": "readline.get_begidx()", "intent": "Get the beginning or ending index of the completion scope .", "question_id": 8044, "for": 18358938, "retrieval_score": 12.988455}
{"snippet": "readline.get_endidx()", "intent": "Get the beginning or ending index of the completion scope .", "question_id": 8045, "for": 18358938, "retrieval_score": 12.988455}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 18358938, "retrieval_score": 11.5197935}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 18358938, "retrieval_score": 11.445068}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 18358938, "retrieval_score": 11.412592}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800, "for": 53513, "retrieval_score": 11.084859}
{"snippet": "faulthandler.is_enabled()", "intent": "Check if the fault handler is enabled .", "question_id": 3721, "for": 53513, "retrieval_score": 11.072291}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 53513, "retrieval_score": 11.070452}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221, "for": 53513, "retrieval_score": 10.799346}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801, "for": 53513, "retrieval_score": 10.582589}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894, "for": 53513, "retrieval_score": 16.259388}
{"snippet": "faulthandler.is_enabled()", "intent": "Check if the fault handler is enabled .", "question_id": 3721, "for": 53513, "retrieval_score": 11.072291}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 53513, "retrieval_score": 11.070452}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801, "for": 53513, "retrieval_score": 10.582589}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 53513, "retrieval_score": 10.491693}
{"snippet": "faulthandler.is_enabled()", "intent": "Check if the fault handler is enabled .", "question_id": 3721, "for": 53513, "retrieval_score": 11.072291}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 53513, "retrieval_score": 11.070452}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801, "for": 53513, "retrieval_score": 10.582589}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 53513, "retrieval_score": 10.491693}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800, "for": 53513, "retrieval_score": 10.249756}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 13717463, "retrieval_score": 18.590929}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 13717463, "retrieval_score": 17.376629}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639, "for": 13717463, "retrieval_score": 17.158087}
{"snippet": "element.keys()", "intent": "Returns the elements attribute names as a list .", "question_id": 12487, "for": 13717463, "retrieval_score": 16.670841}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 13717463, "retrieval_score": 16.60892}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 13237941, "retrieval_score": 11.075131}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 13237941, "retrieval_score": 10.607663}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 13237941, "retrieval_score": 8.703225}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 13237941, "retrieval_score": 8.280191}
{"snippet": "deque.reverse()", "intent": "Reverse the elements of the deque in-place and then return None .", "question_id": 1367, "for": 13237941, "retrieval_score": 8.087191}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 13237941, "retrieval_score": 18.169481}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 13237941, "retrieval_score": 17.802675}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 13237941, "retrieval_score": 16.859436}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 13237941, "retrieval_score": 16.403456}
{"snippet": "winreg.QueryValue(key, sub_key)", "intent": "Retrieves the unnamed value for a `key` , as a string . `sub_key` is a string that holds the name of the subkey with which the value is associated .", "question_id": 12147, "for": 13237941, "retrieval_score": 16.027046}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 13237941, "retrieval_score": 18.919765}
{"snippet": "exit_stack.close()", "intent": "Immediately unwinds the callback stack , invoking callbacks in the reverse order of registration .", "question_id": 1631, "for": 13237941, "retrieval_score": 17.175344}
{"snippet": "winreg.KEY_CREATE_SUB_KEY", "intent": "Required to create a subkey of a registry key.", "question_id": 12168, "for": 13237941, "retrieval_score": 16.840904}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745, "for": 13237941, "retrieval_score": 16.441513}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 13237941, "retrieval_score": 15.924137}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513, "for": 37084812, "retrieval_score": 10.3746395}
{"snippet": "decimal.ROUND_CEILING", "intent": "Round towards Infinity.", "question_id": 2577, "for": 37084812, "retrieval_score": 10.091232}
{"snippet": "decimal.ROUND_DOWN", "intent": "Round towards zero.", "question_id": 2578, "for": 37084812, "retrieval_score": 10.091232}
{"snippet": "decimal.ROUND_FLOOR", "intent": "Round towards -Infinity.", "question_id": 2579, "for": 37084812, "retrieval_score": 10.091232}
{"snippet": "decimal.radix()", "intent": "Return Decimal ( 10 ) , the radix ( base ) in which the Decimal class does all its arithmetic .", "question_id": 2465, "for": 37084812, "retrieval_score": 9.92716}
{"snippet": "pkgutil.get_data(package, resource)", "intent": "Get a `resource` from a `package` .", "question_id": 7457, "for": 8938449, "retrieval_score": 9.110263}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343, "for": 8938449, "retrieval_score": 8.866566}
{"snippet": "SSLSocket.get_channel_binding()", "intent": "Get channel binding data for current connection , as a bytes object .", "question_id": 8982, "for": 8938449, "retrieval_score": 8.661297}
{"snippet": "statistics.mode(data)", "intent": "Return the most common `data` point from discrete or nominal data .", "question_id": 9132, "for": 8938449, "retrieval_score": 7.4044275}
{"snippet": "socket.fromshare(data)", "intent": "Instantiate a socket from `data` obtained from the socket.share ( ) method .", "question_id": 8632, "for": 8938449, "retrieval_score": 7.3685417}
{"snippet": "tracemalloc.get_traceback_limit()", "intent": "Get the maximum number of frames stored in the traceback of a trace .", "question_id": 10843, "for": 37125495, "retrieval_score": 13.696437}
{"snippet": "os.RWF_DSYNC", "intent": "Provide a per-write equivalent of the O_DSYNC open(2) flag.", "question_id": 6791, "for": 37125495, "retrieval_score": 13.535896}
{"snippet": "os.RWF_SYNC", "intent": "Provide a per-write equivalent of the O_SYNC open(2) flag.", "question_id": 6792, "for": 37125495, "retrieval_score": 13.535896}
{"snippet": "os.sched_get_priority_max(policy)", "intent": "Get the maximum priority value for `policy` .", "question_id": 7106, "for": 37125495, "retrieval_score": 12.78194}
{"snippet": "html_calendar.formatyearpage(theyear, width=3)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 963, "for": 37125495, "retrieval_score": 11.854834}
{"snippet": "os.sched_get_priority_min(policy)", "intent": "Get the minimum priority value for `policy` .", "question_id": 7105, "for": 23531030, "retrieval_score": 17.141068}
{"snippet": "os.sched_get_priority_max(policy)", "intent": "Get the maximum priority value for `policy` .", "question_id": 7106, "for": 23531030, "retrieval_score": 17.141068}
{"snippet": "config_parser.get(section, option)", "intent": "Get an `option` value for the named `section` .", "question_id": 1524, "for": 23531030, "retrieval_score": 16.694494}
{"snippet": "simple_http_request_handler.do_HEAD()", "intent": "This method serves the 'HEAD ' request type : it sends the headers it would send for the equivalent GET request .", "question_id": 4664, "for": 23531030, "retrieval_score": 16.189373}
{"snippet": "configparser.MAX_INTERPOLATION_DEPTH", "intent": "The maximum depth for recursive interpolation for get() when the raw parameter is false.", "question_id": 1568, "for": 23531030, "retrieval_score": 15.711622}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393, "for": 4301069, "retrieval_score": 13.9096575}
{"snippet": "signature.parameters", "intent": "An ordered mapping of parameters\u2019 names to the corresponding Parameter objects.", "question_id": 4984, "for": 4301069, "retrieval_score": 9.106742}
{"snippet": "bound_arguments.arguments", "intent": "An ordered, mutable mapping (collections.OrderedDict) of parameters\u2019 names to arguments\u2019 values.", "question_id": 5003, "for": 4301069, "retrieval_score": 9.106742}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394, "for": 4301069, "retrieval_score": 9.081705}
{"snippet": "Node.toprettyxml()", "intent": "Return a pretty-printed version of the document .", "question_id": 12413, "for": 4301069, "retrieval_score": 9.0137205}
{"snippet": "async_exit_stack.aclose()", "intent": "Similar to close ( ) but properly handles awaitables .", "question_id": 1636, "for": 32458541, "retrieval_score": 10.081155}
{"snippet": "urllib.request.DataHandler", "intent": "Open data URLs.", "question_id": 11811, "for": 32458541, "retrieval_score": 9.722764}
{"snippet": "urllib.request.FTPHandler", "intent": "Open FTP URLs.", "question_id": 11812, "for": 32458541, "retrieval_score": 9.722764}
{"snippet": "urllib.request.HTTPHandler", "intent": "A class to handle opening of HTTP URLs.", "question_id": 11801, "for": 32458541, "retrieval_score": 8.456235}
{"snippet": "urllib.request.HTTPSHandler()", "intent": "A class to handle opening of HTTPS URLs .", "question_id": 11802, "for": 32458541, "retrieval_score": 8.456235}
{"snippet": "async_exit_stack.aclose()", "intent": "Similar to close ( ) but properly handles awaitables .", "question_id": 1636, "for": 32458541, "retrieval_score": 10.081155}
{"snippet": "mock.return_value", "intent": "Set this to configure the value returned by calling the mock:", "question_id": 11590, "for": 32458541, "retrieval_score": 9.647617}
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106, "for": 32458541, "retrieval_score": 8.269726}
{"snippet": "Request.get_full_url()", "intent": "Return the URL given in the constructor .", "question_id": 11829, "for": 32458541, "retrieval_score": 8.157838}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN", "intent": "Raised when an input byte could not properly be assigned to a character; for example, a NUL byte (value 0) in a UTF-8 input stream.", "question_id": 7793, "for": 32458541, "retrieval_score": 8.06529}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 1874194, "retrieval_score": 23.853544}
{"snippet": "widget.index(item)", "intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "question_id": 10639, "for": 1874194, "retrieval_score": 20.261772}
{"snippet": "email_message.get_charsets(failobj=None)", "intent": "Return a list containing the character set names in the message . If the subpart has no Content-Type header , no charset parameter , or is not of the text main MIME type , then that item in the returned list will be `failobj` .", "question_id": 3282, "for": 1874194, "retrieval_score": 19.736551}
{"snippet": "message.get_charsets(failobj=None)", "intent": "Return a list containing the character set names in the message . However , if the subpart has no Content-Type header , no charset parameter , or is not of the text main MIME type , then that item in the returned list will be `failobj` .", "question_id": 3025, "for": 1874194, "retrieval_score": 19.282265}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050, "for": 1874194, "retrieval_score": 18.456879}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 1874194, "retrieval_score": 20.405537}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128, "for": 1874194, "retrieval_score": 18.157787}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129, "for": 1874194, "retrieval_score": 18.024984}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 1874194, "retrieval_score": 17.793856}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 1874194, "retrieval_score": 17.388958}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921, "for": 29100599, "retrieval_score": 16.559875}
{"snippet": "html_calendar.formatyear(theyear, width=3)", "intent": "Return a year \u2019 s calendar as an HTML table . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 961, "for": 29100599, "retrieval_score": 14.927988}
{"snippet": "html_calendar.formatyearpage(theyear, width=3)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 963, "for": 29100599, "retrieval_score": 14.653493}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 966, "for": 29100599, "retrieval_score": 12.004613}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 967, "for": 29100599, "retrieval_score": 11.322373}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243, "for": 2621674, "retrieval_score": 15.197363}
{"snippet": "str.split(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9244, "for": 2621674, "retrieval_score": 15.197363}
{"snippet": "difflib.restore(sequence, which)", "intent": "Return one of the two sequences that generated a delta . Given a `sequence` produced by Differ.compare ( ) or ndiff ( ) , extract lines originating from file 1 or 2 ( parameter `which` ) , stripping off line prefixes .", "question_id": 2646, "for": 2621674, "retrieval_score": 15.103964}
{"snippet": "nntplib.NNTPProtocolError", "intent": "Exception raised when a reply is received from the server that does not begin with a digit in the range 1\u20135.", "question_id": 6444, "for": 2621674, "retrieval_score": 14.253941}
{"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326, "for": 2621674, "retrieval_score": 13.795563}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638, "for": 5245058, "retrieval_score": 12.3260355}
{"snippet": "NNTP.head(file=None)", "intent": "Same as article ( ) , but sends a HEAD command . The lines returned ( or written to `file` ) will only contain the message headers , not the body .", "question_id": 6486, "for": 5245058, "retrieval_score": 12.058594}
{"snippet": "NNTP.body(file=None)", "intent": "Same as article ( ) , but sends a BODY command . The lines returned ( or written to `file` ) will only contain the message body , not the headers .", "question_id": 6490, "for": 5245058, "retrieval_score": 12.058594}
{"snippet": "textwrap.indent(text, prefix, predicate=None)", "intent": "Add `prefix` to the beginning of selected lines in `text` . The optional `predicate` argument can be used to control which lines are indented .", "question_id": 10325, "for": 5245058, "retrieval_score": 11.752207}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578, "for": 5245058, "retrieval_score": 11.700445}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 2721782, "retrieval_score": 20.043295}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196, "for": 2721782, "retrieval_score": 17.186504}
{"snippet": "datetime.MAXYEAR", "intent": "The largest year number allowed in a date or datetime object.", "question_id": 2197, "for": 2721782, "retrieval_score": 17.186504}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 2721782, "retrieval_score": 14.953588}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266, "for": 2721782, "retrieval_score": 14.838281}
{"snippet": "csv.excel_tab", "intent": "The excel_tab class defines the usual properties of an Excel-generated TAB-delimited file.", "question_id": 1712, "for": 27896214, "retrieval_score": 18.456602}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713, "for": 27896214, "retrieval_score": 13.584151}
{"snippet": "csv.writer(csvfile, **fmtparams, dialect='excel')", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1683, "for": 27896214, "retrieval_score": 13.260116}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 27896214, "retrieval_score": 13.237473}
{"snippet": "@test.support.requires_mac_version(*min_version)", "intent": "Decorator for the minimum version when running test on Mac OS X . With arguments `*min_version`.", "question_id": 10213, "for": 27896214, "retrieval_score": 11.925511}
{"snippet": "test_case.assertMultiLineEqual(first, second)", "intent": "Test that the multiline string `first` is equal to the string `second` .", "question_id": 11448, "for": 4628618, "retrieval_score": 16.225994}
{"snippet": "doc_test.docstring", "intent": "The string that the test was extracted from, or None if the string is unavailable, or if the test was not extracted from a string.", "question_id": 2823, "for": 4628618, "retrieval_score": 15.450396}
{"snippet": "test_case.assertMultiLineEqual(first, second, msg=None)", "intent": "Test that the multiline string `first` is equal to the string `second` . With arguments `msg`.", "question_id": 11449, "for": 4628618, "retrieval_score": 15.30983}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 4628618, "retrieval_score": 12.776034}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723, "for": 4628618, "retrieval_score": 12.375426}
{"snippet": "ZipFile.filename", "intent": "Name of the ZIP file.", "question_id": 12843, "for": 12777222, "retrieval_score": 14.931598}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941, "for": 12777222, "retrieval_score": 14.855693}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940, "for": 12777222, "retrieval_score": 14.495357}
{"snippet": "TarFile.extract(member, path=\"\", set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9944, "for": 12777222, "retrieval_score": 14.416531}
{"snippet": "TarFile.extract(member, set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9942, "for": 12777222, "retrieval_score": 13.596045}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 3457673, "retrieval_score": 16.342773}
{"snippet": "email.header.make_header(decoded_seq)", "intent": "Create a Header instance from a sequence of pairs as returned by decode_header ( ) . With arguments `decoded_seq`.", "question_id": 3142, "for": 3457673, "retrieval_score": 15.855585}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 3457673, "retrieval_score": 15.700165}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 3457673, "retrieval_score": 15.68154}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 3457673, "retrieval_score": 14.959303}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895, "for": 8194156, "retrieval_score": 23.213936}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898, "for": 8194156, "retrieval_score": 23.213936}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 8194156, "retrieval_score": 22.190922}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 8194156, "retrieval_score": 21.982483}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 8194156, "retrieval_score": 21.451294}
{"snippet": "str.startswith(prefix)", "intent": "Return True if string starts with the `prefix` , otherwise return False .", "question_id": 9249, "for": 5577501, "retrieval_score": 16.165258}
{"snippet": "str.startswith(prefix, start)", "intent": "Return True if string starts with the `prefix` , otherwise return False . With optional `start` , test string beginning at that position .", "question_id": 9248, "for": 5577501, "retrieval_score": 15.357219}
{"snippet": "str.startswith(prefix, start, end)", "intent": "Return True if string starts with the `prefix` , otherwise return False . With optional `start` , test string beginning at that position . With optional `end` , stop comparing string at that position .", "question_id": 9247, "for": 5577501, "retrieval_score": 14.5348425}
{"snippet": "locale.delocalize(string)", "intent": "Converts a `string` into a normalized number string , following the LC_NUMERIC settings .", "question_id": 5401, "for": 5577501, "retrieval_score": 11.540978}
{"snippet": "bdb.get_bpbynumber(arg)", "intent": "Return a breakpoint specified by the given number . If `arg` is a string , it will be converted to a number .", "question_id": 799, "for": 5577501, "retrieval_score": 11.381328}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 5577501, "retrieval_score": 23.635015}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 5577501, "retrieval_score": 19.952305}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 5577501, "retrieval_score": 17.413694}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 5577501, "retrieval_score": 17.413694}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175, "for": 5577501, "retrieval_score": 16.89725}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027, "for": 4934806, "retrieval_score": 10.332836}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037, "for": 4934806, "retrieval_score": 10.332836}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6047, "for": 4934806, "retrieval_score": 10.332836}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 4934806, "retrieval_score": 9.760454}
{"snippet": "text_calendar.prmonth(theyear, themonth)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`.", "question_id": 932, "for": 4934806, "retrieval_score": 8.847768}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 15530399, "retrieval_score": 30.53129}
{"snippet": "re.split(pattern, string, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . With arguments `flags`.", "question_id": 7945, "for": 15530399, "retrieval_score": 28.26319}
{"snippet": "re.split(pattern, string, maxsplit=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list .", "question_id": 7944, "for": 15530399, "retrieval_score": 20.224506}
{"snippet": "re.split(pattern, string, maxsplit=0, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "question_id": 7946, "for": 15530399, "retrieval_score": 19.355442}
{"snippet": "re.sub(pattern, repl, string)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` .", "question_id": 7951, "for": 15530399, "retrieval_score": 19.202314}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970, "for": 21519203, "retrieval_score": 10.329791}
{"snippet": "email_message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 3247, "for": 21519203, "retrieval_score": 10.329791}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 21519203, "retrieval_score": 10.080179}
{"snippet": "itertools.count()", "intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "question_id": 5246, "for": 21519203, "retrieval_score": 9.909414}
{"snippet": "itertools.count(start=0)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "question_id": 5247, "for": 21519203, "retrieval_score": 9.909414}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129, "for": 16040156, "retrieval_score": 9.790819}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128, "for": 16040156, "retrieval_score": 9.336672}
{"snippet": "tuple(iterable)", "intent": "Tuples may be constructed in a number of ways : The constructor builds a tuple whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9160, "for": 16040156, "retrieval_score": 8.4149}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 16040156, "retrieval_score": 8.339044}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 16040156, "retrieval_score": 8.27882}
{"snippet": "locale.THOUSEP", "intent": "Get the separator character for thousands (groups of three digits).", "question_id": 5364, "for": 40963347, "retrieval_score": 14.43935}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494, "for": 40963347, "retrieval_score": 11.400324}
{"snippet": "audioop.avg(fragment, width)", "intent": "Return the average over all samples in the `fragment` . With arguments `width`.", "question_id": 683, "for": 40963347, "retrieval_score": 11.257509}
{"snippet": "audioop.avgpp(fragment, width)", "intent": "Return the average peak-peak value over all samples in the `fragment` . With arguments `width`.", "question_id": 684, "for": 40963347, "retrieval_score": 10.51335}
{"snippet": "set.issubset(other)", "intent": "Test whether every element in the set is in `other` .", "question_id": 9439, "for": 40963347, "retrieval_score": 9.156105}
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824, "for": 180606, "retrieval_score": 14.389981}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302, "for": 180606, "retrieval_score": 13.934484}
{"snippet": "binascii.b2a_qp(data)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding .", "question_id": 828, "for": 180606, "retrieval_score": 13.741544}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 180606, "retrieval_score": 13.237605}
{"snippet": "binascii.b2a_uu(data)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char .", "question_id": 821, "for": 180606, "retrieval_score": 12.595387}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 13462365, "retrieval_score": 20.739737}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357, "for": 13462365, "retrieval_score": 20.284964}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 13462365, "retrieval_score": 19.663607}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 13462365, "retrieval_score": 19.110426}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 13462365, "retrieval_score": 18.735718}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 13462365, "retrieval_score": 20.739737}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 13462365, "retrieval_score": 15.730812}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 13462365, "retrieval_score": 14.527619}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 13462365, "retrieval_score": 14.273549}
{"snippet": "condition.wait_for(predicate)", "intent": "Wait until a condition evaluates to true . `predicate` should be a callable which result will be interpreted as a boolean value .", "question_id": 10392, "for": 13462365, "retrieval_score": 14.130159}
{"snippet": "sequence_matcher.ratio()", "intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "question_id": 2687, "for": 13291539, "retrieval_score": 11.06809}
{"snippet": "ctypes.c_double", "intent": "Represents the C double datatype.", "question_id": 1858, "for": 13291539, "retrieval_score": 10.489348}
{"snippet": "Unpacker.unpack_double()", "intent": "Unpacks a double-precision floating point number , similarly to unpack_float ( ) .", "question_id": 12291, "for": 13291539, "retrieval_score": 10.428546}
{"snippet": "ctypes.c_longdouble", "intent": "Represents the C long double datatype.", "question_id": 1859, "for": 13291539, "retrieval_score": 10.201049}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458, "for": 13291539, "retrieval_score": 10.064341}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263, "for": 8777753, "retrieval_score": 23.872139}
{"snippet": "datetime.timestamp()", "intent": "Return POSIX timestamp corresponding to the datetime instance .", "question_id": 2302, "for": 8777753, "retrieval_score": 17.95948}
{"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262, "for": 8777753, "retrieval_score": 17.155914}
{"snippet": "tzinfo.fromutc(dt)", "intent": "This is called from the default datetime.astimezone ( ) implementation . When called from that , dt.tzinfo is self , and `dt` \u2019 s date and time data are to be viewed as expressing a UTC time .", "question_id": 2356, "for": 8777753, "retrieval_score": 16.040945}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 8777753, "retrieval_score": 15.958708}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 13838405, "retrieval_score": 14.231839}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 13838405, "retrieval_score": 12.433243}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 13838405, "retrieval_score": 12.433243}
{"snippet": "text_calendar.formatyear(theyear)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`.", "question_id": 936, "for": 13838405, "retrieval_score": 12.300526}
{"snippet": "calendar.calendar(year, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `m`.", "question_id": 1015, "for": 13838405, "retrieval_score": 10.717257}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 3766633, "retrieval_score": 17.513712}
{"snippet": "types.coroutine(gen_func)", "intent": "This function transforms a generator function into a coroutine function which returns a generator-based coroutine . If `gen_func` is a generator function , it will be modified in-place .", "question_id": 11228, "for": 3766633, "retrieval_score": 17.264118}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 3766633, "retrieval_score": 14.401196}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951, "for": 3766633, "retrieval_score": 14.130509}
{"snippet": "sndhdr.whathdr(filename)", "intent": "Determines the type of sound data stored in a file based on the file header . The name of the file is given by `filename` .", "question_id": 8550, "for": 3766633, "retrieval_score": 14.104488}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978, "for": 39604780, "retrieval_score": 14.712796}
{"snippet": "TarFile.list()", "intent": "Print a table of contents to sys.stdout .", "question_id": 9927, "for": 39604780, "retrieval_score": 8.386921}
{"snippet": "ZipFile.printdir()", "intent": "Print a table of contents for the archive to sys.stdout .", "question_id": 12826, "for": 39604780, "retrieval_score": 8.157142}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737, "for": 39604780, "retrieval_score": 7.808076}
{"snippet": "traceback.print_exception(etype, value, tb, file=None)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10739, "for": 39604780, "retrieval_score": 7.808076}
{"snippet": "auto.end", "intent": "The index after the last invalid data in object.", "question_id": 3678, "for": 42142756, "retrieval_score": 15.00599}
{"snippet": "cursor.lastrowid", "intent": "This read-only attribute provides the rowid of the last modified row.", "question_id": 8850, "for": 42142756, "retrieval_score": 13.040257}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302, "for": 42142756, "retrieval_score": 12.568854}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303, "for": 42142756, "retrieval_score": 12.568854}
{"snippet": "mh.pack()", "intent": "Rename messages in the mailbox as necessary to eliminate gaps in numbering .", "question_id": 5785, "for": 42142756, "retrieval_score": 11.496684}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 28416408, "retrieval_score": 24.563402}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 28416408, "retrieval_score": 24.563402}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424, "for": 28416408, "retrieval_score": 24.352814}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136, "for": 28416408, "retrieval_score": 23.775387}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer, lock=True)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed . If `lock` is True ( the default ) then a new lock object is created to synchronize access to the value .", "question_id": 6268, "for": 28416408, "retrieval_score": 23.281368}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 17608210, "retrieval_score": 16.579742}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 17608210, "retrieval_score": 16.579742}
{"snippet": "Unpacker.unpack_list(unpack_item)", "intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "question_id": 12297, "for": 17608210, "retrieval_score": 13.928759}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827, "for": 17608210, "retrieval_score": 13.491438}
{"snippet": "Packer.pack_array(list, pack_item)", "intent": "Packs a variable length `list` of homogeneous items . With arguments `pack_item`.", "question_id": 12284, "for": 17608210, "retrieval_score": 13.368223}
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106, "for": 21414159, "retrieval_score": 16.564789}
{"snippet": "controller.open_new(url)", "intent": "Open `url` in a new window of the browser handled by this controller , if possible , otherwise , open url in the only browser window .", "question_id": 12118, "for": 21414159, "retrieval_score": 15.91735}
{"snippet": "prototype(vtbl_index, name)", "intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method .", "question_id": 1807, "for": 21414159, "retrieval_score": 14.623795}
{"snippet": "prototype(vtbl_index, name, paramflags)", "intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method . With arguments `paramflags`.", "question_id": 1806, "for": 21414159, "retrieval_score": 14.076576}
{"snippet": "webbrowser.open_new_tab(url)", "intent": "Open `url` in a new page ( \u201c tab \u201d ) of the default browser , if possible , otherwise equivalent to open_new ( ) .", "question_id": 12107, "for": 21414159, "retrieval_score": 12.892071}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 8654637, "retrieval_score": 17.057827}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 8654637, "retrieval_score": 17.015814}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150, "for": 8654637, "retrieval_score": 14.667891}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518, "for": 8654637, "retrieval_score": 14.3815775}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 8654637, "retrieval_score": 14.136941}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 8654637, "retrieval_score": 17.015814}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 8654637, "retrieval_score": 14.762653}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 8654637, "retrieval_score": 14.762653}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640, "for": 8654637, "retrieval_score": 14.598396}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490, "for": 8654637, "retrieval_score": 14.475842}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 13668393, "retrieval_score": 12.429582}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 13668393, "retrieval_score": 12.429582}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951, "for": 13668393, "retrieval_score": 11.888807}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454, "for": 13668393, "retrieval_score": 11.463552}
{"snippet": "test_case.assertTupleEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11456, "for": 13668393, "retrieval_score": 11.463552}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136, "for": 10543303, "retrieval_score": 18.96763}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639, "for": 10543303, "retrieval_score": 14.74935}
{"snippet": "math.ceil(x)", "intent": "Return the ceiling of `x` , the smallest integer greater than or equal to x .", "question_id": 5885, "for": 10543303, "retrieval_score": 14.3441105}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2641, "for": 10543303, "retrieval_score": 13.778964}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841, "for": 10543303, "retrieval_score": 13.633414}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136, "for": 10543303, "retrieval_score": 18.96763}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639, "for": 10543303, "retrieval_score": 14.74935}
{"snippet": "math.ceil(x)", "intent": "Return the ceiling of `x` , the smallest integer greater than or equal to x .", "question_id": 5885, "for": 10543303, "retrieval_score": 14.3441105}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2641, "for": 10543303, "retrieval_score": 13.778964}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841, "for": 10543303, "retrieval_score": 13.633414}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136, "for": 10543303, "retrieval_score": 18.96763}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639, "for": 10543303, "retrieval_score": 14.74935}
{"snippet": "math.ceil(x)", "intent": "Return the ceiling of `x` , the smallest integer greater than or equal to x .", "question_id": 5885, "for": 10543303, "retrieval_score": 14.3441105}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 10543303, "retrieval_score": 14.128295}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2641, "for": 10543303, "retrieval_score": 13.778964}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 12655007, "retrieval_score": 25.630526}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 12655007, "retrieval_score": 18.695976}
{"snippet": "Request.header_items()", "intent": "Return a list of tuples ( header_name , header_value ) of the Request headers .", "question_id": 11833, "for": 12655007, "retrieval_score": 17.205952}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 12655007, "retrieval_score": 17.029284}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 12655007, "retrieval_score": 16.789097}
{"snippet": "os.stat(path)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` .", "question_id": 6917, "for": 16249440, "retrieval_score": 26.553734}
{"snippet": "os.path.samestat(stat1, stat2)", "intent": "Return True if the stat tuples `stat1` and `stat2` refer to the same file .", "question_id": 7168, "for": 16249440, "retrieval_score": 26.347088}
{"snippet": "os.stat_result", "intent": "Object whose attributes correspond roughly to the members of the stat structure.", "question_id": 6921, "for": 16249440, "retrieval_score": 26.137718}
{"snippet": "os.stat(path, dir_fd=None)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` . With arguments `dir_fd`.", "question_id": 6918, "for": 16249440, "retrieval_score": 25.181545}
{"snippet": "os.stat(path, follow_symlinks=True)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` . With arguments `follow_symlinks`.", "question_id": 6919, "for": 16249440, "retrieval_score": 25.181545}
{"snippet": "element.extend(subelements)", "intent": "Appends `subelements` from a sequence object with zero or more elements .", "question_id": 12490, "for": 26727314, "retrieval_score": 14.892407}
{"snippet": "csv.register_dialect(name, dialect, **fmtparams)", "intent": "Associate `dialect` with `name` . With arguments `**fmtparams`.", "question_id": 1684, "for": 26727314, "retrieval_score": 14.629683}
{"snippet": "csv.register_dialect(name, dialect)", "intent": "Associate `dialect` with `name` .", "question_id": 1685, "for": 26727314, "retrieval_score": 13.575703}
{"snippet": "csv.register_dialect(name)", "intent": "Associate `dialect` with `name` .", "question_id": 1686, "for": 26727314, "retrieval_score": 13.575703}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_REP", "intent": "The model must occur zero or more times, as for A*.", "question_id": 7786, "for": 26727314, "retrieval_score": 13.5099745}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 32996293, "retrieval_score": 23.150793}
{"snippet": "pow(x, y)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4074, "for": 32996293, "retrieval_score": 23.150793}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 32996293, "retrieval_score": 20.921967}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 32996293, "retrieval_score": 18.557512}
{"snippet": "context.quantize(x, y)", "intent": "Returns a value equal to `x` ( rounded ) , having the exponent of `y` .", "question_id": 2563, "for": 32996293, "retrieval_score": 18.175266}
{"snippet": "widget.identify_element(x, y)", "intent": "Returns the element at position `x` , `y` .", "question_id": 10638, "for": 32996293, "retrieval_score": 16.755291}
{"snippet": "config_parser.has_section(section)", "intent": "Indicates whether the named `section` is present in the configuration .", "question_id": 1509, "for": 32996293, "retrieval_score": 15.761024}
{"snippet": "UUID.is_safe", "intent": "An enumeration of SafeUUID which indicates whether the platform generated the UUID in a multiprocessing-safe way.", "question_id": 11955, "for": 32996293, "retrieval_score": 15.489512}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227, "for": 32996293, "retrieval_score": 14.702934}
{"snippet": "set.issubset(other)", "intent": "Test whether every element in the set is in `other` .", "question_id": 9439, "for": 32996293, "retrieval_score": 14.619132}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857, "for": 4289331, "retrieval_score": 11.417583}
{"snippet": "TarFile.extract(member, numeric_owner=False)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "question_id": 9943, "for": 4289331, "retrieval_score": 11.3951235}
{"snippet": "doctest.DocTestParser", "intent": "A processing class used to extract interactive examples from a string, and use them to create a DocTest object.", "question_id": 2855, "for": 4289331, "retrieval_score": 11.324761}
{"snippet": "TarFile.extractall(numeric_owner=False)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "question_id": 9935, "for": 4289331, "retrieval_score": 11.0538025}
{"snippet": "TarFile.extractall(path=\".\", numeric_owner=False)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "question_id": 9937, "for": 4289331, "retrieval_score": 11.0538025}
{"snippet": "tracemalloc.Traceback", "intent": "Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "question_id": 10894, "for": 18176933, "retrieval_score": 19.648767}
{"snippet": "bdb.set_trace(frame)", "intent": "Start debugging from `frame` .", "question_id": 789, "for": 18176933, "retrieval_score": 18.454239}
{"snippet": "bdb.set_trace()", "intent": "Start debugging from `frame` .", "question_id": 790, "for": 18176933, "retrieval_score": 18.454239}
{"snippet": "coverage_results.update(other)", "intent": "Merge in data from another CoverageResults object . With arguments `other`.", "question_id": 10724, "for": 18176933, "retrieval_score": 18.31433}
{"snippet": "bdb.set_trace()", "intent": "Start debugging with a Bdb instance from caller \u2019 s frame .", "question_id": 819, "for": 18176933, "retrieval_score": 17.129057}
{"snippet": "int.to_bytes(length, byteorder)", "intent": "Return an array of bytes representing an integer . The integer is represented using `length` bytes . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9143, "for": 826284, "retrieval_score": 14.224247}
{"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145, "for": 826284, "retrieval_score": 13.35178}
{"snippet": "test_case.assertMultiLineEqual(first, second)", "intent": "Test that the multiline string `first` is equal to the string `second` .", "question_id": 11448, "for": 826284, "retrieval_score": 13.309429}
{"snippet": "secrets.token_bytes()", "intent": "Return a random byte string containing `nbytes` number of bytes .", "question_id": 8135, "for": 826284, "retrieval_score": 13.280294}
{"snippet": "secrets.token_bytes(nbytes=None)", "intent": "Return a random byte string containing `nbytes` number of bytes .", "question_id": 8136, "for": 826284, "retrieval_score": 13.280294}
{"snippet": "TarFile.list()", "intent": "Print a table of contents to sys.stdout .", "question_id": 9927, "for": 16677816, "retrieval_score": 13.318844}
{"snippet": "ZipFile.printdir()", "intent": "Print a table of contents for the archive to sys.stdout .", "question_id": 12826, "for": 16677816, "retrieval_score": 12.329416}
{"snippet": "symbol_table.get_identifiers()", "intent": "Return a list of names of symbols in this table .", "question_id": 9742, "for": 16677816, "retrieval_score": 10.527475}
{"snippet": "symbol_table.get_symbols()", "intent": "Return a list of Symbol instances for names in the table .", "question_id": 9744, "for": 16677816, "retrieval_score": 10.273087}
{"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928, "for": 16677816, "retrieval_score": 10.082416}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 28161356, "retrieval_score": 8.789388}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 28161356, "retrieval_score": 8.789388}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245, "for": 28161356, "retrieval_score": 8.413752}
{"snippet": "date.fromisoformat(date_string)", "intent": "Return a date corresponding to a `date_string` in the format emitted by date.isoformat ( ) .", "question_id": 2222, "for": 28161356, "retrieval_score": 8.219813}
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223, "for": 28161356, "retrieval_score": 8.125431}
{"snippet": "filter.all_frames", "intent": "If all_frames is True, all frames of the traceback are checked.", "question_id": 10866, "for": 14442636, "retrieval_score": 12.946168}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 14442636, "retrieval_score": 12.101342}
{"snippet": "ctypes.PyDLL(name)", "intent": "Instances of this class behave like CDLL instances , except that the Python GIL is not released during the function call , and after the function execution the Python error flag is checked . With arguments `name`.", "question_id": 1770, "for": 14442636, "retrieval_score": 11.780521}
{"snippet": "ctypes.PyDLL(name, mode=DEFAULT_MODE)", "intent": "Instances of this class behave like CDLL instances , except that the Python GIL is not released during the function call , and after the function execution the Python error flag is checked . With arguments `name`, `mode`.", "question_id": 1771, "for": 14442636, "retrieval_score": 11.623353}
{"snippet": "ctypes.PyDLL(name, handle=None)", "intent": "Instances of this class behave like CDLL instances , except that the Python GIL is not released during the function call , and after the function execution the Python error flag is checked . With arguments `name`, `handle`.", "question_id": 1772, "for": 14442636, "retrieval_score": 11.623353}
{"snippet": "lzma_decompressor.check", "intent": "The ID of the integrity check used by the input stream.", "question_id": 5700, "for": 14442636, "retrieval_score": 18.269081}
{"snippet": "gnu_translations.ngettext(singular, plural, n)", "intent": "Do a plural-forms lookup of a message id . `singular` is used as the message id for purposes of lookup in the catalog , while `n` is used to determine which `plural` form to use .", "question_id": 4262, "for": 14442636, "retrieval_score": 17.488195}
{"snippet": "os.getpgid(pid)", "intent": "Return the process group id of the process with process id `pid` .", "question_id": 6680, "for": 14442636, "retrieval_score": 16.168753}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501, "for": 14442636, "retrieval_score": 15.977608}
{"snippet": "os.setpgid(pid, pgrp)", "intent": "Call the system call setpgid ( ) to set the process group id of the process with id `pid` to the process group with id `pgrp` .", "question_id": 6698, "for": 14442636, "retrieval_score": 15.924975}
{"snippet": "datetime.fold", "intent": "In [0, 1].", "question_id": 2280, "for": 2951701, "retrieval_score": 28.445621}
{"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332, "for": 2951701, "retrieval_score": 28.445621}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 2951701, "retrieval_score": 27.952707}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 2951701, "retrieval_score": 27.952707}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 2951701, "retrieval_score": 27.876966}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 30747705, "retrieval_score": 24.494972}
{"snippet": "text_calendar.formatyear(theyear)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`.", "question_id": 936, "for": 30747705, "retrieval_score": 20.542036}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587, "for": 30747705, "retrieval_score": 20.510912}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277, "for": 30747705, "retrieval_score": 20.350492}
{"snippet": "BaseCookie.output(attrs=None, sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4589, "for": 30747705, "retrieval_score": 19.495983}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 30747705, "retrieval_score": 20.216496}
{"snippet": "text_calendar.formatyear(theyear)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`.", "question_id": 936, "for": 30747705, "retrieval_score": 16.173264}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277, "for": 30747705, "retrieval_score": 15.950949}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 30747705, "retrieval_score": 15.80722}
{"snippet": "random.uniform(a, b)", "intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "question_id": 7907, "for": 30747705, "retrieval_score": 15.56353}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 867866, "retrieval_score": 14.815257}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303, "for": 867866, "retrieval_score": 13.714664}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916, "for": 867866, "retrieval_score": 13.111719}
{"snippet": "charset.output_codec", "intent": "The name of the Python codec used to convert Unicode to the output_charset.", "question_id": 2917, "for": 867866, "retrieval_score": 13.111719}
{"snippet": "sys.getfilesystemencoding()", "intent": "Return the name of the encoding used to convert between Unicode filenames and bytes filenames .", "question_id": 9798, "for": 867866, "retrieval_score": 12.203689}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927, "for": 13277440, "retrieval_score": 14.1642475}
{"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928, "for": 13277440, "retrieval_score": 14.1642475}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737, "for": 13277440, "retrieval_score": 11.761601}
{"snippet": "traceback.print_exception(etype, value, tb, file=None)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10739, "for": 13277440, "retrieval_score": 11.761601}
{"snippet": "stringprep.map_table_b2(code)", "intent": "Return the mapped value for `code` according to tableB.2 ( Mapping for case-folding used with NFKC ) .", "question_id": 9533, "for": 13277440, "retrieval_score": 11.731139}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 16099694, "retrieval_score": 21.71987}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947, "for": 16099694, "retrieval_score": 21.219604}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801, "for": 16099694, "retrieval_score": 20.762697}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 16099694, "retrieval_score": 20.427353}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221, "for": 16099694, "retrieval_score": 20.336819}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194, "for": 13324554, "retrieval_score": 19.325674}
{"snippet": "str.find(sub, start)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9195, "for": 13324554, "retrieval_score": 19.325674}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 13324554, "retrieval_score": 19.325674}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105, "for": 13324554, "retrieval_score": 18.424952}
{"snippet": "slice(start, stop, step)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4106, "for": 13324554, "retrieval_score": 18.424952}
{"snippet": "test_loader.discover(start_dir)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory .", "question_id": 11499, "for": 24748445, "retrieval_score": 11.686299}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500, "for": 24748445, "retrieval_score": 10.289185}
{"snippet": "test_loader.discover(start_dir, top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11501, "for": 24748445, "retrieval_score": 9.531698}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11502, "for": 24748445, "retrieval_score": 8.681414}
{"snippet": "bytes_parser.parse(fp)", "intent": "Read all the data from the binary file-like object `fp` , parse the resulting bytes , and return the message object .", "question_id": 3376, "for": 24748445, "retrieval_score": 8.498701}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020, "for": 7142062, "retrieval_score": 17.631475}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010, "for": 7142062, "retrieval_score": 15.882578}
{"snippet": "inspect.getfullargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5011, "for": 7142062, "retrieval_score": 15.882578}
{"snippet": "inspect.unwrap(func)", "intent": "Get the object wrapped by `func` .", "question_id": 5021, "for": 7142062, "retrieval_score": 13.716852}
{"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816, "for": 7142062, "retrieval_score": 12.901132}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698, "for": 10472907, "retrieval_score": 10.905937}
{"snippet": "xmlrpc.client.dumps(params, methodresponse=None)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true .", "question_id": 12700, "for": 10472907, "retrieval_score": 10.228634}
{"snippet": "xmlrpc.client.dumps(params, methodname=None)", "intent": "Convert `params` into an XML-RPC request . With arguments `methodname`.", "question_id": 12699, "for": 10472907, "retrieval_score": 10.09576}
{"snippet": "simple_http_request_handler.extensions_map", "intent": "A dictionary mapping suffixes into MIME types.", "question_id": 4662, "for": 10472907, "retrieval_score": 10.038481}
{"snippet": "cgi.parse_header(string)", "intent": "Parse a MIME header ( such as Content-Type ) into a main value and a dictionary of parameters . With arguments `string`.", "question_id": 1051, "for": 10472907, "retrieval_score": 9.719726}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698, "for": 10472907, "retrieval_score": 10.905937}
{"snippet": "xmlrpc.client.dumps(params, methodresponse=None)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true .", "question_id": 12700, "for": 10472907, "retrieval_score": 10.228634}
{"snippet": "xmlrpc.client.dumps(params, methodname=None)", "intent": "Convert `params` into an XML-RPC request . With arguments `methodname`.", "question_id": 12699, "for": 10472907, "retrieval_score": 10.09576}
{"snippet": "simple_http_request_handler.extensions_map", "intent": "A dictionary mapping suffixes into MIME types.", "question_id": 4662, "for": 10472907, "retrieval_score": 10.038481}
{"snippet": "cgi.parse_header(string)", "intent": "Parse a MIME header ( such as Content-Type ) into a main value and a dictionary of parameters . With arguments `string`.", "question_id": 1051, "for": 10472907, "retrieval_score": 9.719726}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 2612802, "retrieval_score": 19.026176}
{"snippet": "NNTP.list()", "intent": "Send a LIST or LIST ACTIVE command .", "question_id": 6465, "for": 2612802, "retrieval_score": 15.787706}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 2612802, "retrieval_score": 15.522037}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 2612802, "retrieval_score": 15.189421}
{"snippet": "NNTP.list(file=None)", "intent": "Send a LIST or LIST ACTIVE command . With arguments `file`.", "question_id": 6467, "for": 2612802, "retrieval_score": 15.04482}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 2612802, "retrieval_score": 19.026176}
{"snippet": "NNTP.list()", "intent": "Send a LIST or LIST ACTIVE command .", "question_id": 6465, "for": 2612802, "retrieval_score": 15.787706}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 2612802, "retrieval_score": 15.522037}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 2612802, "retrieval_score": 15.189421}
{"snippet": "NNTP.list(file=None)", "intent": "Send a LIST or LIST ACTIVE command . With arguments `file`.", "question_id": 6467, "for": 2612802, "retrieval_score": 15.04482}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 2612802, "retrieval_score": 19.026176}
{"snippet": "NNTP.list()", "intent": "Send a LIST or LIST ACTIVE command .", "question_id": 6465, "for": 2612802, "retrieval_score": 15.787706}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 2612802, "retrieval_score": 15.522037}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 2612802, "retrieval_score": 15.189421}
{"snippet": "NNTP.list(file=None)", "intent": "Send a LIST or LIST ACTIVE command . With arguments `file`.", "question_id": 6467, "for": 2612802, "retrieval_score": 15.04482}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 2612802, "retrieval_score": 19.026176}
{"snippet": "copy.deepcopy(x)", "intent": "Return a deep copy of `x` .", "question_id": 1663, "for": 2612802, "retrieval_score": 17.037006}
{"snippet": "NNTP.list()", "intent": "Send a LIST or LIST ACTIVE command .", "question_id": 6465, "for": 2612802, "retrieval_score": 15.787706}
{"snippet": "copy.deepcopy(x, memo)", "intent": "Return a deep copy of `x` . With arguments `memo`.", "question_id": 1662, "for": 2612802, "retrieval_score": 15.739229}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 2612802, "retrieval_score": 15.522037}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 2612802, "retrieval_score": 16.884888}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225, "for": 2612802, "retrieval_score": 13.660991}
{"snippet": "bytes.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9308, "for": 2612802, "retrieval_score": 13.660991}
{"snippet": "bytearray.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9310, "for": 2612802, "retrieval_score": 13.660991}
{"snippet": "itertools.cycle(iterable)", "intent": "Make an iterator returning elements from the `iterable` and saving a copy of each .", "question_id": 5250, "for": 2612802, "retrieval_score": 12.282022}
{"snippet": "inspect.trace()", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in .", "question_id": 5032, "for": 25540259, "retrieval_score": 10.282563}
{"snippet": "inspect.trace(context=1)", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in . With arguments `context`.", "question_id": 5033, "for": 25540259, "retrieval_score": 9.957688}
{"snippet": "tracemalloc.Traceback", "intent": "Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "question_id": 10894, "for": 25540259, "retrieval_score": 9.542488}
{"snippet": "tracemalloc.Frame", "intent": "Frame of a traceback.", "question_id": 10867, "for": 25540259, "retrieval_score": 8.863238}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 25540259, "retrieval_score": 8.804348}
{"snippet": "stringprep.in_table_c5(code)", "intent": "Determine whether `code` is in tableC.5 ( Surrogate codes ) .", "question_id": 9543, "for": 38147259, "retrieval_score": 11.833863}
{"snippet": "timer.print_exc()", "intent": "Helper to print a traceback from the timed code .", "question_id": 10515, "for": 38147259, "retrieval_score": 10.650514}
{"snippet": "email.header.make_header(decoded_seq)", "intent": "Create a Header instance from a sequence of pairs as returned by decode_header ( ) . With arguments `decoded_seq`.", "question_id": 3142, "for": 38147259, "retrieval_score": 10.403264}
{"snippet": "context.quantize(x, y)", "intent": "Returns a value equal to `x` ( rounded ) , having the exponent of `y` .", "question_id": 2563, "for": 38147259, "retrieval_score": 10.348335}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 38147259, "retrieval_score": 9.055064}
{"snippet": "test.support.import_fresh_module(name)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10242, "for": 3061, "retrieval_score": 12.579116}
{"snippet": "test.support.import_fresh_module(name, fresh=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10243, "for": 3061, "retrieval_score": 12.579116}
{"snippet": "test.support.import_module(name, required_on())", "intent": "This function imports and returns the named module . With arguments `name`, `required_on()`.", "question_id": 10240, "for": 3061, "retrieval_score": 12.347512}
{"snippet": "modulefinder.ReplacePackage(oldname, newname)", "intent": "Allows specifying that the module named `oldname` is in fact the package named `newname` .", "question_id": 6024, "for": 3061, "retrieval_score": 11.870953}
{"snippet": "linecache.getline(filename, lineno, module_globals=None)", "intent": "Get line `lineno` from file named `filename` . If a file named filename is not found , the function will look for it in the module search path , sys.path , after first checking for a PEP 302 __loader__ in `module_globals` , in case the module was imported from a zipfile or other non-filesystem import source .", "question_id": 5344, "for": 3061, "retrieval_score": 11.604588}
{"snippet": "non_callable_magic_mock.code", "intent": "An HTTP status code as defined in RFC 2616.", "question_id": 11661, "for": 1949318, "retrieval_score": 17.918713}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773, "for": 1949318, "retrieval_score": 15.04788}
{"snippet": "base_handler.error_status", "intent": "The HTTP status used for error responses.", "question_id": 12263, "for": 1949318, "retrieval_score": 14.300861}
{"snippet": "HTTPResponse.status", "intent": "Status code returned by server.", "question_id": 4464, "for": 1949318, "retrieval_score": 13.317083}
{"snippet": "http.client.responses", "intent": "This dictionary maps the HTTP 1.1 status codes to the W3C names.", "question_id": 4426, "for": 1949318, "retrieval_score": 12.72212}
{"snippet": "HTTPResponse.status", "intent": "Status code returned by server.", "question_id": 4464, "for": 1949318, "retrieval_score": 13.317083}
{"snippet": "non_callable_magic_mock.code", "intent": "An HTTP status code as defined in RFC 2616.", "question_id": 11661, "for": 1949318, "retrieval_score": 11.964528}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773, "for": 1949318, "retrieval_score": 11.61874}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304, "for": 1949318, "retrieval_score": 11.48482}
{"snippet": "codeop.compile_command(source, filename=\"<input>\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . In that case , the `filename` attribute of the code object will be filename , which defaults to ' < input > ' .", "question_id": 1305, "for": 1949318, "retrieval_score": 10.760823}
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695, "for": 1949318, "retrieval_score": 15.729143}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 1949318, "retrieval_score": 15.298218}
{"snippet": "HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)", "intent": "Redirect to the Location : or URI : URL . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11851, "for": 1949318, "retrieval_score": 14.8033495}
{"snippet": "urllib.parse.urljoin(base, url, allow_fragments=True)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) . The `allow_fragments` argument has the same meaning and default as for urlparse ( ) .", "question_id": 11696, "for": 1949318, "retrieval_score": 14.642068}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 1949318, "retrieval_score": 14.60076}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210, "for": 1949318, "retrieval_score": 11.670956}
{"snippet": "prototype(vtbl_index, name)", "intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method .", "question_id": 1807, "for": 1949318, "retrieval_score": 10.808885}
{"snippet": "prototype(vtbl_index, name, paramflags)", "intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method . With arguments `paramflags`.", "question_id": 1806, "for": 1949318, "retrieval_score": 10.439372}
{"snippet": "ctypes.DllCanUnloadNow()", "intent": "Windows only : This function is a hook which allows implementing in-process COM servers with ctypes .", "question_id": 1817, "for": 1949318, "retrieval_score": 9.875403}
{"snippet": "ctypes.DllGetClassObject()", "intent": "Windows only : This function is a hook which allows implementing in-process COM servers with ctypes .", "question_id": 1818, "for": 1949318, "retrieval_score": 9.875403}
{"snippet": "winreg.REG_RESOURCE_LIST", "intent": "A device-driver resource list.", "question_id": 12184, "for": 23931444, "retrieval_score": 13.4814005}
{"snippet": "errno.EUNATCH", "intent": "Protocol driver not attached", "question_id": 3554, "for": 23931444, "retrieval_score": 11.911826}
{"snippet": "BaseCookie.js_output()", "intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP headers was sent .", "question_id": 4592, "for": 23931444, "retrieval_score": 11.542066}
{"snippet": "Morsel.js_output()", "intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP header was sent .", "question_id": 4605, "for": 23931444, "retrieval_score": 11.542066}
{"snippet": "Morsel.OutputString()", "intent": "Return a string representing the Morsel , without any surrounding HTTP or JavaScript .", "question_id": 4607, "for": 23931444, "retrieval_score": 11.183428}
{"snippet": "selector_key.data", "intent": "Optional opaque data associated to this file object: for example, this could be used to store a per-client session ID.", "question_id": 8213, "for": 17098654, "retrieval_score": 14.73493}
{"snippet": "FTP.storlines(cmd, fp)", "intent": "Store a file in ASCII transfer mode . `cmd` should be an appropriate STOR command ( see storbinary ( ) ) . Lines are read until EOF from the file object `fp` ( opened in binary mode ) using its readline ( ) method to provide the data to be stored .", "question_id": 3941, "for": 17098654, "retrieval_score": 14.633467}
{"snippet": "FTP.storbinary(cmd, fp)", "intent": "Store a file in binary transfer mode . `cmd` should be an appropriate STOR command : `` STOR filename '' . `fp` is a file object ( opened in binary mode ) which is read until EOF using its read ( ) method in blocks of size `blocksize` to provide the data to be stored .", "question_id": 3933, "for": 17098654, "retrieval_score": 13.589003}
{"snippet": "FTP.storbinary(cmd, fp, blocksize=8192)", "intent": "Store a file in binary transfer mode . `cmd` should be an appropriate STOR command : `` STOR filename '' . `fp` is a file object ( opened in binary mode ) which is read until EOF using its read ( ) method in blocks of size `blocksize` to provide the data to be stored .", "question_id": 3934, "for": 17098654, "retrieval_score": 13.589003}
{"snippet": "json.load(fp, **kw)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5290, "for": 17098654, "retrieval_score": 12.732521}
{"snippet": "audioop.rms(fragment, width)", "intent": "Return the root-mean-square of the `fragment` , i.e . With arguments `width`.", "question_id": 704, "for": 40311987, "retrieval_score": 11.369907}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367, "for": 40311987, "retrieval_score": 11.200146}
{"snippet": "statistics.harmonic_mean(data)", "intent": "Return the harmonic mean of `data` , a sequence or iterator of real-valued numbers .", "question_id": 9126, "for": 40311987, "retrieval_score": 9.794724}
{"snippet": "os.terminal_size", "intent": "A subclass of tuple, holding (columns, lines) of the terminal window size.", "question_id": 6813, "for": 40311987, "retrieval_score": 9.575634}
{"snippet": "statistics.median(data)", "intent": "Return the median ( middle value ) of numeric `data` , using the common \u201c mean of middle two \u201d method .", "question_id": 9127, "for": 40311987, "retrieval_score": 9.505456}
{"snippet": "scheduler.queue", "intent": "Read-only attribute returning a list of upcoming events in the order they will be run.", "question_id": 8130, "for": 4768151, "retrieval_score": 19.039816}
{"snippet": "Element.hasAttribute(name)", "intent": "Returns true if the element has an attribute named by `name` .", "question_id": 12357, "for": 4768151, "retrieval_score": 17.793303}
{"snippet": "element.get(key, default=None)", "intent": "Gets the element attribute named `key` . Returns the attribute value , or `default` if the attribute was not found .", "question_id": 12485, "for": 4768151, "retrieval_score": 17.547367}
{"snippet": "element.get(key)", "intent": "Gets the element attribute named `key` .", "question_id": 12484, "for": 4768151, "retrieval_score": 17.33312}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617, "for": 4768151, "retrieval_score": 17.095245}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916, "for": 1962795, "retrieval_score": 21.911821}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909, "for": 1962795, "retrieval_score": 19.326874}
{"snippet": "random.gammavariate(alpha, beta)", "intent": "Gamma distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7911, "for": 1962795, "retrieval_score": 19.326874}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917, "for": 1962795, "retrieval_score": 18.881384}
{"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042, "for": 1962795, "retrieval_score": 10.59761}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 22749706, "retrieval_score": 11.50171}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 22749706, "retrieval_score": 11.50171}
{"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241, "for": 22749706, "retrieval_score": 11.50171}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242, "for": 22749706, "retrieval_score": 11.50171}
{"snippet": "element.tag", "intent": "A string identifying what kind of data this element represents (the element type, in other words).", "question_id": 12479, "for": 22749706, "retrieval_score": 11.090127}
{"snippet": "str.center(width)", "intent": "Return centered in a string of length `width` .", "question_id": 9181, "for": 3945750, "retrieval_score": 10.961484}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216, "for": 3945750, "retrieval_score": 10.936036}
{"snippet": "str.rjust(width)", "intent": "Return the string right justified in a string of length `width` .", "question_id": 9233, "for": 3945750, "retrieval_score": 10.936036}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 3945750, "retrieval_score": 10.801549}
{"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346, "for": 3945750, "retrieval_score": 10.801549}
{"snippet": "cursor.execute(sql, parameters)", "intent": "Executes an SQL statement . With arguments `sql`, `parameters`.", "question_id": 8840, "for": 9336270, "retrieval_score": 35.40252}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068, "for": 9336270, "retrieval_score": 31.769424}
{"snippet": "cursor.execute(sql)", "intent": "Executes an SQL statement . With arguments `sql`.", "question_id": 8841, "for": 9336270, "retrieval_score": 30.934814}
{"snippet": "cursor.executemany(sql, seq_of_parameters)", "intent": "Executes an SQL command against all parameter sequences or mappings found in the sequence `seq_of_parameters` . With arguments `sql`.", "question_id": 8842, "for": 9336270, "retrieval_score": 20.660107}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072, "for": 9336270, "retrieval_score": 20.516602}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714, "for": 32533944, "retrieval_score": 21.329376}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 32533944, "retrieval_score": 20.177065}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 32533944, "retrieval_score": 19.465237}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713, "for": 32533944, "retrieval_score": 18.872047}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 32533944, "retrieval_score": 15.111364}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866, "for": 8306171, "retrieval_score": 21.862074}
{"snippet": "sysconfig.get_paths(scheme, vars)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9867, "for": 8306171, "retrieval_score": 21.862074}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 8306171, "retrieval_score": 20.943985}
{"snippet": "sysconfig.get_path(name, scheme, vars)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) .", "question_id": 9863, "for": 8306171, "retrieval_score": 20.126413}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 8306171, "retrieval_score": 18.30984}
{"snippet": "readline.get_begidx()", "intent": "Get the beginning or ending index of the completion scope .", "question_id": 8044, "for": 9889635, "retrieval_score": 15.96558}
{"snippet": "readline.get_endidx()", "intent": "Get the beginning or ending index of the completion scope .", "question_id": 8045, "for": 9889635, "retrieval_score": 15.96558}
{"snippet": "text_wrapper.drop_whitespace", "intent": "(default: True) If true, whitespace at the beginning and ending of every line (after wrapping but before indenting) is dropped.", "question_id": 10331, "for": 9889635, "retrieval_score": 12.796769}
{"snippet": "cmath.sqrt(x)", "intent": "Return the square root of `x` .", "question_id": 1100, "for": 9889635, "retrieval_score": 10.0596075}
{"snippet": "math.sqrt(x)", "intent": "Return the square root of `x` .", "question_id": 5913, "for": 9889635, "retrieval_score": 10.0596075}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400, "for": 2075128, "retrieval_score": 14.155525}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399, "for": 2075128, "retrieval_score": 12.61325}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417, "for": 2075128, "retrieval_score": 12.5649395}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418, "for": 2075128, "retrieval_score": 12.5649395}
{"snippet": "test_case.assertNotAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11425, "for": 2075128, "retrieval_score": 12.5649395}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 8425046, "retrieval_score": 27.262503}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 8425046, "retrieval_score": 20.221218}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 8425046, "retrieval_score": 18.654154}
{"snippet": "widget.selection_remove(*items)", "intent": "Remove items from the selection . With arguments `*items`.", "question_id": 10656, "for": 8425046, "retrieval_score": 18.354237}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 8425046, "retrieval_score": 17.131355}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 8425046, "retrieval_score": 19.71508}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136, "for": 8425046, "retrieval_score": 14.815239}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 8425046, "retrieval_score": 14.406971}
{"snippet": "random.vonmisesvariate(mu, kappa)", "intent": "`mu` is the mean angle , expressed in radians between 0 and 2*pi , and `kappa` is the concentration parameter , which must be greater than or equal to zero .", "question_id": 7915, "for": 8425046, "retrieval_score": 14.331491}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 8425046, "retrieval_score": 13.9524145}
{"snippet": "ArgumentParser.parse_args()", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 69, "for": 17690738, "retrieval_score": 22.894428}
{"snippet": "ArgumentParser.parse_args(namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 71, "for": 17690738, "retrieval_score": 22.894428}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196, "for": 17690738, "retrieval_score": 22.804054}
{"snippet": "datetime.MAXYEAR", "intent": "The largest year number allowed in a date or datetime object.", "question_id": 2197, "for": 17690738, "retrieval_score": 22.804054}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 17690738, "retrieval_score": 21.6236}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 29902714, "retrieval_score": 14.667631}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 29902714, "retrieval_score": 14.667631}
{"snippet": "operator.getitem(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6575, "for": 29902714, "retrieval_score": 14.667631}
{"snippet": "operator.__getitem__(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6576, "for": 29902714, "retrieval_score": 14.667631}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 29902714, "retrieval_score": 13.941215}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828, "for": 3899980, "retrieval_score": 18.177969}
{"snippet": "text_io_base.seek(offset, whence=SEEK_SET)", "intent": "Change the stream position to the given `offset` . Behaviour depends on the `whence` parameter .", "question_id": 5143, "for": 3899980, "retrieval_score": 10.939072}
{"snippet": "crypt.METHOD_BLOWFISH", "intent": "Another Modular Crypt Format method with 22 character salt and 31 character hash based on the Blowfish cipher.", "question_id": 1670, "for": 3899980, "retrieval_score": 10.745784}
{"snippet": "formatter.pop_font()", "intent": "Restore the previous font .", "question_id": 3829, "for": 3899980, "retrieval_score": 10.730817}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843, "for": 3899980, "retrieval_score": 10.730817}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 18837262, "retrieval_score": 23.306599}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 18837262, "retrieval_score": 23.306599}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939, "for": 18837262, "retrieval_score": 23.306599}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 18837262, "retrieval_score": 23.306599}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 18837262, "retrieval_score": 23.306599}
{"snippet": "xmlparser.StartElementHandler(name, attributes)", "intent": "Called for the start of every element . `name` is a string containing the element name , and `attributes` is the element attributes .", "question_id": 7760, "for": 21022865, "retrieval_score": 16.626719}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841, "for": 21022865, "retrieval_score": 15.359023}
{"snippet": "tree_builder.start(tag, attrs)", "intent": "Opens a new element . `tag` is the element name . `attrs` is a dictionary containing element attributes .", "question_id": 12544, "for": 21022865, "retrieval_score": 15.004496}
{"snippet": "ContentHandler.startElement(name, attrs)", "intent": "Signals the start of an element in non-namespace mode . The `name` parameter contains the raw XML 1.0 name of the element type as a string and the `attrs` parameter holds an object of the Attributes interface ( see The Attributes Interface ) containing the attributes of the element .", "question_id": 12575, "for": 21022865, "retrieval_score": 14.851012}
{"snippet": "ContentHandler.startElementNS(name, qname, attrs)", "intent": "Signals the start of an element in namespace mode . The `name` parameter contains the name of the element type as a ( uri , localname ) tuple , the `qname` parameter contains the raw XML 1.0 name used in the source document , and the `attrs` parameter holds an instance of the AttributesNS interface ( see The AttributesNS Interface ) containing the attributes of the element .", "question_id": 12577, "for": 21022865, "retrieval_score": 14.707043}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019, "for": 4703390, "retrieval_score": 16.852089}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020, "for": 4703390, "retrieval_score": 16.852089}
{"snippet": "traceback.extract_stack()", "intent": "Extract the raw traceback from the current stack frame .", "question_id": 10771, "for": 4703390, "retrieval_score": 14.134768}
{"snippet": "ZipFile.extractall()", "intent": "Extract all `members` from the archive to the current working directory .", "question_id": 12818, "for": 4703390, "retrieval_score": 13.451655}
{"snippet": "ZipFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory .", "question_id": 12820, "for": 4703390, "retrieval_score": 13.451655}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019, "for": 4703390, "retrieval_score": 23.46187}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020, "for": 4703390, "retrieval_score": 23.46187}
{"snippet": "crypt.METHOD_CRYPT", "intent": "The traditional method with a 2 character salt and 13 characters of hash.", "question_id": 1672, "for": 4703390, "retrieval_score": 22.295801}
{"snippet": "errno.EL2HLT", "intent": "Level 2 halted", "question_id": 3556, "for": 4703390, "retrieval_score": 20.216251}
{"snippet": "errno.EL2NSYNC", "intent": "Level 2 not synchronized", "question_id": 3550, "for": 4703390, "retrieval_score": 19.628288}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 23286254, "retrieval_score": 20.130632}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426, "for": 23286254, "retrieval_score": 14.835779}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975, "for": 23286254, "retrieval_score": 13.722935}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283, "for": 23286254, "retrieval_score": 13.101603}
{"snippet": "mock.call_args_list", "intent": "This is a list of all the calls made to the mock object in sequence (so the length of the list is the number of times it has been called).", "question_id": 11593, "for": 23286254, "retrieval_score": 12.676613}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 22245171, "retrieval_score": 20.649336}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 22245171, "retrieval_score": 15.714625}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 22245171, "retrieval_score": 15.467823}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 22245171, "retrieval_score": 14.186888}
{"snippet": "bound_arguments.apply_defaults()", "intent": "Set default values for missing arguments .", "question_id": 5007, "for": 22245171, "retrieval_score": 12.898922}
{"snippet": "bound_arguments.kwargs", "intent": "A dict of keyword arguments values.", "question_id": 5005, "for": 10895028, "retrieval_score": 16.920662}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244, "for": 10895028, "retrieval_score": 16.362816}
{"snippet": "shelve.Shelf(dict, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8247, "for": 10895028, "retrieval_score": 16.226353}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150, "for": 10895028, "retrieval_score": 16.039}
{"snippet": "typing.Dict(dict, MutableMappingKT)", "intent": "A generic version of `dict` . With arguments `MutableMappingKT`.", "question_id": 11299, "for": 10895028, "retrieval_score": 16.039}
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440, "for": 2133571, "retrieval_score": 13.555095}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947, "for": 2133571, "retrieval_score": 13.221418}
{"snippet": "FTP.mlsd(facts=)", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . `facts` is a list of strings representing the type of information desired ( e.g .", "question_id": 3949, "for": 2133571, "retrieval_score": 12.813395}
{"snippet": "FTP.mlsd(facts=)", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . `facts` is a list of strings representing the type of information desired ( e.g .", "question_id": 3953, "for": 2133571, "retrieval_score": 12.813395}
{"snippet": "re.findall(pattern, string, flags=0)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings . With arguments `flags`.", "question_id": 7948, "for": 2133571, "retrieval_score": 12.413449}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 15014276, "retrieval_score": 15.791848}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 15014276, "retrieval_score": 15.211424}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136, "for": 15014276, "retrieval_score": 14.815239}
{"snippet": "random.vonmisesvariate(mu, kappa)", "intent": "`mu` is the mean angle , expressed in radians between 0 and 2*pi , and `kappa` is the concentration parameter , which must be greater than or equal to zero .", "question_id": 7915, "for": 15014276, "retrieval_score": 14.80918}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 15014276, "retrieval_score": 14.134725}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247, "for": 32722143, "retrieval_score": 23.92097}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593, "for": 32722143, "retrieval_score": 16.95655}
{"snippet": "loop.get_debug()", "intent": "Get the debug mode ( bool ) of the event loop .", "question_id": 311, "for": 32722143, "retrieval_score": 12.05803}
{"snippet": "bdb.runeval(expr, globals=None)", "intent": "Debug an expression executed via the eval ( ) function . `globals` and `locals` have the same meaning as in run ( ) . With arguments `expr`.", "question_id": 812, "for": 32722143, "retrieval_score": 11.308532}
{"snippet": "bdb.runeval(expr, locals=None)", "intent": "Debug an expression executed via the eval ( ) function . `globals` and `locals` have the same meaning as in run ( ) . With arguments `expr`.", "question_id": 813, "for": 32722143, "retrieval_score": 11.308532}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 14661701, "retrieval_score": 14.036496}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847, "for": 14661701, "retrieval_score": 12.223299}
{"snippet": "cursor.fetchmany()", "intent": "Fetches the next set of rows of a query result , returning a list .", "question_id": 8845, "for": 14661701, "retrieval_score": 11.6598}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846, "for": 14661701, "retrieval_score": 11.3544445}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154, "for": 14661701, "retrieval_score": 11.320141}
{"snippet": "audioop.avg(fragment, width)", "intent": "Return the average over all samples in the `fragment` . With arguments `width`.", "question_id": 683, "for": 18689823, "retrieval_score": 13.090371}
{"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957, "for": 18689823, "retrieval_score": 12.45784}
{"snippet": "audioop.avgpp(fragment, width)", "intent": "Return the average peak-peak value over all samples in the `fragment` . With arguments `width`.", "question_id": 684, "for": 18689823, "retrieval_score": 12.2359085}
{"snippet": "inspect.trace(context=1)", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in . With arguments `context`.", "question_id": 5033, "for": 18689823, "retrieval_score": 11.93793}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997, "for": 18689823, "retrieval_score": 11.357452}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716, "for": 677656, "retrieval_score": 22.60315}
{"snippet": "ssl.enum_certificates(store_name)", "intent": "Retrieve certificates from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8899, "for": 677656, "retrieval_score": 20.790947}
{"snippet": "ssl.enum_crls(store_name)", "intent": "Retrieve CRLs from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8900, "for": 677656, "retrieval_score": 20.790947}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 677656, "retrieval_score": 17.54267}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 677656, "retrieval_score": 16.896318}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 16994696, "retrieval_score": 21.49369}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358, "for": 16994696, "retrieval_score": 16.755133}
{"snippet": "locale.ERA_T_FMT", "intent": "Get a format string for time.strftime() to represent a time in a locale-specific era-based way.", "question_id": 5371, "for": 16994696, "retrieval_score": 14.469689}
{"snippet": "locale.ERA_D_T_FMT", "intent": "Get a format string for time.strftime() to represent date and time in a locale-specific era-based way.", "question_id": 5369, "for": 16994696, "retrieval_score": 14.170627}
{"snippet": "locale.T_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent a time in a locale-specific way.", "question_id": 5357, "for": 16994696, "retrieval_score": 13.088559}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815, "for": 9323749, "retrieval_score": 19.145397}
{"snippet": "DocumentType.internalSubset", "intent": "A string giving the complete internal subset from the document.", "question_id": 12340, "for": 9323749, "retrieval_score": 18.961504}
{"snippet": "set < other", "intent": "Test whether the set is a proper subset of other, that is, set <= other and set != other.", "question_id": 9441, "for": 9323749, "retrieval_score": 18.818062}
{"snippet": "DocumentType.publicId", "intent": "The public identifier for the external subset of the document type definition.", "question_id": 12338, "for": 9323749, "retrieval_score": 18.384089}
{"snippet": "DocumentType.systemId", "intent": "The system identifier for the external subset of the document type definition.", "question_id": 12339, "for": 9323749, "retrieval_score": 18.384089}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 7768859, "retrieval_score": 12.454165}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 7768859, "retrieval_score": 11.751598}
{"snippet": "ArgumentParser.parse_args()", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 69, "for": 7768859, "retrieval_score": 11.482725}
{"snippet": "ArgumentParser.parse_args(namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 71, "for": 7768859, "retrieval_score": 11.482725}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 7768859, "retrieval_score": 11.46763}
{"snippet": "errno.ENETRESET", "intent": "Network dropped connection because of reset", "question_id": 3607, "for": 11621165, "retrieval_score": 10.34337}
{"snippet": "HTMLParser.reset()", "intent": "Reset the instance .", "question_id": 4353, "for": 11621165, "retrieval_score": 10.335492}
{"snippet": "ConnectionResetError", "intent": "A subclass of ConnectionError, raised when a connection is reset by the peer.", "question_id": 3692, "for": 11621165, "retrieval_score": 10.050909}
{"snippet": "warnings.resetwarnings()", "intent": "Reset the warnings filter .", "question_id": 12041, "for": 11621165, "retrieval_score": 10.034898}
{"snippet": "tracemalloc.Traceback", "intent": "Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "question_id": 10894, "for": 11621165, "retrieval_score": 10.011276}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 10624937, "retrieval_score": 24.756708}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 10624937, "retrieval_score": 19.84498}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355, "for": 10624937, "retrieval_score": 19.487576}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358, "for": 10624937, "retrieval_score": 17.134527}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 10624937, "retrieval_score": 17.125551}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 5180365, "retrieval_score": 27.992767}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 5180365, "retrieval_score": 27.992767}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400, "for": 5180365, "retrieval_score": 23.876081}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363, "for": 5180365, "retrieval_score": 20.830029}
{"snippet": "Unpacker.unpack_double()", "intent": "Unpacks a double-precision floating point number , similarly to unpack_float ( ) .", "question_id": 12291, "for": 5180365, "retrieval_score": 20.08561}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 40660956, "retrieval_score": 19.19747}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692, "for": 40660956, "retrieval_score": 14.669342}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1693, "for": 40660956, "retrieval_score": 14.669342}
{"snippet": "csv.DictReader(f, *args, **kwds, restval=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `restval`.", "question_id": 1695, "for": 40660956, "retrieval_score": 14.366747}
{"snippet": "csv.DictReader(f, *args, **kwds, dialect='excel')", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `dialect`.", "question_id": 1696, "for": 40660956, "retrieval_score": 14.366747}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 20733827, "retrieval_score": 27.876966}
{"snippet": "datetime.fold", "intent": "In [0, 1].", "question_id": 2280, "for": 20733827, "retrieval_score": 26.112719}
{"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332, "for": 20733827, "retrieval_score": 26.112719}
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133, "for": 20733827, "retrieval_score": 23.961845}
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324, "for": 20733827, "retrieval_score": 23.89831}
{"snippet": "text_wrapper.placeholder", "intent": "(default: ' [...]') String that will appear at the end of the output text if it has been truncated.", "question_id": 10338, "for": 11066874, "retrieval_score": 11.371185}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029, "for": 11066874, "retrieval_score": 11.142778}
{"snippet": "email_policy.header_fetch_parse(name, value)", "intent": "If the `value` has a `name` attribute , it is returned to unmodified .", "question_id": 3436, "for": 11066874, "retrieval_score": 10.879875}
{"snippet": "subprocess.CompletedProcess", "intent": "The return value from run(), representing a process that has finished.", "question_id": 9577, "for": 11066874, "retrieval_score": 10.393333}
{"snippet": "email_policy.header_store_parse(name, value)", "intent": "The `name` is returned unchanged . If the input `value` has a name attribute and it matches name ignoring case , the value is returned unchanged .", "question_id": 3435, "for": 11066874, "retrieval_score": 9.486395}
{"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931, "for": 5917537, "retrieval_score": 16.757608}
{"snippet": "re.MULTILINE", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7932, "for": 5917537, "retrieval_score": 16.757608}
{"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622, "for": 5917537, "retrieval_score": 13.838051}
{"snippet": "faulthandler.dump_traceback_later(timeout, file=sys.stderr)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . ( Note _exit ( ) exits the process immediately , which means it doesn \u2019 t do any cleanup like flushing `file` buffers . )", "question_id": 3724, "for": 5917537, "retrieval_score": 13.627817}
{"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . ( Note _exit ( ) exits the process immediately , which means it doesn \u2019 t do any cleanup like flushing `file` buffers . )", "question_id": 3726, "for": 5917537, "retrieval_score": 13.627817}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 4859292, "retrieval_score": 18.728462}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 4859292, "retrieval_score": 16.767551}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 4859292, "retrieval_score": 16.32988}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 4859292, "retrieval_score": 16.019562}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 4859292, "retrieval_score": 15.017312}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529, "for": 113655, "retrieval_score": 20.815285}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530, "for": 113655, "retrieval_score": 20.300404}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 113655, "retrieval_score": 19.37997}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 113655, "retrieval_score": 19.37997}
{"snippet": "bytearray.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9355, "for": 113655, "retrieval_score": 19.37997}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 38862349, "retrieval_score": 18.15539}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 38862349, "retrieval_score": 18.15539}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 38862349, "retrieval_score": 18.15539}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 38862349, "retrieval_score": 18.15539}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080, "for": 38862349, "retrieval_score": 18.15539}
{"snippet": "i_pv4_address.reverse_pointer", "intent": "The name of the reverse DNS PTR record for the IP address, e.g.", "question_id": 5179, "for": 11264005, "retrieval_score": 12.236783}
{"snippet": "ipaddress.ip_address(address)", "intent": "Return an IPv4Address or IPv6Address object depending on the IP `address` passed as argument .", "question_id": 5170, "for": 11264005, "retrieval_score": 11.961078}
{"snippet": "ipaddress.ip_network(address)", "intent": "Return an IPv4Network or IPv6Network object depending on the IP `address` passed as argument .", "question_id": 5171, "for": 11264005, "retrieval_score": 11.961078}
{"snippet": "ipaddress.ip_interface(address)", "intent": "Return an IPv4Interface or IPv6Interface object depending on the IP `address` passed as argument .", "question_id": 5173, "for": 11264005, "retrieval_score": 11.961078}
{"snippet": "socket.inet_pton(address_family, ip_string)", "intent": "Convert an IP address from its family-specific string format to a packed , binary format . Supported values for `address_family` are currently AF_INET and AF_INET6 . If the IP address string `ip_string` is invalid , OSError will be raised .", "question_id": 8663, "for": 11264005, "retrieval_score": 11.829357}
{"snippet": "readline.read_init_file(filename)", "intent": "Execute a readline initialization file . The default `filename` is the last filename used .", "question_id": 8016, "for": 1027714, "retrieval_score": 13.793027}
{"snippet": "py_zip_file.writepy(pathname)", "intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) .", "question_id": 12856, "for": 1027714, "retrieval_score": 12.411}
{"snippet": "py_zip_file.writepy(pathname, basename='')", "intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) . `basename` is intended for internal use only .", "question_id": 12857, "for": 1027714, "retrieval_score": 11.631943}
{"snippet": "py_zip_file.writepy(pathname, filterfunc=None)", "intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) . `filterfunc` , if given , must be a function taking a single string argument .", "question_id": 12858, "for": 1027714, "retrieval_score": 10.947157}
{"snippet": "py_zip_file.writepy(pathname, basename='', filterfunc=None)", "intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) . `basename` is intended for internal use only . `filterfunc` , if given , must be a function taking a single string argument .", "question_id": 12859, "for": 1027714, "retrieval_score": 10.340155}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070, "for": 17223174, "retrieval_score": 14.982027}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846, "for": 17223174, "retrieval_score": 14.369114}
{"snippet": "cursor.arraysize", "intent": "Read/write attribute that controls the number of rows returned by fetchmany().", "question_id": 8851, "for": 17223174, "retrieval_score": 14.317482}
{"snippet": "test.support.fd_count()", "intent": "Count the number of open file descriptors .", "question_id": 10154, "for": 17223174, "retrieval_score": 14.271313}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 17223174, "retrieval_score": 14.012918}
{"snippet": "winreg.REG_MULTI_SZ", "intent": "A sequence of null-terminated strings, terminated by two null characters.", "question_id": 12180, "for": 10857924, "retrieval_score": 11.6065235}
{"snippet": "winreg.REG_SZ", "intent": "A null-terminated string.", "question_id": 12187, "for": 10857924, "retrieval_score": 11.142894}
{"snippet": "os.devnull", "intent": "The file path of the null device.", "question_id": 7129, "for": 10857924, "retrieval_score": 9.346564}
{"snippet": "winreg.REG_EXPAND_SZ", "intent": "Null-terminated string containing references to environment variables (%PATH%).", "question_id": 12178, "for": 10857924, "retrieval_score": 8.871921}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997, "for": 10857924, "retrieval_score": 8.756786}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243, "for": 12310141, "retrieval_score": 16.738651}
{"snippet": "str.split(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9244, "for": 12310141, "retrieval_score": 16.738651}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 12310141, "retrieval_score": 14.000479}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 12310141, "retrieval_score": 13.594103}
{"snippet": "bytes.split(maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given and non-negative , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9365, "for": 12310141, "retrieval_score": 13.560581}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454, "for": 13168252, "retrieval_score": 28.13269}
{"snippet": "test_case.assertTupleEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11456, "for": 13168252, "retrieval_score": 28.13269}
{"snippet": "test_case.assertListEqual(first, second, msg=None)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`, `msg`.", "question_id": 11455, "for": 13168252, "retrieval_score": 27.484224}
{"snippet": "test_case.assertTupleEqual(first, second, msg=None)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`, `msg`.", "question_id": 11457, "for": 13168252, "retrieval_score": 27.484224}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 13168252, "retrieval_score": 20.865166}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135, "for": 27966626, "retrieval_score": 14.210325}
{"snippet": "FTP_TLS.prot_c()", "intent": "Set up clear text data connection .", "question_id": 3972, "for": 27966626, "retrieval_score": 13.6752}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081, "for": 27966626, "retrieval_score": 11.457872}
{"snippet": "turtle.done()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11082, "for": 27966626, "retrieval_score": 11.457872}
{"snippet": "window.erase()", "intent": "Clear the window .", "question_id": 2048, "for": 27966626, "retrieval_score": 9.652411}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 10664430, "retrieval_score": 41.680195}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 10664430, "retrieval_score": 19.276512}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312, "for": 10664430, "retrieval_score": 18.660988}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 10664430, "retrieval_score": 18.327055}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408, "for": 10664430, "retrieval_score": 18.327055}
{"snippet": "completed_process.cmd", "intent": "Command that was used to spawn the child process.", "question_id": 9588, "for": 41246071, "retrieval_score": 15.45281}
{"snippet": "completed_process.cmd", "intent": "Command that was used to spawn the child process.", "question_id": 9595, "for": 41246071, "retrieval_score": 15.45281}
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309, "for": 41246071, "retrieval_score": 15.253631}
{"snippet": "multiprocessing.Process()", "intent": "Process objects represent activity that is run in a separate process .", "question_id": 6165, "for": 41246071, "retrieval_score": 13.812164}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 41246071, "retrieval_score": 13.708982}
{"snippet": "gc.get_objects()", "intent": "Returns a list of all objects tracked by the collector , excluding the list returned .", "question_id": 4174, "for": 17038639, "retrieval_score": 18.330338}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 17038639, "retrieval_score": 18.297903}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 17038639, "retrieval_score": 17.55149}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 17038639, "retrieval_score": 17.55149}
{"snippet": "Class.super", "intent": "A list of Class objects which describe the immediate base classes of the class being described.", "question_id": 7722, "for": 17038639, "retrieval_score": 17.37404}
{"snippet": "NamedNodeMap.length", "intent": "The length of the attribute list.", "question_id": 12374, "for": 17038639, "retrieval_score": 16.322538}
{"snippet": "ZipFile.infolist()", "intent": "Return a list containing a ZipInfo object for each member of the archive .", "question_id": 12804, "for": 17038639, "retrieval_score": 15.773201}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 17038639, "retrieval_score": 15.494269}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 17038639, "retrieval_score": 15.494269}
{"snippet": "html_calendar.cssclasses", "intent": "A list of CSS classes used for each weekday.", "question_id": 970, "for": 17038639, "retrieval_score": 14.526741}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 34097281, "retrieval_score": 22.221535}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 34097281, "retrieval_score": 17.401583}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 34097281, "retrieval_score": 15.799113}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 34097281, "retrieval_score": 15.261079}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 34097281, "retrieval_score": 13.774036}
{"snippet": "mh_message.remove_sequence(sequence)", "intent": "Remove `sequence` from the list of sequences that include this message .", "question_id": 5837, "for": 15269161, "retrieval_score": 20.24793}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 15269161, "retrieval_score": 19.684414}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 15269161, "retrieval_score": 19.142117}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129, "for": 15269161, "retrieval_score": 18.802757}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 15269161, "retrieval_score": 17.996222}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 18663026, "retrieval_score": 29.384953}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 18663026, "retrieval_score": 27.445215}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 18663026, "retrieval_score": 27.445215}
{"snippet": "mapping_proxy_type.get(key, default)", "intent": "Return the value for `key` if key is in the underlying mapping , else `default` .", "question_id": 11212, "for": 18663026, "retrieval_score": 26.92134}
{"snippet": "mapping_proxy_type.get(key)", "intent": "Return the value for `key` if key is in the underlying mapping , else `default` .", "question_id": 11213, "for": 18663026, "retrieval_score": 26.92134}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470, "for": 30328646, "retrieval_score": 13.720044}
{"snippet": "random.expovariate(lambd)", "intent": "Exponential distribution . `lambd` is 1.0 divided by the desired mean .", "question_id": 7910, "for": 30328646, "retrieval_score": 11.458847}
{"snippet": "turtle.tilt(angle)", "intent": "Rotate the turtleshape by `angle` from its current tilt-angle , but do not change the turtle \u2019 s heading ( direction of movement ) .", "question_id": 11004, "for": 30328646, "retrieval_score": 10.52419}
{"snippet": "random.lognormvariate(mu, sigma)", "intent": "Log normal distribution . If you take the natural logarithm of this distribution , you \u2019 ll get a normal distribution with mean `mu` and standard deviation `sigma` .", "question_id": 7913, "for": 30328646, "retrieval_score": 10.276161}
{"snippet": "Pattern.groupindex", "intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "question_id": 7993, "for": 30328646, "retrieval_score": 9.850545}
{"snippet": "context.next_toward(x, y)", "intent": "Returns the number closest to `x` , in direction towards `y` .", "question_id": 2557, "for": 12141150, "retrieval_score": 22.440771}
{"snippet": "decimal.next_toward(other)", "intent": "If the two operands are unequal , return the number closest to the first operand in the direction of the second operand . With arguments `other`.", "question_id": 2455, "for": 12141150, "retrieval_score": 16.663818}
{"snippet": "decimal.next_toward(other, context=None)", "intent": "If the two operands are unequal , return the number closest to the first operand in the direction of the second operand . With arguments `other`, `context`.", "question_id": 2456, "for": 12141150, "retrieval_score": 16.362938}
{"snippet": "tracemalloc.get_traceback_limit()", "intent": "Get the maximum number of frames stored in the traceback of a trace .", "question_id": 10843, "for": 12141150, "retrieval_score": 15.422555}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001, "for": 12141150, "retrieval_score": 13.022371}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224, "for": 5858916, "retrieval_score": 14.064508}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api)", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10267, "for": 5858916, "retrieval_score": 13.982636}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268, "for": 5858916, "retrieval_score": 13.982636}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227, "for": 5858916, "retrieval_score": 13.964578}
{"snippet": "gettext.find(domain, localedir=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4226, "for": 5858916, "retrieval_score": 13.600008}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 32792602, "retrieval_score": 26.767273}
{"snippet": "re.split(pattern, string, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . With arguments `flags`.", "question_id": 7945, "for": 32792602, "retrieval_score": 24.778791}
{"snippet": "re.sub(pattern, repl, string)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` .", "question_id": 7951, "for": 32792602, "retrieval_score": 22.668495}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952, "for": 32792602, "retrieval_score": 22.452574}
{"snippet": "re.sub(pattern, repl, string, count=0, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "question_id": 7954, "for": 32792602, "retrieval_score": 21.976154}
{"snippet": "sys.float_repr_style", "intent": "A string indicating how the repr() function behaves for floats.", "question_id": 9792, "for": 42458734, "retrieval_score": 13.7242565}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970, "for": 42458734, "retrieval_score": 11.843786}
{"snippet": "email_message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 3247, "for": 42458734, "retrieval_score": 11.843786}
{"snippet": "decimal.FloatOperation", "intent": "Enable stricter semantics for mixing floats and Decimals.", "question_id": 2594, "for": 42458734, "retrieval_score": 11.457872}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971, "for": 42458734, "retrieval_score": 10.538929}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 11677860, "retrieval_score": 25.507336}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 11677860, "retrieval_score": 22.75772}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970, "for": 11677860, "retrieval_score": 22.28192}
{"snippet": "email_message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 3247, "for": 11677860, "retrieval_score": 22.28192}
{"snippet": "message.get_all(name)", "intent": "Return a list of all the values for the field named `name` .", "question_id": 2974, "for": 11677860, "retrieval_score": 21.230474}
{"snippet": "date.isocalendar()", "intent": "Return a 3-tuple , ( ISO year , ISO week number , ISO weekday ) .", "question_id": 2241, "for": 4793617, "retrieval_score": 25.18567}
{"snippet": "datetime.isocalendar()", "intent": "Return a 3-tuple , ( ISO year , ISO week number , ISO weekday ) .", "question_id": 2305, "for": 4793617, "retrieval_score": 25.18567}
{"snippet": "calendar.firstweekday()", "intent": "Returns the current setting for the weekday to start each week .", "question_id": 986, "for": 4793617, "retrieval_score": 23.354391}
{"snippet": "calendar.iterweekdays()", "intent": "Return an iterator for the week day numbers that will be used for one week .", "question_id": 911, "for": 4793617, "retrieval_score": 21.644577}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989, "for": 4793617, "retrieval_score": 20.952597}
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221, "for": 5306079, "retrieval_score": 23.563034}
{"snippet": "datetime.fromordinal(ordinal)", "intent": "Return the datetime corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2264, "for": 5306079, "retrieval_score": 23.563034}
{"snippet": "date.toordinal()", "intent": "Return the proleptic Gregorian ordinal of the date , where January 1 of year 1 has ordinal 1 .", "question_id": 2238, "for": 5306079, "retrieval_score": 23.465322}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640, "for": 5306079, "retrieval_score": 22.813059}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 5306079, "retrieval_score": 22.565935}
{"snippet": "email.utils.localtime()", "intent": "Return local time as an aware datetime object .", "question_id": 3452, "for": 18684397, "retrieval_score": 10.236018}
{"snippet": "TarInfo.tobuf()", "intent": "Create a string buffer from a TarInfo object .", "question_id": 9973, "for": 18684397, "retrieval_score": 9.749556}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196, "for": 18684397, "retrieval_score": 9.493982}
{"snippet": "datetime.MAXYEAR", "intent": "The largest year number allowed in a date or datetime object.", "question_id": 2197, "for": 18684397, "retrieval_score": 9.493982}
{"snippet": "datetime.min", "intent": "The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None).", "question_id": 2269, "for": 18684397, "retrieval_score": 9.304084}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 5503925, "retrieval_score": 20.094006}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 5503925, "retrieval_score": 20.009163}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 5503925, "retrieval_score": 18.010254}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 5503925, "retrieval_score": 17.188913}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 5503925, "retrieval_score": 16.977821}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 5503925, "retrieval_score": 15.717563}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 5503925, "retrieval_score": 14.977207}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 5503925, "retrieval_score": 14.617771}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 5503925, "retrieval_score": 12.780252}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047, "for": 5503925, "retrieval_score": 11.896724}
{"snippet": "decimal.adjusted()", "intent": "Return the adjusted exponent after shifting out the coefficient \u2019 s rightmost digits until only the lead digit remains : Decimal ( '321e+5 ' ) .adjusted ( ) returns seven .", "question_id": 2395, "for": 5229425, "retrieval_score": 21.308357}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 5229425, "retrieval_score": 18.374798}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 5229425, "retrieval_score": 16.13333}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 5229425, "retrieval_score": 16.13333}
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904, "for": 5229425, "retrieval_score": 13.875736}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962, "for": 13496087, "retrieval_score": 18.402107}
{"snippet": "uuid.uuid1(clock_seq=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `clock_seq` is given , it is used as the sequence number ; otherwise a random 14-bit sequence number is chosen .", "question_id": 11959, "for": 13496087, "retrieval_score": 14.4721365}
{"snippet": "random.seed()", "intent": "Initialize the random number generator .", "question_id": 7883, "for": 13496087, "retrieval_score": 12.438161}
{"snippet": "uuid.uuid1(node=None, clock_seq=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `node` is not given , getnode ( ) is used to obtain the hardware address . If `clock_seq` is given , it is used as the sequence number ; otherwise a random 14-bit sequence number is chosen .", "question_id": 11960, "for": 13496087, "retrieval_score": 12.3335285}
{"snippet": "random.Random()", "intent": "Class that implements the default pseudo-random number generator used by the random module .", "question_id": 7919, "for": 13496087, "retrieval_score": 11.938648}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962, "for": 13496087, "retrieval_score": 18.402107}
{"snippet": "uuid.uuid1(clock_seq=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `clock_seq` is given , it is used as the sequence number ; otherwise a random 14-bit sequence number is chosen .", "question_id": 11959, "for": 13496087, "retrieval_score": 14.4721365}
{"snippet": "random.seed()", "intent": "Initialize the random number generator .", "question_id": 7883, "for": 13496087, "retrieval_score": 12.438161}
{"snippet": "uuid.uuid1(node=None, clock_seq=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `node` is not given , getnode ( ) is used to obtain the hardware address . If `clock_seq` is given , it is used as the sequence number ; otherwise a random 14-bit sequence number is chosen .", "question_id": 11960, "for": 13496087, "retrieval_score": 12.3335285}
{"snippet": "random.Random()", "intent": "Class that implements the default pseudo-random number generator used by the random module .", "question_id": 7919, "for": 13496087, "retrieval_score": 11.938648}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962, "for": 13496087, "retrieval_score": 18.402107}
{"snippet": "uuid.uuid1(clock_seq=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `clock_seq` is given , it is used as the sequence number ; otherwise a random 14-bit sequence number is chosen .", "question_id": 11959, "for": 13496087, "retrieval_score": 14.4721365}
{"snippet": "random.seed()", "intent": "Initialize the random number generator .", "question_id": 7883, "for": 13496087, "retrieval_score": 12.438161}
{"snippet": "uuid.uuid1(node=None, clock_seq=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `node` is not given , getnode ( ) is used to obtain the hardware address . If `clock_seq` is given , it is used as the sequence number ; otherwise a random 14-bit sequence number is chosen .", "question_id": 11960, "for": 13496087, "retrieval_score": 12.3335285}
{"snippet": "random.Random()", "intent": "Class that implements the default pseudo-random number generator used by the random module .", "question_id": 7919, "for": 13496087, "retrieval_score": 11.938648}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962, "for": 13496087, "retrieval_score": 18.402107}
{"snippet": "uuid.uuid1(clock_seq=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `clock_seq` is given , it is used as the sequence number ; otherwise a random 14-bit sequence number is chosen .", "question_id": 11959, "for": 13496087, "retrieval_score": 14.4721365}
{"snippet": "random.seed()", "intent": "Initialize the random number generator .", "question_id": 7883, "for": 13496087, "retrieval_score": 12.438161}
{"snippet": "uuid.uuid1(node=None, clock_seq=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `node` is not given , getnode ( ) is used to obtain the hardware address . If `clock_seq` is given , it is used as the sequence number ; otherwise a random 14-bit sequence number is chosen .", "question_id": 11960, "for": 13496087, "retrieval_score": 12.3335285}
{"snippet": "random.Random()", "intent": "Class that implements the default pseudo-random number generator used by the random module .", "question_id": 7919, "for": 13496087, "retrieval_score": 11.938648}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 10996140, "retrieval_score": 15.804085}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 10996140, "retrieval_score": 13.433971}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 10996140, "retrieval_score": 13.300573}
{"snippet": "array.buffer_info()", "intent": "Return a tuple ( address , length ) giving the current memory address and the length in elements of the buffer used to hold array \u2019 s contents .", "question_id": 121, "for": 10996140, "retrieval_score": 12.026226}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 10996140, "retrieval_score": 11.818959}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 12987178, "retrieval_score": 15.677011}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 12987178, "retrieval_score": 15.014827}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 12987178, "retrieval_score": 15.014827}
{"snippet": "SSLContext.get_ca_certs(binary_form=False)", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "question_id": 9012, "for": 12987178, "retrieval_score": 13.942669}
{"snippet": "bound_arguments.kwargs", "intent": "A dict of keyword arguments values.", "question_id": 5005, "for": 12987178, "retrieval_score": 13.493229}
{"snippet": "text_io_base.read()", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5138, "for": 510357, "retrieval_score": 12.35733}
{"snippet": "text_io_base.read(size=-1)", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5139, "for": 510357, "retrieval_score": 12.35733}
{"snippet": "ArgumentParser.convert_arg_line_to_args(arg_line)", "intent": "Arguments that are read from a file ( see the fromfile_prefix_chars keyword argument to the ArgumentParser constructor ) are read one argument per line . This method takes a single argument `arg_line` which is a string read from the argument file .", "question_id": 109, "for": 510357, "retrieval_score": 11.414188}
{"snippet": "text_io_base.readline()", "intent": "Read until newline or EOF and return a single str .", "question_id": 5140, "for": 510357, "retrieval_score": 10.625363}
{"snippet": "msvcrt.getch()", "intent": "Read a keypress and return the resulting character as a byte string .", "question_id": 6156, "for": 510357, "retrieval_score": 10.233863}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706, "for": 40094588, "retrieval_score": 27.995287}
{"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707, "for": 40094588, "retrieval_score": 27.995287}
{"snippet": "IMAP4.list()", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4708, "for": 40094588, "retrieval_score": 27.995287}
{"snippet": "IMAP4.lsub()", "intent": "List subscribed mailbox names in `directory` matching `pattern` .", "question_id": 4712, "for": 40094588, "retrieval_score": 27.265928}
{"snippet": "IMAP4.lsub(directory='\"\"')", "intent": "List subscribed mailbox names in `directory` matching `pattern` .", "question_id": 4713, "for": 40094588, "retrieval_score": 27.265928}
{"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151, "for": 28780956, "retrieval_score": 13.420863}
{"snippet": "SSLContext.session_stats()", "intent": "Get statistics about the SSL sessions created or managed by this context .", "question_id": 9042, "for": 28780956, "retrieval_score": 12.447502}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716, "for": 28780956, "retrieval_score": 12.203695}
{"snippet": "abstract_event_loop_policy.get_event_loop()", "intent": "Get the event loop for the current context .", "question_id": 375, "for": 28780956, "retrieval_score": 11.091214}
{"snippet": "zipimporter.find_module(fullname)", "intent": "Search for a module specified by `fullname` .", "question_id": 12883, "for": 28780956, "retrieval_score": 10.788862}
{"snippet": "inspect.trace()", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in .", "question_id": 5032, "for": 19585280, "retrieval_score": 12.2812}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847, "for": 19585280, "retrieval_score": 12.223299}
{"snippet": "inspect.trace(context=1)", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in . With arguments `context`.", "question_id": 5033, "for": 19585280, "retrieval_score": 11.855356}
{"snippet": "cursor.fetchmany()", "intent": "Fetches the next set of rows of a query result , returning a list .", "question_id": 8845, "for": 19585280, "retrieval_score": 11.6598}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 19585280, "retrieval_score": 11.401884}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 12575421, "retrieval_score": 24.773014}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 12575421, "retrieval_score": 19.933758}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136, "for": 12575421, "retrieval_score": 19.68212}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983, "for": 12575421, "retrieval_score": 17.98072}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984, "for": 12575421, "retrieval_score": 17.725632}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223, "for": 30241279, "retrieval_score": 30.062395}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247, "for": 30241279, "retrieval_score": 27.659712}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224, "for": 30241279, "retrieval_score": 21.388254}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12225, "for": 30241279, "retrieval_score": 21.388254}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12226, "for": 30241279, "retrieval_score": 21.388254}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 15740236, "retrieval_score": 17.75611}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 15740236, "retrieval_score": 16.520227}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 15740236, "retrieval_score": 16.520227}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 15740236, "retrieval_score": 15.451729}
{"snippet": "window.encoding", "intent": "Encoding used to encode method arguments (Unicode strings and characters).", "question_id": 2047, "for": 15740236, "retrieval_score": 14.443824}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 12440342, "retrieval_score": 22.819695}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 12440342, "retrieval_score": 20.589214}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734, "for": 12440342, "retrieval_score": 18.221607}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 12440342, "retrieval_score": 18.197287}
{"snippet": "urllib.parse.urlencode(query, encoding=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11735, "for": 12440342, "retrieval_score": 17.629122}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922, "for": 39600161, "retrieval_score": 20.045979}
{"snippet": "re.compile(pattern, flags=0)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below . The expression \u2019 s behaviour can be modified by specifying a `flags` value .", "question_id": 7923, "for": 39600161, "retrieval_score": 18.235018}
{"snippet": "Pattern.fullmatch(string)", "intent": "If the whole `string` matches this regular expression , return a corresponding match object .", "question_id": 7978, "for": 39600161, "retrieval_score": 17.479973}
{"snippet": "re.fullmatch(pattern, string)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object .", "question_id": 7941, "for": 39600161, "retrieval_score": 17.086134}
{"snippet": "re.error(msg)", "intent": "Exception raised when a string passed to one of the functions here is not a valid regular expression ( for example , it might contain unmatched parentheses ) or when some other error occurs during compilation or matching . With arguments `msg`.", "question_id": 7961, "for": 39600161, "retrieval_score": 16.435068}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922, "for": 39600161, "retrieval_score": 18.614677}
{"snippet": "re.compile(pattern, flags=0)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below . The expression \u2019 s behaviour can be modified by specifying a `flags` value .", "question_id": 7923, "for": 39600161, "retrieval_score": 17.058609}
{"snippet": "system_random.pattern", "intent": "The regular expression pattern.", "question_id": 7966, "for": 39600161, "retrieval_score": 15.39872}
{"snippet": "re.purge()", "intent": "Clear the regular expression cache .", "question_id": 7960, "for": 39600161, "retrieval_score": 14.963525}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156, "for": 39600161, "retrieval_score": 14.162983}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 15158599, "retrieval_score": 15.668727}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 15158599, "retrieval_score": 14.9518385}
{"snippet": "nt_event_log_handler.close()", "intent": "At this point , you can remove the application name from the registry as a source of event log entries .", "question_id": 5510, "for": 15158599, "retrieval_score": 13.467152}
{"snippet": "mailcap.getcaps()", "intent": "Returns a dictionary mapping MIME types to a list of mailcap file entries .", "question_id": 5877, "for": 15158599, "retrieval_score": 11.5851555}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494, "for": 15158599, "retrieval_score": 11.085831}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 15158599, "retrieval_score": 19.778477}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 15158599, "retrieval_score": 18.580982}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 15158599, "retrieval_score": 18.095776}
{"snippet": "patch.dict(in_dict, **kwargs, clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11630, "for": 15158599, "retrieval_score": 17.62383}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 15158599, "retrieval_score": 17.535084}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 2338531, "retrieval_score": 18.11004}
{"snippet": "ZipFile.infolist()", "intent": "Return a list containing a ZipInfo object for each member of the archive .", "question_id": 12804, "for": 2338531, "retrieval_score": 17.600405}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 2338531, "retrieval_score": 16.764965}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 2338531, "retrieval_score": 16.764965}
{"snippet": "html_calendar.cssclasses", "intent": "A list of CSS classes used for each weekday.", "question_id": 970, "for": 2338531, "retrieval_score": 16.539524}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 2338531, "retrieval_score": 16.449202}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 2338531, "retrieval_score": 16.449202}
{"snippet": "doc_test_finder.find(obj)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings .", "question_id": 2854, "for": 2338531, "retrieval_score": 15.101491}
{"snippet": "gc.get_objects()", "intent": "Returns a list of all objects tracked by the collector , excluding the list returned .", "question_id": 4174, "for": 2338531, "retrieval_score": 13.902513}
{"snippet": "ZipFile.infolist()", "intent": "Return a list containing a ZipInfo object for each member of the archive .", "question_id": 12804, "for": 2338531, "retrieval_score": 13.1737}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 2338531, "retrieval_score": 16.799002}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 2338531, "retrieval_score": 16.799002}
{"snippet": "ZipFile.infolist()", "intent": "Return a list containing a ZipInfo object for each member of the archive .", "question_id": 12804, "for": 2338531, "retrieval_score": 14.749154}
{"snippet": "inspect.CO_VARARGS", "intent": "The code object has a variable positional parameter (*args-like).", "question_id": 5042, "for": 2338531, "retrieval_score": 14.678883}
{"snippet": "inspect.CO_VARKEYWORDS", "intent": "The code object has a variable keyword parameter (**kwargs-like).", "question_id": 5043, "for": 2338531, "retrieval_score": 14.678883}
{"snippet": "i_pv4_network.subnets()", "intent": "The subnets that join to make the current network definition , depending on the argument values .", "question_id": 5208, "for": 23668427, "retrieval_score": 10.294201}
{"snippet": "queue.join_thread()", "intent": "Join the background thread .", "question_id": 6209, "for": 23668427, "retrieval_score": 9.573006}
{"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214, "for": 23668427, "retrieval_score": 9.495787}
{"snippet": "Repr.repr_TYPE(obj, level)", "intent": "Formatting methods for specific types are implemented as methods with a name based on the type name . In the method name , TYPE is replaced by ' _'.join ( type ( `obj` ) .__name__.split ( ) ) . Type-specific methods which need to recursively format a value should call self.repr1 ( subobj , `level` - 1 ) .", "question_id": 8068, "for": 23668427, "retrieval_score": 9.338983}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254, "for": 23668427, "retrieval_score": 9.302457}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962, "for": 439115, "retrieval_score": 17.421276}
{"snippet": "uuid.uuid1(clock_seq=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `clock_seq` is given , it is used as the sequence number ; otherwise a random 14-bit sequence number is chosen .", "question_id": 11959, "for": 439115, "retrieval_score": 9.450479}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363, "for": 439115, "retrieval_score": 8.996166}
{"snippet": "secrets.token_urlsafe()", "intent": "Return a random URL-safe text string , containing `nbytes` random bytes .", "question_id": 8143, "for": 439115, "retrieval_score": 8.9410095}
{"snippet": "secrets.token_urlsafe(nbytes=None)", "intent": "Return a random URL-safe text string , containing `nbytes` random bytes .", "question_id": 8144, "for": 439115, "retrieval_score": 8.9410095}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409, "for": 3207219, "retrieval_score": 12.25137}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271, "for": 3207219, "retrieval_score": 12.214296}
{"snippet": "tabnanny.check(file_or_dir)", "intent": "If `file_or_dir` is a directory and not a symbolic link , then recursively descend the directory tree named by file_or_dir , checking all .py files along the way .", "question_id": 9885, "for": 3207219, "retrieval_score": 12.089517}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584, "for": 3207219, "retrieval_score": 11.665628}
{"snippet": "ZipFile.extractall(path=None, pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "question_id": 12823, "for": 3207219, "retrieval_score": 11.659402}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409, "for": 3207219, "retrieval_score": 12.25137}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271, "for": 3207219, "retrieval_score": 12.214296}
{"snippet": "tabnanny.check(file_or_dir)", "intent": "If `file_or_dir` is a directory and not a symbolic link , then recursively descend the directory tree named by file_or_dir , checking all .py files along the way .", "question_id": 9885, "for": 3207219, "retrieval_score": 12.089517}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584, "for": 3207219, "retrieval_score": 11.665628}
{"snippet": "ZipFile.extractall(path=None, pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "question_id": 12823, "for": 3207219, "retrieval_score": 11.659402}
{"snippet": "Path.home()", "intent": "Return a new path object representing the user \u2019 s home directory ( as returned by os.path.expanduser ( ) with ~ construct ) :", "question_id": 7266, "for": 3207219, "retrieval_score": 13.968105}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409, "for": 3207219, "retrieval_score": 12.25137}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271, "for": 3207219, "retrieval_score": 12.214296}
{"snippet": "tabnanny.check(file_or_dir)", "intent": "If `file_or_dir` is a directory and not a symbolic link , then recursively descend the directory tree named by file_or_dir , checking all .py files along the way .", "question_id": 9885, "for": 3207219, "retrieval_score": 12.089517}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584, "for": 3207219, "retrieval_score": 11.665628}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409, "for": 3207219, "retrieval_score": 12.25137}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271, "for": 3207219, "retrieval_score": 12.214296}
{"snippet": "tabnanny.check(file_or_dir)", "intent": "If `file_or_dir` is a directory and not a symbolic link , then recursively descend the directory tree named by file_or_dir , checking all .py files along the way .", "question_id": 9885, "for": 3207219, "retrieval_score": 12.089517}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584, "for": 3207219, "retrieval_score": 11.665628}
{"snippet": "ZipFile.extractall(path=None, pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "question_id": 12823, "for": 3207219, "retrieval_score": 11.659402}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970, "for": 8134602, "retrieval_score": 45.757988}
{"snippet": "email_message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 3247, "for": 8134602, "retrieval_score": 45.757988}
{"snippet": "symbol_table.get_id()", "intent": "Return the table \u2019 s identifier .", "question_id": 9735, "for": 8134602, "retrieval_score": 45.006016}
{"snippet": "symbol_table.get_name()", "intent": "Return the table \u2019 s name .", "question_id": 9736, "for": 8134602, "retrieval_score": 45.006016}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 8134602, "retrieval_score": 43.914635}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 24958010, "retrieval_score": 20.314337}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 24958010, "retrieval_score": 19.826633}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 24958010, "retrieval_score": 15.211424}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 24958010, "retrieval_score": 15.103104}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 24958010, "retrieval_score": 15.103104}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 24958010, "retrieval_score": 20.314337}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 24958010, "retrieval_score": 19.826633}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 24958010, "retrieval_score": 15.211424}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 24958010, "retrieval_score": 15.103104}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 24958010, "retrieval_score": 15.103104}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 24958010, "retrieval_score": 19.755562}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 24958010, "retrieval_score": 18.959866}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 24958010, "retrieval_score": 17.313314}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 24958010, "retrieval_score": 17.313314}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 24958010, "retrieval_score": 17.01177}
{"snippet": "turtle.setundobuffer(size)", "intent": "Set or disable undobuffer . If `size` is an integer an empty undobuffer of given size is installed .", "question_id": 11038, "for": 6376886, "retrieval_score": 11.587268}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832, "for": 6376886, "retrieval_score": 11.046904}
{"snippet": "test.support.create_empty_file(filename)", "intent": "Create an empty file with `filename` .", "question_id": 10153, "for": 6376886, "retrieval_score": 10.79245}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827, "for": 6376886, "retrieval_score": 10.246084}
{"snippet": "xml.sax.make_parser(parser_list=)", "intent": "Create and return a SAX XMLReader object . If `parser_list` is provided , it must be a list of strings which name modules that have a function named create_parser ( ) .", "question_id": 12590, "for": 6376886, "retrieval_score": 10.152176}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849, "for": 4135344, "retrieval_score": 25.46619}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850, "for": 4135344, "retrieval_score": 22.375975}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343, "for": 4135344, "retrieval_score": 18.658787}
{"snippet": "FTP.delete(filename)", "intent": "Remove the file named `filename` from the server .", "question_id": 3960, "for": 4135344, "retrieval_score": 18.172672}
{"snippet": "FileCookieJar.load(filename=None)", "intent": "Load cookies from a file . With arguments `filename`.", "question_id": 4507, "for": 4135344, "retrieval_score": 18.172672}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 9427163, "retrieval_score": 11.318708}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 9427163, "retrieval_score": 11.318708}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679, "for": 9427163, "retrieval_score": 11.1177635}
{"snippet": "context.copy()", "intent": "Return a duplicate of the context .", "question_id": 2511, "for": 9427163, "retrieval_score": 10.201049}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843, "for": 9427163, "retrieval_score": 10.197587}
{"snippet": "datetime.tzinfo", "intent": "An abstract base class for time zone information objects.", "question_id": 2202, "for": 29311354, "retrieval_score": 16.022644}
{"snippet": "email.utils.localtime(dt=None)", "intent": "Return local time as an aware datetime object . Otherwise `dt` argument should be a datetime instance , and it is converted to the local time zone according to the system time zone database .", "question_id": 3453, "for": 29311354, "retrieval_score": 15.586235}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355, "for": 29311354, "retrieval_score": 14.217622}
{"snippet": "time.timezone", "intent": "The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK).", "question_id": 10474, "for": 29311354, "retrieval_score": 10.565151}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436, "for": 29311354, "retrieval_score": 9.460992}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 26367812, "retrieval_score": 38.119312}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 26367812, "retrieval_score": 34.729126}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 26367812, "retrieval_score": 34.729126}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490, "for": 26367812, "retrieval_score": 33.623154}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 26367812, "retrieval_score": 32.977436}
{"snippet": "Pattern.groupindex", "intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "question_id": 7993, "for": 1908741, "retrieval_score": 19.70109}
{"snippet": "NNTP.newnews(group, date, file=None)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) . With arguments `file`.", "question_id": 6464, "for": 1908741, "retrieval_score": 19.255138}
{"snippet": "NNTP.newnews(group, date)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "question_id": 6463, "for": 1908741, "retrieval_score": 19.017365}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003, "for": 1908741, "retrieval_score": 17.660875}
{"snippet": "Match.start()", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8004, "for": 1908741, "retrieval_score": 17.660875}
{"snippet": "turtle.getcanvas()", "intent": "Return the Canvas of this TurtleScreen .", "question_id": 11096, "for": 15839491, "retrieval_score": 22.514067}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158, "for": 15839491, "retrieval_score": 22.514067}
{"snippet": "turtle.RawPen(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11159, "for": 15839491, "retrieval_score": 22.514067}
{"snippet": "turtle.stamp()", "intent": "Stamp a copy of the turtle shape onto the canvas at the current turtle position .", "question_id": 10929, "for": 15839491, "retrieval_score": 18.049301}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081, "for": 15839491, "retrieval_score": 11.457872}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929, "for": 39816795, "retrieval_score": 10.682709}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 39816795, "retrieval_score": 9.953676}
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925, "for": 39816795, "retrieval_score": 9.953676}
{"snippet": "random.randint(a, b)", "intent": "Return `a` random integer N such that a < = N < = b. Alias for randrange ( a , b+1 ) . With arguments `b`.", "question_id": 7893, "for": 39816795, "retrieval_score": 9.844682}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_SEQ", "intent": "Models which represent a series of models which follow one after the other are indicated with this model type.", "question_id": 7782, "for": 39816795, "retrieval_score": 9.841037}
{"snippet": "time.tzname()", "intent": "If tzinfo is None , returns None , else returns self.tzinfo.tzname ( None ) , or raises an exception if the latter doesn \u2019 t return None or a string object .", "question_id": 2351, "for": 969285, "retrieval_score": 5.4339757}
{"snippet": "AU_read.getmarkers()", "intent": "Returns None .", "question_id": 9719, "for": 969285, "retrieval_score": 5.264718}
{"snippet": "Wave_read.getmarkers()", "intent": "Returns None .", "question_id": 12060, "for": 969285, "retrieval_score": 5.264718}
{"snippet": "time.utcoffset()", "intent": "If tzinfo is None , returns None , else returns self.tzinfo.utcoffset ( None ) , and raises an exception if the latter doesn \u2019 t return None or a timedelta object with magnitude less than one day .", "question_id": 2349, "for": 969285, "retrieval_score": 5.1860366}
{"snippet": "time.dst()", "intent": "If tzinfo is None , returns None , else returns self.tzinfo.dst ( None ) , and raises an exception if the latter doesn \u2019 t return None , or a timedelta object with magnitude less than one day .", "question_id": 2350, "for": 969285, "retrieval_score": 5.1860366}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 12814667, "retrieval_score": 21.310167}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 12814667, "retrieval_score": 20.235638}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 12814667, "retrieval_score": 17.239681}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 12814667, "retrieval_score": 17.239681}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426, "for": 12814667, "retrieval_score": 17.174213}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 12814667, "retrieval_score": 16.59367}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 12814667, "retrieval_score": 14.701139}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 12814667, "retrieval_score": 14.701139}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 12814667, "retrieval_score": 13.193802}
{"snippet": "random.choices(population, weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7896, "for": 12814667, "retrieval_score": 12.52163}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499, "for": 39870642, "retrieval_score": 15.662872}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503, "for": 39870642, "retrieval_score": 15.258292}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4502, "for": 39870642, "retrieval_score": 15.070276}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4505, "for": 39870642, "retrieval_score": 14.688435}
{"snippet": "stats.dump_stats(filename)", "intent": "Save the data loaded into the Stats object to a file named `filename` .", "question_id": 7692, "for": 39870642, "retrieval_score": 13.623131}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499, "for": 39870642, "retrieval_score": 18.840338}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503, "for": 39870642, "retrieval_score": 18.076336}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4502, "for": 39870642, "retrieval_score": 18.040863}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4505, "for": 39870642, "retrieval_score": 17.393373}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757, "for": 39870642, "retrieval_score": 15.652208}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170, "for": 748028, "retrieval_score": 11.386188}
{"snippet": "abstract_event_loop_policy.get_child_watcher()", "intent": "Get a child process watcher object .", "question_id": 378, "for": 748028, "retrieval_score": 11.251236}
{"snippet": "completed_process.stderr", "intent": "Stderr output of the child process if it was captured by run().", "question_id": 9592, "for": 748028, "retrieval_score": 9.375649}
{"snippet": "completed_process.stderr", "intent": "Stderr output of the child process if it was captured by run().", "question_id": 9598, "for": 748028, "retrieval_score": 9.375649}
{"snippet": "completed_process.output", "intent": "Output of the child process if it was captured by run() or check_output().", "question_id": 9590, "for": 748028, "retrieval_score": 9.159538}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 748028, "retrieval_score": 14.033996}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168, "for": 748028, "retrieval_score": 12.299636}
{"snippet": "turtle.write_docstringdict(filename=\"turtle_docstringdict\")", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11169, "for": 748028, "retrieval_score": 12.299636}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864, "for": 748028, "retrieval_score": 12.116121}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020, "for": 748028, "retrieval_score": 11.966837}
{"snippet": "itertools.compress(data, selectors)", "intent": "Make an iterator that filters elements from `data` returning only those that have a corresponding element in `selectors` that evaluates to True .", "question_id": 5245, "for": 8936030, "retrieval_score": 12.739908}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328, "for": 8936030, "retrieval_score": 11.778016}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455, "for": 8936030, "retrieval_score": 10.904809}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463, "for": 8936030, "retrieval_score": 10.904809}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 8936030, "retrieval_score": 10.801549}
{"snippet": "charset.body_encode(string)", "intent": "Body-encode the `string` string .", "question_id": 2922, "for": 8936030, "retrieval_score": 18.96764}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286, "for": 8936030, "retrieval_score": 15.639858}
{"snippet": "base_handler.error_body", "intent": "The error response body.", "question_id": 12265, "for": 8936030, "retrieval_score": 15.510513}
{"snippet": "HTTPConnection.blocksize", "intent": "Buffer size in bytes for sending a file-like message body.", "question_id": 4443, "for": 8936030, "retrieval_score": 14.768837}
{"snippet": "NNTP.body()", "intent": "Same as article ( ) , but sends a BODY command .", "question_id": 6488, "for": 8936030, "retrieval_score": 13.894139}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 15795525, "retrieval_score": 24.408812}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 15795525, "retrieval_score": 24.012936}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 15795525, "retrieval_score": 23.949327}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 15795525, "retrieval_score": 22.523678}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 15795525, "retrieval_score": 22.156178}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 11348347, "retrieval_score": 28.297852}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 11348347, "retrieval_score": 25.618135}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 11348347, "retrieval_score": 20.876022}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 11348347, "retrieval_score": 20.876022}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392, "for": 11348347, "retrieval_score": 18.533253}
{"snippet": "SSLSocket.verify_client_post_handshake()", "intent": "Requests post-handshake authentication ( PHA ) from a TLS 1.3 client .", "question_id": 8987, "for": 5430470, "retrieval_score": 19.623055}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640, "for": 5430470, "retrieval_score": 15.475522}
{"snippet": "widget.identify_row(y)", "intent": "Returns the item ID of the item at position `y` .", "question_id": 10635, "for": 5430470, "retrieval_score": 14.9299965}
{"snippet": "widget.insert(parent, index, **kw, iid=None)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . If `iid` is specified , it is used as the item identifier ; iid must not already exist in the tree . With arguments `**kw`.", "question_id": 10641, "for": 5430470, "retrieval_score": 14.257945}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 5430470, "retrieval_score": 13.972804}
{"snippet": "calendar.month(theyear, themonth, w=0, l=0)", "intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 1000, "for": 11114358, "retrieval_score": 14.038236}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271, "for": 11114358, "retrieval_score": 13.982704}
{"snippet": "pwd.getpwall()", "intent": "Return a list of all available password database entries , in arbitrary order .", "question_id": 7705, "for": 11114358, "retrieval_score": 13.652795}
{"snippet": "text_calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 935, "for": 11114358, "retrieval_score": 13.466762}
{"snippet": "calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 996, "for": 11114358, "retrieval_score": 13.466762}
{"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864, "for": 13078751, "retrieval_score": 13.077834}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855, "for": 13078751, "retrieval_score": 12.661379}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010, "for": 13078751, "retrieval_score": 12.09485}
{"snippet": "inspect.getfullargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5011, "for": 13078751, "retrieval_score": 12.09485}
{"snippet": "cursor.description", "intent": "This read-only attribute provides the column names of the last query.", "question_id": 8852, "for": 13078751, "retrieval_score": 11.9494915}
{"snippet": "nntplib.NNTPProtocolError", "intent": "Exception raised when a reply is received from the server that does not begin with a digit in the range 1\u20135.", "question_id": 6444, "for": 18789262, "retrieval_score": 21.293373}
{"snippet": "sequence_matcher.ratio()", "intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "question_id": 2687, "for": 18789262, "retrieval_score": 18.574635}
{"snippet": "xml.dom.DomstringSizeErr", "intent": "Raised when a specified range of text does not fit into a string.", "question_id": 12381, "for": 18789262, "retrieval_score": 17.986542}
{"snippet": "errno.ECHRNG", "intent": "Channel number out of range", "question_id": 3549, "for": 18789262, "retrieval_score": 15.825824}
{"snippet": "errno.ELNRNG", "intent": "Link number out of range", "question_id": 3553, "for": 18789262, "retrieval_score": 15.825824}
{"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818, "for": 8218032, "retrieval_score": 20.812466}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979, "for": 8218032, "retrieval_score": 20.307632}
{"snippet": "thread.daemon", "intent": "A boolean value indicating whether this thread is a daemon thread (True) or not (False).", "question_id": 10371, "for": 8218032, "retrieval_score": 20.166315}
{"snippet": "finalize.atexit", "intent": "A writable boolean property which by default is true.", "question_id": 12095, "for": 8218032, "retrieval_score": 19.751356}
{"snippet": "process.daemon", "intent": "The process\u2019s daemon flag, a Boolean value.", "question_id": 6181, "for": 8218032, "retrieval_score": 19.221184}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382, "for": 319426, "retrieval_score": 17.053095}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266, "for": 319426, "retrieval_score": 14.8487835}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927, "for": 319426, "retrieval_score": 14.1642475}
{"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928, "for": 319426, "retrieval_score": 14.1642475}
{"snippet": "re.L", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7929, "for": 319426, "retrieval_score": 13.845115}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266, "for": 319426, "retrieval_score": 14.8487835}
{"snippet": "dircmp.report()", "intent": "Print ( to sys.stdout ) a comparison between a and b .", "question_id": 3764, "for": 319426, "retrieval_score": 14.258703}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927, "for": 319426, "retrieval_score": 14.1642475}
{"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928, "for": 319426, "retrieval_score": 14.1642475}
{"snippet": "re.L", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7929, "for": 319426, "retrieval_score": 13.845115}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266, "for": 319426, "retrieval_score": 14.8487835}
{"snippet": "dircmp.report()", "intent": "Print ( to sys.stdout ) a comparison between a and b .", "question_id": 3764, "for": 319426, "retrieval_score": 14.258703}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927, "for": 319426, "retrieval_score": 14.1642475}
{"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928, "for": 319426, "retrieval_score": 14.1642475}
{"snippet": "re.L", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7929, "for": 319426, "retrieval_score": 13.845115}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266, "for": 319426, "retrieval_score": 14.8487835}
{"snippet": "dircmp.report()", "intent": "Print ( to sys.stdout ) a comparison between a and b .", "question_id": 3764, "for": 319426, "retrieval_score": 14.258703}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927, "for": 319426, "retrieval_score": 14.1642475}
{"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928, "for": 319426, "retrieval_score": 14.1642475}
{"snippet": "re.L", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7929, "for": 319426, "retrieval_score": 13.845115}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266, "for": 319426, "retrieval_score": 14.8487835}
{"snippet": "dircmp.report()", "intent": "Print ( to sys.stdout ) a comparison between a and b .", "question_id": 3764, "for": 319426, "retrieval_score": 14.258703}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927, "for": 319426, "retrieval_score": 14.1642475}
{"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928, "for": 319426, "retrieval_score": 14.1642475}
{"snippet": "re.L", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7929, "for": 319426, "retrieval_score": 13.845115}
{"snippet": "unittest.TextTestRunner()", "intent": "A basic test runner implementation that outputs results to a `stream` .", "question_id": 11533, "for": 5744980, "retrieval_score": 12.377635}
{"snippet": "unittest.TextTestRunner(stream=None)", "intent": "A basic test runner implementation that outputs results to a `stream` .", "question_id": 11534, "for": 5744980, "retrieval_score": 12.377635}
{"snippet": "profile.print_stats()", "intent": "Create a Stats object based on the current profile and print the results to stdout .", "question_id": 7682, "for": 5744980, "retrieval_score": 12.254441}
{"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103, "for": 5744980, "retrieval_score": 11.801295}
{"snippet": "unittest.TextTestRunner(descriptions=True)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `descriptions`.", "question_id": 11535, "for": 5744980, "retrieval_score": 11.565283}
{"snippet": "atexit.unregister(func)", "intent": "Remove `func` from the list of functions to be run at interpreter shutdown .", "question_id": 678, "for": 11303225, "retrieval_score": 23.689524}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 11303225, "retrieval_score": 23.124798}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 11303225, "retrieval_score": 23.124798}
{"snippet": "mmap.move(dest, src, count)", "intent": "Copy the `count` bytes starting at offset `src` to the destination index `dest` .", "question_id": 6008, "for": 11303225, "retrieval_score": 19.908058}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 11303225, "retrieval_score": 19.430037}
{"snippet": "decimal.radix()", "intent": "Return Decimal ( 10 ) , the radix ( base ) in which the Decimal class does all its arithmetic .", "question_id": 2465, "for": 10716796, "retrieval_score": 16.69282}
{"snippet": "cmath.log10(x)", "intent": "Return the base-10 logarithm of `x` .", "question_id": 1099, "for": 10716796, "retrieval_score": 15.455177}
{"snippet": "context.log10(x)", "intent": "Returns the base 10 logarithm of `x` .", "question_id": 2543, "for": 10716796, "retrieval_score": 15.455177}
{"snippet": "math.log10(x)", "intent": "Return the base-10 logarithm of `x` .", "question_id": 5911, "for": 10716796, "retrieval_score": 15.455177}
{"snippet": "socket.inet_ntoa(packed_ip)", "intent": "Convert a 32-bit packed IPv4 address ( a bytes-like object four bytes in length ) to its standard dotted-quad string representation ( for example , \u2018 123.45.67.89 \u2019 ) . With arguments `packed_ip`.", "question_id": 8662, "for": 10716796, "retrieval_score": 14.330774}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 9618050, "retrieval_score": 14.325943}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 9618050, "retrieval_score": 14.325943}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939, "for": 9618050, "retrieval_score": 14.151574}
{"snippet": "re.fullmatch(pattern, string)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object .", "question_id": 7941, "for": 9618050, "retrieval_score": 14.027527}
{"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937, "for": 9618050, "retrieval_score": 13.690124}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 17457793, "retrieval_score": 11.99985}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 17457793, "retrieval_score": 11.99985}
{"snippet": "decimal.Overflow", "intent": "Numerical overflow.", "question_id": 2590, "for": 17457793, "retrieval_score": 11.025331}
{"snippet": "decimal.compare_total(other)", "intent": "Compare two operands using their abstract representation rather than their numerical value . With arguments `other`.", "question_id": 2403, "for": 17457793, "retrieval_score": 10.893371}
{"snippet": "email_policy.fold(name, value)", "intent": "Header folding is controlled by the refold_source policy setting . A `value` is considered to be a \u2018 source value \u2019 if and only if it does not have a `name` attribute ( having a name attribute means it is a header object of some sort ) .", "question_id": 3437, "for": 17457793, "retrieval_score": 10.55212}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 2269827, "retrieval_score": 14.038155}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 2269827, "retrieval_score": 13.78744}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 2269827, "retrieval_score": 13.58687}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 2269827, "retrieval_score": 11.849233}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 2269827, "retrieval_score": 11.849233}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_SEQ", "intent": "Models which represent a series of models which follow one after the other are indicated with this model type.", "question_id": 7782, "for": 20400135, "retrieval_score": 17.003796}
{"snippet": "socket.sendmsg(buffers)", "intent": "Send normal and ancillary data to the socket , gathering the non-ancillary data from a series of `buffers` and concatenating it into a single message .", "question_id": 8726, "for": 20400135, "retrieval_score": 16.9234}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 20400135, "retrieval_score": 16.54777}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 20400135, "retrieval_score": 15.926751}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 20400135, "retrieval_score": 15.926751}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036, "for": 20400135, "retrieval_score": 15.867074}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039, "for": 20400135, "retrieval_score": 15.52499}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 20400135, "retrieval_score": 14.698381}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 20400135, "retrieval_score": 14.698381}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 20400135, "retrieval_score": 14.161833}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 329886, "retrieval_score": 17.793856}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 329886, "retrieval_score": 17.250278}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 329886, "retrieval_score": 16.84059}
{"snippet": "Request.header_items()", "intent": "Return a list of tuples ( header_name , header_value ) of the Request headers .", "question_id": 11833, "for": 329886, "retrieval_score": 16.391027}
{"snippet": "NNTP.list(group_pattern=None, file=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` . With arguments `file`.", "question_id": 6468, "for": 329886, "retrieval_score": 16.299347}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 9849192, "retrieval_score": 17.919168}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 9849192, "retrieval_score": 17.162823}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 9849192, "retrieval_score": 17.16186}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 9849192, "retrieval_score": 13.9524145}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 9849192, "retrieval_score": 13.505455}
{"snippet": "calendar.monthrange(year, month)", "intent": "Returns weekday of first day of the `month` and number of days in month , for the specified `year` and month .", "question_id": 991, "for": 27218543, "retrieval_score": 29.686222}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989, "for": 27218543, "retrieval_score": 23.138367}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247, "for": 27218543, "retrieval_score": 22.815592}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912, "for": 27218543, "retrieval_score": 22.521906}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218, "for": 27218543, "retrieval_score": 21.429771}
{"snippet": "urllib.request.urlopen(url, cafile=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "question_id": 11754, "for": 15445981, "retrieval_score": 22.09022}
{"snippet": "urllib.request.urlopen(url, capath=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "question_id": 11755, "for": 15445981, "retrieval_score": 22.09022}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210, "for": 15445981, "retrieval_score": 20.225573}
{"snippet": "http.client.HTTPS_PORT", "intent": "The default port for the HTTPS protocol (always 443).", "question_id": 4425, "for": 15445981, "retrieval_score": 18.236929}
{"snippet": "urllib.request.urlopen(url, timeout, cafile=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "question_id": 11744, "for": 15445981, "retrieval_score": 17.393763}
{"snippet": "cursor.lastrowid", "intent": "This read-only attribute provides the rowid of the last modified row.", "question_id": 8850, "for": 11414596, "retrieval_score": 13.040257}
{"snippet": "errno.ENETRESET", "intent": "Network dropped connection because of reset", "question_id": 3607, "for": 11414596, "retrieval_score": 11.612198}
{"snippet": "turtle.get_poly()", "intent": "Return the last recorded polygon .", "question_id": 11033, "for": 11414596, "retrieval_score": 9.251425}
{"snippet": "connection.row_factory", "intent": "You can change this attribute to a callable that accepts the cursor and the original row as a tuple and will return the real result row.", "question_id": 8825, "for": 11414596, "retrieval_score": 9.054176}
{"snippet": "DictWriter.writeheader()", "intent": "Write a row with the field names ( as specified in the constructor ) .", "question_id": 1738, "for": 11414596, "retrieval_score": 8.542176}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 3437059, "retrieval_score": 12.101342}
{"snippet": "faulthandler.is_enabled()", "intent": "Check if the fault handler is enabled .", "question_id": 3721, "for": 3437059, "retrieval_score": 11.072291}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800, "for": 3437059, "retrieval_score": 10.249756}
{"snippet": "lzma.is_check_supported(check)", "intent": "Returns true if the given integrity `check` is supported on this system .", "question_id": 5722, "for": 3437059, "retrieval_score": 9.7660885}
{"snippet": "Popen.poll()", "intent": "Check if child process has terminated .", "question_id": 9609, "for": 3437059, "retrieval_score": 9.760395}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 3437059, "retrieval_score": 12.101342}
{"snippet": "faulthandler.is_enabled()", "intent": "Check if the fault handler is enabled .", "question_id": 3721, "for": 3437059, "retrieval_score": 11.072291}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800, "for": 3437059, "retrieval_score": 10.249756}
{"snippet": "lzma.is_check_supported(check)", "intent": "Returns true if the given integrity `check` is supported on this system .", "question_id": 5722, "for": 3437059, "retrieval_score": 9.7660885}
{"snippet": "Popen.poll()", "intent": "Check if child process has terminated .", "question_id": 9609, "for": 3437059, "retrieval_score": 9.760395}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194, "for": 3437059, "retrieval_score": 14.310261}
{"snippet": "str.find(sub, start)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9195, "for": 3437059, "retrieval_score": 14.310261}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 3437059, "retrieval_score": 14.310261}
{"snippet": "str.rfind(sub, start, end)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9226, "for": 3437059, "retrieval_score": 13.903584}
{"snippet": "str.rfind(sub, start)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9227, "for": 3437059, "retrieval_score": 13.903584}
{"snippet": "sys.setcheckinterval(interval)", "intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "question_id": 9834, "for": 3437059, "retrieval_score": 11.544778}
{"snippet": "faulthandler.is_enabled()", "intent": "Check if the fault handler is enabled .", "question_id": 3721, "for": 3437059, "retrieval_score": 11.072291}
{"snippet": "sys.getcheckinterval()", "intent": "Return the interpreter \u2019 s \u201c check interval \u201d ; see setcheckinterval ( ) .", "question_id": 9795, "for": 3437059, "retrieval_score": 10.943229}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 3437059, "retrieval_score": 10.491693}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800, "for": 3437059, "retrieval_score": 10.249756}
{"snippet": "cursor.lastrowid", "intent": "This read-only attribute provides the rowid of the last modified row.", "question_id": 8850, "for": 36542169, "retrieval_score": 14.153299}
{"snippet": "asyncio.LifoQueue", "intent": "A variant of Queue that retrieves most recently added entries first (last in, first out).", "question_id": 460, "for": 36542169, "retrieval_score": 12.839358}
{"snippet": "NNTP.xhdr(hdr, str)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search .", "question_id": 6497, "for": 36542169, "retrieval_score": 12.407834}
{"snippet": "turtle.clearstamps()", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10931, "for": 36542169, "retrieval_score": 12.068993}
{"snippet": "turtle.clearstamps(n=None)", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10932, "for": 36542169, "retrieval_score": 12.068993}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779, "for": 23351183, "retrieval_score": 17.792671}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_EMPTY", "intent": "Elements which are declared to be EMPTY have this model type.", "question_id": 7781, "for": 23351183, "retrieval_score": 14.983324}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308, "for": 23351183, "retrieval_score": 13.000008}
{"snippet": "turtle.colormode()", "intent": "Return the colormode or set it to 1.0 or 255 .", "question_id": 11094, "for": 23351183, "retrieval_score": 11.699921}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758, "for": 23351183, "retrieval_score": 11.527231}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136, "for": 23351183, "retrieval_score": 14.815239}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_OPT", "intent": "The model is optional: it can appear once or not at all, as for A?.", "question_id": 7784, "for": 23351183, "retrieval_score": 13.371155}
{"snippet": "math.ceil(x)", "intent": "Return the ceiling of `x` , the smallest integer greater than or equal to x .", "question_id": 5885, "for": 23351183, "retrieval_score": 12.812436}
{"snippet": "gc.DEBUG_SAVEALL", "intent": "When set, all unreachable objects found will be appended to garbage rather than being freed.", "question_id": 4192, "for": 23351183, "retrieval_score": 12.353433}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_EMPTY", "intent": "Elements which are declared to be EMPTY have this model type.", "question_id": 7781, "for": 23351183, "retrieval_score": 11.943356}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070, "for": 28199524, "retrieval_score": 14.69817}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846, "for": 28199524, "retrieval_score": 13.845197}
{"snippet": "cursor.arraysize", "intent": "Read/write attribute that controls the number of rows returned by fetchmany().", "question_id": 8851, "for": 28199524, "retrieval_score": 13.20444}
{"snippet": "test.support.fd_count()", "intent": "Count the number of open file descriptors .", "question_id": 10154, "for": 28199524, "retrieval_score": 13.009403}
{"snippet": "bound_arguments.apply_defaults()", "intent": "Set default values for missing arguments .", "question_id": 5007, "for": 28199524, "retrieval_score": 12.898922}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405, "for": 3728017, "retrieval_score": 11.040812}
{"snippet": "socketserver.UDPServer(server_address, RequestHandlerClass)", "intent": "This uses datagrams , which are discrete packets of information that may arrive out of order or be lost while in transit . With arguments `server_address`, `RequestHandlerClass`.", "question_id": 8747, "for": 3728017, "retrieval_score": 11.013275}
{"snippet": "socketserver.UDPServer(server_address, RequestHandlerClass, bind_and_activate=True)", "intent": "This uses datagrams , which are discrete packets of information that may arrive out of order or be lost while in transit . With arguments `server_address`, `RequestHandlerClass`, `bind_and_activate`.", "question_id": 8748, "for": 3728017, "retrieval_score": 10.817947}
{"snippet": "test_loader.sortTestMethodsUsing", "intent": "Function to be used to compare method names when sorting them in getTestCaseNames() and all the loadTestsFrom*() methods.", "question_id": 11504, "for": 3728017, "retrieval_score": 9.683942}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 3728017, "retrieval_score": 8.719754}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843, "for": 15457504, "retrieval_score": 14.574569}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 15457504, "retrieval_score": 14.047001}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828, "for": 15457504, "retrieval_score": 13.281622}
{"snippet": "turtle.getcanvas()", "intent": "Return the Canvas of this TurtleScreen .", "question_id": 11096, "for": 15457504, "retrieval_score": 12.9901285}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 15457504, "retrieval_score": 12.743604}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 4879641, "retrieval_score": 24.719797}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028, "for": 4879641, "retrieval_score": 23.98358}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971, "for": 4879641, "retrieval_score": 23.54843}
{"snippet": "email_message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 3248, "for": 4879641, "retrieval_score": 23.54843}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175, "for": 4879641, "retrieval_score": 23.544756}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 32743479, "retrieval_score": 20.29419}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 32743479, "retrieval_score": 19.465237}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 32743479, "retrieval_score": 17.670523}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714, "for": 32743479, "retrieval_score": 17.670523}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713, "for": 32743479, "retrieval_score": 16.527624}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 36296993, "retrieval_score": 15.802711}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 36296993, "retrieval_score": 13.725713}
{"snippet": "email_message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3260, "for": 36296993, "retrieval_score": 13.144827}
{"snippet": "email_message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3261, "for": 36296993, "retrieval_score": 13.144827}
{"snippet": "email_message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3265, "for": 36296993, "retrieval_score": 13.144827}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 7270321, "retrieval_score": 19.13018}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 7270321, "retrieval_score": 19.13018}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136, "for": 7270321, "retrieval_score": 16.347242}
{"snippet": "SSLContext.get_ca_certs(binary_form=False)", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "question_id": 9012, "for": 7270321, "retrieval_score": 15.758963}
{"snippet": "random.vonmisesvariate(mu, kappa)", "intent": "`mu` is the mean angle , expressed in radians between 0 and 2*pi , and `kappa` is the concentration parameter , which must be greater than or equal to zero .", "question_id": 7915, "for": 7270321, "retrieval_score": 15.182202}
{"snippet": "dis.haslocal", "intent": "Sequence of bytecodes that access a local variable.", "question_id": 2750, "for": 843277, "retrieval_score": 13.837137}
{"snippet": "os.getenv(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6668, "for": 843277, "retrieval_score": 13.551854}
{"snippet": "os.getenv(key, default=None)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6669, "for": 843277, "retrieval_score": 13.551854}
{"snippet": "os.getenvb(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6670, "for": 843277, "retrieval_score": 13.551854}
{"snippet": "os.getenvb(key, default=None)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6671, "for": 843277, "retrieval_score": 13.551854}
{"snippet": "os.getenv(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6668, "for": 843277, "retrieval_score": 13.551854}
{"snippet": "os.getenv(key, default=None)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6669, "for": 843277, "retrieval_score": 13.551854}
{"snippet": "os.getenvb(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6670, "for": 843277, "retrieval_score": 13.551854}
{"snippet": "os.getenvb(key, default=None)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6671, "for": 843277, "retrieval_score": 13.551854}
{"snippet": "symbol.is_declared_global()", "intent": "Return True if the symbol is declared global with a global statement .", "question_id": 9759, "for": 843277, "retrieval_score": 10.648013}
{"snippet": "test.support.get_attribute(obj, name)", "intent": "Get an attribute , raising unittest.SkipTest if AttributeError is raised . With arguments `obj`, `name`.", "question_id": 10257, "for": 843277, "retrieval_score": 15.503206}
{"snippet": "Popen.poll()", "intent": "Check if child process has terminated .", "question_id": 9609, "for": 843277, "retrieval_score": 15.042798}
{"snippet": "Element.hasAttribute(name)", "intent": "Returns true if the element has an attribute named by `name` .", "question_id": 12357, "for": 843277, "retrieval_score": 14.94259}
{"snippet": "email_policy.header_fetch_parse(name, value)", "intent": "If the `value` has a `name` attribute , it is returned to unmodified .", "question_id": 3436, "for": 843277, "retrieval_score": 14.590033}
{"snippet": "Cookie.has_nonstandard_attr(name)", "intent": "Return true if cookie has the named cookie-attribute . With arguments `name`.", "question_id": 4571, "for": 843277, "retrieval_score": 14.590033}
{"snippet": "dis.haslocal", "intent": "Sequence of bytecodes that access a local variable.", "question_id": 2750, "for": 843277, "retrieval_score": 13.837137}
{"snippet": "os.getenv(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6668, "for": 843277, "retrieval_score": 13.551854}
{"snippet": "os.getenv(key, default=None)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6669, "for": 843277, "retrieval_score": 13.551854}
{"snippet": "os.getenvb(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6670, "for": 843277, "retrieval_score": 13.551854}
{"snippet": "os.getenvb(key, default=None)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6671, "for": 843277, "retrieval_score": 13.551854}
{"snippet": "os.getenv(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6668, "for": 843277, "retrieval_score": 13.551854}
{"snippet": "os.getenv(key, default=None)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6669, "for": 843277, "retrieval_score": 13.551854}
{"snippet": "os.getenvb(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6670, "for": 843277, "retrieval_score": 13.551854}
{"snippet": "os.getenvb(key, default=None)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6671, "for": 843277, "retrieval_score": 13.551854}
{"snippet": "symbol.is_declared_global()", "intent": "Return True if the symbol is declared global with a global statement .", "question_id": 9759, "for": 843277, "retrieval_score": 10.648013}
{"snippet": "decimal.logical_and(other)", "intent": "logical_and ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2435, "for": 6243460, "retrieval_score": 14.333239}
{"snippet": "decimal.logical_or(other)", "intent": "logical_or ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2439, "for": 6243460, "retrieval_score": 14.333239}
{"snippet": "decimal.logical_xor(other)", "intent": "logical_xor ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2441, "for": 6243460, "retrieval_score": 14.333239}
{"snippet": "decimal.logical_and(other, context=None)", "intent": "logical_and ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`, `context`.", "question_id": 2436, "for": 6243460, "retrieval_score": 14.096533}
{"snippet": "decimal.logical_or(other, context=None)", "intent": "logical_or ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`, `context`.", "question_id": 2440, "for": 6243460, "retrieval_score": 14.096533}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036, "for": 5384570, "retrieval_score": 15.902983}
{"snippet": "types.GeneratorType", "intent": "The type of generator-iterator objects, created by generator functions.", "question_id": 11185, "for": 5384570, "retrieval_score": 15.461145}
{"snippet": "types.AsyncGeneratorType", "intent": "The type of asynchronous generator-iterator objects, created by asynchronous generator functions.", "question_id": 11187, "for": 5384570, "retrieval_score": 14.860706}
{"snippet": "queue.maxsize", "intent": "Number of items allowed in the queue.", "question_id": 449, "for": 5384570, "retrieval_score": 14.626852}
{"snippet": "queue.qsize()", "intent": "Return the number of items in the queue .", "question_id": 457, "for": 5384570, "retrieval_score": 14.346357}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454, "for": 18990069, "retrieval_score": 12.347857}
{"snippet": "test_case.assertTupleEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11456, "for": 18990069, "retrieval_score": 12.347857}
{"snippet": "test_case.assertListEqual(first, second, msg=None)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`, `msg`.", "question_id": 11455, "for": 18990069, "retrieval_score": 12.063236}
{"snippet": "test_case.assertTupleEqual(first, second, msg=None)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`, `msg`.", "question_id": 11457, "for": 18990069, "retrieval_score": 12.063236}
{"snippet": "itertools.compress(data, selectors)", "intent": "Make an iterator that filters elements from `data` returning only those that have a corresponding element in `selectors` that evaluates to True .", "question_id": 5245, "for": 18990069, "retrieval_score": 11.128661}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670, "for": 18990069, "retrieval_score": 21.157427}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 18990069, "retrieval_score": 20.301432}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508, "for": 18990069, "retrieval_score": 18.730835}
{"snippet": "test_result.failures", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11509, "for": 18990069, "retrieval_score": 18.730835}
{"snippet": "test_result.expectedFailures", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11511, "for": 18990069, "retrieval_score": 18.730835}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 18990069, "retrieval_score": 15.86893}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508, "for": 18990069, "retrieval_score": 15.171115}
{"snippet": "test_result.failures", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11509, "for": 18990069, "retrieval_score": 15.171115}
{"snippet": "test_result.expectedFailures", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11511, "for": 18990069, "retrieval_score": 15.171115}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971, "for": 18990069, "retrieval_score": 14.50254}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403, "for": 4296249, "retrieval_score": 14.826462}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404, "for": 4296249, "retrieval_score": 14.826462}
{"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405, "for": 4296249, "retrieval_score": 14.826462}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 4296249, "retrieval_score": 14.826462}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407, "for": 4296249, "retrieval_score": 14.826462}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 10406130, "retrieval_score": 23.504873}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 10406130, "retrieval_score": 20.876022}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 10406130, "retrieval_score": 20.876022}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 10406130, "retrieval_score": 20.583944}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392, "for": 10406130, "retrieval_score": 18.949589}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 10406130, "retrieval_score": 26.94063}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 10406130, "retrieval_score": 26.524244}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 10406130, "retrieval_score": 26.524244}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392, "for": 10406130, "retrieval_score": 23.455248}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 10406130, "retrieval_score": 23.12415}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 10406130, "retrieval_score": 26.524244}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 10406130, "retrieval_score": 26.524244}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392, "for": 10406130, "retrieval_score": 23.455248}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 10406130, "retrieval_score": 22.147652}
{"snippet": "pickle.dump(obj, file, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7365, "for": 10406130, "retrieval_score": 21.946802}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175, "for": 10406130, "retrieval_score": 16.89725}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 10406130, "retrieval_score": 12.602191}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 10406130, "retrieval_score": 12.431047}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 10406130, "retrieval_score": 12.287809}
{"snippet": "stringprep.in_table_c6(code)", "intent": "Determine whether `code` is in tableC.6 ( Inappropriate for plain text ) .", "question_id": 9544, "for": 10406130, "retrieval_score": 12.271412}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 35797523, "retrieval_score": 18.864353}
{"snippet": "NNTP.list(group_pattern=None, file=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` . With arguments `file`.", "question_id": 6468, "for": 35797523, "retrieval_score": 18.450684}
{"snippet": "gc.get_objects()", "intent": "Returns a list of all objects tracked by the collector , excluding the list returned .", "question_id": 4174, "for": 35797523, "retrieval_score": 18.058048}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 35797523, "retrieval_score": 17.882465}
{"snippet": "NNTP.list()", "intent": "Send a LIST or LIST ACTIVE command .", "question_id": 6465, "for": 35797523, "retrieval_score": 17.591946}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 6710684, "retrieval_score": 17.588861}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 6710684, "retrieval_score": 17.588861}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983, "for": 6710684, "retrieval_score": 17.519865}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 6710684, "retrieval_score": 17.209318}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984, "for": 6710684, "retrieval_score": 17.168394}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615, "for": 15271907, "retrieval_score": 17.280355}
{"snippet": "Database.Commit()", "intent": "Commit the changes pending in the current transaction , by calling MSIDatabaseCommit ( ) .", "question_id": 6069, "for": 15271907, "retrieval_score": 16.100597}
{"snippet": "connection.rollback()", "intent": "This method rolls back any changes to the database since the last call to commit ( ) .", "question_id": 8809, "for": 15271907, "retrieval_score": 14.696221}
{"snippet": "curses.panel.update_panels()", "intent": "Updates the virtual screen after changes in the panel stack .", "question_id": 2144, "for": 15271907, "retrieval_score": 13.256329}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847, "for": 15271907, "retrieval_score": 10.907001}
{"snippet": "i_pv4_network.subnets()", "intent": "The subnets that join to make the current network definition , depending on the argument values .", "question_id": 5208, "for": 40221516, "retrieval_score": 14.1808405}
{"snippet": "i_pv4_network.subnets(prefixlen_diff=1)", "intent": "The subnets that join to make the current network definition , depending on the argument values . `prefixlen_diff` is the amount our prefix length should be increased by .", "question_id": 5209, "for": 40221516, "retrieval_score": 11.414265}
{"snippet": "i_pv4_network.subnets(new_prefix=None)", "intent": "The subnets that join to make the current network definition , depending on the argument values . `new_prefix` is the desired new prefix of the subnets ; it must be larger than our prefix .", "question_id": 5210, "for": 40221516, "retrieval_score": 10.484514}
{"snippet": "Repr.repr_TYPE(obj, level)", "intent": "Formatting methods for specific types are implemented as methods with a name based on the type name . In the method name , TYPE is replaced by ' _'.join ( type ( `obj` ) .__name__.split ( ) ) . Type-specific methods which need to recursively format a value should call self.repr1 ( subobj , `level` - 1 ) .", "question_id": 8068, "for": 40221516, "retrieval_score": 10.325184}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997, "for": 40221516, "retrieval_score": 10.206876}
{"snippet": "turtle.bgcolor(*args)", "intent": "Set or return background color of the TurtleScreen . With arguments `*args`.", "question_id": 11040, "for": 24659239, "retrieval_score": 28.201962}
{"snippet": "curses.color_content(color_number)", "intent": "Return the intensity of the red , green , and blue ( RGB ) components in the color `color_number` , which must be between 0 and COLORS .", "question_id": 1924, "for": 24659239, "retrieval_score": 22.969076}
{"snippet": "curses.color_pair(color_number)", "intent": "Return the attribute value for displaying text in the specified color . With arguments `color_number`.", "question_id": 1925, "for": 24659239, "retrieval_score": 21.508202}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927, "for": 24659239, "retrieval_score": 20.850811}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928, "for": 24659239, "retrieval_score": 20.850811}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 9039961, "retrieval_score": 13.417963}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 9039961, "retrieval_score": 13.098073}
{"snippet": "element.keys()", "intent": "Returns the elements attribute names as a list .", "question_id": 12487, "for": 9039961, "retrieval_score": 10.7486725}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895, "for": 9039961, "retrieval_score": 10.59726}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898, "for": 9039961, "retrieval_score": 10.59726}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 3252590, "retrieval_score": 21.605957}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 3252590, "retrieval_score": 21.233496}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 3252590, "retrieval_score": 21.21068}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3252590, "retrieval_score": 18.097448}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 3252590, "retrieval_score": 17.419073}
{"snippet": "crypt.METHOD_MD5", "intent": "Another Modular Crypt Format method with 8 character salt and 22 character hash based on the MD5 hash function.", "question_id": 1671, "for": 4508155, "retrieval_score": 17.477829}
{"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961, "for": 4508155, "retrieval_score": 17.286276}
{"snippet": "pkgutil.get_data(package, resource)", "intent": "Get a `resource` from a `package` .", "question_id": 7457, "for": 4508155, "retrieval_score": 10.239011}
{"snippet": "crypt.METHOD_SHA512", "intent": "A Modular Crypt Format method with 16 character salt and 86 character hash based on the SHA-512 hash function.", "question_id": 1668, "for": 4508155, "retrieval_score": 9.470875}
{"snippet": "hash.copy()", "intent": "Return a copy ( \u201c clone \u201d ) of the hash object .", "question_id": 4307, "for": 4508155, "retrieval_score": 9.334852}
{"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160, "for": 3925096, "retrieval_score": 18.227186}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020, "for": 3925096, "retrieval_score": 12.992101}
{"snippet": "os.path.getatime(path)", "intent": "Return the time of last access of `path` .", "question_id": 7151, "for": 3925096, "retrieval_score": 12.689967}
{"snippet": "os.path.getmtime(path)", "intent": "Return the time of last modification of `path` .", "question_id": 7152, "for": 3925096, "retrieval_score": 12.689967}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234, "for": 3925096, "retrieval_score": 12.626187}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247, "for": 2040038, "retrieval_score": 14.964982}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218, "for": 2040038, "retrieval_score": 14.585001}
{"snippet": "datetime.date()", "intent": "Return date object with same year , month and day .", "question_id": 2281, "for": 2040038, "retrieval_score": 14.585001}
{"snippet": "calendar.monthrange(year, month)", "intent": "Returns weekday of first day of the `month` and number of days in month , for the specified `year` and month .", "question_id": 991, "for": 2040038, "retrieval_score": 14.3766575}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989, "for": 2040038, "retrieval_score": 14.068116}
{"snippet": "msilib.Binary(filename)", "intent": "Represents entries in the Binary table ; inserting such an object using add_data ( ) reads the file named `filename` into the table .", "question_id": 6064, "for": 8139797, "retrieval_score": 15.682287}
{"snippet": "msilib.add_tables(database, module)", "intent": "Add all table content from `module` to `database` .", "question_id": 6065, "for": 8139797, "retrieval_score": 15.174917}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063, "for": 8139797, "retrieval_score": 14.527211}
{"snippet": "json.dumps(obj, **kw)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "question_id": 5280, "for": 8139797, "retrieval_score": 13.981067}
{"snippet": "errno.ENFILE", "intent": "File table overflow", "question_id": 3528, "for": 8139797, "retrieval_score": 13.871949}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170, "for": 18723580, "retrieval_score": 13.823587}
{"snippet": "smtp_channel.mailfrom", "intent": "Holds a string containing the address identified in the \u201cMAIL FROM:\u201d line from the client.", "question_id": 8443, "for": 18723580, "retrieval_score": 11.265996}
{"snippet": "doc_test.docstring", "intent": "The string that the test was extracted from, or None if the string is unavailable, or if the test was not extracted from a string.", "question_id": 2823, "for": 18723580, "retrieval_score": 10.767224}
{"snippet": "bdb.user_call(frame, argument_list)", "intent": "This method is called from dispatch_call ( ) when there is the possibility that a break might be necessary anywhere inside the called function . With arguments `frame`, `argument_list`.", "question_id": 780, "for": 18723580, "retrieval_score": 10.71369}
{"snippet": "base_http_request_handler.request_version", "intent": "Contains the version string from the request.", "question_id": 4623, "for": 18723580, "retrieval_score": 10.361282}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 26640145, "retrieval_score": 20.486177}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027, "for": 26640145, "retrieval_score": 19.729248}
{"snippet": "html_calendar.cssclasses_weekday_head", "intent": "A list of CSS classes used for weekday names in the header row.", "question_id": 972, "for": 26640145, "retrieval_score": 19.567253}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026, "for": 26640145, "retrieval_score": 19.372194}
{"snippet": "inspect.getinnerframes(traceback, context=1)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "question_id": 5028, "for": 26640145, "retrieval_score": 18.696886}
{"snippet": "DictWriter.writeheader()", "intent": "Write a row with the field names ( as specified in the constructor ) .", "question_id": 1738, "for": 26640145, "retrieval_score": 15.181139}
{"snippet": "html_calendar.cssclasses_weekday_head", "intent": "A list of CSS classes used for weekday names in the header row.", "question_id": 972, "for": 26640145, "retrieval_score": 14.725369}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 26640145, "retrieval_score": 13.616098}
{"snippet": "auto.start", "intent": "The first index of invalid data in object.", "question_id": 3677, "for": 26640145, "retrieval_score": 13.166056}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027, "for": 26640145, "retrieval_score": 13.1467905}
{"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617, "for": 13902805, "retrieval_score": 14.752117}
{"snippet": "msilib.UuidCreate()", "intent": "Return the string representation of a new unique identifier .", "question_id": 6059, "for": 13902805, "retrieval_score": 14.529135}
{"snippet": "POP3.uidl(which=None)", "intent": "Return message digest ( unique id ) list . If `which` is specified , result contains the unique id for that message in the form 'response mesgnum uid , otherwise result is list ( response , [ 'mesgnum uid ' , ... ] , octets ) .", "question_id": 7618, "for": 13902805, "retrieval_score": 13.766191}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 13902805, "retrieval_score": 13.609188}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947, "for": 13902805, "retrieval_score": 13.482586}
{"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617, "for": 13902805, "retrieval_score": 14.752117}
{"snippet": "msilib.UuidCreate()", "intent": "Return the string representation of a new unique identifier .", "question_id": 6059, "for": 13902805, "retrieval_score": 14.529135}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 13902805, "retrieval_score": 14.144896}
{"snippet": "POP3.uidl(which=None)", "intent": "Return message digest ( unique id ) list . If `which` is specified , result contains the unique id for that message in the form 'response mesgnum uid , otherwise result is list ( response , [ 'mesgnum uid ' , ... ] , octets ) .", "question_id": 7618, "for": 13902805, "retrieval_score": 13.766191}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 13902805, "retrieval_score": 13.609188}
{"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617, "for": 13902805, "retrieval_score": 14.752117}
{"snippet": "msilib.UuidCreate()", "intent": "Return the string representation of a new unique identifier .", "question_id": 6059, "for": 13902805, "retrieval_score": 14.529135}
{"snippet": "POP3.uidl(which=None)", "intent": "Return message digest ( unique id ) list . If `which` is specified , result contains the unique id for that message in the form 'response mesgnum uid , otherwise result is list ( response , [ 'mesgnum uid ' , ... ] , octets ) .", "question_id": 7618, "for": 13902805, "retrieval_score": 13.766191}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 13902805, "retrieval_score": 13.609188}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947, "for": 13902805, "retrieval_score": 13.482586}
{"snippet": "asyncio.Queue(maxsize=0, loop=None)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite . With arguments `loop`.", "question_id": 448, "for": 39187788, "retrieval_score": 16.107904}
{"snippet": "asyncio.Queue(maxsize=0)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .", "question_id": 446, "for": 39187788, "retrieval_score": 15.907357}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997, "for": 39187788, "retrieval_score": 15.465491}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386, "for": 39187788, "retrieval_score": 14.542211}
{"snippet": "time.timezone", "intent": "The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK).", "question_id": 10474, "for": 39187788, "retrieval_score": 13.816031}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439, "for": 1299855, "retrieval_score": 8.061835}
{"snippet": "json.load(fp, **kw)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5290, "for": 1299855, "retrieval_score": 7.258711}
{"snippet": "pickle.dump(obj, file, protocol=None, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7366, "for": 1299855, "retrieval_score": 7.209393}
{"snippet": "module_finder.run_script(pathname)", "intent": "Analyze the contents of the `pathname` file , which must contain Python code .", "question_id": 6056, "for": 1299855, "retrieval_score": 7.092443}
{"snippet": "pickle.dump(obj, file, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7365, "for": 1299855, "retrieval_score": 7.0857697}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 7128153, "retrieval_score": 27.641605}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 7128153, "retrieval_score": 18.476818}
{"snippet": "mailbox.iterkeys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5729, "for": 7128153, "retrieval_score": 16.593569}
{"snippet": "mailbox.keys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5730, "for": 7128153, "retrieval_score": 16.593569}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 7128153, "retrieval_score": 15.211424}
{"snippet": "Panel.hide()", "intent": "Hide the panel .", "question_id": 2149, "for": 11269575, "retrieval_score": 11.959565}
{"snippet": "dircmp.left_list", "intent": "Files and subdirectories in a, filtered by hide and ignore.", "question_id": 3769, "for": 11269575, "retrieval_score": 9.886518}
{"snippet": "dircmp.right_list", "intent": "Files and subdirectories in b, filtered by hide and ignore.", "question_id": 3770, "for": 11269575, "retrieval_score": 9.886518}
{"snippet": "filecmp.dircmp(a, b, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3762, "for": 11269575, "retrieval_score": 9.52322}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763, "for": 11269575, "retrieval_score": 9.52322}
{"snippet": "urllib.parse.unquote_plus(string)", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str .", "question_id": 11727, "for": 27905295, "retrieval_score": 10.828052}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`.", "question_id": 11728, "for": 27905295, "retrieval_score": 10.230735}
{"snippet": "urllib.parse.unquote_plus(string, errors='replace')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `errors`.", "question_id": 11729, "for": 27905295, "retrieval_score": 10.230735}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`, `errors`.", "question_id": 11730, "for": 27905295, "retrieval_score": 10.046009}
{"snippet": "urllib.parse.quote_plus(string)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL .", "question_id": 11713, "for": 27905295, "retrieval_score": 9.695874}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 31143732, "retrieval_score": 22.581816}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 31143732, "retrieval_score": 14.003226}
{"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897, "for": 31143732, "retrieval_score": 13.350134}
{"snippet": "date.month", "intent": "Between 1 and 12 inclusive.", "question_id": 2227, "for": 31143732, "retrieval_score": 13.019556}
{"snippet": "datetime.month", "intent": "Between 1 and 12 inclusive.", "question_id": 2273, "for": 31143732, "retrieval_score": 13.019556}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131, "for": 31143732, "retrieval_score": 13.819439}
{"snippet": "nntplib.NNTPProtocolError", "intent": "Exception raised when a reply is received from the server that does not begin with a digit in the range 1\u20135.", "question_id": 6444, "for": 31143732, "retrieval_score": 13.565377}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 31143732, "retrieval_score": 12.329911}
{"snippet": "UUID.version", "intent": "The UUID version number (1 through 5, meaningful only when the variant is RFC_4122).", "question_id": 11954, "for": 31143732, "retrieval_score": 12.031945}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124, "for": 31143732, "retrieval_score": 12.0245905}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 1447575, "retrieval_score": 23.248556}
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925, "for": 1447575, "retrieval_score": 23.248556}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 1447575, "retrieval_score": 23.02768}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 1447575, "retrieval_score": 22.647663}
{"snippet": "os.symlink(src, dst, target_is_directory=False, dir_fd=None)", "intent": "Create a symbolic link pointing to `src` named `dst` . Otherwise , the symlink will be created as a directory if `target_is_directory` is True or a file symlink ( the default ) otherwise . With arguments `dir_fd`.", "question_id": 6954, "for": 1447575, "retrieval_score": 19.975887}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 17277100, "retrieval_score": 24.623547}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 17277100, "retrieval_score": 20.176493}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 17277100, "retrieval_score": 20.176493}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124, "for": 17277100, "retrieval_score": 19.255085}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984, "for": 17277100, "retrieval_score": 18.464989}
{"snippet": "ssl.enum_certificates(store_name)", "intent": "Retrieve certificates from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8899, "for": 23823206, "retrieval_score": 11.68227}
{"snippet": "ssl.enum_crls(store_name)", "intent": "Retrieve CRLs from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8900, "for": 23823206, "retrieval_score": 11.68227}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716, "for": 23823206, "retrieval_score": 11.301575}
{"snippet": "tempfile.TemporaryFile()", "intent": "Return a file-like object that can be used as a temporary storage area .", "question_id": 10033, "for": 23823206, "retrieval_score": 10.494471}
{"snippet": "file_loader.get_data(path)", "intent": "Reads `path` as a binary file and returns the bytes from it .", "question_id": 4840, "for": 23823206, "retrieval_score": 9.268288}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832, "for": 509742, "retrieval_score": 19.175236}
{"snippet": "os.chroot(path)", "intent": "Change the root directory of the current process to `path` .", "question_id": 6843, "for": 509742, "retrieval_score": 19.02385}
{"snippet": "os.fchdir(fd)", "intent": "Change the current working directory to the directory represented by the file descriptor `fd` .", "question_id": 6844, "for": 509742, "retrieval_score": 18.947878}
{"snippet": "test.support.temp_cwd(name='tempcwd', quiet=False)", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory . If `quiet` is False and it is not possible to create or change the CWD , an error is raised .", "question_id": 10185, "for": 509742, "retrieval_score": 15.426182}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 509742, "retrieval_score": 15.232683}
{"snippet": "_thread.start_new_thread(function, args)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "question_id": 12944, "for": 817087, "retrieval_score": 14.508688}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "Call the `function` ( a function or method object , not a string ) with the given arguments . With arguments `*args`, `**kwds`.", "question_id": 7335, "for": 817087, "retrieval_score": 14.338477}
{"snippet": "bdb.runcall(func, *args, **kwds)", "intent": "Debug a single function call , and return its result . With arguments `func`, `*args`, `**kwds`.", "question_id": 816, "for": 817087, "retrieval_score": 14.08676}
{"snippet": "_thread.start_new_thread(function, args, kwargs)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "question_id": 12943, "for": 817087, "retrieval_score": 13.537975}
{"snippet": "breakpoint(*args, **kws)", "intent": "This function drops you into the debugger at the call site . With arguments `*args`, `**kws`.", "question_id": 3980, "for": 817087, "retrieval_score": 13.033266}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530, "for": 14745022, "retrieval_score": 14.110333}
{"snippet": "ProcessingInstruction.data", "intent": "The content of the processing instruction following the first whitespace character.", "question_id": 12379, "for": 14745022, "retrieval_score": 12.251752}
{"snippet": "ProcessingInstruction.target", "intent": "The content of the processing instruction up to the first whitespace character.", "question_id": 12378, "for": 14745022, "retrieval_score": 11.962683}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 14745022, "retrieval_score": 11.19754}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 14745022, "retrieval_score": 11.19754}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 14745022, "retrieval_score": 16.62676}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 14745022, "retrieval_score": 16.42268}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 14745022, "retrieval_score": 16.42268}
{"snippet": "bytearray.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9355, "for": 14745022, "retrieval_score": 16.42268}
{"snippet": "bytearray.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9356, "for": 14745022, "retrieval_score": 16.42268}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 2587402, "retrieval_score": 16.119665}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 2587402, "retrieval_score": 15.105415}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 2587402, "retrieval_score": 13.760636}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243, "for": 2587402, "retrieval_score": 13.016996}
{"snippet": "itertools.permutations(iterable)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5258, "for": 2587402, "retrieval_score": 13.016996}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 2587402, "retrieval_score": 15.794942}
{"snippet": "itertools.permutations(iterable)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5258, "for": 2587402, "retrieval_score": 15.720417}
{"snippet": "itertools.permutations(iterable, r=None)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5259, "for": 2587402, "retrieval_score": 15.720417}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 2587402, "retrieval_score": 14.087929}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 2587402, "retrieval_score": 13.994969}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 2587402, "retrieval_score": 14.031869}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 2587402, "retrieval_score": 14.031869}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947, "for": 2587402, "retrieval_score": 13.854074}
{"snippet": "NamedNodeMap.length", "intent": "The length of the attribute list.", "question_id": 12374, "for": 2587402, "retrieval_score": 13.7244625}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 2587402, "retrieval_score": 13.228891}
{"snippet": "Token.MISSING", "intent": "A marker object used by Token.old_value.", "question_id": 1647, "for": 19939084, "retrieval_score": 10.358235}
{"snippet": "memory_bio.write_eof()", "intent": "Write an EOF marker to the memory BIO .", "question_id": 9059, "for": 19939084, "retrieval_score": 9.818512}
{"snippet": "bz2_decompressor.eof", "intent": "True if the end-of-stream marker has been reached.", "question_id": 903, "for": 19939084, "retrieval_score": 9.332249}
{"snippet": "lzma_decompressor.eof", "intent": "True if the end-of-stream marker has been reached.", "question_id": 5701, "for": 19939084, "retrieval_score": 9.332249}
{"snippet": "signature.empty", "intent": "A special class-level marker to specify absence of a return annotation.", "question_id": 4983, "for": 19939084, "retrieval_score": 8.891876}
{"snippet": "locale.LC_ALL", "intent": "Combination of all locale settings.", "question_id": 5410, "for": 14931769, "retrieval_score": 15.570724}
{"snippet": "MON_1 ... MON_12", "intent": "Get the name of the n-th month.", "question_id": 5361, "for": 14931769, "retrieval_score": 12.95599}
{"snippet": "ABMON_1 ... ABMON_12", "intent": "Get the abbreviated name of the n-th month.", "question_id": 5362, "for": 14931769, "retrieval_score": 12.62702}
{"snippet": "DAY_1 ... DAY_7", "intent": "Get the name of the n-th day of the week.", "question_id": 5359, "for": 14931769, "retrieval_score": 12.333847}
{"snippet": "ABDAY_1 ... ABDAY_7", "intent": "Get the abbreviated name of the n-th day of the week.", "question_id": 5360, "for": 14931769, "retrieval_score": 12.055059}
{"snippet": "locale.LC_ALL", "intent": "Combination of all locale settings.", "question_id": 5410, "for": 14931769, "retrieval_score": 15.570724}
{"snippet": "MON_1 ... MON_12", "intent": "Get the name of the n-th month.", "question_id": 5361, "for": 14931769, "retrieval_score": 12.95599}
{"snippet": "ABMON_1 ... ABMON_12", "intent": "Get the abbreviated name of the n-th month.", "question_id": 5362, "for": 14931769, "retrieval_score": 12.62702}
{"snippet": "DAY_1 ... DAY_7", "intent": "Get the name of the n-th day of the week.", "question_id": 5359, "for": 14931769, "retrieval_score": 12.333847}
{"snippet": "ABDAY_1 ... ABDAY_7", "intent": "Get the abbreviated name of the n-th day of the week.", "question_id": 5360, "for": 14931769, "retrieval_score": 12.055059}
{"snippet": "locale.LC_ALL", "intent": "Combination of all locale settings.", "question_id": 5410, "for": 14931769, "retrieval_score": 15.570724}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372, "for": 14931769, "retrieval_score": 10.646975}
{"snippet": "datetime.datetime", "intent": "A combination of a date and a time.", "question_id": 2200, "for": 14931769, "retrieval_score": 10.427818}
{"snippet": "config_parser.get(section, option, raw=False)", "intent": "Get an `option` value for the named `section` . All the ' % ' interpolations are expanded in the return values , unless the `raw` argument is true .", "question_id": 1525, "for": 14931769, "retrieval_score": 10.099954}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038, "for": 14931769, "retrieval_score": 10.04195}
{"snippet": "locale.LC_ALL", "intent": "Combination of all locale settings.", "question_id": 5410, "for": 14931769, "retrieval_score": 15.570724}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372, "for": 14931769, "retrieval_score": 10.646975}
{"snippet": "datetime.datetime", "intent": "A combination of a date and a time.", "question_id": 2200, "for": 14931769, "retrieval_score": 10.427818}
{"snippet": "config_parser.get(section, option, raw=False)", "intent": "Get an `option` value for the named `section` . All the ' % ' interpolations are expanded in the return values , unless the `raw` argument is true .", "question_id": 1525, "for": 14931769, "retrieval_score": 10.099954}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038, "for": 14931769, "retrieval_score": 10.04195}
{"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931, "for": 20025882, "retrieval_score": 21.650135}
{"snippet": "re.MULTILINE", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7932, "for": 20025882, "retrieval_score": 21.650135}
{"snippet": "Pattern.match(string)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object .", "question_id": 7975, "for": 20025882, "retrieval_score": 13.778094}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939, "for": 20025882, "retrieval_score": 13.62007}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 20025882, "retrieval_score": 13.447555}
{"snippet": "somenamedtuple._asdict()", "intent": "Return a new dict which maps field names to their corresponding values :", "question_id": 1385, "for": 2553354, "retrieval_score": 22.969809}
{"snippet": "TarFile.getnames()", "intent": "Return the members as a list of their names .", "question_id": 9926, "for": 2553354, "retrieval_score": 22.257189}
{"snippet": "NNTP.getcapabilities()", "intent": "Return the RFC 3977 capabilities advertised by the server , as a dict instance mapping capability names to ( possibly empty ) lists of values .", "question_id": 6450, "for": 2553354, "retrieval_score": 17.269484}
{"snippet": "test.support.check__all__(test_case, module, blacklist=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `blacklist` argument can be a set of names that must not be treated as part of the public API even though their names indicate otherwise . With arguments `test_case`.", "question_id": 10280, "for": 2553354, "retrieval_score": 17.232765}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038, "for": 2553354, "retrieval_score": 17.026081}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842, "for": 42387471, "retrieval_score": 10.118949}
{"snippet": "DefaultCookiePolicy.strict_rfc2965_unverifiable", "intent": "Follow RFC 2965 rules on unverifiable transactions (usually, an unverifiable transaction is one resulting from a redirect or a request for an image hosted on another site).", "question_id": 4547, "for": 42387471, "retrieval_score": 10.032485}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757, "for": 42387471, "retrieval_score": 9.798446}
{"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042, "for": 42387471, "retrieval_score": 9.661301}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021, "for": 42387471, "retrieval_score": 9.641454}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 16734590, "retrieval_score": 21.39594}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745, "for": 16734590, "retrieval_score": 19.027}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 16734590, "retrieval_score": 16.633572}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 16734590, "retrieval_score": 13.312543}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319, "for": 16734590, "retrieval_score": 12.806215}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 575819, "retrieval_score": 24.15742}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 575819, "retrieval_score": 19.589859}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 575819, "retrieval_score": 15.050607}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 575819, "retrieval_score": 15.050607}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 575819, "retrieval_score": 14.431761}
{"snippet": "cgi.print_environ_usage()", "intent": "Print a list of useful ( used by CGI ) environment variables in HTML .", "question_id": 1056, "for": 29422691, "retrieval_score": 15.957455}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 29422691, "retrieval_score": 14.947643}
{"snippet": "config_parser.sections()", "intent": "Return a list of the sections available ; the default section is not included in the list .", "question_id": 1507, "for": 29422691, "retrieval_score": 14.08298}
{"snippet": "str.splitlines(keepends)", "intent": "Return a list of the lines in the string , breaking at line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9245, "for": 29422691, "retrieval_score": 12.646997}
{"snippet": "mock.call_args_list", "intent": "This is a list of all the calls made to the mock object in sequence (so the length of the list is the number of times it has been called).", "question_id": 11593, "for": 29422691, "retrieval_score": 12.608001}
{"snippet": "nis.cat(mapname, domain=default_domain)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value . The `domain` argument allows overriding the NIS domain used for the lookup .", "question_id": 6394, "for": 19745091, "retrieval_score": 15.188164}
{"snippet": "template.substitute(mapping, **kwds)", "intent": "Performs the template substitution , returning a new string . `mapping` is any dictionary-like object with keys that match the placeholders in the template . With arguments `**kwds`.", "question_id": 9526, "for": 19745091, "retrieval_score": 14.702948}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 19745091, "retrieval_score": 12.455594}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 19745091, "retrieval_score": 12.455594}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490, "for": 19745091, "retrieval_score": 12.176235}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 12897374, "retrieval_score": 14.599652}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 12897374, "retrieval_score": 14.599652}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843, "for": 12897374, "retrieval_score": 13.153552}
{"snippet": "Element.removeAttributeNode(oldAttr)", "intent": "Remove and return `oldAttr` from the attribute list , if present .", "question_id": 12364, "for": 12897374, "retrieval_score": 13.153552}
{"snippet": "mh_message.remove_sequence(sequence)", "intent": "Remove `sequence` from the list of sequences that include this message .", "question_id": 5837, "for": 12897374, "retrieval_score": 12.835707}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 12897374, "retrieval_score": 15.549962}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 12897374, "retrieval_score": 15.086827}
{"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617, "for": 12897374, "retrieval_score": 14.752117}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 12897374, "retrieval_score": 14.660501}
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925, "for": 12897374, "retrieval_score": 14.660501}
{"snippet": "cmath.exp(x)", "intent": "Return e raised to the power `x` , where e is the base of natural logarithms .", "question_id": 1096, "for": 15571267, "retrieval_score": 11.520247}
{"snippet": "math.exp(x)", "intent": "Return e raised to the power `x` , where e = 2.718281\u2026 is the base of natural logarithms .", "question_id": 5905, "for": 15571267, "retrieval_score": 11.339629}
{"snippet": "io.DEFAULT_BUFFER_SIZE", "intent": "An int containing the default buffer size used by the module\u2019s buffered I/O classes.", "question_id": 5050, "for": 15571267, "retrieval_score": 10.41293}
{"snippet": "math.log(x, base)", "intent": "With one argument , return the natural logarithm of `x` ( to `base` e ) .", "question_id": 5907, "for": 15571267, "retrieval_score": 9.900152}
{"snippet": "math.log(x)", "intent": "With one argument , return the natural logarithm of `x` ( to `base` e ) .", "question_id": 5908, "for": 15571267, "retrieval_score": 9.900152}
{"snippet": "auto.end", "intent": "The index after the last invalid data in object.", "question_id": 3678, "for": 7253803, "retrieval_score": 11.844538}
{"snippet": "turtle.end_fill()", "intent": "Fill the shape drawn after the last call to begin_fill ( ) .", "question_id": 10966, "for": 7253803, "retrieval_score": 11.551235}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494, "for": 7253803, "retrieval_score": 11.400324}
{"snippet": "faulthandler.dump_traceback_later(timeout)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True .", "question_id": 3722, "for": 7253803, "retrieval_score": 9.719841}
{"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True .", "question_id": 3723, "for": 7253803, "retrieval_score": 9.719841}
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106, "for": 7253803, "retrieval_score": 17.208805}
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695, "for": 7253803, "retrieval_score": 16.71014}
{"snippet": "controller.open_new(url)", "intent": "Open `url` in a new window of the browser handled by this controller , if possible , otherwise , open url in the only browser window .", "question_id": 12118, "for": 7253803, "retrieval_score": 16.52474}
{"snippet": "Request.get_full_url()", "intent": "Return the URL given in the constructor .", "question_id": 11829, "for": 7253803, "retrieval_score": 16.315676}
{"snippet": "auto.end", "intent": "The index after the last invalid data in object.", "question_id": 3678, "for": 7253803, "retrieval_score": 15.799517}
{"snippet": "UUID.version", "intent": "The UUID version number (1 through 5, meaningful only when the variant is RFC_4122).", "question_id": 11954, "for": 13223737, "retrieval_score": 12.031945}
{"snippet": "nntplib.NNTPProtocolError", "intent": "Exception raised when a reply is received from the server that does not begin with a digit in the range 1\u20135.", "question_id": 6444, "for": 13223737, "retrieval_score": 11.681165}
{"snippet": "bz2.BZ2File(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 889, "for": 13223737, "retrieval_score": 10.67732}
{"snippet": "bz2.BZ2File(filename, mode='r', compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 891, "for": 13223737, "retrieval_score": 10.67732}
{"snippet": "os.getloadavg()", "intent": "Return the number of processes in the system run queue averaged over the last 1 , 5 , and 15 minutes or raises OSError if the load average was unobtainable .", "question_id": 7118, "for": 13223737, "retrieval_score": 10.480705}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 5501641, "retrieval_score": 13.943773}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218, "for": 5501641, "retrieval_score": 12.826877}
{"snippet": "str.rstrip(chars)", "intent": "Return a copy of the string with trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9239, "for": 5501641, "retrieval_score": 12.826877}
{"snippet": "str.lstrip()", "intent": "Return a copy of the string with leading characters removed .", "question_id": 9219, "for": 5501641, "retrieval_score": 12.692218}
{"snippet": "str.rstrip()", "intent": "Return a copy of the string with trailing characters removed .", "question_id": 9240, "for": 5501641, "retrieval_score": 12.692218}
{"snippet": "Cmd.cmdqueue", "intent": "A list of queued input lines.", "question_id": 1148, "for": 33711985, "retrieval_score": 23.54134}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970, "for": 33711985, "retrieval_score": 20.250393}
{"snippet": "email_message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 3247, "for": 33711985, "retrieval_score": 20.250393}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 33711985, "retrieval_score": 19.941326}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 33711985, "retrieval_score": 19.761057}
{"snippet": "collections.OrderedDict()", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order .", "question_id": 1390, "for": 11351874, "retrieval_score": 11.013977}
{"snippet": "xmlrpc.client.dumps(params, methodresponse=None)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true .", "question_id": 12700, "for": 11351874, "retrieval_score": 10.971733}
{"snippet": "simple_http_request_handler.extensions_map", "intent": "A dictionary mapping suffixes into MIME types.", "question_id": 4662, "for": 11351874, "retrieval_score": 10.9406}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698, "for": 11351874, "retrieval_score": 10.905937}
{"snippet": "xmlrpc.client.dumps(params, methodname=None, methodresponse=None)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true . With arguments `methodname`.", "question_id": 12703, "for": 11351874, "retrieval_score": 10.39513}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 11351874, "retrieval_score": 20.862896}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 11351874, "retrieval_score": 19.132193}
{"snippet": "mailbox.iteritems()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5734, "for": 11351874, "retrieval_score": 18.570072}
{"snippet": "mailbox.items()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5735, "for": 11351874, "retrieval_score": 18.570072}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 11351874, "retrieval_score": 18.057177}
{"snippet": "os.getrandom(size)", "intent": "Get up to `size` random bytes .", "question_id": 7137, "for": 962619, "retrieval_score": 13.785933}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779, "for": 962619, "retrieval_score": 11.532513}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894, "for": 962619, "retrieval_score": 10.959577}
{"snippet": "queue_listener.filter(record)", "intent": "Applies this logger \u2019 s filters to the `record` and returns a true value if the record is to be processed .", "question_id": 5579, "for": 962619, "retrieval_score": 10.863398}
{"snippet": "queue_listener.filter(record)", "intent": "Applies this handler \u2019 s filters to the `record` and returns a true value if the record is to be processed .", "question_id": 5603, "for": 962619, "retrieval_score": 10.863398}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832, "for": 20796355, "retrieval_score": 31.033234}
{"snippet": "os.fchdir(fd)", "intent": "Change the current working directory to the directory represented by the file descriptor `fd` .", "question_id": 6844, "for": 20796355, "retrieval_score": 28.770668}
{"snippet": "simple_http_request_handler.directory", "intent": "If not specified, the directory to serve is the current working directory.", "question_id": 4663, "for": 20796355, "retrieval_score": 23.470324}
{"snippet": "test.support.temp_cwd(name='tempcwd', quiet=False)", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory . If `quiet` is False and it is not possible to create or change the CWD , an error is raised .", "question_id": 10185, "for": 20796355, "retrieval_score": 23.29852}
{"snippet": "TarFile.extractall()", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9932, "for": 20796355, "retrieval_score": 22.590796}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832, "for": 20796355, "retrieval_score": 24.65792}
{"snippet": "os.fchdir(fd)", "intent": "Change the current working directory to the directory represented by the file descriptor `fd` .", "question_id": 6844, "for": 20796355, "retrieval_score": 22.084906}
{"snippet": "test.support.temp_cwd(name='tempcwd', quiet=False)", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory . If `quiet` is False and it is not possible to create or change the CWD , an error is raised .", "question_id": 10185, "for": 20796355, "retrieval_score": 17.48439}
{"snippet": "os.getcwd()", "intent": "Return a string representing the current working directory .", "question_id": 6845, "for": 20796355, "retrieval_score": 16.869621}
{"snippet": "os.getcwdb()", "intent": "Return a bytestring representing the current working directory .", "question_id": 6846, "for": 20796355, "retrieval_score": 16.869621}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832, "for": 20796355, "retrieval_score": 24.65792}
{"snippet": "os.fchdir(fd)", "intent": "Change the current working directory to the directory represented by the file descriptor `fd` .", "question_id": 6844, "for": 20796355, "retrieval_score": 22.084906}
{"snippet": "test.support.temp_cwd(name='tempcwd', quiet=False)", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory . If `quiet` is False and it is not possible to create or change the CWD , an error is raised .", "question_id": 10185, "for": 20796355, "retrieval_score": 17.48439}
{"snippet": "os.getcwd()", "intent": "Return a string representing the current working directory .", "question_id": 6845, "for": 20796355, "retrieval_score": 16.869621}
{"snippet": "os.getcwdb()", "intent": "Return a bytestring representing the current working directory .", "question_id": 6846, "for": 20796355, "retrieval_score": 16.869621}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 974678, "retrieval_score": 25.016624}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 974678, "retrieval_score": 25.016624}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 974678, "retrieval_score": 23.076923}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 974678, "retrieval_score": 21.128822}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 974678, "retrieval_score": 19.813574}
{"snippet": "tracemalloc.Traceback", "intent": "Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "question_id": 10894, "for": 17618981, "retrieval_score": 11.169165}
{"snippet": "bdb.set_trace(frame)", "intent": "Start debugging from `frame` .", "question_id": 789, "for": 17618981, "retrieval_score": 10.963014}
{"snippet": "bdb.set_trace()", "intent": "Start debugging from `frame` .", "question_id": 790, "for": 17618981, "retrieval_score": 10.963014}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997, "for": 17618981, "retrieval_score": 10.206876}
{"snippet": "bdb.set_return(frame)", "intent": "Stop when returning from the given `frame` .", "question_id": 787, "for": 17618981, "retrieval_score": 10.08324}
{"snippet": "float.fromhex(s)", "intent": "Class method to return the float represented by a hexadecimal string s. The string `s` may have leading and trailing whitespace .", "question_id": 9150, "for": 4004550, "retrieval_score": 13.611889}
{"snippet": "netrc.macros", "intent": "Dictionary mapping macro names to string lists.", "question_id": 6390, "for": 4004550, "retrieval_score": 11.320744}
{"snippet": "loop.time()", "intent": "Return the current time , as a float value , according to the event loop \u2019 s internal monotonic clock .", "question_id": 197, "for": 4004550, "retrieval_score": 10.244982}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154, "for": 4004550, "retrieval_score": 10.106783}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 4004550, "retrieval_score": 9.87748}
{"snippet": "float.fromhex(s)", "intent": "Class method to return the float represented by a hexadecimal string s. The string `s` may have leading and trailing whitespace .", "question_id": 9150, "for": 4004550, "retrieval_score": 13.611889}
{"snippet": "netrc.macros", "intent": "Dictionary mapping macro names to string lists.", "question_id": 6390, "for": 4004550, "retrieval_score": 11.320744}
{"snippet": "loop.time()", "intent": "Return the current time , as a float value , according to the event loop \u2019 s internal monotonic clock .", "question_id": 197, "for": 4004550, "retrieval_score": 10.244982}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154, "for": 4004550, "retrieval_score": 10.106783}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 4004550, "retrieval_score": 9.87748}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 10839719, "retrieval_score": 22.374426}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841, "for": 10839719, "retrieval_score": 19.215223}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 10839719, "retrieval_score": 17.811144}
{"snippet": "babyl_message.get_labels()", "intent": "Return a list of labels on the message .", "question_id": 5840, "for": 10839719, "retrieval_score": 13.997827}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842, "for": 10839719, "retrieval_score": 13.304583}
{"snippet": "io_base.readline()", "intent": "Read and return one line from the stream .", "question_id": 5070, "for": 1450393, "retrieval_score": 17.321156}
{"snippet": "stream_reader.readline()", "intent": "Read one line from the input stream and return the decoded data .", "question_id": 1292, "for": 1450393, "retrieval_score": 15.686448}
{"snippet": "window.getstr()", "intent": "Read a bytes object from the user , with primitive line editing capacity .", "question_id": 2059, "for": 1450393, "retrieval_score": 15.686448}
{"snippet": "fileinput.isstdin()", "intent": "Returns true if the last line was read from sys.stdin , otherwise returns false .", "question_id": 3797, "for": 1450393, "retrieval_score": 15.324872}
{"snippet": "fileinput.nextfile()", "intent": "Close the current file so that the next iteration will read the first line from the next file ( if any ) ; lines not read from the file will not count towards the cumulative line count .", "question_id": 3798, "for": 1450393, "retrieval_score": 15.152261}
{"snippet": "io_base.readline()", "intent": "Read and return one line from the stream .", "question_id": 5070, "for": 1450393, "retrieval_score": 17.321156}
{"snippet": "stream_reader.readline()", "intent": "Read one line from the input stream and return the decoded data .", "question_id": 1292, "for": 1450393, "retrieval_score": 15.686448}
{"snippet": "window.getstr()", "intent": "Read a bytes object from the user , with primitive line editing capacity .", "question_id": 2059, "for": 1450393, "retrieval_score": 15.686448}
{"snippet": "fileinput.isstdin()", "intent": "Returns true if the last line was read from sys.stdin , otherwise returns false .", "question_id": 3797, "for": 1450393, "retrieval_score": 15.324872}
{"snippet": "fileinput.nextfile()", "intent": "Close the current file so that the next iteration will read the first line from the next file ( if any ) ; lines not read from the file will not count towards the cumulative line count .", "question_id": 3798, "for": 1450393, "retrieval_score": 15.152261}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 8214932, "retrieval_score": 16.915388}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 8214932, "retrieval_score": 15.730812}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 8214932, "retrieval_score": 14.527619}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 8214932, "retrieval_score": 13.893294}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 8214932, "retrieval_score": 13.346629}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 8214932, "retrieval_score": 14.9379}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 8214932, "retrieval_score": 13.893294}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 8214932, "retrieval_score": 13.893294}
{"snippet": "widget.set(item)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` .", "question_id": 10658, "for": 8214932, "retrieval_score": 13.004067}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 8214932, "retrieval_score": 12.994127}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126, "for": 12557612, "retrieval_score": 13.210084}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127, "for": 12557612, "retrieval_score": 13.210084}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142, "for": 12557612, "retrieval_score": 12.61023}
{"snippet": "widget.next(item)", "intent": "Returns the identifier of `item` \u2019 s next sibling , or \u2018 \u2019 if item is the last child of its parent .", "question_id": 10645, "for": 12557612, "retrieval_score": 12.587385}
{"snippet": "widget.prev(item)", "intent": "Returns the identifier of `item` \u2019 s previous sibling , or \u2018 \u2019 if item is the first child of its parent .", "question_id": 10647, "for": 12557612, "retrieval_score": 12.587385}
{"snippet": "context.compare_total(x, y)", "intent": "Compares two operands using their abstract representation . With arguments `x`, `y`.", "question_id": 2522, "for": 15183084, "retrieval_score": 19.222855}
{"snippet": "context.compare_total_mag(x, y)", "intent": "Compares two operands using their abstract representation , ignoring sign . With arguments `x`, `y`.", "question_id": 2523, "for": 15183084, "retrieval_score": 18.336672}
{"snippet": "context.compare_signal(x, y)", "intent": "Compares the values of the two operands numerically . With arguments `x`, `y`.", "question_id": 2521, "for": 15183084, "retrieval_score": 15.054787}
{"snippet": "context.max(x, y)", "intent": "Compares two values numerically and returns the maximum . With arguments `x`, `y`.", "question_id": 2549, "for": 15183084, "retrieval_score": 15.054787}
{"snippet": "context.min(x, y)", "intent": "Compares two values numerically and returns the minimum . With arguments `x`, `y`.", "question_id": 2551, "for": 15183084, "retrieval_score": 15.054787}
{"snippet": "plistlib.dump(value, fp, sort_keys=True)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . With arguments `fp`.", "question_id": 7565, "for": 10915391, "retrieval_score": 15.333334}
{"snippet": "plistlib.dump(value, fp, fmt=FMT_XML, sort_keys=True)", "intent": "Write `value` to a plist file . The `fmt` argument specifies the format of the plist file and can be one of the following values : When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . With arguments `fp`.", "question_id": 7567, "for": 10915391, "retrieval_score": 15.311338}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds)", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "question_id": 1702, "for": 10915391, "retrieval_score": 14.486321}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "question_id": 1703, "for": 10915391, "retrieval_score": 14.486321}
{"snippet": "plistlib.dump(value, fp, fmt=FMT_XML, sort_keys=True, skipkeys=False)", "intent": "Write `value` to a plist file . The `fmt` argument specifies the format of the plist file and can be one of the following values : When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . When `skipkeys` is false ( the default ) the function raises TypeError when a key of a dictionary is not a string , otherwise such keys are skipped . With arguments `fp`.", "question_id": 7570, "for": 10915391, "retrieval_score": 14.464062}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271, "for": 10915391, "retrieval_score": 14.075709}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 10915391, "retrieval_score": 13.972804}
{"snippet": "pwd.getpwall()", "intent": "Return a list of all available password database entries , in arbitrary order .", "question_id": 7705, "for": 10915391, "retrieval_score": 13.743606}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 10915391, "retrieval_score": 13.606929}
{"snippet": "spwd.getspall()", "intent": "Return a list of all available shadow password database entries , in arbitrary order .", "question_id": 8790, "for": 10915391, "retrieval_score": 13.426812}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518, "for": 39159475, "retrieval_score": 10.679903}
{"snippet": "inspect.currentframe()", "intent": "Return the frame object for the caller \u2019 s stack frame .", "question_id": 5029, "for": 39159475, "retrieval_score": 10.043025}
{"snippet": "patch.multiple(target, **kwargs, create=False)", "intent": "Perform multiple patches in a single call . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11634, "for": 39159475, "retrieval_score": 10.007958}
{"snippet": "SSLContext.verify_flags", "intent": "The flags for certificate verification operations.", "question_id": 9050, "for": 39159475, "retrieval_score": 9.937185}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 39159475, "retrieval_score": 9.647617}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 20585920, "retrieval_score": 31.850353}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 20585920, "retrieval_score": 31.850353}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 20585920, "retrieval_score": 28.841934}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 20585920, "retrieval_score": 28.767105}
{"snippet": "nis.cat(mapname, domain=default_domain)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value . The `domain` argument allows overriding the NIS domain used for the lookup .", "question_id": 6394, "for": 20585920, "retrieval_score": 26.766241}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 11692613, "retrieval_score": 18.27185}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 11692613, "retrieval_score": 17.255325}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 11692613, "retrieval_score": 16.931786}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 11692613, "retrieval_score": 16.73487}
{"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326, "for": 11692613, "retrieval_score": 15.790332}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 11692613, "retrieval_score": 22.33896}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 11692613, "retrieval_score": 22.009}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 11692613, "retrieval_score": 21.443722}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 11692613, "retrieval_score": 21.421288}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 11692613, "retrieval_score": 21.349178}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 11692613, "retrieval_score": 16.246168}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 11692613, "retrieval_score": 15.987183}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 11692613, "retrieval_score": 14.527619}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970, "for": 11692613, "retrieval_score": 14.454545}
{"snippet": "email_message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 3247, "for": 11692613, "retrieval_score": 14.454545}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 2918362, "retrieval_score": 16.859377}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126, "for": 2918362, "retrieval_score": 14.528609}
{"snippet": "Path.write_text(data)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file :", "question_id": 7323, "for": 2918362, "retrieval_score": 14.498943}
{"snippet": "Path.write_text(data, encoding=None)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file : With arguments `encoding`.", "question_id": 7324, "for": 2918362, "retrieval_score": 13.734935}
{"snippet": "Path.write_text(data, errors=None)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file : With arguments `errors`.", "question_id": 7325, "for": 2918362, "retrieval_score": 13.734935}
{"snippet": "zipfile.ZipFile(file, mode='r')", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file .", "question_id": 12793, "for": 2918362, "retrieval_score": 19.189144}
{"snippet": "warnings.showwarning(message, category, filename, lineno)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12017, "for": 2918362, "retrieval_score": 19.149082}
{"snippet": "warnings.showwarning(message, category, filename, lineno, file=None)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12018, "for": 2918362, "retrieval_score": 19.149082}
{"snippet": "warnings.showwarning(message, category, filename, lineno, line=None)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12019, "for": 2918362, "retrieval_score": 19.149082}
{"snippet": "warnings.showwarning(message, category, filename, lineno, file=None, line=None)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12020, "for": 2918362, "retrieval_score": 19.149082}
{"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040, "for": 14358567, "retrieval_score": 13.867768}
{"snippet": "sys._getframe()", "intent": "Return a frame object from the call stack .", "question_id": 9806, "for": 14358567, "retrieval_score": 12.456394}
{"snippet": "bdb.set_trace()", "intent": "Start debugging with a Bdb instance from caller \u2019 s frame .", "question_id": 819, "for": 14358567, "retrieval_score": 11.839489}
{"snippet": "itertools.groupby(iterable, key=None)", "intent": "Make an iterator that returns consecutive keys and groups from the `iterable` . The `key` is a function computing a key value for each element .", "question_id": 5254, "for": 14358567, "retrieval_score": 11.527404}
{"snippet": "itertools.groupby(iterable)", "intent": "Make an iterator that returns consecutive keys and groups from the `iterable` .", "question_id": 5253, "for": 14358567, "retrieval_score": 11.452003}
{"snippet": "os.stat(path)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` .", "question_id": 6917, "for": 1270951, "retrieval_score": 15.200933}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152, "for": 1270951, "retrieval_score": 15.010022}
{"snippet": "os.startfile(path)", "intent": "Start a file with its associated application . The `path` parameter is relative to the current directory .", "question_id": 7067, "for": 1270951, "retrieval_score": 14.520072}
{"snippet": "os.stat(path, dir_fd=None)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` . With arguments `dir_fd`.", "question_id": 6918, "for": 1270951, "retrieval_score": 14.515158}
{"snippet": "os.stat(path, follow_symlinks=True)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` . With arguments `follow_symlinks`.", "question_id": 6919, "for": 1270951, "retrieval_score": 14.515158}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464, "for": 59825, "retrieval_score": 14.820736}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217, "for": 59825, "retrieval_score": 14.366347}
{"snippet": "set.pop()", "intent": "Remove and return an arbitrary element from the set .", "question_id": 9465, "for": 59825, "retrieval_score": 14.260256}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463, "for": 59825, "retrieval_score": 12.833258}
{"snippet": "set -= other | ...", "intent": "Update the set, removing elements found in others.", "question_id": 9459, "for": 59825, "retrieval_score": 12.745071}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068, "for": 5486725, "retrieval_score": 21.076437}
{"snippet": "FTP.mlsd()", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) .", "question_id": 3947, "for": 5486725, "retrieval_score": 20.10191}
{"snippet": "FTP.mlsd()", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) .", "question_id": 3951, "for": 5486725, "retrieval_score": 20.10191}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955, "for": 5486725, "retrieval_score": 19.357601}
{"snippet": "FTP.dir()", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output .", "question_id": 3958, "for": 5486725, "retrieval_score": 19.078636}
{"snippet": "turtle.resizemode()", "intent": "Set resizemode to one of the values : \u201c auto \u201d , \u201c user \u201d , \u201c noresize \u201d .", "question_id": 10984, "for": 5218948, "retrieval_score": 11.844842}
{"snippet": "Node.appendChild(newChild)", "intent": "Add a new child node to this node at the end of the list of children , returning `newChild` .", "question_id": 12330, "for": 5218948, "retrieval_score": 11.735999}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489, "for": 5218948, "retrieval_score": 11.71925}
{"snippet": "window.clrtobot()", "intent": "Erase from cursor to the end of the window : all lines below the cursor are deleted , and then the equivalent of clrtoeol ( ) is performed .", "question_id": 2036, "for": 5218948, "retrieval_score": 11.258193}
{"snippet": "window.syncup()", "intent": "Touch all locations in ancestors of the window that have been changed in the window .", "question_id": 2123, "for": 5218948, "retrieval_score": 10.715168}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 9542738, "retrieval_score": 21.790228}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 9542738, "retrieval_score": 20.061098}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 9542738, "retrieval_score": 20.061098}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 9542738, "retrieval_score": 17.498075}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392, "for": 9542738, "retrieval_score": 17.330652}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 10541640, "retrieval_score": 32.81646}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 10541640, "retrieval_score": 27.084167}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 10541640, "retrieval_score": 20.229633}
{"snippet": "shlex.error_leader()", "intent": "This method generates an error message leader in the format of a Unix C compiler error label ; the format is ' '' % s '' , line % d : ' , where the % s is replaced with the name of the current source file and the % d with the current input line number ( the optional arguments can be used to override these ) .", "question_id": 8290, "for": 10541640, "retrieval_score": 19.977083}
{"snippet": "shlex.error_leader(infile=None)", "intent": "This method generates an error message leader in the format of a Unix C compiler error label ; the format is ' '' % s '' , line % d : ' , where the % s is replaced with the name of the current source file and the % d with the current input line number ( the optional arguments can be used to override these ) . With arguments `infile`.", "question_id": 8291, "for": 10541640, "retrieval_score": 19.859772}
{"snippet": "ast.literal_eval(node_or_string)", "intent": "Safely evaluate an expression node or a string containing a Python literal or container display . With arguments `node_or_string`.", "question_id": 149, "for": 7262828, "retrieval_score": 21.982237}
{"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606, "for": 7262828, "retrieval_score": 20.119215}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 7262828, "retrieval_score": 16.812422}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 7262828, "retrieval_score": 16.627949}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 7262828, "retrieval_score": 15.97921}
{"snippet": "aifc.getparams()", "intent": "Returns a namedtuple ( ) ( nchannels , sampwidth , framerate , nframes , comptype , compname ) , equivalent to output of the get* ( ) methods .", "question_id": 17, "for": 6086047, "retrieval_score": 9.903741}
{"snippet": "AU_read.getparams()", "intent": "Returns a namedtuple ( ) ( nchannels , sampwidth , framerate , nframes , comptype , compname ) , equivalent to output of the get* ( ) methods .", "question_id": 9714, "for": 6086047, "retrieval_score": 9.903741}
{"snippet": "Wave_read.getparams()", "intent": "Returns a namedtuple ( ) ( nchannels , sampwidth , framerate , nframes , comptype , compname ) , equivalent to output of the get* ( ) methods .", "question_id": 12057, "for": 6086047, "retrieval_score": 9.903741}
{"snippet": "Telnet.set_debuglevel(debuglevel)", "intent": "Set the debug level . The higher the value of `debuglevel` , the more debug output you get ( on sys.stdout ) .", "question_id": 10023, "for": 6086047, "retrieval_score": 9.494356}
{"snippet": "SSLContext.get_ca_certs(binary_form=False)", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "question_id": 9012, "for": 6086047, "retrieval_score": 8.493552}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745, "for": 41946927, "retrieval_score": 20.256033}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 41946927, "retrieval_score": 18.666151}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 41946927, "retrieval_score": 17.184578}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027, "for": 41946927, "retrieval_score": 16.55801}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026, "for": 41946927, "retrieval_score": 16.26224}
{"snippet": "mock.mock_calls", "intent": "mock_calls records all calls to the mock object, its methods, magic methods and return value mocks.", "question_id": 11595, "for": 21164910, "retrieval_score": 17.235514}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797, "for": 21164910, "retrieval_score": 16.533785}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063, "for": 21164910, "retrieval_score": 15.799865}
{"snippet": "maildir.clean()", "intent": "Delete temporary files from the mailbox that have not been accessed in the last 36 hours .", "question_id": 5762, "for": 21164910, "retrieval_score": 14.400879}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386, "for": 21164910, "retrieval_score": 14.379155}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 20183069, "retrieval_score": 13.699614}
{"snippet": "array.pop()", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 133, "for": 20183069, "retrieval_score": 13.699614}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 20183069, "retrieval_score": 11.279507}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 20183069, "retrieval_score": 11.279507}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 20183069, "retrieval_score": 10.876655}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 9905471, "retrieval_score": 14.226059}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 9905471, "retrieval_score": 13.389379}
{"snippet": "re.split(pattern, string, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . With arguments `flags`.", "question_id": 7945, "for": 9905471, "retrieval_score": 12.3947115}
{"snippet": "re.split(pattern, string, maxsplit=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list .", "question_id": 7944, "for": 9905471, "retrieval_score": 11.594832}
{"snippet": "shlex.split(s, posix=True)", "intent": "Split the string `s` using shell-like syntax . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8270, "for": 9905471, "retrieval_score": 11.35789}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 9089043, "retrieval_score": 18.742565}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 9089043, "retrieval_score": 17.723608}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 9089043, "retrieval_score": 17.394878}
{"snippet": "Packer.pack_array(list, pack_item)", "intent": "Packs a variable length `list` of homogeneous items . With arguments `pack_item`.", "question_id": 12284, "for": 9089043, "retrieval_score": 17.23123}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 9089043, "retrieval_score": 16.974876}
{"snippet": "FTP.retrlines(cmd, callback=None)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) . The `callback` function is called for each line with a string argument containing the line with the trailing CRLF stripped .", "question_id": 3931, "for": 3820312, "retrieval_score": 14.223462}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762, "for": 3820312, "retrieval_score": 14.135842}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850, "for": 3820312, "retrieval_score": 14.004937}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154, "for": 3820312, "retrieval_score": 13.940712}
{"snippet": "test.support.create_empty_file(filename)", "intent": "Create an empty file with `filename` .", "question_id": 10153, "for": 3820312, "retrieval_score": 13.875458}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 17407691, "retrieval_score": 13.020358}
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925, "for": 17407691, "retrieval_score": 13.020358}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427, "for": 17407691, "retrieval_score": 12.794014}
{"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564, "for": 17407691, "retrieval_score": 11.70739}
{"snippet": "urllib.request.urlretrieve(url)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11881, "for": 17407691, "retrieval_score": 11.48049}
{"snippet": "gzip.open(filename)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4272, "for": 8369219, "retrieval_score": 13.212468}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273, "for": 8369219, "retrieval_score": 13.212468}
{"snippet": "xml.dom.DomstringSizeErr", "intent": "Raised when a specified range of text does not fit into a string.", "question_id": 12381, "for": 8369219, "retrieval_score": 13.134542}
{"snippet": "typing.AnyStr", "intent": "AnyStr is a type variable defined as AnyStr = TypeVar('AnyStr', str, bytes).", "question_id": 11338, "for": 8369219, "retrieval_score": 12.559088}
{"snippet": "os.readv(fd, buffers)", "intent": "Read from a file descriptor `fd` into a number of mutable bytes-like objects `buffers` .", "question_id": 6805, "for": 8369219, "retrieval_score": 12.393984}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 33680914, "retrieval_score": 19.419611}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 33680914, "retrieval_score": 19.08865}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 33680914, "retrieval_score": 19.08865}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939, "for": 33680914, "retrieval_score": 19.08865}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 33680914, "retrieval_score": 19.08865}
{"snippet": "fileinput.isfirstline()", "intent": "Returns true if the line just read is the first line of its file , otherwise returns false .", "question_id": 3796, "for": 3277503, "retrieval_score": 16.365747}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762, "for": 3277503, "retrieval_score": 15.939212}
{"snippet": "stream_reader.readline()", "intent": "Read one line , where \u201c line \u201d is a sequence of bytes ending with \\n .", "question_id": 506, "for": 3277503, "retrieval_score": 15.819489}
{"snippet": "InteractiveConsole.raw_input()", "intent": "Write a `prompt` and read a line .", "question_id": 1190, "for": 3277503, "retrieval_score": 15.701484}
{"snippet": "InteractiveConsole.raw_input(prompt=\"\")", "intent": "Write a `prompt` and read a line .", "question_id": 1191, "for": 3277503, "retrieval_score": 15.701484}
{"snippet": "fileinput.nextfile()", "intent": "Close the current file so that the next iteration will read the first line from the next file ( if any ) ; lines not read from the file will not count towards the cumulative line count .", "question_id": 3798, "for": 3277503, "retrieval_score": 18.869314}
{"snippet": "window.insdelln(nlines)", "intent": "Insert `nlines` lines into the specified window above the current line .", "question_id": 2075, "for": 3277503, "retrieval_score": 18.34721}
{"snippet": "inspect.getsourcelines(object)", "intent": "Return a list of source lines and starting line number for an `object` .", "question_id": 4974, "for": 3277503, "retrieval_score": 17.895025}
{"snippet": "str.splitlines()", "intent": "Return a list of the lines in the string , breaking at line boundaries .", "question_id": 9246, "for": 3277503, "retrieval_score": 17.895025}
{"snippet": "warnings.formatwarning(message, category, filename, lineno)", "intent": "Format a warning the standard way . `line` is a line of source code to be included in the warning `message` ; if line is not supplied , formatwarning ( ) will try to read the line specified by `filename` and `lineno` . With arguments `category`.", "question_id": 12021, "for": 3277503, "retrieval_score": 17.629213}
{"snippet": "fileinput.nextfile()", "intent": "Close the current file so that the next iteration will read the first line from the next file ( if any ) ; lines not read from the file will not count towards the cumulative line count .", "question_id": 3798, "for": 3277503, "retrieval_score": 18.869314}
{"snippet": "window.insdelln(nlines)", "intent": "Insert `nlines` lines into the specified window above the current line .", "question_id": 2075, "for": 3277503, "retrieval_score": 18.34721}
{"snippet": "inspect.getsourcelines(object)", "intent": "Return a list of source lines and starting line number for an `object` .", "question_id": 4974, "for": 3277503, "retrieval_score": 17.895025}
{"snippet": "str.splitlines()", "intent": "Return a list of the lines in the string , breaking at line boundaries .", "question_id": 9246, "for": 3277503, "retrieval_score": 17.895025}
{"snippet": "warnings.formatwarning(message, category, filename, lineno)", "intent": "Format a warning the standard way . `line` is a line of source code to be included in the warning `message` ; if line is not supplied , formatwarning ( ) will try to read the line specified by `filename` and `lineno` . With arguments `category`.", "question_id": 12021, "for": 3277503, "retrieval_score": 17.629213}
{"snippet": "fileinput.isfirstline()", "intent": "Returns true if the line just read is the first line of its file , otherwise returns false .", "question_id": 3796, "for": 3277503, "retrieval_score": 18.660694}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762, "for": 3277503, "retrieval_score": 18.56689}
{"snippet": "fileinput.nextfile()", "intent": "Close the current file so that the next iteration will read the first line from the next file ( if any ) ; lines not read from the file will not count towards the cumulative line count .", "question_id": 3798, "for": 3277503, "retrieval_score": 18.302935}
{"snippet": "html_diff.make_file(fromlines, tolines)", "intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML file containing a table showing line by line differences with inter-line and intra-line changes highlighted .", "question_id": 2608, "for": 3277503, "retrieval_score": 16.723063}
{"snippet": "difflib.HtmlDiff", "intent": "This class can be used to create an HTML table (or a complete HTML file containing the table) showing a side by side, line by line comparison of text with inter-line and intra-line change highlights.", "question_id": 2597, "for": 3277503, "retrieval_score": 16.69422}
{"snippet": "sqlite3.register_adapter(type, callable)", "intent": "Registers a `callable` to convert the custom Python `type` type into one of SQLite \u2019 s supported types .", "question_id": 8800, "for": 17134716, "retrieval_score": 17.04313}
{"snippet": "typing.Pattern", "intent": "These type aliases correspond to the return types from re.compile() and re.match().", "question_id": 11318, "for": 17134716, "retrieval_score": 16.415476}
{"snippet": "typing.Match", "intent": "These type aliases correspond to the return types from re.compile() and re.match().", "question_id": 11319, "for": 17134716, "retrieval_score": 16.415476}
{"snippet": "_func_ptr.argtypes", "intent": "Assign a tuple of ctypes types to specify the argument types that the function accepts.", "question_id": 1788, "for": 17134716, "retrieval_score": 16.413248}
{"snippet": "mime_types.types_map", "intent": "Tuple containing two dictionaries, mapping filename extensions to MIME types: the first dictionary is for the non-standards types and the second one is for the standard types.", "question_id": 5962, "for": 17134716, "retrieval_score": 15.918681}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 41251391, "retrieval_score": 27.306227}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643, "for": 41251391, "retrieval_score": 21.877485}
{"snippet": "dict.keys()", "intent": "Return a new view of the dictionary \u2019 s keys .", "question_id": 9485, "for": 41251391, "retrieval_score": 21.2555}
{"snippet": "plistlib.dump(value, fp, sort_keys=True, skipkeys=False)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . When `skipkeys` is false ( the default ) the function raises TypeError when a key of a dictionary is not a string , otherwise such keys are skipped . With arguments `fp`.", "question_id": 7569, "for": 41251391, "retrieval_score": 20.776213}
{"snippet": "plistlib.dump(value, fp, sort_keys=True)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . With arguments `fp`.", "question_id": 7565, "for": 41251391, "retrieval_score": 19.785494}
{"snippet": "queue_listener.emit(record)", "intent": "Do whatever it takes to actually log the specified logging `record` .", "question_id": 5609, "for": 7173850, "retrieval_score": 17.107483}
{"snippet": "message.as_string(maxheaderlen=0)", "intent": "Return the entire message flattened as a string . For backward compatibility reasons , `maxheaderlen` defaults to 0 , so if you want a different value you must override it explicitly ( the value specified for max_line_length in the `policy` will be ignored by this method ) .", "question_id": 2940, "for": 7173850, "retrieval_score": 15.787574}
{"snippet": "message.as_string(policy=None)", "intent": "Return the entire message flattened as a string . For backward compatibility reasons , `maxheaderlen` defaults to 0 , so if you want a different value you must override it explicitly ( the value specified for max_line_length in the `policy` will be ignored by this method ) .", "question_id": 2941, "for": 7173850, "retrieval_score": 15.787574}
{"snippet": "message.as_string(maxheaderlen=0, policy=None)", "intent": "Return the entire message flattened as a string . For backward compatibility reasons , `maxheaderlen` defaults to 0 , so if you want a different value you must override it explicitly ( the value specified for max_line_length in the `policy` will be ignored by this method ) .", "question_id": 2944, "for": 7173850, "retrieval_score": 15.787574}
{"snippet": "POP3.noop()", "intent": "Do nothing .", "question_id": 7614, "for": 7173850, "retrieval_score": 15.764212}
{"snippet": "stream_reader.readuntil()", "intent": "Read data from the stream until `separator` is found .", "question_id": 508, "for": 41386443, "retrieval_score": 14.988405}
{"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509, "for": 41386443, "retrieval_score": 14.988405}
{"snippet": "test.support.create_empty_file(filename)", "intent": "Create an empty file with `filename` .", "question_id": 10153, "for": 41386443, "retrieval_score": 13.875458}
{"snippet": "traceback.FrameSummary(filename, lineno, name)", "intent": "Represent a single frame in the traceback or stack that is being formatted or printed . With arguments `filename`, `lineno`, `name`.", "question_id": 10833, "for": 41386443, "retrieval_score": 12.452225}
{"snippet": "FileCookieJar.load(filename=None)", "intent": "Load cookies from a file . With arguments `filename`.", "question_id": 4507, "for": 41386443, "retrieval_score": 12.131811}
{"snippet": "sys.float_repr_style", "intent": "A string indicating how the repr() function behaves for floats.", "question_id": 9792, "for": 34962104, "retrieval_score": 12.866106}
{"snippet": "functools.reduce(function, iterable)", "intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . With arguments `iterable`.", "question_id": 4154, "for": 34962104, "retrieval_score": 12.853038}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663, "for": 34962104, "retrieval_score": 12.091604}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664, "for": 34962104, "retrieval_score": 12.091604}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661, "for": 34962104, "retrieval_score": 11.342357}
{"snippet": "platform.system()", "intent": "Returns the system/OS name , e.g .", "question_id": 7481, "for": 30015665, "retrieval_score": 11.566004}
{"snippet": "platform.linux_distribution('debian', 'redhat', 'mandrake', ...), full_distribution_name=1)", "intent": "Tries to determine the name of the Linux OS distribution name . If `full_distribution_name` is true ( default ) , the full distribution read from the OS is returned . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`.", "question_id": 7532, "for": 30015665, "retrieval_score": 10.156139}
{"snippet": "platform.linux_distribution('debian', 'redhat', 'mandrake', ...))", "intent": "Tries to determine the name of the Linux OS distribution name . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`.", "question_id": 7527, "for": 30015665, "retrieval_score": 10.126096}
{"snippet": "platform.win32_ver()", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7495, "for": 30015665, "retrieval_score": 10.013497}
{"snippet": "platform.win32_ver(release='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7496, "for": 30015665, "retrieval_score": 10.013497}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 17474211, "retrieval_score": 16.374033}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941, "for": 17474211, "retrieval_score": 13.409808}
{"snippet": "mimetypes.guess_extension(type)", "intent": "Guess the extension for a file based on its MIME `type` , given by type .", "question_id": 5943, "for": 17474211, "retrieval_score": 13.409808}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 17474211, "retrieval_score": 13.114329}
{"snippet": "zipfile.is_zipfile(filename)", "intent": "Returns True if `filename` is a valid ZIP file based on its magic number , otherwise returns False .", "question_id": 12787, "for": 17474211, "retrieval_score": 12.560789}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 6633678, "retrieval_score": 12.530897}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 6633678, "retrieval_score": 12.530897}
{"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241, "for": 6633678, "retrieval_score": 12.530897}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242, "for": 6633678, "retrieval_score": 12.530897}
{"snippet": "text_wrapper.break_on_hyphens", "intent": "(default: True) If true, wrapping will occur preferably on whitespaces and right after hyphens in compound words, as it is customary in English.", "question_id": 10336, "for": 6633678, "retrieval_score": 12.488783}
{"snippet": "gc.set_threshold(threshold0)", "intent": "Set the garbage collection thresholds ( the collection frequency ) . Setting `threshold0` to zero disables collection .", "question_id": 4178, "for": 12345387, "retrieval_score": 20.838818}
{"snippet": "gc.enable()", "intent": "Enable automatic garbage collection .", "question_id": 4167, "for": 12345387, "retrieval_score": 18.40986}
{"snippet": "gc.disable()", "intent": "Disable automatic garbage collection .", "question_id": 4168, "for": 12345387, "retrieval_score": 18.40986}
{"snippet": "gc.DEBUG_STATS", "intent": "Print statistics during collection.", "question_id": 4189, "for": 12345387, "retrieval_score": 18.40986}
{"snippet": "ssl.VerifyMode", "intent": "enum.IntEnum collection of CERT_* constants.", "question_id": 8914, "for": 12345387, "retrieval_score": 17.889566}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970, "for": 903853, "retrieval_score": 15.289648}
{"snippet": "email_message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 3247, "for": 903853, "retrieval_score": 15.289648}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 903853, "retrieval_score": 15.155282}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 903853, "retrieval_score": 14.920185}
{"snippet": "message.get_all(name)", "intent": "Return a list of all the values for the field named `name` .", "question_id": 2974, "for": 903853, "retrieval_score": 14.676496}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424, "for": 903853, "retrieval_score": 23.568512}
{"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425, "for": 903853, "retrieval_score": 15.426506}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 903853, "retrieval_score": 14.818519}
{"snippet": "text_calendar.formatyear(theyear)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`.", "question_id": 936, "for": 903853, "retrieval_score": 13.80333}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 903853, "retrieval_score": 13.530875}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934, "for": 9758959, "retrieval_score": 17.980661}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935, "for": 9758959, "retrieval_score": 17.980661}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 9758959, "retrieval_score": 16.119665}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 9758959, "retrieval_score": 15.90895}
{"snippet": "socket.getsockopt(level, optname, buflen)", "intent": "Return the value of the given socket option ( see the Unix man page getsockopt ( 2 ) ) . If `buflen` is absent , an integer option is assumed and its integer value is returned by the function . With arguments `level`, `optname`.", "question_id": 8684, "for": 9758959, "retrieval_score": 14.748693}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800, "for": 3328012, "retrieval_score": 15.883525}
{"snippet": "tempfile.mkstemp(dir=None)", "intent": "Creates a temporary file in the most secure manner possible . If `dir` is not None , the file will be created in that directory ; otherwise , a default directory is used .", "question_id": 10074, "for": 3328012, "retrieval_score": 15.411274}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 3328012, "retrieval_score": 14.719777}
{"snippet": "tempfile.mkstemp(prefix=None, dir=None)", "intent": "Creates a temporary file in the most secure manner possible . If `prefix` is not None , the file name will begin with that prefix ; otherwise , a default prefix is used . If `dir` is not None , the file will be created in that directory ; otherwise , a default directory is used .", "question_id": 10079, "for": 3328012, "retrieval_score": 13.737623}
{"snippet": "tempfile.mkstemp(suffix=None, dir=None)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `dir` is not None , the file will be created in that directory ; otherwise , a default directory is used .", "question_id": 10077, "for": 3328012, "retrieval_score": 13.56353}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243, "for": 8122079, "retrieval_score": 17.390097}
{"snippet": "str.split(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9244, "for": 8122079, "retrieval_score": 17.390097}
{"snippet": "re.split(pattern, string, maxsplit=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list .", "question_id": 7944, "for": 8122079, "retrieval_score": 16.83317}
{"snippet": "str.rsplit(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9237, "for": 8122079, "retrieval_score": 16.706148}
{"snippet": "str.rsplit(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9238, "for": 8122079, "retrieval_score": 16.706148}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 19961490, "retrieval_score": 19.810568}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 19961490, "retrieval_score": 13.517509}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 19961490, "retrieval_score": 12.669611}
{"snippet": "Request.header_items()", "intent": "Return a list of tuples ( header_name , header_value ) of the Request headers .", "question_id": 11833, "for": 19961490, "retrieval_score": 12.52802}
{"snippet": "NNTP.list(group_pattern=None, file=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` . With arguments `file`.", "question_id": 6468, "for": 19961490, "retrieval_score": 12.253142}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674, "for": 27589325, "retrieval_score": 13.096081}
{"snippet": "operator.indexOf(a, b)", "intent": "Return the index of the first of occurrence of `b` in `a` .", "question_id": 6577, "for": 27589325, "retrieval_score": 12.856622}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 27589325, "retrieval_score": 11.3562}
{"snippet": "text_wrapper.fix_sentence_endings", "intent": "(default: False) If true, TextWrapper attempts to detect sentence endings and ensure that sentences are always separated by exactly two spaces.", "question_id": 10334, "for": 27589325, "retrieval_score": 11.127472}
{"snippet": "Request.set_proxy(host, type)", "intent": "Prepare the request by connecting to a proxy server . The `host` and `type` will replace those of the instance , and the instance \u2019 s selector will be the original URL given in the constructor .", "question_id": 11830, "for": 27589325, "retrieval_score": 10.885908}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674, "for": 27589325, "retrieval_score": 13.096081}
{"snippet": "operator.indexOf(a, b)", "intent": "Return the index of the first of occurrence of `b` in `a` .", "question_id": 6577, "for": 27589325, "retrieval_score": 12.856622}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 27589325, "retrieval_score": 11.3562}
{"snippet": "text_wrapper.fix_sentence_endings", "intent": "(default: False) If true, TextWrapper attempts to detect sentence endings and ensure that sentences are always separated by exactly two spaces.", "question_id": 10334, "for": 27589325, "retrieval_score": 11.127472}
{"snippet": "Request.set_proxy(host, type)", "intent": "Prepare the request by connecting to a proxy server . The `host` and `type` will replace those of the instance , and the instance \u2019 s selector will be the original URL given in the constructor .", "question_id": 11830, "for": 27589325, "retrieval_score": 10.885908}
{"snippet": "FTP.mlsd(facts=)", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . `facts` is a list of strings representing the type of information desired ( e.g .", "question_id": 3949, "for": 4287209, "retrieval_score": 20.595652}
{"snippet": "FTP.mlsd(facts=)", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . `facts` is a list of strings representing the type of information desired ( e.g .", "question_id": 3953, "for": 4287209, "retrieval_score": 20.595652}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832, "for": 4287209, "retrieval_score": 19.376774}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 4287209, "retrieval_score": 19.234488}
{"snippet": "traceback.format_list(extracted_list)", "intent": "Given a list of tuples or FrameSummary objects as returned by extract_tb ( ) or extract_stack ( ) , return a list of strings ready for printing . With arguments `extracted_list`.", "question_id": 10775, "for": 4287209, "retrieval_score": 19.203783}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 4287209, "retrieval_score": 19.07357}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 4287209, "retrieval_score": 19.07357}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 4287209, "retrieval_score": 15.711956}
{"snippet": "gc.callbacks", "intent": "A list of callbacks that will be invoked by the garbage collector before and after collection.", "question_id": 4188, "for": 4287209, "retrieval_score": 15.34564}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832, "for": 4287209, "retrieval_score": 15.211839}
{"snippet": "multiprocessing.get_all_start_methods()", "intent": "Returns a list of the supported start methods , the first of which is the default .", "question_id": 6223, "for": 27659153, "retrieval_score": 23.873192}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154, "for": 27659153, "retrieval_score": 23.252287}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 27659153, "retrieval_score": 23.219112}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638, "for": 27659153, "retrieval_score": 23.02727}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243, "for": 27659153, "retrieval_score": 23.014414}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 27659153, "retrieval_score": 13.042947}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271, "for": 27659153, "retrieval_score": 12.674036}
{"snippet": "Unpacker.unpack_list(unpack_item)", "intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "question_id": 12297, "for": 27659153, "retrieval_score": 11.949091}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 27659153, "retrieval_score": 11.843873}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154, "for": 27659153, "retrieval_score": 11.787242}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773, "for": 4618373, "retrieval_score": 15.496904}
{"snippet": "urllib.request.Request(url, data=None, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11777, "for": 4618373, "retrieval_score": 12.806264}
{"snippet": "errno.EUNATCH", "intent": "Protocol driver not attached", "question_id": 3554, "for": 4618373, "retrieval_score": 11.911826}
{"snippet": "winreg.REG_RESOURCE_LIST", "intent": "A device-driver resource list.", "question_id": 12184, "for": 4618373, "retrieval_score": 11.575178}
{"snippet": "test.support.TEST_HTTP_URL", "intent": "Define the URL of a dedicated HTTP server for the network tests.", "question_id": 10134, "for": 4618373, "retrieval_score": 11.373717}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196, "for": 14043080, "retrieval_score": 15.495295}
{"snippet": "datetime.MAXYEAR", "intent": "The largest year number allowed in a date or datetime object.", "question_id": 2197, "for": 14043080, "retrieval_score": 15.495295}
{"snippet": "datetime.astimezone()", "intent": "Return a datetime object with new tzinfo attribute `tz` , adjusting the date and time data so the result is the same UTC time as self , but in tz \u2019 s local time .", "question_id": 2294, "for": 14043080, "retrieval_score": 15.215414}
{"snippet": "datetime.astimezone(tz=None)", "intent": "Return a datetime object with new tzinfo attribute `tz` , adjusting the date and time data so the result is the same UTC time as self , but in tz \u2019 s local time .", "question_id": 2295, "for": 14043080, "retrieval_score": 15.215414}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263, "for": 14043080, "retrieval_score": 15.088496}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 33435418, "retrieval_score": 41.468777}
{"snippet": "AU_read.getnchannels()", "intent": "Returns number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 9708, "for": 33435418, "retrieval_score": 33.1054}
{"snippet": "Wave_read.getnchannels()", "intent": "Returns number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 12051, "for": 33435418, "retrieval_score": 33.1054}
{"snippet": "aifc.getnchannels()", "intent": "Return the number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 11, "for": 33435418, "retrieval_score": 32.699013}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 33435418, "retrieval_score": 30.838556}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 3662142, "retrieval_score": 10.205771}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 3662142, "retrieval_score": 10.205771}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126, "for": 3662142, "retrieval_score": 10.205771}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463, "for": 3662142, "retrieval_score": 10.205771}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 3662142, "retrieval_score": 10.205771}
{"snippet": "charset.header_encode(string)", "intent": "Header-encode the `string` string .", "question_id": 2920, "for": 200738, "retrieval_score": 11.261516}
{"snippet": "charset.body_encode(string)", "intent": "Body-encode the `string` string .", "question_id": 2922, "for": 200738, "retrieval_score": 11.261516}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334, "for": 200738, "retrieval_score": 11.033628}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 200738, "retrieval_score": 10.857017}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 200738, "retrieval_score": 10.857017}
{"snippet": "math.ceil(x)", "intent": "Return the ceiling of `x` , the smallest integer greater than or equal to x .", "question_id": 5885, "for": 10040143, "retrieval_score": 21.998468}
{"snippet": "random.vonmisesvariate(mu, kappa)", "intent": "`mu` is the mean angle , expressed in radians between 0 and 2*pi , and `kappa` is the concentration parameter , which must be greater than or equal to zero .", "question_id": 7915, "for": 10040143, "retrieval_score": 20.458511}
{"snippet": "test_case.assertAlmostEqual(first, second, msg=None, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta . With arguments `msg`.", "question_id": 11423, "for": 10040143, "retrieval_score": 16.524305}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, msg=None, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta . With arguments `msg`.", "question_id": 11424, "for": 10040143, "retrieval_score": 16.524305}
{"snippet": "test_case.assertNotAlmostEqual(first, second, msg=None, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta . With arguments `msg`.", "question_id": 11431, "for": 10040143, "retrieval_score": 16.524305}
{"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501, "for": 11924135, "retrieval_score": 14.443362}
{"snippet": "str.endswith(suffix)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False .", "question_id": 9191, "for": 11924135, "retrieval_score": 12.186407}
{"snippet": "str.endswith(suffix, start)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position .", "question_id": 9190, "for": 11924135, "retrieval_score": 10.706278}
{"snippet": "email.utils.make_msgid(idstring=None)", "intent": "Returns a string suitable for an RFC 2822-compliant Message-ID header . Optional `idstring` if given , is a string used to strengthen the uniqueness of the message id .", "question_id": 3455, "for": 11924135, "retrieval_score": 9.583977}
{"snippet": "str.endswith(suffix, start, end)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position . With optional `end` , stop comparing at that position .", "question_id": 9189, "for": 11924135, "retrieval_score": 9.556769}
{"snippet": "curses.ascii.alt(c)", "intent": "Return the 8-bit character corresponding to the given ASCII character ( the character bit value is bitwise-ored with 0x80 ) . With arguments `c`.", "question_id": 1916, "for": 11924135, "retrieval_score": 13.754952}
{"snippet": "ctypes.c_int8", "intent": "Represents the C 8-bit signed int datatype.", "question_id": 1862, "for": 11924135, "retrieval_score": 13.478912}
{"snippet": "ctypes.c_uint8", "intent": "Represents the C 8-bit unsigned int datatype.", "question_id": 1873, "for": 11924135, "retrieval_score": 13.478912}
{"snippet": "nntplib.NNTPProtocolError", "intent": "Exception raised when a reply is received from the server that does not begin with a digit in the range 1\u20135.", "question_id": 6444, "for": 11924135, "retrieval_score": 13.2202215}
{"snippet": "stringprep.in_table_c11_c12(code)", "intent": "Determine whether `code` is in tableC.1 ( Space characters , union of C.1.1 and C.1.2 ) .", "question_id": 9537, "for": 11924135, "retrieval_score": 11.561733}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 4915920, "retrieval_score": 15.5619755}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762, "for": 4915920, "retrieval_score": 15.272407}
{"snippet": "widget.insert(parent, index, **kw, iid=None)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . If `iid` is specified , it is used as the item identifier ; iid must not already exist in the tree . With arguments `**kw`.", "question_id": 10641, "for": 4915920, "retrieval_score": 14.965034}
{"snippet": "widget.get_children()", "intent": "Returns the list of children belonging to `item` .", "question_id": 10622, "for": 4915920, "retrieval_score": 14.7492695}
{"snippet": "widget.get_children(item=None)", "intent": "Returns the list of children belonging to `item` .", "question_id": 10623, "for": 4915920, "retrieval_score": 14.7492695}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160, "for": 70797, "retrieval_score": 17.427067}
{"snippet": "pdb.set_trace(header=None)", "intent": "Enter the debugger at the calling stack frame . If given , `header` is printed to the console just before debugging begins .", "question_id": 7337, "for": 70797, "retrieval_score": 16.154018}
{"snippet": "code.interact()", "intent": "Convenience function to run a read-eval-print loop .", "question_id": 1161, "for": 70797, "retrieval_score": 13.22386}
{"snippet": "base_http_request_handler.rfile", "intent": "An io.BufferedIOBase input stream, ready to read from the start of the optional input data.", "question_id": 4625, "for": 70797, "retrieval_score": 12.607286}
{"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162, "for": 70797, "retrieval_score": 12.123497}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 4641765, "retrieval_score": 13.133304}
{"snippet": "readline.read_history_file()", "intent": "Load a readline history file , and append it to the history list .", "question_id": 8022, "for": 4641765, "retrieval_score": 12.143724}
{"snippet": "readline.read_history_file(filename)", "intent": "Load a readline history file , and append it to the history list . The default `filename` is ~/.history .", "question_id": 8021, "for": 4641765, "retrieval_score": 10.862294}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036, "for": 4641765, "retrieval_score": 10.239452}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039, "for": 4641765, "retrieval_score": 10.018696}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 4641765, "retrieval_score": 17.651363}
{"snippet": "readline.read_history_file()", "intent": "Load a readline history file , and append it to the history list .", "question_id": 8022, "for": 4641765, "retrieval_score": 16.711285}
{"snippet": "readline.read_history_file(filename)", "intent": "Load a readline history file , and append it to the history list . The default `filename` is ~/.history .", "question_id": 8021, "for": 4641765, "retrieval_score": 14.947876}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036, "for": 4641765, "retrieval_score": 14.505081}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039, "for": 4641765, "retrieval_score": 14.192361}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 4641765, "retrieval_score": 12.620594}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 4641765, "retrieval_score": 12.549515}
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910, "for": 4641765, "retrieval_score": 12.433727}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360, "for": 4641765, "retrieval_score": 12.374415}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361, "for": 4641765, "retrieval_score": 12.374415}
{"snippet": "curses.ascii.isspace(c)", "intent": "Checks for ASCII white-space characters ; space , line feed , carriage return , form feed , horizontal tab , vertical tab . With arguments `c`.", "question_id": 1909, "for": 11837979, "retrieval_score": 16.46384}
{"snippet": "str.center(width, fillchar)", "intent": "Return centered in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "question_id": 9180, "for": 11837979, "retrieval_score": 14.884493}
{"snippet": "str.ljust(width, fillchar)", "intent": "Return the string left justified in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "question_id": 9215, "for": 11837979, "retrieval_score": 14.048026}
{"snippet": "str.rjust(width, fillchar)", "intent": "Return the string right justified in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "question_id": 9232, "for": 11837979, "retrieval_score": 14.048026}
{"snippet": "bytes.center(width, fillbyte)", "intent": "Return a copy of the object centered in a sequence of length `width` . Padding is done using the specified `fillbyte` ( default is an ASCII space ) .", "question_id": 9335, "for": 11837979, "retrieval_score": 13.788234}
{"snippet": "netrc.macros", "intent": "Dictionary mapping macro names to string lists.", "question_id": 6390, "for": 1720421, "retrieval_score": 6.9222355}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 1720421, "retrieval_score": 6.9222355}
{"snippet": "mh.get_sequences()", "intent": "Return a dictionary of sequence names mapped to key lists .", "question_id": 5783, "for": 1720421, "retrieval_score": 6.407998}
{"snippet": "structure._anonymous_", "intent": "An optional sequence that lists the names of unnamed (anonymous) fields.", "question_id": 1892, "for": 1720421, "retrieval_score": 6.253154}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 1720421, "retrieval_score": 6.105616}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154, "for": 1720421, "retrieval_score": 12.943398}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, params=None)", "intent": "Add `headers` and payload to `msg` : If `params` is specified , iterate its items method and use the resulting ( key , value ) pairs to set additional parameters on the Content-Type header . With arguments `<'str'>`.", "question_id": 3045, "for": 1720421, "retrieval_score": 10.074462}
{"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, params=None)", "intent": "Add `headers` and payload to `msg` : If `params` is specified , iterate its items method and use the resulting ( key , value ) pairs to set additional parameters on the Content-Type header . With arguments `<'EmailMessage'>`.", "question_id": 3064, "for": 1720421, "retrieval_score": 10.074462}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680, "for": 1720421, "retrieval_score": 9.942867}
{"snippet": "email.contentmanager.set_content(msg, <'bytes'>, maintype, subtype, params=None)", "intent": "Add `headers` and payload to `msg` : If `params` is specified , iterate its items method and use the resulting ( key , value ) pairs to set additional parameters on the Content-Type header . With arguments `<'bytes'>`, `maintype`, `subtype`.", "question_id": 3054, "for": 1720421, "retrieval_score": 9.766296}
{"snippet": "test.support.ALWAYS_EQ", "intent": "Object that is equal to anything.", "question_id": 10135, "for": 22086116, "retrieval_score": 20.41362}
{"snippet": "html_diff.__init__(wrapcolumn=None)", "intent": "Initializes instance of HtmlDiff . `wrapcolumn` is an optional keyword to specify column number where lines are broken and wrapped , defaults to None where lines are not wrapped .", "question_id": 2600, "for": 22086116, "retrieval_score": 20.264347}
{"snippet": "parse_error.position", "intent": "A tuple of line, column numbers, specifying where the error occurred.", "question_id": 12563, "for": 22086116, "retrieval_score": 19.696682}
{"snippet": "Locator.getColumnNumber()", "intent": "Return the column number where the current event begins .", "question_id": 12630, "for": 22086116, "retrieval_score": 19.499105}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340, "for": 22086116, "retrieval_score": 18.622528}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995, "for": 19095796, "retrieval_score": 8.905671}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458, "for": 19095796, "retrieval_score": 8.728914}
{"snippet": "gc.DEBUG_STATS", "intent": "Print statistics during collection.", "question_id": 4189, "for": 19095796, "retrieval_score": 6.7658463}
{"snippet": "gc.DEBUG_COLLECTABLE", "intent": "Print information on collectable objects found.", "question_id": 4190, "for": 19095796, "retrieval_score": 6.3939276}
{"snippet": "tabnanny.verbose", "intent": "Flag indicating whether to print verbose messages.", "question_id": 9886, "for": 19095796, "retrieval_score": 6.222892}
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200, "for": 17097236, "retrieval_score": 10.74277}
{"snippet": "message.replace_header(_name, _value)", "intent": "Replace a header . Replace the first header found in the message that matches `_name` , retaining header order and field name case . With arguments `_value`.", "question_id": 2977, "for": 17097236, "retrieval_score": 9.539086}
{"snippet": "cmath.nanj", "intent": "Complex number with zero real part and NaN imaginary part.", "question_id": 1126, "for": 17097236, "retrieval_score": 9.454103}
{"snippet": "email_message.replace_header(_name, _value)", "intent": "Replace a header . Replace the first header found in the message that matches `_name` , retaining header order and field name case of the original header . With arguments `_value`.", "question_id": 3254, "for": 17097236, "retrieval_score": 9.02372}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 17097236, "retrieval_score": 8.941938}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340, "for": 13411544, "retrieval_score": 15.796842}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139, "for": 13411544, "retrieval_score": 15.42046}
{"snippet": "xmlparser.ErrorColumnNumber", "intent": "Column number at which an error occurred.", "question_id": 7750, "for": 13411544, "retrieval_score": 14.951717}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 13411544, "retrieval_score": 14.951717}
{"snippet": "system_random.colno", "intent": "The column corresponding to pos (may be None).", "question_id": 7969, "for": 13411544, "retrieval_score": 14.562181}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139, "for": 13411544, "retrieval_score": 11.5736885}
{"snippet": "mailbox.clear()", "intent": "Delete all messages from the mailbox .", "question_id": 5745, "for": 13411544, "retrieval_score": 10.937482}
{"snippet": "turtle.clear()", "intent": "Delete the turtle \u2019 s drawings from the screen .", "question_id": 10968, "for": 13411544, "retrieval_score": 10.367577}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725, "for": 13411544, "retrieval_score": 10.10433}
{"snippet": "mailbox.__delitem__(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5726, "for": 13411544, "retrieval_score": 10.10433}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340, "for": 13411544, "retrieval_score": 17.209684}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636, "for": 13411544, "retrieval_score": 17.042812}
{"snippet": "system_random.colno", "intent": "The column corresponding to pos (may be None).", "question_id": 7969, "for": 13411544, "retrieval_score": 15.864599}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855, "for": 13411544, "retrieval_score": 15.440799}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139, "for": 13411544, "retrieval_score": 15.42046}
{"snippet": "ssl.OP_NO_RENEGOTIATION", "intent": "Disable all renegotiation in TLSv1.2 and earlier.", "question_id": 8937, "for": 10750802, "retrieval_score": 11.3381195}
{"snippet": "gc.disable()", "intent": "Disable automatic garbage collection .", "question_id": 4168, "for": 10750802, "retrieval_score": 10.06233}
{"snippet": "ssl.OP_NO_COMPRESSION", "intent": "Disable compression on the SSL channel.", "question_id": 8942, "for": 10750802, "retrieval_score": 9.509205}
{"snippet": "faulthandler.disable()", "intent": "Disable the fault handler : uninstall the signal handlers installed by enable ( ) .", "question_id": 3720, "for": 10750802, "retrieval_score": 8.3602915}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932, "for": 10750802, "retrieval_score": 8.3602915}
{"snippet": "traceback.extract_stack()", "intent": "Extract the raw traceback from the current stack frame .", "question_id": 10771, "for": 35711059, "retrieval_score": 16.51491}
{"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326, "for": 35711059, "retrieval_score": 13.130697}
{"snippet": "heapq.nsmallest(n, iterable, key=None)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4328, "for": 35711059, "retrieval_score": 13.130697}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 35711059, "retrieval_score": 12.902163}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 35711059, "retrieval_score": 12.445576}
{"snippet": "parse_error.position", "intent": "A tuple of line, column numbers, specifying where the error occurred.", "question_id": 12563, "for": 14734533, "retrieval_score": 28.079796}
{"snippet": "Locator.getColumnNumber()", "intent": "Return the column number where the current event begins .", "question_id": 12630, "for": 14734533, "retrieval_score": 26.595322}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340, "for": 14734533, "retrieval_score": 25.108109}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636, "for": 14734533, "retrieval_score": 24.936018}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855, "for": 14734533, "retrieval_score": 24.829542}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 517355, "retrieval_score": 15.866804}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 517355, "retrieval_score": 12.144188}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 517355, "retrieval_score": 12.144188}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 517355, "retrieval_score": 11.731021}
{"snippet": "AU_read.getnchannels()", "intent": "Returns number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 9708, "for": 517355, "retrieval_score": 10.904476}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 517355, "retrieval_score": 15.866804}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 517355, "retrieval_score": 14.556966}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 517355, "retrieval_score": 12.959112}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 517355, "retrieval_score": 12.959112}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243, "for": 517355, "retrieval_score": 12.161072}
{"snippet": "http.cookies.BaseCookie()", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances .", "question_id": 4579, "for": 17106819, "retrieval_score": 15.926663}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 17106819, "retrieval_score": 14.130532}
{"snippet": "http.cookies.BaseCookie(input)", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "question_id": 4578, "for": 17106819, "retrieval_score": 13.591012}
{"snippet": "base_http_request_handler.request_version", "intent": "Contains the version string from the request.", "question_id": 4623, "for": 17106819, "retrieval_score": 13.531149}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 17106819, "retrieval_score": 13.419562}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197, "for": 18724607, "retrieval_score": 10.097873}
{"snippet": "platform.python_build()", "intent": "Returns a tuple ( buildno , builddate ) stating the Python build number and date as strings .", "question_id": 7473, "for": 18724607, "retrieval_score": 9.97566}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245, "for": 18724607, "retrieval_score": 9.400418}
{"snippet": "email.utils.formatdate()", "intent": "Returns a date string as per RFC 2822 , e.g .", "question_id": 3468, "for": 18724607, "retrieval_score": 9.276347}
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244, "for": 18724607, "retrieval_score": 9.074808}
{"snippet": "doctest.DocTestSuite(test_finder=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `test_finder` is the DocTestFinder object ( or a drop-in replacement ) that is used to extract doctests from the module .", "question_id": 2810, "for": 22397058, "retrieval_score": 12.161245}
{"snippet": "itertools.tee(iterable)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5266, "for": 22397058, "retrieval_score": 11.143452}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267, "for": 22397058, "retrieval_score": 11.143452}
{"snippet": "configparser.DuplicateOptionError", "intent": "Exception raised by strict parsers if a single option appears twice during reading from a single file, string or dictionary.", "question_id": 1594, "for": 22397058, "retrieval_score": 10.730758}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842, "for": 22397058, "retrieval_score": 10.669642}
{"snippet": "message.get_all(name)", "intent": "Return a list of all the values for the field named `name` .", "question_id": 2974, "for": 22397058, "retrieval_score": 13.387339}
{"snippet": "email_message.get_all(name)", "intent": "Return a list of all the values for the field named `name` .", "question_id": 3251, "for": 22397058, "retrieval_score": 13.387339}
{"snippet": "compileall.compile_dir(dir, optimize=-1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . `optimize` specifies the optimization level for the compiler .", "question_id": 1416, "for": 22397058, "retrieval_score": 13.250464}
{"snippet": "logging.disable()", "intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "question_id": 5644, "for": 22397058, "retrieval_score": 12.970745}
{"snippet": "logging.disable(level=CRITICAL)", "intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "question_id": 5645, "for": 22397058, "retrieval_score": 12.970745}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 19121722, "retrieval_score": 39.24216}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 19121722, "retrieval_score": 34.883118}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 19121722, "retrieval_score": 34.883118}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 19121722, "retrieval_score": 34.272022}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 19121722, "retrieval_score": 34.272022}
{"snippet": "tkinter.tix.Select", "intent": "The Select widget is a container of button subwidgets.", "question_id": 10561, "for": 34527388, "retrieval_score": 18.530472}
{"snippet": "turtle.onrelease(fun)", "intent": "Bind `fun` to mouse-button-release events on this turtle .", "question_id": 11023, "for": 34527388, "retrieval_score": 12.608696}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this turtle .", "question_id": 11019, "for": 34527388, "retrieval_score": 12.47007}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this screen .", "question_id": 11071, "for": 34527388, "retrieval_score": 12.47007}
{"snippet": "turtle.onscreenclick(fun)", "intent": "Bind `fun` to mouse-click events on this screen .", "question_id": 11075, "for": 34527388, "retrieval_score": 12.47007}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 17604837, "retrieval_score": 15.137038}
{"snippet": "test_case.assertDictEqual(first, second)", "intent": "Test that two dictionaries are equal . With arguments `first`, `second`.", "question_id": 11460, "for": 17604837, "retrieval_score": 14.552137}
{"snippet": "test_case.assertDictEqual(first, second, msg=None)", "intent": "Test that two dictionaries are equal . With arguments `first`, `second`, `msg`.", "question_id": 11461, "for": 17604837, "retrieval_score": 14.200496}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 17604837, "retrieval_score": 13.787223}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 17604837, "retrieval_score": 11.421688}
{"snippet": "test_case.assertDictEqual(first, second)", "intent": "Test that two dictionaries are equal . With arguments `first`, `second`.", "question_id": 11460, "for": 16735786, "retrieval_score": 20.515736}
{"snippet": "test_case.assertDictEqual(first, second, msg=None)", "intent": "Test that two dictionaries are equal . With arguments `first`, `second`, `msg`.", "question_id": 11461, "for": 16735786, "retrieval_score": 20.019989}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385, "for": 16735786, "retrieval_score": 14.966495}
{"snippet": "secrets.compare_digest(a, b)", "intent": "Return True if strings `a` and `b` are equal , otherwise False , in such a way as to reduce the risk of timing attacks .", "question_id": 8147, "for": 16735786, "retrieval_score": 14.665916}
{"snippet": "context.Etop()", "intent": "Returns a value equal to Emax - prec + 1 .", "question_id": 2516, "for": 16735786, "retrieval_score": 14.559729}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 18938276, "retrieval_score": 30.371258}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 18938276, "retrieval_score": 22.891357}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745, "for": 18938276, "retrieval_score": 21.485065}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 18938276, "retrieval_score": 20.97239}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 18938276, "retrieval_score": 19.055765}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193, "for": 17166601, "retrieval_score": 17.65403}
{"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378, "for": 17166601, "retrieval_score": 17.260593}
{"snippet": "bytearray.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9380, "for": 17166601, "retrieval_score": 17.260593}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 17166601, "retrieval_score": 12.297065}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518, "for": 17166601, "retrieval_score": 11.529554}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846, "for": 17166601, "retrieval_score": 9.927684}
{"snippet": "cursor.rowcount", "intent": "Although the Cursor class of the sqlite3 module implements this attribute, the database engine\u2019s own support for the determination of \u201crows affected\u201d/\u201drows selected\u201d is quirky.", "question_id": 8849, "for": 17166601, "retrieval_score": 9.858959}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847, "for": 17166601, "retrieval_score": 9.500229}
{"snippet": "cursor.fetchmany()", "intent": "Fetches the next set of rows of a query result , returning a list .", "question_id": 8845, "for": 17166601, "retrieval_score": 9.388234}
{"snippet": "cursor.arraysize", "intent": "Read/write attribute that controls the number of rows returned by fetchmany().", "question_id": 8851, "for": 17166601, "retrieval_score": 9.276079}
{"snippet": "window.getyx()", "intent": "Return a tuple ( y , x ) of current cursor position relative to the window \u2019 s upper-left corner .", "question_id": 2063, "for": 9257094, "retrieval_score": 11.416273}
{"snippet": "readline.redisplay()", "intent": "Change what \u2019 s displayed on the screen to reflect the current contents of the line buffer .", "question_id": 8020, "for": 9257094, "retrieval_score": 10.25126}
{"snippet": "charset.__str__()", "intent": "Returns input_charset as a string coerced to lower case .", "question_id": 2923, "for": 9257094, "retrieval_score": 10.045366}
{"snippet": "email_message.get_content_type()", "intent": "Return the message \u2019 s content type , coerced to lower case of the form maintype/subtype .", "question_id": 3255, "for": 9257094, "retrieval_score": 9.527582}
{"snippet": "test_case.id()", "intent": "Return a string identifying the specific test case .", "question_id": 11469, "for": 9257094, "retrieval_score": 9.00466}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 186857, "retrieval_score": 14.953588}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 186857, "retrieval_score": 14.226059}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 186857, "retrieval_score": 14.011203}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 186857, "retrieval_score": 13.389379}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 186857, "retrieval_score": 13.21385}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487, "for": 15459217, "retrieval_score": 29.4856}
{"snippet": "Cookie.get_nonstandard_attr(name)", "intent": "If cookie has the named cookie-attribute , return its value . With arguments `name`.", "question_id": 4572, "for": 15459217, "retrieval_score": 21.615652}
{"snippet": "Morsel.value", "intent": "The value of the cookie.", "question_id": 4596, "for": 15459217, "retrieval_score": 21.285534}
{"snippet": "Cookie.value", "intent": "Cookie value (a string), or None.", "question_id": 4559, "for": 15459217, "retrieval_score": 20.7005}
{"snippet": "Cookie.get_nonstandard_attr(name, default=None)", "intent": "If cookie has the named cookie-attribute , return its value . Otherwise , return `default` . With arguments `name`.", "question_id": 4573, "for": 15459217, "retrieval_score": 20.617414}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 38147447, "retrieval_score": 16.3237}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 38147447, "retrieval_score": 15.863266}
{"snippet": "urllib.parse.urlencode(query, doseq=False, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11738, "for": 38147447, "retrieval_score": 15.463989}
{"snippet": "memoryview.itemsize", "intent": "The size in bytes of each element of the memoryview:", "question_id": 9423, "for": 38147447, "retrieval_score": 15.303259}
{"snippet": "urllib.parse.urlencode(query, doseq=False, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11741, "for": 38147447, "retrieval_score": 15.114343}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 38147447, "retrieval_score": 17.125696}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 38147447, "retrieval_score": 17.125696}
{"snippet": "operator.getitem(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6575, "for": 38147447, "retrieval_score": 17.125696}
{"snippet": "operator.__getitem__(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6576, "for": 38147447, "retrieval_score": 17.125696}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 38147447, "retrieval_score": 16.96226}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 38147447, "retrieval_score": 12.595794}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 38147447, "retrieval_score": 10.699631}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 38147447, "retrieval_score": 10.585031}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 38147447, "retrieval_score": 10.585031}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 38147447, "retrieval_score": 10.585031}
{"snippet": "formatter.format(record)", "intent": "The `record` \u2019 s attribute dictionary is used as the operand to a string formatting operation .", "question_id": 5618, "for": 17462994, "retrieval_score": 16.40719}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197, "for": 17462994, "retrieval_score": 15.312611}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 17462994, "retrieval_score": 13.647021}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 17462994, "retrieval_score": 13.233934}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 17462994, "retrieval_score": 13.092902}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 15465204, "retrieval_score": 24.855207}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 15465204, "retrieval_score": 24.363928}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 15465204, "retrieval_score": 20.698298}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045, "for": 15465204, "retrieval_score": 19.72712}
{"snippet": "html_calendar.cssclasses", "intent": "A list of CSS classes used for each weekday.", "question_id": 970, "for": 15465204, "retrieval_score": 17.778702}
{"snippet": "abc_meta.__subclasshook__(subclass)", "intent": "( Must be defined as a class method . ) Check whether `subclass` is considered a subclass of this ABC .", "question_id": 3, "for": 14766194, "retrieval_score": 13.123878}
{"snippet": "doctest.OutputChecker", "intent": "A class used to check the whether the actual output from a doctest example matches the expected output.", "question_id": 2883, "for": 14766194, "retrieval_score": 12.871883}
{"snippet": "widget.tag_has(tagname)", "intent": "If `item` is specified , returns 1 or 0 depending on whether the specified item has the given `tagname` .", "question_id": 10668, "for": 14766194, "retrieval_score": 11.737152}
{"snippet": "widget.tag_has(tagname, item=None)", "intent": "If `item` is specified , returns 1 or 0 depending on whether the specified item has the given `tagname` .", "question_id": 10669, "for": 14766194, "retrieval_score": 11.737152}
{"snippet": "difflib.restore(sequence, which)", "intent": "Return one of the two sequences that generated a delta . Given a `sequence` produced by Differ.compare ( ) or ndiff ( ) , extract lines originating from file 1 or 2 ( parameter `which` ) , stripping off line prefixes .", "question_id": 2646, "for": 14766194, "retrieval_score": 11.722719}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 22240602, "retrieval_score": 14.5013275}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 22240602, "retrieval_score": 13.814908}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 22240602, "retrieval_score": 13.648423}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801, "for": 22240602, "retrieval_score": 13.046951}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 22240602, "retrieval_score": 12.249799}
{"snippet": "str.splitlines(keepends)", "intent": "Return a list of the lines in the string , breaking at line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9245, "for": 21205074, "retrieval_score": 16.493805}
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445, "for": 21205074, "retrieval_score": 15.444488}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 21205074, "retrieval_score": 14.226059}
{"snippet": "bytes.splitlines(keepends=False)", "intent": "Return a list of the lines in the binary sequence , breaking at ASCII line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9400, "for": 21205074, "retrieval_score": 14.0926695}
{"snippet": "bytearray.splitlines(keepends=False)", "intent": "Return a list of the lines in the binary sequence , breaking at ASCII line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9402, "for": 21205074, "retrieval_score": 14.0926695}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 20230211, "retrieval_score": 13.197389}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 20230211, "retrieval_score": 12.925052}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 20230211, "retrieval_score": 12.925052}
{"snippet": "http.cookies.BaseCookie()", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances .", "question_id": 4579, "for": 20230211, "retrieval_score": 12.658958}
{"snippet": "base_server.socket_type", "intent": "The type of socket used by the server; socket.SOCK_STREAM and socket.SOCK_DGRAM are two common values.", "question_id": 8773, "for": 20230211, "retrieval_score": 12.383291}
{"snippet": "row.reason", "intent": "A string mnemonic designating the reason this error occurred, for example CERTIFICATE_VERIFY_FAILED.", "question_id": 8875, "for": 4940032, "retrieval_score": 10.318099}
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014, "for": 4940032, "retrieval_score": 10.120287}
{"snippet": "example.lineno", "intent": "The line number within the string containing this example where the example begins.", "question_id": 2837, "for": 4940032, "retrieval_score": 9.93635}
{"snippet": "Pattern.findall(string, pos, endpos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7981, "for": 4940032, "retrieval_score": 9.773535}
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982, "for": 4940032, "retrieval_score": 9.773535}
{"snippet": "row.reason", "intent": "A string mnemonic designating the reason this error occurred, for example CERTIFICATE_VERIFY_FAILED.", "question_id": 8875, "for": 4940032, "retrieval_score": 10.318099}
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014, "for": 4940032, "retrieval_score": 10.120287}
{"snippet": "example.lineno", "intent": "The line number within the string containing this example where the example begins.", "question_id": 2837, "for": 4940032, "retrieval_score": 9.93635}
{"snippet": "Pattern.findall(string, pos, endpos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7981, "for": 4940032, "retrieval_score": 9.773535}
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982, "for": 4940032, "retrieval_score": 9.773535}
{"snippet": "row.reason", "intent": "A string mnemonic designating the reason this error occurred, for example CERTIFICATE_VERIFY_FAILED.", "question_id": 8875, "for": 4940032, "retrieval_score": 10.318099}
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014, "for": 4940032, "retrieval_score": 10.120287}
{"snippet": "example.lineno", "intent": "The line number within the string containing this example where the example begins.", "question_id": 2837, "for": 4940032, "retrieval_score": 9.93635}
{"snippet": "Pattern.findall(string, pos, endpos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7981, "for": 4940032, "retrieval_score": 9.773535}
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982, "for": 4940032, "retrieval_score": 9.773535}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382, "for": 14431731, "retrieval_score": 17.077517}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084, "for": 14431731, "retrieval_score": 14.010469}
{"snippet": "window.insstr(y, x, str, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`, `attr`.", "question_id": 2083, "for": 14431731, "retrieval_score": 13.817279}
{"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931, "for": 14431731, "retrieval_score": 13.462339}
{"snippet": "re.MULTILINE", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7932, "for": 14431731, "retrieval_score": 13.462339}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 5106228, "retrieval_score": 13.422491}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 5106228, "retrieval_score": 12.919764}
{"snippet": "gdbm.firstkey()", "intent": "It \u2019 s possible to loop over every key in the database using this method and the nextkey ( ) method .", "question_id": 2374, "for": 5106228, "retrieval_score": 12.305311}
{"snippet": "datetime.datetime", "intent": "A combination of a date and a time.", "question_id": 2200, "for": 5106228, "retrieval_score": 11.61631}
{"snippet": "locale.LC_ALL", "intent": "Combination of all locale settings.", "question_id": 5410, "for": 5106228, "retrieval_score": 11.311944}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 15390374, "retrieval_score": 19.93546}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 15390374, "retrieval_score": 19.93546}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 15390374, "retrieval_score": 19.663124}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN", "intent": "Raised when an input byte could not properly be assigned to a character; for example, a NUL byte (value 0) in a UTF-8 input stream.", "question_id": 7793, "for": 15390374, "retrieval_score": 17.332762}
{"snippet": "bytes.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9278, "for": 15390374, "retrieval_score": 16.150494}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 3501382, "retrieval_score": 13.684444}
{"snippet": "math.factorial(x)", "intent": "Return `x` factorial as an integer .", "question_id": 5888, "for": 3501382, "retrieval_score": 13.173263}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 3501382, "retrieval_score": 13.143411}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 3501382, "retrieval_score": 12.892696}
{"snippet": "context.to_integral_exact(x)", "intent": "Rounds to an integer . With arguments `x`.", "question_id": 2574, "for": 3501382, "retrieval_score": 12.820882}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 3501382, "retrieval_score": 13.684444}
{"snippet": "math.factorial(x)", "intent": "Return `x` factorial as an integer .", "question_id": 5888, "for": 3501382, "retrieval_score": 13.173263}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 3501382, "retrieval_score": 13.143411}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 3501382, "retrieval_score": 12.892696}
{"snippet": "context.to_integral_exact(x)", "intent": "Rounds to an integer . With arguments `x`.", "question_id": 2574, "for": 3501382, "retrieval_score": 12.820882}
{"snippet": "winsound.SND_FILENAME", "intent": "The sound parameter is the name of a WAV file.", "question_id": 12196, "for": 307305, "retrieval_score": 32.152397}
{"snippet": "winsound.SND_MEMORY", "intent": "The sound parameter to PlaySound() is a memory image of a WAV file, as a bytes-like object.", "question_id": 12199, "for": 307305, "retrieval_score": 26.748554}
{"snippet": "winsound.SND_LOOP", "intent": "Play the sound repeatedly.", "question_id": 12198, "for": 307305, "retrieval_score": 20.6963}
{"snippet": "winsound.MB_ICONASTERISK", "intent": "Play the SystemDefault sound.", "question_id": 12205, "for": 307305, "retrieval_score": 20.6963}
{"snippet": "winsound.MB_ICONEXCLAMATION", "intent": "Play the SystemExclamation sound.", "question_id": 12206, "for": 307305, "retrieval_score": 20.6963}
{"snippet": "sequence_matcher.get_grouped_opcodes()", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2685, "for": 4152376, "retrieval_score": 13.637857}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 4152376, "retrieval_score": 13.637857}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971, "for": 4152376, "retrieval_score": 13.532927}
{"snippet": "email_message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 3248, "for": 4152376, "retrieval_score": 13.532927}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 4152376, "retrieval_score": 13.241165}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038, "for": 4152376, "retrieval_score": 16.787043}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036, "for": 4152376, "retrieval_score": 16.12313}
{"snippet": "sequence_matcher.get_grouped_opcodes()", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2685, "for": 4152376, "retrieval_score": 15.072707}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 4152376, "retrieval_score": 15.072707}
{"snippet": "MON_1 ... MON_12", "intent": "Get the name of the n-th month.", "question_id": 5361, "for": 4152376, "retrieval_score": 14.185022}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 1388818, "retrieval_score": 18.837175}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 1388818, "retrieval_score": 18.837175}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 1388818, "retrieval_score": 17.985027}
{"snippet": "differ.compare(a, b)", "intent": "Compare two sequences of lines , and generate the delta ( `a` sequence of lines ) . With arguments `b`.", "question_id": 2694, "for": 1388818, "retrieval_score": 15.981151}
{"snippet": "difflib.diff_bytes(dfunc, a, b)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc .", "question_id": 2657, "for": 1388818, "retrieval_score": 15.892356}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 1388818, "retrieval_score": 13.610057}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 1388818, "retrieval_score": 13.610057}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 1388818, "retrieval_score": 12.562998}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757, "for": 1388818, "retrieval_score": 12.386722}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399, "for": 1388818, "retrieval_score": 12.298564}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 17757450, "retrieval_score": 15.076853}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 17757450, "retrieval_score": 13.13825}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 17757450, "retrieval_score": 12.894554}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 17757450, "retrieval_score": 11.435647}
{"snippet": "element.keys()", "intent": "Returns the elements attribute names as a list .", "question_id": 12487, "for": 17757450, "retrieval_score": 11.2135315}
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493, "for": 3166619, "retrieval_score": 16.491627}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 3166619, "retrieval_score": 14.325943}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 3166619, "retrieval_score": 14.325943}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939, "for": 3166619, "retrieval_score": 14.151574}
{"snippet": "Match.groups()", "intent": "Return a tuple containing all the subgroups of the match , from 1 up to however many groups are in the pattern .", "question_id": 7999, "for": 3166619, "retrieval_score": 14.122675}
{"snippet": "symbol_table.has_children()", "intent": "Return True if the block has nested namespaces within it .", "question_id": 9740, "for": 10675054, "retrieval_score": 22.6828}
{"snippet": "parser.ParserError", "intent": "Exception raised when a failure occurs within the parser module.", "question_id": 7226, "for": 10675054, "retrieval_score": 19.181763}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254, "for": 10675054, "retrieval_score": 17.143324}
{"snippet": "test.support.join_thread(thread, timeout=30.0)", "intent": "Join a `thread` within `timeout` .", "question_id": 10255, "for": 10675054, "retrieval_score": 17.143324}
{"snippet": "pyclbr.readmodule(module)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package .", "question_id": 7706, "for": 10675054, "retrieval_score": 16.072447}
{"snippet": "importlib.import_module(name)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g .", "question_id": 4793, "for": 10675054, "retrieval_score": 28.31505}
{"snippet": "test.support.import_fresh_module(name, blocked=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . With arguments `name`.", "question_id": 10244, "for": 10675054, "retrieval_score": 26.50531}
{"snippet": "test.support.import_fresh_module(name, fresh=(), blocked=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . With arguments `name`.", "question_id": 10246, "for": 10675054, "retrieval_score": 26.50531}
{"snippet": "test.support.import_fresh_module(name, blocked=(), deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10248, "for": 10675054, "retrieval_score": 26.350803}
{"snippet": "test.support.import_fresh_module(name, fresh=(), blocked=(), deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10249, "for": 10675054, "retrieval_score": 26.350803}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 7717380, "retrieval_score": 22.968773}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 7717380, "retrieval_score": 19.933758}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136, "for": 7717380, "retrieval_score": 18.565113}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983, "for": 7717380, "retrieval_score": 16.20002}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 7717380, "retrieval_score": 15.874882}
{"snippet": "token.COMMENT", "intent": "Token value used to indicate a comment.", "question_id": 10698, "for": 13794532, "retrieval_score": 14.126653}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655, "for": 13794532, "retrieval_score": 12.831578}
{"snippet": "ZipInfo.comment", "intent": "Comment for the individual archive member as a bytes object.", "question_id": 12866, "for": 13794532, "retrieval_score": 12.454245}
{"snippet": "ZipFile.comment", "intent": "The comment associated with the ZIP file as a bytes object.", "question_id": 12845, "for": 13794532, "retrieval_score": 12.26004}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435, "for": 13794532, "retrieval_score": 12.225988}
{"snippet": "mh.get_sequences()", "intent": "Return a dictionary of sequence names mapped to key lists .", "question_id": 5783, "for": 23612271, "retrieval_score": 14.306014}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2658, "for": 23612271, "retrieval_score": 13.680562}
{"snippet": "difflib.diff_bytes(dfunc, a, b, tofile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2659, "for": 23612271, "retrieval_score": 13.680562}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2660, "for": 23612271, "retrieval_score": 13.680562}
{"snippet": "difflib.diff_bytes(dfunc, a, b, tofiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2661, "for": 23612271, "retrieval_score": 13.680562}
{"snippet": "wsgiref.handlers.read_environ()", "intent": "Transcode CGI variables from os.environ to PEP 3333 \u201c bytes in unicode \u201d strings , returning a new dictionary .", "question_id": 12270, "for": 9495262, "retrieval_score": 12.638651}
{"snippet": "context.keys()", "intent": "Return a list of all variables in the context object .", "question_id": 1658, "for": 9495262, "retrieval_score": 11.765463}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543, "for": 9495262, "retrieval_score": 11.611737}
{"snippet": "sysconfig.get_path(name, scheme, vars, expand)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) . get_path ( ) will use the variables returned by get_config_vars ( ) to `expand` the path .", "question_id": 9862, "for": 9495262, "retrieval_score": 11.540348}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 9495262, "retrieval_score": 11.481159}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 1731346, "retrieval_score": 13.902928}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 1731346, "retrieval_score": 13.902928}
{"snippet": "os.getrandom(size)", "intent": "Get up to `size` random bytes .", "question_id": 7137, "for": 1731346, "retrieval_score": 13.785933}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 1731346, "retrieval_score": 12.532263}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027, "for": 1731346, "retrieval_score": 11.979979}
{"snippet": "formatter.format(record)", "intent": "The `record` \u2019 s attribute dictionary is used as the operand to a string formatting operation .", "question_id": 5618, "for": 29035168, "retrieval_score": 13.885562}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197, "for": 29035168, "retrieval_score": 12.406817}
{"snippet": "TarInfo.uname", "intent": "User name.", "question_id": 9989, "for": 29035168, "retrieval_score": 10.933075}
{"snippet": "NNTP.login()", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6451, "for": 29035168, "retrieval_score": 10.442473}
{"snippet": "NNTP.login(user=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6452, "for": 29035168, "retrieval_score": 10.442473}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129, "for": 20059427, "retrieval_score": 29.040863}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 20059427, "retrieval_score": 28.855701}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128, "for": 20059427, "retrieval_score": 27.696383}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045, "for": 20059427, "retrieval_score": 27.510502}
{"snippet": "mime_types.types_map_inv", "intent": "Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types.", "question_id": 5963, "for": 20059427, "retrieval_score": 27.426426}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962, "for": 3996904, "retrieval_score": 18.402107}
{"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897, "for": 3996904, "retrieval_score": 17.160694}
{"snippet": "bz2.compress(data, compresslevel=9)", "intent": "Compress `data` , a bytes-like object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 907, "for": 3996904, "retrieval_score": 16.798527}
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133, "for": 3996904, "retrieval_score": 13.743939}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 3996904, "retrieval_score": 13.649221}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962, "for": 3996904, "retrieval_score": 19.382938}
{"snippet": "random.randint(a, b)", "intent": "Return `a` random integer N such that a < = N < = b. Alias for randrange ( a , b+1 ) . With arguments `b`.", "question_id": 7893, "for": 3996904, "retrieval_score": 18.612198}
{"snippet": "random.uniform(a, b)", "intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "question_id": 7907, "for": 3996904, "retrieval_score": 14.724141}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 3996904, "retrieval_score": 14.52784}
{"snippet": "operator.lt(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6513, "for": 3996904, "retrieval_score": 13.949535}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962, "for": 3996904, "retrieval_score": 17.421276}
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133, "for": 3996904, "retrieval_score": 12.887631}
{"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897, "for": 3996904, "retrieval_score": 12.106839}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 3996904, "retrieval_score": 11.855508}
{"snippet": "bz2.compress(data, compresslevel=9)", "intent": "Compress `data` , a bytes-like object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 907, "for": 3996904, "retrieval_score": 11.851332}
{"snippet": "posix.environ", "intent": "A dictionary representing the string environment at the time the interpreter was started.", "question_id": 7622, "for": 5864271, "retrieval_score": 13.474011}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347, "for": 5864271, "retrieval_score": 13.2822}
{"snippet": "base64.b64decode(s, altchars=None)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters .", "question_id": 711, "for": 5864271, "retrieval_score": 12.997367}
{"snippet": "str.istitle()", "intent": "Return true if the string is a titlecased string and there is at least one character , for example uppercase characters may only follow uncased characters and lowercase characters only cased ones .", "question_id": 9212, "for": 5864271, "retrieval_score": 12.799384}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312, "for": 5864271, "retrieval_score": 12.737784}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 28664103, "retrieval_score": 30.513498}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 28664103, "retrieval_score": 30.513498}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939, "for": 28664103, "retrieval_score": 30.513498}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 28664103, "retrieval_score": 30.513498}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 28664103, "retrieval_score": 30.513498}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283, "for": 10666163, "retrieval_score": 18.735937}
{"snippet": "parser.st2list(st, line_info=False)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree . If `line_info` is true , line number information will be included for all terminal tokens as a third element of the list representing the token .", "question_id": 7215, "for": 10666163, "retrieval_score": 17.786917}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154, "for": 10666163, "retrieval_score": 17.300827}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 10666163, "retrieval_score": 16.981844}
{"snippet": "parser.st2list(st, line_info=False, col_info=False)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree . If `line_info` is true , line number information will be included for all terminal tokens as a third element of the list representing the token . With arguments `col_info`.", "question_id": 7217, "for": 10666163, "retrieval_score": 16.94684}
{"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157, "for": 10666163, "retrieval_score": 30.390041}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154, "for": 10666163, "retrieval_score": 26.018019}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 10666163, "retrieval_score": 24.693968}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 10666163, "retrieval_score": 22.84999}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 10666163, "retrieval_score": 22.540363}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667, "for": 16412563, "retrieval_score": 14.458893}
{"snippet": "profile.runctx(command, globals, locals, filename=None, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `filename`, `sort`.", "question_id": 7668, "for": 16412563, "retrieval_score": 14.20251}
{"snippet": "mh.get_sequences()", "intent": "Return a dictionary of sequence names mapped to key lists .", "question_id": 5783, "for": 16412563, "retrieval_score": 12.352278}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393, "for": 16412563, "retrieval_score": 12.053794}
{"snippet": "ordered_dict.popitem()", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair .", "question_id": 1391, "for": 16412563, "retrieval_score": 12.035693}
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917, "for": 17952279, "retrieval_score": 8.382056}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996, "for": 17952279, "retrieval_score": 7.772604}
{"snippet": "context.next_toward(x, y)", "intent": "Returns the number closest to `x` , in direction towards `y` .", "question_id": 2557, "for": 17952279, "retrieval_score": 7.5518107}
{"snippet": "Compress.compress(data)", "intent": "Compress `data` , returning a bytes object containing compressed data for at least part of the data in data .", "question_id": 12927, "for": 17952279, "retrieval_score": 7.246576}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052, "for": 17952279, "retrieval_score": 7.1684275}
{"snippet": "bytes.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9262, "for": 10365225, "retrieval_score": 12.535345}
{"snippet": "bytearray.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9268, "for": 10365225, "retrieval_score": 12.535345}
{"snippet": "memoryview.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the buffer .", "question_id": 9414, "for": 10365225, "retrieval_score": 12.535345}
{"snippet": "doctest.DocTestParser", "intent": "A processing class used to extract interactive examples from a string, and use them to create a DocTest object.", "question_id": 2855, "for": 10365225, "retrieval_score": 12.377254}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370, "for": 10365225, "retrieval_score": 12.294931}
{"snippet": "Path.home()", "intent": "Return a new path object representing the user \u2019 s home directory ( as returned by os.path.expanduser ( ) with ~ construct ) :", "question_id": 7266, "for": 2759323, "retrieval_score": 14.303274}
{"snippet": "Path.iterdir()", "intent": "When the path points to a directory , yield path objects of the directory contents :", "question_id": 7281, "for": 2759323, "retrieval_score": 13.435307}
{"snippet": "user_list.data", "intent": "A real list object used to store the contents of the UserList class.", "question_id": 1400, "for": 2759323, "retrieval_score": 11.738574}
{"snippet": "os.path.expanduser(path)", "intent": "On Unix and Windows , return the argument with an initial component of ~ or ~user replaced by that user \u2019 s home directory . An initial ~user is handled by stripping the last directory component from the created user `path` derived above .", "question_id": 7149, "for": 2759323, "retrieval_score": 11.489778}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955, "for": 2759323, "retrieval_score": 10.8761835}
{"snippet": "Path.iterdir()", "intent": "When the path points to a directory , yield path objects of the directory contents :", "question_id": 7281, "for": 2759323, "retrieval_score": 18.006084}
{"snippet": "TarFile.extractall()", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9932, "for": 2759323, "retrieval_score": 13.603193}
{"snippet": "TarFile.extractall(path=\".\")", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9933, "for": 2759323, "retrieval_score": 13.603193}
{"snippet": "TarFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9934, "for": 2759323, "retrieval_score": 13.603193}
{"snippet": "TarFile.extractall(path=\".\", members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9936, "for": 2759323, "retrieval_score": 13.603193}
{"snippet": "coverage_results.update(other)", "intent": "Merge in data from another CoverageResults object . With arguments `other`.", "question_id": 10724, "for": 40076861, "retrieval_score": 19.062738}
{"snippet": "inspect.getargvalues(frame)", "intent": "Get information about arguments passed into a particular `frame` .", "question_id": 5012, "for": 40076861, "retrieval_score": 18.418514}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321, "for": 40076861, "retrieval_score": 17.736555}
{"snippet": "inspect.trace()", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in .", "question_id": 5032, "for": 40076861, "retrieval_score": 17.536922}
{"snippet": "inspect.trace(context=1)", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in . With arguments `context`.", "question_id": 5033, "for": 40076861, "retrieval_score": 17.01229}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 30062429, "retrieval_score": 16.85874}
{"snippet": "operator.indexOf(a, b)", "intent": "Return the index of the first of occurrence of `b` in `a` .", "question_id": 6577, "for": 30062429, "retrieval_score": 16.605938}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 30062429, "retrieval_score": 16.531208}
{"snippet": "auto.start", "intent": "The first index of invalid data in object.", "question_id": 3677, "for": 30062429, "retrieval_score": 16.409199}
{"snippet": "urllib.parse.urlencode(query, doseq=False, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11738, "for": 30062429, "retrieval_score": 15.7355995}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424, "for": 30062429, "retrieval_score": 15.908569}
{"snippet": "set.issubset(other)", "intent": "Test whether every element in the set is in `other` .", "question_id": 9439, "for": 30062429, "retrieval_score": 14.4895935}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 30062429, "retrieval_score": 14.4895935}
{"snippet": "set.issuperset(other)", "intent": "Test whether every element in `other` is in the set .", "question_id": 9442, "for": 30062429, "retrieval_score": 14.4895935}
{"snippet": "set >= other", "intent": "Test whether every element in other is in the set.", "question_id": 9443, "for": 30062429, "retrieval_score": 14.4895935}
{"snippet": "compat32.fold(name, value)", "intent": "Headers are folded using the Header folding algorithm , which preserves existing line breaks in the `value` , and wraps each resulting line to the max_line_length . With arguments `name`.", "question_id": 3449, "for": 5075247, "retrieval_score": 14.125492}
{"snippet": "compat32.fold_binary(name, value)", "intent": "Headers are folded using the Header folding algorithm , which preserves existing line breaks in the `value` , and wraps each resulting line to the max_line_length . With arguments `name`.", "question_id": 3450, "for": 5075247, "retrieval_score": 14.125492}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 5075247, "retrieval_score": 13.618582}
{"snippet": "str.splitlines(keepends)", "intent": "Return a list of the lines in the string , breaking at line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9245, "for": 5075247, "retrieval_score": 13.168802}
{"snippet": "bytes.splitlines(keepends=False)", "intent": "Return a list of the lines in the binary sequence , breaking at ASCII line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9400, "for": 5075247, "retrieval_score": 10.877797}
{"snippet": "fileinput.hook_compressed(filename, mode)", "intent": "Transparently opens files compressed with gzip and bzip2 ( recognized by the extensions '.gz ' and '.bz2 ' ) using the gzip and bz2 modules . If the `filename` extension is not '.gz ' or '.bz2 ' , the file is opened normally ( ie , using open ( ) without any decompression ) . With arguments `mode`.", "question_id": 3810, "for": 1883604, "retrieval_score": 28.222095}
{"snippet": "lzma.LZMAFile()", "intent": "Open an LZMA-compressed file in binary `mode` .", "question_id": 5666, "for": 1883604, "retrieval_score": 24.086529}
{"snippet": "lzma.LZMAFile(mode=\"r\")", "intent": "Open an LZMA-compressed file in binary `mode` .", "question_id": 5668, "for": 1883604, "retrieval_score": 24.086529}
{"snippet": "gzip.open(filename)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4272, "for": 1883604, "retrieval_score": 24.023733}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273, "for": 1883604, "retrieval_score": 24.023733}
{"snippet": "secrets.compare_digest(a, b)", "intent": "Return True if strings `a` and `b` are equal , otherwise False , in such a way as to reduce the risk of timing attacks .", "question_id": 8147, "for": 6159313, "retrieval_score": 24.551083}
{"snippet": "os.path.normpath(path)", "intent": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a `path` that contains symbolic links .", "question_id": 7162, "for": 6159313, "retrieval_score": 23.968369}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 6159313, "retrieval_score": 23.066496}
{"snippet": "difflib.context_diff(a, b, fromfile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2629, "for": 6159313, "retrieval_score": 22.637959}
{"snippet": "difflib.context_diff(a, b, tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2630, "for": 6159313, "retrieval_score": 22.637959}
{"snippet": "os.path.normpath(path)", "intent": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a `path` that contains symbolic links .", "question_id": 7162, "for": 6159313, "retrieval_score": 25.219475}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 6159313, "retrieval_score": 22.222021}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 6159313, "retrieval_score": 19.881779}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 6159313, "retrieval_score": 19.826555}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 6159313, "retrieval_score": 19.810518}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 3939361, "retrieval_score": 13.618582}
{"snippet": "Dialect.quotechar", "intent": "A one-character string used to quote fields containing special characters, such as the delimiter or quotechar, or which contain new-line characters.", "question_id": 1727, "for": 3939361, "retrieval_score": 11.604287}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 3939361, "retrieval_score": 11.337492}
{"snippet": "window.insnstr(str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "question_id": 2078, "for": 3939361, "retrieval_score": 11.072339}
{"snippet": "window.insnstr(str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`, `attr`.", "question_id": 2077, "for": 3939361, "retrieval_score": 10.905996}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 3939361, "retrieval_score": 13.618582}
{"snippet": "Dialect.quotechar", "intent": "A one-character string used to quote fields containing special characters, such as the delimiter or quotechar, or which contain new-line characters.", "question_id": 1727, "for": 3939361, "retrieval_score": 11.604287}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 3939361, "retrieval_score": 11.337492}
{"snippet": "window.insnstr(str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "question_id": 2078, "for": 3939361, "retrieval_score": 11.072339}
{"snippet": "window.insnstr(str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`, `attr`.", "question_id": 2077, "for": 3939361, "retrieval_score": 10.905996}
{"snippet": "Node.toxml(encoding=None)", "intent": "Return a string or byte string containing the XML represented by the DOM node . With an explicit `encoding` 1 argument , the result is a byte string in the specified encoding .", "question_id": 12412, "for": 3939361, "retrieval_score": 13.216721}
{"snippet": "doc_test.docstring", "intent": "The string that the test was extracted from, or None if the string is unavailable, or if the test was not extracted from a string.", "question_id": 2823, "for": 3939361, "retrieval_score": 13.116549}
{"snippet": "config_parser.read_string(string)", "intent": "Parse configuration data from a `string` .", "question_id": 1516, "for": 3939361, "retrieval_score": 12.717114}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 3939361, "retrieval_score": 12.617029}
{"snippet": "xml.etree.ElementTree.XML(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12469, "for": 3939361, "retrieval_score": 12.617029}
{"snippet": "ctypes.c_char", "intent": "Represents the C char datatype, and interprets the value as a single character.", "question_id": 1856, "for": 3939361, "retrieval_score": 14.043888}
{"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162, "for": 3939361, "retrieval_score": 12.067345}
{"snippet": "ctypes.c_char_p", "intent": "Represents the C char * datatype when it points to a zero-terminated string.", "question_id": 1857, "for": 3939361, "retrieval_score": 12.023628}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160, "for": 3939361, "retrieval_score": 11.24663}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 3939361, "retrieval_score": 10.865093}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 3939361, "retrieval_score": 13.815222}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 3939361, "retrieval_score": 13.815222}
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739, "for": 3939361, "retrieval_score": 12.232213}
{"snippet": "base64.a85decode(b, adobe=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 742, "for": 3939361, "retrieval_score": 11.563577}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 3939361, "retrieval_score": 11.384114}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 3939361, "retrieval_score": 15.547104}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 3939361, "retrieval_score": 12.9811125}
{"snippet": "smtp_channel.mailfrom", "intent": "Holds a string containing the address identified in the \u201cMAIL FROM:\u201d line from the client.", "question_id": 8443, "for": 3939361, "retrieval_score": 12.389478}
{"snippet": "textwrap.wrap(text, **kwargs)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10318, "for": 3939361, "retrieval_score": 12.208175}
{"snippet": "textwrap.wrap(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10319, "for": 3939361, "retrieval_score": 12.208175}
{"snippet": "inspect.trace()", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in .", "question_id": 5032, "for": 38704545, "retrieval_score": 16.130978}
{"snippet": "inspect.trace(context=1)", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in . With arguments `context`.", "question_id": 5033, "for": 38704545, "retrieval_score": 15.548791}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271, "for": 38704545, "retrieval_score": 15.142706}
{"snippet": "pwd.getpwall()", "intent": "Return a list of all available password database entries , in arbitrary order .", "question_id": 7705, "for": 38704545, "retrieval_score": 14.785428}
{"snippet": "spwd.getspall()", "intent": "Return a list of all available shadow password database entries , in arbitrary order .", "question_id": 8790, "for": 38704545, "retrieval_score": 14.44462}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 19672101, "retrieval_score": 22.374426}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 19672101, "retrieval_score": 18.360548}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 19672101, "retrieval_score": 12.959112}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 19672101, "retrieval_score": 12.959112}
{"snippet": "user_list.data", "intent": "A real list object used to store the contents of the UserList class.", "question_id": 1400, "for": 19672101, "retrieval_score": 11.94392}
{"snippet": "formatter.format_field(value, format_spec)", "intent": "format_field ( ) simply calls the global format ( ) built-in . With arguments `value`, `format_spec`.", "question_id": 9523, "for": 13627865, "retrieval_score": 10.653532}
{"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287, "for": 13627865, "retrieval_score": 10.396091}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653, "for": 13627865, "retrieval_score": 10.21339}
{"snippet": "sysconfig.get_config_var(name)", "intent": "Return the value of a single variable `name` .", "question_id": 9859, "for": 13627865, "retrieval_score": 10.21339}
{"snippet": "context_var.get(default)", "intent": "Return a value for the context variable for the current context . With arguments `default`.", "question_id": 1640, "for": 13627865, "retrieval_score": 10.12168}
{"snippet": "readline.insert_text(string)", "intent": "Insert text into the line buffer at the cursor position . With arguments `string`.", "question_id": 8019, "for": 199059, "retrieval_score": 13.620121}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 199059, "retrieval_score": 13.517032}
{"snippet": "text_wrapper.expand_tabs", "intent": "(default: True) If true, then all tab characters in text will be expanded to spaces using the expandtabs() method of text.", "question_id": 10328, "for": 199059, "retrieval_score": 12.070046}
{"snippet": "window.insstr(str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`.", "question_id": 2082, "for": 199059, "retrieval_score": 11.892599}
{"snippet": "formatter.end_paragraph(blanklines)", "intent": "Close any open paragraphs and insert at least `blanklines` before the next paragraph .", "question_id": 3819, "for": 199059, "retrieval_score": 11.7218685}
{"snippet": "gnu_translations.gettext(message)", "intent": "Look up the `message` id in the catalog and return the corresponding message string , as a Unicode string .", "question_id": 4261, "for": 727507, "retrieval_score": 10.434872}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 727507, "retrieval_score": 10.354971}
{"snippet": "xml.dom.pulldom.parseString(string)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` .", "question_id": 12429, "for": 727507, "retrieval_score": 10.085194}
{"snippet": "str.isupper()", "intent": "Return true if all cased characters 4 in the string are uppercase and there is at least one cased character , false otherwise .", "question_id": 9213, "for": 727507, "retrieval_score": 10.050772}
{"snippet": "str.swapcase()", "intent": "Return a copy of the string with uppercase characters converted to lowercase and vice versa .", "question_id": 9252, "for": 727507, "retrieval_score": 9.88496}
{"snippet": "Option.choices", "intent": "For options of type \"choice\", the list of strings the user may choose from.", "question_id": 6632, "for": 28657018, "retrieval_score": 17.567091}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947, "for": 28657018, "retrieval_score": 17.45597}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 28657018, "retrieval_score": 17.210268}
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440, "for": 28657018, "retrieval_score": 16.535313}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832, "for": 28657018, "retrieval_score": 16.440872}
{"snippet": "sequence_matcher.set_seqs(a, b)", "intent": "Set the two sequences to be compared . With arguments `a`, `b`.", "question_id": 2679, "for": 579856, "retrieval_score": 12.910475}
{"snippet": "tokenize.untokenize(iterable)", "intent": "Converts tokens back into Python source code . The `iterable` must return sequences with at least two elements , the token type and the token string .", "question_id": 10702, "for": 579856, "retrieval_score": 12.4498825}
{"snippet": "differ.compare(a, b)", "intent": "Compare two sequences of lines , and generate the delta ( `a` sequence of lines ) . With arguments `b`.", "question_id": 2694, "for": 579856, "retrieval_score": 11.5187645}
{"snippet": "urllib.parse.urlunsplit(parts)", "intent": "Combine the elements of a tuple as returned by urlsplit ( ) into a complete URL as a string . The `parts` argument can be any five-item iterable .", "question_id": 11694, "for": 579856, "retrieval_score": 11.375622}
{"snippet": "mh.set_sequences(sequences)", "intent": "Re-define the `sequences` that exist in the mailbox based upon sequences , a dictionary of names mapped to key lists , like returned by get_sequences ( ) .", "question_id": 5784, "for": 579856, "retrieval_score": 11.308993}
{"snippet": "base_http_request_handler.log_date_time_string()", "intent": "Returns the current date and time , formatted for logging .", "question_id": 4657, "for": 3220284, "retrieval_score": 13.939766}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412, "for": 3220284, "retrieval_score": 12.447745}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358, "for": 3220284, "retrieval_score": 12.334355}
{"snippet": "logging.config.fileConfig(fname, defaults=None)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "question_id": 5413, "for": 3220284, "retrieval_score": 12.160821}
{"snippet": "logging.config.fileConfig(fname, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `disable_existing_loggers`.", "question_id": 5414, "for": 3220284, "retrieval_score": 12.160821}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363, "for": 8172861, "retrieval_score": 20.705784}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 8172861, "retrieval_score": 18.750996}
{"snippet": "urllib.parse.quote_plus(string, safe='', encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`.", "question_id": 11717, "for": 8172861, "retrieval_score": 15.299765}
{"snippet": "urllib.parse.quote_plus(string, safe='', errors=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `errors`.", "question_id": 11718, "for": 8172861, "retrieval_score": 15.299765}
{"snippet": "urllib.parse.quote_plus(string, safe='', encoding=None, errors=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`, `errors`.", "question_id": 11720, "for": 8172861, "retrieval_score": 15.299765}
{"snippet": "cgi.test()", "intent": "Robust test CGI script , usable as main program .", "question_id": 1052, "for": 5826427, "retrieval_score": 12.819291}
{"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283, "for": 5826427, "retrieval_score": 12.818286}
{"snippet": "base_manager.start(initializer, initargs)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts . With arguments `initargs`.", "question_id": 6282, "for": 5826427, "retrieval_score": 12.248768}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 5826427, "retrieval_score": 11.945581}
{"snippet": "doc_test_runner.run(test, out=None)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2875, "for": 5826427, "retrieval_score": 11.945581}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 5826427, "retrieval_score": 21.180738}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168, "for": 5826427, "retrieval_score": 20.204296}
{"snippet": "turtle.write_docstringdict(filename=\"turtle_docstringdict\")", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11169, "for": 5826427, "retrieval_score": 20.204296}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 5826427, "retrieval_score": 15.800081}
{"snippet": "cgi.test()", "intent": "Robust test CGI script , usable as main program .", "question_id": 1052, "for": 5826427, "retrieval_score": 15.201841}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632, "for": 1546226, "retrieval_score": 9.774994}
{"snippet": "os.path.normpath(path)", "intent": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a `path` that contains symbolic links .", "question_id": 7162, "for": 1546226, "retrieval_score": 9.368525}
{"snippet": "urllib.parse.quote_plus(string, safe='')", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` .", "question_id": 11714, "for": 1546226, "retrieval_score": 8.792746}
{"snippet": "urllib.parse.quote_plus(string, safe='', encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`.", "question_id": 11717, "for": 1546226, "retrieval_score": 8.381908}
{"snippet": "urllib.parse.quote_plus(string, safe='', errors=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `errors`.", "question_id": 11718, "for": 1546226, "retrieval_score": 8.381908}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826, "for": 13557937, "retrieval_score": 13.827547}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 13557937, "retrieval_score": 13.325456}
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824, "for": 13557937, "retrieval_score": 13.287394}
{"snippet": "socket.inet_pton(address_family, ip_string)", "intent": "Convert an IP address from its family-specific string format to a packed , binary format . Supported values for `address_family` are currently AF_INET and AF_INET6 . If the IP address string `ip_string` is invalid , OSError will be raised .", "question_id": 8663, "for": 13557937, "retrieval_score": 13.138671}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 13557937, "retrieval_score": 13.088307}
{"snippet": "unicodedata.decimal(chr)", "intent": "Returns the decimal value assigned to the character `chr` as integer .", "question_id": 11344, "for": 13557937, "retrieval_score": 15.115418}
{"snippet": "decimal.logb()", "intent": "For a nonzero number , return the adjusted exponent of its operand as a Decimal instance .", "question_id": 2433, "for": 13557937, "retrieval_score": 14.242007}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 13557937, "retrieval_score": 13.950206}
{"snippet": "widget.index(item)", "intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "question_id": 10639, "for": 13557937, "retrieval_score": 13.868918}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826, "for": 13557937, "retrieval_score": 13.827547}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826, "for": 13557937, "retrieval_score": 12.044983}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849, "for": 13557937, "retrieval_score": 11.653612}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 13557937, "retrieval_score": 11.618132}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 13557937, "retrieval_score": 11.416271}
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824, "for": 13557937, "retrieval_score": 11.378655}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 9932549, "retrieval_score": 38.26292}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716, "for": 9932549, "retrieval_score": 36.025192}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224, "for": 9932549, "retrieval_score": 31.66317}
{"snippet": "gettext.find(domain, localedir=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4226, "for": 9932549, "retrieval_score": 30.671902}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227, "for": 9932549, "retrieval_score": 30.118063}
{"snippet": "itertools.product(*iterables)", "intent": "Cartesian product of input iterables . With arguments `*iterables`.", "question_id": 5260, "for": 11144513, "retrieval_score": 23.734451}
{"snippet": "context.multiply(x, y)", "intent": "Return the product of `x` and `y` .", "question_id": 2554, "for": 11144513, "retrieval_score": 23.598766}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 11144513, "retrieval_score": 20.978115}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 11144513, "retrieval_score": 20.871555}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261, "for": 11144513, "retrieval_score": 19.444681}
{"snippet": "winreg.REG_RESOURCE_LIST", "intent": "A device-driver resource list.", "question_id": 12184, "for": 16739319, "retrieval_score": 24.103468}
{"snippet": "errno.EUNATCH", "intent": "Protocol driver not attached", "question_id": 3554, "for": 16739319, "retrieval_score": 23.823652}
{"snippet": "winsound.SND_NOWAIT", "intent": "Return immediately if the sound driver is busy.", "question_id": 12204, "for": 16739319, "retrieval_score": 21.340956}
{"snippet": "oss_audio_device.post()", "intent": "Tell the driver that there is likely to be a pause in the output , making it possible for the device to handle the pause more intelligently .", "question_id": 7190, "for": 16739319, "retrieval_score": 16.532059}
{"snippet": "Popen.wait(timeout=None)", "intent": "Wait for child process to terminate . If the process does not terminate after `timeout` seconds , raise a TimeoutExpired exception .", "question_id": 9611, "for": 16739319, "retrieval_score": 16.480444}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 16739319, "retrieval_score": 12.601569}
{"snippet": "sys.getswitchinterval()", "intent": "Return the interpreter \u2019 s \u201c thread switch interval \u201d ; see setswitchinterval ( ) .", "question_id": 9804, "for": 16739319, "retrieval_score": 10.39954}
{"snippet": "sys.setswitchinterval(interval)", "intent": "Set the interpreter \u2019 s thread switch `interval` ( in seconds ) .", "question_id": 9838, "for": 16739319, "retrieval_score": 10.39954}
{"snippet": "tracemalloc.Traceback", "intent": "Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "question_id": 10894, "for": 16739319, "retrieval_score": 9.605951}
{"snippet": "turtle.setworldcoordinates(llx, lly, urx, ury)", "intent": "Set up user-defined coordinate system and switch to mode \u201c world \u201d if necessary . With arguments `llx`, `lly`, `urx`, `ury`.", "question_id": 11055, "for": 16739319, "retrieval_score": 9.305975}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 21618351, "retrieval_score": 33.83751}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 21618351, "retrieval_score": 17.565535}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 21618351, "retrieval_score": 17.109638}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 21618351, "retrieval_score": 16.911238}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 21618351, "retrieval_score": 16.507643}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 17713873, "retrieval_score": 11.352001}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 17713873, "retrieval_score": 11.352001}
{"snippet": "date.month", "intent": "Between 1 and 12 inclusive.", "question_id": 2227, "for": 17713873, "retrieval_score": 10.650978}
{"snippet": "datetime.month", "intent": "Between 1 and 12 inclusive.", "question_id": 2273, "for": 17713873, "retrieval_score": 10.650978}
{"snippet": "date.max", "intent": "The latest representable date, date(MAXYEAR, 12, 31).", "question_id": 2224, "for": 17713873, "retrieval_score": 9.818512}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 20778951, "retrieval_score": 43.23444}
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925, "for": 20778951, "retrieval_score": 43.23444}
{"snippet": "text_calendar.prmonth(theyear, themonth, w=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`.", "question_id": 933, "for": 20778951, "retrieval_score": 34.652954}
{"snippet": "calendar.prmonth(theyear, themonth, w=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`.", "question_id": 994, "for": 20778951, "retrieval_score": 34.652954}
{"snippet": "calendar.month(theyear, themonth, w=0)", "intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `w`.", "question_id": 998, "for": 20778951, "retrieval_score": 33.93272}
{"snippet": "AU_read.getframerate()", "intent": "Returns sampling frequency .", "question_id": 9710, "for": 21558999, "retrieval_score": 11.481856}
{"snippet": "Wave_read.getframerate()", "intent": "Returns sampling frequency .", "question_id": 12053, "for": 21558999, "retrieval_score": 11.481856}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679, "for": 21558999, "retrieval_score": 11.1177635}
{"snippet": "email_message.clear_content()", "intent": "Remove the payload and all of the Content- headers , leaving all other headers intact and in their original order .", "question_id": 3307, "for": 21558999, "retrieval_score": 10.282198}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 21558999, "retrieval_score": 10.205771}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 674509, "retrieval_score": 19.8478}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 674509, "retrieval_score": 19.839832}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 674509, "retrieval_score": 19.23724}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490, "for": 674509, "retrieval_score": 16.63675}
{"snippet": "patch.dict(in_dict, **kwargs, clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11630, "for": 674509, "retrieval_score": 16.364017}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 674509, "retrieval_score": 19.03599}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 674509, "retrieval_score": 16.40925}
{"snippet": "message.walk()", "intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "question_id": 3027, "for": 674509, "retrieval_score": 16.178785}
{"snippet": "email_message.walk()", "intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "question_id": 3285, "for": 674509, "retrieval_score": 16.178785}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 674509, "retrieval_score": 15.247766}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680, "for": 674509, "retrieval_score": 14.131482}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393, "for": 674509, "retrieval_score": 13.9096575}
{"snippet": "bound_arguments.arguments", "intent": "An ordered, mutable mapping (collections.OrderedDict) of parameters\u2019 names to arguments\u2019 values.", "question_id": 5003, "for": 674509, "retrieval_score": 13.369053}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 674509, "retrieval_score": 11.941371}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 674509, "retrieval_score": 11.673934}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 42098487, "retrieval_score": 19.781528}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283, "for": 42098487, "retrieval_score": 16.777714}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 42098487, "retrieval_score": 16.383116}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 42098487, "retrieval_score": 16.383116}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 42098487, "retrieval_score": 15.872061}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 30406725, "retrieval_score": 20.871407}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 30406725, "retrieval_score": 20.871407}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939, "for": 30406725, "retrieval_score": 20.871407}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 30406725, "retrieval_score": 20.871407}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 30406725, "retrieval_score": 20.871407}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 8916302, "retrieval_score": 23.143694}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 8916302, "retrieval_score": 23.143694}
{"snippet": "asyncio.Queue(maxsize=0)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .", "question_id": 446, "for": 8916302, "retrieval_score": 22.285843}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136, "for": 8916302, "retrieval_score": 22.148762}
{"snippet": "test.support.SMALLEST", "intent": "Object that is less than anything (except itself).", "question_id": 10137, "for": 8916302, "retrieval_score": 21.430332}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 8372399, "retrieval_score": 22.374426}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 8372399, "retrieval_score": 18.931673}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175, "for": 8372399, "retrieval_score": 17.290514}
{"snippet": "date.isoweekday()", "intent": "Return the day of the week as an integer , where Monday is 1 and Sunday is 7 .", "question_id": 2240, "for": 8372399, "retrieval_score": 14.339324}
{"snippet": "datetime.isoweekday()", "intent": "Return the day of the week as an integer , where Monday is 1 and Sunday is 7 .", "question_id": 2304, "for": 8372399, "retrieval_score": 14.339324}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 17071871, "retrieval_score": 13.823259}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 17071871, "retrieval_score": 13.823259}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 17071871, "retrieval_score": 13.823259}
{"snippet": "widget.set(item)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` .", "question_id": 10658, "for": 17071871, "retrieval_score": 12.999962}
{"snippet": "cursor.rowcount", "intent": "Although the Cursor class of the sqlite3 module implements this attribute, the database engine\u2019s own support for the determination of \u201crows affected\u201d/\u201drows selected\u201d is quirky.", "question_id": 8849, "for": 17071871, "retrieval_score": 12.307798}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 17071871, "retrieval_score": 28.267319}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 17071871, "retrieval_score": 28.267319}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 17071871, "retrieval_score": 28.267319}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 17071871, "retrieval_score": 26.594147}
{"snippet": "widget.set(item)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` .", "question_id": 10658, "for": 17071871, "retrieval_score": 25.079195}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 17071871, "retrieval_score": 22.883722}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 17071871, "retrieval_score": 19.722513}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 17071871, "retrieval_score": 19.722513}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 17071871, "retrieval_score": 19.722513}
{"snippet": "widget.heading(column, **kw, option=None)", "intent": "Query or modify the heading options for the specified `column` . If kw is not given , returns a dict of the heading `option` values . With arguments `**kw`.", "question_id": 10633, "for": 17071871, "retrieval_score": 18.448416}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 17071871, "retrieval_score": 19.118286}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 17071871, "retrieval_score": 18.900137}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 17071871, "retrieval_score": 18.900137}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 17071871, "retrieval_score": 18.900137}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 17071871, "retrieval_score": 18.597237}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 17071871, "retrieval_score": 15.930168}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 17071871, "retrieval_score": 15.930168}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 17071871, "retrieval_score": 15.930168}
{"snippet": "widget.set(item)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` .", "question_id": 10658, "for": 17071871, "retrieval_score": 15.180412}
{"snippet": "asyncore.loop(timeout, use_poll, map, count)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 647, "for": 17071871, "retrieval_score": 13.282274}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512, "for": 38273353, "retrieval_score": 16.17631}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 38273353, "retrieval_score": 14.790884}
{"snippet": "timer.repeat(repeat=5, number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.", "question_id": 10514, "for": 38273353, "retrieval_score": 14.776744}
{"snippet": "email.charset.Charset()", "intent": "Map character sets to their email properties .", "question_id": 2910, "for": 38273353, "retrieval_score": 13.210004}
{"snippet": "faulthandler.dump_traceback_later(timeout)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True .", "question_id": 3722, "for": 38273353, "retrieval_score": 11.913584}
{"snippet": "shutil.rmtree(path)", "intent": "Delete an entire directory tree ; `path` must point to a directory ( but not a symbolic link to a directory ) .", "question_id": 8333, "for": 6996603, "retrieval_score": 13.436462}
{"snippet": "os.rmdir(path)", "intent": "Remove ( delete ) the directory `path` .", "question_id": 6901, "for": 6996603, "retrieval_score": 13.195751}
{"snippet": "errno.ENOTEMPTY", "intent": "Directory not empty", "question_id": 3544, "for": 6996603, "retrieval_score": 12.6547165}
{"snippet": "os.rmdir(path, dir_fd=None)", "intent": "Remove ( delete ) the directory `path` . With arguments `dir_fd`.", "question_id": 6902, "for": 6996603, "retrieval_score": 12.164389}
{"snippet": "shutil.rmtree(path, ignore_errors=False)", "intent": "Delete an entire directory tree ; `path` must point to a directory ( but not a symbolic link to a directory ) . If `ignore_errors` is true , errors resulting from failed removals will be ignored ; if false or omitted , such errors are handled by calling a handler specified by `onerror` or , if that is omitted , they raise an exception .", "question_id": 8334, "for": 6996603, "retrieval_score": 9.367884}
{"snippet": "os.rmdir(path)", "intent": "Remove ( delete ) the directory `path` .", "question_id": 6901, "for": 6996603, "retrieval_score": 17.850681}
{"snippet": "os.rmdir(path, dir_fd=None)", "intent": "Remove ( delete ) the directory `path` . With arguments `dir_fd`.", "question_id": 6902, "for": 6996603, "retrieval_score": 16.455496}
{"snippet": "Path.iterdir()", "intent": "When the path points to a directory , yield path objects of the directory contents :", "question_id": 7281, "for": 6996603, "retrieval_score": 16.005623}
{"snippet": "pkgutil.walk_packages()", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules .", "question_id": 7449, "for": 6996603, "retrieval_score": 15.552612}
{"snippet": "pkgutil.walk_packages(path=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules .", "question_id": 7450, "for": 6996603, "retrieval_score": 15.552612}
{"snippet": "os.removedirs(name)", "intent": "Remove directories recursively . With arguments `name`.", "question_id": 6891, "for": 6996603, "retrieval_score": 18.858955}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761, "for": 6996603, "retrieval_score": 15.944168}
{"snippet": "mh.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5782, "for": 6996603, "retrieval_score": 15.944168}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759, "for": 6996603, "retrieval_score": 14.835854}
{"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780, "for": 6996603, "retrieval_score": 14.835854}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 19365513, "retrieval_score": 9.073671}
{"snippet": "connection.row_factory", "intent": "You can change this attribute to a callable that accepts the cursor and the original row as a tuple and will return the real result row.", "question_id": 8825, "for": 19365513, "retrieval_score": 8.530936}
{"snippet": "time.asctime()", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' .", "question_id": 10430, "for": 19365513, "retrieval_score": 8.3890915}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735, "for": 19365513, "retrieval_score": 8.005441}
{"snippet": "curses.meta(flag)", "intent": "If `flag` is True , allow 8-bit characters to be input .", "question_id": 1953, "for": 19365513, "retrieval_score": 7.918046}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112, "for": 22625616, "retrieval_score": 15.329013}
{"snippet": "compileall.compile_path(skip_curdir=True)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search .", "question_id": 1430, "for": 22625616, "retrieval_score": 14.668543}
{"snippet": "ZipFile.extractall(pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "question_id": 12821, "for": 22625616, "retrieval_score": 14.576656}
{"snippet": "ZipFile.extractall(members=None, pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "question_id": 12824, "for": 22625616, "retrieval_score": 14.576656}
{"snippet": "ZipFile.extractall(path=None, pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "question_id": 12823, "for": 22625616, "retrieval_score": 14.514512}
{"snippet": "mock.reset_mock(side_effect=False)", "intent": "The reset_mock method resets all the call attributes on a mock object : Note that reset_mock ( ) doesn \u2019 t clear the return value , `side_effect` or any child attributes you have set using normal assignment by default .", "question_id": 11580, "for": 22625616, "retrieval_score": 13.3192625}
{"snippet": "email.encoders.encode_noop(msg)", "intent": "This does nothing ; it doesn \u2019 t even set the Content-Transfer-Encoding header . With arguments `msg`.", "question_id": 3072, "for": 22625616, "retrieval_score": 12.565379}
{"snippet": "os.getenv(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6668, "for": 22625616, "retrieval_score": 12.52768}
{"snippet": "os.getenv(key, default=None)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6669, "for": 22625616, "retrieval_score": 12.52768}
{"snippet": "os.getenvb(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6670, "for": 22625616, "retrieval_score": 12.52768}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947, "for": 22625616, "retrieval_score": 19.431398}
{"snippet": "re.findall(pattern, string, flags=0)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings . With arguments `flags`.", "question_id": 7948, "for": 22625616, "retrieval_score": 18.201134}
{"snippet": "re.finditer(pattern, string)", "intent": "Return an iterator yielding match objects over all non-overlapping matches for the RE `pattern` in `string` .", "question_id": 7949, "for": 22625616, "retrieval_score": 15.497622}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112, "for": 22625616, "retrieval_score": 15.439562}
{"snippet": "directory.glob(pattern)", "intent": "Add a list of files to the current component as specified in the glob `pattern` .", "question_id": 6111, "for": 22625616, "retrieval_score": 14.9844475}
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311, "for": 10586778, "retrieval_score": 20.159842}
{"snippet": "pdb.runeval(expression)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control .", "question_id": 7331, "for": 10586778, "retrieval_score": 14.06931}
{"snippet": "pdb.runeval(expression, globals=None)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control . With arguments `globals`.", "question_id": 7332, "for": 10586778, "retrieval_score": 13.178536}
{"snippet": "pdb.runeval(expression, locals=None)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control . With arguments `locals`.", "question_id": 7333, "for": 10586778, "retrieval_score": 13.178536}
{"snippet": "pdb.runeval(expression, globals=None, locals=None)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control . With arguments `globals`, `locals`.", "question_id": 7334, "for": 10586778, "retrieval_score": 12.90616}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 28684154, "retrieval_score": 19.026176}
{"snippet": "ZipFile.namelist()", "intent": "Return a list of archive members by name .", "question_id": 12805, "for": 28684154, "retrieval_score": 15.940701}
{"snippet": "NNTP.list()", "intent": "Send a LIST or LIST ACTIVE command .", "question_id": 6465, "for": 28684154, "retrieval_score": 15.787706}
{"snippet": "symbol.get_namespaces()", "intent": "Return a list of namespaces bound to this name .", "question_id": 9764, "for": 28684154, "retrieval_score": 15.535945}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 28684154, "retrieval_score": 15.522037}
{"snippet": "context.to_sci_string(x)", "intent": "Converts a number to a string using scientific notation . With arguments `x`.", "question_id": 2575, "for": 16962512, "retrieval_score": 21.532125}
{"snippet": "i_pv4_address.exploded", "intent": "The string representation in dotted decimal notation.", "question_id": 5177, "for": 16962512, "retrieval_score": 16.995752}
{"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478, "for": 16962512, "retrieval_score": 15.760552}
{"snippet": "decimal.to_eng_string(context=None)", "intent": "Convert to a string , using engineering notation if an exponent is needed . With arguments `context`.", "question_id": 2479, "for": 16962512, "retrieval_score": 14.718727}
{"snippet": "context.to_eng_string(x)", "intent": "Convert to a string , using engineering notation if an exponent is needed . With arguments `x`.", "question_id": 2573, "for": 16962512, "retrieval_score": 14.718727}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 41154648, "retrieval_score": 11.409581}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 41154648, "retrieval_score": 11.409581}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 41154648, "retrieval_score": 11.250601}
{"snippet": "sqlite3.register_adapter(type, callable)", "intent": "Registers a `callable` to convert the custom Python `type` type into one of SQLite \u2019 s supported types .", "question_id": 8800, "for": 41154648, "retrieval_score": 10.52771}
{"snippet": "Node.nodeType", "intent": "An integer representing the node type.", "question_id": 12314, "for": 41154648, "retrieval_score": 9.982555}
{"snippet": "gc.get_referrers(*objs)", "intent": "Return the list of objects that directly refer to any of objs . With arguments `*objs`.", "question_id": 4181, "for": 444058, "retrieval_score": 21.210281}
{"snippet": "gc.get_referents(*objs)", "intent": "Return a list of objects directly referred to by any of the arguments . With arguments `*objs`.", "question_id": 4182, "for": 444058, "retrieval_score": 17.727419}
{"snippet": "ZipFile.infolist()", "intent": "Return a list containing a ZipInfo object for each member of the archive .", "question_id": 12804, "for": 444058, "retrieval_score": 17.234333}
{"snippet": "html_calendar.cssclasses", "intent": "A list of CSS classes used for each weekday.", "question_id": 970, "for": 444058, "retrieval_score": 16.539524}
{"snippet": "NamedNodeMap.length", "intent": "The length of the attribute list.", "question_id": 12374, "for": 444058, "retrieval_score": 15.790989}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 35269374, "retrieval_score": 20.739737}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 35269374, "retrieval_score": 18.104792}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 35269374, "retrieval_score": 17.763107}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 35269374, "retrieval_score": 17.347345}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 35269374, "retrieval_score": 16.57945}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028, "for": 35269374, "retrieval_score": 17.70112}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 35269374, "retrieval_score": 16.957329}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010, "for": 35269374, "retrieval_score": 16.67435}
{"snippet": "inspect.getfullargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5011, "for": 35269374, "retrieval_score": 16.67435}
{"snippet": "inspect.getinnerframes(traceback, context=1)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "question_id": 5028, "for": 35269374, "retrieval_score": 16.523788}
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949, "for": 9534608, "retrieval_score": 12.68536}
{"snippet": "inspect.getmodulename(path)", "intent": "Return the name of the module named by the file `path` , without including the names of enclosing packages .", "question_id": 4947, "for": 9534608, "retrieval_score": 12.296221}
{"snippet": "linecache.getline(filename, lineno, module_globals=None)", "intent": "Get line `lineno` from file named `filename` . If a file named filename is not found , the function will look for it in the module search path , sys.path , after first checking for a PEP 302 __loader__ in `module_globals` , in case the module was imported from a zipfile or other non-filesystem import source .", "question_id": 5344, "for": 9534608, "retrieval_score": 12.290367}
{"snippet": "IMAP4.getquotaroot(mailbox)", "intent": "Get the list of quota roots for the named `mailbox` .", "question_id": 4705, "for": 9534608, "retrieval_score": 11.3372555}
{"snippet": "os.supports_dir_fd", "intent": "A Set object indicating which functions in the os module permit use of their dir_fd parameter.", "question_id": 6947, "for": 9534608, "retrieval_score": 11.245371}
{"snippet": "context.logical_xor(x, y)", "intent": "Applies the logical operation xor between each operand \u2019 s digits . With arguments `x`, `y`.", "question_id": 2548, "for": 432842, "retrieval_score": 17.8138}
{"snippet": "decimal.logical_and(other)", "intent": "logical_and ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2435, "for": 432842, "retrieval_score": 11.18308}
{"snippet": "decimal.logical_or(other)", "intent": "logical_or ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2439, "for": 432842, "retrieval_score": 11.18308}
{"snippet": "decimal.logical_xor(other)", "intent": "logical_xor ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2441, "for": 432842, "retrieval_score": 11.18308}
{"snippet": "decimal.logical_and(other, context=None)", "intent": "logical_and ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`, `context`.", "question_id": 2436, "for": 432842, "retrieval_score": 11.056651}
{"snippet": "context.logical_xor(x, y)", "intent": "Applies the logical operation xor between each operand \u2019 s digits . With arguments `x`, `y`.", "question_id": 2548, "for": 432842, "retrieval_score": 17.8138}
{"snippet": "decimal.logical_and(other)", "intent": "logical_and ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2435, "for": 432842, "retrieval_score": 11.18308}
{"snippet": "decimal.logical_or(other)", "intent": "logical_or ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2439, "for": 432842, "retrieval_score": 11.18308}
{"snippet": "decimal.logical_xor(other)", "intent": "logical_xor ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2441, "for": 432842, "retrieval_score": 11.18308}
{"snippet": "decimal.logical_and(other, context=None)", "intent": "logical_and ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`, `context`.", "question_id": 2436, "for": 432842, "retrieval_score": 11.056651}
{"snippet": "context.logical_xor(x, y)", "intent": "Applies the logical operation xor between each operand \u2019 s digits . With arguments `x`, `y`.", "question_id": 2548, "for": 432842, "retrieval_score": 17.8138}
{"snippet": "decimal.logical_and(other)", "intent": "logical_and ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2435, "for": 432842, "retrieval_score": 11.18308}
{"snippet": "decimal.logical_or(other)", "intent": "logical_or ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2439, "for": 432842, "retrieval_score": 11.18308}
{"snippet": "decimal.logical_xor(other)", "intent": "logical_xor ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2441, "for": 432842, "retrieval_score": 11.18308}
{"snippet": "decimal.logical_and(other, context=None)", "intent": "logical_and ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`, `context`.", "question_id": 2436, "for": 432842, "retrieval_score": 11.056651}
{"snippet": "context.logical_xor(x, y)", "intent": "Applies the logical operation xor between each operand \u2019 s digits . With arguments `x`, `y`.", "question_id": 2548, "for": 432842, "retrieval_score": 17.8138}
{"snippet": "decimal.logical_and(other)", "intent": "logical_and ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2435, "for": 432842, "retrieval_score": 11.18308}
{"snippet": "decimal.logical_or(other)", "intent": "logical_or ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2439, "for": 432842, "retrieval_score": 11.18308}
{"snippet": "decimal.logical_xor(other)", "intent": "logical_xor ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2441, "for": 432842, "retrieval_score": 11.18308}
{"snippet": "decimal.logical_and(other, context=None)", "intent": "logical_and ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`, `context`.", "question_id": 2436, "for": 432842, "retrieval_score": 11.056651}
{"snippet": "context.logical_xor(x, y)", "intent": "Applies the logical operation xor between each operand \u2019 s digits . With arguments `x`, `y`.", "question_id": 2548, "for": 432842, "retrieval_score": 18.171625}
{"snippet": "decimal.logical_and(other)", "intent": "logical_and ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2435, "for": 432842, "retrieval_score": 15.351883}
{"snippet": "decimal.logical_or(other)", "intent": "logical_or ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2439, "for": 432842, "retrieval_score": 15.351883}
{"snippet": "decimal.logical_xor(other)", "intent": "logical_xor ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2441, "for": 432842, "retrieval_score": 15.351883}
{"snippet": "decimal.logical_and(other, context=None)", "intent": "logical_and ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`, `context`.", "question_id": 2436, "for": 432842, "retrieval_score": 15.137474}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028, "for": 5048841, "retrieval_score": 26.254974}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 5048841, "retrieval_score": 22.963892}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271, "for": 5048841, "retrieval_score": 22.053799}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 5048841, "retrieval_score": 21.75936}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 5048841, "retrieval_score": 21.677843}
{"snippet": "dircmp.same_files", "intent": "Files which are identical in both a and b, using the class\u2019s file comparison operator.", "question_id": 3777, "for": 4697006, "retrieval_score": 15.509}
{"snippet": "dircmp.common_dirs", "intent": "Subdirectories in both a and b.", "question_id": 3774, "for": 4697006, "retrieval_score": 15.0183}
{"snippet": "dircmp.common_files", "intent": "Files in both a and b.", "question_id": 3775, "for": 4697006, "retrieval_score": 15.0183}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 4697006, "retrieval_score": 14.388127}
{"snippet": "dircmp.common", "intent": "Files and subdirectories in both a and b.", "question_id": 3771, "for": 4697006, "retrieval_score": 14.23576}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 4697006, "retrieval_score": 16.45063}
{"snippet": "re.split(pattern, string, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . With arguments `flags`.", "question_id": 7945, "for": 4697006, "retrieval_score": 15.22855}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 4697006, "retrieval_score": 13.268007}
{"snippet": "re.split(pattern, string, maxsplit=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list .", "question_id": 7944, "for": 4697006, "retrieval_score": 12.7086115}
{"snippet": "os.path.normpath(path)", "intent": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a `path` that contains symbolic links .", "question_id": 7162, "for": 4697006, "retrieval_score": 12.280001}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518, "for": 7974442, "retrieval_score": 23.360432}
{"snippet": "context.divmod(x, y)", "intent": "Divides two numbers and returns the integer part of the result . With arguments `x`, `y`.", "question_id": 2529, "for": 7974442, "retrieval_score": 19.983164}
{"snippet": "typing.Tuple", "intent": "Tuple type; Tuple[X, Y] is the type of a tuple of two items with the first item of type X and the second of type Y.", "question_id": 11335, "for": 7974442, "retrieval_score": 16.66118}
{"snippet": "context.compare_signal(x, y)", "intent": "Compares the values of the two operands numerically . With arguments `x`, `y`.", "question_id": 2521, "for": 7974442, "retrieval_score": 16.650875}
{"snippet": "context.remainder(x, y)", "intent": "Returns the remainder from integer division . With arguments `x`, `y`.", "question_id": 2565, "for": 7974442, "retrieval_score": 15.539987}
{"snippet": "weakref.ProxyTypes", "intent": "Sequence containing all the type objects for proxies.", "question_id": 12099, "for": 348196, "retrieval_score": 13.831858}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 348196, "retrieval_score": 10.661178}
{"snippet": "_thread.LockType", "intent": "This is the type of lock objects.", "question_id": 12942, "for": 348196, "retrieval_score": 10.618393}
{"snippet": "weakref.CallableProxyType", "intent": "The type object for proxies of callable objects.", "question_id": 12098, "for": 348196, "retrieval_score": 10.341753}
{"snippet": "email_message.get_charsets(failobj=None)", "intent": "Return a list containing the character set names in the message . If the subpart has no Content-Type header , no charset parameter , or is not of the text main MIME type , then that item in the returned list will be `failobj` .", "question_id": 3282, "for": 348196, "retrieval_score": 10.120737}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857, "for": 23914774, "retrieval_score": 21.58651}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 23914774, "retrieval_score": 21.58651}
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859, "for": 23914774, "retrieval_score": 21.58651}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861, "for": 23914774, "retrieval_score": 21.58651}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862, "for": 23914774, "retrieval_score": 21.58651}
{"snippet": "Packer.pack_string(s)", "intent": "Packs a variable length string , s. The length of the string is first packed as an unsigned integer , then the string data is packed with pack_fstring ( ) . With arguments `s`.", "question_id": 12279, "for": 4433017, "retrieval_score": 18.027147}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 4433017, "retrieval_score": 14.612674}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 4433017, "retrieval_score": 14.361959}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 4433017, "retrieval_score": 14.173558}
{"snippet": "int.to_bytes(length, byteorder, signed=False)", "intent": "Return an array of bytes representing an integer . The integer is represented using `length` bytes . The `byteorder` argument determines the byte order used to represent the integer . The `signed` argument determines whether two \u2019 s complement is used to represent the integer .", "question_id": 9144, "for": 4433017, "retrieval_score": 14.118132}
{"snippet": "shlex.push_token(str)", "intent": "Push the argument onto the token stack . With arguments `str`.", "question_id": 8284, "for": 20512297, "retrieval_score": 9.904377}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_SEQ", "intent": "Models which represent a series of models which follow one after the other are indicated with this model type.", "question_id": 7782, "for": 20512297, "retrieval_score": 9.841037}
{"snippet": "shlex.push_source(newstream)", "intent": "Push an input source stream onto the input stack . With arguments `newstream`.", "question_id": 8287, "for": 20512297, "retrieval_score": 9.437006}
{"snippet": "POP3.rset()", "intent": "Remove any deletion marks for the mailbox .", "question_id": 7613, "for": 20512297, "retrieval_score": 9.346564}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996, "for": 20512297, "retrieval_score": 9.341329}
{"snippet": "element.keys()", "intent": "Returns the elements attribute names as a list .", "question_id": 12487, "for": 11850425, "retrieval_score": 15.7442}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 11850425, "retrieval_score": 15.677011}
{"snippet": "scheduler.queue", "intent": "Read-only attribute returning a list of upcoming events in the order they will be run.", "question_id": 8130, "for": 11850425, "retrieval_score": 15.580553}
{"snippet": "counter.elements()", "intent": "Return an iterator over elements repeating each as many times as its count .", "question_id": 1342, "for": 11850425, "retrieval_score": 14.333679}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506, "for": 11850425, "retrieval_score": 13.969095}
{"snippet": "Element.setAttribute(name, value)", "intent": "Set an attribute `value` from a string . With arguments `name`.", "question_id": 12366, "for": 42180455, "retrieval_score": 19.388319}
{"snippet": "policy.header_source_parse(sourcelines)", "intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "question_id": 3423, "for": 42180455, "retrieval_score": 18.161596}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347, "for": 42180455, "retrieval_score": 16.926384}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058, "for": 42180455, "retrieval_score": 16.516964}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104, "for": 42180455, "retrieval_score": 15.733204}
{"snippet": "date.toordinal()", "intent": "Return the proleptic Gregorian ordinal of the date , where January 1 of year 1 has ordinal 1 .", "question_id": 2238, "for": 31547657, "retrieval_score": 42.93028}
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223, "for": 31547657, "retrieval_score": 42.267803}
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221, "for": 31547657, "retrieval_score": 42.134563}
{"snippet": "datetime.fromordinal(ordinal)", "intent": "Return the datetime corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2264, "for": 31547657, "retrieval_score": 42.134563}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 31547657, "retrieval_score": 41.092285}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 5352546, "retrieval_score": 28.83508}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 5352546, "retrieval_score": 28.83508}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 5352546, "retrieval_score": 21.287048}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 5352546, "retrieval_score": 20.282553}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 5352546, "retrieval_score": 20.282553}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 5352546, "retrieval_score": 28.83508}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 5352546, "retrieval_score": 28.83508}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 5352546, "retrieval_score": 21.287048}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 5352546, "retrieval_score": 20.282553}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 5352546, "retrieval_score": 20.282553}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518, "for": 5352546, "retrieval_score": 16.49068}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 5352546, "retrieval_score": 16.19595}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 5352546, "retrieval_score": 15.87354}
{"snippet": "config_parser.read_dict(dictionary, source='<dict>')", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order . Optional argument `source` specifies a context-specific name of the dictionary passed .", "question_id": 1519, "for": 5352546, "retrieval_score": 15.448536}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 5352546, "retrieval_score": 14.147583}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020, "for": 5352546, "retrieval_score": 18.145996}
{"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326, "for": 5352546, "retrieval_score": 17.91373}
{"snippet": "heapq.nsmallest(n, iterable, key=None)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4328, "for": 5352546, "retrieval_score": 17.91373}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 5352546, "retrieval_score": 17.86688}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 5352546, "retrieval_score": 17.238108}
{"snippet": "errno.EUNATCH", "intent": "Protocol driver not attached", "question_id": 3554, "for": 16114244, "retrieval_score": 11.911826}
{"snippet": "winreg.REG_RESOURCE_LIST", "intent": "A device-driver resource list.", "question_id": 12184, "for": 16114244, "retrieval_score": 11.575178}
{"snippet": "winsound.SND_NOWAIT", "intent": "Return immediately if the sound driver is busy.", "question_id": 12204, "for": 16114244, "retrieval_score": 11.084235}
{"snippet": "resource.getpagesize()", "intent": "Returns the number of bytes in a system page .", "question_id": 8096, "for": 16114244, "retrieval_score": 8.7609005}
{"snippet": "wsgiref.simple_server.demo_app(environ, start_response)", "intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "question_id": 12227, "for": 16114244, "retrieval_score": 8.383423}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896, "for": 8386675, "retrieval_score": 15.563496}
{"snippet": "bz2.compress(data, compresslevel=9)", "intent": "Compress `data` , a bytes-like object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 907, "for": 8386675, "retrieval_score": 14.398854}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908, "for": 8386675, "retrieval_score": 12.850198}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 8386675, "retrieval_score": 12.391568}
{"snippet": "zlib.compressobj(level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12913, "for": 8386675, "retrieval_score": 11.896685}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 9470142, "retrieval_score": 14.347498}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 9470142, "retrieval_score": 14.347498}
{"snippet": "deque.clear()", "intent": "Remove all elements from the deque leaving it with length 0 .", "question_id": 1355, "for": 9470142, "retrieval_score": 12.6140175}
{"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012, "for": 9470142, "retrieval_score": 11.502246}
{"snippet": "email_message.clear()", "intent": "Remove the payload and all of the headers .", "question_id": 3306, "for": 9470142, "retrieval_score": 10.4899235}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013, "for": 2261011, "retrieval_score": 11.916213}
{"snippet": "curses.resizeterm(nlines, ncols)", "intent": "Resize the standard and current windows to the specified dimensions , and adjusts other bookkeeping data used by the curses library that record the window dimensions ( in particular the SIGWINCH handler ) . With arguments `nlines`, `ncols`.", "question_id": 1976, "for": 2261011, "retrieval_score": 11.738132}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081, "for": 2261011, "retrieval_score": 11.457872}
{"snippet": "turtle.done()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11082, "for": 2261011, "retrieval_score": 11.457872}
{"snippet": "io_base.truncate()", "intent": "Resize the stream to the given `size` in bytes ( or the current position if size is not specified ) .", "question_id": 5078, "for": 2261011, "retrieval_score": 10.842657}
{"snippet": "os.path.normpath(path)", "intent": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a `path` that contains symbolic links .", "question_id": 7162, "for": 32926587, "retrieval_score": 21.049372}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682, "for": 32926587, "retrieval_score": 20.291021}
{"snippet": "syslog.syslog(priority, message)", "intent": "Send the string `message` to the system logger . Each message is tagged with a `priority` composed of a facility and a level .", "question_id": 9878, "for": 32926587, "retrieval_score": 19.06357}
{"snippet": "dircmp.right_only", "intent": "Files and subdirectories only in b.", "question_id": 3773, "for": 32926587, "retrieval_score": 18.834538}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 32926587, "retrieval_score": 18.292423}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508, "for": 16127862, "retrieval_score": 33.68983}
{"snippet": "test_result.failures", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11509, "for": 16127862, "retrieval_score": 33.68983}
{"snippet": "test_result.expectedFailures", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11511, "for": 16127862, "retrieval_score": 33.68983}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 16127862, "retrieval_score": 33.292854}
{"snippet": "traceback.format_list(extracted_list)", "intent": "Given a list of tuples or FrameSummary objects as returned by extract_tb ( ) or extract_stack ( ) , return a list of strings ready for printing . With arguments `extracted_list`.", "question_id": 10775, "for": 16127862, "retrieval_score": 32.674126}
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440, "for": 16127862, "retrieval_score": 27.407675}
{"snippet": "test_case.output", "intent": "A list of str objects with the formatted output of matching messages.", "question_id": 11416, "for": 16127862, "retrieval_score": 25.593987}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832, "for": 16127862, "retrieval_score": 25.171524}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947, "for": 16127862, "retrieval_score": 25.171473}
{"snippet": "re.findall(pattern, string, flags=0)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings . With arguments `flags`.", "question_id": 7948, "for": 16127862, "retrieval_score": 24.930775}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426, "for": 2054416, "retrieval_score": 22.975965}
{"snippet": "function.get_locals()", "intent": "Return a tuple containing names of locals in this function .", "question_id": 9748, "for": 2054416, "retrieval_score": 21.755484}
{"snippet": "function.get_globals()", "intent": "Return a tuple containing names of globals in this function .", "question_id": 9749, "for": 2054416, "retrieval_score": 21.755484}
{"snippet": "function.get_frees()", "intent": "Return a tuple containing names of free variables in this function .", "question_id": 9750, "for": 2054416, "retrieval_score": 21.229778}
{"snippet": "typing.Tuple", "intent": "Tuple type; Tuple[X, Y] is the type of a tuple of two items with the first item of type X and the second of type Y.", "question_id": 11335, "for": 2054416, "retrieval_score": 20.938732}
{"snippet": "calendar.Calendar(firstweekday=0)", "intent": "Creates a Calendar object . `firstweekday` is an integer specifying the first day of the week .", "question_id": 910, "for": 15509617, "retrieval_score": 19.347866}
{"snippet": "DAY_1 ... DAY_7", "intent": "Get the name of the n-th day of the week.", "question_id": 5359, "for": 15509617, "retrieval_score": 17.646166}
{"snippet": "ABDAY_1 ... ABDAY_7", "intent": "Get the abbreviated name of the n-th day of the week.", "question_id": 5360, "for": 15509617, "retrieval_score": 17.25542}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989, "for": 15509617, "retrieval_score": 16.978577}
{"snippet": "calendar.iterweekdays()", "intent": "Return an iterator for the week day numbers that will be used for one week .", "question_id": 911, "for": 15509617, "retrieval_score": 16.736216}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056, "for": 227459, "retrieval_score": 15.917701}
{"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055, "for": 227459, "retrieval_score": 15.595248}
{"snippet": "tracemalloc.get_traced_memory()", "intent": "Get the current size and peak size of memory blocks traced by the tracemalloc module as a tuple : ( current : int , peak : int ) .", "question_id": 10844, "for": 227459, "retrieval_score": 15.1472435}
{"snippet": "bytes.capitalize()", "intent": "Return a copy of the sequence with each byte interpreted as an ASCII character , and the first byte capitalized and the rest lowercased .", "question_id": 9375, "for": 227459, "retrieval_score": 13.926997}
{"snippet": "bytearray.capitalize()", "intent": "Return a copy of the sequence with each byte interpreted as an ASCII character , and the first byte capitalized and the rest lowercased .", "question_id": 9376, "for": 227459, "retrieval_score": 13.926997}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976, "for": 227459, "retrieval_score": 18.392794}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056, "for": 227459, "retrieval_score": 14.9507675}
{"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055, "for": 227459, "retrieval_score": 14.641981}
{"snippet": "tracemalloc.get_traced_memory()", "intent": "Get the current size and peak size of memory blocks traced by the tracemalloc module as a tuple : ( current : int , peak : int ) .", "question_id": 10844, "for": 227459, "retrieval_score": 14.503446}
{"snippet": "bytes.capitalize()", "intent": "Return a copy of the sequence with each byte interpreted as an ASCII character , and the first byte capitalized and the rest lowercased .", "question_id": 9375, "for": 227459, "retrieval_score": 13.2952585}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056, "for": 227459, "retrieval_score": 14.9507675}
{"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055, "for": 227459, "retrieval_score": 14.641981}
{"snippet": "tracemalloc.get_traced_memory()", "intent": "Get the current size and peak size of memory blocks traced by the tracemalloc module as a tuple : ( current : int , peak : int ) .", "question_id": 10844, "for": 227459, "retrieval_score": 14.503446}
{"snippet": "bytes.capitalize()", "intent": "Return a copy of the sequence with each byte interpreted as an ASCII character , and the first byte capitalized and the rest lowercased .", "question_id": 9375, "for": 227459, "retrieval_score": 13.2952585}
{"snippet": "bytearray.capitalize()", "intent": "Return a copy of the sequence with each byte interpreted as an ASCII character , and the first byte capitalized and the rest lowercased .", "question_id": 9376, "for": 227459, "retrieval_score": 13.2952585}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976, "for": 2331943, "retrieval_score": 13.318181}
{"snippet": "json_decoder.raw_decode(s)", "intent": "Decode a JSON document from `s` ( a str beginning with a JSON document ) and return a 2-tuple of the Python representation and the index in s where the document ended .", "question_id": 5321, "for": 2331943, "retrieval_score": 11.839444}
{"snippet": "email.utils.decode_rfc2231(s)", "intent": "Decode the string `s` according to RFC 2231 .", "question_id": 3478, "for": 2331943, "retrieval_score": 11.287595}
{"snippet": "json.JSONDecoder(parse_float=None)", "intent": "Simple JSON decoder . `parse_float` , if specified , will be called with the string of every JSON float to be decoded .", "question_id": 5312, "for": 2331943, "retrieval_score": 10.8250675}
{"snippet": "json.JSONDecoder(parse_int=None)", "intent": "Simple JSON decoder . `parse_int` , if specified , will be called with the string of every JSON int to be decoded .", "question_id": 5313, "for": 2331943, "retrieval_score": 10.8250675}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797, "for": 28538536, "retrieval_score": 10.073965}
{"snippet": "bdb.clear_break(filename, lineno)", "intent": "Delete the breakpoints in `filename` and `lineno` .", "question_id": 795, "for": 28538536, "retrieval_score": 9.535012}
{"snippet": "inspect.trace()", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in .", "question_id": 5032, "for": 28538536, "retrieval_score": 9.445889}
{"snippet": "inspect.trace(context=1)", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in . With arguments `context`.", "question_id": 5033, "for": 28538536, "retrieval_score": 9.163282}
{"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957, "for": 28538536, "retrieval_score": 8.907194}
{"snippet": "os.path.expanduser(path)", "intent": "On Unix and Windows , return the argument with an initial component of ~ or ~user replaced by that user \u2019 s home directory . An initial ~user is handled by stripping the last directory component from the created user `path` derived above .", "question_id": 7149, "for": 1397827, "retrieval_score": 21.52194}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243, "for": 1397827, "retrieval_score": 19.439697}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207, "for": 1397827, "retrieval_score": 19.257156}
{"snippet": "stream_reader.read()", "intent": "Decodes data from the stream and returns the resulting object .", "question_id": 1289, "for": 1397827, "retrieval_score": 18.915482}
{"snippet": "itertools.cycle(iterable)", "intent": "Make an iterator returning elements from the `iterable` and saving a copy of each .", "question_id": 5250, "for": 1397827, "retrieval_score": 18.224188}
{"snippet": "HMAC.hexdigest()", "intent": "Like digest ( ) except the digest is returned as a string twice the length containing only hexadecimal digits .", "question_id": 4336, "for": 13081090, "retrieval_score": 15.611615}
{"snippet": "hash.hexdigest()", "intent": "Like digest ( ) except the digest is returned as a string object of double length , containing only hexadecimal digits .", "question_id": 4306, "for": 13081090, "retrieval_score": 15.17756}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309, "for": 13081090, "retrieval_score": 15.17756}
{"snippet": "bytes.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9262, "for": 13081090, "retrieval_score": 14.45979}
{"snippet": "bytearray.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9268, "for": 13081090, "retrieval_score": 14.45979}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216, "for": 39373620, "retrieval_score": 11.256272}
{"snippet": "str.rjust(width)", "intent": "Return the string right justified in a string of length `width` .", "question_id": 9233, "for": 39373620, "retrieval_score": 11.256272}
{"snippet": "NamedNodeMap.length", "intent": "The length of the attribute list.", "question_id": 12374, "for": 39373620, "retrieval_score": 11.131277}
{"snippet": "str.center(width)", "intent": "Return centered in a string of length `width` .", "question_id": 9181, "for": 39373620, "retrieval_score": 10.892992}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 39373620, "retrieval_score": 10.223201}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745, "for": 39373620, "retrieval_score": 14.397204}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 39373620, "retrieval_score": 13.038448}
{"snippet": "tracemalloc.get_traceback_limit()", "intent": "Get the maximum number of frames stored in the traceback of a trace .", "question_id": 10843, "for": 39373620, "retrieval_score": 12.919082}
{"snippet": "text_wrapper.width", "intent": "(default: 70) The maximum length of wrapped lines.", "question_id": 10327, "for": 39373620, "retrieval_score": 12.805841}
{"snippet": "os.sched_get_priority_max(policy)", "intent": "Get the maximum priority value for `policy` .", "question_id": 7106, "for": 39373620, "retrieval_score": 12.78194}
{"snippet": "trace.runctx(cmd)", "intent": "Execute the command and gather statistics from the execution with the current tracing parameters , in the defined global and local environments . With arguments `cmd`.", "question_id": 10717, "for": 4965159, "retrieval_score": 13.095101}
{"snippet": "trace.run(cmd)", "intent": "Execute the command and gather statistics from the execution with the current tracing parameters . `cmd` must be a string or code object , suitable for passing into exec ( ) .", "question_id": 10716, "for": 4965159, "retrieval_score": 12.410492}
{"snippet": "SMTP.docmd(cmd)", "intent": "Send a command `cmd` to the server .", "question_id": 8509, "for": 4965159, "retrieval_score": 12.222166}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds)", "intent": "Run the `cmd` shell command . With arguments `**kwds`.", "question_id": 533, "for": 4965159, "retrieval_score": 11.903744}
{"snippet": "os.popen(cmd)", "intent": "Open a pipe to or from command `cmd` .", "question_id": 7041, "for": 4965159, "retrieval_score": 11.903744}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 36139, "retrieval_score": 11.352001}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 36139, "retrieval_score": 11.352001}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 36139, "retrieval_score": 7.7892017}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667, "for": 36139, "retrieval_score": 7.0596504}
{"snippet": "profile.runctx(command, globals, locals, filename=None, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `filename`, `sort`.", "question_id": 7668, "for": 36139, "retrieval_score": 6.9298377}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 36139, "retrieval_score": 11.352001}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 36139, "retrieval_score": 11.352001}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271, "for": 36139, "retrieval_score": 11.305924}
{"snippet": "pwd.getpwall()", "intent": "Return a list of all available password database entries , in arbitrary order .", "question_id": 7705, "for": 36139, "retrieval_score": 11.039171}
{"snippet": "spwd.getspall()", "intent": "Return a list of all available shadow password database entries , in arbitrary order .", "question_id": 8790, "for": 36139, "retrieval_score": 10.784716}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 36139, "retrieval_score": 13.238739}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 36139, "retrieval_score": 13.238739}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832, "for": 36139, "retrieval_score": 11.925521}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827, "for": 36139, "retrieval_score": 11.061008}
{"snippet": "importlib.machinery.SOURCE_SUFFIXES", "intent": "A list of strings representing the recognized file suffixes for source modules.", "question_id": 4865, "for": 36139, "retrieval_score": 10.800034}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832, "for": 36139, "retrieval_score": 16.090456}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 36139, "retrieval_score": 15.801352}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 36139, "retrieval_score": 15.801352}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827, "for": 36139, "retrieval_score": 14.924016}
{"snippet": "importlib.machinery.SOURCE_SUFFIXES", "intent": "A list of strings representing the recognized file suffixes for source modules.", "question_id": 4865, "for": 36139, "retrieval_score": 14.5718975}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929, "for": 24041436, "retrieval_score": 16.660206}
{"snippet": "auto.start", "intent": "The first index of invalid data in object.", "question_id": 3677, "for": 24041436, "retrieval_score": 13.981331}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 931, "for": 24041436, "retrieval_score": 13.6314945}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 24041436, "retrieval_score": 13.136564}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 24041436, "retrieval_score": 13.136564}
{"snippet": "test.support.get_attribute(obj, name)", "intent": "Get an attribute , raising unittest.SkipTest if AttributeError is raised . With arguments `obj`, `name`.", "question_id": 10257, "for": 9396706, "retrieval_score": 15.354163}
{"snippet": "tracemalloc.get_object_traceback(obj)", "intent": "Get the traceback where the Python object `obj` was allocated .", "question_id": 10842, "for": 9396706, "retrieval_score": 14.236271}
{"snippet": "unittest.mock.sentinel", "intent": "The sentinel object provides a convenient way of providing unique objects for your tests.", "question_id": 11645, "for": 9396706, "retrieval_score": 11.163774}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053, "for": 9396706, "retrieval_score": 11.016953}
{"snippet": "multiprocessing.sharedctypes.copy(obj)", "intent": "Return a ctypes object allocated from shared memory which is a copy of the ctypes object `obj` .", "question_id": 6275, "for": 9396706, "retrieval_score": 10.776638}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 12883376, "retrieval_score": 12.211819}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674, "for": 12883376, "retrieval_score": 12.032526}
{"snippet": "readline.set_completer_delims(string)", "intent": "Set or get the word delimiters for completion . With arguments `string`.", "question_id": 8046, "for": 12883376, "retrieval_score": 11.2973}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 12883376, "retrieval_score": 11.281595}
{"snippet": "Packer.pack_string(s)", "intent": "Packs a variable length string , s. The length of the string is first packed as an unsigned integer , then the string data is packed with pack_fstring ( ) . With arguments `s`.", "question_id": 12279, "for": 12883376, "retrieval_score": 10.128733}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499, "for": 22904654, "retrieval_score": 14.88731}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4502, "for": 22904654, "retrieval_score": 14.669339}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503, "for": 22904654, "retrieval_score": 14.641657}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4505, "for": 22904654, "retrieval_score": 14.40633}
{"snippet": "FileCookieJar.save(ignore_discard=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4500, "for": 22904654, "retrieval_score": 13.05044}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4502, "for": 22904654, "retrieval_score": 13.237278}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499, "for": 22904654, "retrieval_score": 13.208255}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503, "for": 22904654, "retrieval_score": 13.18277}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4505, "for": 22904654, "retrieval_score": 13.137577}
{"snippet": "FileCookieJar.save(ignore_discard=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4500, "for": 22904654, "retrieval_score": 13.05044}
{"snippet": "window.getbegyx()", "intent": "Return a tuple ( y , x ) of co-ordinates of upper-left corner .", "question_id": 2049, "for": 7125009, "retrieval_score": 18.732845}
{"snippet": "window.getyx()", "intent": "Return a tuple ( y , x ) of current cursor position relative to the window \u2019 s upper-left corner .", "question_id": 2063, "for": 7125009, "retrieval_score": 17.811153}
{"snippet": "window.mvwin(new_y, new_x)", "intent": "Move the window so its upper-left corner is at ( `new_y` , `new_x` ) .", "question_id": 2095, "for": 7125009, "retrieval_score": 14.39393}
{"snippet": "deque.appendleft(x)", "intent": "Add `x` to the left side of the deque .", "question_id": 1354, "for": 7125009, "retrieval_score": 12.802744}
{"snippet": "window.subpad(begin_y, begin_x)", "intent": "Return a sub-window , whose upper-left corner is at ( `begin_y` , `begin_x` ) , and whose width/height is ncols/nlines .", "question_id": 2117, "for": 7125009, "retrieval_score": 12.353622}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828, "for": 7125009, "retrieval_score": 19.068985}
{"snippet": "errno.EBFONT", "intent": "Bad font file format", "question_id": 3564, "for": 7125009, "retrieval_score": 10.268925}
{"snippet": "formatter.pop_font()", "intent": "Restore the previous font .", "question_id": 3829, "for": 7125009, "retrieval_score": 10.268925}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843, "for": 7125009, "retrieval_score": 10.268925}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985, "for": 7125009, "retrieval_score": 9.707404}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 312443, "retrieval_score": 14.04212}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895, "for": 312443, "retrieval_score": 11.387707}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898, "for": 312443, "retrieval_score": 11.387707}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 312443, "retrieval_score": 10.552963}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283, "for": 312443, "retrieval_score": 10.072525}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895, "for": 312443, "retrieval_score": 12.165063}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898, "for": 312443, "retrieval_score": 12.165063}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283, "for": 312443, "retrieval_score": 10.735377}
{"snippet": "os.path.splitdrive(path)", "intent": "Split the pathname `path` into a pair ( drive , tail ) where drive is either a mount point or the empty string .", "question_id": 7170, "for": 312443, "retrieval_score": 9.983018}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 312443, "retrieval_score": 9.850572}
{"snippet": "os.altsep", "intent": "An alternative character used by the operating system to separate pathname components, or None if only one separator character exists.", "question_id": 7124, "for": 39299703, "retrieval_score": 12.588682}
{"snippet": "inspect.CO_NOFREE", "intent": "The flag is set if there are no free or cell variables.", "question_id": 5046, "for": 39299703, "retrieval_score": 11.699409}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 39299703, "retrieval_score": 11.044019}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 39299703, "retrieval_score": 10.885977}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800, "for": 39299703, "retrieval_score": 10.463832}
{"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515, "for": 11403474, "retrieval_score": 19.567225}
{"snippet": "dir_entry.is_file(follow_symlinks=True)", "intent": "Return True if this entry is a file or a symbolic link pointing to a file ; return False if the entry is or points to a directory or other non-file entry , or if it doesn \u2019 t exist anymore . If `follow_symlinks` is False , return True only if this entry is a file ( without following symlinks ) ; return False if the entry is a directory or other non-file entry , or if it doesn \u2019 t exist anymore .", "question_id": 6913, "for": 11403474, "retrieval_score": 18.362946}
{"snippet": "os.getenv(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6668, "for": 11403474, "retrieval_score": 17.357687}
{"snippet": "os.getenv(key, default=None)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6669, "for": 11403474, "retrieval_score": 17.357687}
{"snippet": "os.getenvb(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6670, "for": 11403474, "retrieval_score": 17.357687}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 31650399, "retrieval_score": 19.507174}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 31650399, "retrieval_score": 19.507174}
{"snippet": "str.isdigit()", "intent": "Return true if all characters in the string are digits and there is at least one character , false otherwise .", "question_id": 9206, "for": 31650399, "retrieval_score": 17.212334}
{"snippet": "bytes.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9262, "for": 31650399, "retrieval_score": 16.892002}
{"snippet": "bytearray.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9268, "for": 31650399, "retrieval_score": 16.892002}
{"snippet": "auto.end", "intent": "The index after the last invalid data in object.", "question_id": 3678, "for": 20084487, "retrieval_score": 22.737339}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360, "for": 20084487, "retrieval_score": 21.60065}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361, "for": 20084487, "retrieval_score": 21.60065}
{"snippet": "deque.index(x)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1362, "for": 20084487, "retrieval_score": 21.60065}
{"snippet": "auto.start", "intent": "The first index of invalid data in object.", "question_id": 3677, "for": 20084487, "retrieval_score": 20.09197}
{"snippet": "test.support.optim_args_from_interpreter_flags()", "intent": "Return a list of command line arguments reproducing the current optimization settings in sys.flags .", "question_id": 10172, "for": 8217613, "retrieval_score": 17.021572}
{"snippet": "test.support.args_from_interpreter_flags()", "intent": "Return a list of command line arguments reproducing the current settings in sys.flags and sys.warnoptions .", "question_id": 10171, "for": 8217613, "retrieval_score": 16.646511}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 8217613, "retrieval_score": 16.37359}
{"snippet": "sys.flags", "intent": "The named tuple flags exposes the status of command line flags.", "question_id": 9790, "for": 8217613, "retrieval_score": 15.665409}
{"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103, "for": 8217613, "retrieval_score": 15.042489}
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232, "for": 18272066, "retrieval_score": 11.787389}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334, "for": 18272066, "retrieval_score": 11.365916}
{"snippet": "IMAP4.utf8_enabled", "intent": "Boolean value that is normally False, but is set to True if an enable() command is successfully issued for the UTF8=ACCEPT capability.", "question_id": 4756, "for": 18272066, "retrieval_score": 11.124708}
{"snippet": "email.policy.SMTPUTF8", "intent": "The same as SMTP except that utf8 is True.", "question_id": 3441, "for": 18272066, "retrieval_score": 10.322699}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 18272066, "retrieval_score": 10.3195915}
{"snippet": "ScrolledText.frame", "intent": "The frame which surrounds the text and scroll bar widgets.", "question_id": 10542, "for": 10972410, "retrieval_score": 16.26473}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543, "for": 10972410, "retrieval_score": 11.611737}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617, "for": 10972410, "retrieval_score": 10.401661}
{"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618, "for": 10972410, "retrieval_score": 10.401661}
{"snippet": "inspect.trace()", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in .", "question_id": 5032, "for": 10972410, "retrieval_score": 10.044015}
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440, "for": 29558007, "retrieval_score": 14.05403}
{"snippet": "itertools.groupby(iterable)", "intent": "Make an iterator that returns consecutive keys and groups from the `iterable` .", "question_id": 5253, "for": 29558007, "retrieval_score": 11.452003}
{"snippet": "uuid.uuid1()", "intent": "Generate a UUID from a host ID , sequence number , and the current time .", "question_id": 11957, "for": 29558007, "retrieval_score": 10.89634}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN", "intent": "Raised when an input byte could not properly be assigned to a character; for example, a NUL byte (value 0) in a UTF-8 input stream.", "question_id": 7793, "for": 29558007, "retrieval_score": 10.660249}
{"snippet": "uuid.UUID()", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11937, "for": 29558007, "retrieval_score": 10.483676}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 3855093, "retrieval_score": 17.441372}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303, "for": 3855093, "retrieval_score": 13.311853}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348, "for": 3855093, "retrieval_score": 12.271778}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916, "for": 3855093, "retrieval_score": 11.613973}
{"snippet": "charset.output_codec", "intent": "The name of the Python codec used to convert Unicode to the output_charset.", "question_id": 2917, "for": 3855093, "retrieval_score": 11.613973}
{"snippet": "style.theme_create(themename, parent=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme .", "question_id": 10687, "for": 16128833, "retrieval_score": 8.022615}
{"snippet": "subprocess.DETACHED_PROCESS", "intent": "A Popen creationflags parameter to specify that a new process will not inherit its parent\u2019s console.", "question_id": 9656, "for": 16128833, "retrieval_score": 7.697538}
{"snippet": "xdrlib.ConversionError", "intent": "Class derived from Error.", "question_id": 12301, "for": 16128833, "retrieval_score": 7.4364333}
{"snippet": "subprocess.CREATE_DEFAULT_ERROR_MODE", "intent": "A Popen creationflags parameter to specify that a new process does not inherit the error mode of the calling process.", "question_id": 9657, "for": 16128833, "retrieval_score": 7.086423}
{"snippet": "subprocess.SubprocessError", "intent": "Base class for all other exceptions from this module.", "question_id": 9586, "for": 16128833, "retrieval_score": 6.492328}
{"snippet": "mh_message.remove_sequence(sequence)", "intent": "Remove `sequence` from the list of sequences that include this message .", "question_id": 5837, "for": 14961014, "retrieval_score": 18.971775}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 452, "for": 14961014, "retrieval_score": 16.507149}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 6206, "for": 14961014, "retrieval_score": 16.507149}
{"snippet": "simple_queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 6213, "for": 14961014, "retrieval_score": 16.507149}
{"snippet": "Queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 7854, "for": 14961014, "retrieval_score": 16.507149}
{"snippet": "random.randrange(stop)", "intent": "Return a randomly selected element from range ( start , `stop` , step ) .", "question_id": 7890, "for": 306400, "retrieval_score": 12.146596}
{"snippet": "random.randrange(start, stop, step)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7891, "for": 306400, "retrieval_score": 12.146596}
{"snippet": "random.randrange(start, stop)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7892, "for": 306400, "retrieval_score": 12.146596}
{"snippet": "secrets.choice(sequence)", "intent": "Return a randomly-chosen element from a non-empty `sequence` .", "question_id": 8132, "for": 306400, "retrieval_score": 12.146596}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 452, "for": 306400, "retrieval_score": 11.996591}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 3931541, "retrieval_score": 20.994822}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 3931541, "retrieval_score": 20.993608}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api)", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10267, "for": 3931541, "retrieval_score": 20.953129}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268, "for": 3931541, "retrieval_score": 20.953129}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 3931541, "retrieval_score": 20.445692}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 3931541, "retrieval_score": 20.158504}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api)", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10267, "for": 3931541, "retrieval_score": 19.073545}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268, "for": 3931541, "retrieval_score": 19.073545}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 3931541, "retrieval_score": 18.413391}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154, "for": 3931541, "retrieval_score": 17.635656}
{"snippet": "random.uniform(a, b)", "intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "question_id": 7907, "for": 163542, "retrieval_score": 14.089645}
{"snippet": "Popen.communicate()", "intent": "Interact with process : Send data to stdin .", "question_id": 9612, "for": 163542, "retrieval_score": 13.766143}
{"snippet": "Popen.communicate(input=None)", "intent": "Interact with process : Send data to stdin . The optional `input` argument should be data to be sent to the child process , or None , if no data should be sent to the child .", "question_id": 9613, "for": 163542, "retrieval_score": 13.739763}
{"snippet": "Popen.communicate(timeout=None)", "intent": "Interact with process : Send data to stdin . If the process does not terminate after `timeout` seconds , a TimeoutExpired exception will be raised .", "question_id": 9614, "for": 163542, "retrieval_score": 13.588514}
{"snippet": "asyncio.subprocess.DEVNULL", "intent": "Special value that can be used as the stdin, stdout or stderr argument to process creation functions.", "question_id": 545, "for": 163542, "retrieval_score": 13.428035}
{"snippet": "Popen.communicate()", "intent": "Interact with process : Send data to stdin .", "question_id": 9612, "for": 163542, "retrieval_score": 13.766143}
{"snippet": "Popen.communicate(input=None)", "intent": "Interact with process : Send data to stdin . The optional `input` argument should be data to be sent to the child process , or None , if no data should be sent to the child .", "question_id": 9613, "for": 163542, "retrieval_score": 13.739763}
{"snippet": "Popen.communicate(timeout=None)", "intent": "Interact with process : Send data to stdin . If the process does not terminate after `timeout` seconds , a TimeoutExpired exception will be raised .", "question_id": 9614, "for": 163542, "retrieval_score": 13.588514}
{"snippet": "asyncio.subprocess.DEVNULL", "intent": "Special value that can be used as the stdin, stdout or stderr argument to process creation functions.", "question_id": 545, "for": 163542, "retrieval_score": 13.428035}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126, "for": 163542, "retrieval_score": 13.295478}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 18637651, "retrieval_score": 33.279037}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 18637651, "retrieval_score": 31.671156}
{"snippet": "Request.header_items()", "intent": "Return a list of tuples ( header_name , header_value ) of the Request headers .", "question_id": 11833, "for": 18637651, "retrieval_score": 29.561134}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 18637651, "retrieval_score": 28.259306}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670, "for": 18637651, "retrieval_score": 27.934895}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 18637651, "retrieval_score": 26.1329}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971, "for": 18637651, "retrieval_score": 25.412947}
{"snippet": "email_message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 3248, "for": 18637651, "retrieval_score": 25.412947}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 18637651, "retrieval_score": 24.865059}
{"snippet": "Request.header_items()", "intent": "Return a list of tuples ( header_name , header_value ) of the Request headers .", "question_id": 11833, "for": 18637651, "retrieval_score": 24.241116}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 20504881, "retrieval_score": 21.031172}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 20504881, "retrieval_score": 20.48325}
{"snippet": "widget.identify_region(x, y)", "intent": "Returns one of : With arguments `x`, `y`.", "question_id": 10637, "for": 20504881, "retrieval_score": 20.129051}
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333, "for": 20504881, "retrieval_score": 20.016323}
{"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919, "for": 20504881, "retrieval_score": 19.11789}
{"snippet": "mime_version_header.version", "intent": "The version number as a string, with any whitespace and/or comments removed.", "question_id": 3164, "for": 21261330, "retrieval_score": 17.262701}
{"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515, "for": 21261330, "retrieval_score": 17.128443}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 21261330, "retrieval_score": 16.98671}
{"snippet": "re.split(pattern, string, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . With arguments `flags`.", "question_id": 7945, "for": 21261330, "retrieval_score": 16.861412}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 21261330, "retrieval_score": 16.684175}
{"snippet": "tracemalloc.get_object_traceback(obj)", "intent": "Get the traceback where the Python object `obj` was allocated .", "question_id": 10842, "for": 6886493, "retrieval_score": 16.122742}
{"snippet": "mock.reset_mock()", "intent": "The reset_mock method resets all the call attributes on a mock object :", "question_id": 11578, "for": 6886493, "retrieval_score": 13.200165}
{"snippet": "pickle.dump(obj, file, protocol=None)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) .", "question_id": 7364, "for": 6886493, "retrieval_score": 12.322666}
{"snippet": "pickle.dump(obj, file)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file .", "question_id": 7363, "for": 6886493, "retrieval_score": 12.299707}
{"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037, "for": 6886493, "retrieval_score": 12.087372}
{"snippet": "mock.reset_mock()", "intent": "The reset_mock method resets all the call attributes on a mock object :", "question_id": 11578, "for": 6886493, "retrieval_score": 13.200165}
{"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037, "for": 6886493, "retrieval_score": 12.087372}
{"snippet": "inspect.getdoc(object)", "intent": "Get the documentation string for an `object` , cleaned up with cleandoc ( ) .", "question_id": 4969, "for": 6886493, "retrieval_score": 12.067457}
{"snippet": "object.__dict__", "intent": "A dictionary or other mapping object used to store an object\u2019s (writable) attributes.", "question_id": 9499, "for": 6886493, "retrieval_score": 11.605302}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003, "for": 6886493, "retrieval_score": 11.5466795}
{"snippet": "mock.reset_mock()", "intent": "The reset_mock method resets all the call attributes on a mock object :", "question_id": 11578, "for": 6886493, "retrieval_score": 13.200165}
{"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037, "for": 6886493, "retrieval_score": 12.087372}
{"snippet": "inspect.getdoc(object)", "intent": "Get the documentation string for an `object` , cleaned up with cleandoc ( ) .", "question_id": 4969, "for": 6886493, "retrieval_score": 12.067457}
{"snippet": "object.__dict__", "intent": "A dictionary or other mapping object used to store an object\u2019s (writable) attributes.", "question_id": 9499, "for": 6886493, "retrieval_score": 11.605302}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003, "for": 6886493, "retrieval_score": 11.5466795}
{"snippet": "window.mvderwin(y, x)", "intent": "Move the window inside its parent window . With arguments `y`, `x`.", "question_id": 2094, "for": 16389188, "retrieval_score": 13.773986}
{"snippet": "Panel.replace(win)", "intent": "Change the window associated with the panel to the window `win` .", "question_id": 2151, "for": 16389188, "retrieval_score": 13.773986}
{"snippet": "window.erase()", "intent": "Clear the window .", "question_id": 2048, "for": 16389188, "retrieval_score": 13.358999}
{"snippet": "subprocess.SW_HIDE", "intent": "Hides the window.", "question_id": 9644, "for": 16389188, "retrieval_score": 13.358999}
{"snippet": "window.syncup()", "intent": "Touch all locations in ancestors of the window that have been changed in the window .", "question_id": 2123, "for": 16389188, "retrieval_score": 12.972654}
{"snippet": "i_pv4_address.exploded", "intent": "The string representation in dotted decimal notation.", "question_id": 5177, "for": 14159753, "retrieval_score": 12.802612}
{"snippet": "i_pv4_network.exploded", "intent": "A string representation of the network, with the mask in prefix notation.", "question_id": 5200, "for": 14159753, "retrieval_score": 12.730337}
{"snippet": "i_pv4_interface.with_prefixlen", "intent": "A string representation of the interface with the mask in prefix notation.", "question_id": 5227, "for": 14159753, "retrieval_score": 12.730337}
{"snippet": "i_pv4_network.with_netmask", "intent": "A string representation of the network, with the mask in net mask notation.", "question_id": 5201, "for": 14159753, "retrieval_score": 12.448594}
{"snippet": "i_pv4_network.with_hostmask", "intent": "A string representation of the network, with the mask in host mask notation.", "question_id": 5202, "for": 14159753, "retrieval_score": 12.448594}
{"snippet": "Popen.poll()", "intent": "Check if child process has terminated .", "question_id": 9609, "for": 29530232, "retrieval_score": 15.042798}
{"snippet": "Node.hasAttributes()", "intent": "Returns true if the node has any attributes .", "question_id": 12327, "for": 29530232, "retrieval_score": 12.2155285}
{"snippet": "Node.hasChildNodes()", "intent": "Returns true if the node has any child nodes .", "question_id": 12328, "for": 29530232, "retrieval_score": 11.90536}
{"snippet": "queue_listener.hasHandlers()", "intent": "Checks to see if this logger has any handlers configured .", "question_id": 5593, "for": 29530232, "retrieval_score": 11.610552}
{"snippet": "context.is_qnan(x)", "intent": "Returns True if `x` is a quiet NaN ; otherwise returns False .", "question_id": 2537, "for": 29530232, "retrieval_score": 9.92839}
{"snippet": "errno.EDOM", "intent": "Math argument out of domain of func", "question_id": 3538, "for": 4979542, "retrieval_score": 15.81078}
{"snippet": "Unpacker.unpack_list(unpack_item)", "intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "question_id": 12297, "for": 4979542, "retrieval_score": 15.158595}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368, "for": 4979542, "retrieval_score": 14.148531}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 4979542, "retrieval_score": 13.338029}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145, "for": 4979542, "retrieval_score": 13.163576}
{"snippet": "email.utils.decode_rfc2231(s)", "intent": "Decode the string `s` according to RFC 2231 .", "question_id": 3478, "for": 9880173, "retrieval_score": 7.00368}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141, "for": 9880173, "retrieval_score": 6.6568217}
{"snippet": "auto.object", "intent": "The object the codec was attempting to encode or decode.", "question_id": 3676, "for": 9880173, "retrieval_score": 6.6568217}
{"snippet": "codecs.CodecInfo(encode, decode, name=None)", "intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`.", "question_id": 1206, "for": 9880173, "retrieval_score": 6.4946327}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None, name=None)", "intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`, `streamreader`.", "question_id": 1210, "for": 9880173, "retrieval_score": 6.37521}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372, "for": 41178532, "retrieval_score": 15.348443}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841, "for": 41178532, "retrieval_score": 15.230994}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136, "for": 41178532, "retrieval_score": 14.815239}
{"snippet": "random.vonmisesvariate(mu, kappa)", "intent": "`mu` is the mean angle , expressed in radians between 0 and 2*pi , and `kappa` is the concentration parameter , which must be greater than or equal to zero .", "question_id": 7915, "for": 41178532, "retrieval_score": 14.80918}
{"snippet": "tracemalloc.get_traceback_limit()", "intent": "Get the maximum number of frames stored in the traceback of a trace .", "question_id": 10843, "for": 41178532, "retrieval_score": 14.7958355}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 8704952, "retrieval_score": 12.932742}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 8704952, "retrieval_score": 12.49888}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 8704952, "retrieval_score": 12.38703}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670, "for": 8704952, "retrieval_score": 11.6467905}
{"snippet": "urllib.parse.urlencode(query, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11737, "for": 8704952, "retrieval_score": 11.468585}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508, "for": 8704952, "retrieval_score": 18.514187}
{"snippet": "test_result.failures", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11509, "for": 8704952, "retrieval_score": 18.514187}
{"snippet": "test_result.expectedFailures", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11511, "for": 8704952, "retrieval_score": 18.514187}
{"snippet": "test_result.skipped", "intent": "A list containing 2-tuples of TestCase instances and strings holding the reason for skipping the test.", "question_id": 11510, "for": 8704952, "retrieval_score": 16.951263}
{"snippet": "traceback.format_list(extracted_list)", "intent": "Given a list of tuples or FrameSummary objects as returned by extract_tb ( ) or extract_stack ( ) , return a list of strings ready for printing . With arguments `extracted_list`.", "question_id": 10775, "for": 8704952, "retrieval_score": 16.863432}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 8704952, "retrieval_score": 15.719463}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 8704952, "retrieval_score": 15.636639}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670, "for": 8704952, "retrieval_score": 15.4186535}
{"snippet": "NNTP.list(group_pattern=None, file=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` . With arguments `file`.", "question_id": 6468, "for": 8704952, "retrieval_score": 15.187963}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 8704952, "retrieval_score": 15.063558}
{"snippet": "asyncio.current_task(loop=None)", "intent": "Return the currently running Task instance , or None if no task is running . If `loop` is None get_running_loop ( ) is used to get the current loop .", "question_id": 621, "for": 27867754, "retrieval_score": 12.51061}
{"snippet": "tkinter.tix.ExFileSelectBox", "intent": "The ExFileSelectBox widget is usually embedded in a tixExFileSelectDialog widget.", "question_id": 10567, "for": 27867754, "retrieval_score": 11.979795}
{"snippet": "turtle.listen()", "intent": "Set focus on TurtleScreen ( in order to collect key-events ) .", "question_id": 11063, "for": 27867754, "retrieval_score": 11.602338}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081, "for": 27867754, "retrieval_score": 11.457872}
{"snippet": "turtle.done()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11082, "for": 27867754, "retrieval_score": 11.457872}
{"snippet": "widget.selection_toggle(*items)", "intent": "Toggle the selection state of each item in items . With arguments `*items`.", "question_id": 10657, "for": 36113747, "retrieval_score": 19.768736}
{"snippet": "operator.itemgetter(*items)", "intent": "Return a callable object that fetches item from its operand using the operand \u2019 s __getitem__ ( ) method . With arguments `*items`.", "question_id": 6585, "for": 36113747, "retrieval_score": 15.744561}
{"snippet": "Packer.pack_list(list, pack_item)", "intent": "Packs a `list` of homogeneous items . `pack_item` is the function that is called to pack the individual item .", "question_id": 12282, "for": 36113747, "retrieval_score": 15.06635}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640, "for": 36113747, "retrieval_score": 14.693492}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 36113747, "retrieval_score": 14.421961}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529, "for": 7794208, "retrieval_score": 36.561157}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 7794208, "retrieval_score": 32.064766}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 7794208, "retrieval_score": 32.064766}
{"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241, "for": 7794208, "retrieval_score": 32.064766}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242, "for": 7794208, "retrieval_score": 32.064766}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962, "for": 13628725, "retrieval_score": 17.421276}
{"snippet": "date.month", "intent": "Between 1 and 12 inclusive.", "question_id": 2227, "for": 13628725, "retrieval_score": 13.019556}
{"snippet": "datetime.month", "intent": "Between 1 and 12 inclusive.", "question_id": 2273, "for": 13628725, "retrieval_score": 13.019556}
{"snippet": "secrets.SystemRandom", "intent": "A class for generating random numbers using the highest-quality sources provided by the operating system.", "question_id": 8131, "for": 13628725, "retrieval_score": 12.582144}
{"snippet": "random.SystemRandom()", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system .", "question_id": 7921, "for": 13628725, "retrieval_score": 12.316605}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962, "for": 13628725, "retrieval_score": 17.421276}
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133, "for": 13628725, "retrieval_score": 16.241589}
{"snippet": "random.random()", "intent": "Return the next random floating point number in the range [ 0.0 , 1.0 ) .", "question_id": 7906, "for": 13628725, "retrieval_score": 15.20031}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499, "for": 13628725, "retrieval_score": 14.004051}
{"snippet": "sequence_matcher.ratio()", "intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "question_id": 2687, "for": 13628725, "retrieval_score": 13.660078}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716, "for": 764235, "retrieval_score": 22.60315}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 764235, "retrieval_score": 20.535505}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 764235, "retrieval_score": 18.461313}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 764235, "retrieval_score": 18.461313}
{"snippet": "ssl.enum_certificates(store_name)", "intent": "Retrieve certificates from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8899, "for": 764235, "retrieval_score": 18.217356}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716, "for": 764235, "retrieval_score": 22.60315}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 764235, "retrieval_score": 20.535505}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 764235, "retrieval_score": 18.461313}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 764235, "retrieval_score": 18.461313}
{"snippet": "ssl.enum_certificates(store_name)", "intent": "Retrieve certificates from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8899, "for": 764235, "retrieval_score": 18.217356}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 764235, "retrieval_score": 29.093124}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 764235, "retrieval_score": 26.898506}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 764235, "retrieval_score": 24.86599}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 764235, "retrieval_score": 24.86599}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490, "for": 764235, "retrieval_score": 24.302681}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 34197047, "retrieval_score": 17.792654}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 34197047, "retrieval_score": 15.927755}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 34197047, "retrieval_score": 15.587398}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 34197047, "retrieval_score": 15.209647}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045, "for": 34197047, "retrieval_score": 14.810907}
{"snippet": "cursor.connection", "intent": "This read-only attribute provides the SQLite database Connection used by the Cursor object.", "question_id": 8853, "for": 7831371, "retrieval_score": 22.89437}
{"snippet": "connection.executescript(sql_script)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executescript ( ) method with the given `sql_script` , and returns the cursor .", "question_id": 8815, "for": 7831371, "retrieval_score": 20.68169}
{"snippet": "connection.execute(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8811, "for": 7831371, "retrieval_score": 20.162094}
{"snippet": "connection.execute(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8812, "for": 7831371, "retrieval_score": 20.162094}
{"snippet": "connection.executemany(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executemany ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8813, "for": 7831371, "retrieval_score": 20.162094}
{"snippet": "site.USER_SITE", "intent": "Path to the user site-packages for the running Python.", "question_id": 8404, "for": 3283306, "retrieval_score": 15.691318}
{"snippet": "sys.executable", "intent": "A string giving the absolute path of the executable binary for the Python interpreter, on systems where this makes sense.", "question_id": 9787, "for": 3283306, "retrieval_score": 14.617206}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 3283306, "retrieval_score": 14.024681}
{"snippet": "time.CLOCK_UPTIME", "intent": "Time whose absolute value is the time the system has been running and not suspended, providing accurate uptime measurement, both absolute and interval.", "question_id": 10470, "for": 3283306, "retrieval_score": 12.374702}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168, "for": 3283306, "retrieval_score": 12.290751}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009, "for": 2173797, "retrieval_score": 15.011219}
{"snippet": "turtle.shapetransform(t12=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11010, "for": 2173797, "retrieval_score": 15.011219}
{"snippet": "turtle.shapetransform(t21=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11011, "for": 2173797, "retrieval_score": 15.011219}
{"snippet": "turtle.shapetransform(t11=None, t12=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11013, "for": 2173797, "retrieval_score": 15.011219}
{"snippet": "turtle.shapetransform(t11=None, t21=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11014, "for": 2173797, "retrieval_score": 15.011219}
{"snippet": "readline.set_completer_delims(string)", "intent": "Set or get the word delimiters for completion . With arguments `string`.", "question_id": 8046, "for": 7658932, "retrieval_score": 16.422316}
{"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047, "for": 7658932, "retrieval_score": 14.724363}
{"snippet": "PurePath.drive", "intent": "A string representing the drive letter or name, if any:", "question_id": 7244, "for": 7658932, "retrieval_score": 13.34525}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638, "for": 7658932, "retrieval_score": 12.551873}
{"snippet": "crypt.crypt(word, salt=None)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "question_id": 1675, "for": 7658932, "retrieval_score": 12.20703}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 8901996, "retrieval_score": 16.11045}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 8901996, "retrieval_score": 14.659707}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 8901996, "retrieval_score": 14.659707}
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440, "for": 8901996, "retrieval_score": 14.01367}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 8901996, "retrieval_score": 13.711544}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 464736, "retrieval_score": 13.33489}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 464736, "retrieval_score": 13.33489}
{"snippet": "bytearray.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9355, "for": 464736, "retrieval_score": 13.33489}
{"snippet": "bytearray.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9356, "for": 464736, "retrieval_score": 13.33489}
{"snippet": "bytes.split()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9363, "for": 464736, "retrieval_score": 13.33489}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412, "for": 82831, "retrieval_score": 13.024815}
{"snippet": "logging.config.fileConfig(fname, defaults=None)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "question_id": 5413, "for": 82831, "retrieval_score": 12.724589}
{"snippet": "logging.config.fileConfig(fname, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `disable_existing_loggers`.", "question_id": 5414, "for": 82831, "retrieval_score": 12.724589}
{"snippet": "logging.config.fileConfig(fname, defaults=None, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`, `disable_existing_loggers`.", "question_id": 5415, "for": 82831, "retrieval_score": 12.437893}
{"snippet": "errno.EEXIST", "intent": "File exists", "question_id": 3522, "for": 82831, "retrieval_score": 11.7534}
{"snippet": "Path.exists()", "intent": "Whether the path points to an existing file or directory :", "question_id": 7269, "for": 82831, "retrieval_score": 16.08841}
{"snippet": "errno.EEXIST", "intent": "File exists", "question_id": 3522, "for": 82831, "retrieval_score": 15.111361}
{"snippet": "Path.samefile(other_path)", "intent": "Return whether this path points to the same file as `other_path` , which can be either a Path object , or a string .", "question_id": 7314, "for": 82831, "retrieval_score": 13.845375}
{"snippet": "FileExistsError", "intent": "Raised when trying to create a file or directory which already exists.", "question_id": 3693, "for": 82831, "retrieval_score": 12.725472}
{"snippet": "Path.touch(exist_ok=True)", "intent": "Create a file at this given path . If the file already exists , the function succeeds if `exist_ok` is true ( and its modification time is updated to the current time ) , otherwise FileExistsError is raised .", "question_id": 7319, "for": 82831, "retrieval_score": 12.690397}
{"snippet": "errno.EEXIST", "intent": "File exists", "question_id": 3522, "for": 82831, "retrieval_score": 15.111361}
{"snippet": "Path.exists()", "intent": "Whether the path points to an existing file or directory :", "question_id": 7269, "for": 82831, "retrieval_score": 14.850494}
{"snippet": "Path.samefile(other_path)", "intent": "Return whether this path points to the same file as `other_path` , which can be either a Path object , or a string .", "question_id": 7314, "for": 82831, "retrieval_score": 12.872469}
{"snippet": "Path.touch(exist_ok=True)", "intent": "Create a file at this given path . If the file already exists , the function succeeds if `exist_ok` is true ( and its modification time is updated to the current time ) , otherwise FileExistsError is raised .", "question_id": 7319, "for": 82831, "retrieval_score": 11.901685}
{"snippet": "FileExistsError", "intent": "Raised when trying to create a file or directory which already exists.", "question_id": 3693, "for": 82831, "retrieval_score": 11.545973}
{"snippet": "errno.EEXIST", "intent": "File exists", "question_id": 3522, "for": 82831, "retrieval_score": 11.7534}
{"snippet": "abc_meta.__subclasshook__(subclass)", "intent": "( Must be defined as a class method . ) Check whether `subclass` is considered a subclass of this ABC .", "question_id": 3, "for": 82831, "retrieval_score": 11.217343}
{"snippet": "doctest.OutputChecker", "intent": "A class used to check the whether the actual output from a doctest example matches the expected output.", "question_id": 2883, "for": 82831, "retrieval_score": 10.991919}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439, "for": 82831, "retrieval_score": 9.866189}
{"snippet": "FileExistsError", "intent": "Raised when trying to create a file or directory which already exists.", "question_id": 3693, "for": 82831, "retrieval_score": 9.775989}
{"snippet": "errno.EEXIST", "intent": "File exists", "question_id": 3522, "for": 82831, "retrieval_score": 11.7534}
{"snippet": "abc_meta.__subclasshook__(subclass)", "intent": "( Must be defined as a class method . ) Check whether `subclass` is considered a subclass of this ABC .", "question_id": 3, "for": 82831, "retrieval_score": 11.217343}
{"snippet": "doctest.OutputChecker", "intent": "A class used to check the whether the actual output from a doctest example matches the expected output.", "question_id": 2883, "for": 82831, "retrieval_score": 10.991919}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439, "for": 82831, "retrieval_score": 9.866189}
{"snippet": "FileExistsError", "intent": "Raised when trying to create a file or directory which already exists.", "question_id": 3693, "for": 82831, "retrieval_score": 9.775989}
{"snippet": "mailbox.NoSuchMailboxError", "intent": "Raised when a mailbox is expected but is not found, such as when instantiating a Mailbox subclass with a path that does not exist (and with the create parameter set to False), or when opening a folder that does not exist.", "question_id": 5857, "for": 82831, "retrieval_score": 17.279274}
{"snippet": "formatter.add_line_break()", "intent": "Add a hard line break if one does not already exist .", "question_id": 3820, "for": 82831, "retrieval_score": 16.004602}
{"snippet": "xml.dom.NotFoundErr", "intent": "Exception when a node does not exist in the referenced context.", "question_id": 12390, "for": 82831, "retrieval_score": 16.004602}
{"snippet": "configparser.InterpolationMissingOptionError", "intent": "Exception raised when an option referenced from a value does not exist.", "question_id": 1598, "for": 82831, "retrieval_score": 15.626987}
{"snippet": "mailbox.mbox(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in mbox format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5770, "for": 82831, "retrieval_score": 14.932859}
{"snippet": "formatter.add_line_break()", "intent": "Add a hard line break if one does not already exist .", "question_id": 3820, "for": 82831, "retrieval_score": 16.004602}
{"snippet": "xml.dom.NotFoundErr", "intent": "Exception when a node does not exist in the referenced context.", "question_id": 12390, "for": 82831, "retrieval_score": 16.004602}
{"snippet": "configparser.InterpolationMissingOptionError", "intent": "Exception raised when an option referenced from a value does not exist.", "question_id": 1598, "for": 82831, "retrieval_score": 15.626987}
{"snippet": "mailbox.NoSuchMailboxError", "intent": "Raised when a mailbox is expected but is not found, such as when instantiating a Mailbox subclass with a path that does not exist (and with the create parameter set to False), or when opening a folder that does not exist.", "question_id": 5857, "for": 82831, "retrieval_score": 14.939128}
{"snippet": "robot_file_parser.unknown", "intent": "The platform does not provide information on whether the UUID was generated safely or not.", "question_id": 11936, "for": 82831, "retrieval_score": 13.556717}
{"snippet": "abc_meta.__subclasshook__(subclass)", "intent": "( Must be defined as a class method . ) Check whether `subclass` is considered a subclass of this ABC .", "question_id": 3, "for": 82831, "retrieval_score": 11.217343}
{"snippet": "doctest.OutputChecker", "intent": "A class used to check the whether the actual output from a doctest example matches the expected output.", "question_id": 2883, "for": 82831, "retrieval_score": 10.991919}
{"snippet": "PurePath.is_absolute()", "intent": "Return whether the path is absolute or not .", "question_id": 7255, "for": 82831, "retrieval_score": 9.958181}
{"snippet": "Path.samefile(other_path)", "intent": "Return whether this path points to the same file as `other_path` , which can be either a Path object , or a string .", "question_id": 7314, "for": 82831, "retrieval_score": 9.542143}
{"snippet": "Path.exists()", "intent": "Whether the path points to an existing file or directory :", "question_id": 7269, "for": 82831, "retrieval_score": 9.465001}
{"snippet": "abc_meta.__subclasshook__(subclass)", "intent": "( Must be defined as a class method . ) Check whether `subclass` is considered a subclass of this ABC .", "question_id": 3, "for": 82831, "retrieval_score": 11.217343}
{"snippet": "doctest.OutputChecker", "intent": "A class used to check the whether the actual output from a doctest example matches the expected output.", "question_id": 2883, "for": 82831, "retrieval_score": 10.991919}
{"snippet": "PurePath.is_absolute()", "intent": "Return whether the path is absolute or not .", "question_id": 7255, "for": 82831, "retrieval_score": 9.958181}
{"snippet": "Path.samefile(other_path)", "intent": "Return whether this path points to the same file as `other_path` , which can be either a Path object , or a string .", "question_id": 7314, "for": 82831, "retrieval_score": 9.542143}
{"snippet": "Path.exists()", "intent": "Whether the path points to an existing file or directory :", "question_id": 7269, "for": 82831, "retrieval_score": 9.465001}
{"snippet": "readline.set_completer_delims(string)", "intent": "Set or get the word delimiters for completion . With arguments `string`.", "question_id": 8046, "for": 1059559, "retrieval_score": 12.0276165}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998, "for": 1059559, "retrieval_score": 10.97344}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 1059559, "retrieval_score": 10.561672}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 1059559, "retrieval_score": 10.2865095}
{"snippet": "configparser.RawConfigParser(':'), ';'), delimiters=('=')", "intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`, `delimiters`.", "question_id": 1583, "for": 1059559, "retrieval_score": 9.98618}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 41127441, "retrieval_score": 15.277817}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 41127441, "retrieval_score": 14.919874}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129, "for": 41127441, "retrieval_score": 14.817226}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 41127441, "retrieval_score": 14.654827}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 41127441, "retrieval_score": 14.50251}
{"snippet": "DictWriter.writeheader()", "intent": "Write a row with the field names ( as specified in the constructor ) .", "question_id": 1738, "for": 20347766, "retrieval_score": 19.639862}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 20347766, "retrieval_score": 12.45144}
{"snippet": "DefaultCookiePolicy.strict_ns_set_initial_dollar", "intent": "Ignore cookies in Set-Cookie: headers that have names starting with '$'.", "question_id": 4550, "for": 20347766, "retrieval_score": 12.391754}
{"snippet": "somenamedtuple._fields", "intent": "Tuple of strings listing the field names.", "question_id": 1387, "for": 20347766, "retrieval_score": 12.141157}
{"snippet": "somenamedtuple._field_defaults", "intent": "Dictionary mapping field names to default values.", "question_id": 1388, "for": 20347766, "retrieval_score": 12.141157}
{"snippet": "text_calendar.prmonth(theyear, themonth, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 934, "for": 18500541, "retrieval_score": 7.6621766}
{"snippet": "calendar.prmonth(theyear, themonth, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 995, "for": 18500541, "retrieval_score": 7.6621766}
{"snippet": "text_calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 935, "for": 18500541, "retrieval_score": 7.4933443}
{"snippet": "calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 996, "for": 18500541, "retrieval_score": 7.4933443}
{"snippet": "stringprep.in_table_d2(code)", "intent": "Determine whether `code` is in tableD.2 ( Characters with bidirectional property \u201c L \u201d ) .", "question_id": 9549, "for": 18500541, "retrieval_score": 7.228044}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001, "for": 7253907, "retrieval_score": 13.545989}
{"snippet": "complex()", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4002, "for": 7253907, "retrieval_score": 13.545989}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 7253907, "retrieval_score": 12.518587}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 7253907, "retrieval_score": 12.518587}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 7253907, "retrieval_score": 11.484909}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 674519, "retrieval_score": 18.773504}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 674519, "retrieval_score": 14.431761}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 674519, "retrieval_score": 14.41963}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 674519, "retrieval_score": 13.89804}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 674519, "retrieval_score": 13.410248}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 674519, "retrieval_score": 19.090849}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 674519, "retrieval_score": 15.629587}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 674519, "retrieval_score": 14.865062}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 674519, "retrieval_score": 14.779419}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 674519, "retrieval_score": 14.523289}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 674519, "retrieval_score": 39.305214}
{"snippet": "urllib.parse.urlencode(query, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11737, "for": 674519, "retrieval_score": 38.32025}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 674519, "retrieval_score": 36.751465}
{"snippet": "urllib.parse.urlencode(query, doseq=False, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11741, "for": 674519, "retrieval_score": 35.938354}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734, "for": 674519, "retrieval_score": 35.514664}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 674519, "retrieval_score": 15.321751}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 674519, "retrieval_score": 14.693736}
{"snippet": "Request.header_items()", "intent": "Return a list of tuples ( header_name , header_value ) of the Request headers .", "question_id": 11833, "for": 674519, "retrieval_score": 14.157868}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 674519, "retrieval_score": 13.941772}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 674519, "retrieval_score": 13.608779}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 2397687, "retrieval_score": 22.326296}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 2397687, "retrieval_score": 22.326296}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832, "for": 2397687, "retrieval_score": 18.198107}
{"snippet": "socket.ntohl(x)", "intent": "Convert 32-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8657, "for": 2397687, "retrieval_score": 18.084015}
{"snippet": "socket.ntohs(x)", "intent": "Convert 16-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8658, "for": 2397687, "retrieval_score": 18.084015}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 2397687, "retrieval_score": 21.3028}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 2397687, "retrieval_score": 21.3028}
{"snippet": "socket.ntohl(x)", "intent": "Convert 32-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8657, "for": 2397687, "retrieval_score": 20.773579}
{"snippet": "socket.ntohs(x)", "intent": "Convert 16-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8658, "for": 2397687, "retrieval_score": 20.773579}
{"snippet": "socket.htonl(x)", "intent": "Convert 32-bit positive integers from host to network byte order . With arguments `x`.", "question_id": 8659, "for": 2397687, "retrieval_score": 20.773579}
{"snippet": "context.divmod(x, y)", "intent": "Divides two numbers and returns the integer part of the result . With arguments `x`, `y`.", "question_id": 2529, "for": 961263, "retrieval_score": 16.488163}
{"snippet": "statistics.variance(data)", "intent": "Return the sample variance of `data` , an iterable of at least two real-valued numbers .", "question_id": 9139, "for": 961263, "retrieval_score": 16.488163}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399, "for": 961263, "retrieval_score": 15.614433}
{"snippet": "decimal.compare(other, context=None)", "intent": "Compare the values of two Decimal instances . With arguments `other`, `context`.", "question_id": 2400, "for": 961263, "retrieval_score": 15.2371235}
{"snippet": "context.compare_signal(x, y)", "intent": "Compares the values of the two operands numerically . With arguments `x`, `y`.", "question_id": 2521, "for": 961263, "retrieval_score": 14.877617}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 34358278, "retrieval_score": 24.561436}
{"snippet": "http.cookies.Morsel", "intent": "Abstract a key/value pair, which has some RFC 2109 attributes.", "question_id": 4595, "for": 34358278, "retrieval_score": 21.083391}
{"snippet": "ordered_dict.popitem()", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair .", "question_id": 1391, "for": 34358278, "retrieval_score": 20.111437}
{"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132, "for": 34358278, "retrieval_score": 19.44478}
{"snippet": "mailbox.popitem()", "intent": "Return an arbitrary ( key , message ) pair , where key is a key and message is a message representation , and delete the corresponding message .", "question_id": 5748, "for": 34358278, "retrieval_score": 19.061846}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971, "for": 32292554, "retrieval_score": 20.795158}
{"snippet": "email_message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 3248, "for": 32292554, "retrieval_score": 20.795158}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 32292554, "retrieval_score": 20.346828}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 32292554, "retrieval_score": 19.501982}
{"snippet": "itertools.permutations(iterable)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5258, "for": 32292554, "retrieval_score": 19.09116}
{"snippet": "date.isoformat()", "intent": "Return a string representing the date in ISO 8601 format , \u2018 YYYY-MM-DD \u2019 .", "question_id": 2242, "for": 30483977, "retrieval_score": 44.087574}
{"snippet": "datetime.isoformat()", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS", "question_id": 2306, "for": 30483977, "retrieval_score": 33.485516}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307, "for": 30483977, "retrieval_score": 28.607016}
{"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308, "for": 30483977, "retrieval_score": 27.164055}
{"snippet": "datetime.isoformat(sep='T', timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2309, "for": 30483977, "retrieval_score": 24.955805}
{"snippet": "datetime.fold", "intent": "In [0, 1].", "question_id": 2280, "for": 28253102, "retrieval_score": 117.41687}
{"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332, "for": 28253102, "retrieval_score": 117.41687}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 28253102, "retrieval_score": 116.62155}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989, "for": 28253102, "retrieval_score": 98.103455}
{"snippet": "decimal.Context(capitals=None)", "intent": "Creates a new context . The `capitals` field is either 0 or 1 ( the default ) .", "question_id": 2504, "for": 28253102, "retrieval_score": 88.78508}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 23797491, "retrieval_score": 25.136992}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 23797491, "retrieval_score": 23.778336}
{"snippet": "date.fromisoformat(date_string)", "intent": "Return a date corresponding to a `date_string` in the format emitted by date.isoformat ( ) .", "question_id": 2222, "for": 23797491, "retrieval_score": 19.193018}
{"snippet": "date.isoformat()", "intent": "Return a string representing the date in ISO 8601 format , \u2018 YYYY-MM-DD \u2019 .", "question_id": 2242, "for": 23797491, "retrieval_score": 18.040707}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246, "for": 23797491, "retrieval_score": 17.913765}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761, "for": 4383571, "retrieval_score": 24.812195}
{"snippet": "mh.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5782, "for": 4383571, "retrieval_score": 24.812195}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759, "for": 4383571, "retrieval_score": 23.279524}
{"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780, "for": 4383571, "retrieval_score": 23.279524}
{"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760, "for": 4383571, "retrieval_score": 22.24878}
{"snippet": "window.getbegyx()", "intent": "Return a tuple ( y , x ) of co-ordinates of upper-left corner .", "question_id": 2049, "for": 20206615, "retrieval_score": 18.30552}
{"snippet": "window.getyx()", "intent": "Return a tuple ( y , x ) of current cursor position relative to the window \u2019 s upper-left corner .", "question_id": 2063, "for": 20206615, "retrieval_score": 16.421202}
{"snippet": "context.divide(x, y)", "intent": "Return `x` divided by `y` .", "question_id": 2527, "for": 20206615, "retrieval_score": 14.60274}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996, "for": 20206615, "retrieval_score": 13.946487}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 20206615, "retrieval_score": 13.8215}
{"snippet": "json.JSONDecoder(object_pairs_hook=None)", "intent": "Simple JSON decoder . `object_pairs_hook` , if specified will be called with the result of every JSON object decoded with an ordered list of pairs .", "question_id": 5316, "for": 16436133, "retrieval_score": 17.629936}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328, "for": 16436133, "retrieval_score": 17.350311}
{"snippet": "json.JSONDecoder(object_hook=None)", "intent": "Simple JSON decoder . `object_hook` , if specified , will be called with the result of every JSON object decoded and its return value will be used in place of the given dict .", "question_id": 5311, "for": 16436133, "retrieval_score": 17.335602}
{"snippet": "json.JSONDecoder(strict=True)", "intent": "Simple JSON decoder . If `strict` is false ( True is the default ) , then control characters will be allowed inside strings .", "question_id": 5315, "for": 16436133, "retrieval_score": 17.331972}
{"snippet": "json.JSONDecoder(object_hook=None, parse_float=None)", "intent": "Simple JSON decoder . `object_hook` , if specified , will be called with the result of every JSON object decoded and its return value will be used in place of the given dict . `parse_float` , if specified , will be called with the string of every JSON float to be decoded .", "question_id": 5317, "for": 16436133, "retrieval_score": 17.297384}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 2231663, "retrieval_score": 24.275223}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 2231663, "retrieval_score": 23.002102}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 2231663, "retrieval_score": 22.374426}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 2231663, "retrieval_score": 22.076706}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508, "for": 2231663, "retrieval_score": 21.808163}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 2231663, "retrieval_score": 22.374426}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 2231663, "retrieval_score": 21.01041}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 2231663, "retrieval_score": 16.51702}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175, "for": 2231663, "retrieval_score": 16.503983}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 2231663, "retrieval_score": 15.674838}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 2231663, "retrieval_score": 20.840227}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 2231663, "retrieval_score": 16.390045}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 2231663, "retrieval_score": 15.161856}
{"snippet": "tkinter.tix.DirList", "intent": "The DirList widget displays a list view of a directory, its previous directories and its sub-directories.", "question_id": 10563, "for": 2231663, "retrieval_score": 15.111162}
{"snippet": "message.is_multipart()", "intent": "Return True if the message \u2019 s payload is a list of sub-Message objects , otherwise return False .", "question_id": 2952, "for": 2231663, "retrieval_score": 14.628095}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 2597099, "retrieval_score": 15.677011}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941, "for": 2597099, "retrieval_score": 12.649967}
{"snippet": "mimetypes.guess_extension(type)", "intent": "Guess the extension for a file based on its MIME `type` , given by type .", "question_id": 5943, "for": 2597099, "retrieval_score": 12.649967}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 2597099, "retrieval_score": 12.371231}
{"snippet": "zipfile.is_zipfile(filename)", "intent": "Returns True if `filename` is a valid ZIP file based on its magic number , otherwise returns False .", "question_id": 12787, "for": 2597099, "retrieval_score": 11.849056}
{"snippet": "termios.tcgetattr(fd)", "intent": "Return a list containing the tty attributes for file descriptor `fd` , as follows : [ iflag , oflag , cflag , lflag , ispeed , ospeed , cc ] where cc is a list of the tty special characters ( each a string of length 1 , except the items with indices VMIN and VTIME , which are integers when these fields are defined ) .", "question_id": 10102, "for": 2597099, "retrieval_score": 15.414543}
{"snippet": "traceback.format_exception(etype, value, tb)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`.", "question_id": 10777, "for": 2597099, "retrieval_score": 15.408493}
{"snippet": "traceback.format_exception(etype, value, tb, limit=None)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`, `limit`.", "question_id": 10778, "for": 2597099, "retrieval_score": 15.1641245}
{"snippet": "traceback.format_exception(etype, value, tb, chain=True)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`, `chain`.", "question_id": 10779, "for": 2597099, "retrieval_score": 15.1641245}
{"snippet": "traceback.format_exception(etype, value, tb, limit=None, chain=True)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`, `limit`, `chain`.", "question_id": 10780, "for": 2597099, "retrieval_score": 14.92747}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424, "for": 32838802, "retrieval_score": 34.934834}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 32838802, "retrieval_score": 23.870893}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136, "for": 32838802, "retrieval_score": 21.376585}
{"snippet": "window.resize(nlines, ncols)", "intent": "Reallocate storage for a curses window to adjust its dimensions to the specified values . With arguments `nlines`, `ncols`.", "question_id": 2108, "for": 32838802, "retrieval_score": 20.251745}
{"snippet": "curses.resizeterm(nlines, ncols)", "intent": "Resize the standard and current windows to the specified dimensions , and adjusts other bookkeeping data used by the curses library that record the window dimensions ( in particular the SIGWINCH handler ) . With arguments `nlines`, `ncols`.", "question_id": 1976, "for": 32838802, "retrieval_score": 20.034184}
{"snippet": "somenamedtuple._replace(**kwargs)", "intent": "Return a new instance of the named tuple replacing specified fields with new values : With arguments `**kwargs`.", "question_id": 1386, "for": 27060098, "retrieval_score": 14.216994}
{"snippet": "dataclasses.replace(instance, **changes)", "intent": "Creates a new object of the same type of `instance` , replacing fields with values from changes . With arguments `**changes`.", "question_id": 2193, "for": 27060098, "retrieval_score": 14.003783}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 27060098, "retrieval_score": 12.775811}
{"snippet": "typing.SupportsAbs", "intent": "An ABC with one abstract method __abs__ that is covariant in its return type.", "question_id": 11243, "for": 27060098, "retrieval_score": 10.63393}
{"snippet": "typing.SupportsRound", "intent": "An ABC with one abstract method __round__ that is covariant in its return type.", "question_id": 11244, "for": 27060098, "retrieval_score": 10.63393}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 27060098, "retrieval_score": 14.4537325}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 27060098, "retrieval_score": 14.4537325}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 27060098, "retrieval_score": 14.4537325}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 27060098, "retrieval_score": 13.384736}
{"snippet": "email_message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3260, "for": 27060098, "retrieval_score": 13.291145}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736, "for": 26081300, "retrieval_score": 21.079245}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009, "for": 26081300, "retrieval_score": 19.423079}
{"snippet": "turtle.shapetransform(t12=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11010, "for": 26081300, "retrieval_score": 19.423079}
{"snippet": "turtle.shapetransform(t21=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11011, "for": 26081300, "retrieval_score": 19.423079}
{"snippet": "turtle.shapetransform(t11=None, t12=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11013, "for": 26081300, "retrieval_score": 19.423079}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 22520932, "retrieval_score": 14.347498}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 22520932, "retrieval_score": 14.347498}
{"snippet": "base64.standard_b64decode(s)", "intent": "Decode bytes-like object or ASCII string `s` using the standard Base64 alphabet and return the decoded bytes .", "question_id": 715, "for": 22520932, "retrieval_score": 12.958551}
{"snippet": "base64.urlsafe_b64decode(s)", "intent": "Decode bytes-like object or ASCII string `s` using the URL- and filesystem-safe alphabet , which substitutes - instead of + and _ instead of / in the standard Base64 alphabet , and return the decoded bytes .", "question_id": 717, "for": 22520932, "retrieval_score": 12.685299}
{"snippet": "deque.clear()", "intent": "Remove all elements from the deque leaving it with length 0 .", "question_id": 1355, "for": 22520932, "retrieval_score": 12.6140175}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 6429638, "retrieval_score": 14.226059}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 6429638, "retrieval_score": 12.317835}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 6429638, "retrieval_score": 12.317835}
{"snippet": "bytearray.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9355, "for": 6429638, "retrieval_score": 12.317835}
{"snippet": "bytearray.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9356, "for": 6429638, "retrieval_score": 12.317835}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 6429638, "retrieval_score": 13.389379}
{"snippet": "re.split(pattern, string, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . With arguments `flags`.", "question_id": 7945, "for": 6429638, "retrieval_score": 12.3947115}
{"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946, "for": 6429638, "retrieval_score": 10.571319}
{"snippet": "urllib.parse.unquote_plus(string)", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str .", "question_id": 11727, "for": 6429638, "retrieval_score": 10.379752}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 6429638, "retrieval_score": 10.2865095}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 6429638, "retrieval_score": 12.317835}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 6429638, "retrieval_score": 12.317835}
{"snippet": "bytearray.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9355, "for": 6429638, "retrieval_score": 12.317835}
{"snippet": "bytearray.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9356, "for": 6429638, "retrieval_score": 12.317835}
{"snippet": "bytes.split()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9363, "for": 6429638, "retrieval_score": 12.317835}
{"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877, "for": 13076560, "retrieval_score": 19.418509}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970, "for": 13076560, "retrieval_score": 18.019945}
{"snippet": "email_message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 3247, "for": 13076560, "retrieval_score": 18.019945}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 13076560, "retrieval_score": 17.829817}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 13076560, "retrieval_score": 17.584505}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196, "for": 11391969, "retrieval_score": 20.453707}
{"snippet": "datetime.MAXYEAR", "intent": "The largest year number allowed in a date or datetime object.", "question_id": 2197, "for": 11391969, "retrieval_score": 20.453707}
{"snippet": "datetime.date()", "intent": "Return date object with same year , month and day .", "question_id": 2281, "for": 11391969, "retrieval_score": 19.111662}
{"snippet": "date.replace(year=self.year)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `year`.", "question_id": 2230, "for": 11391969, "retrieval_score": 18.949968}
{"snippet": "date.replace(year=self.year, month=self.month)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `year`, `month`.", "question_id": 2233, "for": 11391969, "retrieval_score": 18.601517}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 32191029, "retrieval_score": 30.144886}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426, "for": 32191029, "retrieval_score": 25.006248}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983, "for": 32191029, "retrieval_score": 19.539005}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 32191029, "retrieval_score": 19.512466}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 32191029, "retrieval_score": 19.348438}
{"snippet": "tkinter.tix.TList", "intent": "The TList widget can be used to display data in a tabular format.", "question_id": 10573, "for": 3961581, "retrieval_score": 12.206626}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358, "for": 3961581, "retrieval_score": 11.976532}
{"snippet": "cgi.print_directory()", "intent": "Format the current directory in HTML .", "question_id": 1055, "for": 3961581, "retrieval_score": 11.786506}
{"snippet": "time.ctime(secs)", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10438, "for": 3961581, "retrieval_score": 10.281129}
{"snippet": "robot_file_parser.modified()", "intent": "Sets the time the robots.txt file was last fetched to the current time .", "question_id": 11914, "for": 3961581, "retrieval_score": 10.024207}
{"snippet": "math.degrees(x)", "intent": "Convert angle `x` from radians to degrees .", "question_id": 5922, "for": 10998621, "retrieval_score": 16.683609}
{"snippet": "math.radians(x)", "intent": "Convert angle `x` from degrees to radians .", "question_id": 5923, "for": 10998621, "retrieval_score": 16.683609}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841, "for": 10998621, "retrieval_score": 13.692658}
{"snippet": "babyl_message.get_labels()", "intent": "Return a list of labels on the message .", "question_id": 5840, "for": 10998621, "retrieval_score": 11.630693}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842, "for": 10998621, "retrieval_score": 11.054683}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 25678689, "retrieval_score": 27.09742}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 25678689, "retrieval_score": 22.109348}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 25678689, "retrieval_score": 21.87356}
{"snippet": "widget.identify_region(x, y)", "intent": "Returns one of : With arguments `x`, `y`.", "question_id": 10637, "for": 25678689, "retrieval_score": 20.781301}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 25678689, "retrieval_score": 18.98346}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122, "for": 8712332, "retrieval_score": 20.799314}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 8712332, "retrieval_score": 19.117735}
{"snippet": "array.pop()", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 133, "for": 8712332, "retrieval_score": 19.117735}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 8712332, "retrieval_score": 18.712517}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 8712332, "retrieval_score": 18.537594}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 39605640, "retrieval_score": 14.480989}
{"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132, "for": 39605640, "retrieval_score": 14.158633}
{"snippet": "proxy[key]", "intent": "Return the item of the underlying mapping with key key.", "question_id": 11208, "for": 39605640, "retrieval_score": 13.883118}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 39605640, "retrieval_score": 13.051429}
{"snippet": "Element.setAttribute(name, value)", "intent": "Set an attribute `value` from a string . With arguments `name`.", "question_id": 12366, "for": 39605640, "retrieval_score": 12.718981}
{"snippet": "FileCookieJar.save()", "intent": "Save cookies to a file .", "question_id": 4498, "for": 27318022, "retrieval_score": 13.972562}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499, "for": 27318022, "retrieval_score": 13.935332}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4502, "for": 27318022, "retrieval_score": 13.8574}
{"snippet": "FileCookieJar.save(ignore_discard=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4500, "for": 27318022, "retrieval_score": 13.827795}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503, "for": 27318022, "retrieval_score": 13.814508}
{"snippet": "buffered_reader.peek()", "intent": "Return bytes from the stream without advancing the position .", "question_id": 5119, "for": 2416823, "retrieval_score": 9.462754}
{"snippet": "pkgutil.get_data(package, resource)", "intent": "Get a `resource` from a `package` .", "question_id": 7457, "for": 2416823, "retrieval_score": 9.110263}
{"snippet": "inspect.unwrap(func)", "intent": "Get the object wrapped by `func` .", "question_id": 5021, "for": 2416823, "retrieval_score": 8.9126625}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343, "for": 2416823, "retrieval_score": 8.866566}
{"snippet": "codeop.CommandCompiler", "intent": "Instances of this class have __call__() methods identical in signature to compile_command(); the difference is that if the instance compiles program text containing a __future__ statement, the instance \u2018remembers\u2019 and compiles all subsequent program texts with the statement in force.", "question_id": 1309, "for": 2416823, "retrieval_score": 8.841662}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 17424182, "retrieval_score": 15.737326}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 17424182, "retrieval_score": 15.737326}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 17424182, "retrieval_score": 15.737326}
{"snippet": "socket.recvfrom_into(buffer, nbytes)", "intent": "Receive data from the socket , writing it into `buffer` instead of creating a new bytestring . The return value is a pair ( `nbytes` , address ) where nbytes is the number of bytes received and address is the address of the socket sending the data .", "question_id": 8712, "for": 17424182, "retrieval_score": 14.560307}
{"snippet": "widget.set(item)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` .", "question_id": 10658, "for": 17424182, "retrieval_score": 13.906315}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207, "for": 9841303, "retrieval_score": 11.806234}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217, "for": 9841303, "retrieval_score": 11.646529}
{"snippet": "context.copy()", "intent": "Return a duplicate of the context .", "question_id": 2511, "for": 9841303, "retrieval_score": 11.127964}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679, "for": 9841303, "retrieval_score": 11.1177635}
{"snippet": "os.dup(fd)", "intent": "Return a duplicate of file descriptor `fd` .", "question_id": 6716, "for": 9841303, "retrieval_score": 10.830294}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 930865, "retrieval_score": 23.05636}
{"snippet": "profile.print_stats()", "intent": "Create a Stats object based on the current profile and print the results to stdout .", "question_id": 7682, "for": 930865, "retrieval_score": 16.276367}
{"snippet": "Node.attributes", "intent": "A NamedNodeMap of attribute objects.", "question_id": 12316, "for": 930865, "retrieval_score": 11.160462}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779, "for": 930865, "retrieval_score": 10.805435}
{"snippet": "profile.runcall(func, *args, **kwargs)", "intent": "Profile `func` ( `*args` , `**kwargs` )", "question_id": 7687, "for": 930865, "retrieval_score": 10.384015}
{"snippet": "email.generator.Generator(outfp)", "intent": "Return a Generator object that will write any message provided to the flatten ( ) method , or any text provided to the write ( ) method , to the file-like object `outfp` .", "question_id": 3092, "for": 25440008, "retrieval_score": 8.452761}
{"snippet": "email.generator.BytesGenerator(outfp)", "intent": "Return a BytesGenerator object that will write any message provided to the flatten ( ) method , or any surrogateescape encoded text provided to the write ( ) method , to the file-like object `outfp` .", "question_id": 3078, "for": 25440008, "retrieval_score": 8.193409}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081, "for": 25440008, "retrieval_score": 7.224587}
{"snippet": "NNTP.list()", "intent": "Send a LIST or LIST ACTIVE command .", "question_id": 6465, "for": 25440008, "retrieval_score": 7.0668087}
{"snippet": "symbol.get_namespaces()", "intent": "Return a list of namespaces bound to this name .", "question_id": 9764, "for": 25440008, "retrieval_score": 7.041145}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028, "for": 17734779, "retrieval_score": 18.433916}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 17734779, "retrieval_score": 16.996984}
{"snippet": "random.choices(population, cum_weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7897, "for": 17734779, "retrieval_score": 16.914265}
{"snippet": "random.choices(population, cum_weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7901, "for": 17734779, "retrieval_score": 16.914265}
{"snippet": "random.choices(population, weights=None, cum_weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7899, "for": 17734779, "retrieval_score": 16.128887}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271, "for": 17734779, "retrieval_score": 22.757729}
{"snippet": "pwd.getpwall()", "intent": "Return a list of all available password database entries , in arbitrary order .", "question_id": 7705, "for": 17734779, "retrieval_score": 22.220781}
{"snippet": "spwd.getspall()", "intent": "Return a list of all available shadow password database entries , in arbitrary order .", "question_id": 8790, "for": 17734779, "retrieval_score": 21.708588}
{"snippet": "os.getgroups()", "intent": "Return list of supplemental group ids associated with the current process .", "question_id": 6678, "for": 17734779, "retrieval_score": 20.740633}
{"snippet": "scheduler.queue", "intent": "Read-only attribute returning a list of upcoming events in the order they will be run.", "question_id": 8130, "for": 17734779, "retrieval_score": 20.64691}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716, "for": 19069701, "retrieval_score": 22.60315}
{"snippet": "shlex.token", "intent": "The token buffer.", "question_id": 8306, "for": 19069701, "retrieval_score": 20.195257}
{"snippet": "shlex.get_token()", "intent": "Return a token .", "question_id": 8283, "for": 19069701, "retrieval_score": 19.719528}
{"snippet": "DefaultCookiePolicy.strict_ns_set_path", "intent": "Don\u2019t allow setting cookies whose path doesn\u2019t path-match request URI.", "question_id": 4551, "for": 19069701, "retrieval_score": 19.542765}
{"snippet": "shlex.read_token()", "intent": "Read a raw token .", "question_id": 8285, "for": 19069701, "retrieval_score": 19.146011}
{"snippet": "nntplib.decode_header(header_str)", "intent": "Decode a header value , un-escaping any escaped non-ASCII characters . `header_str` must be a str object .", "question_id": 6502, "for": 1885181, "retrieval_score": 18.513443}
{"snippet": "xml.sax.saxutils.escape(data)", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` .", "question_id": 12652, "for": 1885181, "retrieval_score": 14.788905}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458, "for": 1885181, "retrieval_score": 13.215406}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 1885181, "retrieval_score": 13.181577}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653, "for": 1885181, "retrieval_score": 12.997147}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442, "for": 9507819, "retrieval_score": 15.406446}
{"snippet": "test_case.assertNotRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11444, "for": 9507819, "retrieval_score": 15.406446}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940, "for": 9507819, "retrieval_score": 15.174269}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 9507819, "retrieval_score": 15.140866}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 9507819, "retrieval_score": 15.140866}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 7670226, "retrieval_score": 19.69444}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 7670226, "retrieval_score": 19.69444}
{"snippet": "array.itemsize", "intent": "The length in bytes of one array item in the internal representation.", "question_id": 119, "for": 7670226, "retrieval_score": 19.26958}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31, "for": 7670226, "retrieval_score": 18.328068}
{"snippet": "aifc.getcomptype()", "intent": "Return a bytes array of length 4 describing the type of compression used in the audio file .", "question_id": 15, "for": 7670226, "retrieval_score": 18.285814}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608, "for": 12376863, "retrieval_score": 16.499012}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610, "for": 12376863, "retrieval_score": 16.499012}
{"snippet": "quit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1609, "for": 12376863, "retrieval_score": 13.632406}
{"snippet": "exit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1611, "for": 12376863, "retrieval_score": 13.632406}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 12376863, "retrieval_score": 13.022939}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224, "for": 8899905, "retrieval_score": 25.085274}
{"snippet": "str.count(sub, start, end)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9182, "for": 8899905, "retrieval_score": 21.954336}
{"snippet": "str.count(sub, start)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9183, "for": 8899905, "retrieval_score": 21.954336}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 8899905, "retrieval_score": 21.954336}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952, "for": 8899905, "retrieval_score": 21.226746}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 25040875, "retrieval_score": 22.850689}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 25040875, "retrieval_score": 21.978462}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 25040875, "retrieval_score": 21.927902}
{"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326, "for": 25040875, "retrieval_score": 21.363903}
{"snippet": "heapq.nsmallest(n, iterable, key=None)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4328, "for": 25040875, "retrieval_score": 21.363903}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 25040875, "retrieval_score": 24.063082}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 25040875, "retrieval_score": 23.159126}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 25040875, "retrieval_score": 23.104727}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 25040875, "retrieval_score": 22.101768}
{"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326, "for": 25040875, "retrieval_score": 21.677336}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 25040875, "retrieval_score": 25.254215}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 25040875, "retrieval_score": 24.934069}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 25040875, "retrieval_score": 24.211243}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 25040875, "retrieval_score": 23.781033}
{"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326, "for": 25040875, "retrieval_score": 22.783852}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154, "for": 40744328, "retrieval_score": 12.566601}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 40744328, "retrieval_score": 12.482736}
{"snippet": "asyncio.PriorityQueue", "intent": "A variant of Queue; retrieves entries in priority order (lowest first).", "question_id": 459, "for": 40744328, "retrieval_score": 12.164067}
{"snippet": "traceback.format(most_recent_first=False)", "intent": "Format the traceback as a list of lines with newlines . If `most_recent_first` is True , the order of the formatted frames is reversed , returning the most recent frame first instead of last .", "question_id": 10897, "for": 40744328, "retrieval_score": 11.828555}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271, "for": 40744328, "retrieval_score": 11.378864}
{"snippet": "imghdr.tests", "intent": "A list of functions performing the individual tests.", "question_id": 4759, "for": 40744328, "retrieval_score": 20.594799}
{"snippet": "doc_test.examples", "intent": "A list of Example objects encoding the individual interactive Python examples that should be run by this test.", "question_id": 2818, "for": 40744328, "retrieval_score": 18.52305}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 40744328, "retrieval_score": 17.68945}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112, "for": 40744328, "retrieval_score": 17.059587}
{"snippet": "date.toordinal()", "intent": "Return the proleptic Gregorian ordinal of the date , where January 1 of year 1 has ordinal 1 .", "question_id": 2238, "for": 40744328, "retrieval_score": 16.981428}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 3008992, "retrieval_score": 15.845203}
{"snippet": "fnmatch.fnmatchcase(filename, pattern)", "intent": "Test whether `filename` matches `pattern` , returning True or False ; the comparison is case-sensitive and does not apply os.path.normcase ( ) .", "question_id": 3814, "for": 3008992, "retrieval_score": 14.119068}
{"snippet": "message.replace_header(_name, _value)", "intent": "Replace a header . Replace the first header found in the message that matches `_name` , retaining header order and field name case . With arguments `_value`.", "question_id": 2977, "for": 3008992, "retrieval_score": 13.358342}
{"snippet": "email_message.replace_header(_name, _value)", "intent": "Replace a header . Replace the first header found in the message that matches `_name` , retaining header order and field name case of the original header . With arguments `_value`.", "question_id": 3254, "for": 3008992, "retrieval_score": 12.58131}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370, "for": 3008992, "retrieval_score": 11.220077}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 8519599, "retrieval_score": 13.233934}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 8519599, "retrieval_score": 12.297206}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 8519599, "retrieval_score": 12.297206}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 8519599, "retrieval_score": 11.352732}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 8519599, "retrieval_score": 11.166616}
{"snippet": "pickle.dump(obj, file, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7365, "for": 22733642, "retrieval_score": 13.208856}
{"snippet": "pickle.dump(obj, file, protocol=None, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7366, "for": 22733642, "retrieval_score": 12.668594}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916, "for": 22733642, "retrieval_score": 12.205152}
{"snippet": "charset.output_codec", "intent": "The name of the Python codec used to convert Unicode to the output_charset.", "question_id": 2917, "for": 22733642, "retrieval_score": 12.205152}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392, "for": 22733642, "retrieval_score": 11.615819}
{"snippet": "turtle.turtles()", "intent": "Return the list of turtles on the screen .", "question_id": 11102, "for": 4810537, "retrieval_score": 11.426355}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this screen .", "question_id": 11071, "for": 4810537, "retrieval_score": 11.136226}
{"snippet": "turtle.onscreenclick(fun)", "intent": "Bind `fun` to mouse-click events on this screen .", "question_id": 11075, "for": 4810537, "retrieval_score": 11.136226}
{"snippet": "turtle.exitonclick()", "intent": "Bind bye ( ) method to mouse clicks on the Screen .", "question_id": 11106, "for": 4810537, "retrieval_score": 11.136226}
{"snippet": "turtle.reset()", "intent": "Reset all Turtles on the Screen to their initial state .", "question_id": 11045, "for": 4810537, "retrieval_score": 10.860464}
{"snippet": "terminal_size.columns", "intent": "Width of the terminal window in characters.", "question_id": 6814, "for": 4810537, "retrieval_score": 10.222621}
{"snippet": "terminal_size.lines", "intent": "Height of the terminal window in characters.", "question_id": 6815, "for": 4810537, "retrieval_score": 10.222621}
{"snippet": "curses.panel.update_panels()", "intent": "Updates the virtual screen after changes in the panel stack .", "question_id": 2144, "for": 4810537, "retrieval_score": 9.869121}
{"snippet": "window.erase()", "intent": "Clear the window .", "question_id": 2048, "for": 4810537, "retrieval_score": 9.652411}
{"snippet": "linecache.clearcache()", "intent": "Clear the cache .", "question_id": 5345, "for": 4810537, "retrieval_score": 9.652411}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 533398, "retrieval_score": 15.239757}
{"snippet": "cgi.test()", "intent": "Robust test CGI script , usable as main program .", "question_id": 1052, "for": 533398, "retrieval_score": 15.201841}
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` .", "question_id": 10308, "for": 533398, "retrieval_score": 14.815846}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168, "for": 533398, "retrieval_score": 14.768513}
{"snippet": "turtle.write_docstringdict(filename=\"turtle_docstringdict\")", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11169, "for": 533398, "retrieval_score": 14.768513}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068, "for": 533398, "retrieval_score": 13.917868}
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931, "for": 533398, "retrieval_score": 13.17397}
{"snippet": "curses.noecho()", "intent": "Leave echo mode .", "question_id": 1962, "for": 533398, "retrieval_score": 13.17397}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds)", "intent": "Run the `cmd` shell command . With arguments `**kwds`.", "question_id": 533, "for": 533398, "retrieval_score": 12.839783}
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673, "for": 533398, "retrieval_score": 12.839783}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 10592674, "retrieval_score": 18.313612}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 10592674, "retrieval_score": 18.313612}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 10592674, "retrieval_score": 17.39235}
{"snippet": "ordered_dict.popitem()", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair .", "question_id": 1391, "for": 10592674, "retrieval_score": 16.390064}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 10592674, "retrieval_score": 16.33721}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 14180866, "retrieval_score": 20.317675}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 14180866, "retrieval_score": 20.295977}
{"snippet": "Request.header_items()", "intent": "Return a list of tuples ( header_name , header_value ) of the Request headers .", "question_id": 11833, "for": 14180866, "retrieval_score": 20.07257}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 14180866, "retrieval_score": 19.808712}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895, "for": 14180866, "retrieval_score": 18.919083}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 14180866, "retrieval_score": 17.191338}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 14180866, "retrieval_score": 16.574383}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219, "for": 14180866, "retrieval_score": 14.00189}
{"snippet": "wsgiref.headers.Headers()", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12220, "for": 14180866, "retrieval_score": 14.00189}
{"snippet": "time.process_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current process .", "question_id": 10450, "for": 14180866, "retrieval_score": 13.653015}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357, "for": 21778118, "retrieval_score": 18.362066}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952, "for": 21778118, "retrieval_score": 15.297531}
{"snippet": "re.sub(pattern, repl, string, count=0, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "question_id": 7954, "for": 21778118, "retrieval_score": 14.957171}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 21778118, "retrieval_score": 13.689513}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 21778118, "retrieval_score": 13.586271}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 31676133, "retrieval_score": 19.406128}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319, "for": 31676133, "retrieval_score": 19.074596}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 31676133, "retrieval_score": 18.466318}
{"snippet": "html_calendar.cssclasses", "intent": "A list of CSS classes used for each weekday.", "question_id": 970, "for": 31676133, "retrieval_score": 18.244406}
{"snippet": "tkinter.ttk.Widget", "intent": "statespec will usually be a list or a tuple.", "question_id": 10591, "for": 31676133, "retrieval_score": 17.811317}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871, "for": 11336548, "retrieval_score": 20.441975}
{"snippet": "HTTPSHandler.https_open(req)", "intent": "Send an HTTPS request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11872, "for": 11336548, "retrieval_score": 20.441975}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 11336548, "retrieval_score": 20.266764}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 11336548, "retrieval_score": 20.266764}
{"snippet": "mapping_proxy_type.get(key, default)", "intent": "Return the value for `key` if key is in the underlying mapping , else `default` .", "question_id": 11212, "for": 11336548, "retrieval_score": 19.861078}
{"snippet": "str.endswith(suffix, start)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position .", "question_id": 9190, "for": 18351951, "retrieval_score": 16.708658}
{"snippet": "doc_test.docstring", "intent": "The string that the test was extracted from, or None if the string is unavailable, or if the test was not extracted from a string.", "question_id": 2823, "for": 18351951, "retrieval_score": 14.786268}
{"snippet": "str.endswith(suffix, start, end)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position . With optional `end` , stop comparing at that position .", "question_id": 9189, "for": 18351951, "retrieval_score": 14.766689}
{"snippet": "str.endswith(suffix)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False .", "question_id": 9191, "for": 18351951, "retrieval_score": 14.651259}
{"snippet": "bytes.endswith(suffix, start)", "intent": "Return True if the binary data ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position .", "question_id": 9284, "for": 18351951, "retrieval_score": 14.216545}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 234512, "retrieval_score": 14.226059}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458, "for": 234512, "retrieval_score": 13.561007}
{"snippet": "shlex.quotes", "intent": "Characters that will be considered string quotes.", "question_id": 8298, "for": 234512, "retrieval_score": 13.511384}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 234512, "retrieval_score": 13.389379}
{"snippet": "re.split(pattern, string, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . With arguments `flags`.", "question_id": 7945, "for": 234512, "retrieval_score": 12.3947115}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921, "for": 20477190, "retrieval_score": 12.498402}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 20477190, "retrieval_score": 12.072941}
{"snippet": "calendar.calendar(year)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class .", "question_id": 1011, "for": 20477190, "retrieval_score": 12.01371}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636, "for": 20477190, "retrieval_score": 11.919991}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 20477190, "retrieval_score": 11.600429}
{"snippet": "decimal.setcontext(c)", "intent": "Set the current context for the active thread to `c` .", "question_id": 2493, "for": 30405804, "retrieval_score": 15.499152}
{"snippet": "test.support.temp_cwd(name='tempcwd')", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory .", "question_id": 10183, "for": 30405804, "retrieval_score": 13.999208}
{"snippet": "FTP.cwd(pathname)", "intent": "Set the current directory on the server . With arguments `pathname`.", "question_id": 3961, "for": 30405804, "retrieval_score": 12.989862}
{"snippet": "test.support.temp_cwd(name='tempcwd', quiet=False)", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory . If `quiet` is False and it is not possible to create or change the CWD , an error is raised .", "question_id": 10185, "for": 30405804, "retrieval_score": 12.799271}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940, "for": 30405804, "retrieval_score": 12.699874}
{"snippet": "str.isdecimal()", "intent": "Return true if all characters in the string are decimal characters and there is at least one character , false otherwise .", "question_id": 9205, "for": 15043326, "retrieval_score": 20.490139}
{"snippet": "str.isnumeric()", "intent": "Return true if all characters in the string are numeric characters , and there is at least one character , false otherwise .", "question_id": 9209, "for": 15043326, "retrieval_score": 20.490139}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204, "for": 15043326, "retrieval_score": 20.174252}
{"snippet": "str.isprintable()", "intent": "Return true if all characters in the string are printable or the string is empty , false otherwise .", "question_id": 9210, "for": 15043326, "retrieval_score": 20.174252}
{"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515, "for": 15043326, "retrieval_score": 19.819313}
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910, "for": 15043326, "retrieval_score": 17.777794}
{"snippet": "context.subtract(x, y)", "intent": "Return the difference between `x` and `y` .", "question_id": 2572, "for": 15043326, "retrieval_score": 16.767654}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976, "for": 15043326, "retrieval_score": 16.326708}
{"snippet": "dis.get_instructions(x)", "intent": "Return an iterator over the instructions in the supplied function , method , source code string or code object . With arguments `x`.", "question_id": 2727, "for": 15043326, "retrieval_score": 16.222696}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 15043326, "retrieval_score": 16.091059}
{"snippet": "date.isoformat()", "intent": "Return a string representing the date in ISO 8601 format , \u2018 YYYY-MM-DD \u2019 .", "question_id": 2242, "for": 12772057, "retrieval_score": 18.704685}
{"snippet": "datetime.isoformat()", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS", "question_id": 2306, "for": 12772057, "retrieval_score": 14.141255}
{"snippet": "date.isocalendar()", "intent": "Return a 3-tuple , ( ISO year , ISO week number , ISO weekday ) .", "question_id": 2241, "for": 12772057, "retrieval_score": 12.380165}
{"snippet": "datetime.isocalendar()", "intent": "Return a 3-tuple , ( ISO year , ISO week number , ISO weekday ) .", "question_id": 2305, "for": 12772057, "retrieval_score": 12.380165}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307, "for": 12772057, "retrieval_score": 12.315691}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 2111163, "retrieval_score": 32.087}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 2111163, "retrieval_score": 25.515717}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 2111163, "retrieval_score": 25.515717}
{"snippet": "operator.getitem(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6575, "for": 2111163, "retrieval_score": 25.515717}
{"snippet": "operator.__getitem__(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6576, "for": 2111163, "retrieval_score": 25.515717}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 2111163, "retrieval_score": 54.842934}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009, "for": 2111163, "retrieval_score": 45.160355}
{"snippet": "turtle.shapetransform(t12=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11010, "for": 2111163, "retrieval_score": 45.160355}
{"snippet": "turtle.shapetransform(t21=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11011, "for": 2111163, "retrieval_score": 45.160355}
{"snippet": "turtle.shapetransform(t11=None, t12=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11013, "for": 2111163, "retrieval_score": 45.160355}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 14743454, "retrieval_score": 24.651863}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643, "for": 14743454, "retrieval_score": 21.844713}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 14743454, "retrieval_score": 21.688683}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 14743454, "retrieval_score": 21.688683}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 14743454, "retrieval_score": 20.28186}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 15650538, "retrieval_score": 52.744347}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 15650538, "retrieval_score": 41.08265}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 15650538, "retrieval_score": 37.24749}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 15650538, "retrieval_score": 37.24749}
{"snippet": "audioop.lin2adpcm(fragment, width, state)", "intent": "Convert samples to 4 bit Intel/DVI ADPCM encoding . adpcmfrag is the ADPCM coded `fragment` packed 2 4-bit values per byte . `state` is a tuple containing the state of the coder . With arguments `width`.", "question_id": 692, "for": 15650538, "retrieval_score": 32.64902}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 3582601, "retrieval_score": 16.96226}
{"snippet": "datetime.fold", "intent": "In [0, 1].", "question_id": 2280, "for": 3582601, "retrieval_score": 15.364617}
{"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332, "for": 3582601, "retrieval_score": 15.364617}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12454, "for": 3582601, "retrieval_score": 15.157659}
{"snippet": "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12462, "for": 3582601, "retrieval_score": 15.157659}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934, "for": 15282189, "retrieval_score": 16.549017}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935, "for": 15282189, "retrieval_score": 16.549017}
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133, "for": 15282189, "retrieval_score": 14.024917}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308, "for": 15282189, "retrieval_score": 13.269559}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164, "for": 15282189, "retrieval_score": 12.490941}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 3518778, "retrieval_score": 22.683605}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714, "for": 3518778, "retrieval_score": 22.683605}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713, "for": 3518778, "retrieval_score": 21.216469}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 3518778, "retrieval_score": 19.465237}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 3518778, "retrieval_score": 13.84183}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 3518778, "retrieval_score": 20.177065}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714, "for": 3518778, "retrieval_score": 20.177065}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 3518778, "retrieval_score": 19.465237}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713, "for": 3518778, "retrieval_score": 18.872047}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 3518778, "retrieval_score": 13.84183}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 3518778, "retrieval_score": 20.177065}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714, "for": 3518778, "retrieval_score": 20.177065}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 3518778, "retrieval_score": 19.465237}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713, "for": 3518778, "retrieval_score": 18.872047}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 3518778, "retrieval_score": 13.84183}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 3518778, "retrieval_score": 20.177065}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714, "for": 3518778, "retrieval_score": 20.177065}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 3518778, "retrieval_score": 19.465237}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713, "for": 3518778, "retrieval_score": 18.872047}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 3518778, "retrieval_score": 13.84183}
{"snippet": "text_wrapper.initial_indent", "intent": "(default: '') String that will be prepended to the first line of wrapped output.", "question_id": 10332, "for": 11833266, "retrieval_score": 15.28093}
{"snippet": "fileinput.isfirstline()", "intent": "Returns true if the line just read is the first line of its file , otherwise returns false .", "question_id": 3796, "for": 11833266, "retrieval_score": 14.525301}
{"snippet": "message.preamble", "intent": "The format of a MIME document allows for some text between the blank line following the headers, and the first multipart boundary string.", "question_id": 3028, "for": 11833266, "retrieval_score": 13.267071}
{"snippet": "email_message.preamble", "intent": "The format of a MIME document allows for some text between the blank line following the headers, and the first multipart boundary string.", "question_id": 3308, "for": 11833266, "retrieval_score": 13.267071}
{"snippet": "HTTPConnection.putrequest(method, url)", "intent": "This should be the first call after the connection to the server has been made . It sends a line to the server consisting of the `method` string , the `url` string , and the HTTP version ( HTTP/1.1 ) .", "question_id": 4444, "for": 11833266, "retrieval_score": 12.445602}
{"snippet": "fileinput.isfirstline()", "intent": "Returns true if the line just read is the first line of its file , otherwise returns false .", "question_id": 3796, "for": 11833266, "retrieval_score": 14.525301}
{"snippet": "ArgumentParser.format_usage()", "intent": "Return a string containing a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 107, "for": 11833266, "retrieval_score": 13.579364}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 11833266, "retrieval_score": 13.218992}
{"snippet": "text_wrapper.initial_indent", "intent": "(default: '') String that will be prepended to the first line of wrapped output.", "question_id": 10332, "for": 11833266, "retrieval_score": 12.643053}
{"snippet": "fileinput.nextfile()", "intent": "Close the current file so that the next iteration will read the first line from the next file ( if any ) ; lines not read from the file will not count towards the cumulative line count .", "question_id": 3798, "for": 11833266, "retrieval_score": 11.873743}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855, "for": 11811392, "retrieval_score": 20.484352}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 11811392, "retrieval_score": 20.096733}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 11811392, "retrieval_score": 17.331734}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 11811392, "retrieval_score": 17.331734}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 11811392, "retrieval_score": 17.331734}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723, "for": 3878555, "retrieval_score": 20.725927}
{"snippet": "textwrap.fill(text, **kwargs)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`.", "question_id": 10320, "for": 3878555, "retrieval_score": 16.974812}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 3878555, "retrieval_score": 16.706558}
{"snippet": "textwrap.fill(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`, `width`.", "question_id": 10321, "for": 3878555, "retrieval_score": 16.668642}
{"snippet": "Node.normalize()", "intent": "Join adjacent text nodes so that all stretches of text are stored as single Text instances .", "question_id": 12334, "for": 3878555, "retrieval_score": 16.497255}
{"snippet": "unittest.TestCase(methodName='runTest')", "intent": "Instances of the TestCase class represent the logical test units in the unittest universe . Each instance of TestCase will run a single base method : the method named `methodName` .", "question_id": 11364, "for": 3878555, "retrieval_score": 12.839311}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723, "for": 3878555, "retrieval_score": 11.875205}
{"snippet": "snapshot.filter_traces(filters)", "intent": "Create a new Snapshot instance with a filtered traces sequence , `filters` is a list of DomainFilter and Filter instances .", "question_id": 10874, "for": 3878555, "retrieval_score": 11.693806}
{"snippet": "signature.replace()", "intent": "Create a new Signature instance based on the instance replace was invoked on .", "question_id": 4990, "for": 3878555, "retrieval_score": 11.55752}
{"snippet": "Node.normalize()", "intent": "Join adjacent text nodes so that all stretches of text are stored as single Text instances .", "question_id": 12334, "for": 3878555, "retrieval_score": 11.354943}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 15334783, "retrieval_score": 26.935728}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 15334783, "retrieval_score": 22.489937}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 15334783, "retrieval_score": 22.338993}
{"snippet": "somenamedtuple._asdict()", "intent": "Return a new dict which maps field names to their corresponding values :", "question_id": 1385, "for": 15334783, "retrieval_score": 20.667645}
{"snippet": "dict.values()", "intent": "Return a new view of the dictionary \u2019 s values .", "question_id": 9493, "for": 15334783, "retrieval_score": 20.248991}
{"snippet": "str.center(width)", "intent": "Return centered in a string of length `width` .", "question_id": 9181, "for": 2030053, "retrieval_score": 16.85412}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216, "for": 2030053, "retrieval_score": 16.401499}
{"snippet": "str.rjust(width)", "intent": "Return the string right justified in a string of length `width` .", "question_id": 9233, "for": 2030053, "retrieval_score": 16.401499}
{"snippet": "Unpacker.unpack_string()", "intent": "Unpacks and returns a variable length string .", "question_id": 12294, "for": 2030053, "retrieval_score": 16.043055}
{"snippet": "audioop.findmax(fragment, length)", "intent": "Search `fragment` for a slice of `length` length samples ( not bytes ! )", "question_id": 690, "for": 2030053, "retrieval_score": 15.902135}
{"snippet": "i_pv4_network.num_addresses", "intent": "The total number of addresses in the network.", "question_id": 5203, "for": 4581646, "retrieval_score": 14.909119}
{"snippet": "Function.children", "intent": "A dictionary mapping names to descriptors for nested functions and classes.", "question_id": 7715, "for": 4581646, "retrieval_score": 14.724582}
{"snippet": "Class.children", "intent": "A dictionary mapping names to descriptors for nested functions and classes.", "question_id": 7721, "for": 4581646, "retrieval_score": 14.724582}
{"snippet": "timedelta.total_seconds()", "intent": "Return the total number of seconds contained in the duration .", "question_id": 2217, "for": 4581646, "retrieval_score": 14.170742}
{"snippet": "curses.use_default_colors()", "intent": "Allow use of default values for colors on terminals supporting this feature .", "question_id": 1998, "for": 4581646, "retrieval_score": 14.166662}
{"snippet": "Function.children", "intent": "A dictionary mapping names to descriptors for nested functions and classes.", "question_id": 7715, "for": 4581646, "retrieval_score": 14.724582}
{"snippet": "Class.children", "intent": "A dictionary mapping names to descriptors for nested functions and classes.", "question_id": 7721, "for": 4581646, "retrieval_score": 14.724582}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357, "for": 4581646, "retrieval_score": 12.93664}
{"snippet": "counter.elements()", "intent": "Return an iterator over elements repeating each as many times as its count .", "question_id": 1342, "for": 4581646, "retrieval_score": 11.74387}
{"snippet": "set &= other & ...", "intent": "Update the set, keeping only elements found in it and all others.", "question_id": 9457, "for": 4581646, "retrieval_score": 10.980603}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 1790520, "retrieval_score": 16.145561}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 1790520, "retrieval_score": 15.710264}
{"snippet": "element.keys()", "intent": "Returns the elements attribute names as a list .", "question_id": 12487, "for": 1790520, "retrieval_score": 15.378468}
{"snippet": "context.keys()", "intent": "Return a list of all variables in the context object .", "question_id": 1658, "for": 1790520, "retrieval_score": 14.412445}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 1790520, "retrieval_score": 14.064179}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207, "for": 41083229, "retrieval_score": 11.806234}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 41083229, "retrieval_score": 10.890779}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217, "for": 41083229, "retrieval_score": 10.706547}
{"snippet": "textwrap.wrap(text, **kwargs)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10318, "for": 41083229, "retrieval_score": 10.242307}
{"snippet": "textwrap.wrap(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10319, "for": 41083229, "retrieval_score": 10.242307}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 16418415, "retrieval_score": 24.24069}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 16418415, "retrieval_score": 24.001396}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895, "for": 16418415, "retrieval_score": 22.182592}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898, "for": 16418415, "retrieval_score": 22.182592}
{"snippet": "element.keys()", "intent": "Returns the elements attribute names as a list .", "question_id": 12487, "for": 16418415, "retrieval_score": 21.962204}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 6018340, "retrieval_score": 14.325943}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 6018340, "retrieval_score": 14.325943}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442, "for": 6018340, "retrieval_score": 13.3576145}
{"snippet": "test_case.assertNotRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11444, "for": 6018340, "retrieval_score": 13.3576145}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403, "for": 6018340, "retrieval_score": 12.902257}
{"snippet": "test_suite.__iter__()", "intent": "Tests grouped by a TestSuite are always accessed by iteration .", "question_id": 11488, "for": 18137341, "retrieval_score": 13.202614}
{"snippet": "xml.parsers.expat.XMLParserType", "intent": "The type of the return values from the ParserCreate() function.", "question_id": 7726, "for": 18137341, "retrieval_score": 12.426428}
{"snippet": "snapshot.statistics(key_type: str)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`.", "question_id": 10876, "for": 18137341, "retrieval_score": 10.886666}
{"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877, "for": 18137341, "retrieval_score": 10.436651}
{"snippet": "functools.reduce(function, iterable)", "intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . With arguments `iterable`.", "question_id": 4154, "for": 18137341, "retrieval_score": 10.282969}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518, "for": 32792874, "retrieval_score": 15.012309}
{"snippet": "config_parser.read_dict(dictionary, source='<dict>')", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order . Optional argument `source` specifies a context-specific name of the dictionary passed .", "question_id": 1519, "for": 32792874, "retrieval_score": 14.539064}
{"snippet": "weakref.WeakValueDictionary(dict)", "intent": "Mapping class that references values weakly . With arguments `dict`.", "question_id": 12084, "for": 32792874, "retrieval_score": 13.821423}
{"snippet": "SSLContext.get_ca_certs(binary_form=False)", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "question_id": 9012, "for": 32792874, "retrieval_score": 13.695374}
{"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138, "for": 32792874, "retrieval_score": 13.5374}
{"snippet": "http.cookies.BaseCookie()", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances .", "question_id": 4579, "for": 32792874, "retrieval_score": 24.465046}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 32792874, "retrieval_score": 21.50186}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 32792874, "retrieval_score": 21.50186}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 32792874, "retrieval_score": 21.363495}
{"snippet": "http.cookies.BaseCookie(input)", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "question_id": 4578, "for": 32792874, "retrieval_score": 20.248663}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343, "for": 40313203, "retrieval_score": 21.614548}
{"snippet": "counter.most_common()", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1344, "for": 40313203, "retrieval_score": 21.614548}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 40313203, "retrieval_score": 20.28513}
{"snippet": "array.buffer_info()", "intent": "Return a tuple ( address , length ) giving the current memory address and the length in elements of the buffer used to hold array \u2019 s contents .", "question_id": 121, "for": 40313203, "retrieval_score": 20.01882}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 40313203, "retrieval_score": 19.95234}
{"snippet": "sys.exec_prefix", "intent": "A string giving the site-specific directory prefix where the platform-dependent Python files are installed; by default, this is also '/usr/local'.", "question_id": 9786, "for": 7287996, "retrieval_score": 21.620214}
{"snippet": "sys.prefix", "intent": "A string giving the site-specific directory prefix where the platform independent Python files are installed; by default, this is the string '/usr/local'.", "question_id": 9831, "for": 7287996, "retrieval_score": 21.287584}
{"snippet": "os.path.commonpath(paths)", "intent": "Return the longest common sub-path of each pathname in the sequence `paths` .", "question_id": 7144, "for": 7287996, "retrieval_score": 13.408187}
{"snippet": "os.path.commonprefix(list)", "intent": "Return the longest path prefix ( taken character-by-character ) that is a prefix of all paths in `list` .", "question_id": 7145, "for": 7287996, "retrieval_score": 13.086862}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655, "for": 7287996, "retrieval_score": 12.6125}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655, "for": 7287996, "retrieval_score": 24.179335}
{"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654, "for": 7287996, "retrieval_score": 23.15414}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653, "for": 7287996, "retrieval_score": 22.569988}
{"snippet": "PurePath.relative_to(*other)", "intent": "Compute a version of this path relative to the path represented by other . With arguments `*other`.", "question_id": 7259, "for": 7287996, "retrieval_score": 20.73751}
{"snippet": "dir_entry.name", "intent": "The entry\u2019s base filename, relative to the scandir() path argument.", "question_id": 6907, "for": 7287996, "retrieval_score": 18.613983}
{"snippet": "NNTP.group(name)", "intent": "Send a GROUP command , where `name` is the group name .", "question_id": 6471, "for": 13167391, "retrieval_score": 14.962072}
{"snippet": "date.toordinal()", "intent": "Return the proleptic Gregorian ordinal of the date , where January 1 of year 1 has ordinal 1 .", "question_id": 2238, "for": 13167391, "retrieval_score": 13.125893}
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221, "for": 13167391, "retrieval_score": 12.597155}
{"snippet": "datetime.fromordinal(ordinal)", "intent": "Return the datetime corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2264, "for": 13167391, "retrieval_score": 12.597155}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131, "for": 13167391, "retrieval_score": 12.454725}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 1217251, "retrieval_score": 14.3645115}
{"snippet": "widget.selection_toggle(*items)", "intent": "Toggle the selection state of each item in items . With arguments `*items`.", "question_id": 10657, "for": 1217251, "retrieval_score": 13.980564}
{"snippet": "mh.set_sequences(sequences)", "intent": "Re-define the `sequences` that exist in the mailbox based upon sequences , a dictionary of names mapped to key lists , like returned by get_sequences ( ) .", "question_id": 5784, "for": 1217251, "retrieval_score": 13.064973}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 1217251, "retrieval_score": 12.931657}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 1217251, "retrieval_score": 12.931657}
{"snippet": "Element.getAttribute(name)", "intent": "Return the value of the attribute named by `name` as a string .", "question_id": 12359, "for": 11921649, "retrieval_score": 23.584482}
{"snippet": "turtle.register_shape(name)", "intent": "There are three different ways to call this function : With arguments `name`.", "question_id": 11098, "for": 11921649, "retrieval_score": 23.315493}
{"snippet": "turtle.addshape(name)", "intent": "There are three different ways to call this function : With arguments `name`.", "question_id": 11100, "for": 11921649, "retrieval_score": 23.315493}
{"snippet": "shutil.unregister_unpack_format(name)", "intent": "Unregister an unpack format . `name` is the name of the format .", "question_id": 8369, "for": 11921649, "retrieval_score": 22.61003}
{"snippet": "Repr.repr_TYPE(obj, level)", "intent": "Formatting methods for specific types are implemented as methods with a name based on the type name . In the method name , TYPE is replaced by ' _'.join ( type ( `obj` ) .__name__.split ( ) ) . Type-specific methods which need to recursively format a value should call self.repr1 ( subobj , `level` - 1 ) .", "question_id": 8068, "for": 11921649, "retrieval_score": 22.243887}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847, "for": 30009948, "retrieval_score": 14.306486}
{"snippet": "cursor.fetchmany()", "intent": "Fetches the next set of rows of a query result , returning a list .", "question_id": 8845, "for": 30009948, "retrieval_score": 13.680573}
{"snippet": "inspect.trace()", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in .", "question_id": 5032, "for": 30009948, "retrieval_score": 13.477451}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 30009948, "retrieval_score": 13.422658}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846, "for": 30009948, "retrieval_score": 13.024891}
{"snippet": "Cmd.cmdqueue", "intent": "A list of queued input lines.", "question_id": 1148, "for": 5251663, "retrieval_score": 20.948154}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 5251663, "retrieval_score": 19.363104}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221, "for": 5251663, "retrieval_score": 18.680805}
{"snippet": "config_parser.sections()", "intent": "Return a list of the sections available ; the default section is not included in the list .", "question_id": 1507, "for": 5251663, "retrieval_score": 18.151722}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 5251663, "retrieval_score": 17.923607}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 1712227, "retrieval_score": 12.180718}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371, "for": 1712227, "retrieval_score": 11.86859}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804, "for": 1712227, "retrieval_score": 11.723677}
{"snippet": "Unpacker.unpack_list(unpack_item)", "intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "question_id": 12297, "for": 1712227, "retrieval_score": 11.645716}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 1712227, "retrieval_score": 11.5197935}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 1712227, "retrieval_score": 15.866804}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 1712227, "retrieval_score": 13.48958}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 1712227, "retrieval_score": 12.959112}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 1712227, "retrieval_score": 12.959112}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804, "for": 1712227, "retrieval_score": 12.569372}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371, "for": 1712227, "retrieval_score": 11.86859}
{"snippet": "os.getrandom(size)", "intent": "Get up to `size` random bytes .", "question_id": 7137, "for": 1712227, "retrieval_score": 11.323857}
{"snippet": "tracemalloc.get_traced_memory()", "intent": "Get the current size and peak size of memory blocks traced by the tracemalloc module as a tuple : ( current : int , peak : int ) .", "question_id": 10844, "for": 1712227, "retrieval_score": 10.646446}
{"snippet": "ctypes.create_string_buffer(init_or_size)", "intent": "This function creates a mutable character buffer . `init_or_size` must be an integer which specifies the `size` of the array , or a bytes object which will be used to initialize the array items .", "question_id": 1813, "for": 1712227, "retrieval_score": 10.032666}
{"snippet": "ctypes.create_string_buffer(init_or_size, size=None)", "intent": "This function creates a mutable character buffer . `init_or_size` must be an integer which specifies the `size` of the array , or a bytes object which will be used to initialize the array items .", "question_id": 1814, "for": 1712227, "retrieval_score": 10.032666}
{"snippet": "os.getrandom(size)", "intent": "Get up to `size` random bytes .", "question_id": 7137, "for": 1712227, "retrieval_score": 12.697868}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371, "for": 1712227, "retrieval_score": 11.86859}
{"snippet": "tracemalloc.get_traced_memory()", "intent": "Get the current size and peak size of memory blocks traced by the tracemalloc module as a tuple : ( current : int , peak : int ) .", "question_id": 10844, "for": 1712227, "retrieval_score": 10.646446}
{"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564, "for": 1712227, "retrieval_score": 10.465895}
{"snippet": "struct.unpack(buffer)", "intent": "Identical to the unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must equal size .", "question_id": 9561, "for": 1712227, "retrieval_score": 10.017006}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027, "for": 1712227, "retrieval_score": 12.567211}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371, "for": 1712227, "retrieval_score": 11.86859}
{"snippet": "inspect.getinnerframes(traceback, context=1)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "question_id": 5028, "for": 1712227, "retrieval_score": 11.787987}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804, "for": 1712227, "retrieval_score": 11.723677}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 1712227, "retrieval_score": 11.5197935}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 25817930, "retrieval_score": 12.185612}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692, "for": 25817930, "retrieval_score": 11.850967}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1693, "for": 25817930, "retrieval_score": 11.850967}
{"snippet": "DictWriter.writeheader()", "intent": "Write a row with the field names ( as specified in the constructor ) .", "question_id": 1738, "for": 25817930, "retrieval_score": 11.6630945}
{"snippet": "csv.DictReader(f, *args, **kwds, restkey=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`.", "question_id": 1694, "for": 25817930, "retrieval_score": 11.613503}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921, "for": 25817930, "retrieval_score": 11.263746}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692, "for": 25817930, "retrieval_score": 10.971646}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1693, "for": 25817930, "retrieval_score": 10.971646}
{"snippet": "csv.DictReader(f, *args, **kwds, restkey=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`.", "question_id": 1694, "for": 25817930, "retrieval_score": 10.858253}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None, restkey=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`.", "question_id": 1697, "for": 25817930, "retrieval_score": 10.858253}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 17679089, "retrieval_score": 19.726149}
{"snippet": "snapshot.statistics(key_type: str)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`.", "question_id": 10876, "for": 17679089, "retrieval_score": 17.49333}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 17679089, "retrieval_score": 17.035002}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855, "for": 17679089, "retrieval_score": 17.020248}
{"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877, "for": 17679089, "retrieval_score": 16.77022}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 4877844, "retrieval_score": 26.040716}
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925, "for": 4877844, "retrieval_score": 26.040716}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 4877844, "retrieval_score": 24.414743}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 4877844, "retrieval_score": 22.520868}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 4877844, "retrieval_score": 22.1531}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 15411107, "retrieval_score": 21.0521}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725, "for": 15411107, "retrieval_score": 20.40818}
{"snippet": "mailbox.__delitem__(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5726, "for": 15411107, "retrieval_score": 20.40818}
{"snippet": "mailbox.discard(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5727, "for": 15411107, "retrieval_score": 20.40818}
{"snippet": "proxy[key]", "intent": "Return the item of the underlying mapping with key key.", "question_id": 11208, "for": 15411107, "retrieval_score": 20.248093}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 15411107, "retrieval_score": 21.0521}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725, "for": 15411107, "retrieval_score": 20.40818}
{"snippet": "mailbox.__delitem__(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5726, "for": 15411107, "retrieval_score": 20.40818}
{"snippet": "mailbox.discard(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5727, "for": 15411107, "retrieval_score": 20.40818}
{"snippet": "proxy[key]", "intent": "Return the item of the underlying mapping with key key.", "question_id": 11208, "for": 15411107, "retrieval_score": 20.248093}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 15411107, "retrieval_score": 21.0521}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725, "for": 15411107, "retrieval_score": 20.40818}
{"snippet": "mailbox.__delitem__(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5726, "for": 15411107, "retrieval_score": 20.40818}
{"snippet": "mailbox.discard(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5727, "for": 15411107, "retrieval_score": 20.40818}
{"snippet": "proxy[key]", "intent": "Return the item of the underlying mapping with key key.", "question_id": 11208, "for": 15411107, "retrieval_score": 20.248093}
{"snippet": "partial.args", "intent": "The leftmost positional arguments that will be prepended to the positional arguments provided to a partial object call.", "question_id": 4165, "for": 5373474, "retrieval_score": 10.586588}
{"snippet": "bound_arguments.args", "intent": "A tuple of positional arguments values.", "question_id": 5004, "for": 5373474, "retrieval_score": 10.439417}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632, "for": 5373474, "retrieval_score": 10.078005}
{"snippet": "dict(iterable, **kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . Otherwise , the positional argument must be an `iterable` object . With arguments `**kwarg`.", "question_id": 9469, "for": 5373474, "retrieval_score": 10.017244}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467, "for": 5373474, "retrieval_score": 8.993422}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927, "for": 6027690, "retrieval_score": 14.139928}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928, "for": 6027690, "retrieval_score": 14.139928}
{"snippet": "curses.color_pair(color_number)", "intent": "Return the attribute value for displaying text in the specified color . With arguments `color_number`.", "question_id": 1925, "for": 6027690, "retrieval_score": 9.946273}
{"snippet": "inspect.CO_OPTIMIZED", "intent": "The code object is optimized, using fast locals.", "question_id": 5040, "for": 6027690, "retrieval_score": 9.386397}
{"snippet": "turtle.bgcolor(*args)", "intent": "Set or return background color of the TurtleScreen . With arguments `*args`.", "question_id": 11040, "for": 6027690, "retrieval_score": 8.666375}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170, "for": 753052, "retrieval_score": 12.899647}
{"snippet": "Option.dest", "intent": "(default: derived from option strings)", "question_id": 6628, "for": 753052, "retrieval_score": 9.505891}
{"snippet": "Option.metavar", "intent": "(default: derived from option strings)", "question_id": 6637, "for": 753052, "retrieval_score": 9.505891}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287, "for": 753052, "retrieval_score": 9.296931}
{"snippet": "html_diff.make_file(fromlines, tolines, fromdesc='')", "intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML file containing a table showing line by line differences with inter-line and intra-line changes highlighted . `fromdesc` and `todesc` are optional keyword arguments to specify from/to file column header strings ( both default to an empty string ) .", "question_id": 2609, "for": 753052, "retrieval_score": 8.460083}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 41923906, "retrieval_score": 25.355865}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136, "for": 41923906, "retrieval_score": 22.191994}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983, "for": 41923906, "retrieval_score": 20.493338}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126, "for": 41923906, "retrieval_score": 20.213102}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982, "for": 41923906, "retrieval_score": 19.635075}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223, "for": 11009155, "retrieval_score": 17.402845}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 11009155, "retrieval_score": 17.079693}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 11009155, "retrieval_score": 16.613111}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 11009155, "retrieval_score": 16.613111}
{"snippet": "bytearray.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9355, "for": 11009155, "retrieval_score": 16.613111}
{"snippet": "cgi.print_environ_usage()", "intent": "Print a list of useful ( used by CGI ) environment variables in HTML .", "question_id": 1056, "for": 7351270, "retrieval_score": 15.983062}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 7351270, "retrieval_score": 15.331999}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 7351270, "retrieval_score": 15.331999}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 7351270, "retrieval_score": 14.653175}
{"snippet": "decimal.Decimal(context=None)", "intent": "Construct a new Decimal object based from `value` . The `context` precision does not affect how many digits are stored .", "question_id": 2393, "for": 7351270, "retrieval_score": 12.5377865}
{"snippet": "breakpoint.bpprint()", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 766, "for": 7351270, "retrieval_score": 20.292738}
{"snippet": "breakpoint.bpprint(out=None)", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 767, "for": 7351270, "retrieval_score": 20.292738}
{"snippet": "tabnanny.filename_only", "intent": "Flag indicating whether to print only the filenames of files containing whitespace related problems.", "question_id": 9887, "for": 7351270, "retrieval_score": 19.043747}
{"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928, "for": 7351270, "retrieval_score": 17.798656}
{"snippet": "TarFile.list(members=None)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9929, "for": 7351270, "retrieval_score": 17.798656}
{"snippet": "locale.LC_NUMERIC", "intent": "Locale category for formatting numbers.", "question_id": 5409, "for": 7351270, "retrieval_score": 16.317316}
{"snippet": "text_calendar.prmonth(theyear, themonth, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 934, "for": 7351270, "retrieval_score": 12.903617}
{"snippet": "calendar.month(theyear, themonth, l=0)", "intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `l`.", "question_id": 999, "for": 7351270, "retrieval_score": 12.829206}
{"snippet": "text_calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 935, "for": 7351270, "retrieval_score": 12.619292}
{"snippet": "calendar.month(theyear, themonth, w=0, l=0)", "intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 1000, "for": 7351270, "retrieval_score": 12.593964}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832, "for": 12280143, "retrieval_score": 17.182505}
{"snippet": "os.chroot(path)", "intent": "Change the root directory of the current process to `path` .", "question_id": 6843, "for": 12280143, "retrieval_score": 16.010988}
{"snippet": "os.fchdir(fd)", "intent": "Change the current working directory to the directory represented by the file descriptor `fd` .", "question_id": 6844, "for": 12280143, "retrieval_score": 15.953493}
{"snippet": "test.support.temp_cwd(name='tempcwd', quiet=False)", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory . If `quiet` is False and it is not possible to create or change the CWD , an error is raised .", "question_id": 10185, "for": 12280143, "retrieval_score": 12.544097}
{"snippet": "directory.add_file(file)", "intent": "Add a `file` to the current component of the directory , starting a new one if there is no current component .", "question_id": 6103, "for": 12280143, "retrieval_score": 12.144534}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 6740865, "retrieval_score": 11.2570915}
{"snippet": "xml.dom.pulldom.parseString(string)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` .", "question_id": 12429, "for": 6740865, "retrieval_score": 10.963811}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 6740865, "retrieval_score": 10.178356}
{"snippet": "xml.dom.pulldom.parseString(string, parser=None)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` . With arguments `parser`.", "question_id": 12430, "for": 6740865, "retrieval_score": 10.169015}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355, "for": 6740865, "retrieval_score": 9.585723}
{"snippet": "float.hex()", "intent": "Return a representation of a floating-point number as a hexadecimal string .", "question_id": 9149, "for": 8751653, "retrieval_score": 28.636902}
{"snippet": "locale.atof(string)", "intent": "Converts a `string` to a floating point number , following the LC_NUMERIC settings .", "question_id": 5402, "for": 8751653, "retrieval_score": 22.562838}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019, "for": 8751653, "retrieval_score": 22.41079}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020, "for": 8751653, "retrieval_score": 22.41079}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 8751653, "retrieval_score": 19.429674}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000, "for": 8751653, "retrieval_score": 14.167576}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826, "for": 8751653, "retrieval_score": 13.531179}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849, "for": 8751653, "retrieval_score": 13.28346}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 8751653, "retrieval_score": 13.196582}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 8751653, "retrieval_score": 13.041598}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000, "for": 8751653, "retrieval_score": 14.167576}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826, "for": 8751653, "retrieval_score": 13.531179}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849, "for": 8751653, "retrieval_score": 13.28346}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 8751653, "retrieval_score": 13.196582}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 8751653, "retrieval_score": 13.041598}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543, "for": 31029560, "retrieval_score": 12.5355215}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617, "for": 31029560, "retrieval_score": 11.2291765}
{"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618, "for": 31029560, "retrieval_score": 11.2291765}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927, "for": 31029560, "retrieval_score": 11.221102}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928, "for": 31029560, "retrieval_score": 11.221102}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543, "for": 31029560, "retrieval_score": 11.611737}
{"snippet": "element.tag", "intent": "A string identifying what kind of data this element represents (the element type, in other words).", "question_id": 12479, "for": 31029560, "retrieval_score": 11.228498}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617, "for": 31029560, "retrieval_score": 10.401661}
{"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618, "for": 31029560, "retrieval_score": 10.401661}
{"snippet": "socket.sendmsg(buffers)", "intent": "Send normal and ancillary data to the socket , gathering the non-ancillary data from a series of `buffers` and concatenating it into a single message .", "question_id": 8726, "for": 31029560, "retrieval_score": 10.240484}
{"snippet": "curses.ascii.isspace(c)", "intent": "Checks for ASCII white-space characters ; space , line feed , carriage return , form feed , horizontal tab , vertical tab . With arguments `c`.", "question_id": 1909, "for": 11354544, "retrieval_score": 15.820296}
{"snippet": "pprint.PrettyPrinter(compact=False)", "intent": "Construct a PrettyPrinter instance . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7628, "for": 11354544, "retrieval_score": 13.122628}
{"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931, "for": 11354544, "retrieval_score": 12.990423}
{"snippet": "re.MULTILINE", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7932, "for": 11354544, "retrieval_score": 12.990423}
{"snippet": "binascii.b2a_uu(data, backtick=False)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "question_id": 822, "for": 11354544, "retrieval_score": 12.983965}
{"snippet": "DefaultCookiePolicy.strict_ns_unverifiable", "intent": "Apply RFC 2965 rules on unverifiable transactions even to Netscape cookies.", "question_id": 4548, "for": 22128218, "retrieval_score": 9.568293}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 22128218, "retrieval_score": 9.559143}
{"snippet": "stats.print_callers(*restrictions)", "intent": "This method for the Stats class prints a list of all functions that called each function in the profiled database . With arguments `*restrictions`.", "question_id": 7696, "for": 22128218, "retrieval_score": 9.479994}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340, "for": 22128218, "retrieval_score": 9.311264}
{"snippet": "random.expovariate(lambd)", "intent": "Exponential distribution . `lambd` is 1.0 divided by the desired mean .", "question_id": 7910, "for": 22128218, "retrieval_score": 8.841205}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 40208429, "retrieval_score": 16.524113}
{"snippet": "exit_stack.close()", "intent": "Immediately unwinds the callback stack , invoking callbacks in the reverse order of registration .", "question_id": 1631, "for": 40208429, "retrieval_score": 15.000574}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 40208429, "retrieval_score": 13.972804}
{"snippet": "socket.ntohl(x)", "intent": "Convert 32-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8657, "for": 40208429, "retrieval_score": 12.965709}
{"snippet": "socket.ntohs(x)", "intent": "Convert 16-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8658, "for": 40208429, "retrieval_score": 12.965709}
{"snippet": "math.floor(x)", "intent": "Return the floor of `x` , the largest integer less than or equal to x .", "question_id": 5889, "for": 27758657, "retrieval_score": 30.139202}
{"snippet": "context.next_minus(x)", "intent": "Returns the largest representable number smaller than `x` .", "question_id": 2555, "for": 27758657, "retrieval_score": 19.71254}
{"snippet": "math.ceil(x)", "intent": "Return the ceiling of `x` , the smallest integer greater than or equal to x .", "question_id": 5885, "for": 27758657, "retrieval_score": 15.436077}
{"snippet": "test.support.SMALLEST", "intent": "Object that is less than anything (except itself).", "question_id": 10137, "for": 27758657, "retrieval_score": 14.096809}
{"snippet": "sys.maxunicode", "intent": "An integer giving the value of the largest Unicode code point, i.e.", "question_id": 9824, "for": 27758657, "retrieval_score": 13.102695}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204, "for": 9573244, "retrieval_score": 11.686802}
{"snippet": "str.isprintable()", "intent": "Return true if all characters in the string are printable or the string is empty , false otherwise .", "question_id": 9210, "for": 9573244, "retrieval_score": 11.686802}
{"snippet": "faulthandler.is_enabled()", "intent": "Check if the fault handler is enabled .", "question_id": 3721, "for": 9573244, "retrieval_score": 11.497117}
{"snippet": "Node.prefix", "intent": "The part of the tagName preceding the colon if there is one, else the empty string.", "question_id": 12323, "for": 9573244, "retrieval_score": 11.188171}
{"snippet": "Attr.prefix", "intent": "The part of the name preceding the colon if there is one, else the empty string.", "question_id": 12372, "for": 9573244, "retrieval_score": 11.188171}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204, "for": 9573244, "retrieval_score": 14.472703}
{"snippet": "str.isprintable()", "intent": "Return true if all characters in the string are printable or the string is empty , false otherwise .", "question_id": 9210, "for": 9573244, "retrieval_score": 14.472703}
{"snippet": "Node.prefix", "intent": "The part of the tagName preceding the colon if there is one, else the empty string.", "question_id": 12323, "for": 9573244, "retrieval_score": 13.110144}
{"snippet": "Attr.prefix", "intent": "The part of the name preceding the colon if there is one, else the empty string.", "question_id": 12372, "for": 9573244, "retrieval_score": 13.110144}
{"snippet": "Packer.reset()", "intent": "Resets the pack buffer to the empty string .", "question_id": 12274, "for": 9573244, "retrieval_score": 12.062452}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204, "for": 9573244, "retrieval_score": 14.472703}
{"snippet": "str.isprintable()", "intent": "Return true if all characters in the string are printable or the string is empty , false otherwise .", "question_id": 9210, "for": 9573244, "retrieval_score": 14.472703}
{"snippet": "Node.prefix", "intent": "The part of the tagName preceding the colon if there is one, else the empty string.", "question_id": 12323, "for": 9573244, "retrieval_score": 13.110144}
{"snippet": "Attr.prefix", "intent": "The part of the name preceding the colon if there is one, else the empty string.", "question_id": 12372, "for": 9573244, "retrieval_score": 13.110144}
{"snippet": "Packer.reset()", "intent": "Resets the pack buffer to the empty string .", "question_id": 12274, "for": 9573244, "retrieval_score": 12.062452}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204, "for": 9573244, "retrieval_score": 14.472703}
{"snippet": "str.isprintable()", "intent": "Return true if all characters in the string are printable or the string is empty , false otherwise .", "question_id": 9210, "for": 9573244, "retrieval_score": 14.472703}
{"snippet": "Node.prefix", "intent": "The part of the tagName preceding the colon if there is one, else the empty string.", "question_id": 12323, "for": 9573244, "retrieval_score": 13.110144}
{"snippet": "Attr.prefix", "intent": "The part of the name preceding the colon if there is one, else the empty string.", "question_id": 12372, "for": 9573244, "retrieval_score": 13.110144}
{"snippet": "Packer.reset()", "intent": "Resets the pack buffer to the empty string .", "question_id": 12274, "for": 9573244, "retrieval_score": 12.062452}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 364519, "retrieval_score": 17.922949}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 364519, "retrieval_score": 17.90133}
{"snippet": "message.walk()", "intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "question_id": 3027, "for": 364519, "retrieval_score": 15.956038}
{"snippet": "email_message.walk()", "intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "question_id": 3285, "for": 364519, "retrieval_score": 15.956038}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680, "for": 364519, "retrieval_score": 15.810537}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 364519, "retrieval_score": 17.922949}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 364519, "retrieval_score": 17.90133}
{"snippet": "message.walk()", "intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "question_id": 3027, "for": 364519, "retrieval_score": 15.956038}
{"snippet": "email_message.walk()", "intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "question_id": 3285, "for": 364519, "retrieval_score": 15.956038}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680, "for": 364519, "retrieval_score": 15.810537}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 364519, "retrieval_score": 17.90133}
{"snippet": "collections.OrderedDict()", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order .", "question_id": 1390, "for": 364519, "retrieval_score": 16.084839}
{"snippet": "message.walk()", "intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "question_id": 3027, "for": 364519, "retrieval_score": 15.956038}
{"snippet": "email_message.walk()", "intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "question_id": 3285, "for": 364519, "retrieval_score": 15.956038}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150, "for": 364519, "retrieval_score": 15.908045}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 364519, "retrieval_score": 17.90133}
{"snippet": "collections.OrderedDict()", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order .", "question_id": 1390, "for": 364519, "retrieval_score": 16.084839}
{"snippet": "message.walk()", "intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "question_id": 3027, "for": 364519, "retrieval_score": 15.956038}
{"snippet": "email_message.walk()", "intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "question_id": 3285, "for": 364519, "retrieval_score": 15.956038}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150, "for": 364519, "retrieval_score": 15.908045}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 364519, "retrieval_score": 17.90133}
{"snippet": "message.walk()", "intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "question_id": 3027, "for": 364519, "retrieval_score": 15.956038}
{"snippet": "email_message.walk()", "intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "question_id": 3285, "for": 364519, "retrieval_score": 15.956038}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680, "for": 364519, "retrieval_score": 15.810537}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 364519, "retrieval_score": 15.365729}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680, "for": 364519, "retrieval_score": 14.473877}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 364519, "retrieval_score": 12.8822155}
{"snippet": "heapq.merge(*iterables, key=None)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element .", "question_id": 4322, "for": 364519, "retrieval_score": 12.499842}
{"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324, "for": 364519, "retrieval_score": 11.998758}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 364519, "retrieval_score": 11.441982}
{"snippet": "auto.end", "intent": "The index after the last invalid data in object.", "question_id": 3678, "for": 34438901, "retrieval_score": 22.81776}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 34438901, "retrieval_score": 19.296412}
{"snippet": "Match.lastindex", "intent": "The integer index of the last matched capturing group, or None if no group was matched at all.", "question_id": 8011, "for": 34438901, "retrieval_score": 19.005716}
{"snippet": "turtle.undo()", "intent": "Undo ( repeatedly ) the last turtle action ( s ) .", "question_id": 10933, "for": 34438901, "retrieval_score": 18.5795}
{"snippet": "turtle.clearstamps()", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10931, "for": 34438901, "retrieval_score": 18.3558}
{"snippet": "socket.sendmsg(buffers)", "intent": "Send normal and ancillary data to the socket , gathering the non-ancillary data from a series of `buffers` and concatenating it into a single message .", "question_id": 8726, "for": 5618878, "retrieval_score": 9.15424}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 5618878, "retrieval_score": 8.105777}
{"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551, "for": 5618878, "retrieval_score": 8.07497}
{"snippet": "urllib.parse.quote_plus(string, safe='')", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` .", "question_id": 11714, "for": 5618878, "retrieval_score": 8.038406}
{"snippet": "urllib.parse.quote_plus(string, safe='', encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`.", "question_id": 11717, "for": 5618878, "retrieval_score": 7.6681337}
{"snippet": "Dialect.delimiter", "intent": "A one-character string used to separate fields.", "question_id": 1723, "for": 5618878, "retrieval_score": 13.3141575}
{"snippet": "os.sep", "intent": "The character used by the operating system to separate pathname components.", "question_id": 7123, "for": 5618878, "retrieval_score": 11.323084}
{"snippet": "os.linesep", "intent": "The string used to separate (or, rather, terminate) lines on the current platform.", "question_id": 7128, "for": 5618878, "retrieval_score": 11.002329}
{"snippet": "multiprocessing.Process(target=None)", "intent": "Process objects represent activity that is run in a separate process . `target` is the callable object to be invoked by the run ( ) method .", "question_id": 6167, "for": 5618878, "retrieval_score": 10.868408}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 5618878, "retrieval_score": 10.822163}
{"snippet": "socket.sendmsg(buffers)", "intent": "Send normal and ancillary data to the socket , gathering the non-ancillary data from a series of `buffers` and concatenating it into a single message .", "question_id": 8726, "for": 5618878, "retrieval_score": 9.15424}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 5618878, "retrieval_score": 8.105777}
{"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551, "for": 5618878, "retrieval_score": 8.07497}
{"snippet": "urllib.parse.quote_plus(string, safe='')", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` .", "question_id": 11714, "for": 5618878, "retrieval_score": 8.038406}
{"snippet": "urllib.parse.quote_plus(string, safe='', encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`.", "question_id": 11717, "for": 5618878, "retrieval_score": 7.6681337}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 5618878, "retrieval_score": 10.822163}
{"snippet": "calendar.month(theyear, themonth, l=0)", "intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `l`.", "question_id": 999, "for": 5618878, "retrieval_score": 10.409961}
{"snippet": "calendar.month(theyear, themonth, w=0, l=0)", "intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 1000, "for": 5618878, "retrieval_score": 10.220036}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 5618878, "retrieval_score": 9.655567}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 5618878, "retrieval_score": 9.310591}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 16096754, "retrieval_score": 14.599652}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 16096754, "retrieval_score": 14.599652}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843, "for": 16096754, "retrieval_score": 13.153552}
{"snippet": "Element.removeAttributeNode(oldAttr)", "intent": "Remove and return `oldAttr` from the attribute list , if present .", "question_id": 12364, "for": 16096754, "retrieval_score": 13.153552}
{"snippet": "mh_message.remove_sequence(sequence)", "intent": "Remove `sequence` from the list of sequences that include this message .", "question_id": 5837, "for": 16096754, "retrieval_score": 12.835707}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894, "for": 1058712, "retrieval_score": 16.293066}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 1058712, "retrieval_score": 15.866804}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 1058712, "retrieval_score": 12.959112}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 1058712, "retrieval_score": 12.959112}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 1058712, "retrieval_score": 12.372152}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992, "for": 4230000, "retrieval_score": 11.15519}
{"snippet": "dis.dis(depth=None)", "intent": "Disassemble the `x` object . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2710, "for": 4230000, "retrieval_score": 10.256371}
{"snippet": "dis.dis(x=None, depth=None)", "intent": "Disassemble the `x` object . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2712, "for": 4230000, "retrieval_score": 10.256371}
{"snippet": "FileCookieJar.save(ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4504, "for": 4230000, "retrieval_score": 9.995457}
{"snippet": "FileCookieJar.save(ignore_expires=False)", "intent": "Save cookies to a file . `ignore_expires` : save even cookies that have expired", "question_id": 4501, "for": 4230000, "retrieval_score": 9.979421}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984, "for": 14262654, "retrieval_score": 20.8456}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982, "for": 14262654, "retrieval_score": 19.212898}
{"snippet": "sync_manager.Array(typecode, sequence)", "intent": "Create an array and return a proxy for it . With arguments `typecode`, `sequence`.", "question_id": 6311, "for": 14262654, "retrieval_score": 19.0615}
{"snippet": "bytearray(source, encoding, errors)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`, `errors`.", "question_id": 3981, "for": 14262654, "retrieval_score": 18.952814}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983, "for": 14262654, "retrieval_score": 18.94684}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424, "for": 14262654, "retrieval_score": 23.289928}
{"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425, "for": 14262654, "retrieval_score": 20.93186}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984, "for": 14262654, "retrieval_score": 20.8456}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983, "for": 14262654, "retrieval_score": 18.94684}
{"snippet": "array.typecode", "intent": "The typecode character used to create the array.", "question_id": 118, "for": 14262654, "retrieval_score": 18.296816}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038, "for": 17438906, "retrieval_score": 11.757726}
{"snippet": "contextvars.Context", "intent": "A mapping of ContextVars to their values.", "question_id": 1649, "for": 17438906, "retrieval_score": 11.561541}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 17438906, "retrieval_score": 10.997257}
{"snippet": "cursor.arraysize", "intent": "Read/write attribute that controls the number of rows returned by fetchmany().", "question_id": 8851, "for": 17438906, "retrieval_score": 10.657159}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020, "for": 17438906, "retrieval_score": 10.54267}
{"snippet": "xml.etree.ElementTree.ParseError", "intent": "XML parse error, raised by the various parsing methods in this module when parsing fails.", "question_id": 12561, "for": 14853243, "retrieval_score": 16.01981}
{"snippet": "xml.dom.XML_NAMESPACE", "intent": "The namespace URI associated with the reserved prefix xml, as defined by Namespaces in XML (section 4).", "question_id": 12308, "for": 14853243, "retrieval_score": 15.147829}
{"snippet": "code.InteractiveInterpreter()", "intent": "This class deals with parsing and interpreter state ( the user \u2019 s namespace ) ; it does not deal with input buffering or prompting or input file naming ( the filename is always passed in explicitly ) .", "question_id": 1155, "for": 14853243, "retrieval_score": 12.291462}
{"snippet": "xml.etree.ElementTree.XMLParser(target=None)", "intent": "This class is the low-level building block of the module . It can be fed XML data incrementally with the feed ( ) method , and parsing events are translated to a push API - by invoking callbacks on the `target` object .", "question_id": 12548, "for": 14853243, "retrieval_score": 12.067231}
{"snippet": "element_tree.write(file, default_namespace=None)", "intent": "Writes the element tree to a `file` , as XML . `default_namespace` sets the default XML namespace ( for \u201c xmlns \u201d ) .", "question_id": 12530, "for": 14853243, "retrieval_score": 11.709513}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962, "for": 1957273, "retrieval_score": 18.402107}
{"snippet": "secrets.token_urlsafe()", "intent": "Return a random URL-safe text string , containing `nbytes` random bytes .", "question_id": 8143, "for": 1957273, "retrieval_score": 16.898329}
{"snippet": "secrets.token_urlsafe(nbytes=None)", "intent": "Return a random URL-safe text string , containing `nbytes` random bytes .", "question_id": 8144, "for": 1957273, "retrieval_score": 16.898329}
{"snippet": "secrets.token_urlsafe()", "intent": "Return a random URL-safe text string , containing `nbytes` random bytes .", "question_id": 8145, "for": 1957273, "retrieval_score": 16.898329}
{"snippet": "secrets.token_urlsafe(nbytes=None)", "intent": "Return a random URL-safe text string , containing `nbytes` random bytes .", "question_id": 8146, "for": 1957273, "retrieval_score": 16.898329}
{"snippet": "resource_reader.resource_path(resource)", "intent": "Returns the file system path to the `resource` .", "question_id": 4820, "for": 24722212, "retrieval_score": 21.069256}
{"snippet": "importlib.resources.path(package, resource)", "intent": "Return the path to the `resource` as an actual file system path . `package` is either a name or a module object which conforms to the Package requirements .", "question_id": 4862, "for": 24722212, "retrieval_score": 19.288786}
{"snippet": "test.support.make_legacy_pyc(source)", "intent": "Move a PEP 3147/488 pyc file to its legacy pyc location and return the file system path to the legacy pyc file . The `source` value is the file system path to the source file .", "question_id": 10143, "for": 24722212, "retrieval_score": 19.161243}
{"snippet": "os.statvfs(path)", "intent": "Perform a statvfs ( ) system call on the given `path` .", "question_id": 6946, "for": 24722212, "retrieval_score": 18.851892}
{"snippet": "urllib.request.url2pathname(path)", "intent": "Convert the `path` component path from a percent-encoded URL to the local syntax for a path .", "question_id": 11766, "for": 24722212, "retrieval_score": 18.811895}
{"snippet": "decimal.ROUND_HALF_EVEN", "intent": "Round to nearest with ties going to nearest even integer.", "question_id": 2581, "for": 31818050, "retrieval_score": 25.840755}
{"snippet": "decimal.to_integral_value()", "intent": "Round to the nearest integer without signaling Inexact or Rounded .", "question_id": 2488, "for": 31818050, "retrieval_score": 23.201813}
{"snippet": "decimal.to_integral_exact()", "intent": "Round to the nearest integer , signaling Inexact or Rounded as appropriate if `rounding` occurs .", "question_id": 2484, "for": 31818050, "retrieval_score": 21.110783}
{"snippet": "decimal.to_integral_exact(rounding=None)", "intent": "Round to the nearest integer , signaling Inexact or Rounded as appropriate if `rounding` occurs .", "question_id": 2485, "for": 31818050, "retrieval_score": 21.110783}
{"snippet": "decimal.ROUND_HALF_DOWN", "intent": "Round to nearest with ties going towards zero.", "question_id": 2580, "for": 31818050, "retrieval_score": 19.182182}
{"snippet": "decimal.ROUND_HALF_EVEN", "intent": "Round to nearest with ties going to nearest even integer.", "question_id": 2581, "for": 31818050, "retrieval_score": 25.840755}
{"snippet": "decimal.to_integral_value()", "intent": "Round to the nearest integer without signaling Inexact or Rounded .", "question_id": 2488, "for": 31818050, "retrieval_score": 23.201813}
{"snippet": "decimal.to_integral_exact()", "intent": "Round to the nearest integer , signaling Inexact or Rounded as appropriate if `rounding` occurs .", "question_id": 2484, "for": 31818050, "retrieval_score": 21.110783}
{"snippet": "decimal.to_integral_exact(rounding=None)", "intent": "Round to the nearest integer , signaling Inexact or Rounded as appropriate if `rounding` occurs .", "question_id": 2485, "for": 31818050, "retrieval_score": 21.110783}
{"snippet": "decimal.ROUND_HALF_DOWN", "intent": "Round to nearest with ties going towards zero.", "question_id": 2580, "for": 31818050, "retrieval_score": 19.182182}
{"snippet": "winreg.REG_DWORD", "intent": "32-bit number.", "question_id": 12175, "for": 31818050, "retrieval_score": 13.51465}
{"snippet": "decimal.normalize()", "intent": "Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal ( ' 0 ' ) to Decimal ( '0e0 ' ) .", "question_id": 2457, "for": 31818050, "retrieval_score": 11.999457}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 31818050, "retrieval_score": 11.957523}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 31818050, "retrieval_score": 11.957523}
{"snippet": "winreg.REG_DWORD_LITTLE_ENDIAN", "intent": "A 32-bit number in little-endian format.", "question_id": 12176, "for": 31818050, "retrieval_score": 11.754173}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertNotAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11425, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11426, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertAlmostEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11419, "for": 31818050, "retrieval_score": 13.24082}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertNotAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11425, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11426, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertAlmostEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11419, "for": 31818050, "retrieval_score": 13.24082}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertNotAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11425, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11426, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertAlmostEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11419, "for": 31818050, "retrieval_score": 13.24082}
{"snippet": "date.isocalendar()", "intent": "Return a 3-tuple , ( ISO year , ISO week number , ISO weekday ) .", "question_id": 2241, "for": 31818050, "retrieval_score": 16.631453}
{"snippet": "datetime.isocalendar()", "intent": "Return a 3-tuple , ( ISO year , ISO week number , ISO weekday ) .", "question_id": 2305, "for": 31818050, "retrieval_score": 16.631453}
{"snippet": "errno.EL3HLT", "intent": "Level 3 halted", "question_id": 3551, "for": 31818050, "retrieval_score": 16.105307}
{"snippet": "errno.EL3RST", "intent": "Level 3 reset", "question_id": 3552, "for": 31818050, "retrieval_score": 16.105307}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921, "for": 31818050, "retrieval_score": 16.05033}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertNotAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11425, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11426, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertAlmostEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11419, "for": 31818050, "retrieval_score": 13.24082}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertNotAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11425, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11426, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertAlmostEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11419, "for": 31818050, "retrieval_score": 13.24082}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417, "for": 31818050, "retrieval_score": 19.39658}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418, "for": 31818050, "retrieval_score": 19.39658}
{"snippet": "test_case.assertNotAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11425, "for": 31818050, "retrieval_score": 19.39658}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11426, "for": 31818050, "retrieval_score": 19.39658}
{"snippet": "test_case.assertAlmostEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11419, "for": 31818050, "retrieval_score": 18.47964}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertNotAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11425, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11426, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertAlmostEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11419, "for": 31818050, "retrieval_score": 13.24082}
{"snippet": "AU_read.getnchannels()", "intent": "Returns number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 9708, "for": 31818050, "retrieval_score": 14.543999}
{"snippet": "Wave_read.getnchannels()", "intent": "Returns number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 12051, "for": 31818050, "retrieval_score": 14.543999}
{"snippet": "aifc.getnchannels()", "intent": "Return the number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 11, "for": 31818050, "retrieval_score": 14.200847}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418, "for": 31818050, "retrieval_score": 13.8931}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 30357276, "retrieval_score": 27.50153}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 30357276, "retrieval_score": 27.50153}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 30357276, "retrieval_score": 27.50153}
{"snippet": "widget.set(item)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` .", "question_id": 10658, "for": 30357276, "retrieval_score": 25.502779}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 30357276, "retrieval_score": 17.459827}
{"snippet": "base_http_request_handler.log_date_time_string()", "intent": "Returns the current date and time , formatted for logging .", "question_id": 4657, "for": 12843099, "retrieval_score": 15.015326}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 12843099, "retrieval_score": 11.775967}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197, "for": 12843099, "retrieval_score": 11.550509}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 12843099, "retrieval_score": 10.617572}
{"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346, "for": 12843099, "retrieval_score": 10.617572}
{"snippet": "queue_listener.info(msg, *args, **kwargs)", "intent": "Logs a message with level INFO on this logger . With arguments `msg`, `*args`, `**kwargs`.", "question_id": 5571, "for": 12843099, "retrieval_score": 22.042057}
{"snippet": "logging.info(msg, *args, **kwargs)", "intent": "Logs a message with level INFO on the root logger . With arguments `msg`, `*args`, `**kwargs`.", "question_id": 5638, "for": 12843099, "retrieval_score": 21.918959}
{"snippet": "maildir_message.get_info()", "intent": "Return a string containing the \u201c info \u201d for a message .", "question_id": 5821, "for": 12843099, "retrieval_score": 18.074348}
{"snippet": "nt_event_log_handler.emit(record)", "intent": "Determines the message ID , event category and event type , and then logs the message in the NT event log . With arguments `record`.", "question_id": 5511, "for": 12843099, "retrieval_score": 17.555775}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820, "for": 12843099, "retrieval_score": 16.359995}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 9224385, "retrieval_score": 15.211424}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 9224385, "retrieval_score": 14.134725}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 9224385, "retrieval_score": 13.972804}
{"snippet": "decimal.as_integer_ratio()", "intent": "Return a pair ( n , d ) of integers that represent the given Decimal instance as a fraction , in lowest terms and with a positive denominator :", "question_id": 2396, "for": 9224385, "retrieval_score": 12.791679}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 9224385, "retrieval_score": 12.297206}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 11280536, "retrieval_score": 18.049925}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 11280536, "retrieval_score": 17.376629}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 11280536, "retrieval_score": 17.15752}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 11280536, "retrieval_score": 16.96108}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243, "for": 11280536, "retrieval_score": 16.822744}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 10824319, "retrieval_score": 26.993902}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 10824319, "retrieval_score": 26.993902}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 10824319, "retrieval_score": 20.524082}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 10824319, "retrieval_score": 17.653702}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938, "for": 10824319, "retrieval_score": 16.069717}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 10824319, "retrieval_score": 26.993902}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 10824319, "retrieval_score": 26.993902}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 10824319, "retrieval_score": 20.524082}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 10824319, "retrieval_score": 17.653702}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938, "for": 10824319, "retrieval_score": 16.069717}
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445, "for": 40851413, "retrieval_score": 30.220507}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587, "for": 40851413, "retrieval_score": 23.030678}
{"snippet": "BaseCookie.output(attrs=None, sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4589, "for": 40851413, "retrieval_score": 19.64181}
{"snippet": "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4590, "for": 40851413, "retrieval_score": 19.64181}
{"snippet": "BaseCookie.output(attrs=None, header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4591, "for": 40851413, "retrieval_score": 19.64181}
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445, "for": 40851413, "retrieval_score": 30.220507}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587, "for": 40851413, "retrieval_score": 23.030678}
{"snippet": "BaseCookie.output(attrs=None, sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4589, "for": 40851413, "retrieval_score": 19.64181}
{"snippet": "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4590, "for": 40851413, "retrieval_score": 19.64181}
{"snippet": "BaseCookie.output(attrs=None, header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4591, "for": 40851413, "retrieval_score": 19.64181}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934, "for": 13842088, "retrieval_score": 17.562983}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935, "for": 13842088, "retrieval_score": 17.562983}
{"snippet": "context.quantize(x, y)", "intent": "Returns a value equal to `x` ( rounded ) , having the exponent of `y` .", "question_id": 2563, "for": 13842088, "retrieval_score": 16.441559}
{"snippet": "cmath.log10(x)", "intent": "Return the base-10 logarithm of `x` .", "question_id": 1099, "for": 13842088, "retrieval_score": 16.271366}
{"snippet": "context.log10(x)", "intent": "Returns the base 10 logarithm of `x` .", "question_id": 2543, "for": 13842088, "retrieval_score": 16.271366}
{"snippet": "os.path.normcase(path)", "intent": "Normalize the case of a pathname . On other operating systems , return the `path` unchanged .", "question_id": 7161, "for": 18524112, "retrieval_score": 10.165562}
{"snippet": "cursor.rowcount", "intent": "Although the Cursor class of the sqlite3 module implements this attribute, the database engine\u2019s own support for the determination of \u201crows affected\u201d/\u201drows selected\u201d is quirky.", "question_id": 8849, "for": 18524112, "retrieval_score": 9.680346}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846, "for": 18524112, "retrieval_score": 9.483661}
{"snippet": "decimal.normalize()", "intent": "Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal ( ' 0 ' ) to Decimal ( '0e0 ' ) .", "question_id": 2457, "for": 18524112, "retrieval_score": 8.99036}
{"snippet": "cursor.arraysize", "intent": "Read/write attribute that controls the number of rows returned by fetchmany().", "question_id": 8851, "for": 18524112, "retrieval_score": 8.912456}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 22741068, "retrieval_score": 19.62361}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 22741068, "retrieval_score": 18.993534}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 22741068, "retrieval_score": 18.993534}
{"snippet": "widget.selection_remove(*items)", "intent": "Remove items from the selection . With arguments `*items`.", "question_id": 10656, "for": 22741068, "retrieval_score": 17.94048}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 22741068, "retrieval_score": 17.22132}
{"snippet": "audioop.getsample(fragment, width, index)", "intent": "Return the value of sample `index` from the `fragment` . With arguments `width`.", "question_id": 691, "for": 11530799, "retrieval_score": 16.227318}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 11530799, "retrieval_score": 14.71627}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 11530799, "retrieval_score": 14.71627}
{"snippet": "operator.getitem(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6575, "for": 11530799, "retrieval_score": 14.71627}
{"snippet": "operator.__getitem__(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6576, "for": 11530799, "retrieval_score": 14.71627}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 17117912, "retrieval_score": 29.196396}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 17117912, "retrieval_score": 28.234764}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 17117912, "retrieval_score": 28.010185}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 17117912, "retrieval_score": 27.129894}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 17117912, "retrieval_score": 25.34898}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 17117912, "retrieval_score": 31.845936}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 17117912, "retrieval_score": 23.186684}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 17117912, "retrieval_score": 23.186684}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 17117912, "retrieval_score": 23.01881}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 17117912, "retrieval_score": 22.862139}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_PLUS", "intent": "The model must occur one or more times (like A+).", "question_id": 7785, "for": 9354127, "retrieval_score": 14.57529}
{"snippet": "array.itemsize", "intent": "The length in bytes of one array item in the internal representation.", "question_id": 119, "for": 9354127, "retrieval_score": 12.382286}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 9354127, "retrieval_score": 12.251832}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_SEQ", "intent": "Models which represent a series of models which follow one after the other are indicated with this model type.", "question_id": 7782, "for": 9354127, "retrieval_score": 11.918985}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779, "for": 9354127, "retrieval_score": 11.532513}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 3781851, "retrieval_score": 23.372114}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168, "for": 3781851, "retrieval_score": 22.294647}
{"snippet": "turtle.write_docstringdict(filename=\"turtle_docstringdict\")", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11169, "for": 3781851, "retrieval_score": 22.294647}
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309, "for": 3781851, "retrieval_score": 20.250347}
{"snippet": "sys.abiflags", "intent": "On POSIX systems where Python was built with the standard configure script, this contains the ABI flags as specified by PEP 3149.", "question_id": 9766, "for": 3781851, "retrieval_score": 20.23132}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 8383213, "retrieval_score": 12.9805355}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 8383213, "retrieval_score": 12.9805355}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442, "for": 8383213, "retrieval_score": 12.103147}
{"snippet": "test_case.assertNotRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11444, "for": 8383213, "retrieval_score": 12.103147}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991, "for": 8383213, "retrieval_score": 10.06233}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 27146262, "retrieval_score": 15.464851}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 27146262, "retrieval_score": 15.464851}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 27146262, "retrieval_score": 15.197036}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 27146262, "retrieval_score": 14.73192}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 27146262, "retrieval_score": 14.479916}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 6494508, "retrieval_score": 15.200023}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 6494508, "retrieval_score": 15.105549}
{"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617, "for": 6494508, "retrieval_score": 14.752117}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 6494508, "retrieval_score": 14.07039}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 6494508, "retrieval_score": 12.758121}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 1082413, "retrieval_score": 16.119665}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 1082413, "retrieval_score": 15.140583}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227, "for": 1082413, "retrieval_score": 15.069957}
{"snippet": "memoryview.itemsize", "intent": "The size in bytes of each element of the memoryview:", "question_id": 9423, "for": 1082413, "retrieval_score": 14.770258}
{"snippet": "gettext.find(domain, localedir=None, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4228, "for": 1082413, "retrieval_score": 14.483408}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832, "for": 1082413, "retrieval_score": 17.578457}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 1082413, "retrieval_score": 16.374033}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827, "for": 1082413, "retrieval_score": 16.304148}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638, "for": 1082413, "retrieval_score": 16.196587}
{"snippet": "importlib.machinery.SOURCE_SUFFIXES", "intent": "A list of strings representing the recognized file suffixes for source modules.", "question_id": 4865, "for": 1082413, "retrieval_score": 15.919466}
{"snippet": "glob.glob(pathname)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification .", "question_id": 4264, "for": 7745562, "retrieval_score": 11.414856}
{"snippet": "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source)", "intent": "Create a zip package directory with a path of `zip_dir` and `zip_basename` containing an empty __init__ file and a file `script_basename` containing the `source` . With arguments `pkg_name`.", "question_id": 10314, "for": 7745562, "retrieval_score": 11.328922}
{"snippet": "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source, depth=1)", "intent": "Create a zip package directory with a path of `zip_dir` and `zip_basename` containing an empty __init__ file and a file `script_basename` containing the `source` . With arguments `pkg_name`, `depth`.", "question_id": 10315, "for": 7745562, "retrieval_score": 11.156845}
{"snippet": "test.support.create_empty_file(filename)", "intent": "Create an empty file with `filename` .", "question_id": 10153, "for": 7745562, "retrieval_score": 10.79245}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 7745562, "retrieval_score": 9.87748}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340, "for": 12496531, "retrieval_score": 15.796842}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855, "for": 12496531, "retrieval_score": 15.440799}
{"snippet": "xmlparser.ErrorColumnNumber", "intent": "Column number at which an error occurred.", "question_id": 7750, "for": 12496531, "retrieval_score": 14.951717}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 12496531, "retrieval_score": 14.951717}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 12496531, "retrieval_score": 14.803439}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 18649884, "retrieval_score": 17.994148}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052, "for": 18649884, "retrieval_score": 13.882985}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 18649884, "retrieval_score": 13.742359}
{"snippet": "str.maketrans(x, y)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` .", "question_id": 9221, "for": 18649884, "retrieval_score": 13.656757}
{"snippet": "str.maketrans(x)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` .", "question_id": 9222, "for": 18649884, "retrieval_score": 13.656757}
{"snippet": "SSLContext.sni_callback", "intent": "Register a callback function that will be called after the TLS Client Hello handshake message has been received by the SSL/TLS server when the TLS client specifies a server name indication.", "question_id": 9018, "for": 761804, "retrieval_score": 7.0498323}
{"snippet": "wsgiref.simple_server.demo_app(environ, start_response)", "intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "question_id": 12227, "for": 761804, "retrieval_score": 6.726363}
{"snippet": "charset.header_encode(string)", "intent": "Header-encode the `string` string .", "question_id": 2920, "for": 761804, "retrieval_score": 3.8954804}
{"snippet": "charset.body_encode(string)", "intent": "Body-encode the `string` string .", "question_id": 2922, "for": 761804, "retrieval_score": 3.8954804}
{"snippet": "sys.intern(string)", "intent": "Enter `string` in the table of \u201c interned \u201d strings and return the interned string \u2013 which is string itself or a copy .", "question_id": 9818, "for": 761804, "retrieval_score": 3.53475}
{"snippet": "charset.header_encode(string)", "intent": "Header-encode the `string` string .", "question_id": 2920, "for": 761804, "retrieval_score": 3.8954804}
{"snippet": "charset.body_encode(string)", "intent": "Body-encode the `string` string .", "question_id": 2922, "for": 761804, "retrieval_score": 3.8954804}
{"snippet": "sys.intern(string)", "intent": "Enter `string` in the table of \u201c interned \u201d strings and return the interned string \u2013 which is string itself or a copy .", "question_id": 9818, "for": 761804, "retrieval_score": 3.53475}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216, "for": 761804, "retrieval_score": 3.5345392}
{"snippet": "str.rjust(width)", "intent": "Return the string right justified in a string of length `width` .", "question_id": 9233, "for": 761804, "retrieval_score": 3.5345392}
{"snippet": "SSLContext.sni_callback", "intent": "Register a callback function that will be called after the TLS Client Hello handshake message has been received by the SSL/TLS server when the TLS client specifies a server name indication.", "question_id": 9018, "for": 761804, "retrieval_score": 7.8363576}
{"snippet": "wsgiref.simple_server.demo_app(environ, start_response)", "intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "question_id": 12227, "for": 761804, "retrieval_score": 7.6286697}
{"snippet": "locale.delocalize(string)", "intent": "Converts a `string` into a normalized number string , following the LC_NUMERIC settings .", "question_id": 5401, "for": 761804, "retrieval_score": 4.5065393}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216, "for": 761804, "retrieval_score": 4.349463}
{"snippet": "str.rjust(width)", "intent": "Return the string right justified in a string of length `width` .", "question_id": 9233, "for": 761804, "retrieval_score": 4.349463}
{"snippet": "SSLContext.sni_callback", "intent": "Register a callback function that will be called after the TLS Client Hello handshake message has been received by the SSL/TLS server when the TLS client specifies a server name indication.", "question_id": 9018, "for": 761804, "retrieval_score": 7.8363576}
{"snippet": "wsgiref.simple_server.demo_app(environ, start_response)", "intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "question_id": 12227, "for": 761804, "retrieval_score": 7.6286697}
{"snippet": "locale.delocalize(string)", "intent": "Converts a `string` into a normalized number string , following the LC_NUMERIC settings .", "question_id": 5401, "for": 761804, "retrieval_score": 4.5065393}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216, "for": 761804, "retrieval_score": 4.349463}
{"snippet": "str.rjust(width)", "intent": "Return the string right justified in a string of length `width` .", "question_id": 9233, "for": 761804, "retrieval_score": 4.349463}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 761804, "retrieval_score": 8.256535}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 761804, "retrieval_score": 8.256535}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254, "for": 761804, "retrieval_score": 7.7315903}
{"snippet": "xml.etree.ElementTree.tostring(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12456, "for": 761804, "retrieval_score": 7.575028}
{"snippet": "xml.etree.ElementTree.tostringlist(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12464, "for": 761804, "retrieval_score": 7.575028}
{"snippet": "SSLContext.sni_callback", "intent": "Register a callback function that will be called after the TLS Client Hello handshake message has been received by the SSL/TLS server when the TLS client specifies a server name indication.", "question_id": 9018, "for": 761804, "retrieval_score": 7.8363576}
{"snippet": "wsgiref.simple_server.demo_app(environ, start_response)", "intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "question_id": 12227, "for": 761804, "retrieval_score": 7.6286697}
{"snippet": "locale.delocalize(string)", "intent": "Converts a `string` into a normalized number string , following the LC_NUMERIC settings .", "question_id": 5401, "for": 761804, "retrieval_score": 4.5065393}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216, "for": 761804, "retrieval_score": 4.349463}
{"snippet": "str.rjust(width)", "intent": "Return the string right justified in a string of length `width` .", "question_id": 9233, "for": 761804, "retrieval_score": 4.349463}
{"snippet": "email.utils.unquote(str)", "intent": "Return a new string which is an unquoted version of `str` .", "question_id": 3459, "for": 761804, "retrieval_score": 8.658737}
{"snippet": "curses.tparm(str)", "intent": "Instantiate the bytes object `str` with the supplied parameters , where str should be a parameterized string obtained from the terminfo database .", "question_id": 1989, "for": 761804, "retrieval_score": 8.50622}
{"snippet": "curses.tparm()", "intent": "Instantiate the bytes object `str` with the supplied parameters , where str should be a parameterized string obtained from the terminfo database .", "question_id": 1990, "for": 761804, "retrieval_score": 8.50622}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723, "for": 761804, "retrieval_score": 8.259565}
{"snippet": "urllib.parse.quote_from_bytes(bytes)", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding .", "question_id": 11721, "for": 761804, "retrieval_score": 7.500198}
{"snippet": "itertools.tee(iterable)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5266, "for": 761804, "retrieval_score": 9.311365}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267, "for": 761804, "retrieval_score": 9.311365}
{"snippet": "os.read(fd, n)", "intent": "Read at most `n` bytes from file descriptor `fd` .", "question_id": 6793, "for": 761804, "retrieval_score": 9.074938}
{"snippet": "memory_bio.read()", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9056, "for": 761804, "retrieval_score": 9.074938}
{"snippet": "memory_bio.read(n=-1)", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9057, "for": 761804, "retrieval_score": 9.074938}
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445, "for": 761804, "retrieval_score": 14.856785}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587, "for": 761804, "retrieval_score": 10.855768}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216, "for": 761804, "retrieval_score": 10.066784}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243, "for": 761804, "retrieval_score": 9.922346}
{"snippet": "itertools.tee(iterable)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5266, "for": 761804, "retrieval_score": 9.311365}
{"snippet": "deque.rotate()", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1368, "for": 761804, "retrieval_score": 13.686995}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369, "for": 761804, "retrieval_score": 13.686995}
{"snippet": "str.rjust(width)", "intent": "Return the string right justified in a string of length `width` .", "question_id": 9233, "for": 761804, "retrieval_score": 10.477503}
{"snippet": "deque.pop()", "intent": "Remove and return an element from the right side of the deque .", "question_id": 1364, "for": 761804, "retrieval_score": 9.59563}
{"snippet": "itertools.tee(iterable)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5266, "for": 761804, "retrieval_score": 9.311365}
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445, "for": 761804, "retrieval_score": 10.319267}
{"snippet": "SSLContext.sni_callback", "intent": "Register a callback function that will be called after the TLS Client Hello handshake message has been received by the SSL/TLS server when the TLS client specifies a server name indication.", "question_id": 9018, "for": 761804, "retrieval_score": 9.5308695}
{"snippet": "str.ljust(width, fillchar)", "intent": "Return the string left justified in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "question_id": 9215, "for": 761804, "retrieval_score": 8.957028}
{"snippet": "str.rjust(width, fillchar)", "intent": "Return the string right justified in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "question_id": 9232, "for": 761804, "retrieval_score": 8.957028}
{"snippet": "Unpacker.unpack_fstring(n)", "intent": "Unpacks and returns a fixed length string . `n` is the number of characters expected .", "question_id": 12292, "for": 761804, "retrieval_score": 8.701326}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454, "for": 9376384, "retrieval_score": 16.89028}
{"snippet": "test_case.assertTupleEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11456, "for": 9376384, "retrieval_score": 16.89028}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 9376384, "retrieval_score": 16.878933}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 9376384, "retrieval_score": 16.878933}
{"snippet": "test_case.assertListEqual(first, second, msg=None)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`, `msg`.", "question_id": 11455, "for": 9376384, "retrieval_score": 16.500954}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 17577727, "retrieval_score": 17.75611}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 17577727, "retrieval_score": 16.520227}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 17577727, "retrieval_score": 16.520227}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 17577727, "retrieval_score": 15.451729}
{"snippet": "bytes.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9278, "for": 17577727, "retrieval_score": 14.097963}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 31767173, "retrieval_score": 24.150074}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 31767173, "retrieval_score": 21.172024}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 31767173, "retrieval_score": 20.983835}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 31767173, "retrieval_score": 20.794296}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 31767173, "retrieval_score": 20.762201}
{"snippet": "turtle.clearstamps()", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10931, "for": 42100344, "retrieval_score": 14.645269}
{"snippet": "turtle.clearstamps(n=None)", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10932, "for": 42100344, "retrieval_score": 14.645269}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234, "for": 42100344, "retrieval_score": 13.507145}
{"snippet": "email_message.make_related()", "intent": "Convert a non-multipart message into a multipart/related message , moving any existing Content- headers and payload into a ( new ) first part of the multipart .", "question_id": 3294, "for": 42100344, "retrieval_score": 13.407519}
{"snippet": "email_message.make_alternative()", "intent": "Convert a non-multipart or a multipart/related into a multipart/alternative , moving any existing Content- headers and payload into a ( new ) first part of the multipart .", "question_id": 3296, "for": 42100344, "retrieval_score": 13.087338}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716, "for": 30190459, "retrieval_score": 26.527857}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 30190459, "retrieval_score": 26.00377}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 30190459, "retrieval_score": 22.98229}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 30190459, "retrieval_score": 22.98229}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 30190459, "retrieval_score": 22.98229}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714, "for": 30190459, "retrieval_score": 19.600191}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 30190459, "retrieval_score": 19.465237}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 30190459, "retrieval_score": 17.670523}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713, "for": 30190459, "retrieval_score": 17.254702}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 30190459, "retrieval_score": 15.720289}
{"snippet": "site.getsitepackages()", "intent": "Return a list containing all global site-packages directories .", "question_id": 8409, "for": 798854, "retrieval_score": 18.256527}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 798854, "retrieval_score": 18.19744}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 798854, "retrieval_score": 18.100422}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971, "for": 798854, "retrieval_score": 16.882357}
{"snippet": "email_message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 3248, "for": 798854, "retrieval_score": 16.882357}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 15886340, "retrieval_score": 13.385419}
{"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346, "for": 15886340, "retrieval_score": 13.385419}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348, "for": 15886340, "retrieval_score": 10.994384}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513, "for": 15886340, "retrieval_score": 10.736679}
{"snippet": "text_io_base.write(s)", "intent": "Write the string `s` to the stream and return the number of characters written .", "question_id": 5145, "for": 15886340, "retrieval_score": 10.725946}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 5882405, "retrieval_score": 17.371155}
{"snippet": "calendar.month(theyear, themonth, w=0)", "intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `w`.", "question_id": 998, "for": 5882405, "retrieval_score": 16.430813}
{"snippet": "calendar.month(theyear, themonth, w=0, l=0)", "intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 1000, "for": 5882405, "retrieval_score": 16.128103}
{"snippet": "re.L", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7929, "for": 5882405, "retrieval_score": 16.004303}
{"snippet": "re.LOCALE", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7930, "for": 5882405, "retrieval_score": 16.004303}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660, "for": 16883447, "retrieval_score": 20.685041}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12662, "for": 16883447, "retrieval_score": 19.168823}
{"snippet": "tokenize.open(filename)", "intent": "Open a file in read only mode using the encoding detected by detect_encoding ( ) . With arguments `filename`.", "question_id": 10704, "for": 16883447, "retrieval_score": 13.724418}
{"snippet": "fileinput.hook_encoded(encoding)", "intent": "Returns a hook which opens each file with open ( ) , using the given `encoding` and `errors` to read the file .", "question_id": 3811, "for": 16883447, "retrieval_score": 13.677935}
{"snippet": "fileinput.hook_encoded(encoding, errors=None)", "intent": "Returns a hook which opens each file with open ( ) , using the given `encoding` and `errors` to read the file .", "question_id": 3812, "for": 16883447, "retrieval_score": 13.677935}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895, "for": 1222677, "retrieval_score": 20.04256}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898, "for": 1222677, "retrieval_score": 20.04256}
{"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325, "for": 1222677, "retrieval_score": 19.590984}
{"snippet": "heapq.nsmallest(n, iterable)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` .", "question_id": 4327, "for": 1222677, "retrieval_score": 19.590984}
{"snippet": "element.keys()", "intent": "Returns the elements attribute names as a list .", "question_id": 12487, "for": 1222677, "retrieval_score": 19.543404}
{"snippet": "decimal.adjusted()", "intent": "Return the adjusted exponent after shifting out the coefficient \u2019 s rightmost digits until only the lead digit remains : Decimal ( '321e+5 ' ) .adjusted ( ) returns seven .", "question_id": 2395, "for": 41807864, "retrieval_score": 20.698011}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991, "for": 41807864, "retrieval_score": 18.388264}
{"snippet": "nntplib.NNTPProtocolError", "intent": "Exception raised when a reply is received from the server that does not begin with a digit in the range 1\u20135.", "question_id": 6444, "for": 41807864, "retrieval_score": 18.058455}
{"snippet": "decimal.ROUND_05UP", "intent": "Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero.", "question_id": 2584, "for": 41807864, "retrieval_score": 13.191467}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442, "for": 41807864, "retrieval_score": 12.081944}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639, "for": 2655956, "retrieval_score": 19.97836}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 2655956, "retrieval_score": 19.80775}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 2655956, "retrieval_score": 19.237167}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 2655956, "retrieval_score": 18.339453}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2641, "for": 2655956, "retrieval_score": 18.022457}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 3887469, "retrieval_score": 11.135459}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 3887469, "retrieval_score": 11.135459}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 3887469, "retrieval_score": 10.9594145}
{"snippet": "i_pv4_address.exploded", "intent": "The string representation in dotted decimal notation.", "question_id": 5177, "for": 3887469, "retrieval_score": 10.612152}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 3887469, "retrieval_score": 10.582789}
{"snippet": "Element.removeAttributeNode(oldAttr)", "intent": "Remove and return `oldAttr` from the attribute list , if present .", "question_id": 12364, "for": 39532974, "retrieval_score": 15.683621}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 39532974, "retrieval_score": 15.547104}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 39532974, "retrieval_score": 15.036155}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 39532974, "retrieval_score": 15.036155}
{"snippet": "example.lineno", "intent": "The line number within the string containing this example where the example begins.", "question_id": 2837, "for": 39532974, "retrieval_score": 14.582778}
{"snippet": "queue_listener.__init__()", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5594, "for": 2972212, "retrieval_score": 13.611052}
{"snippet": "queue_listener.__init__(level=NOTSET)", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5595, "for": 2972212, "retrieval_score": 13.611052}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 2972212, "retrieval_score": 11.264266}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801, "for": 2972212, "retrieval_score": 10.767862}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221, "for": 2972212, "retrieval_score": 10.325116}
{"snippet": "queue_listener.__init__()", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5594, "for": 2972212, "retrieval_score": 13.611052}
{"snippet": "queue_listener.__init__(level=NOTSET)", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5595, "for": 2972212, "retrieval_score": 13.611052}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 2972212, "retrieval_score": 11.264266}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801, "for": 2972212, "retrieval_score": 10.767862}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221, "for": 2972212, "retrieval_score": 10.325116}
{"snippet": "queue_listener.__init__()", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5594, "for": 2972212, "retrieval_score": 13.611052}
{"snippet": "queue_listener.__init__(level=NOTSET)", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5595, "for": 2972212, "retrieval_score": 13.611052}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 2972212, "retrieval_score": 11.264266}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801, "for": 2972212, "retrieval_score": 10.767862}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221, "for": 2972212, "retrieval_score": 10.325116}
{"snippet": "queue_listener.__init__()", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5594, "for": 2972212, "retrieval_score": 13.611052}
{"snippet": "queue_listener.__init__(level=NOTSET)", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5595, "for": 2972212, "retrieval_score": 13.611052}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 2972212, "retrieval_score": 11.264266}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801, "for": 2972212, "retrieval_score": 10.767862}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221, "for": 2972212, "retrieval_score": 10.325116}
{"snippet": "NNTP.quit()", "intent": "Send a QUIT command and close the connection .", "question_id": 6448, "for": 13022385, "retrieval_score": 10.697129}
{"snippet": "async_exit_stack.aclose()", "intent": "Similar to close ( ) but properly handles awaitables .", "question_id": 1636, "for": 13022385, "retrieval_score": 10.081155}
{"snippet": "FTP.quit()", "intent": "Send a QUIT command to the server and close the connection .", "question_id": 3966, "for": 13022385, "retrieval_score": 9.921666}
{"snippet": "queue_listener.enqueue_sentinel()", "intent": "Writes a sentinel to the queue to tell the listener to quit .", "question_id": 5564, "for": 13022385, "retrieval_score": 9.6875725}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608, "for": 13022385, "retrieval_score": 9.251034}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 5254445, "retrieval_score": 12.020857}
{"snippet": "str.startswith(prefix, start, end)", "intent": "Return True if string starts with the `prefix` , otherwise return False . With optional `start` , test string beginning at that position . With optional `end` , stop comparing string at that position .", "question_id": 9247, "for": 5254445, "retrieval_score": 11.815766}
{"snippet": "Packer.pack_string(s)", "intent": "Packs a variable length string , s. The length of the string is first packed as an unsigned integer , then the string data is packed with pack_fstring ( ) . With arguments `s`.", "question_id": 12279, "for": 5254445, "retrieval_score": 11.486766}
{"snippet": "text_calendar.formatmonth(theyear, themonth)", "intent": "Return a month \u2019 s calendar in a multi-line string . With arguments `theyear`, `themonth`.", "question_id": 928, "for": 5254445, "retrieval_score": 11.314055}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277, "for": 5254445, "retrieval_score": 11.113228}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 11219949, "retrieval_score": 13.133304}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 11219949, "retrieval_score": 12.371967}
{"snippet": "readline.read_history_file()", "intent": "Load a readline history file , and append it to the history list .", "question_id": 8022, "for": 11219949, "retrieval_score": 10.964225}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 11219949, "retrieval_score": 10.647343}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036, "for": 11219949, "retrieval_score": 10.239452}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 11219949, "retrieval_score": 14.434724}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 11219949, "retrieval_score": 14.338573}
{"snippet": "turtle.setundobuffer(size)", "intent": "Set or disable undobuffer . If `size` is an integer an empty undobuffer of given size is installed .", "question_id": 11038, "for": 11219949, "retrieval_score": 12.582859}
{"snippet": "NNTP.getcapabilities()", "intent": "Return the RFC 3977 capabilities advertised by the server , as a dict instance mapping capability names to ( possibly empty ) lists of values .", "question_id": 6450, "for": 11219949, "retrieval_score": 12.498095}
{"snippet": "glob.glob(pathname)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification .", "question_id": 4264, "for": 11219949, "retrieval_score": 11.775621}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427, "for": 20837786, "retrieval_score": 23.56568}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773, "for": 20837786, "retrieval_score": 20.017408}
{"snippet": "HTTPConnection.request(method, url, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4430, "for": 20837786, "retrieval_score": 18.929832}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 20837786, "retrieval_score": 18.830332}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428, "for": 20837786, "retrieval_score": 18.648869}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934, "for": 2849286, "retrieval_score": 17.017805}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935, "for": 2849286, "retrieval_score": 17.017805}
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133, "for": 2849286, "retrieval_score": 14.428168}
{"snippet": "sequence_matcher.ratio()", "intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "question_id": 2687, "for": 2849286, "retrieval_score": 12.632698}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 2849286, "retrieval_score": 11.075658}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 29034928, "retrieval_score": 15.706672}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855, "for": 29034928, "retrieval_score": 13.553677}
{"snippet": "binascii.b2a_qp(data)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding .", "question_id": 828, "for": 29034928, "retrieval_score": 13.319692}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 29034928, "retrieval_score": 12.340761}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 29034928, "retrieval_score": 12.33041}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052, "for": 3428769, "retrieval_score": 17.091024}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050, "for": 3428769, "retrieval_score": 15.540085}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051, "for": 3428769, "retrieval_score": 14.514952}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156, "for": 3428769, "retrieval_score": 13.558637}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049, "for": 3428769, "retrieval_score": 13.213553}
{"snippet": "context.to_eng_string(x)", "intent": "Convert to a string , using engineering notation if an exponent is needed . With arguments `x`.", "question_id": 2573, "for": 2636755, "retrieval_score": 16.034126}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 2636755, "retrieval_score": 15.621825}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 2636755, "retrieval_score": 15.621825}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 2636755, "retrieval_score": 14.546161}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 2636755, "retrieval_score": 13.0602}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 354038, "retrieval_score": 12.551632}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 354038, "retrieval_score": 12.54772}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 354038, "retrieval_score": 12.38713}
{"snippet": "devpoll.register(fd, eventmask)", "intent": "Register a file descriptor with the polling object . `fd` can be either an integer , or an object with a fileno ( ) method that returns an integer . `eventmask` is an optional bitmask describing the type of events you want to check for .", "question_id": 8172, "for": 354038, "retrieval_score": 12.351589}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 354038, "retrieval_score": 12.31987}
{"snippet": "bdb.get_bpbynumber(arg)", "intent": "Return a breakpoint specified by the given number . If `arg` is a string , it will be converted to a number .", "question_id": 799, "for": 354038, "retrieval_score": 12.310936}
{"snippet": "ctypes.wstring_at(address, size=-1)", "intent": "This function returns the wide character string starting at memory `address` address as a string . If `size` is specified , it is used as the number of characters of the string , otherwise the string is assumed to be zero-terminated .", "question_id": 1841, "for": 354038, "retrieval_score": 11.937558}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800, "for": 354038, "retrieval_score": 11.919963}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889, "for": 354038, "retrieval_score": 11.681406}
{"snippet": "faulthandler.is_enabled()", "intent": "Check if the fault handler is enabled .", "question_id": 3721, "for": 354038, "retrieval_score": 11.072291}
{"snippet": "bdb.checkfuncname(b, frame)", "intent": "Check whether we should break here , depending on the way the breakpoint `b` was set . If it was set via line number , it checks if b.line is the same as the one in the `frame` also passed as argument .", "question_id": 817, "for": 354038, "retrieval_score": 11.7927265}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800, "for": 354038, "retrieval_score": 11.084859}
{"snippet": "faulthandler.is_enabled()", "intent": "Check if the fault handler is enabled .", "question_id": 3721, "for": 354038, "retrieval_score": 11.072291}
{"snippet": "random.uniform(a, b)", "intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "question_id": 7907, "for": 354038, "retrieval_score": 10.9170885}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 354038, "retrieval_score": 10.491693}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125, "for": 18366797, "retrieval_score": 13.363489}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126, "for": 18366797, "retrieval_score": 13.363489}
{"snippet": "stream_reader.readlines(sizehint)", "intent": "Read all lines available on the input stream and return them as a list of lines . `sizehint` , if given , is passed as the size argument to the stream \u2019 s read ( ) method .", "question_id": 1294, "for": 18366797, "retrieval_score": 12.224612}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363, "for": 18366797, "retrieval_score": 11.833863}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 18366797, "retrieval_score": 11.341803}
{"snippet": "typing.Callable", "intent": "Callable type; Callable[[int], str] is a function of (int) -> str.", "question_id": 11336, "for": 12604909, "retrieval_score": 16.311937}
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244, "for": 12604909, "retrieval_score": 15.796587}
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311, "for": 12604909, "retrieval_score": 12.925962}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, domain: int=None)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `domain: int`.", "question_id": 10859, "for": 12604909, "retrieval_score": 12.850298}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636, "for": 12604909, "retrieval_score": 12.82747}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518, "for": 4362586, "retrieval_score": 13.203722}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 4362586, "retrieval_score": 12.5021305}
{"snippet": "gc.get_objects()", "intent": "Returns a list of all objects tracked by the collector , excluding the list returned .", "question_id": 4174, "for": 4362586, "retrieval_score": 12.323368}
{"snippet": "Cmd.cmdqueue", "intent": "A list of queued input lines.", "question_id": 1148, "for": 4362586, "retrieval_score": 12.307863}
{"snippet": "chain_map.maps", "intent": "A user updateable list of mappings.", "question_id": 1336, "for": 4362586, "retrieval_score": 12.307863}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 6561653, "retrieval_score": 19.358578}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 6561653, "retrieval_score": 18.334173}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 6561653, "retrieval_score": 17.684082}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 6561653, "retrieval_score": 17.53144}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 6561653, "retrieval_score": 16.860376}
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763, "for": 3774571, "retrieval_score": 13.06019}
{"snippet": "AU_write.setcomptype(type, name)", "intent": "Set the compression `type` and description . With arguments `name`.", "question_id": 9725, "for": 3774571, "retrieval_score": 11.461373}
{"snippet": "Wave_write.setcomptype(type, name)", "intent": "Set the compression `type` and description . With arguments `name`.", "question_id": 12069, "for": 3774571, "retrieval_score": 11.461373}
{"snippet": "importlib.util.find_spec(name)", "intent": "Find the spec for a module , optionally relative to the specified `package` `name` .", "question_id": 4928, "for": 3774571, "retrieval_score": 10.952907}
{"snippet": "importlib.util.find_spec(name, package=None)", "intent": "Find the spec for a module , optionally relative to the specified `package` `name` .", "question_id": 4929, "for": 3774571, "retrieval_score": 10.952907}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 39268928, "retrieval_score": 23.091398}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 39268928, "retrieval_score": 18.742907}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 39268928, "retrieval_score": 17.62844}
{"snippet": "deque.clear()", "intent": "Remove all elements from the deque leaving it with length 0 .", "question_id": 1355, "for": 39268928, "retrieval_score": 15.498554}
{"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012, "for": 39268928, "retrieval_score": 14.132545}
{"snippet": "format(value, format_spec)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4021, "for": 39268928, "retrieval_score": 12.379945}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022, "for": 39268928, "retrieval_score": 12.379945}
{"snippet": "pprint.pformat(object)", "intent": "Return the formatted representation of `object` as a string .", "question_id": 7633, "for": 39268928, "retrieval_score": 12.251238}
{"snippet": "collections.OrderedDict()", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order .", "question_id": 1390, "for": 39268928, "retrieval_score": 11.013977}
{"snippet": "xmlrpc.client.dumps(params, methodresponse=None)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true .", "question_id": 12700, "for": 39268928, "retrieval_score": 10.971733}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 13655392, "retrieval_score": 18.928057}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 13655392, "retrieval_score": 17.41962}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 13655392, "retrieval_score": 16.391108}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 13655392, "retrieval_score": 15.738359}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 13655392, "retrieval_score": 15.454722}
{"snippet": "window.insstr(str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`.", "question_id": 2082, "for": 13655392, "retrieval_score": 22.253365}
{"snippet": "shlex.wordchars", "intent": "The string of characters that will accumulate into multi-character tokens.", "question_id": 8295, "for": 13655392, "retrieval_score": 22.226147}
{"snippet": "window.insstr(str, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`, `attr`.", "question_id": 2081, "for": 13655392, "retrieval_score": 21.901573}
{"snippet": "locale.CODESET", "intent": "Get a string with the name of the character encoding used in the selected locale.", "question_id": 5354, "for": 13655392, "retrieval_score": 21.46336}
{"snippet": "curses.ascii.unctrl(c)", "intent": "Return a string representation of the ASCII character c. If `c` is printable , this string is the character itself .", "question_id": 1917, "for": 13655392, "retrieval_score": 21.115152}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736, "for": 18397805, "retrieval_score": 17.284334}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797, "for": 18397805, "retrieval_score": 16.533785}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 18397805, "retrieval_score": 15.354877}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847, "for": 18397805, "retrieval_score": 15.12639}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 18397805, "retrieval_score": 14.185435}
{"snippet": "str.isalpha()", "intent": "Return true if all characters in the string are alphabetic and there is at least one character , false otherwise .", "question_id": 9203, "for": 8199398, "retrieval_score": 16.806103}
{"snippet": "str.istitle()", "intent": "Return true if the string is a titlecased string and there is at least one character , for example uppercase characters may only follow uncased characters and lowercase characters only cased ones .", "question_id": 9212, "for": 8199398, "retrieval_score": 16.168316}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 8199398, "retrieval_score": 14.969679}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857, "for": 8199398, "retrieval_score": 13.832776}
{"snippet": "doctest.DocTestParser", "intent": "A processing class used to extract interactive examples from a string, and use them to create a DocTest object.", "question_id": 2855, "for": 8199398, "retrieval_score": 13.642141}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857, "for": 8199398, "retrieval_score": 17.456743}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 8199398, "retrieval_score": 17.050873}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948, "for": 8199398, "retrieval_score": 14.135815}
{"snippet": "str.istitle()", "intent": "Return true if the string is a titlecased string and there is at least one character , for example uppercase characters may only follow uncased characters and lowercase characters only cased ones .", "question_id": 9212, "for": 8199398, "retrieval_score": 14.017238}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 8199398, "retrieval_score": 13.969581}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 2151517, "retrieval_score": 15.913675}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 2151517, "retrieval_score": 15.458902}
{"snippet": "IMAP4.getquotaroot(mailbox)", "intent": "Get the list of quota roots for the named `mailbox` .", "question_id": 4705, "for": 2151517, "retrieval_score": 14.835621}
{"snippet": "SSLContext.get_ca_certs()", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates .", "question_id": 9011, "for": 2151517, "retrieval_score": 14.701467}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 2151517, "retrieval_score": 13.976874}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 2151517, "retrieval_score": 17.210268}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 2151517, "retrieval_score": 16.893753}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 2151517, "retrieval_score": 16.533884}
{"snippet": "IMAP4.getquotaroot(mailbox)", "intent": "Get the list of quota roots for the named `mailbox` .", "question_id": 4705, "for": 2151517, "retrieval_score": 16.003786}
{"snippet": "cursor.fetchmany()", "intent": "Fetches the next set of rows of a query result , returning a list .", "question_id": 8845, "for": 2151517, "retrieval_score": 15.933349}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 36190533, "retrieval_score": 20.473215}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 36190533, "retrieval_score": 18.079563}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 36190533, "retrieval_score": 18.079563}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984, "for": 36190533, "retrieval_score": 17.168394}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer, lock=True)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed . If `lock` is True ( the default ) then a new lock object is created to synchronize access to the value .", "question_id": 6268, "for": 36190533, "retrieval_score": 16.76592}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207, "for": 4324790, "retrieval_score": 11.806234}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217, "for": 4324790, "retrieval_score": 11.646529}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 4324790, "retrieval_score": 11.503498}
{"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346, "for": 4324790, "retrieval_score": 11.503498}
{"snippet": "curses.ascii.controlnames", "intent": "A 33-element string array that contains the ASCII mnemonics for the thirty-two ASCII control characters from 0 (NUL) to 0x1f (US), in order, plus the mnemonic SP for the space character.", "question_id": 1918, "for": 4324790, "retrieval_score": 11.240064}
{"snippet": "decimal.compare_total_mag(other)", "intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . With arguments `other`.", "question_id": 2405, "for": 28767642, "retrieval_score": 20.739841}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 28767642, "retrieval_score": 20.439444}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 28767642, "retrieval_score": 20.439444}
{"snippet": "operator.getitem(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6575, "for": 28767642, "retrieval_score": 20.439444}
{"snippet": "operator.__getitem__(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6576, "for": 28767642, "retrieval_score": 20.439444}
{"snippet": "turtle.onrelease(fun)", "intent": "Bind `fun` to mouse-button-release events on this turtle .", "question_id": 11023, "for": 21350605, "retrieval_score": 40.180588}
{"snippet": "tkinter.tix.OptionMenu", "intent": "The OptionMenu creates a menu button of options.", "question_id": 10559, "for": 21350605, "retrieval_score": 38.678062}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132, "for": 21350605, "retrieval_score": 38.186386}
{"snippet": "tkinter.tix.Select", "intent": "The Select widget is a container of button subwidgets.", "question_id": 10561, "for": 21350605, "retrieval_score": 37.695976}
{"snippet": "turtle.onrelease(fun, btn=1)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`.", "question_id": 11024, "for": 21350605, "retrieval_score": 37.40207}
{"snippet": "turtle.onrelease(fun)", "intent": "Bind `fun` to mouse-button-release events on this turtle .", "question_id": 11023, "for": 21350605, "retrieval_score": 12.608696}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this turtle .", "question_id": 11019, "for": 21350605, "retrieval_score": 12.47007}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this screen .", "question_id": 11071, "for": 21350605, "retrieval_score": 12.47007}
{"snippet": "turtle.onscreenclick(fun)", "intent": "Bind `fun` to mouse-click events on this screen .", "question_id": 11075, "for": 21350605, "retrieval_score": 12.47007}
{"snippet": "turtle.onrelease(fun, btn=1)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`.", "question_id": 11024, "for": 21350605, "retrieval_score": 11.736795}
{"snippet": "SubprocessTransport.close()", "intent": "Kill the subprocess by calling the kill ( ) method .", "question_id": 425, "for": 6278847, "retrieval_score": 13.26427}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 6278847, "retrieval_score": 12.500981}
{"snippet": "SubprocessTransport.kill()", "intent": "Kill the subprocess .", "question_id": 422, "for": 6278847, "retrieval_score": 12.268644}
{"snippet": "process.kill()", "intent": "Kill the child .", "question_id": 552, "for": 6278847, "retrieval_score": 12.268644}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170, "for": 6278847, "retrieval_score": 11.947621}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063, "for": 4552380, "retrieval_score": 25.904982}
{"snippet": "symbol_table.get_identifiers()", "intent": "Return a list of names of symbols in this table .", "question_id": 9742, "for": 4552380, "retrieval_score": 16.355656}
{"snippet": "TarFile.list()", "intent": "Print a table of contents to sys.stdout .", "question_id": 9927, "for": 4552380, "retrieval_score": 16.24874}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027, "for": 4552380, "retrieval_score": 15.918607}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 4552380, "retrieval_score": 15.745887}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679, "for": 4574509, "retrieval_score": 11.1177635}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 4574509, "retrieval_score": 10.205771}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 4574509, "retrieval_score": 10.205771}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126, "for": 4574509, "retrieval_score": 10.205771}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463, "for": 4574509, "retrieval_score": 10.205771}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927, "for": 40196941, "retrieval_score": 17.315403}
{"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928, "for": 40196941, "retrieval_score": 17.315403}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529, "for": 40196941, "retrieval_score": 17.278263}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674, "for": 40196941, "retrieval_score": 16.221395}
{"snippet": "Telnet.expect(list)", "intent": "Read until one from a `list` of a regular expressions matches .", "question_id": 10030, "for": 40196941, "retrieval_score": 15.41471}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 6372228, "retrieval_score": 19.383837}
{"snippet": "doc_test_parser.parse(string)", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings .", "question_id": 2859, "for": 6372228, "retrieval_score": 19.309021}
{"snippet": "Unpacker.unpack_fstring(n)", "intent": "Unpacks and returns a fixed length string . `n` is the number of characters expected .", "question_id": 12292, "for": 6372228, "retrieval_score": 19.12827}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639, "for": 6372228, "retrieval_score": 18.749191}
{"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325, "for": 6372228, "retrieval_score": 18.533861}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442, "for": 4338032, "retrieval_score": 23.730793}
{"snippet": "test_case.assertNotRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11444, "for": 4338032, "retrieval_score": 23.730793}
{"snippet": "test_case.assertRaisesRegex(exception, regex, msg=None)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` . With arguments `msg`.", "question_id": 11404, "for": 4338032, "retrieval_score": 23.280994}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 4338032, "retrieval_score": 22.686234}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 4338032, "retrieval_score": 22.686234}
{"snippet": "formatter.DumbWriter(maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3857, "for": 11361985, "retrieval_score": 12.107325}
{"snippet": "formatter.DumbWriter(file=None, maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3858, "for": 11361985, "retrieval_score": 12.107325}
{"snippet": "auto.start", "intent": "The first index of invalid data in object.", "question_id": 3677, "for": 11361985, "retrieval_score": 11.696005}
{"snippet": "text_wrapper.initial_indent", "intent": "(default: '') String that will be prepended to the first line of wrapped output.", "question_id": 10332, "for": 11361985, "retrieval_score": 11.587226}
{"snippet": "os.get_terminal_size(fd=STDOUT_FILENO)", "intent": "Return the size of the terminal window as ( columns , lines ) , tuple of type terminal_size . The optional argument `fd` ( default STDOUT_FILENO , or standard output ) specifies which file descriptor should be queried .", "question_id": 6812, "for": 11361985, "retrieval_score": 11.462657}
{"snippet": "writer.send_literal_data(data)", "intent": "Output character `data` which has already been formatted for display .", "question_id": 3851, "for": 11361985, "retrieval_score": 15.130346}
{"snippet": "zlib.compressobj(wbits=MAX_WBITS)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . The `wbits` argument controls the size of the history buffer ( or the \u201c window size \u201d ) used when compressing data , and whether a header and trailer is included in the output .", "question_id": 12910, "for": 11361985, "retrieval_score": 14.77404}
{"snippet": "zlib.compressobj()", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once .", "question_id": 12907, "for": 11361985, "retrieval_score": 14.530154}
{"snippet": "zlib.decompressobj()", "intent": "Returns a decompression object , to be used for decompressing data streams that won \u2019 t fit into memory at once .", "question_id": 12925, "for": 11361985, "retrieval_score": 14.530154}
{"snippet": "charset.header_encode_lines(string, maxlengths)", "intent": "Header-encode a `string` by converting it first to bytes . This is similar to header_encode ( ) except that the string is fit into maximum line lengths as given by the argument `maxlengths` , which must be an iterator : each element returned from this iterator will provide the next maximum line length .", "question_id": 2921, "for": 11361985, "retrieval_score": 14.352838}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340, "for": 12307099, "retrieval_score": 25.92886}
{"snippet": "system_random.colno", "intent": "The column corresponding to pos (may be None).", "question_id": 7969, "for": 12307099, "retrieval_score": 23.902294}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 12307099, "retrieval_score": 22.712025}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 12307099, "retrieval_score": 22.712025}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 12307099, "retrieval_score": 22.712025}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 11406091, "retrieval_score": 14.437712}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 11406091, "retrieval_score": 14.437712}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 11406091, "retrieval_score": 14.437712}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 11406091, "retrieval_score": 14.437712}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080, "for": 11406091, "retrieval_score": 14.437712}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 861190, "retrieval_score": 13.238739}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 861190, "retrieval_score": 13.238739}
{"snippet": "mailbox.iterkeys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5729, "for": 861190, "retrieval_score": 12.868423}
{"snippet": "mailbox.keys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5730, "for": 861190, "retrieval_score": 12.868423}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667, "for": 861190, "retrieval_score": 12.742459}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175, "for": 861190, "retrieval_score": 12.259782}
{"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325, "for": 861190, "retrieval_score": 12.079358}
{"snippet": "heapq.nsmallest(n, iterable)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` .", "question_id": 4327, "for": 861190, "retrieval_score": 12.079358}
{"snippet": "stats.reverse_order()", "intent": "This method for the Stats class reverses the ordering of the basic list within the object .", "question_id": 7694, "for": 861190, "retrieval_score": 12.075866}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 861190, "retrieval_score": 11.54057}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 14986218, "retrieval_score": 25.406874}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 14986218, "retrieval_score": 23.972454}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 14986218, "retrieval_score": 23.806976}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045, "for": 14986218, "retrieval_score": 23.796858}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 14986218, "retrieval_score": 22.845993}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 4690094, "retrieval_score": 19.589859}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 4690094, "retrieval_score": 19.589859}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 4690094, "retrieval_score": 15.677011}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 4690094, "retrieval_score": 14.684485}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 4690094, "retrieval_score": 14.684485}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372, "for": 2742784, "retrieval_score": 10.440503}
{"snippet": "base_http_request_handler.handle_expect_100()", "intent": "When a HTTP/1.1 compliant server receives an Expect : 100-continue request header it responds back with a 100 Continue followed by 200 OK headers .", "question_id": 4636, "for": 2742784, "retrieval_score": 10.401068}
{"snippet": "decimal.ROUND_CEILING", "intent": "Round towards Infinity.", "question_id": 2577, "for": 2742784, "retrieval_score": 10.091232}
{"snippet": "decimal.ROUND_DOWN", "intent": "Round towards zero.", "question_id": 2578, "for": 2742784, "retrieval_score": 10.091232}
{"snippet": "decimal.ROUND_FLOOR", "intent": "Round towards -Infinity.", "question_id": 2579, "for": 2742784, "retrieval_score": 10.091232}
{"snippet": "tarfile.TarFile(mode='r')", "intent": "All following arguments are optional and can be accessed as instance attributes as well . `mode` is either ' r ' to read from an existing archive , ' a ' to append data to an existing file , ' w ' to create a new file overwriting an existing one , or ' x ' to create a new file only if it does not already exist .", "question_id": 9915, "for": 1348026, "retrieval_score": 20.32364}
{"snippet": "formatter.add_line_break()", "intent": "Add a hard line break if one does not already exist .", "question_id": 3820, "for": 1348026, "retrieval_score": 17.274847}
{"snippet": "stat.UF_HIDDEN", "intent": "The file should not be displayed in a GUI (Mac OS X 10.5+).", "question_id": 9119, "for": 1348026, "retrieval_score": 16.557741}
{"snippet": "mailbox.mbox(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in mbox format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5770, "for": 1348026, "retrieval_score": 16.404106}
{"snippet": "mailbox.MH(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in MH format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5777, "for": 1348026, "retrieval_score": 16.404106}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 40535203, "retrieval_score": 22.531065}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832, "for": 40535203, "retrieval_score": 21.484425}
{"snippet": "Option.choices", "intent": "For options of type \"choice\", the list of strings the user may choose from.", "question_id": 6632, "for": 40535203, "retrieval_score": 21.16899}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 40535203, "retrieval_score": 20.875557}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 40535203, "retrieval_score": 20.875557}
{"snippet": "wsgiref.simple_server.demo_app(environ, start_response)", "intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "question_id": 12227, "for": 931092, "retrieval_score": 13.603609}
{"snippet": "turtle.mode()", "intent": "Set turtle `mode` ( \u201c standard \u201d , \u201c logo \u201d or \u201c world \u201d ) and perform reset .", "question_id": 11092, "for": 931092, "retrieval_score": 9.673816}
{"snippet": "turtle.mode(mode=None)", "intent": "Set turtle `mode` ( \u201c standard \u201d , \u201c logo \u201d or \u201c world \u201d ) and perform reset .", "question_id": 11093, "for": 931092, "retrieval_score": 9.673816}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 931092, "retrieval_score": 8.703225}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 931092, "retrieval_score": 8.533597}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 931092, "retrieval_score": 11.075131}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 931092, "retrieval_score": 10.607663}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 931092, "retrieval_score": 8.703225}
{"snippet": "style.element_options(elementname)", "intent": "Returns the list of `elementname` \u2019 s options .", "question_id": 10685, "for": 931092, "retrieval_score": 8.321278}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 931092, "retrieval_score": 8.280191}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 931092, "retrieval_score": 8.703225}
{"snippet": "os.path.normpath(path)", "intent": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a `path` that contains symbolic links .", "question_id": 7162, "for": 931092, "retrieval_score": 8.247661}
{"snippet": "deque.reverse()", "intent": "Reverse the elements of the deque in-place and then return None .", "question_id": 1367, "for": 931092, "retrieval_score": 8.087191}
{"snippet": "exit_stack.close()", "intent": "Immediately unwinds the callback stack , invoking callbacks in the reverse order of registration .", "question_id": 1631, "for": 931092, "retrieval_score": 7.9007792}
{"snippet": "i_pv4_address.reverse_pointer", "intent": "The name of the reverse DNS PTR record for the IP address, e.g.", "question_id": 5179, "for": 931092, "retrieval_score": 7.9007792}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 931092, "retrieval_score": 8.703225}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 931092, "retrieval_score": 8.533597}
{"snippet": "audioop.reverse(fragment, width)", "intent": "Reverse the samples in a `fragment` and returns the modified fragment . With arguments `width`.", "question_id": 703, "for": 931092, "retrieval_score": 8.482609}
{"snippet": "deque.reverse()", "intent": "Reverse the elements of the deque in-place and then return None .", "question_id": 1367, "for": 931092, "retrieval_score": 8.087191}
{"snippet": "locale.delocalize(string)", "intent": "Converts a `string` into a normalized number string , following the LC_NUMERIC settings .", "question_id": 5401, "for": 931092, "retrieval_score": 7.987326}
{"snippet": "os.path.normpath(path)", "intent": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a `path` that contains symbolic links .", "question_id": 7162, "for": 931092, "retrieval_score": 9.368525}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 931092, "retrieval_score": 8.703225}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 931092, "retrieval_score": 8.533597}
{"snippet": "audioop.reverse(fragment, width)", "intent": "Reverse the samples in a `fragment` and returns the modified fragment . With arguments `width`.", "question_id": 703, "for": 931092, "retrieval_score": 8.482609}
{"snippet": "deque.reverse()", "intent": "Reverse the elements of the deque in-place and then return None .", "question_id": 1367, "for": 931092, "retrieval_score": 8.087191}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 931092, "retrieval_score": 9.514593}
{"snippet": "audioop.reverse(fragment, width)", "intent": "Reverse the samples in a `fragment` and returns the modified fragment . With arguments `width`.", "question_id": 703, "for": 931092, "retrieval_score": 9.24245}
{"snippet": "locale.delocalize(string)", "intent": "Converts a `string` into a normalized number string , following the LC_NUMERIC settings .", "question_id": 5401, "for": 931092, "retrieval_score": 9.013079}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 931092, "retrieval_score": 8.703225}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216, "for": 931092, "retrieval_score": 8.698926}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 931092, "retrieval_score": 9.514593}
{"snippet": "audioop.reverse(fragment, width)", "intent": "Reverse the samples in a `fragment` and returns the modified fragment . With arguments `width`.", "question_id": 703, "for": 931092, "retrieval_score": 9.24245}
{"snippet": "locale.delocalize(string)", "intent": "Converts a `string` into a normalized number string , following the LC_NUMERIC settings .", "question_id": 5401, "for": 931092, "retrieval_score": 9.013079}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 931092, "retrieval_score": 8.703225}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216, "for": 931092, "retrieval_score": 8.698926}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 931092, "retrieval_score": 8.703225}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 931092, "retrieval_score": 8.533597}
{"snippet": "audioop.reverse(fragment, width)", "intent": "Reverse the samples in a `fragment` and returns the modified fragment . With arguments `width`.", "question_id": 703, "for": 931092, "retrieval_score": 8.482609}
{"snippet": "deque.reverse()", "intent": "Reverse the elements of the deque in-place and then return None .", "question_id": 1367, "for": 931092, "retrieval_score": 8.087191}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 931092, "retrieval_score": 7.945547}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 11064917, "retrieval_score": 19.34694}
{"snippet": "uuid.uuid5(namespace, name)", "intent": "Generate a UUID based on the SHA-1 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11963, "for": 11064917, "retrieval_score": 18.46771}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 11064917, "retrieval_score": 17.71159}
{"snippet": "difflib.restore(sequence, which)", "intent": "Return one of the two sequences that generated a delta . Given a `sequence` produced by Differ.compare ( ) or ndiff ( ) , extract lines originating from file 1 or 2 ( parameter `which` ) , stripping off line prefixes .", "question_id": 2646, "for": 11064917, "retrieval_score": 16.34896}
{"snippet": "decimal.remainder_near(other, context=None)", "intent": "Return the remainder from dividing self by `other` . With arguments `context`.", "question_id": 2467, "for": 11064917, "retrieval_score": 15.459758}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 33824334, "retrieval_score": 22.122152}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 33824334, "retrieval_score": 21.078249}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 33824334, "retrieval_score": 21.078249}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 33824334, "retrieval_score": 18.72765}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 33824334, "retrieval_score": 18.72765}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 10213994, "retrieval_score": 27.52973}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 10213994, "retrieval_score": 26.1329}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 10213994, "retrieval_score": 24.880072}
{"snippet": "Request.header_items()", "intent": "Return a list of tuples ( header_name , header_value ) of the Request headers .", "question_id": 11833, "for": 10213994, "retrieval_score": 24.241116}
{"snippet": "NNTP.list(group_pattern=None, file=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` . With arguments `file`.", "question_id": 6468, "for": 10213994, "retrieval_score": 24.050974}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 10213994, "retrieval_score": 26.1329}
{"snippet": "Request.header_items()", "intent": "Return a list of tuples ( header_name , header_value ) of the Request headers .", "question_id": 11833, "for": 10213994, "retrieval_score": 24.241116}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 10213994, "retrieval_score": 23.04999}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670, "for": 10213994, "retrieval_score": 23.04999}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 10213994, "retrieval_score": 22.90617}
{"snippet": "turtle.Vec2D(x, y)", "intent": "A two-dimensional vector class , used as a helper class for implementing turtle graphics . With arguments `x`, `y`.", "question_id": 11167, "for": 9236926, "retrieval_score": 14.3656435}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427, "for": 9236926, "retrieval_score": 12.087711}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893, "for": 9236926, "retrieval_score": 11.457872}
{"snippet": "sequence_matcher.set_seqs(a, b)", "intent": "Set the two sequences to be compared . With arguments `a`, `b`.", "question_id": 2679, "for": 9236926, "retrieval_score": 11.39804}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424, "for": 9236926, "retrieval_score": 10.278974}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 899103, "retrieval_score": 12.207843}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 899103, "retrieval_score": 11.73188}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156, "for": 899103, "retrieval_score": 11.631777}
{"snippet": "Unpacker.unpack_list(unpack_item)", "intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "question_id": 12297, "for": 899103, "retrieval_score": 11.266183}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 899103, "retrieval_score": 11.238931}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 899103, "retrieval_score": 12.207843}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 899103, "retrieval_score": 11.73188}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156, "for": 899103, "retrieval_score": 11.631777}
{"snippet": "Unpacker.unpack_list(unpack_item)", "intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "question_id": 12297, "for": 899103, "retrieval_score": 11.266183}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 899103, "retrieval_score": 11.238931}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434, "for": 899103, "retrieval_score": 13.1016245}
{"snippet": "trace.Trace(outfile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `outfile` is the name of the file in which to write updated count information .", "question_id": 10714, "for": 899103, "retrieval_score": 10.982273}
{"snippet": "json.dump(obj, fp, **kw, cls=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . one that overrides the default ( ) method to serialize additional types ) , specify it with the `cls` kwarg ; otherwise JSONEncoder is used . With arguments `**kw`.", "question_id": 5275, "for": 899103, "retrieval_score": 9.238092}
{"snippet": "json.dump(obj, fp, **kw)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . With arguments `**kw`.", "question_id": 5270, "for": 899103, "retrieval_score": 9.146277}
{"snippet": "json.dump(obj, fp, **kw, allow_nan=True)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `allow_nan` is false ( default : True ) , then it will be a ValueError to serialize out of range float values ( nan , inf , -inf ) in strict compliance of the JSON specification . With arguments `**kw`.", "question_id": 5274, "for": 899103, "retrieval_score": 8.492115}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434, "for": 899103, "retrieval_score": 13.1016245}
{"snippet": "trace.Trace(outfile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `outfile` is the name of the file in which to write updated count information .", "question_id": 10714, "for": 899103, "retrieval_score": 12.363536}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 899103, "retrieval_score": 12.207843}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 899103, "retrieval_score": 11.73188}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156, "for": 899103, "retrieval_score": 11.631777}
{"snippet": "os.geteuid()", "intent": "Return the current process \u2019 s effective user id .", "question_id": 6675, "for": 2631935, "retrieval_score": 16.064344}
{"snippet": "os.getuid()", "intent": "Return the current process \u2019 s real user id .", "question_id": 6690, "for": 2631935, "retrieval_score": 16.064344}
{"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706, "for": 2631935, "retrieval_score": 15.268755}
{"snippet": "os.seteuid(euid)", "intent": "Set the current process \u2019 s effective user id . With arguments `euid`.", "question_id": 6694, "for": 2631935, "retrieval_score": 14.899797}
{"snippet": "stat.ST_UID", "intent": "User id of the owner.", "question_id": 9078, "for": 2631935, "retrieval_score": 13.1528015}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427, "for": 7164679, "retrieval_score": 22.613068}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871, "for": 7164679, "retrieval_score": 22.384174}
{"snippet": "urllib.request.Request(url, data=None, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11777, "for": 7164679, "retrieval_score": 21.146585}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773, "for": 7164679, "retrieval_score": 21.130089}
{"snippet": "urllib.request.urlretrieve(url, reporthook=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . With arguments `reporthook`.", "question_id": 11883, "for": 7164679, "retrieval_score": 20.671314}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 14850853, "retrieval_score": 16.56904}
{"snippet": "test.support.temp_cwd(name='tempcwd')", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory .", "question_id": 10183, "for": 14850853, "retrieval_score": 16.476189}
{"snippet": "simple_http_request_handler.directory", "intent": "If not specified, the directory to serve is the current working directory.", "question_id": 4663, "for": 14850853, "retrieval_score": 15.805624}
{"snippet": "os.fchdir(fd)", "intent": "Change the current working directory to the directory represented by the file descriptor `fd` .", "question_id": 6844, "for": 14850853, "retrieval_score": 15.333033}
{"snippet": "cgi.print_directory()", "intent": "Format the current directory in HTML .", "question_id": 1055, "for": 14850853, "retrieval_score": 15.29259}
{"snippet": "datetime.now()", "intent": "Return the current local date and time .", "question_id": 2258, "for": 415511, "retrieval_score": 16.67223}
{"snippet": "base_http_request_handler.log_date_time_string()", "intent": "Returns the current date and time , formatted for logging .", "question_id": 4657, "for": 415511, "retrieval_score": 15.825569}
{"snippet": "datetime.utcnow()", "intent": "Return the current UTC date and time , with tzinfo None .", "question_id": 2260, "for": 415511, "retrieval_score": 15.433687}
{"snippet": "locale.ERA_D_T_FMT", "intent": "Get a format string for time.strftime() to represent date and time in a locale-specific era-based way.", "question_id": 5369, "for": 415511, "retrieval_score": 13.879135}
{"snippet": "locale.D_T_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent date and time in a locale-specific way.", "question_id": 5355, "for": 415511, "retrieval_score": 12.579189}
{"snippet": "asyncio.get_event_loop()", "intent": "Get the current event loop .", "question_id": 179, "for": 415511, "retrieval_score": 10.624367}
{"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037, "for": 415511, "retrieval_score": 10.055967}
{"snippet": "robot_file_parser.modified()", "intent": "Sets the time the robots.txt file was last fetched to the current time .", "question_id": 11914, "for": 415511, "retrieval_score": 10.024207}
{"snippet": "datetime.now()", "intent": "Return the current local date and time .", "question_id": 2258, "for": 415511, "retrieval_score": 9.960855}
{"snippet": "abstract_event_loop_policy.get_event_loop()", "intent": "Get the event loop for the current context .", "question_id": 375, "for": 415511, "retrieval_score": 9.793981}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358, "for": 415511, "retrieval_score": 16.755133}
{"snippet": "locale.ERA_T_FMT", "intent": "Get a format string for time.strftime() to represent a time in a locale-specific era-based way.", "question_id": 5371, "for": 415511, "retrieval_score": 14.469689}
{"snippet": "locale.ERA_D_T_FMT", "intent": "Get a format string for time.strftime() to represent date and time in a locale-specific era-based way.", "question_id": 5369, "for": 415511, "retrieval_score": 14.170627}
{"snippet": "locale.T_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent a time in a locale-specific way.", "question_id": 5357, "for": 415511, "retrieval_score": 13.088559}
{"snippet": "locale.D_T_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent date and time in a locale-specific way.", "question_id": 5355, "for": 415511, "retrieval_score": 12.843379}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358, "for": 415511, "retrieval_score": 19.333576}
{"snippet": "locale.ERA_T_FMT", "intent": "Get a format string for time.strftime() to represent a time in a locale-specific era-based way.", "question_id": 5371, "for": 415511, "retrieval_score": 16.884882}
{"snippet": "locale.ERA_D_T_FMT", "intent": "Get a format string for time.strftime() to represent date and time in a locale-specific era-based way.", "question_id": 5369, "for": 415511, "retrieval_score": 16.535902}
{"snippet": "locale.T_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent a time in a locale-specific way.", "question_id": 5357, "for": 415511, "retrieval_score": 16.109869}
{"snippet": "locale.D_T_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent date and time in a locale-specific way.", "question_id": 5355, "for": 415511, "retrieval_score": 15.825326}
{"snippet": "asyncio.get_event_loop()", "intent": "Get the current event loop .", "question_id": 179, "for": 415511, "retrieval_score": 10.624367}
{"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037, "for": 415511, "retrieval_score": 10.055967}
{"snippet": "robot_file_parser.modified()", "intent": "Sets the time the robots.txt file was last fetched to the current time .", "question_id": 11914, "for": 415511, "retrieval_score": 10.024207}
{"snippet": "datetime.now()", "intent": "Return the current local date and time .", "question_id": 2258, "for": 415511, "retrieval_score": 9.960855}
{"snippet": "abstract_event_loop_policy.get_event_loop()", "intent": "Get the event loop for the current context .", "question_id": 375, "for": 415511, "retrieval_score": 9.793981}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 19819863, "retrieval_score": 9.814754}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 19819863, "retrieval_score": 9.814754}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 19819863, "retrieval_score": 9.681753}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 19819863, "retrieval_score": 8.7459955}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 19819863, "retrieval_score": 8.7459955}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 37497559, "retrieval_score": 11.642427}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 37497559, "retrieval_score": 11.594554}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 37497559, "retrieval_score": 11.594554}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939, "for": 37497559, "retrieval_score": 11.594554}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 37497559, "retrieval_score": 11.594554}
{"snippet": "datetime.utcnow()", "intent": "Return the current UTC date and time , with tzinfo None .", "question_id": 2260, "for": 15940280, "retrieval_score": 17.205265}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353, "for": 15940280, "retrieval_score": 12.882379}
{"snippet": "time.gmtime(secs)", "intent": "Convert a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10441, "for": 15940280, "retrieval_score": 12.545011}
{"snippet": "datetime.astimezone()", "intent": "Return a datetime object with new tzinfo attribute `tz` , adjusting the date and time data so the result is the same UTC time as self , but in tz \u2019 s local time .", "question_id": 2294, "for": 15940280, "retrieval_score": 11.038658}
{"snippet": "datetime.astimezone(tz=None)", "intent": "Return a datetime object with new tzinfo attribute `tz` , adjusting the date and time data so the result is the same UTC time as self , but in tz \u2019 s local time .", "question_id": 2295, "for": 15940280, "retrieval_score": 11.038658}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 12845112, "retrieval_score": 18.188364}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394, "for": 12845112, "retrieval_score": 17.206667}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 12845112, "retrieval_score": 15.439172}
{"snippet": "widget.identify_row(y)", "intent": "Returns the item ID of the item at position `y` .", "question_id": 10635, "for": 12845112, "retrieval_score": 14.873268}
{"snippet": "array.itemsize", "intent": "The length in bytes of one array item in the internal representation.", "question_id": 119, "for": 12845112, "retrieval_score": 13.824258}
{"snippet": "calendar.calendar(year)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class .", "question_id": 1011, "for": 35414625, "retrieval_score": 16.089436}
{"snippet": "calendar.monthdatescalendar(year, month)", "intent": "Return a list of the weeks in the `month` month of the `year` as full weeks .", "question_id": 917, "for": 35414625, "retrieval_score": 15.860944}
{"snippet": "calendar.monthdays2calendar(year, month)", "intent": "Return a list of the weeks in the `month` month of the `year` as full weeks .", "question_id": 918, "for": 35414625, "retrieval_score": 15.860944}
{"snippet": "calendar.monthdayscalendar(year, month)", "intent": "Return a list of the weeks in the `month` month of the `year` as full weeks .", "question_id": 919, "for": 35414625, "retrieval_score": 15.860944}
{"snippet": "html_calendar.formatmonth(theyear, themonth, withyear=True)", "intent": "Return a month \u2019 s calendar as an HTML table . If `withyear` is true the year will be included in the header , otherwise just the month name will be used . With arguments `theyear`, `themonth`.", "question_id": 959, "for": 35414625, "retrieval_score": 15.81848}
{"snippet": "text_calendar.formatmonth(theyear, themonth)", "intent": "Return a month \u2019 s calendar in a multi-line string . With arguments `theyear`, `themonth`.", "question_id": 928, "for": 35414625, "retrieval_score": 18.507946}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912, "for": 35414625, "retrieval_score": 17.388374}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992, "for": 35414625, "retrieval_score": 17.08386}
{"snippet": "calendar.monthdatescalendar(year, month)", "intent": "Return a list of the weeks in the `month` month of the `year` as full weeks .", "question_id": 917, "for": 35414625, "retrieval_score": 16.998457}
{"snippet": "calendar.monthdays2calendar(year, month)", "intent": "Return a list of the weeks in the `month` month of the `year` as full weeks .", "question_id": 918, "for": 35414625, "retrieval_score": 16.998457}
{"snippet": "numbers.Integral", "intent": "Subtypes Rational and adds a conversion to int.", "question_id": 6512, "for": 39381222, "retrieval_score": 13.020786}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 39381222, "retrieval_score": 12.959112}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 39381222, "retrieval_score": 12.959112}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 39381222, "retrieval_score": 11.073826}
{"snippet": "date.isocalendar()", "intent": "Return a 3-tuple , ( ISO year , ISO week number , ISO weekday ) .", "question_id": 2241, "for": 39381222, "retrieval_score": 10.950412}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 7996940, "retrieval_score": 19.9534}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 7996940, "retrieval_score": 19.9534}
{"snippet": "test_case.longMessage", "intent": "This class attribute determines what happens when a custom failure message is passed as the msg argument to an assertXYY call that fails.", "question_id": 11465, "for": 7996940, "retrieval_score": 12.4254}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638, "for": 7996940, "retrieval_score": 11.977712}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640, "for": 7996940, "retrieval_score": 11.674792}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934, "for": 3476732, "retrieval_score": 14.180677}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935, "for": 3476732, "retrieval_score": 14.180677}
{"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815, "for": 3476732, "retrieval_score": 9.818512}
{"snippet": "cmath.log10(x)", "intent": "Return the base-10 logarithm of `x` .", "question_id": 1099, "for": 3476732, "retrieval_score": 9.665391}
{"snippet": "context.log10(x)", "intent": "Returns the base 10 logarithm of `x` .", "question_id": 2543, "for": 3476732, "retrieval_score": 9.665391}
{"snippet": "Node.firstChild", "intent": "The first child of the node, if there are any, or None.", "question_id": 12320, "for": 317413, "retrieval_score": 18.827394}
{"snippet": "Node.removeChild(oldChild)", "intent": "Remove a child node . `oldChild` must be a child of this node ; if not , ValueError is raised .", "question_id": 12332, "for": 317413, "retrieval_score": 16.442722}
{"snippet": "Node.appendChild(newChild)", "intent": "Add a new child node to this node at the end of the list of children , returning `newChild` .", "question_id": 12330, "for": 317413, "retrieval_score": 15.060919}
{"snippet": "Node.insertBefore(newChild, refChild)", "intent": "Insert a new child node before an existing child . `newChild` is returned . It must be the case that `refChild` is a child of this node ; if not , ValueError is raised .", "question_id": 12331, "for": 317413, "retrieval_score": 14.812463}
{"snippet": "Node.lastChild", "intent": "The last child of the node, if there are any, or None.", "question_id": 12321, "for": 317413, "retrieval_score": 14.288854}
{"snippet": "_thread.start_new_thread(function, args)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "question_id": 12944, "for": 849674, "retrieval_score": 14.787384}
{"snippet": "_thread.start_new_thread(function, args, kwargs)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "question_id": 12943, "for": 849674, "retrieval_score": 12.932046}
{"snippet": "thread.start()", "intent": "Start the thread \u2019 s activity .", "question_id": 10362, "for": 849674, "retrieval_score": 12.822707}
{"snippet": "date.replace()", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified .", "question_id": 2229, "for": 849674, "retrieval_score": 10.14537}
{"snippet": "date.replace(year=self.year)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `year`.", "question_id": 2230, "for": 849674, "retrieval_score": 9.994257}
{"snippet": "_thread.start_new_thread(function, args)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "question_id": 12944, "for": 849674, "retrieval_score": 14.787384}
{"snippet": "_thread.start_new_thread(function, args, kwargs)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "question_id": 12943, "for": 849674, "retrieval_score": 12.932046}
{"snippet": "thread.start()", "intent": "Start the thread \u2019 s activity .", "question_id": 10362, "for": 849674, "retrieval_score": 12.822707}
{"snippet": "date.replace()", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified .", "question_id": 2229, "for": 849674, "retrieval_score": 10.14537}
{"snippet": "date.replace(year=self.year)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `year`.", "question_id": 2230, "for": 849674, "retrieval_score": 9.994257}
{"snippet": "auto.start", "intent": "The first index of invalid data in object.", "question_id": 3677, "for": 3989016, "retrieval_score": 15.593924}
{"snippet": "operator.indexOf(a, b)", "intent": "Return the index of the first of occurrence of `b` in `a` .", "question_id": 6577, "for": 3989016, "retrieval_score": 15.501102}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 3989016, "retrieval_score": 13.552456}
{"snippet": "readline.get_begidx()", "intent": "Get the beginning or ending index of the completion scope .", "question_id": 8044, "for": 3989016, "retrieval_score": 13.486655}
{"snippet": "readline.get_endidx()", "intent": "Get the beginning or ending index of the completion scope .", "question_id": 8045, "for": 3989016, "retrieval_score": 13.486655}
{"snippet": "os.path.splitext(path)", "intent": "Split the pathname `path` into a pair ( root , ext ) such that root + ext == path , and ext is empty or begins with a period and contains at most one period .", "question_id": 7171, "for": 42731970, "retrieval_score": 16.51829}
{"snippet": "email.generator.Generator(outfp, mangle_from_=None, maxheaderlen=None)", "intent": "Return a Generator object that will write any message provided to the flatten ( ) method , or any text provided to the write ( ) method , to the file-like object `outfp` . If optional `mangle_from_` is True , put a > character in front of any line in the body that starts with the exact string `` From `` , that is From followed by a space at the beginning of a line . If `maxheaderlen` is not None , refold any header lines that are longer than maxheaderlen , or if 0 , do not rewrap any headers .", "question_id": 3096, "for": 42731970, "retrieval_score": 14.471749}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`.", "question_id": 11728, "for": 42731970, "retrieval_score": 14.41846}
{"snippet": "urllib.parse.unquote_plus(string, errors='replace')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `errors`.", "question_id": 11729, "for": 42731970, "retrieval_score": 14.41846}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`, `errors`.", "question_id": 11730, "for": 42731970, "retrieval_score": 14.158121}
{"snippet": "tkinter.tix.ExFileSelectBox", "intent": "The ExFileSelectBox widget is usually embedded in a tixExFileSelectDialog widget.", "question_id": 10567, "for": 33147992, "retrieval_score": 22.946362}
{"snippet": "quopri.encode(input, output, quotetabs)", "intent": "Encode the contents of the `input` file and write the resulting quoted-printable data to the `output` file . `quotetabs` , a non-optional flag which controls whether to encode embedded spaces and tabs ; when true it encodes such embedded whitespace , and when false it leaves them unencoded .", "question_id": 7875, "for": 33147992, "retrieval_score": 17.165443}
{"snippet": "i_pv6_address.ipv4_mapped", "intent": "For addresses that appear to be IPv4 mapped addresses (starting with ::FFFF/96), this property will report the embedded IPv4 address.", "question_id": 5189, "for": 33147992, "retrieval_score": 15.205757}
{"snippet": "i_pv6_address.sixtofour", "intent": "For addresses that appear to be 6to4 addresses  (starting with 2002::/16) as defined by RFC 3056, this property will report the embedded IPv4 address.", "question_id": 5190, "for": 33147992, "retrieval_score": 14.10754}
{"snippet": "quopri.encode(input, output, quotetabs, header=False)", "intent": "Encode the contents of the `input` file and write the resulting quoted-printable data to the `output` file . `quotetabs` , a non-optional flag which controls whether to encode embedded spaces and tabs ; when true it encodes such embedded whitespace , and when false it leaves them unencoded . Note that spaces and tabs appearing at the end of lines are always encoded , as per RFC 1521. `header` is a flag which controls if spaces are encoded as underscores as per RFC 1522 .", "question_id": 7876, "for": 33147992, "retrieval_score": 13.396816}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 7900882, "retrieval_score": 31.241108}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 7900882, "retrieval_score": 30.029587}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 7900882, "retrieval_score": 29.253948}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 7900882, "retrieval_score": 28.677973}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 7900882, "retrieval_score": 28.023363}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 7900882, "retrieval_score": 18.193766}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 7900882, "retrieval_score": 17.687433}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 7900882, "retrieval_score": 17.673962}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 7900882, "retrieval_score": 17.138174}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 7900882, "retrieval_score": 16.571722}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 16228248, "retrieval_score": 17.182112}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 16228248, "retrieval_score": 14.431761}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 16228248, "retrieval_score": 13.410248}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 16228248, "retrieval_score": 12.00955}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 16228248, "retrieval_score": 11.673934}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052, "for": 943809, "retrieval_score": 15.25885}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057, "for": 943809, "retrieval_score": 15.25885}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050, "for": 943809, "retrieval_score": 15.090903}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055, "for": 943809, "retrieval_score": 15.090903}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051, "for": 943809, "retrieval_score": 14.855091}
{"snippet": "tty.setcbreak(fd)", "intent": "Change the mode of file descriptor `fd` to cbreak .", "question_id": 10901, "for": 14104778, "retrieval_score": 17.154976}
{"snippet": "os.fchmod(fd, mode)", "intent": "Change the `mode` of the file given by `fd` to the numeric mode .", "question_id": 6719, "for": 14104778, "retrieval_score": 16.976492}
{"snippet": "tty.setraw(fd)", "intent": "Change the mode of the file descriptor `fd` to raw .", "question_id": 10899, "for": 14104778, "retrieval_score": 16.835108}
{"snippet": "os.chmod(path, mode)", "intent": "Change the `mode` of `path` to the numeric mode .", "question_id": 6835, "for": 14104778, "retrieval_score": 15.659933}
{"snippet": "os.lchmod(path, mode)", "intent": "Change the `mode` of `path` to the numeric mode .", "question_id": 6848, "for": 14104778, "retrieval_score": 15.659933}
{"snippet": "DictWriter.writeheader()", "intent": "Write a row with the field names ( as specified in the constructor ) .", "question_id": 1738, "for": 30605909, "retrieval_score": 17.354712}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735, "for": 30605909, "retrieval_score": 15.25373}
{"snippet": "AU_write.writeframesraw(data)", "intent": "Write audio frames , without correcting nframes . With arguments `data`.", "question_id": 9728, "for": 30605909, "retrieval_score": 14.814398}
{"snippet": "Wave_write.writeframesraw(data)", "intent": "Write audio frames , without correcting nframes . With arguments `data`.", "question_id": 12072, "for": 30605909, "retrieval_score": 14.814398}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35, "for": 30605909, "retrieval_score": 14.42103}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529, "for": 18082130, "retrieval_score": 22.703287}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 18082130, "retrieval_score": 22.51286}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 18082130, "retrieval_score": 22.51286}
{"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241, "for": 18082130, "retrieval_score": 22.51286}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242, "for": 18082130, "retrieval_score": 22.51286}
{"snippet": "widget.enable_traversal()", "intent": "Enable keyboard traversal for a toplevel window containing this notebook .", "question_id": 10614, "for": 1946181, "retrieval_score": 11.540827}
{"snippet": "socket.AF_CAN", "intent": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.", "question_id": 8579, "for": 1946181, "retrieval_score": 9.115637}
{"snippet": "socket.PF_CAN", "intent": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.", "question_id": 8580, "for": 1946181, "retrieval_score": 9.115637}
{"snippet": "SOL_CAN_*", "intent": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.", "question_id": 8581, "for": 1946181, "retrieval_score": 9.115637}
{"snippet": "CAN_*", "intent": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.", "question_id": 8582, "for": 1946181, "retrieval_score": 9.115637}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 1101508, "retrieval_score": 41.498653}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 1101508, "retrieval_score": 19.276512}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 1101508, "retrieval_score": 18.133596}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 1101508, "retrieval_score": 18.133596}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 1101508, "retrieval_score": 17.40289}
{"snippet": "readline.set_completer_delims(string)", "intent": "Set or get the word delimiters for completion . With arguments `string`.", "question_id": 8046, "for": 2674391, "retrieval_score": 21.486948}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638, "for": 2674391, "retrieval_score": 20.39877}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640, "for": 2674391, "retrieval_score": 19.153494}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639, "for": 2674391, "retrieval_score": 17.554354}
{"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047, "for": 2674391, "retrieval_score": 17.203344}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 2674391, "retrieval_score": 15.9557905}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 2674391, "retrieval_score": 15.9557905}
{"snippet": "Match.pos", "intent": "The value of pos which was passed to the search() or match() method of a regex object.", "question_id": 8009, "for": 2674391, "retrieval_score": 15.717733}
{"snippet": "Match.endpos", "intent": "The value of endpos which was passed to the search() or match() method of a regex object.", "question_id": 8010, "for": 2674391, "retrieval_score": 15.717733}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442, "for": 2674391, "retrieval_score": 14.877296}
{"snippet": "base_http_request_handler.rfile", "intent": "An io.BufferedIOBase input stream, ready to read from the start of the optional input data.", "question_id": 4625, "for": 2233917, "retrieval_score": 10.974617}
{"snippet": "os.path.expanduser(path)", "intent": "On Unix and Windows , return the argument with an initial component of ~ or ~user replaced by that user \u2019 s home directory . An initial ~user is handled by stripping the last directory component from the created user `path` derived above .", "question_id": 7149, "for": 2233917, "retrieval_score": 10.121879}
{"snippet": "shlex.pop_source()", "intent": "Pop the last-pushed input source from the input stack .", "question_id": 8289, "for": 2233917, "retrieval_score": 9.704378}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 2233917, "retrieval_score": 9.590372}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262, "for": 2233917, "retrieval_score": 9.311941}
{"snippet": "sqlite3.version_info", "intent": "The version number of this module, as a tuple of integers.", "question_id": 8792, "for": 2233917, "retrieval_score": 13.747215}
{"snippet": "ssl.OPENSSL_VERSION_INFO", "intent": "A tuple of five integers representing version information about the OpenSSL library:", "question_id": 8958, "for": 2233917, "retrieval_score": 13.113273}
{"snippet": "sys.int_info", "intent": "A named tuple that holds information about Python\u2019s internal representation of integers.", "question_id": 9816, "for": 2233917, "retrieval_score": 13.113273}
{"snippet": "sqlite3.sqlite_version_info", "intent": "The version number of the run-time SQLite library, as a tuple of integers.", "question_id": 8794, "for": 2233917, "retrieval_score": 12.851976}
{"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425, "for": 2233917, "retrieval_score": 11.771479}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723, "for": 13093727, "retrieval_score": 18.462664}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724, "for": 13093727, "retrieval_score": 16.42065}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 13093727, "retrieval_score": 16.42065}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726, "for": 13093727, "retrieval_score": 16.42065}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 13093727, "retrieval_score": 16.042015}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 13093727, "retrieval_score": 17.190098}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724, "for": 13093727, "retrieval_score": 16.547821}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 13093727, "retrieval_score": 16.547821}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726, "for": 13093727, "retrieval_score": 16.547821}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707, "for": 13093727, "retrieval_score": 13.905774}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 18200052, "retrieval_score": 14.794095}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 18200052, "retrieval_score": 14.746576}
{"snippet": "turtle.shape()", "intent": "Set turtle shape to shape with given `name` or , if name is not given , return name of current shape .", "question_id": 10982, "for": 18200052, "retrieval_score": 12.2336035}
{"snippet": "turtle.shape(name=None)", "intent": "Set turtle shape to shape with given `name` or , if name is not given , return name of current shape .", "question_id": 10983, "for": 18200052, "retrieval_score": 12.2336035}
{"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425, "for": 18200052, "retrieval_score": 12.034603}
{"snippet": "platform.system()", "intent": "Returns the system/OS name , e.g .", "question_id": 7481, "for": 1854, "retrieval_score": 11.129501}
{"snippet": "platform.win32_ver()", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7495, "for": 1854, "retrieval_score": 9.758919}
{"snippet": "platform.win32_ver(release='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7496, "for": 1854, "retrieval_score": 9.758919}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497, "for": 1854, "retrieval_score": 9.758919}
{"snippet": "platform.win32_ver(csd='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7498, "for": 1854, "retrieval_score": 9.758919}
{"snippet": "platform.win32_ver()", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7495, "for": 1854, "retrieval_score": 14.8620205}
{"snippet": "platform.win32_ver(release='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7496, "for": 1854, "retrieval_score": 14.8620205}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497, "for": 1854, "retrieval_score": 14.8620205}
{"snippet": "platform.win32_ver(csd='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7498, "for": 1854, "retrieval_score": 14.8620205}
{"snippet": "platform.win32_ver(ptype='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7499, "for": 1854, "retrieval_score": 14.8620205}
{"snippet": "platform.system()", "intent": "Returns the system/OS name , e.g .", "question_id": 7481, "for": 1854, "retrieval_score": 12.002505}
{"snippet": "platform.linux_distribution('debian', 'redhat', 'mandrake', ...))", "intent": "Tries to determine the name of the Linux OS distribution name . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`.", "question_id": 7527, "for": 1854, "retrieval_score": 11.598498}
{"snippet": "platform.linux_distribution('debian', 'redhat', 'mandrake', ...), full_distribution_name=1)", "intent": "Tries to determine the name of the Linux OS distribution name . If `full_distribution_name` is true ( default ) , the full distribution read from the OS is returned . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`.", "question_id": 7532, "for": 1854, "retrieval_score": 11.42418}
{"snippet": "MON_1 ... MON_12", "intent": "Get the name of the n-th month.", "question_id": 5361, "for": 1854, "retrieval_score": 11.229175}
{"snippet": "ABMON_1 ... ABMON_12", "intent": "Get the abbreviated name of the n-th month.", "question_id": 5362, "for": 1854, "retrieval_score": 10.953778}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343, "for": 11791568, "retrieval_score": 18.07755}
{"snippet": "counter.most_common()", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1344, "for": 11791568, "retrieval_score": 18.07755}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243, "for": 11791568, "retrieval_score": 15.440915}
{"snippet": "str.split(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9244, "for": 11791568, "retrieval_score": 15.440915}
{"snippet": "locale.D_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent a date in a locale-specific way.", "question_id": 5356, "for": 11791568, "retrieval_score": 15.259018}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225, "for": 2847272, "retrieval_score": 15.317643}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 2847272, "retrieval_score": 14.753524}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723, "for": 2847272, "retrieval_score": 14.034701}
{"snippet": "Dialect.delimiter", "intent": "A one-character string used to separate fields.", "question_id": 1723, "for": 2847272, "retrieval_score": 13.197486}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989, "for": 2847272, "retrieval_score": 13.003696}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 15148684, "retrieval_score": 23.631714}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 15148684, "retrieval_score": 22.94875}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 15148684, "retrieval_score": 22.427835}
{"snippet": "NNTP.list(group_pattern=None, file=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` . With arguments `file`.", "question_id": 6468, "for": 15148684, "retrieval_score": 22.204828}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 15148684, "retrieval_score": 21.602169}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745, "for": 2153444, "retrieval_score": 16.969715}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 2153444, "retrieval_score": 15.689983}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 2153444, "retrieval_score": 11.782932}
{"snippet": "subprocess.BELOW_NORMAL_PRIORITY_CLASS", "intent": "A Popen creationflags parameter to specify that a new process will have a below average priority.", "question_id": 9650, "for": 2153444, "retrieval_score": 10.780426}
{"snippet": "Function.children", "intent": "A dictionary mapping names to descriptors for nested functions and classes.", "question_id": 7715, "for": 2153444, "retrieval_score": 10.736589}
{"snippet": "nt_event_log_handler.emit(record)", "intent": "Determines the message ID , event category and event type , and then logs the message in the NT event log . With arguments `record`.", "question_id": 5511, "for": 17558552, "retrieval_score": 21.250353}
{"snippet": "base_handler.log_exception(exc_info)", "intent": "Log the `exc_info` tuple in the server log .", "question_id": 12260, "for": 17558552, "retrieval_score": 19.21081}
{"snippet": "logging.handlers.NTEventLogHandler(appname, dllname=None)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `dllname` should give the fully qualified pathname of a .dll or .exe which contains message definitions to hold in the log ( if not specified , 'win32service.pyd ' is used - this is installed with the Win32 extensions and contains some basic placeholder message definitions .", "question_id": 5507, "for": 17558552, "retrieval_score": 17.765747}
{"snippet": "maildir_message.get_info()", "intent": "Return a string containing the \u201c info \u201d for a message .", "question_id": 5821, "for": 17558552, "retrieval_score": 17.671097}
{"snippet": "queue_listener.info(msg, *args, **kwargs)", "intent": "Logs a message with level INFO on this logger . With arguments `msg`, `*args`, `**kwargs`.", "question_id": 5571, "for": 17558552, "retrieval_score": 17.369087}
{"snippet": "text_wrapper.replace_whitespace", "intent": "(default: True) If true, after tab expansion but before wrapping, the wrap() method will replace each whitespace character with a single space.", "question_id": 10330, "for": 21771133, "retrieval_score": 11.615113}
{"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734, "for": 21771133, "retrieval_score": 10.040832}
{"snippet": "str.isnumeric()", "intent": "Return true if all characters in the string are numeric characters , and there is at least one character , false otherwise .", "question_id": 9209, "for": 21771133, "retrieval_score": 9.5378475}
{"snippet": "token.ISTERMINAL(x)", "intent": "Return true for terminal token values . With arguments `x`.", "question_id": 10695, "for": 21771133, "retrieval_score": 9.431832}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`.", "question_id": 11728, "for": 21771133, "retrieval_score": 9.338927}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 39129846, "retrieval_score": 15.677011}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941, "for": 39129846, "retrieval_score": 12.649967}
{"snippet": "mimetypes.guess_extension(type)", "intent": "Guess the extension for a file based on its MIME `type` , given by type .", "question_id": 5943, "for": 39129846, "retrieval_score": 12.649967}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 39129846, "retrieval_score": 12.371231}
{"snippet": "zipfile.is_zipfile(filename)", "intent": "Returns True if `filename` is a valid ZIP file based on its magic number , otherwise returns False .", "question_id": 12787, "for": 39129846, "retrieval_score": 11.849056}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081, "for": 8009176, "retrieval_score": 11.457872}
{"snippet": "turtle.done()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11082, "for": 8009176, "retrieval_score": 11.457872}
{"snippet": "window.syncup()", "intent": "Touch all locations in ancestors of the window that have been changed in the window .", "question_id": 2123, "for": 8009176, "retrieval_score": 9.213732}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738, "for": 8009176, "retrieval_score": 9.205839}
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106, "for": 8009176, "retrieval_score": 8.589118}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847, "for": 36454494, "retrieval_score": 13.141547}
{"snippet": "stringprep.in_table_c6(code)", "intent": "Determine whether `code` is in tableC.6 ( Inappropriate for plain text ) .", "question_id": 9544, "for": 36454494, "retrieval_score": 12.765977}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193, "for": 36454494, "retrieval_score": 12.466957}
{"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378, "for": 36454494, "retrieval_score": 12.181481}
{"snippet": "bytearray.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9380, "for": 36454494, "retrieval_score": 12.181481}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002, "for": 12224778, "retrieval_score": 13.741055}
{"snippet": "mmap.find(sub, start)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6003, "for": 12224778, "retrieval_score": 13.741055}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 12224778, "retrieval_score": 13.741055}
{"snippet": "mmap.rfind(sub, start, end)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6014, "for": 12224778, "retrieval_score": 13.741055}
{"snippet": "mmap.rfind(sub, start)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6015, "for": 12224778, "retrieval_score": 13.741055}
{"snippet": "html_calendar.formatyearpage(theyear, width=3)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 963, "for": 4921038, "retrieval_score": 11.657779}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 966, "for": 4921038, "retrieval_score": 9.550428}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 967, "for": 4921038, "retrieval_score": 9.007663}
{"snippet": "resource.getpagesize()", "intent": "Returns the number of bytes in a system page .", "question_id": 8096, "for": 4921038, "retrieval_score": 8.357649}
{"snippet": "bdb.clear_all_breaks()", "intent": "Delete all existing breakpoints .", "question_id": 798, "for": 4921038, "retrieval_score": 8.1019}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976, "for": 2783079, "retrieval_score": 16.802593}
{"snippet": "xml.dom.pulldom.parseString(string)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` .", "question_id": 12429, "for": 2783079, "retrieval_score": 13.5842}
{"snippet": "xml.dom.pulldom.parseString(string, parser=None)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` . With arguments `parser`.", "question_id": 12430, "for": 2783079, "retrieval_score": 12.599444}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 2783079, "retrieval_score": 12.135787}
{"snippet": "window.encoding", "intent": "Encoding used to encode method arguments (Unicode strings and characters).", "question_id": 2047, "for": 2783079, "retrieval_score": 11.96196}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 2783079, "retrieval_score": 19.680748}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303, "for": 2783079, "retrieval_score": 15.3848715}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348, "for": 2783079, "retrieval_score": 13.263994}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916, "for": 2783079, "retrieval_score": 13.111719}
{"snippet": "charset.output_codec", "intent": "The name of the Python codec used to convert Unicode to the output_charset.", "question_id": 2917, "for": 2783079, "retrieval_score": 13.111719}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271, "for": 120656, "retrieval_score": 12.836081}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417, "for": 120656, "retrieval_score": 12.264528}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409, "for": 120656, "retrieval_score": 12.25137}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112, "for": 120656, "retrieval_score": 11.696282}
{"snippet": "compileall.compile_path(skip_curdir=True)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search .", "question_id": 1430, "for": 120656, "retrieval_score": 11.655934}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271, "for": 120656, "retrieval_score": 16.171358}
{"snippet": "ZipFile.extractall(path=None, pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "question_id": 12823, "for": 120656, "retrieval_score": 13.941998}
{"snippet": "ZipFile.extractall(path=None, members=None, pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "question_id": 12825, "for": 120656, "retrieval_score": 13.941998}
{"snippet": "os.listdir()", "intent": "Return a list containing the names of the entries in the directory given by `path` .", "question_id": 6858, "for": 120656, "retrieval_score": 13.017795}
{"snippet": "os.listdir(path='.')", "intent": "Return a list containing the names of the entries in the directory given by `path` .", "question_id": 6859, "for": 120656, "retrieval_score": 13.017795}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586, "for": 11816315, "retrieval_score": 15.48126}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409, "for": 11816315, "retrieval_score": 13.015245}
{"snippet": "FTP.rename(fromname, toname)", "intent": "Rename file `fromname` on the server to `toname` .", "question_id": 3959, "for": 11816315, "retrieval_score": 12.912176}
{"snippet": "os.rename(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6892, "for": 11816315, "retrieval_score": 12.912176}
{"snippet": "os.replace(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6897, "for": 11816315, "retrieval_score": 12.912176}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084, "for": 3258573, "retrieval_score": 15.042057}
{"snippet": "window.insstr(y, x, str, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`, `attr`.", "question_id": 2083, "for": 3258573, "retrieval_score": 14.833326}
{"snippet": "window.insstr(str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`.", "question_id": 2082, "for": 3258573, "retrieval_score": 14.252834}
{"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080, "for": 3258573, "retrieval_score": 14.241023}
{"snippet": "window.insnstr(y, x, str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`, `attr`.", "question_id": 2079, "for": 3258573, "retrieval_score": 14.054122}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 3241594, "retrieval_score": 12.326981}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417, "for": 3241594, "retrieval_score": 10.836578}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418, "for": 3241594, "retrieval_score": 10.836578}
{"snippet": "test_case.assertNotAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11425, "for": 3241594, "retrieval_score": 10.836578}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11426, "for": 3241594, "retrieval_score": 10.836578}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653, "for": 22296496, "retrieval_score": 18.534786}
{"snippet": "auto.start", "intent": "The first index of invalid data in object.", "question_id": 3677, "for": 22296496, "retrieval_score": 15.894896}
{"snippet": "element.tag", "intent": "A string identifying what kind of data this element represents (the element type, in other words).", "question_id": 12479, "for": 22296496, "retrieval_score": 15.181706}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322, "for": 22296496, "retrieval_score": 15.123041}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333, "for": 22296496, "retrieval_score": 14.801232}
{"snippet": "file_loader.path", "intent": "Path to the file of the module.", "question_id": 4837, "for": 247770, "retrieval_score": 15.1804495}
{"snippet": "extension_file_loader.path", "intent": "Path to the extension module.", "question_id": 4905, "for": 247770, "retrieval_score": 14.601754}
{"snippet": "pyclbr.readmodule(module, path=None)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package . If given , `path` is a sequence of directory paths prepended to sys.path , which is used to locate the module source code .", "question_id": 7707, "for": 247770, "retrieval_score": 13.655168}
{"snippet": "importlib.machinery.ExtensionFileLoader(fullname, path)", "intent": "A concrete implementation of importlib.abc.ExecutionLoader for extension modules . The `fullname` argument specifies the name of the module the loader is to support . The `path` argument is the path to the extension module \u2019 s file .", "question_id": 4903, "for": 247770, "retrieval_score": 13.555332}
{"snippet": "tracemalloc.get_tracemalloc_memory()", "intent": "Get the memory usage in bytes of the tracemalloc module used to store traces of memory blocks .", "question_id": 10845, "for": 247770, "retrieval_score": 13.351013}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020, "for": 247770, "retrieval_score": 13.366639}
{"snippet": "tracemalloc.get_traced_memory()", "intent": "Get the current size and peak size of memory blocks traced by the tracemalloc module as a tuple : ( current : int , peak : int ) .", "question_id": 10844, "for": 247770, "retrieval_score": 13.321143}
{"snippet": "asyncio.get_event_loop()", "intent": "Get the current event loop .", "question_id": 179, "for": 247770, "retrieval_score": 11.522043}
{"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037, "for": 247770, "retrieval_score": 11.317877}
{"snippet": "file_loader.path", "intent": "Path to the file of the module.", "question_id": 4837, "for": 247770, "retrieval_score": 11.208326}
{"snippet": "file_loader.path", "intent": "Path to the file of the module.", "question_id": 4837, "for": 247770, "retrieval_score": 11.208326}
{"snippet": "tracemalloc.get_object_traceback(obj)", "intent": "Get the traceback where the Python object `obj` was allocated .", "question_id": 10842, "for": 247770, "retrieval_score": 10.999274}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010, "for": 247770, "retrieval_score": 10.640179}
{"snippet": "inspect.getfullargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5011, "for": 247770, "retrieval_score": 10.640179}
{"snippet": "extension_file_loader.path", "intent": "Path to the extension module.", "question_id": 4905, "for": 247770, "retrieval_score": 10.3015995}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165, "for": 7026131, "retrieval_score": 11.491718}
{"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166, "for": 7026131, "retrieval_score": 11.175868}
{"snippet": "base64.b85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using base85 ( as used in e.g . If `pad` is true , the input is padded with b'\\0 ' so its length is a multiple of 4 bytes before encoding .", "question_id": 745, "for": 7026131, "retrieval_score": 8.862818}
{"snippet": "turtle.end_fill()", "intent": "Fill the shape drawn after the last call to begin_fill ( ) .", "question_id": 10966, "for": 7026131, "retrieval_score": 8.652229}
{"snippet": "style.element_options(elementname)", "intent": "Returns the list of `elementname` \u2019 s options .", "question_id": 10685, "for": 7026131, "retrieval_score": 8.321278}
{"snippet": "context.copy()", "intent": "Return a duplicate of the context .", "question_id": 2511, "for": 22918212, "retrieval_score": 11.127964}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679, "for": 22918212, "retrieval_score": 11.1177635}
{"snippet": "os.dup(fd)", "intent": "Return a duplicate of file descriptor `fd` .", "question_id": 6716, "for": 22918212, "retrieval_score": 10.830294}
{"snippet": "inspect.trace()", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in .", "question_id": 5032, "for": 22918212, "retrieval_score": 10.044015}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615, "for": 22918212, "retrieval_score": 9.790516}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 13891559, "retrieval_score": 17.561659}
{"snippet": "Unpacker.unpack_list(unpack_item)", "intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "question_id": 12297, "for": 13891559, "retrieval_score": 13.709716}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 13891559, "retrieval_score": 12.962466}
{"snippet": "element.keys()", "intent": "Returns the elements attribute names as a list .", "question_id": 12487, "for": 13891559, "retrieval_score": 12.746561}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368, "for": 13891559, "retrieval_score": 12.600193}
{"snippet": "locale.LC_NUMERIC", "intent": "Locale category for formatting numbers.", "question_id": 5409, "for": 12030074, "retrieval_score": 16.317316}
{"snippet": "FTP.mlsd()", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) .", "question_id": 3947, "for": 12030074, "retrieval_score": 13.422092}
{"snippet": "FTP.mlsd()", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) .", "question_id": 3951, "for": 12030074, "retrieval_score": 13.422092}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370, "for": 12030074, "retrieval_score": 13.178049}
{"snippet": "locale.ERA_T_FMT", "intent": "Get a format string for time.strftime() to represent a time in a locale-specific era-based way.", "question_id": 5371, "for": 12030074, "retrieval_score": 13.178049}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 3411025, "retrieval_score": 16.119665}
{"snippet": "time.process_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current process .", "question_id": 10450, "for": 3411025, "retrieval_score": 15.725958}
{"snippet": "time.thread_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current thread .", "question_id": 10459, "for": 3411025, "retrieval_score": 15.725958}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 3411025, "retrieval_score": 14.93516}
{"snippet": "pyclbr.readmodule_ex(module)", "intent": "Return a dictionary-based tree containing a function or class descriptors for each function and class defined in the `module` with a def or class statement .", "question_id": 7708, "for": 3411025, "retrieval_score": 14.529426}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 3411025, "retrieval_score": 15.759447}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 3411025, "retrieval_score": 15.049865}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 3411025, "retrieval_score": 14.300026}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 3411025, "retrieval_score": 13.494931}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 3411025, "retrieval_score": 13.494931}
{"snippet": "operator.indexOf(a, b)", "intent": "Return the index of the first of occurrence of `b` in `a` .", "question_id": 6577, "for": 3847472, "retrieval_score": 20.430477}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 3847472, "retrieval_score": 20.006231}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 3847472, "retrieval_score": 20.006231}
{"snippet": "operator.getitem(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6575, "for": 3847472, "retrieval_score": 20.006231}
{"snippet": "operator.__getitem__(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6576, "for": 3847472, "retrieval_score": 20.006231}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843, "for": 12402561, "retrieval_score": 14.112677}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828, "for": 12402561, "retrieval_score": 13.956283}
{"snippet": "timeit.Timer()", "intent": "Class for timing execution speed of small code snippets .", "question_id": 10497, "for": 12402561, "retrieval_score": 10.880775}
{"snippet": "turtle.setup()", "intent": "Set the size and position of the main window .", "question_id": 11107, "for": 12402561, "retrieval_score": 10.827412}
{"snippet": "turtle.setup()", "intent": "Set the size and position of the main window .", "question_id": 11117, "for": 12402561, "retrieval_score": 10.827412}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 2508861, "retrieval_score": 18.348536}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 2508861, "retrieval_score": 18.344624}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 2508861, "retrieval_score": 18.09496}
{"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478, "for": 2508861, "retrieval_score": 12.3643875}
{"snippet": "locale.atoi(string)", "intent": "Converts a `string` to an integer , following the LC_NUMERIC conventions .", "question_id": 5403, "for": 2508861, "retrieval_score": 12.221502}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 3308102, "retrieval_score": 14.545395}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 3308102, "retrieval_score": 14.149064}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895, "for": 3308102, "retrieval_score": 14.126174}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898, "for": 3308102, "retrieval_score": 14.126174}
{"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326, "for": 3308102, "retrieval_score": 13.94081}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 16114333, "retrieval_score": 17.588861}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 16114333, "retrieval_score": 17.588861}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984, "for": 16114333, "retrieval_score": 17.168394}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122, "for": 16114333, "retrieval_score": 16.677982}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983, "for": 16114333, "retrieval_score": 16.56553}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 10941229, "retrieval_score": 13.517509}
{"snippet": "Request.header_items()", "intent": "Return a list of tuples ( header_name , header_value ) of the Request headers .", "question_id": 11833, "for": 10941229, "retrieval_score": 12.52802}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 10941229, "retrieval_score": 11.950823}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 10941229, "retrieval_score": 11.922843}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670, "for": 10941229, "retrieval_score": 11.922843}
{"snippet": "str.isspace()", "intent": "Return true if there are only whitespace characters in the string and there is at least one character , false otherwise .", "question_id": 9211, "for": 36957908, "retrieval_score": 18.249413}
{"snippet": "Dialect.quotechar", "intent": "A one-character string used to quote fields containing special characters, such as the delimiter or quotechar, or which contain new-line characters.", "question_id": 1727, "for": 36957908, "retrieval_score": 17.237473}
{"snippet": "window.insnstr(str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "question_id": 2078, "for": 36957908, "retrieval_score": 16.556519}
{"snippet": "window.insnstr(str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`, `attr`.", "question_id": 2077, "for": 36957908, "retrieval_score": 16.320166}
{"snippet": "window.insstr(str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`.", "question_id": 2082, "for": 36957908, "retrieval_score": 16.038897}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 455612, "retrieval_score": 15.387445}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399, "for": 455612, "retrieval_score": 14.029915}
{"snippet": "decimal.compare(other, context=None)", "intent": "Compare the values of two Decimal instances . With arguments `other`, `context`.", "question_id": 2400, "for": 455612, "retrieval_score": 13.690893}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 455612, "retrieval_score": 13.180698}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400, "for": 455612, "retrieval_score": 11.243954}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 455612, "retrieval_score": 15.387445}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399, "for": 455612, "retrieval_score": 14.029915}
{"snippet": "decimal.compare(other, context=None)", "intent": "Compare the values of two Decimal instances . With arguments `other`, `context`.", "question_id": 2400, "for": 455612, "retrieval_score": 13.690893}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 455612, "retrieval_score": 13.180698}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400, "for": 455612, "retrieval_score": 11.243954}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 455612, "retrieval_score": 15.387445}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399, "for": 455612, "retrieval_score": 14.029915}
{"snippet": "decimal.compare(other, context=None)", "intent": "Compare the values of two Decimal instances . With arguments `other`, `context`.", "question_id": 2400, "for": 455612, "retrieval_score": 13.690893}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 455612, "retrieval_score": 13.180698}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400, "for": 455612, "retrieval_score": 11.243954}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 455612, "retrieval_score": 15.387445}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399, "for": 455612, "retrieval_score": 14.029915}
{"snippet": "decimal.compare(other, context=None)", "intent": "Compare the values of two Decimal instances . With arguments `other`, `context`.", "question_id": 2400, "for": 455612, "retrieval_score": 13.690893}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 455612, "retrieval_score": 13.180698}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400, "for": 455612, "retrieval_score": 11.243954}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 455612, "retrieval_score": 14.210669}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399, "for": 455612, "retrieval_score": 12.61325}
{"snippet": "decimal.compare(other, context=None)", "intent": "Compare the values of two Decimal instances . With arguments `other`, `context`.", "question_id": 2400, "for": 455612, "retrieval_score": 12.30846}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 455612, "retrieval_score": 12.213765}
{"snippet": "crypt.METHOD_CRYPT", "intent": "The traditional method with a 2 character salt and 13 characters of hash.", "question_id": 1672, "for": 455612, "retrieval_score": 10.74277}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 455612, "retrieval_score": 14.210669}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399, "for": 455612, "retrieval_score": 12.61325}
{"snippet": "decimal.compare(other, context=None)", "intent": "Compare the values of two Decimal instances . With arguments `other`, `context`.", "question_id": 2400, "for": 455612, "retrieval_score": 12.30846}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 455612, "retrieval_score": 12.213765}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400, "for": 455612, "retrieval_score": 10.612215}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 455612, "retrieval_score": 14.210669}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399, "for": 455612, "retrieval_score": 12.61325}
{"snippet": "decimal.compare(other, context=None)", "intent": "Compare the values of two Decimal instances . With arguments `other`, `context`.", "question_id": 2400, "for": 455612, "retrieval_score": 12.30846}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 455612, "retrieval_score": 12.213765}
{"snippet": "crypt.METHOD_CRYPT", "intent": "The traditional method with a 2 character salt and 13 characters of hash.", "question_id": 1672, "for": 455612, "retrieval_score": 10.74277}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 455612, "retrieval_score": 14.210669}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399, "for": 455612, "retrieval_score": 12.61325}
{"snippet": "decimal.compare(other, context=None)", "intent": "Compare the values of two Decimal instances . With arguments `other`, `context`.", "question_id": 2400, "for": 455612, "retrieval_score": 12.30846}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 455612, "retrieval_score": 12.213765}
{"snippet": "crypt.METHOD_CRYPT", "intent": "The traditional method with a 2 character salt and 13 characters of hash.", "question_id": 1672, "for": 455612, "retrieval_score": 10.74277}
{"snippet": "winreg.LoadKey(key, sub_key, file_name)", "intent": "Creates a subkey under the specified `key` and stores registration information from a specified file into that subkey . `sub_key` is a string that identifies the subkey to load . `file_name` is the name of the file to load registry data from .", "question_id": 12137, "for": 9652832, "retrieval_score": 14.353326}
{"snippet": "inspect.getargvalues(frame)", "intent": "Get information about arguments passed into a particular `frame` .", "question_id": 5012, "for": 9652832, "retrieval_score": 12.734658}
{"snippet": "FileCookieJar.load()", "intent": "Load cookies from a file .", "question_id": 4506, "for": 9652832, "retrieval_score": 12.556208}
{"snippet": "plistlib.loads(data)", "intent": "Load a plist from a bytes object . With arguments `data`.", "question_id": 7555, "for": 9652832, "retrieval_score": 12.378344}
{"snippet": "plistlib.loads(data, fmt=None)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`.", "question_id": 7556, "for": 9652832, "retrieval_score": 12.097683}
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244, "for": 18722196, "retrieval_score": 22.772062}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 18722196, "retrieval_score": 14.912928}
{"snippet": "datetime.utcnow()", "intent": "Return the current UTC date and time , with tzinfo None .", "question_id": 2260, "for": 18722196, "retrieval_score": 14.197182}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353, "for": 18722196, "retrieval_score": 13.855697}
{"snippet": "datetime.timezone", "intent": "A class that implements the tzinfo abstract base class as a fixed offset from the UTC.", "question_id": 2203, "for": 18722196, "retrieval_score": 12.504699}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 8671702, "retrieval_score": 18.009325}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 8671702, "retrieval_score": 18.009325}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 8671702, "retrieval_score": 17.47351}
{"snippet": "cursor.execute(sql, parameters)", "intent": "Executes an SQL statement . With arguments `sql`, `parameters`.", "question_id": 8840, "for": 8671702, "retrieval_score": 16.362663}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 8671702, "retrieval_score": 15.866804}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 9497290, "retrieval_score": 34.03245}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 9497290, "retrieval_score": 29.629696}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175, "for": 9497290, "retrieval_score": 23.817333}
{"snippet": "audioop.lin2adpcm(fragment, width, state)", "intent": "Convert samples to 4 bit Intel/DVI ADPCM encoding . adpcmfrag is the ADPCM coded `fragment` packed 2 4-bit values per byte . `state` is a tuple containing the state of the coder . With arguments `width`.", "question_id": 692, "for": 9497290, "retrieval_score": 21.181648}
{"snippet": "pool.starmap(func, iterable)", "intent": "Like map ( ) except that the elements of the `iterable` are expected to be iterables that are unpacked as arguments . Hence an iterable of [ ( 1,2 ) , ( 3 , 4 ) ] results in [ `func` ( 1,2 ) , func ( 3,4 ) ] .", "question_id": 6351, "for": 9497290, "retrieval_score": 18.674227}
{"snippet": "set.pop()", "intent": "Remove and return an arbitrary element from the set .", "question_id": 9465, "for": 3097866, "retrieval_score": 13.294582}
{"snippet": "collections.OrderedDict()", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order .", "question_id": 1390, "for": 3097866, "retrieval_score": 12.357538}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389, "for": 3097866, "retrieval_score": 11.591314}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 3097866, "retrieval_score": 11.278721}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 3097866, "retrieval_score": 11.080307}
{"snippet": "set.pop()", "intent": "Remove and return an arbitrary element from the set .", "question_id": 9465, "for": 3097866, "retrieval_score": 13.294582}
{"snippet": "collections.OrderedDict()", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order .", "question_id": 1390, "for": 3097866, "retrieval_score": 12.357538}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389, "for": 3097866, "retrieval_score": 11.591314}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 3097866, "retrieval_score": 11.278721}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 3097866, "retrieval_score": 10.498789}
{"snippet": "calendar.prmonth(theyear, themonth)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`.", "question_id": 993, "for": 42012589, "retrieval_score": 10.513007}
{"snippet": "calendar.prmonth(theyear, themonth, w=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`.", "question_id": 994, "for": 42012589, "retrieval_score": 10.338909}
{"snippet": "calendar.prmonth(theyear, themonth, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 995, "for": 42012589, "retrieval_score": 10.338909}
{"snippet": "calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 996, "for": 42012589, "retrieval_score": 10.170697}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929, "for": 42012589, "retrieval_score": 10.082336}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271, "for": 13408919, "retrieval_score": 21.906137}
{"snippet": "pwd.getpwall()", "intent": "Return a list of all available password database entries , in arbitrary order .", "question_id": 7705, "for": 13408919, "retrieval_score": 21.389282}
{"snippet": "spwd.getspall()", "intent": "Return a list of all available shadow password database entries , in arbitrary order .", "question_id": 8790, "for": 13408919, "retrieval_score": 20.896254}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 13408919, "retrieval_score": 17.569569}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 13408919, "retrieval_score": 16.891735}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 39804375, "retrieval_score": 13.718182}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 39804375, "retrieval_score": 13.718182}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822, "for": 39804375, "retrieval_score": 13.64103}
{"snippet": "mh.get_sequences()", "intent": "Return a dictionary of sequence names mapped to key lists .", "question_id": 5783, "for": 39804375, "retrieval_score": 13.187381}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 39804375, "retrieval_score": 12.590098}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT", "intent": "Something other than whitespace occurred after the document element.", "question_id": 7794, "for": 6250046, "retrieval_score": 25.662745}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697, "for": 6250046, "retrieval_score": 24.441498}
{"snippet": "os.EX_NOTFOUND", "intent": "Exit code that means something like \u201can entry was not found\u201d.", "question_id": 7034, "for": 6250046, "retrieval_score": 24.03874}
{"snippet": "NotADirectoryError", "intent": "Raised when a directory operation (such as os.listdir()) is requested on something which is not a directory.", "question_id": 3697, "for": 6250046, "retrieval_score": 21.948067}
{"snippet": "sunau.Error", "intent": "An error raised when something is impossible because of Sun AU specs or implementation deficiency.", "question_id": 9693, "for": 6250046, "retrieval_score": 21.920017}
{"snippet": "os.path.splitext(path)", "intent": "Split the pathname `path` into a pair ( root , ext ) such that root + ext == path , and ext is empty or begins with a period and contains at most one period .", "question_id": 7171, "for": 21018612, "retrieval_score": 28.681597}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948, "for": 21018612, "retrieval_score": 25.90782}
{"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949, "for": 21018612, "retrieval_score": 18.201267}
{"snippet": "zipapp.create_archive(source, filter=None)", "intent": "Create an application archive from `source` . The optional `filter` argument specifies a callback function that is passed a Path object representing the path to the file being added ( relative to the source directory ) .", "question_id": 12771, "for": 21018612, "retrieval_score": 18.180613}
{"snippet": "source_file_loader.path", "intent": "The path to the source file.", "question_id": 4891, "for": 21018612, "retrieval_score": 15.903986}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 32296933, "retrieval_score": 14.599652}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 32296933, "retrieval_score": 14.599652}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 32296933, "retrieval_score": 14.347498}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 32296933, "retrieval_score": 14.347498}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843, "for": 32296933, "retrieval_score": 14.321717}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 32296933, "retrieval_score": 14.599652}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 32296933, "retrieval_score": 14.599652}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843, "for": 32296933, "retrieval_score": 14.321717}
{"snippet": "mh_message.remove_sequence(sequence)", "intent": "Remove `sequence` from the list of sequences that include this message .", "question_id": 5837, "for": 32296933, "retrieval_score": 13.975644}
{"snippet": "shutil.unregister_archive_format(name)", "intent": "Remove the archive format `name` from the list of supported formats .", "question_id": 8362, "for": 32296933, "retrieval_score": 13.975644}
{"snippet": "process.terminate()", "intent": "Terminate the process .", "question_id": 6186, "for": 17856928, "retrieval_score": 16.176607}
{"snippet": "Popen.wait(timeout=None)", "intent": "Wait for child process to terminate . If the process does not terminate after `timeout` seconds , raise a TimeoutExpired exception .", "question_id": 9611, "for": 17856928, "retrieval_score": 14.845127}
{"snippet": "Popen.wait()", "intent": "Wait for child process to terminate .", "question_id": 9610, "for": 17856928, "retrieval_score": 14.842765}
{"snippet": "process.wait()", "intent": "Wait for the child process to terminate .", "question_id": 547, "for": 17856928, "retrieval_score": 14.4457245}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 17856928, "retrieval_score": 12.447861}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 14465279, "retrieval_score": 14.463482}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797, "for": 14465279, "retrieval_score": 14.332745}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 14465279, "retrieval_score": 12.904362}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970, "for": 14465279, "retrieval_score": 12.893113}
{"snippet": "email_message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 3247, "for": 14465279, "retrieval_score": 12.893113}
{"snippet": "ctypes.GetLastError()", "intent": "Windows only : Returns the last error code set by Windows in the calling thread .", "question_id": 1823, "for": 3365673, "retrieval_score": 15.002827}
{"snippet": "window.syncdown()", "intent": "Touch each location in the window that has been touched in any of its ancestor windows .", "question_id": 2121, "for": 3365673, "retrieval_score": 14.328943}
{"snippet": "auto.winerror", "intent": "Under Windows, this gives you the native Windows error code.", "question_id": 3655, "for": 3365673, "retrieval_score": 12.380482}
{"snippet": "collections.abc.Generator", "intent": "ABC for generator classes that implement the protocol defined in PEP 342 that extends iterators with the send(), throw() and close() methods.", "question_id": 1318, "for": 3365673, "retrieval_score": 11.870529}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL", "intent": "There was an error parsing a text declaration in an external entity.", "question_id": 7814, "for": 3365673, "retrieval_score": 11.342665}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 3845423, "retrieval_score": 18.993534}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 3845423, "retrieval_score": 18.993534}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843, "for": 3845423, "retrieval_score": 17.112219}
{"snippet": "Element.removeAttributeNode(oldAttr)", "intent": "Remove and return `oldAttr` from the attribute list , if present .", "question_id": 12364, "for": 3845423, "retrieval_score": 17.112219}
{"snippet": "mh_message.remove_sequence(sequence)", "intent": "Remove `sequence` from the list of sequences that include this message .", "question_id": 5837, "for": 3845423, "retrieval_score": 16.698715}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 4270742, "retrieval_score": 16.98671}
{"snippet": "doctest.NORMALIZE_WHITESPACE", "intent": "When specified, all sequences of whitespace (blanks and newlines) are treated as equal.", "question_id": 2754, "for": 4270742, "retrieval_score": 14.425645}
{"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515, "for": 4270742, "retrieval_score": 10.625662}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 4270742, "retrieval_score": 10.205771}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 4270742, "retrieval_score": 10.205771}
{"snippet": "turtle.clearstamps()", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10931, "for": 35118265, "retrieval_score": 13.613443}
{"snippet": "turtle.clearstamps(n=None)", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10932, "for": 35118265, "retrieval_score": 13.613443}
{"snippet": "email.contentmanager.raw_data_manager", "intent": "This content manager provides only a minimum interface beyond that provided by Message itself:  it deals only with text, raw byte strings, and Message objects.", "question_id": 3036, "for": 35118265, "retrieval_score": 13.456869}
{"snippet": "deque.clear()", "intent": "Remove all elements from the deque leaving it with length 0 .", "question_id": 1355, "for": 35118265, "retrieval_score": 13.293119}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 35118265, "retrieval_score": 12.902096}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 40055835, "retrieval_score": 23.234833}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 40055835, "retrieval_score": 21.558777}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 40055835, "retrieval_score": 21.094599}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 40055835, "retrieval_score": 21.094599}
{"snippet": "calendar.day_name", "intent": "An array that represents the days of the week in the current locale.", "question_id": 1022, "for": 40055835, "retrieval_score": 18.829908}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714, "for": 21206395, "retrieval_score": 23.194117}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 21206395, "retrieval_score": 21.618225}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 21206395, "retrieval_score": 21.26445}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713, "for": 21206395, "retrieval_score": 20.61618}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 21206395, "retrieval_score": 19.465237}
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309, "for": 1186789, "retrieval_score": 12.61075}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 1186789, "retrieval_score": 12.500981}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168, "for": 1186789, "retrieval_score": 11.92468}
{"snippet": "turtle.write_docstringdict(filename=\"turtle_docstringdict\")", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11169, "for": 1186789, "retrieval_score": 11.92468}
{"snippet": "sys.abiflags", "intent": "On POSIX systems where Python was built with the standard configure script, this contains the ABI flags as specified by PEP 3149.", "question_id": 9766, "for": 1186789, "retrieval_score": 9.232104}
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309, "for": 1186789, "retrieval_score": 12.61075}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 1186789, "retrieval_score": 12.500981}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168, "for": 1186789, "retrieval_score": 11.92468}
{"snippet": "turtle.write_docstringdict(filename=\"turtle_docstringdict\")", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11169, "for": 1186789, "retrieval_score": 11.92468}
{"snippet": "sys.abiflags", "intent": "On POSIX systems where Python was built with the standard configure script, this contains the ABI flags as specified by PEP 3149.", "question_id": 9766, "for": 1186789, "retrieval_score": 9.232104}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951, "for": 7142227, "retrieval_score": 12.842073}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 7142227, "retrieval_score": 12.138526}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 7142227, "retrieval_score": 12.138526}
{"snippet": "types.FunctionType", "intent": "The type of user-defined functions and functions created by lambda  expressions.", "question_id": 11183, "for": 7142227, "retrieval_score": 9.968323}
{"snippet": "types.LambdaType", "intent": "The type of user-defined functions and functions created by lambda  expressions.", "question_id": 11184, "for": 7142227, "retrieval_score": 9.968323}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 7142227, "retrieval_score": 12.138526}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 7142227, "retrieval_score": 12.138526}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 7142227, "retrieval_score": 10.462806}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 7142227, "retrieval_score": 9.314079}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164, "for": 7142227, "retrieval_score": 9.132706}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393, "for": 7742752, "retrieval_score": 15.552524}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 7742752, "retrieval_score": 14.182208}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 7742752, "retrieval_score": 14.182208}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 7742752, "retrieval_score": 13.826162}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 7742752, "retrieval_score": 13.826162}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729, "for": 19011613, "retrieval_score": 10.267451}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730, "for": 19011613, "retrieval_score": 10.267451}
{"snippet": "tkinter.tix.Select", "intent": "The Select widget is a container of button subwidgets.", "question_id": 10561, "for": 19011613, "retrieval_score": 8.703225}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731, "for": 19011613, "retrieval_score": 8.467554}
{"snippet": "IMAP4.select(mailbox='INBOX', readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4732, "for": 19011613, "retrieval_score": 8.467554}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 31267493, "retrieval_score": 18.03556}
{"snippet": "array.array(typecode, initializer)", "intent": "A new array whose items are restricted by `typecode` , and initialized from the optional `initializer` value , which must be a list , a bytes-like object , or iterable over elements of the appropriate type .", "question_id": 115, "for": 31267493, "retrieval_score": 17.327015}
{"snippet": "array.array(typecode)", "intent": "A new array whose items are restricted by `typecode` , and initialized from the optional `initializer` value , which must be a list , a bytes-like object , or iterable over elements of the appropriate type .", "question_id": 116, "for": 31267493, "retrieval_score": 17.327015}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 31267493, "retrieval_score": 17.151417}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 31267493, "retrieval_score": 15.804681}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 11697709, "retrieval_score": 11.751598}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 11697709, "retrieval_score": 11.46763}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454, "for": 11697709, "retrieval_score": 11.463552}
{"snippet": "test_case.assertTupleEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11456, "for": 11697709, "retrieval_score": 11.463552}
{"snippet": "test_case.assertListEqual(first, second, msg=None)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`, `msg`.", "question_id": 11455, "for": 11697709, "retrieval_score": 11.199314}
{"snippet": "fileinput.hook_compressed(filename, mode)", "intent": "Transparently opens files compressed with gzip and bzip2 ( recognized by the extensions '.gz ' and '.bz2 ' ) using the gzip and bz2 modules . If the `filename` extension is not '.gz ' or '.bz2 ' , the file is opened normally ( ie , using open ( ) without any decompression ) . With arguments `mode`.", "question_id": 3810, "for": 19602931, "retrieval_score": 21.99424}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499, "for": 19602931, "retrieval_score": 14.892746}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503, "for": 19602931, "retrieval_score": 14.713638}
{"snippet": "FileCookieJar.save()", "intent": "Save cookies to a file .", "question_id": 4498, "for": 19602931, "retrieval_score": 14.679863}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4502, "for": 19602931, "retrieval_score": 14.551298}
{"snippet": "fileinput.hook_compressed(filename, mode)", "intent": "Transparently opens files compressed with gzip and bzip2 ( recognized by the extensions '.gz ' and '.bz2 ' ) using the gzip and bz2 modules . If the `filename` extension is not '.gz ' or '.bz2 ' , the file is opened normally ( ie , using open ( ) without any decompression ) . With arguments `mode`.", "question_id": 3810, "for": 19602931, "retrieval_score": 23.456158}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499, "for": 19602931, "retrieval_score": 18.01057}
{"snippet": "FileCookieJar.save()", "intent": "Save cookies to a file .", "question_id": 4498, "for": 19602931, "retrieval_score": 17.75312}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503, "for": 19602931, "retrieval_score": 17.54712}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4502, "for": 19602931, "retrieval_score": 17.34834}
{"snippet": "robot_file_parser.set_url(url)", "intent": "Sets the URL referring to a robots.txt file . With arguments `url`.", "question_id": 11909, "for": 19602931, "retrieval_score": 19.28279}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 19602931, "retrieval_score": 18.003517}
{"snippet": "urllib.request.urlretrieve(url, filename=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11882, "for": 19602931, "retrieval_score": 16.91246}
{"snippet": "urllib.request.urlretrieve(url, filename=None, reporthook=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied . With arguments `reporthook`.", "question_id": 11885, "for": 19602931, "retrieval_score": 16.91246}
{"snippet": "urllib.request.urlretrieve(url, filename=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11886, "for": 19602931, "retrieval_score": 16.91246}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976, "for": 2406700, "retrieval_score": 37.997173}
{"snippet": "audioop.ulaw2lin(fragment, width)", "intent": "Convert sound fragments in u-LAW encoding to linearly encoded sound fragments . u-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .", "question_id": 707, "for": 2406700, "retrieval_score": 30.298847}
{"snippet": "audioop.lin2ulaw(fragment, width)", "intent": "Convert samples in the audio `fragment` to u-LAW encoding and return this as a bytes object . With arguments `width`.", "question_id": 695, "for": 2406700, "retrieval_score": 27.77018}
{"snippet": "SSLContext.set_servername_callback(server_name_callback)", "intent": "This is a legacy API retained for backwards compatibility . The given `server_name_callback` is similar to sni_callback , except that when the server hostname is an IDN-encoded internationalized domain name , the server_name_callback receives a decoded U-label ( `` pyth\u00f6n.org '' ) .", "question_id": 9019, "for": 2406700, "retrieval_score": 19.639982}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841, "for": 2406700, "retrieval_score": 16.965322}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424, "for": 41727442, "retrieval_score": 26.142584}
{"snippet": "turtle.Vec2D(x, y)", "intent": "A two-dimensional vector class , used as a helper class for implementing turtle graphics . With arguments `x`, `y`.", "question_id": 11167, "for": 41727442, "retrieval_score": 21.927279}
{"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055, "for": 41727442, "retrieval_score": 21.49464}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 41727442, "retrieval_score": 20.455938}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026, "for": 41727442, "retrieval_score": 20.410088}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 20774910, "retrieval_score": 19.600504}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348, "for": 20774910, "retrieval_score": 17.544416}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 20774910, "retrieval_score": 15.04625}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 20774910, "retrieval_score": 14.771208}
{"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346, "for": 20774910, "retrieval_score": 14.771208}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 18391059, "retrieval_score": 17.715683}
{"snippet": "queue_listener.debug(msg, *args, **kwargs)", "intent": "Logs a message with level DEBUG on this logger . The `msg` is the message format string , and the args are the arguments which are merged into msg using the string formatting operator . With arguments `*args`, `**kwargs`.", "question_id": 5570, "for": 18391059, "retrieval_score": 14.906645}
{"snippet": "logging.debug(msg, *args, **kwargs)", "intent": "Logs a message with level DEBUG on the root logger . The `msg` is the message format string , and the args are the arguments which are merged into msg using the string formatting operator . With arguments `*args`, `**kwargs`.", "question_id": 5637, "for": 18391059, "retrieval_score": 14.717576}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716, "for": 18391059, "retrieval_score": 13.105815}
{"snippet": "oss_audio_device.setfmt(format)", "intent": "Try to set the current audio `format` to format\u2014see getfmts ( ) for a list .", "question_id": 7185, "for": 18391059, "retrieval_score": 12.120546}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 8970524, "retrieval_score": 15.084452}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 8970524, "retrieval_score": 15.084452}
{"snippet": "bytearray.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9355, "for": 8970524, "retrieval_score": 15.084452}
{"snippet": "bytearray.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9356, "for": 8970524, "retrieval_score": 15.084452}
{"snippet": "bytes.split()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9363, "for": 8970524, "retrieval_score": 15.084452}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 8970524, "retrieval_score": 30.344448}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 8970524, "retrieval_score": 29.875845}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 8970524, "retrieval_score": 28.137753}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 8970524, "retrieval_score": 27.337927}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 8970524, "retrieval_score": 26.590775}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 20638006, "retrieval_score": 13.499656}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 20638006, "retrieval_score": 13.288213}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027, "for": 20638006, "retrieval_score": 13.03548}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026, "for": 20638006, "retrieval_score": 12.815652}
{"snippet": "inspect.getinnerframes(traceback, context=1)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "question_id": 5028, "for": 20638006, "retrieval_score": 12.39835}
{"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300, "for": 9206964, "retrieval_score": 18.28647}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529, "for": 9206964, "retrieval_score": 17.691626}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530, "for": 9206964, "retrieval_score": 16.270624}
{"snippet": "text_wrapper.break_on_hyphens", "intent": "(default: True) If true, wrapping will occur preferably on whitespaces and right after hyphens in compound words, as it is customary in English.", "question_id": 10336, "for": 9206964, "retrieval_score": 15.704007}
{"snippet": "os.path.splitdrive(path)", "intent": "Split the pathname `path` into a pair ( drive , tail ) where drive is either a mount point or the empty string .", "question_id": 7170, "for": 9206964, "retrieval_score": 15.692907}
{"snippet": "xml.dom.DomstringSizeErr", "intent": "Raised when a specified range of text does not fit into a string.", "question_id": 12381, "for": 9206964, "retrieval_score": 18.540703}
{"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300, "for": 9206964, "retrieval_score": 18.28647}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529, "for": 9206964, "retrieval_score": 17.691626}
{"snippet": "urllib.parse.urlsplit(urlstring)", "intent": "This is similar to urlparse ( ) , but does not split the params from the URL . With arguments `urlstring`.", "question_id": 11690, "for": 9206964, "retrieval_score": 16.939362}
{"snippet": "urllib.parse.urlsplit(urlstring, scheme='')", "intent": "This is similar to urlparse ( ) , but does not split the params from the URL . With arguments `urlstring`, `scheme`.", "question_id": 11691, "for": 9206964, "retrieval_score": 16.589256}
{"snippet": "functools.reduce(function, iterable)", "intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . With arguments `iterable`.", "question_id": 4154, "for": 12182744, "retrieval_score": 13.667064}
{"snippet": "pool.apply_async(func)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`.", "question_id": 6339, "for": 12182744, "retrieval_score": 12.583235}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836, "for": 12182744, "retrieval_score": 12.575582}
{"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338, "for": 12182744, "retrieval_score": 12.320882}
{"snippet": "pool.apply_async(func, args, kwds)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`, `kwds`.", "question_id": 6337, "for": 12182744, "retrieval_score": 12.069424}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 6764909, "retrieval_score": 21.363045}
{"snippet": "widget.selection_remove(*items)", "intent": "Remove items from the selection . With arguments `*items`.", "question_id": 10656, "for": 6764909, "retrieval_score": 17.94048}
{"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700, "for": 6764909, "retrieval_score": 16.760653}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 6764909, "retrieval_score": 15.105549}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 6764909, "retrieval_score": 14.599652}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 34437284, "retrieval_score": 13.809412}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518, "for": 34437284, "retrieval_score": 13.203722}
{"snippet": "context.multiply(x, y)", "intent": "Return the product of `x` and `y` .", "question_id": 2554, "for": 34437284, "retrieval_score": 12.604974}
{"snippet": "time.process_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current process .", "question_id": 10450, "for": 34437284, "retrieval_score": 12.384207}
{"snippet": "time.thread_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current thread .", "question_id": 10459, "for": 34437284, "retrieval_score": 12.384207}
{"snippet": "Pattern.match(string)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object .", "question_id": 7975, "for": 5900683, "retrieval_score": 19.892815}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939, "for": 5900683, "retrieval_score": 19.497988}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940, "for": 5900683, "retrieval_score": 19.473932}
{"snippet": "stream_reader.readline()", "intent": "Read one line , where \u201c line \u201d is a sequence of bytes ending with \\n .", "question_id": 506, "for": 5900683, "retrieval_score": 16.724485}
{"snippet": "Pattern.match(string, pos, endpos)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "question_id": 7973, "for": 5900683, "retrieval_score": 16.48943}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 1614236, "retrieval_score": 17.315964}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 1614236, "retrieval_score": 13.436213}
{"snippet": "Unpacker.unpack_list(unpack_item)", "intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "question_id": 12297, "for": 1614236, "retrieval_score": 13.340933}
{"snippet": "widget.detach(*items)", "intent": "Unlinks all of the specified items from the tree . With arguments `*items`.", "question_id": 10628, "for": 1614236, "retrieval_score": 12.915117}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122, "for": 1614236, "retrieval_score": 12.890369}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 13840379, "retrieval_score": 22.374426}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 13840379, "retrieval_score": 18.360548}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175, "for": 13840379, "retrieval_score": 16.503983}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 13840379, "retrieval_score": 14.140878}
{"snippet": "doctest.COMPARISON_FLAGS", "intent": "A bitmask or\u2019ing together all the comparison flags above.", "question_id": 2758, "for": 13840379, "retrieval_score": 13.6477585}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714, "for": 8687568, "retrieval_score": 15.913568}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713, "for": 8687568, "retrieval_score": 13.806523}
{"snippet": "json.dump(obj, fp, **kw, separators=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If specified , `separators` should be an ( item_separator , key_separator ) tuple . With arguments `**kw`.", "question_id": 5277, "for": 8687568, "retrieval_score": 13.782098}
{"snippet": "json.load(fp, **kw)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5290, "for": 8687568, "retrieval_score": 12.942968}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168, "for": 8687568, "retrieval_score": 12.602787}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103, "for": 8687568, "retrieval_score": 15.092514}
{"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022, "for": 8687568, "retrieval_score": 14.349069}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_OPT", "intent": "The model is optional: it can appear once or not at all, as for A?.", "question_id": 7784, "for": 8687568, "retrieval_score": 13.716458}
{"snippet": "snapshot.dump(filename)", "intent": "Write the snapshot into a file . With arguments `filename`.", "question_id": 10873, "for": 8687568, "retrieval_score": 13.272245}
{"snippet": "aifc.setparams(nchannels, sampwidth, framerate, comptype, compname)", "intent": "Set all the above parameters at once . With arguments `nchannels`, `sampwidth`, `framerate`, `comptype`, `compname`.", "question_id": 32, "for": 8687568, "retrieval_score": 13.265662}
{"snippet": "test_case.assertMultiLineEqual(first, second)", "intent": "Test that the multiline string `first` is equal to the string `second` .", "question_id": 11448, "for": 4928526, "retrieval_score": 14.971976}
{"snippet": "turtle.setx(x)", "intent": "Set the turtle \u2019 s first coordinate to `x` , leave second coordinate unchanged .", "question_id": 10918, "for": 4928526, "retrieval_score": 14.950601}
{"snippet": "turtle.sety(y)", "intent": "Set the turtle \u2019 s second coordinate to `y` , leave first coordinate unchanged .", "question_id": 10919, "for": 4928526, "retrieval_score": 14.950601}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617, "for": 4928526, "retrieval_score": 14.754968}
{"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618, "for": 4928526, "retrieval_score": 14.754968}
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445, "for": 13781828, "retrieval_score": 18.260887}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857, "for": 13781828, "retrieval_score": 17.572}
{"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326, "for": 13781828, "retrieval_score": 17.216986}
{"snippet": "heapq.nsmallest(n, iterable, key=None)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4328, "for": 13781828, "retrieval_score": 17.216986}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 13781828, "retrieval_score": 15.592636}
{"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325, "for": 23145240, "retrieval_score": 12.079358}
{"snippet": "heapq.nsmallest(n, iterable)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` .", "question_id": 4327, "for": 23145240, "retrieval_score": 12.079358}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 23145240, "retrieval_score": 11.590036}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 23145240, "retrieval_score": 11.54057}
{"snippet": "element.keys()", "intent": "Returns the elements attribute names as a list .", "question_id": 12487, "for": 23145240, "retrieval_score": 11.2135315}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 20062565, "retrieval_score": 19.577099}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 20062565, "retrieval_score": 19.577099}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442, "for": 20062565, "retrieval_score": 18.253832}
{"snippet": "test_case.assertNotRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11444, "for": 20062565, "retrieval_score": 18.253832}
{"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931, "for": 20062565, "retrieval_score": 15.476209}
{"snippet": "curses.ungetch(ch)", "intent": "Push `ch` so the next getch ( ) will return it .", "question_id": 1993, "for": 20457174, "retrieval_score": 17.932451}
{"snippet": "curses.unget_wch(ch)", "intent": "Push `ch` so the next get_wch ( ) will return it .", "question_id": 1995, "for": 20457174, "retrieval_score": 17.932451}
{"snippet": "NNTP.next()", "intent": "Send a NEXT command .", "question_id": 6478, "for": 20457174, "retrieval_score": 16.71291}
{"snippet": "window.redrawwin()", "intent": "Touch the entire window , causing it to be completely redrawn on the next refresh ( ) call .", "question_id": 2105, "for": 20457174, "retrieval_score": 16.66319}
{"snippet": "bdb.set_next(frame)", "intent": "Stop on the next line in or below the given `frame` .", "question_id": 786, "for": 20457174, "retrieval_score": 15.767849}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371, "for": 6591931, "retrieval_score": 11.86859}
{"snippet": "os.getrandom(size)", "intent": "Get up to `size` random bytes .", "question_id": 7137, "for": 6591931, "retrieval_score": 11.323857}
{"snippet": "errno.ELIBSCN", "intent": ".lib section in a.out corrupted", "question_id": 3586, "for": 6591931, "retrieval_score": 10.832862}
{"snippet": "tracemalloc.get_traced_memory()", "intent": "Get the current size and peak size of memory blocks traced by the tracemalloc module as a tuple : ( current : int , peak : int ) .", "question_id": 10844, "for": 6591931, "retrieval_score": 10.646446}
{"snippet": "stat_result.st_rsize", "intent": "Real size of the file.", "question_id": 6942, "for": 6591931, "retrieval_score": 10.505155}
{"snippet": "re.fullmatch(pattern, string)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object .", "question_id": 7941, "for": 18493677, "retrieval_score": 19.91671}
{"snippet": "re.fullmatch(pattern, string, flags=0)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7942, "for": 18493677, "retrieval_score": 19.863098}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940, "for": 18493677, "retrieval_score": 19.438847}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939, "for": 18493677, "retrieval_score": 19.339434}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938, "for": 18493677, "retrieval_score": 19.30083}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759, "for": 8735312, "retrieval_score": 12.454686}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761, "for": 8735312, "retrieval_score": 12.406097}
{"snippet": "mh.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5782, "for": 8735312, "retrieval_score": 12.406097}
{"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760, "for": 8735312, "retrieval_score": 12.119864}
{"snippet": "mh.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return an MH instance representing it .", "question_id": 5781, "for": 8735312, "retrieval_score": 11.884231}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947, "for": 11430863, "retrieval_score": 17.476149}
{"snippet": "re.findall(pattern, string, flags=0)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings . With arguments `flags`.", "question_id": 7948, "for": 11430863, "retrieval_score": 16.369678}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 11430863, "retrieval_score": 16.197514}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 11430863, "retrieval_score": 16.197514}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403, "for": 11430863, "retrieval_score": 16.191656}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 1476, "retrieval_score": 14.033325}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 1476, "retrieval_score": 13.781546}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826, "for": 1476, "retrieval_score": 12.044983}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849, "for": 1476, "retrieval_score": 11.653612}
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824, "for": 1476, "retrieval_score": 11.378655}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 1476, "retrieval_score": 15.040123}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 1476, "retrieval_score": 14.033325}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 1476, "retrieval_score": 13.781546}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826, "for": 1476, "retrieval_score": 12.044983}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 1476, "retrieval_score": 11.709978}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 1476, "retrieval_score": 15.040123}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 1476, "retrieval_score": 14.033325}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 1476, "retrieval_score": 13.781546}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826, "for": 1476, "retrieval_score": 12.044983}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 1476, "retrieval_score": 11.709978}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 1476, "retrieval_score": 15.040123}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 1476, "retrieval_score": 14.033325}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 1476, "retrieval_score": 13.781546}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826, "for": 1476, "retrieval_score": 12.044983}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 1476, "retrieval_score": 11.709978}
{"snippet": "time.asctime()", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' .", "question_id": 10430, "for": 1476, "retrieval_score": 14.3090925}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 1476, "retrieval_score": 14.033325}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 1476, "retrieval_score": 13.781546}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826, "for": 1476, "retrieval_score": 12.044983}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849, "for": 1476, "retrieval_score": 11.653612}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 1476, "retrieval_score": 15.040123}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 1476, "retrieval_score": 14.033325}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 1476, "retrieval_score": 13.781546}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826, "for": 1476, "retrieval_score": 12.044983}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 1476, "retrieval_score": 11.709978}
{"snippet": "str.isdigit()", "intent": "Return true if all characters in the string are digits and there is at least one character , false otherwise .", "question_id": 9206, "for": 817122, "retrieval_score": 19.42105}
{"snippet": "bytes.isdigit()", "intent": "Return true if all bytes in the sequence are ASCII decimal digits and the sequence is not empty , false otherwise .", "question_id": 9387, "for": 817122, "retrieval_score": 15.394004}
{"snippet": "bytearray.isdigit()", "intent": "Return true if all bytes in the sequence are ASCII decimal digits and the sequence is not empty , false otherwise .", "question_id": 9388, "for": 817122, "retrieval_score": 15.394004}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348, "for": 817122, "retrieval_score": 14.812439}
{"snippet": "errno.EUNATCH", "intent": "Protocol driver not attached", "question_id": 3554, "for": 817122, "retrieval_score": 14.664032}
{"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931, "for": 817122, "retrieval_score": 13.077211}
{"snippet": "re.MULTILINE", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7932, "for": 817122, "retrieval_score": 13.077211}
{"snippet": "dispatcher.recv(buffer_size)", "intent": "Read at most `buffer_size` bytes from the socket \u2019 s remote end-point .", "question_id": 669, "for": 817122, "retrieval_score": 12.865659}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 817122, "retrieval_score": 12.065154}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040, "for": 817122, "retrieval_score": 12.065154}
{"snippet": "turtle.clear()", "intent": "Delete the turtle \u2019 s drawings from the screen .", "question_id": 10968, "for": 817122, "retrieval_score": 14.307125}
{"snippet": "message.__delitem__(name)", "intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "question_id": 2968, "for": 817122, "retrieval_score": 12.373012}
{"snippet": "email_message.__delitem__(name)", "intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "question_id": 3245, "for": 817122, "retrieval_score": 12.373012}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139, "for": 817122, "retrieval_score": 11.5736885}
{"snippet": "turtle.reset()", "intent": "Delete the turtle \u2019 s drawings from the screen , re-center the turtle and set variables to the default values .", "question_id": 10967, "for": 817122, "retrieval_score": 11.120264}
{"snippet": "unicodedata.lookup(name)", "intent": "Look up character by `name` .", "question_id": 11340, "for": 436599, "retrieval_score": 11.882185}
{"snippet": "window.insnstr(str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "question_id": 2078, "for": 436599, "retrieval_score": 11.85649}
{"snippet": "window.insnstr(str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`, `attr`.", "question_id": 2077, "for": 436599, "retrieval_score": 11.675431}
{"snippet": "ProcessingInstruction.target", "intent": "The content of the processing instruction up to the first whitespace character.", "question_id": 12378, "for": 436599, "retrieval_score": 11.099239}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348, "for": 436599, "retrieval_score": 10.275815}
{"snippet": "text_calendar.prmonth(theyear, themonth)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`.", "question_id": 932, "for": 5864485, "retrieval_score": 13.380456}
{"snippet": "text_calendar.prmonth(theyear, themonth, w=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`.", "question_id": 933, "for": 5864485, "retrieval_score": 13.078982}
{"snippet": "text_calendar.prmonth(theyear, themonth, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 934, "for": 5864485, "retrieval_score": 13.078982}
{"snippet": "text_calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 935, "for": 5864485, "retrieval_score": 12.790793}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363, "for": 5864485, "retrieval_score": 11.833863}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 5864485, "retrieval_score": 19.077013}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 5864485, "retrieval_score": 19.077013}
{"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241, "for": 5864485, "retrieval_score": 19.077013}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242, "for": 5864485, "retrieval_score": 19.077013}
{"snippet": "str.rsplit(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9237, "for": 5864485, "retrieval_score": 15.041119}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 31405409, "retrieval_score": 16.742975}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 31405409, "retrieval_score": 16.742975}
{"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241, "for": 31405409, "retrieval_score": 16.742975}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242, "for": 31405409, "retrieval_score": 16.742975}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529, "for": 31405409, "retrieval_score": 16.620615}
{"snippet": "test.support.open_urlresource(url, *args, **kw)", "intent": "Open `url` . With arguments `*args`, `**kw`.", "question_id": 10239, "for": 4302027, "retrieval_score": 17.659552}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752, "for": 4302027, "retrieval_score": 17.649813}
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106, "for": 4302027, "retrieval_score": 17.42289}
{"snippet": "controller.open_new(url)", "intent": "Open `url` in a new window of the browser handled by this controller , if possible , otherwise , open url in the only browser window .", "question_id": 12118, "for": 4302027, "retrieval_score": 16.741913}
{"snippet": "urllib.request.urlopen(url, cadefault=False)", "intent": "Open the URL `url` , which can be either a string or a Request object . The `cadefault` parameter is ignored .", "question_id": 11756, "for": 4302027, "retrieval_score": 16.298838}
{"snippet": "test.support.open_urlresource(url, *args, **kw)", "intent": "Open `url` . With arguments `*args`, `**kw`.", "question_id": 10239, "for": 4302027, "retrieval_score": 11.418039}
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106, "for": 4302027, "retrieval_score": 11.265022}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752, "for": 4302027, "retrieval_score": 10.946642}
{"snippet": "test.support.TEST_HTTP_URL", "intent": "Define the URL of a dedicated HTTP server for the network tests.", "question_id": 10134, "for": 4302027, "retrieval_score": 10.890671}
{"snippet": "controller.open_new(url)", "intent": "Open `url` in a new window of the browser handled by this controller , if possible , otherwise , open url in the only browser window .", "question_id": 12118, "for": 4302027, "retrieval_score": 10.824726}
{"snippet": "window.attrset(attr)", "intent": "Set the \u201c background \u201d set of attributes to `attr` .", "question_id": 2014, "for": 20668060, "retrieval_score": 12.462026}
{"snippet": "tkinter.tix.OptionMenu", "intent": "The OptionMenu creates a menu button of options.", "question_id": 10559, "for": 20668060, "retrieval_score": 11.726064}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945, "for": 20668060, "retrieval_score": 11.5187235}
{"snippet": "tkinter.tix.Select", "intent": "The Select widget is a container of button subwidgets.", "question_id": 10561, "for": 20668060, "retrieval_score": 11.428324}
{"snippet": "window.bkgd(ch, attr)", "intent": "Set the background property of the window to the character `ch` , with attributes `attr` .", "question_id": 2015, "for": 20668060, "retrieval_score": 11.107361}
{"snippet": "message.get_all(name)", "intent": "Return a list of all the values for the field named `name` .", "question_id": 2974, "for": 4231345, "retrieval_score": 29.054964}
{"snippet": "email_message.get_all(name)", "intent": "Return a list of all the values for the field named `name` .", "question_id": 3251, "for": 4231345, "retrieval_score": 29.054964}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221, "for": 4231345, "retrieval_score": 25.40984}
{"snippet": "imghdr.tests", "intent": "A list of functions performing the individual tests.", "question_id": 4759, "for": 4231345, "retrieval_score": 24.163969}
{"snippet": "message.get_all(name, failobj=None)", "intent": "Return a list of all the values for the field named `name` . If there are no such named headers in the message , `failobj` is returned ( defaults to None ) .", "question_id": 2975, "for": 4231345, "retrieval_score": 24.005539}
{"snippet": "dialog.text(name, x, y, width, height, attributes, text)", "intent": "Add and return a Text control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `text`.", "question_id": 6137, "for": 14306852, "retrieval_score": 23.040249}
{"snippet": "dialog.bitmap(name, x, y, width, height, text)", "intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "question_id": 6138, "for": 14306852, "retrieval_score": 22.180206}
{"snippet": "dialog.pushbutton(name, x, y, width, height, attributes, text, next_control)", "intent": "Add and return a PushButton control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `text`, `next_control`.", "question_id": 6140, "for": 14306852, "retrieval_score": 21.223822}
{"snippet": "dialog.radiogroup(name, x, y, width, height, attributes, property, text, next_control)", "intent": "Add and return a RadioButtonGroup control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `property`, `text`, `next_control`.", "question_id": 6141, "for": 14306852, "retrieval_score": 20.775906}
{"snippet": "dialog.checkbox(name, x, y, width, height, attributes, property, text, next_control)", "intent": "Add and return a CheckBox control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `property`, `text`, `next_control`.", "question_id": 6142, "for": 14306852, "retrieval_score": 20.775906}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 14111705, "retrieval_score": 11.132085}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 14111705, "retrieval_score": 10.90506}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 14111705, "retrieval_score": 10.90506}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124, "for": 14111705, "retrieval_score": 10.856425}
{"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042, "for": 14111705, "retrieval_score": 10.59761}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 13295735, "retrieval_score": 10.984238}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372, "for": 13295735, "retrieval_score": 10.828307}
{"snippet": "deque.clear()", "intent": "Remove all elements from the deque leaving it with length 0 .", "question_id": 1355, "for": 13295735, "retrieval_score": 10.677021}
{"snippet": "message.replace_header(_name, _value)", "intent": "Replace a header . Replace the first header found in the message that matches `_name` , retaining header order and field name case . With arguments `_value`.", "question_id": 2977, "for": 13295735, "retrieval_score": 10.567706}
{"snippet": "datetime.timedelta(milliseconds=0)", "intent": "All arguments are optional and default to 0 . With arguments `milliseconds`.", "question_id": 2208, "for": 13295735, "retrieval_score": 10.293258}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714, "for": 31385363, "retrieval_score": 19.600191}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 31385363, "retrieval_score": 19.465237}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 31385363, "retrieval_score": 17.670523}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713, "for": 31385363, "retrieval_score": 17.254702}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 31385363, "retrieval_score": 17.126492}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714, "for": 31385363, "retrieval_score": 21.329376}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 31385363, "retrieval_score": 20.177065}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 31385363, "retrieval_score": 19.465237}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713, "for": 31385363, "retrieval_score": 18.872047}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 31385363, "retrieval_score": 15.111364}
{"snippet": "SSLContext.get_ca_certs(binary_form=False)", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "question_id": 9012, "for": 12218112, "retrieval_score": 15.019903}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 12218112, "retrieval_score": 14.347241}
{"snippet": "time.process_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current process .", "question_id": 10450, "for": 12218112, "retrieval_score": 14.091546}
{"snippet": "time.thread_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current thread .", "question_id": 10459, "for": 12218112, "retrieval_score": 14.091546}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 12218112, "retrieval_score": 13.743301}
{"snippet": "resource.RUSAGE_SELF", "intent": "Pass to getrusage() to request resources consumed by the calling process, which is the sum of resources used by all threads in the process.", "question_id": 8097, "for": 40517350, "retrieval_score": 11.963641}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 40517350, "retrieval_score": 11.913301}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518, "for": 40517350, "retrieval_score": 11.104729}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052, "for": 40517350, "retrieval_score": 11.038081}
{"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325, "for": 40517350, "retrieval_score": 10.379755}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 4363072, "retrieval_score": 29.298977}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455, "for": 4363072, "retrieval_score": 20.91718}
{"snippet": "time.strptime(string)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10456, "for": 4363072, "retrieval_score": 20.91718}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 4363072, "retrieval_score": 19.276512}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 4363072, "retrieval_score": 17.109638}
{"snippet": "asyncio.get_event_loop()", "intent": "Get the current event loop .", "question_id": 179, "for": 3718657, "retrieval_score": 10.624367}
{"snippet": "test.support.temp_cwd(name='tempcwd')", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory .", "question_id": 10183, "for": 3718657, "retrieval_score": 10.160424}
{"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037, "for": 3718657, "retrieval_score": 10.055967}
{"snippet": "abstract_event_loop_policy.get_event_loop()", "intent": "Get the event loop for the current context .", "question_id": 375, "for": 3718657, "retrieval_score": 9.793981}
{"snippet": "connection.isolation_level", "intent": "Get or set the current default isolation level.", "question_id": 8804, "for": 3718657, "retrieval_score": 9.793981}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458, "for": 15175142, "retrieval_score": 13.881478}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 15175142, "retrieval_score": 12.516876}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 15175142, "retrieval_score": 12.516876}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254, "for": 15175142, "retrieval_score": 12.393001}
{"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931, "for": 15175142, "retrieval_score": 12.156462}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403, "for": 19641579, "retrieval_score": 20.085333}
{"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405, "for": 19641579, "retrieval_score": 20.085333}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407, "for": 19641579, "retrieval_score": 20.085333}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 19641579, "retrieval_score": 16.860636}
{"snippet": "context.exp(x)", "intent": "Returns e ** `x` .", "question_id": 2530, "for": 19641579, "retrieval_score": 15.16724}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941, "for": 3430372, "retrieval_score": 16.247328}
{"snippet": "ZipFile.extract(member, path=None)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object . `path` specifies a different directory to extract to .", "question_id": 12815, "for": 3430372, "retrieval_score": 14.745766}
{"snippet": "os.chroot(path)", "intent": "Change the root directory of the current process to `path` .", "question_id": 6843, "for": 3430372, "retrieval_score": 13.967553}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940, "for": 3430372, "retrieval_score": 13.859441}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832, "for": 3430372, "retrieval_score": 13.82653}
{"snippet": "str.zfill(width)", "intent": "Return a copy of the string left filled with ASCII ' 0 ' digits to make a string of length `width` .", "question_id": 9256, "for": 14932247, "retrieval_score": 20.870369}
{"snippet": "context.logical_invert(x)", "intent": "Invert all the digits in `x` .", "question_id": 2546, "for": 14932247, "retrieval_score": 20.58479}
{"snippet": "bytes.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9262, "for": 14932247, "retrieval_score": 19.452883}
{"snippet": "bytearray.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9268, "for": 14932247, "retrieval_score": 19.452883}
{"snippet": "memoryview.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the buffer .", "question_id": 9414, "for": 14932247, "retrieval_score": 19.452883}
{"snippet": "asyncio.get_event_loop()", "intent": "Get the current event loop .", "question_id": 179, "for": 2764586, "retrieval_score": 10.624367}
{"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037, "for": 2764586, "retrieval_score": 10.055967}
{"snippet": "abstract_event_loop_policy.get_event_loop()", "intent": "Get the event loop for the current context .", "question_id": 375, "for": 2764586, "retrieval_score": 9.793981}
{"snippet": "connection.isolation_level", "intent": "Get or set the current default isolation level.", "question_id": 8804, "for": 2764586, "retrieval_score": 9.793981}
{"snippet": "base_handler.get_scheme()", "intent": "Return the URL scheme being used for the current request .", "question_id": 12258, "for": 2764586, "retrieval_score": 9.680298}
{"snippet": "os.getrandom(size)", "intent": "Get up to `size` random bytes .", "question_id": 7137, "for": 30651487, "retrieval_score": 13.785933}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 30651487, "retrieval_score": 11.150116}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894, "for": 30651487, "retrieval_score": 10.959577}
{"snippet": "widget.get_children()", "intent": "Returns the list of children belonging to `item` .", "question_id": 10622, "for": 30651487, "retrieval_score": 10.584333}
{"snippet": "widget.get_children(item=None)", "intent": "Returns the list of children belonging to `item` .", "question_id": 10623, "for": 30651487, "retrieval_score": 10.584333}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947, "for": 3780403, "retrieval_score": 20.681625}
{"snippet": "re.findall(pattern, string, flags=0)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings . With arguments `flags`.", "question_id": 7948, "for": 3780403, "retrieval_score": 19.401327}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832, "for": 3780403, "retrieval_score": 17.578457}
{"snippet": "importlib.machinery.all_suffixes()", "intent": "Returns a combined list of strings representing all file suffixes for modules recognized by the standard import machinery .", "question_id": 4870, "for": 3780403, "retrieval_score": 17.388048}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827, "for": 3780403, "retrieval_score": 16.68791}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 4233476, "retrieval_score": 14.562463}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 4233476, "retrieval_score": 14.562463}
{"snippet": "turtle.setx(x)", "intent": "Set the turtle \u2019 s first coordinate to `x` , leave second coordinate unchanged .", "question_id": 10918, "for": 4233476, "retrieval_score": 13.396391}
{"snippet": "turtle.sety(y)", "intent": "Set the turtle \u2019 s second coordinate to `y` , leave first coordinate unchanged .", "question_id": 10919, "for": 4233476, "retrieval_score": 13.396391}
{"snippet": "datetime.replace(second=self.second)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `second`.", "question_id": 2290, "for": 4233476, "retrieval_score": 12.444828}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 4233476, "retrieval_score": 19.068142}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 4233476, "retrieval_score": 18.225288}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 4233476, "retrieval_score": 18.225288}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 4233476, "retrieval_score": 18.106142}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489, "for": 4233476, "retrieval_score": 18.014463}
{"snippet": "Database.Commit()", "intent": "Commit the changes pending in the current transaction , by calling MSIDatabaseCommit ( ) .", "question_id": 6069, "for": 21974169, "retrieval_score": 20.299377}
{"snippet": "connection.commit()", "intent": "This method commits the current transaction .", "question_id": 8808, "for": 21974169, "retrieval_score": 13.485565}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615, "for": 21974169, "retrieval_score": 9.346564}
{"snippet": "connection.in_transaction", "intent": "True if a transaction is active (there are uncommitted changes), False otherwise.", "question_id": 8805, "for": 21974169, "retrieval_score": 7.7109213}
{"snippet": "connection.rollback()", "intent": "This method rolls back any changes to the database since the last call to commit ( ) .", "question_id": 8809, "for": 21974169, "retrieval_score": 7.698993}
{"snippet": "email.header.Header()", "intent": "Create a MIME-compliant header that can contain strings in different character sets .", "question_id": 3116, "for": 2152898, "retrieval_score": 18.956266}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827, "for": 2152898, "retrieval_score": 18.734577}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832, "for": 2152898, "retrieval_score": 17.578457}
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440, "for": 2152898, "retrieval_score": 17.497435}
{"snippet": "Option.choices", "intent": "For options of type \"choice\", the list of strings the user may choose from.", "question_id": 6632, "for": 2152898, "retrieval_score": 17.46144}
{"snippet": "memoryview.format", "intent": "A string containing the format (in struct module style) for each element in the view.", "question_id": 9422, "for": 5775719, "retrieval_score": 14.516601}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 5775719, "retrieval_score": 14.36092}
{"snippet": "memoryview.itemsize", "intent": "The size in bytes of each element of the memoryview:", "question_id": 9423, "for": 5775719, "retrieval_score": 14.321597}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 5775719, "retrieval_score": 13.099485}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426, "for": 5775719, "retrieval_score": 12.729942}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758, "for": 13418405, "retrieval_score": 18.924698}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779, "for": 13418405, "retrieval_score": 18.542671}
{"snippet": "message.__delitem__(name)", "intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "question_id": 2968, "for": 13418405, "retrieval_score": 15.5075245}
{"snippet": "email_message.__delitem__(name)", "intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "question_id": 3245, "for": 13418405, "retrieval_score": 15.5075245}
{"snippet": "base_header.name", "intent": "The name of the header (the portion of the field before the \u2018:\u2019).", "question_id": 3151, "for": 13418405, "retrieval_score": 14.947409}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 19410018, "retrieval_score": 14.83062}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 19410018, "retrieval_score": 14.83062}
{"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241, "for": 19410018, "retrieval_score": 14.83062}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242, "for": 19410018, "retrieval_score": 14.83062}
{"snippet": "element.tag", "intent": "A string identifying what kind of data this element represents (the element type, in other words).", "question_id": 12479, "for": 19410018, "retrieval_score": 13.557389}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 21562986, "retrieval_score": 30.402822}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 21562986, "retrieval_score": 30.402822}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer, lock=True)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed . If `lock` is True ( the default ) then a new lock object is created to synchronize access to the value .", "question_id": 6268, "for": 21562986, "retrieval_score": 29.6973}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984, "for": 21562986, "retrieval_score": 28.687723}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 21562986, "retrieval_score": 27.876915}
{"snippet": "platform.python_version()", "intent": "Returns the Python version as string 'major.minor.patchlevel ' .", "question_id": 7478, "for": 1093322, "retrieval_score": 10.097754}
{"snippet": "sysconfig.get_python_version()", "intent": "Return the MAJOR.MINOR Python version number as a string .", "question_id": 9870, "for": 1093322, "retrieval_score": 9.584962}
{"snippet": "platform.python_version_tuple()", "intent": "Returns the Python version as tuple ( major , minor , patchlevel ) of strings .", "question_id": 7479, "for": 1093322, "retrieval_score": 9.121736}
{"snippet": "base_http_request_handler.sys_version", "intent": "Contains the Python system version, in a form usable by the version_string method and the server_version class variable.", "question_id": 4628, "for": 1093322, "retrieval_score": 7.8020263}
{"snippet": "platform.libc_ver()", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7537, "for": 1093322, "retrieval_score": 7.8020263}
{"snippet": "platform.python_version()", "intent": "Returns the Python version as string 'major.minor.patchlevel ' .", "question_id": 7478, "for": 1093322, "retrieval_score": 10.097754}
{"snippet": "sysconfig.get_python_version()", "intent": "Return the MAJOR.MINOR Python version number as a string .", "question_id": 9870, "for": 1093322, "retrieval_score": 9.584962}
{"snippet": "platform.python_version_tuple()", "intent": "Returns the Python version as tuple ( major , minor , patchlevel ) of strings .", "question_id": 7479, "for": 1093322, "retrieval_score": 9.121736}
{"snippet": "base_http_request_handler.sys_version", "intent": "Contains the Python system version, in a form usable by the version_string method and the server_version class variable.", "question_id": 4628, "for": 1093322, "retrieval_score": 7.8020263}
{"snippet": "platform.libc_ver()", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7537, "for": 1093322, "retrieval_score": 7.8020263}
{"snippet": "context.to_sci_string(x)", "intent": "Converts a number to a string using scientific notation . With arguments `x`.", "question_id": 2575, "for": 13490292, "retrieval_score": 15.598811}
{"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478, "for": 13490292, "retrieval_score": 12.045159}
{"snippet": "decimal.to_eng_string(context=None)", "intent": "Convert to a string , using engineering notation if an exponent is needed . With arguments `context`.", "question_id": 2479, "for": 13490292, "retrieval_score": 11.248934}
{"snippet": "context.to_eng_string(x)", "intent": "Convert to a string , using engineering notation if an exponent is needed . With arguments `x`.", "question_id": 2573, "for": 13490292, "retrieval_score": 11.248934}
{"snippet": "i_pv4_address.exploded", "intent": "The string representation in dotted decimal notation.", "question_id": 5177, "for": 13490292, "retrieval_score": 9.444851}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 12791501, "retrieval_score": 13.542877}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 12791501, "retrieval_score": 13.439249}
{"snippet": "turtle.setundobuffer(size)", "intent": "Set or disable undobuffer . If `size` is an integer an empty undobuffer of given size is installed .", "question_id": 11038, "for": 12791501, "retrieval_score": 12.582859}
{"snippet": "SSLContext.cert_store_stats()", "intent": "Get statistics about quantities of loaded X.509 certificates , count of X.509 certificates flagged as CA certificates and certificate revocation lists as dictionary .", "question_id": 8996, "for": 12791501, "retrieval_score": 11.915375}
{"snippet": "NNTP.getcapabilities()", "intent": "Return the RFC 3977 capabilities advertised by the server , as a dict instance mapping capability names to ( possibly empty ) lists of values .", "question_id": 6450, "for": 12791501, "retrieval_score": 11.854297}
{"snippet": "typing.TypeVar", "intent": "Type variable.", "question_id": 11229, "for": 4901483, "retrieval_score": 15.729316}
{"snippet": "context_var.name", "intent": "The name of the variable.", "question_id": 1639, "for": 4901483, "retrieval_score": 14.395701}
{"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288, "for": 4901483, "retrieval_score": 14.000035}
{"snippet": "threading.Condition()", "intent": "This class implements condition variable objects .", "question_id": 10386, "for": 4901483, "retrieval_score": 14.000035}
{"snippet": "multiprocessing.Condition()", "intent": "A condition variable : an alias for threading.Condition .", "question_id": 6249, "for": 4901483, "retrieval_score": 13.625538}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 8092877, "retrieval_score": 36.657303}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670, "for": 8092877, "retrieval_score": 30.104103}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 8092877, "retrieval_score": 29.95853}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 8092877, "retrieval_score": 29.638065}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508, "for": 8092877, "retrieval_score": 28.683874}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 8092877, "retrieval_score": 19.34781}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 8092877, "retrieval_score": 19.34781}
{"snippet": "bytearray.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9355, "for": 8092877, "retrieval_score": 19.34781}
{"snippet": "bytearray.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9356, "for": 8092877, "retrieval_score": 19.34781}
{"snippet": "bytes.split()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9363, "for": 8092877, "retrieval_score": 19.34781}
{"snippet": "xmlrpc.client.dumps(params, methodresponse=None)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true .", "question_id": 12700, "for": 7522533, "retrieval_score": 11.714831}
{"snippet": "xmlrpc.client.dumps(params, methodname=None, methodresponse=None)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true . With arguments `methodname`.", "question_id": 12703, "for": 7522533, "retrieval_score": 11.092154}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 7522533, "retrieval_score": 11.049772}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698, "for": 7522533, "retrieval_score": 10.905937}
{"snippet": "email_message.make_related()", "intent": "Convert a non-multipart message into a multipart/related message , moving any existing Content- headers and payload into a ( new ) first part of the multipart .", "question_id": 3294, "for": 7522533, "retrieval_score": 10.6382}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 18504967, "retrieval_score": 31.87106}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 18504967, "retrieval_score": 31.87106}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 18504967, "retrieval_score": 31.87106}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 18504967, "retrieval_score": 29.527084}
{"snippet": "widget.set(item)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` .", "question_id": 10658, "for": 18504967, "retrieval_score": 28.603516}
{"snippet": "test_loader.discover(start_dir)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory .", "question_id": 11499, "for": 973473, "retrieval_score": 17.66094}
{"snippet": "env_builder.install_scripts(context, path)", "intent": "`path` is the path to a directory that should contain subdirectories \u201c common \u201d , \u201c posix \u201d , \u201c nt \u201d , each containing scripts destined for the bin directory in the environment . With arguments `context`.", "question_id": 11988, "for": 973473, "retrieval_score": 17.349731}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706, "for": 973473, "retrieval_score": 16.435741}
{"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707, "for": 973473, "retrieval_score": 16.435741}
{"snippet": "IMAP4.list()", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4708, "for": 973473, "retrieval_score": 16.435741}
{"snippet": "test_loader.discover(start_dir)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory .", "question_id": 11499, "for": 973473, "retrieval_score": 17.66094}
{"snippet": "env_builder.install_scripts(context, path)", "intent": "`path` is the path to a directory that should contain subdirectories \u201c common \u201d , \u201c posix \u201d , \u201c nt \u201d , each containing scripts destined for the bin directory in the environment . With arguments `context`.", "question_id": 11988, "for": 973473, "retrieval_score": 17.349731}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706, "for": 973473, "retrieval_score": 16.435741}
{"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707, "for": 973473, "retrieval_score": 16.435741}
{"snippet": "IMAP4.list()", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4708, "for": 973473, "retrieval_score": 16.435741}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 4484690, "retrieval_score": 23.1262}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 4484690, "retrieval_score": 22.984375}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 4484690, "retrieval_score": 21.64246}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 4484690, "retrieval_score": 21.55415}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 4484690, "retrieval_score": 21.51829}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 4484690, "retrieval_score": 22.41729}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 4484690, "retrieval_score": 22.41729}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 4484690, "retrieval_score": 21.176449}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 4484690, "retrieval_score": 21.066053}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 4484690, "retrieval_score": 21.066053}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 4484690, "retrieval_score": 22.41729}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 4484690, "retrieval_score": 22.41729}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 4484690, "retrieval_score": 21.176449}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 4484690, "retrieval_score": 21.066053}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 4484690, "retrieval_score": 21.066053}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846, "for": 19384532, "retrieval_score": 13.387637}
{"snippet": "mailbox.__len__()", "intent": "Return a count of messages in the mailbox .", "question_id": 5744, "for": 19384532, "retrieval_score": 13.269365}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061, "for": 19384532, "retrieval_score": 13.010656}
{"snippet": "cursor.arraysize", "intent": "Read/write attribute that controls the number of rows returned by fetchmany().", "question_id": 8851, "for": 19384532, "retrieval_score": 12.829732}
{"snippet": "NNTP.stat()", "intent": "Send a STAT command , where `message_spec` is either a message id ( enclosed in ' < ' and ' > ' ) or an article number in the current group .", "question_id": 6476, "for": 19384532, "retrieval_score": 12.708083}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 13283689, "retrieval_score": 26.489216}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 13283689, "retrieval_score": 25.054148}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 13283689, "retrieval_score": 24.34159}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 13283689, "retrieval_score": 23.956305}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 13283689, "retrieval_score": 23.785769}
{"snippet": "mime_types.types_map_inv", "intent": "Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types.", "question_id": 5963, "for": 1580270, "retrieval_score": 15.819968}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827, "for": 1580270, "retrieval_score": 15.308797}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224, "for": 1580270, "retrieval_score": 15.16047}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638, "for": 1580270, "retrieval_score": 15.141593}
{"snippet": "plistlib.dump(value, fp, sort_keys=True)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . With arguments `fp`.", "question_id": 7565, "for": 1580270, "retrieval_score": 15.052678}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846, "for": 6480441, "retrieval_score": 19.33145}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847, "for": 6480441, "retrieval_score": 18.902113}
{"snippet": "cursor.rowcount", "intent": "Although the Cursor class of the sqlite3 module implements this attribute, the database engine\u2019s own support for the determination of \u201crows affected\u201d/\u201drows selected\u201d is quirky.", "question_id": 8849, "for": 6480441, "retrieval_score": 18.534937}
{"snippet": "cursor.fetchmany()", "intent": "Fetches the next set of rows of a query result , returning a list .", "question_id": 8845, "for": 6480441, "retrieval_score": 18.373499}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424, "for": 6480441, "retrieval_score": 17.467417}
{"snippet": "IMAP4.xatom(name)", "intent": "Allow simple extension commands notified by server in CAPABILITY response . With arguments `name`.", "question_id": 4752, "for": 3548673, "retrieval_score": 16.459465}
{"snippet": "types.MemberDescriptorType", "intent": "The type of objects defined in extension modules with PyMemberDef, such as datetime.timedelta.days.", "question_id": 11205, "for": 3548673, "retrieval_score": 16.459465}
{"snippet": "extension_file_loader.path", "intent": "Path to the extension module.", "question_id": 4905, "for": 3548673, "retrieval_score": 16.362963}
{"snippet": "IMAP4.xatom()", "intent": "Allow simple extension commands notified by server in CAPABILITY response .", "question_id": 4753, "for": 3548673, "retrieval_score": 16.265537}
{"snippet": "types.GetSetDescriptorType", "intent": "The type of objects defined in extension modules with PyGetSetDef, such as FrameType.f_locals or array.array.typecode.", "question_id": 11204, "for": 3548673, "retrieval_score": 15.734115}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018, "for": 19954469, "retrieval_score": 11.80271}
{"snippet": "time.clock_getres(clk_id)", "intent": "Return the resolution ( precision ) of the specified clock `clk_id` .", "question_id": 10433, "for": 19954469, "retrieval_score": 11.273172}
{"snippet": "time.CLOCK_PROCESS_CPUTIME_ID", "intent": "High-resolution per-process timer from the CPU.", "question_id": 10467, "for": 19954469, "retrieval_score": 10.232269}
{"snippet": "time.CLOCK_PROF", "intent": "High-resolution per-process timer from the CPU.", "question_id": 10468, "for": 19954469, "retrieval_score": 10.232269}
{"snippet": "base_selector.register(fileobj, events)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor .", "question_id": 8215, "for": 19954469, "retrieval_score": 9.910174}
{"snippet": "resource.RLIMIT_NICE", "intent": "The ceiling for the process\u2019s nice level (calculated as 20 - rlim_cur).", "question_id": 8088, "for": 17306755, "retrieval_score": 20.761332}
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311, "for": 17306755, "retrieval_score": 19.468096}
{"snippet": "time.asctime()", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' .", "question_id": 10430, "for": 17306755, "retrieval_score": 16.380354}
{"snippet": "errno.EL3HLT", "intent": "Level 3 halted", "question_id": 3551, "for": 17306755, "retrieval_score": 16.105307}
{"snippet": "errno.EL3RST", "intent": "Level 3 reset", "question_id": 3552, "for": 17306755, "retrieval_score": 16.105307}
{"snippet": "errno.ENOENT", "intent": "No such file or directory", "question_id": 3507, "for": 6879364, "retrieval_score": 11.085255}
{"snippet": "shutil.copy(src, dst)", "intent": "Copies the file `src` to the file or directory `dst` .", "question_id": 8318, "for": 6879364, "retrieval_score": 10.92945}
{"snippet": "os.rename(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6892, "for": 6879364, "retrieval_score": 10.632605}
{"snippet": "os.replace(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6897, "for": 6879364, "retrieval_score": 10.632605}
{"snippet": "msilib.Directory(database, cab, basedir, physical, logical, default, componentflags)", "intent": "Create a new directory in the Directory table . Files are added into the current component , and into the `cab` file . To create a directory , a base directory object needs to be specified ( can be None ) , the path to the `physical` directory , and a `logical` directory name . `default` specifies the DefaultDir slot in the directory table . `componentflags` specifies the default flags that new components get . With arguments `database`, `basedir`.", "question_id": 6091, "for": 6879364, "retrieval_score": 10.550436}
{"snippet": "MON_1 ... MON_12", "intent": "Get the name of the n-th month.", "question_id": 5361, "for": 9621388, "retrieval_score": 17.2236}
{"snippet": "ABMON_1 ... ABMON_12", "intent": "Get the abbreviated name of the n-th month.", "question_id": 5362, "for": 9621388, "retrieval_score": 16.78627}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355, "for": 9621388, "retrieval_score": 10.788913}
{"snippet": "datetime.replace(month=self.month)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `month`.", "question_id": 2286, "for": 9621388, "retrieval_score": 10.605597}
{"snippet": "calendar.monthrange(year, month)", "intent": "Returns weekday of first day of the `month` and number of days in month , for the specified `year` and month .", "question_id": 991, "for": 9621388, "retrieval_score": 9.783411}
{"snippet": "MON_1 ... MON_12", "intent": "Get the name of the n-th month.", "question_id": 5361, "for": 9621388, "retrieval_score": 15.994568}
{"snippet": "ABMON_1 ... ABMON_12", "intent": "Get the abbreviated name of the n-th month.", "question_id": 5362, "for": 9621388, "retrieval_score": 15.588445}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355, "for": 9621388, "retrieval_score": 12.592159}
{"snippet": "datetime.replace(month=self.month)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `month`.", "question_id": 2286, "for": 9621388, "retrieval_score": 11.237334}
{"snippet": "time.get_clock_info(name)", "intent": "Get information on the specified clock as a namespace object . With arguments `name`.", "question_id": 10440, "for": 9621388, "retrieval_score": 10.934624}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 716477, "retrieval_score": 21.39594}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745, "for": 716477, "retrieval_score": 19.027}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319, "for": 716477, "retrieval_score": 17.249977}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 716477, "retrieval_score": 16.633572}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 716477, "retrieval_score": 13.312543}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 716477, "retrieval_score": 14.607824}
{"snippet": "SSLContext.get_ca_certs(binary_form=False)", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "question_id": 9012, "for": 716477, "retrieval_score": 14.284364}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 716477, "retrieval_score": 13.373624}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 716477, "retrieval_score": 13.215894}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 716477, "retrieval_score": 13.157395}
{"snippet": "DAY_1 ... DAY_7", "intent": "Get the name of the n-th day of the week.", "question_id": 5359, "for": 16766643, "retrieval_score": 16.564903}
{"snippet": "ABDAY_1 ... ABDAY_7", "intent": "Get the abbreviated name of the n-th day of the week.", "question_id": 5360, "for": 16766643, "retrieval_score": 16.186289}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989, "for": 16766643, "retrieval_score": 16.093266}
{"snippet": "calendar.iterweekdays()", "intent": "Return an iterator for the week day numbers that will be used for one week .", "question_id": 911, "for": 16766643, "retrieval_score": 16.036337}
{"snippet": "date.toordinal()", "intent": "Return the proleptic Gregorian ordinal of the date , where January 1 of year 1 has ordinal 1 .", "question_id": 2238, "for": 16766643, "retrieval_score": 15.54488}
{"snippet": "DAY_1 ... DAY_7", "intent": "Get the name of the n-th day of the week.", "question_id": 5359, "for": 16766643, "retrieval_score": 16.564903}
{"snippet": "ABDAY_1 ... ABDAY_7", "intent": "Get the abbreviated name of the n-th day of the week.", "question_id": 5360, "for": 16766643, "retrieval_score": 16.186289}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989, "for": 16766643, "retrieval_score": 16.093266}
{"snippet": "calendar.iterweekdays()", "intent": "Return an iterator for the week day numbers that will be used for one week .", "question_id": 911, "for": 16766643, "retrieval_score": 16.036337}
{"snippet": "calendar.Calendar(firstweekday=0)", "intent": "Creates a Calendar object . `firstweekday` is an integer specifying the first day of the week .", "question_id": 910, "for": 16766643, "retrieval_score": 14.815784}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 452, "for": 2793324, "retrieval_score": 12.983403}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 6206, "for": 2793324, "retrieval_score": 12.983403}
{"snippet": "simple_queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 6213, "for": 2793324, "retrieval_score": 12.983403}
{"snippet": "Queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 7854, "for": 2793324, "retrieval_score": 12.983403}
{"snippet": "SimpleQueue.get()", "intent": "Remove and return an item from the queue .", "question_id": 7868, "for": 2793324, "retrieval_score": 12.983403}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 452, "for": 2793324, "retrieval_score": 12.983403}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 6206, "for": 2793324, "retrieval_score": 12.983403}
{"snippet": "simple_queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 6213, "for": 2793324, "retrieval_score": 12.983403}
{"snippet": "Queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 7854, "for": 2793324, "retrieval_score": 12.983403}
{"snippet": "SimpleQueue.get()", "intent": "Remove and return an item from the queue .", "question_id": 7868, "for": 2793324, "retrieval_score": 12.983403}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762, "for": 2793324, "retrieval_score": 14.784442}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139, "for": 2793324, "retrieval_score": 11.5736885}
{"snippet": "mailbox.clear()", "intent": "Delete all messages from the mailbox .", "question_id": 5745, "for": 2793324, "retrieval_score": 11.373984}
{"snippet": "turtle.clear()", "intent": "Delete the turtle \u2019 s drawings from the screen .", "question_id": 10968, "for": 2793324, "retrieval_score": 10.881911}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725, "for": 2793324, "retrieval_score": 10.610469}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762, "for": 2793324, "retrieval_score": 14.784442}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139, "for": 2793324, "retrieval_score": 11.5736885}
{"snippet": "mailbox.clear()", "intent": "Delete all messages from the mailbox .", "question_id": 5745, "for": 2793324, "retrieval_score": 11.373984}
{"snippet": "turtle.clear()", "intent": "Delete the turtle \u2019 s drawings from the screen .", "question_id": 10968, "for": 2793324, "retrieval_score": 10.881911}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725, "for": 2793324, "retrieval_score": 10.610469}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762, "for": 2793324, "retrieval_score": 14.784442}
{"snippet": "KeyboardInterrupt", "intent": "Raised when the user hits the interrupt key (normally Control-C or Delete).", "question_id": 3644, "for": 2793324, "retrieval_score": 12.421698}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_CHOICE", "intent": "The named element allows a choice from a number of options; this is used for content models such as (A | B | C).", "question_id": 7780, "for": 2793324, "retrieval_score": 12.289862}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139, "for": 2793324, "retrieval_score": 11.5736885}
{"snippet": "mailbox.clear()", "intent": "Delete all messages from the mailbox .", "question_id": 5745, "for": 2793324, "retrieval_score": 11.373984}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762, "for": 2793324, "retrieval_score": 14.784442}
{"snippet": "KeyboardInterrupt", "intent": "Raised when the user hits the interrupt key (normally Control-C or Delete).", "question_id": 3644, "for": 2793324, "retrieval_score": 12.421698}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_CHOICE", "intent": "The named element allows a choice from a number of options; this is used for content models such as (A | B | C).", "question_id": 7780, "for": 2793324, "retrieval_score": 12.289862}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139, "for": 2793324, "retrieval_score": 11.5736885}
{"snippet": "mailbox.clear()", "intent": "Delete all messages from the mailbox .", "question_id": 5745, "for": 2793324, "retrieval_score": 11.373984}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 17467504, "retrieval_score": 22.374426}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 17467504, "retrieval_score": 20.937632}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 17467504, "retrieval_score": 18.66358}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 17467504, "retrieval_score": 18.66358}
{"snippet": "str.lower()", "intent": "Return a copy of the string with all the cased characters 4 converted to lowercase .", "question_id": 9217, "for": 17467504, "retrieval_score": 18.294418}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 41469647, "retrieval_score": 25.893103}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 41469647, "retrieval_score": 25.540983}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 41469647, "retrieval_score": 25.531914}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 41469647, "retrieval_score": 22.56602}
{"snippet": "context.multiply(x, y)", "intent": "Return the product of `x` and `y` .", "question_id": 2554, "for": 41469647, "retrieval_score": 22.443453}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489, "for": 930397, "retrieval_score": 15.144526}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 930397, "retrieval_score": 13.449107}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 930397, "retrieval_score": 11.9198065}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 930397, "retrieval_score": 11.463315}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466, "for": 930397, "retrieval_score": 11.220941}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489, "for": 930397, "retrieval_score": 16.246056}
{"snippet": "mailcap.findmatch(caps, plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5872, "for": 930397, "retrieval_score": 13.96339}
{"snippet": "mailcap.findmatch(caps, MIMEtype, plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5864, "for": 930397, "retrieval_score": 13.699016}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 930397, "retrieval_score": 13.449107}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 930397, "retrieval_score": 13.046303}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 930397, "retrieval_score": 16.814941}
{"snippet": "MON_1 ... MON_12", "intent": "Get the name of the n-th month.", "question_id": 5361, "for": 930397, "retrieval_score": 16.385227}
{"snippet": "element.get(key)", "intent": "Gets the element attribute named `key` .", "question_id": 12484, "for": 930397, "retrieval_score": 16.16956}
{"snippet": "ABMON_1 ... ABMON_12", "intent": "Get the abbreviated name of the n-th month.", "question_id": 5362, "for": 930397, "retrieval_score": 15.97405}
{"snippet": "DAY_1 ... DAY_7", "intent": "Get the name of the n-th day of the week.", "question_id": 5359, "for": 930397, "retrieval_score": 15.261003}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489, "for": 930397, "retrieval_score": 10.249751}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 930397, "retrieval_score": 10.223201}
{"snippet": "IMAP4.getquotaroot(mailbox)", "intent": "Get the list of quota roots for the named `mailbox` .", "question_id": 4705, "for": 930397, "retrieval_score": 9.70879}
{"snippet": "SSLContext.get_ca_certs()", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates .", "question_id": 9011, "for": 930397, "retrieval_score": 9.444458}
{"snippet": "auto.end", "intent": "The index after the last invalid data in object.", "question_id": 3678, "for": 930397, "retrieval_score": 8.776983}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489, "for": 930397, "retrieval_score": 10.249751}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 930397, "retrieval_score": 10.223201}
{"snippet": "IMAP4.getquotaroot(mailbox)", "intent": "Get the list of quota roots for the named `mailbox` .", "question_id": 4705, "for": 930397, "retrieval_score": 9.70879}
{"snippet": "SSLContext.get_ca_certs()", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates .", "question_id": 9011, "for": 930397, "retrieval_score": 9.444458}
{"snippet": "auto.end", "intent": "The index after the last invalid data in object.", "question_id": 3678, "for": 930397, "retrieval_score": 8.776983}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426, "for": 31743603, "retrieval_score": 24.451496}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 31743603, "retrieval_score": 22.707031}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 31743603, "retrieval_score": 21.785625}
{"snippet": "itertools.groupby(iterable, key=None)", "intent": "Make an iterator that returns consecutive keys and groups from the `iterable` . The `key` is a function computing a key value for each element .", "question_id": 5254, "for": 31743603, "retrieval_score": 21.593445}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 31743603, "retrieval_score": 21.165844}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 31743603, "retrieval_score": 46.00944}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 31743603, "retrieval_score": 35.64231}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 31743603, "retrieval_score": 35.64231}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 31743603, "retrieval_score": 35.334717}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 31743603, "retrieval_score": 28.734657}
{"snippet": "nntplib.NNTPProtocolError", "intent": "Exception raised when a reply is received from the server that does not begin with a digit in the range 1\u20135.", "question_id": 6444, "for": 31743603, "retrieval_score": 14.455727}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 31743603, "retrieval_score": 14.327576}
{"snippet": "termios.tcgetattr(fd)", "intent": "Return a list containing the tty attributes for file descriptor `fd` , as follows : [ iflag , oflag , cflag , lflag , ispeed , ospeed , cc ] where cc is a list of the tty special characters ( each a string of length 1 , except the items with indices VMIN and VTIME , which are integers when these fields are defined ) .", "question_id": 10102, "for": 31743603, "retrieval_score": 14.10958}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426, "for": 31743603, "retrieval_score": 13.861137}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 31743603, "retrieval_score": 12.820242}
{"snippet": "turtle.clearstamps()", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10931, "for": 28134319, "retrieval_score": 15.813435}
{"snippet": "turtle.clearstamps(n=None)", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10932, "for": 28134319, "retrieval_score": 15.813435}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 28134319, "retrieval_score": 13.508411}
{"snippet": "text_wrapper.subsequent_indent", "intent": "(default: '') String that will be prepended to all lines of wrapped output except the first.", "question_id": 10333, "for": 28134319, "retrieval_score": 12.767749}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 28134319, "retrieval_score": 12.479422}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372, "for": 19454970, "retrieval_score": 15.921561}
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133, "for": 19454970, "retrieval_score": 14.954609}
{"snippet": "bound_arguments.kwargs", "intent": "A dict of keyword arguments values.", "question_id": 5005, "for": 19454970, "retrieval_score": 14.789822}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244, "for": 19454970, "retrieval_score": 14.533627}
{"snippet": "shelve.Shelf(dict, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8247, "for": 19454970, "retrieval_score": 12.157883}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 4112265, "retrieval_score": 22.374426}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 4112265, "retrieval_score": 18.360548}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175, "for": 4112265, "retrieval_score": 16.503983}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 4112265, "retrieval_score": 12.959112}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 4112265, "retrieval_score": 12.959112}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 4112265, "retrieval_score": 22.374426}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 4112265, "retrieval_score": 18.360548}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175, "for": 4112265, "retrieval_score": 16.503983}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 4112265, "retrieval_score": 12.959112}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 4112265, "retrieval_score": 12.959112}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604, "for": 3355822, "retrieval_score": 22.415148}
{"snippet": "address.username", "intent": "The username portion of the address, with all quoting removed.", "question_id": 3197, "for": 3355822, "retrieval_score": 19.268906}
{"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522, "for": 3355822, "retrieval_score": 19.055174}
{"snippet": "SMTP.login(user, password, initial_response_ok=True)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . `initial_response_ok` is passed through to auth ( ) . With arguments `user`.", "question_id": 8523, "for": 3355822, "retrieval_score": 17.172413}
{"snippet": "email.headerregistry.Address(display_name='', username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec . With arguments `display_name`.", "question_id": 3191, "for": 3355822, "retrieval_score": 16.778923}
{"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055, "for": 663171, "retrieval_score": 19.401266}
{"snippet": "locale.CODESET", "intent": "Get a string with the name of the character encoding used in the selected locale.", "question_id": 5354, "for": 663171, "retrieval_score": 17.503458}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 663171, "retrieval_score": 17.09754}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 663171, "retrieval_score": 16.900507}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 663171, "retrieval_score": 16.4602}
{"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055, "for": 663171, "retrieval_score": 15.13636}
{"snippet": "typing.Tuple", "intent": "Tuple type; Tuple[X, Y] is the type of a tuple of two items with the first item of type X and the second of type Y.", "question_id": 11335, "for": 663171, "retrieval_score": 14.389256}
{"snippet": "example.indent", "intent": "The example\u2019s indentation in the containing string, i.e., the number of space characters that precede the example\u2019s first prompt.", "question_id": 2838, "for": 663171, "retrieval_score": 14.277396}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453, "for": 663171, "retrieval_score": 13.981546}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461, "for": 663171, "retrieval_score": 13.981546}
{"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055, "for": 663171, "retrieval_score": 19.401266}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453, "for": 663171, "retrieval_score": 17.622866}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461, "for": 663171, "retrieval_score": 17.622866}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 663171, "retrieval_score": 16.900507}
{"snippet": "locale.CODESET", "intent": "Get a string with the name of the character encoding used in the selected locale.", "question_id": 5354, "for": 663171, "retrieval_score": 16.469141}
{"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055, "for": 663171, "retrieval_score": 15.13636}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453, "for": 663171, "retrieval_score": 13.981546}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461, "for": 663171, "retrieval_score": 13.981546}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976, "for": 663171, "retrieval_score": 13.961162}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218, "for": 663171, "retrieval_score": 13.851052}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218, "for": 663171, "retrieval_score": 17.212631}
{"snippet": "str.rstrip(chars)", "intent": "Return a copy of the string with trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9239, "for": 663171, "retrieval_score": 17.212631}
{"snippet": "str.strip(chars)", "intent": "Return a copy of the string with the leading and trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9250, "for": 663171, "retrieval_score": 16.61869}
{"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055, "for": 663171, "retrieval_score": 16.34374}
{"snippet": "test_case.assertMultiLineEqual(first, second, msg=None)", "intent": "Test that the multiline string `first` is equal to the string `second` . With arguments `msg`.", "question_id": 11449, "for": 663171, "retrieval_score": 15.985818}
{"snippet": "locale.nl_langinfo(option)", "intent": "Return some locale-specific information as a string . With arguments `option`.", "question_id": 5353, "for": 663171, "retrieval_score": 12.628559}
{"snippet": "message.preamble", "intent": "The format of a MIME document allows for some text between the blank line following the headers, and the first multipart boundary string.", "question_id": 3028, "for": 663171, "retrieval_score": 9.7898035}
{"snippet": "email_message.preamble", "intent": "The format of a MIME document allows for some text between the blank line following the headers, and the first multipart boundary string.", "question_id": 3308, "for": 663171, "retrieval_score": 9.7898035}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 663171, "retrieval_score": 8.703225}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 663171, "retrieval_score": 8.533597}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 663171, "retrieval_score": 29.702518}
{"snippet": "stringprep.in_table_d2(code)", "intent": "Determine whether `code` is in tableD.2 ( Characters with bidirectional property \u201c L \u201d ) .", "question_id": 9549, "for": 663171, "retrieval_score": 26.648355}
{"snippet": "oss_audio_device.mode", "intent": "The I/O mode for the file, either \"r\", \"rw\", or \"w\".", "question_id": 7200, "for": 663171, "retrieval_score": 26.265064}
{"snippet": "text_calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 935, "for": 663171, "retrieval_score": 26.224157}
{"snippet": "calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 996, "for": 663171, "retrieval_score": 26.224157}
{"snippet": "ContentHandler.startDocument()", "intent": "Receive notification of the beginning of a document .", "question_id": 12571, "for": 663171, "retrieval_score": 19.32303}
{"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931, "for": 663171, "retrieval_score": 19.13674}
{"snippet": "re.MULTILINE", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7932, "for": 663171, "retrieval_score": 19.13674}
{"snippet": "Template.prepend(cmd, kind)", "intent": "Add a new action at the beginning . With arguments `cmd`, `kind`.", "question_id": 7432, "for": 663171, "retrieval_score": 18.964146}
{"snippet": "Pattern.match(string)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object .", "question_id": 7975, "for": 663171, "retrieval_score": 17.802544}
{"snippet": "process.terminate()", "intent": "Terminate the process .", "question_id": 6186, "for": 73663, "retrieval_score": 10.743179}
{"snippet": "Popen.wait(timeout=None)", "intent": "Wait for child process to terminate . If the process does not terminate after `timeout` seconds , raise a TimeoutExpired exception .", "question_id": 9611, "for": 73663, "retrieval_score": 9.743942}
{"snippet": "process.wait()", "intent": "Wait for the child process to terminate .", "question_id": 547, "for": 73663, "retrieval_score": 9.593669}
{"snippet": "SMTP.quit()", "intent": "Terminate the SMTP session and close the connection .", "question_id": 8548, "for": 73663, "retrieval_score": 9.4443035}
{"snippet": "Popen.wait()", "intent": "Wait for child process to terminate .", "question_id": 9610, "for": 73663, "retrieval_score": 9.420849}
{"snippet": "process.terminate()", "intent": "Terminate the process .", "question_id": 6186, "for": 73663, "retrieval_score": 10.743179}
{"snippet": "Popen.wait(timeout=None)", "intent": "Wait for child process to terminate . If the process does not terminate after `timeout` seconds , raise a TimeoutExpired exception .", "question_id": 9611, "for": 73663, "retrieval_score": 9.743942}
{"snippet": "process.wait()", "intent": "Wait for the child process to terminate .", "question_id": 547, "for": 73663, "retrieval_score": 9.593669}
{"snippet": "SMTP.quit()", "intent": "Terminate the SMTP session and close the connection .", "question_id": 8548, "for": 73663, "retrieval_score": 9.4443035}
{"snippet": "Popen.wait()", "intent": "Wait for child process to terminate .", "question_id": 9610, "for": 73663, "retrieval_score": 9.420849}
{"snippet": "json_encoder.msg", "intent": "The unformatted error message.", "question_id": 5336, "for": 73663, "retrieval_score": 21.534315}
{"snippet": "system_random.msg", "intent": "The unformatted error message.", "question_id": 7965, "for": 73663, "retrieval_score": 21.534315}
{"snippet": "os.strerror(code)", "intent": "Return the error message corresponding to the error `code` in code .", "question_id": 6707, "for": 73663, "retrieval_score": 20.619278}
{"snippet": "email.errors.HeaderParseError", "intent": "Raised under some error conditions when parsing the RFC 5322 headers of a message, this class is derived from MessageParseError.", "question_id": 3075, "for": 73663, "retrieval_score": 20.525738}
{"snippet": "protocol_error.errmsg", "intent": "The error message or diagnostic string.", "question_id": 12695, "for": 73663, "retrieval_score": 20.350574}
{"snippet": "stringprep.in_table_c12(code)", "intent": "Determine whether `code` is in tableC.1.2 ( Non-ASCII space characters ) .", "question_id": 9536, "for": 10264618, "retrieval_score": 22.14356}
{"snippet": "stringprep.in_table_c22(code)", "intent": "Determine whether `code` is in tableC.2.2 ( Non-ASCII control characters ) .", "question_id": 9539, "for": 10264618, "retrieval_score": 22.14356}
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824, "for": 10264618, "retrieval_score": 21.470284}
{"snippet": "email_policy.utf8", "intent": "If False, follow RFC 5322, supporting non-ASCII characters in headers by encoding them as \u201cencoded words\u201d.", "question_id": 3429, "for": 10264618, "retrieval_score": 21.293179}
{"snippet": "nntplib.decode_header(header_str)", "intent": "Decode a header value , un-escaping any escaped non-ASCII characters . `header_str` must be a str object .", "question_id": 6502, "for": 10264618, "retrieval_score": 20.59447}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704, "for": 276052, "retrieval_score": 13.742926}
{"snippet": "tracemalloc.get_tracemalloc_memory()", "intent": "Get the memory usage in bytes of the tracemalloc module used to store traces of memory blocks .", "question_id": 10845, "for": 276052, "retrieval_score": 11.422636}
{"snippet": "OptionParser.print_usage()", "intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "question_id": 6644, "for": 276052, "retrieval_score": 11.363529}
{"snippet": "OptionParser.print_usage(file=None)", "intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "question_id": 6645, "for": 276052, "retrieval_score": 11.363529}
{"snippet": "asyncio.get_event_loop()", "intent": "Get the current event loop .", "question_id": 179, "for": 276052, "retrieval_score": 10.624367}
{"snippet": "OptionParser.print_usage()", "intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "question_id": 6644, "for": 276052, "retrieval_score": 20.899351}
{"snippet": "OptionParser.print_usage(file=None)", "intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "question_id": 6645, "for": 276052, "retrieval_score": 20.899351}
{"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037, "for": 276052, "retrieval_score": 15.700458}
{"snippet": "asyncio.get_event_loop()", "intent": "Get the current event loop .", "question_id": 179, "for": 276052, "retrieval_score": 15.254667}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036, "for": 276052, "retrieval_score": 14.534106}
{"snippet": "tracemalloc.get_tracemalloc_memory()", "intent": "Get the memory usage in bytes of the tracemalloc module used to store traces of memory blocks .", "question_id": 10845, "for": 276052, "retrieval_score": 13.365541}
{"snippet": "OptionParser.print_usage()", "intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "question_id": 6644, "for": 276052, "retrieval_score": 12.949322}
{"snippet": "OptionParser.print_usage(file=None)", "intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "question_id": 6645, "for": 276052, "retrieval_score": 12.949322}
{"snippet": "ArgumentParser.print_help()", "intent": "Print a help message , including the program usage and information about the arguments registered with the ArgumentParser .", "question_id": 105, "for": 276052, "retrieval_score": 11.856171}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777, "for": 276052, "retrieval_score": 10.357938}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714, "for": 20154303, "retrieval_score": 20.95442}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 20154303, "retrieval_score": 20.177065}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713, "for": 20154303, "retrieval_score": 19.599125}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 20154303, "retrieval_score": 19.465237}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 20154303, "retrieval_score": 15.856958}
{"snippet": "html_calendar.formatyear(theyear, width=3)", "intent": "Return a year \u2019 s calendar as an HTML table . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 961, "for": 31828240, "retrieval_score": 10.895708}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692, "for": 31828240, "retrieval_score": 10.8219795}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1693, "for": 31828240, "retrieval_score": 10.8219795}
{"snippet": "winreg.REG_MULTI_SZ", "intent": "A sequence of null-terminated strings, terminated by two null characters.", "question_id": 12180, "for": 31828240, "retrieval_score": 10.791599}
{"snippet": "html_calendar.formatyearpage(theyear, width=3)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 963, "for": 31828240, "retrieval_score": 10.695358}
{"snippet": "locale.LC_NUMERIC", "intent": "Locale category for formatting numbers.", "question_id": 5409, "for": 17895835, "retrieval_score": 16.317316}
{"snippet": "divmod(a, b)", "intent": "Take two ( non complex ) numbers as arguments and return `a` pair of numbers consisting of their quotient and remainder when using integer division . For integers , the result is the same as ( a // `b` , a % b ) .", "question_id": 4009, "for": 17895835, "retrieval_score": 12.508557}
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311, "for": 17895835, "retrieval_score": 11.800372}
{"snippet": "context.divmod(x, y)", "intent": "Divides two numbers and returns the integer part of the result . With arguments `x`, `y`.", "question_id": 2529, "for": 17895835, "retrieval_score": 11.484404}
{"snippet": "statistics.variance(data)", "intent": "Return the sample variance of `data` , an iterable of at least two real-valued numbers .", "question_id": 9139, "for": 17895835, "retrieval_score": 11.484404}
{"snippet": "datetime.fold", "intent": "In [0, 1].", "question_id": 2280, "for": 17895835, "retrieval_score": 21.896904}
{"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332, "for": 17895835, "retrieval_score": 21.896904}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 17895835, "retrieval_score": 21.568817}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989, "for": 17895835, "retrieval_score": 16.63288}
{"snippet": "sequence_matcher.ratio()", "intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "question_id": 2687, "for": 17895835, "retrieval_score": 16.10707}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508, "for": 818949, "retrieval_score": 29.179}
{"snippet": "test_result.failures", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11509, "for": 818949, "retrieval_score": 29.179}
{"snippet": "test_result.expectedFailures", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11511, "for": 818949, "retrieval_score": 29.179}
{"snippet": "smtp_channel.rcpttos", "intent": "Holds a list of strings containing the addresses identified in the \u201cRCPT TO:\u201d lines from the client.", "question_id": 8444, "for": 818949, "retrieval_score": 27.770817}
{"snippet": "test_result.skipped", "intent": "A list containing 2-tuples of TestCase instances and strings holding the reason for skipping the test.", "question_id": 11510, "for": 818949, "retrieval_score": 26.715778}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 11613284, "retrieval_score": 28.32083}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 11613284, "retrieval_score": 28.32083}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 11613284, "retrieval_score": 28.121904}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 11613284, "retrieval_score": 28.121904}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 11613284, "retrieval_score": 25.388243}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 6539881, "retrieval_score": 19.271786}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 6539881, "retrieval_score": 19.271786}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 6539881, "retrieval_score": 17.75611}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660, "for": 6539881, "retrieval_score": 17.122967}
{"snippet": "bytes.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9278, "for": 6539881, "retrieval_score": 16.29297}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 19781609, "retrieval_score": 23.239649}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714, "for": 19781609, "retrieval_score": 22.106731}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 19781609, "retrieval_score": 20.766443}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711, "for": 19781609, "retrieval_score": 20.177065}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713, "for": 19781609, "retrieval_score": 19.599125}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 9079540, "retrieval_score": 28.545637}
{"snippet": "os.getloadavg()", "intent": "Return the number of processes in the system run queue averaged over the last 1 , 5 , and 15 minutes or raises OSError if the load average was unobtainable .", "question_id": 7118, "for": 9079540, "retrieval_score": 24.750872}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 9079540, "retrieval_score": 23.061918}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 9079540, "retrieval_score": 23.061918}
{"snippet": "curses.curs_set(visibility)", "intent": "Set the cursor state . `visibility` can be set to 0 , 1 , or 2 , for invisible , normal , or very visible .", "question_id": 1926, "for": 9079540, "retrieval_score": 22.691818}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 30546889, "retrieval_score": 17.43622}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 30546889, "retrieval_score": 15.6834345}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490, "for": 30546889, "retrieval_score": 15.663496}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 30546889, "retrieval_score": 15.6213255}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 30546889, "retrieval_score": 15.6213255}
{"snippet": "re.L", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7929, "for": 18609153, "retrieval_score": 28.453686}
{"snippet": "re.LOCALE", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7930, "for": 18609153, "retrieval_score": 28.453686}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 18609153, "retrieval_score": 27.572296}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 18609153, "retrieval_score": 27.572296}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 18609153, "retrieval_score": 26.498253}
{"snippet": "winreg.HKEY_USERS", "intent": "Registry entries subordinate to this key define the default user configuration for new users on the local computer and the user configuration for the current user.", "question_id": 12158, "for": 19433630, "retrieval_score": 17.38882}
{"snippet": "winreg.HKEY_CURRENT_USER", "intent": "Registry entries subordinate to this key define the preferences of the current user.", "question_id": 12156, "for": 19433630, "retrieval_score": 16.053654}
{"snippet": "KeyboardInterrupt", "intent": "Raised when the user hits the interrupt key (normally Control-C or Delete).", "question_id": 3644, "for": 19433630, "retrieval_score": 14.9013405}
{"snippet": "TarInfo.uid", "intent": "User ID of the user who originally stored this member.", "question_id": 9987, "for": 19433630, "retrieval_score": 13.914786}
{"snippet": "TarInfo.uname", "intent": "User name.", "question_id": 9989, "for": 19433630, "retrieval_score": 13.697455}
{"snippet": "Match.pos", "intent": "The value of pos which was passed to the search() or match() method of a regex object.", "question_id": 8009, "for": 2045175, "retrieval_score": 16.323858}
{"snippet": "Match.endpos", "intent": "The value of endpos which was passed to the search() or match() method of a regex object.", "question_id": 8010, "for": 2045175, "retrieval_score": 16.323858}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 2045175, "retrieval_score": 15.9557905}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 2045175, "retrieval_score": 15.9557905}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442, "for": 2045175, "retrieval_score": 14.877296}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 6740311, "retrieval_score": 15.874882}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 6740311, "retrieval_score": 15.874882}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984, "for": 6740311, "retrieval_score": 15.871802}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982, "for": 6740311, "retrieval_score": 15.697915}
{"snippet": "bytearray(source, encoding, errors)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`, `errors`.", "question_id": 3981, "for": 6740311, "retrieval_score": 15.495721}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 41894454, "retrieval_score": 11.396042}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 41894454, "retrieval_score": 11.352001}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 41894454, "retrieval_score": 11.352001}
{"snippet": "curses.ascii.ispunct(c)", "intent": "Checks for any printable ASCII character which is not a space or an alphanumeric character . With arguments `c`.", "question_id": 1908, "for": 41894454, "retrieval_score": 10.689436}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003, "for": 41894454, "retrieval_score": 9.03601}
{"snippet": "csv.register_dialect(name, dialect, **fmtparams)", "intent": "Associate `dialect` with `name` . With arguments `**fmtparams`.", "question_id": 1684, "for": 773814, "retrieval_score": 1.8832858}
{"snippet": "subprocess.check_call(args)", "intent": "Run command with arguments . With arguments `args`.", "question_id": 9669, "for": 773814, "retrieval_score": 1.8832858}
{"snippet": "subprocess.check_call(args, stdin=None)", "intent": "Run command with arguments . With arguments `args`, `stdin`.", "question_id": 9670, "for": 773814, "retrieval_score": 1.85279}
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673, "for": 773814, "retrieval_score": 1.85279}
{"snippet": "subprocess.check_call(args, cwd=None)", "intent": "Run command with arguments . With arguments `args`, `cwd`.", "question_id": 9674, "for": 773814, "retrieval_score": 1.85279}
{"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288, "for": 4906977, "retrieval_score": 13.88158}
{"snippet": "os.unsetenv(key)", "intent": "Unset ( delete ) the environment variable named `key` .", "question_id": 6711, "for": 4906977, "retrieval_score": 13.510251}
{"snippet": "dis.haslocal", "intent": "Sequence of bytecodes that access a local variable.", "question_id": 2750, "for": 4906977, "retrieval_score": 12.815641}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 4906977, "retrieval_score": 12.506605}
{"snippet": "base_handler.wsgi_multithread", "intent": "The value to be used for the wsgi.multithread environment variable.", "question_id": 12253, "for": 4906977, "retrieval_score": 12.506605}
{"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287, "for": 4906977, "retrieval_score": 17.586153}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 4906977, "retrieval_score": 15.907512}
{"snippet": "base_handler.wsgi_multithread", "intent": "The value to be used for the wsgi.multithread environment variable.", "question_id": 12253, "for": 4906977, "retrieval_score": 15.907512}
{"snippet": "base_handler.wsgi_multiprocess", "intent": "The value to be used for the wsgi.multiprocess environment variable.", "question_id": 12254, "for": 4906977, "retrieval_score": 15.907512}
{"snippet": "base_handler.wsgi_run_once", "intent": "The value to be used for the wsgi.run_once environment variable.", "question_id": 12255, "for": 4906977, "retrieval_score": 15.907512}
{"snippet": "cgi.print_environ_usage()", "intent": "Print a list of useful ( used by CGI ) environment variables in HTML .", "question_id": 1056, "for": 4906977, "retrieval_score": 17.72152}
{"snippet": "test.support.script_helper.interpreter_requires_environment()", "intent": "Return True if sys.executable interpreter requires environment variables in order to be able to run at all .", "question_id": 10299, "for": 4906977, "retrieval_score": 14.122152}
{"snippet": "base_handler.os_environ", "intent": "The default environment variables to be included in every request\u2019s WSGI environment.", "question_id": 12256, "for": 4906977, "retrieval_score": 13.940718}
{"snippet": "test.support.EnvironmentVarGuard", "intent": "Class used to temporarily set or unset environment variables.", "question_id": 10286, "for": 4906977, "retrieval_score": 13.164562}
{"snippet": "winreg.REG_EXPAND_SZ", "intent": "Null-terminated string containing references to environment variables (%PATH%).", "question_id": 12178, "for": 4906977, "retrieval_score": 13.164562}
{"snippet": "test.support.script_helper.interpreter_requires_environment()", "intent": "Return True if sys.executable interpreter requires environment variables in order to be able to run at all .", "question_id": 10299, "for": 4906977, "retrieval_score": 14.122152}
{"snippet": "base_handler.os_environ", "intent": "The default environment variables to be included in every request\u2019s WSGI environment.", "question_id": 12256, "for": 4906977, "retrieval_score": 13.940718}
{"snippet": "test.support.EnvironmentVarGuard", "intent": "Class used to temporarily set or unset environment variables.", "question_id": 10286, "for": 4906977, "retrieval_score": 13.164562}
{"snippet": "winreg.REG_EXPAND_SZ", "intent": "Null-terminated string containing references to environment variables (%PATH%).", "question_id": 12178, "for": 4906977, "retrieval_score": 13.164562}
{"snippet": "os.path.expandvars(path)", "intent": "Return the argument with environment variables expanded . With arguments `path`.", "question_id": 7150, "for": 4906977, "retrieval_score": 12.838573}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 4906977, "retrieval_score": 21.430061}
{"snippet": "os.unsetenv(key)", "intent": "Unset ( delete ) the environment variable named `key` .", "question_id": 6711, "for": 4906977, "retrieval_score": 19.362627}
{"snippet": "os.getenv(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6668, "for": 4906977, "retrieval_score": 19.284082}
{"snippet": "os.getenv(key, default=None)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6669, "for": 4906977, "retrieval_score": 19.284082}
{"snippet": "os.getenvb(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6670, "for": 4906977, "retrieval_score": 19.284082}
{"snippet": "os.getenv(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6668, "for": 4906977, "retrieval_score": 31.17876}
{"snippet": "os.getenv(key, default=None)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6669, "for": 4906977, "retrieval_score": 31.17876}
{"snippet": "os.getenvb(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6670, "for": 4906977, "retrieval_score": 31.17876}
{"snippet": "os.getenvb(key, default=None)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6671, "for": 4906977, "retrieval_score": 31.17876}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 4906977, "retrieval_score": 28.231874}
{"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287, "for": 4906977, "retrieval_score": 22.318481}
{"snippet": "os.getenv(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6668, "for": 4906977, "retrieval_score": 20.949324}
{"snippet": "os.getenv(key, default=None)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6669, "for": 4906977, "retrieval_score": 20.949324}
{"snippet": "os.getenvb(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6670, "for": 4906977, "retrieval_score": 20.949324}
{"snippet": "os.getenvb(key, default=None)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6671, "for": 4906977, "retrieval_score": 20.949324}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 12739911, "retrieval_score": 26.274513}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 12739911, "retrieval_score": 25.034666}
{"snippet": "mailbox.iteritems()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5734, "for": 12739911, "retrieval_score": 20.847343}
{"snippet": "mailbox.items()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5735, "for": 12739911, "retrieval_score": 20.847343}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 12739911, "retrieval_score": 20.760904}
{"snippet": "context.next_toward(x, y)", "intent": "Returns the number closest to `x` , in direction towards `y` .", "question_id": 2557, "for": 9706041, "retrieval_score": 17.175869}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 9706041, "retrieval_score": 14.502514}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 9706041, "retrieval_score": 14.327576}
{"snippet": "decimal.next_toward(other)", "intent": "If the two operands are unequal , return the number closest to the first operand in the direction of the second operand . With arguments `other`.", "question_id": 2455, "for": 9706041, "retrieval_score": 13.866685}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298, "for": 9706041, "retrieval_score": 13.698591}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435, "for": 14299978, "retrieval_score": 14.989241}
{"snippet": "tree_builder.data(data)", "intent": "Adds text to the current element . `data` is a string .", "question_id": 12542, "for": 14299978, "retrieval_score": 14.572187}
{"snippet": "os.path.splitext(path)", "intent": "Split the pathname `path` into a pair ( root , ext ) such that root + ext == path , and ext is empty or begins with a period and contains at most one period .", "question_id": 7171, "for": 14299978, "retrieval_score": 14.019938}
{"snippet": "stat_result.st_fstype", "intent": "String that uniquely identifies the type of the filesystem that contains the file.", "question_id": 6941, "for": 14299978, "retrieval_score": 13.977636}
{"snippet": "element_tree.iter()", "intent": "Creates and returns a tree iterator for the root element .", "question_id": 12521, "for": 14299978, "retrieval_score": 13.606711}
{"snippet": "HTMLParser.get_starttag_text()", "intent": "Return the text of the most recently opened start tag .", "question_id": 4355, "for": 14299978, "retrieval_score": 17.810114}
{"snippet": "parser.parse(fp, headersonly=False)", "intent": "Read all the data from the text-mode file-like object `fp` , parse the resulting text , and return the root message object . With arguments `headersonly`.", "question_id": 3389, "for": 14299978, "retrieval_score": 16.57118}
{"snippet": "parser.parse(fp)", "intent": "Read all the data from the text-mode file-like object `fp` , parse the resulting text , and return the root message object .", "question_id": 3388, "for": 14299978, "retrieval_score": 16.223307}
{"snippet": "tempfile.mkstemp(text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10075, "for": 14299978, "retrieval_score": 16.215502}
{"snippet": "element_tree.iter(tag=None)", "intent": "Creates and returns a tree iterator for the root element . `tag` is the tag to look for ( default is to return all elements ) .", "question_id": 12522, "for": 14299978, "retrieval_score": 16.117033}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435, "for": 14299978, "retrieval_score": 14.55808}
{"snippet": "tree_builder.data(data)", "intent": "Adds text to the current element . `data` is a string .", "question_id": 12542, "for": 14299978, "retrieval_score": 14.13035}
{"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511, "for": 14299978, "retrieval_score": 13.319227}
{"snippet": "element_tree.getroot()", "intent": "Returns the root element for this tree .", "question_id": 12520, "for": 14299978, "retrieval_score": 13.319227}
{"snippet": "smtp_channel.seen_greeting", "intent": "Holds a string containing the greeting sent by the client in its \u201cHELO\u201d.", "question_id": 8442, "for": 14299978, "retrieval_score": 13.219389}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 12768504, "retrieval_score": 26.29024}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 12768504, "retrieval_score": 24.293789}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 12768504, "retrieval_score": 24.293789}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 12768504, "retrieval_score": 24.141672}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670, "for": 12768504, "retrieval_score": 23.832426}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363, "for": 23566515, "retrieval_score": 14.660449}
{"snippet": "turtle.Vec2D(x, y)", "intent": "A two-dimensional vector class , used as a helper class for implementing turtle graphics . With arguments `x`, `y`.", "question_id": 11167, "for": 23566515, "retrieval_score": 13.425661}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427, "for": 23566515, "retrieval_score": 12.087711}
{"snippet": "context.multiply(x, y)", "intent": "Return the product of `x` and `y` .", "question_id": 2554, "for": 23566515, "retrieval_score": 11.76789}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893, "for": 23566515, "retrieval_score": 11.457872}
{"snippet": "turtle.Vec2D(x, y)", "intent": "A two-dimensional vector class , used as a helper class for implementing turtle graphics . With arguments `x`, `y`.", "question_id": 11167, "for": 23566515, "retrieval_score": 13.425661}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427, "for": 23566515, "retrieval_score": 12.087711}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893, "for": 23566515, "retrieval_score": 11.457872}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424, "for": 23566515, "retrieval_score": 10.582018}
{"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425, "for": 23566515, "retrieval_score": 10.027588}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052, "for": 5788891, "retrieval_score": 20.105347}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057, "for": 5788891, "retrieval_score": 20.105347}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051, "for": 5788891, "retrieval_score": 16.362417}
{"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056, "for": 5788891, "retrieval_score": 16.362417}
{"snippet": "subprocess.Popen(args, executable=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9601, "for": 5788891, "retrieval_score": 12.234043}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 40682209, "retrieval_score": 21.997662}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 40682209, "retrieval_score": 21.997662}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 40682209, "retrieval_score": 21.997662}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 40682209, "retrieval_score": 20.582443}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636, "for": 40682209, "retrieval_score": 19.813194}
{"snippet": "Dialect.delimiter", "intent": "A one-character string used to separate fields.", "question_id": 1723, "for": 27457970, "retrieval_score": 16.398046}
{"snippet": "os.sep", "intent": "The character used by the operating system to separate pathname components.", "question_id": 7123, "for": 27457970, "retrieval_score": 14.998338}
{"snippet": "os.altsep", "intent": "An alternative character used by the operating system to separate pathname components, or None if only one separator character exists.", "question_id": 7124, "for": 27457970, "retrieval_score": 13.788128}
{"snippet": "os.pathsep", "intent": "The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows.", "question_id": 7126, "for": 27457970, "retrieval_score": 13.085769}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254, "for": 27457970, "retrieval_score": 12.393001}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513, "for": 27457970, "retrieval_score": 11.824064}
{"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004, "for": 27457970, "retrieval_score": 11.113807}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005, "for": 27457970, "retrieval_score": 11.113807}
{"snippet": "window.addnstr(y, x, str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2006, "for": 27457970, "retrieval_score": 11.113807}
{"snippet": "window.addnstr(y, x, str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2007, "for": 27457970, "retrieval_score": 11.113807}
{"snippet": "context.quantize(x, y)", "intent": "Returns a value equal to `x` ( rounded ) , having the exponent of `y` .", "question_id": 2563, "for": 18079029, "retrieval_score": 22.9699}
{"snippet": "UnboundLocalError", "intent": "Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.", "question_id": 3672, "for": 18079029, "retrieval_score": 20.426918}
{"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287, "for": 18079029, "retrieval_score": 19.87931}
{"snippet": "context.remainder_near(x, y)", "intent": "Returns `x` - `y` * n , where n is the integer nearest the exact value of x / y ( if the result is 0 then its sign will be the sign of x ) .", "question_id": 2566, "for": 18079029, "retrieval_score": 19.812395}
{"snippet": "sysconfig.get_config_var(name)", "intent": "Return the value of a single variable `name` .", "question_id": 9859, "for": 18079029, "retrieval_score": 19.783833}
{"snippet": "PurePath.drive", "intent": "A string representing the drive letter or name, if any:", "question_id": 7244, "for": 4131123, "retrieval_score": 11.675043}
{"snippet": "base64.b32decode(s, map01=None)", "intent": "Decode the Base32 encoded bytes-like object or ASCII string `s` and return the decoded bytes . The optional argument `map01` when not None , specifies which letter the digit 1 should be mapped to ( when map01 is not None , the digit 0 is always mapped to the letter O ) .", "question_id": 721, "for": 4131123, "retrieval_score": 10.406742}
{"snippet": "configparser.DuplicateOptionError", "intent": "Exception raised by strict parsers if a single option appears twice during reading from a single file, string or dictionary.", "question_id": 1594, "for": 4131123, "retrieval_score": 9.357807}
{"snippet": "base64.b32decode(s, casefold=False, map01=None)", "intent": "Decode the Base32 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `casefold` is a flag specifying whether a lowercase alphabet is acceptable as input . The optional argument `map01` when not None , specifies which letter the digit 1 should be mapped to ( when map01 is not None , the digit 0 is always mapped to the letter O ) .", "question_id": 722, "for": 4131123, "retrieval_score": 9.216491}
{"snippet": "curses.ascii.isupper(c)", "intent": "Checks for an ASCII uppercase letter . With arguments `c`.", "question_id": 1910, "for": 4131123, "retrieval_score": 9.065695}
{"snippet": "str.rfind(sub, start, end)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9226, "for": 12211944, "retrieval_score": 12.893337}
{"snippet": "str.rfind(sub, start)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9227, "for": 12211944, "retrieval_score": 12.893337}
{"snippet": "str.rfind(sub)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9228, "for": 12211944, "retrieval_score": 12.893337}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201, "for": 12211944, "retrieval_score": 12.430204}
{"snippet": "bytes.index(sub)", "intent": "Like find ( ) , but raise ValueError when the subsequence is not found . With arguments `sub`.", "question_id": 9297, "for": 12211944, "retrieval_score": 12.430204}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052, "for": 12211944, "retrieval_score": 15.7368145}
{"snippet": "locale.CODESET", "intent": "Get a string with the name of the character encoding used in the selected locale.", "question_id": 5354, "for": 12211944, "retrieval_score": 15.654833}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056, "for": 12211944, "retrieval_score": 15.530882}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 12211944, "retrieval_score": 15.31586}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054, "for": 12211944, "retrieval_score": 15.31586}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038, "for": 9759820, "retrieval_score": 17.727327}
{"snippet": "tracemalloc.get_traced_memory()", "intent": "Get the current size and peak size of memory blocks traced by the tracemalloc module as a tuple : ( current : int , peak : int ) .", "question_id": 10844, "for": 9759820, "retrieval_score": 16.334179}
{"snippet": "tracemalloc.get_tracemalloc_memory()", "intent": "Get the memory usage in bytes of the tracemalloc module used to store traces of memory blocks .", "question_id": 10845, "for": 9759820, "retrieval_score": 14.545721}
{"snippet": "context.keys()", "intent": "Return a list of all variables in the context object .", "question_id": 1658, "for": 9759820, "retrieval_score": 14.529089}
{"snippet": "curses.version", "intent": "A bytes object representing the current version of the module.", "question_id": 2133, "for": 9759820, "retrieval_score": 14.382288}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426, "for": 22412258, "retrieval_score": 16.725056}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 22412258, "retrieval_score": 15.466244}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733, "for": 22412258, "retrieval_score": 14.562291}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 22412258, "retrieval_score": 14.48982}
{"snippet": "cursor.fetchmany()", "intent": "Fetches the next set of rows of a query result , returning a list .", "question_id": 8845, "for": 22412258, "retrieval_score": 14.449615}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 22412258, "retrieval_score": 27.558643}
{"snippet": "cursor.fetchmany()", "intent": "Fetches the next set of rows of a query result , returning a list .", "question_id": 8845, "for": 22412258, "retrieval_score": 25.656557}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 22412258, "retrieval_score": 25.496141}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847, "for": 22412258, "retrieval_score": 25.452314}
{"snippet": "SSLContext.get_ca_certs(binary_form=False)", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "question_id": 9012, "for": 22412258, "retrieval_score": 25.066332}
{"snippet": "context.rotate(x, y)", "intent": "Returns a rotated copy of `x` , `y` times .", "question_id": 2567, "for": 23887881, "retrieval_score": 12.392}
{"snippet": "context.shift(x, y)", "intent": "Returns a shifted copy of `x` , `y` times .", "question_id": 2570, "for": 23887881, "retrieval_score": 12.392}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679, "for": 23887881, "retrieval_score": 11.1177635}
{"snippet": "context.copy()", "intent": "Return a duplicate of the context .", "question_id": 2511, "for": 23887881, "retrieval_score": 10.201049}
{"snippet": "stringprep.in_table_c5(code)", "intent": "Determine whether `code` is in tableC.5 ( Surrogate codes ) .", "question_id": 9543, "for": 23887881, "retrieval_score": 10.013792}
{"snippet": "inspect.getframeinfo(frame)", "intent": "Get information about a `frame` or traceback object .", "question_id": 5023, "for": 23887881, "retrieval_score": 15.623674}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024, "for": 23887881, "retrieval_score": 14.491074}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 23887881, "retrieval_score": 13.616098}
{"snippet": "context.rotate(x, y)", "intent": "Returns a rotated copy of `x` , `y` times .", "question_id": 2567, "for": 23887881, "retrieval_score": 13.2706175}
{"snippet": "context.shift(x, y)", "intent": "Returns a shifted copy of `x` , `y` times .", "question_id": 2570, "for": 23887881, "retrieval_score": 13.2706175}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322, "for": 34148637, "retrieval_score": 15.123041}
{"snippet": "json.JSONEncoder(default=None)", "intent": "Extensible JSON encoder for Python data structures . Supports the following objects and types by `default` :", "question_id": 5330, "for": 34148637, "retrieval_score": 14.7864685}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333, "for": 34148637, "retrieval_score": 14.7028885}
{"snippet": "json.JSONEncoder(sort_keys=False)", "intent": "Extensible JSON encoder for Python data structures . If `sort_keys` is true ( default : False ) , then the output of dictionaries will be sorted by key ; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis .", "question_id": 5327, "for": 34148637, "retrieval_score": 14.468048}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 34148637, "retrieval_score": 13.216107}
{"snippet": "json.load(fp, **kw, parse_float=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_float` , if specified , will be called with the string of every JSON float to be decoded . With arguments `**kw`.", "question_id": 5293, "for": 21104592, "retrieval_score": 9.55665}
{"snippet": "json.load(fp, **kw, parse_int=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_int` , if specified , will be called with the string of every JSON int to be decoded . With arguments `**kw`.", "question_id": 5294, "for": 21104592, "retrieval_score": 9.55665}
{"snippet": "json.load(fp, **kw)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5290, "for": 21104592, "retrieval_score": 9.223717}
{"snippet": "json.JSONDecoder(parse_float=None)", "intent": "Simple JSON decoder . `parse_float` , if specified , will be called with the string of every JSON float to be decoded .", "question_id": 5312, "for": 21104592, "retrieval_score": 8.507688}
{"snippet": "json.JSONDecoder(parse_int=None)", "intent": "Simple JSON decoder . `parse_int` , if specified , will be called with the string of every JSON int to be decoded .", "question_id": 5313, "for": 21104592, "retrieval_score": 8.507688}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 4265988, "retrieval_score": 56.998783}
{"snippet": "datetime.fold", "intent": "In [0, 1].", "question_id": 2280, "for": 4265988, "retrieval_score": 54.55834}
{"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332, "for": 4265988, "retrieval_score": 54.55834}
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324, "for": 4265988, "retrieval_score": 47.79662}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909, "for": 4265988, "retrieval_score": 47.745068}
{"snippet": "audioop.max(fragment, width)", "intent": "Return the maximum of the absolute value of all samples in a `fragment` . With arguments `width`.", "question_id": 696, "for": 15741759, "retrieval_score": 19.095594}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 15741759, "retrieval_score": 18.388178}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 15741759, "retrieval_score": 18.388178}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 15741759, "retrieval_score": 18.388178}
{"snippet": "audioop.maxpp(fragment, width)", "intent": "Return the maximum peak-peak value in the sound `fragment` . With arguments `width`.", "question_id": 697, "for": 15741759, "retrieval_score": 17.51284}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155, "for": 11303238, "retrieval_score": 12.336593}
{"snippet": "widget.start()", "intent": "Begin autoincrement mode : schedules a recurring timer event that calls Progressbar.step ( ) every `interval` milliseconds .", "question_id": 10615, "for": 11303238, "retrieval_score": 10.278974}
{"snippet": "widget.start(interval=None)", "intent": "Begin autoincrement mode : schedules a recurring timer event that calls Progressbar.step ( ) every `interval` milliseconds .", "question_id": 10616, "for": 11303238, "retrieval_score": 10.278974}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156, "for": 11303238, "retrieval_score": 10.253308}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682, "for": 11303238, "retrieval_score": 9.544362}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 11760095, "retrieval_score": 17.855347}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 11760095, "retrieval_score": 14.033325}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 11760095, "retrieval_score": 13.781546}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 11760095, "retrieval_score": 13.364143}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826, "for": 11760095, "retrieval_score": 12.044983}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 11760095, "retrieval_score": 17.855347}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 11760095, "retrieval_score": 14.033325}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 11760095, "retrieval_score": 13.781546}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 11760095, "retrieval_score": 13.364143}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826, "for": 11760095, "retrieval_score": 12.044983}
{"snippet": "base_handler.add_cgi_vars()", "intent": "Insert CGI variables for the current request into the environ attribute .", "question_id": 12252, "for": 902408, "retrieval_score": 28.79428}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 902408, "retrieval_score": 24.060257}
{"snippet": "window.insdelln(nlines)", "intent": "Insert `nlines` lines into the specified window above the current line .", "question_id": 2075, "for": 902408, "retrieval_score": 22.316063}
{"snippet": "readline.insert_text(string)", "intent": "Insert text into the line buffer at the cursor position . With arguments `string`.", "question_id": 8019, "for": 902408, "retrieval_score": 21.287281}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023, "for": 902408, "retrieval_score": 21.287281}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068, "for": 902408, "retrieval_score": 22.215485}
{"snippet": "cursor.execute(sql)", "intent": "Executes an SQL statement . With arguments `sql`.", "question_id": 8841, "for": 902408, "retrieval_score": 17.902369}
{"snippet": "cursor.execute(sql, parameters)", "intent": "Executes an SQL statement . With arguments `sql`, `parameters`.", "question_id": 8840, "for": 902408, "retrieval_score": 17.549372}
{"snippet": "connection.set_trace_callback(trace_callback)", "intent": "Registers `trace_callback` to be called for each SQL statement that is actually executed by the SQLite backend .", "question_id": 8822, "for": 902408, "retrieval_score": 12.423564}
{"snippet": "pdb.run(statement)", "intent": "Execute the `statement` ( given as a string or a code object ) under debugger control .", "question_id": 7327, "for": 902408, "retrieval_score": 12.137338}
{"snippet": "cursor.execute(sql)", "intent": "Executes an SQL statement . With arguments `sql`.", "question_id": 8841, "for": 902408, "retrieval_score": 17.902369}
{"snippet": "cursor.execute(sql, parameters)", "intent": "Executes an SQL statement . With arguments `sql`, `parameters`.", "question_id": 8840, "for": 902408, "retrieval_score": 17.549372}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068, "for": 902408, "retrieval_score": 16.830978}
{"snippet": "connection.set_trace_callback(trace_callback)", "intent": "Registers `trace_callback` to be called for each SQL statement that is actually executed by the SQLite backend .", "question_id": 8822, "for": 902408, "retrieval_score": 13.4786005}
{"snippet": "connection.iterdump()", "intent": "Returns an iterator to dump the database in an SQL text format .", "question_id": 8828, "for": 902408, "retrieval_score": 13.098483}
{"snippet": "stats.dump_stats(filename)", "intent": "Save the data loaded into the Stats object to a file named `filename` .", "question_id": 7692, "for": 29370211, "retrieval_score": 12.298473}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 29370211, "retrieval_score": 11.642427}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997, "for": 29370211, "retrieval_score": 11.0983715}
{"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300, "for": 29370211, "retrieval_score": 11.074509}
{"snippet": "stats.add(*filenames)", "intent": "This method of the Stats class accumulates additional profiling information into the current profiling object . With arguments `*filenames`.", "question_id": 7691, "for": 29370211, "retrieval_score": 11.027536}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 29370211, "retrieval_score": 13.389379}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 29370211, "retrieval_score": 12.419395}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 29370211, "retrieval_score": 12.419395}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939, "for": 29370211, "retrieval_score": 12.419395}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 29370211, "retrieval_score": 12.419395}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 29370211, "retrieval_score": 14.437139}
{"snippet": "stats.dump_stats(filename)", "intent": "Save the data loaded into the Stats object to a file named `filename` .", "question_id": 7692, "for": 29370211, "retrieval_score": 13.075829}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 29370211, "retrieval_score": 12.177087}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 29370211, "retrieval_score": 12.177087}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939, "for": 29370211, "retrieval_score": 12.177087}
{"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480, "for": 16196712, "retrieval_score": 17.557585}
{"snippet": "asyncio.wait_for(aw, timeout)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` .", "question_id": 605, "for": 16196712, "retrieval_score": 16.685038}
{"snippet": "concurrent.futures.wait(fs, timeout=None)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `timeout` can be used to control the maximum number of seconds to wait before returning .", "question_id": 1481, "for": 16196712, "retrieval_score": 16.036125}
{"snippet": "concurrent.futures.wait(fs, return_when=ALL_COMPLETED)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `return_when` indicates when this function should return .", "question_id": 1482, "for": 16196712, "retrieval_score": 15.376333}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573, "for": 16196712, "retrieval_score": 15.197871}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 9339630, "retrieval_score": 17.75611}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 9339630, "retrieval_score": 16.520227}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 9339630, "retrieval_score": 16.520227}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 9339630, "retrieval_score": 15.451729}
{"snippet": "email.utils.encode_rfc2231(s)", "intent": "Encode the string `s` according to RFC 2231 .", "question_id": 3479, "for": 9339630, "retrieval_score": 15.013779}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 1713594, "retrieval_score": 17.940475}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 1713594, "retrieval_score": 17.371155}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 1713594, "retrieval_score": 17.28661}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924, "for": 1713594, "retrieval_score": 14.660501}
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925, "for": 1713594, "retrieval_score": 14.660501}
{"snippet": "shutil.copymode(src, dst)", "intent": "Copy the permission bits from `src` to `dst` .", "question_id": 8314, "for": 123198, "retrieval_score": 24.944695}
{"snippet": "shutil.copyfile(src, dst)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst .", "question_id": 8311, "for": 123198, "retrieval_score": 23.097534}
{"snippet": "shutil.copymode(src, dst, follow_symlinks=True)", "intent": "Copy the permission bits from `src` to `dst` . If `follow_symlinks` is false , and both src and dst are symbolic links , copymode ( ) will attempt to modify the mode of dst itself ( rather than the file it points to ) .", "question_id": 8315, "for": 123198, "retrieval_score": 21.687056}
{"snippet": "shutil.copyfile(src, dst, follow_symlinks=True)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst . If `follow_symlinks` is false and src is a symbolic link , a new symbolic link will be created instead of copying the file src points to .", "question_id": 8312, "for": 123198, "retrieval_score": 20.749615}
{"snippet": "shutil.copystat(src, dst)", "intent": "Copy the permission bits , last access time , last modification time , and flags from `src` to `dst` .", "question_id": 8316, "for": 123198, "retrieval_score": 20.642355}
{"snippet": "os.path.splitext(path)", "intent": "Split the pathname `path` into a pair ( root , ext ) such that root + ext == path , and ext is empty or begins with a period and contains at most one period .", "question_id": 7171, "for": 123198, "retrieval_score": 23.885967}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948, "for": 123198, "retrieval_score": 21.116146}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586, "for": 123198, "retrieval_score": 15.48126}
{"snippet": "tempfile.mkstemp(dir=None)", "intent": "Creates a temporary file in the most secure manner possible . If `dir` is not None , the file will be created in that directory ; otherwise , a default directory is used .", "question_id": 10074, "for": 123198, "retrieval_score": 15.202921}
{"snippet": "tempfile.NamedTemporaryFile(dir=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `dir`.", "question_id": 10050, "for": 123198, "retrieval_score": 15.121567}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586, "for": 123198, "retrieval_score": 15.48126}
{"snippet": "tempfile.mkstemp(dir=None)", "intent": "Creates a temporary file in the most secure manner possible . If `dir` is not None , the file will be created in that directory ; otherwise , a default directory is used .", "question_id": 10074, "for": 123198, "retrieval_score": 15.202921}
{"snippet": "tempfile.NamedTemporaryFile(dir=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `dir`.", "question_id": 10050, "for": 123198, "retrieval_score": 15.121567}
{"snippet": "dbm.ndbm.open(filename)", "intent": "Open a dbm database and return a ndbm object . The `filename` argument is the name of the database file ( without the .dir or .pag extensions ) .", "question_id": 2383, "for": 123198, "retrieval_score": 14.592115}
{"snippet": "tempfile.TemporaryFile(suffix=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `dir` , `prefix` and `suffix` parameters have the same meaning and defaults as with mkstemp ( ) .", "question_id": 10038, "for": 123198, "retrieval_score": 13.60921}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 3590165, "retrieval_score": 16.66498}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 3590165, "retrieval_score": 16.66498}
{"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241, "for": 3590165, "retrieval_score": 16.66498}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242, "for": 3590165, "retrieval_score": 16.66498}
{"snippet": "cgi.print_environ_usage()", "intent": "Print a list of useful ( used by CGI ) environment variables in HTML .", "question_id": 1056, "for": 3590165, "retrieval_score": 16.054281}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 22702760, "retrieval_score": 24.510862}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340, "for": 22702760, "retrieval_score": 23.695265}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855, "for": 22702760, "retrieval_score": 22.721893}
{"snippet": "xmlparser.ErrorColumnNumber", "intent": "Column number at which an error occurred.", "question_id": 7750, "for": 22702760, "retrieval_score": 22.427578}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 22702760, "retrieval_score": 22.259739}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 21669374, "retrieval_score": 12.518587}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 21669374, "retrieval_score": 12.518587}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 21669374, "retrieval_score": 11.484909}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 21669374, "retrieval_score": 10.3600855}
{"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478, "for": 21669374, "retrieval_score": 10.13003}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038, "for": 40639071, "retrieval_score": 20.7057}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020, "for": 40639071, "retrieval_score": 19.262976}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 40639071, "retrieval_score": 18.839249}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 40639071, "retrieval_score": 17.889822}
{"snippet": "contextvars.Context", "intent": "A mapping of ContextVars to their values.", "question_id": 1649, "for": 40639071, "retrieval_score": 16.324736}
{"snippet": "TabError", "intent": "Raised when indentation contains an inconsistent use of tabs and spaces.", "question_id": 3667, "for": 4241757, "retrieval_score": 15.860007}
{"snippet": "binascii.b2a_qp(data, quotetabs=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded .", "question_id": 829, "for": 4241757, "retrieval_score": 13.932293}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 833, "for": 4241757, "retrieval_score": 12.66046}
{"snippet": "quopri.encode(input, output, quotetabs, header=False)", "intent": "Encode the contents of the `input` file and write the resulting quoted-printable data to the `output` file . `quotetabs` , a non-optional flag which controls whether to encode embedded spaces and tabs ; when true it encodes such embedded whitespace , and when false it leaves them unencoded . Note that spaces and tabs appearing at the end of lines are always encoded , as per RFC 1521. `header` is a flag which controls if spaces are encoded as underscores as per RFC 1522 .", "question_id": 7876, "for": 4241757, "retrieval_score": 11.475398}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, istext=True)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded .", "question_id": 832, "for": 4241757, "retrieval_score": 10.732879}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 16233593, "retrieval_score": 14.753524}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204, "for": 16233593, "retrieval_score": 13.054176}
{"snippet": "str.isprintable()", "intent": "Return true if all characters in the string are printable or the string is empty , false otherwise .", "question_id": 9210, "for": 16233593, "retrieval_score": 13.054176}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269, "for": 16233593, "retrieval_score": 12.890726}
{"snippet": "Packer.reset()", "intent": "Resets the pack buffer to the empty string .", "question_id": 12274, "for": 16233593, "retrieval_score": 12.062452}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 10020591, "retrieval_score": 20.128986}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753, "for": 10020591, "retrieval_score": 19.543112}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340, "for": 10020591, "retrieval_score": 17.658524}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 10020591, "retrieval_score": 17.290337}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 10020591, "retrieval_score": 17.290337}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704, "for": 1406145, "retrieval_score": 12.1559515}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371, "for": 1406145, "retrieval_score": 11.941776}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081, "for": 1406145, "retrieval_score": 11.457872}
{"snippet": "turtle.done()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11082, "for": 1406145, "retrieval_score": 11.457872}
{"snippet": "tracemalloc.get_object_traceback(obj)", "intent": "Get the traceback where the Python object `obj` was allocated .", "question_id": 10842, "for": 1406145, "retrieval_score": 10.002874}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 37934969, "retrieval_score": 12.54235}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 37934969, "retrieval_score": 12.54235}
{"snippet": "xml.etree.ElementTree.XMLID(text)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data .", "question_id": 12471, "for": 37934969, "retrieval_score": 12.305789}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004, "for": 37934969, "retrieval_score": 11.362202}
{"snippet": "xml.etree.ElementTree.XMLID(text, parser=None)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12472, "for": 37934969, "retrieval_score": 11.306923}
{"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287, "for": 13279399, "retrieval_score": 11.536028}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653, "for": 13279399, "retrieval_score": 11.442423}
{"snippet": "sysconfig.get_config_var(name)", "intent": "Return the value of a single variable `name` .", "question_id": 9859, "for": 13279399, "retrieval_score": 11.442423}
{"snippet": "simple_http_request_handler.do_HEAD()", "intent": "This method serves the 'HEAD ' request type : it sends the headers it would send for the equivalent GET request .", "question_id": 4664, "for": 13279399, "retrieval_score": 10.289396}
{"snippet": "sys.maxsize", "intent": "An integer giving the maximum value a variable of type Py_ssize_t can take.", "question_id": 9823, "for": 13279399, "retrieval_score": 10.123671}
{"snippet": "winreg.REG_BINARY", "intent": "Binary data in any form.", "question_id": 12174, "for": 13279399, "retrieval_score": 10.752535}
{"snippet": "NNTP.post(data)", "intent": "Post an article using the POST command . The `data` argument is either a file object opened for binary reading , or any iterable of bytes objects ( representing raw lines of the article to be posted ) .", "question_id": 6492, "for": 13279399, "retrieval_score": 9.511795}
{"snippet": "SSLSocket.get_channel_binding()", "intent": "Get channel binding data for current connection , as a bytes object .", "question_id": 8982, "for": 13279399, "retrieval_score": 8.661297}
{"snippet": "tkinter.tix.Tree", "intent": "The Tree widget can be used to display hierarchical data in a tree form.", "question_id": 10572, "for": 13279399, "retrieval_score": 8.572157}
{"snippet": "urllib.parse.parse_qs(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11669, "for": 13279399, "retrieval_score": 7.551327}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 38379453, "retrieval_score": 19.433775}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 38379453, "retrieval_score": 19.146023}
{"snippet": "SSLContext.get_ca_certs()", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates .", "question_id": 9011, "for": 38379453, "retrieval_score": 17.953426}
{"snippet": "IMAP4.getquotaroot(mailbox)", "intent": "Get the list of quota roots for the named `mailbox` .", "question_id": 4705, "for": 38379453, "retrieval_score": 17.171951}
{"snippet": "multiprocessing.get_all_start_methods()", "intent": "Returns a list of the supported start methods , the first of which is the default .", "question_id": 6223, "for": 38379453, "retrieval_score": 16.660576}
{"snippet": "NamedNodeMap.length", "intent": "The length of the attribute list.", "question_id": 12374, "for": 4659524, "retrieval_score": 17.3533}
{"snippet": "filecmp.DEFAULT_IGNORES", "intent": "List of directories ignored by dircmp by default.", "question_id": 3781, "for": 4659524, "retrieval_score": 16.405886}
{"snippet": "gc.get_objects()", "intent": "Returns a list of all objects tracked by the collector , excluding the list returned .", "question_id": 4174, "for": 4659524, "retrieval_score": 16.20168}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 4659524, "retrieval_score": 15.973713}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 4659524, "retrieval_score": 15.973713}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 33565643, "retrieval_score": 13.783807}
{"snippet": "date.resolution", "intent": "The smallest possible difference between non-equal date objects, timedelta(days=1).", "question_id": 2225, "for": 33565643, "retrieval_score": 12.114601}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266, "for": 33565643, "retrieval_score": 12.012911}
{"snippet": "Record.SetString(field, value)", "intent": "Set `field` to `value` through MsiRecordSetString ( ) .", "question_id": 6084, "for": 33565643, "retrieval_score": 11.805285}
{"snippet": "Record.SetInteger(field, value)", "intent": "Set `field` to `value` through MsiRecordSetInteger ( ) .", "question_id": 6086, "for": 33565643, "retrieval_score": 11.805285}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934, "for": 20222485, "retrieval_score": 17.806297}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935, "for": 20222485, "retrieval_score": 17.806297}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 20222485, "retrieval_score": 13.546858}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097, "for": 20222485, "retrieval_score": 13.340437}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096, "for": 20222485, "retrieval_score": 13.140387}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 14524322, "retrieval_score": 40.907814}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 14524322, "retrieval_score": 29.753368}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 14524322, "retrieval_score": 23.148157}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 14524322, "retrieval_score": 22.612928}
{"snippet": "shlex.error_leader()", "intent": "This method generates an error message leader in the format of a Unix C compiler error label ; the format is ' '' % s '' , line % d : ' , where the % s is replaced with the name of the current source file and the % d with the current input line number ( the optional arguments can be used to override these ) .", "question_id": 8290, "for": 14524322, "retrieval_score": 21.422686}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 14524322, "retrieval_score": 40.907814}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 14524322, "retrieval_score": 28.515453}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 14524322, "retrieval_score": 21.940157}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 14524322, "retrieval_score": 21.238918}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 14524322, "retrieval_score": 21.217651}
{"snippet": "os.path.commonprefix(list)", "intent": "Return the longest path prefix ( taken character-by-character ) that is a prefix of all paths in `list` .", "question_id": 7145, "for": 38426168, "retrieval_score": 17.919413}
{"snippet": "tempfile.mkstemp(suffix=None, prefix=None)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `prefix` is not None , the file name will begin with that prefix ; otherwise , a default prefix is used .", "question_id": 10076, "for": 38426168, "retrieval_score": 17.43816}
{"snippet": "ContentHandler.endPrefixMapping(prefix)", "intent": "End the scope of a prefix-URI mapping . With arguments `prefix`.", "question_id": 12574, "for": 38426168, "retrieval_score": 15.3996}
{"snippet": "tempfile.mkstemp(prefix=None, dir=None)", "intent": "Creates a temporary file in the most secure manner possible . If `prefix` is not None , the file name will begin with that prefix ; otherwise , a default prefix is used . If `dir` is not None , the file will be created in that directory ; otherwise , a default directory is used .", "question_id": 10079, "for": 38426168, "retrieval_score": 15.342435}
{"snippet": "tempfile.mkstemp(prefix=None)", "intent": "Creates a temporary file in the most secure manner possible . If `prefix` is not None , the file name will begin with that prefix ; otherwise , a default prefix is used .", "question_id": 10073, "for": 38426168, "retrieval_score": 15.275566}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 8556076, "retrieval_score": 23.36544}
{"snippet": "element.keys()", "intent": "Returns the elements attribute names as a list .", "question_id": 12487, "for": 8556076, "retrieval_score": 23.243477}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 8556076, "retrieval_score": 22.805176}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895, "for": 8556076, "retrieval_score": 21.652025}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898, "for": 8556076, "retrieval_score": 21.652025}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895, "for": 8556076, "retrieval_score": 16.723711}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898, "for": 8556076, "retrieval_score": 16.723711}
{"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325, "for": 8556076, "retrieval_score": 16.457874}
{"snippet": "heapq.nsmallest(n, iterable)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` .", "question_id": 4327, "for": 8556076, "retrieval_score": 16.457874}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 8556076, "retrieval_score": 15.986714}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 34155829, "retrieval_score": 15.696216}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138, "for": 34155829, "retrieval_score": 13.364143}
{"snippet": "math.degrees(x)", "intent": "Convert angle `x` from radians to degrees .", "question_id": 5922, "for": 34155829, "retrieval_score": 12.440778}
{"snippet": "math.radians(x)", "intent": "Convert angle `x` from degrees to radians .", "question_id": 5923, "for": 34155829, "retrieval_score": 12.440778}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 34155829, "retrieval_score": 12.435322}
{"snippet": "html_calendar.formatyear(theyear, width=3)", "intent": "Return a year \u2019 s calendar as an HTML table . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 961, "for": 42747987, "retrieval_score": 12.076898}
{"snippet": "html_calendar.formatyearpage(theyear, width=3)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 963, "for": 42747987, "retrieval_score": 11.854828}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009, "for": 42747987, "retrieval_score": 11.374017}
{"snippet": "turtle.shapetransform(t12=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11010, "for": 42747987, "retrieval_score": 11.374017}
{"snippet": "turtle.shapetransform(t21=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11011, "for": 42747987, "retrieval_score": 11.374017}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424, "for": 27516849, "retrieval_score": 17.825241}
{"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425, "for": 27516849, "retrieval_score": 16.711489}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 27516849, "retrieval_score": 13.491463}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283, "for": 27516849, "retrieval_score": 12.755562}
{"snippet": "array.itemsize", "intent": "The length in bytes of one array item in the internal representation.", "question_id": 119, "for": 27516849, "retrieval_score": 12.210634}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 41552839, "retrieval_score": 17.75611}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 41552839, "retrieval_score": 16.520227}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 41552839, "retrieval_score": 16.520227}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 41552839, "retrieval_score": 15.451729}
{"snippet": "bytes.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9278, "for": 41552839, "retrieval_score": 14.097963}
{"snippet": "charset.header_encode(string)", "intent": "Header-encode the `string` string .", "question_id": 2920, "for": 41552839, "retrieval_score": 11.261516}
{"snippet": "charset.body_encode(string)", "intent": "Body-encode the `string` string .", "question_id": 2922, "for": 41552839, "retrieval_score": 11.261516}
{"snippet": "email.utils.encode_rfc2231(s)", "intent": "Encode the string `s` according to RFC 2231 .", "question_id": 3479, "for": 41552839, "retrieval_score": 11.07423}
{"snippet": "text_io_base.encoding", "intent": "The name of the encoding used to decode the stream\u2019s bytes into strings, and to encode strings into bytes.", "question_id": 5133, "for": 41552839, "retrieval_score": 10.736344}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708, "for": 41552839, "retrieval_score": 10.459141}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 3471999, "retrieval_score": 12.07375}
{"snippet": "differ.compare(a, b)", "intent": "Compare two sequences of lines , and generate the delta ( `a` sequence of lines ) . With arguments `b`.", "question_id": 2694, "for": 3471999, "retrieval_score": 11.864331}
{"snippet": "sequence_matcher.set_seqs(a, b)", "intent": "Set the two sequences to be compared . With arguments `a`, `b`.", "question_id": 2679, "for": 3471999, "retrieval_score": 11.781803}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 3471999, "retrieval_score": 11.614795}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 3471999, "retrieval_score": 11.614795}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 3471999, "retrieval_score": 15.633513}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321, "for": 3471999, "retrieval_score": 14.51496}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 3471999, "retrieval_score": 14.503378}
{"snippet": "heapq.merge(*iterables, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `reverse` is a boolean value .", "question_id": 4323, "for": 3471999, "retrieval_score": 14.119207}
{"snippet": "heapq.merge(*iterables, key=None)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element .", "question_id": 4322, "for": 3471999, "retrieval_score": 12.957817}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797, "for": 8282553, "retrieval_score": 16.533785}
{"snippet": "turtle.clearstamps()", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10931, "for": 8282553, "retrieval_score": 15.54225}
{"snippet": "turtle.clearstamps(n=None)", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10932, "for": 8282553, "retrieval_score": 15.54225}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947, "for": 8282553, "retrieval_score": 14.477461}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227, "for": 8282553, "retrieval_score": 14.41849}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 14737222, "retrieval_score": 17.71254}
{"snippet": "re.split(pattern, string, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . With arguments `flags`.", "question_id": 7945, "for": 14737222, "retrieval_score": 16.396715}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 14737222, "retrieval_score": 15.802153}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 14737222, "retrieval_score": 15.802153}
{"snippet": "bytearray.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9355, "for": 14737222, "retrieval_score": 15.802153}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063, "for": 3506678, "retrieval_score": 16.839785}
{"snippet": "msilib.add_tables(database, module)", "intent": "Add all table content from `module` to `database` .", "question_id": 6065, "for": 3506678, "retrieval_score": 15.546783}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894, "for": 3506678, "retrieval_score": 10.517739}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 3506678, "retrieval_score": 10.514386}
{"snippet": "os.GRND_RANDOM", "intent": "If  this  bit  is  set,  then  random bytes are drawn from the /dev/random pool instead of the /dev/urandom pool.", "question_id": 7141, "for": 3506678, "retrieval_score": 10.493029}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 37878946, "retrieval_score": 30.083252}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 37878946, "retrieval_score": 29.363338}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 37878946, "retrieval_score": 29.363338}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer, lock=True)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed . If `lock` is True ( the default ) then a new lock object is created to synchronize access to the value .", "question_id": 6268, "for": 37878946, "retrieval_score": 26.991734}
{"snippet": "array.typecode", "intent": "The typecode character used to create the array.", "question_id": 118, "for": 37878946, "retrieval_score": 26.68232}
{"snippet": "base_selector.select()", "intent": "Wait until some registered file objects become ready , or the `timeout` expires .", "question_id": 8220, "for": 39353758, "retrieval_score": 19.21469}
{"snippet": "base_selector.select(timeout=None)", "intent": "Wait until some registered file objects become ready , or the `timeout` expires .", "question_id": 8221, "for": 39353758, "retrieval_score": 19.21469}
{"snippet": "process.sentinel", "intent": "A numeric handle of a system object which will become \u201cready\u201d when the process ends.", "question_id": 6185, "for": 39353758, "retrieval_score": 17.944534}
{"snippet": "os.path.normpath(path)", "intent": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a `path` that contains symbolic links .", "question_id": 7162, "for": 39353758, "retrieval_score": 17.25903}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 39353758, "retrieval_score": 16.796122}
{"snippet": "Pattern.match(string)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object .", "question_id": 7975, "for": 22229255, "retrieval_score": 26.324066}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939, "for": 22229255, "retrieval_score": 25.844276}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940, "for": 22229255, "retrieval_score": 24.506456}
{"snippet": "Pattern.match(string, pos, endpos)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "question_id": 7973, "for": 22229255, "retrieval_score": 20.612213}
{"snippet": "Pattern.match(string, pos)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "question_id": 7974, "for": 22229255, "retrieval_score": 20.612213}
{"snippet": "Pattern.match(string)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object .", "question_id": 7975, "for": 22229255, "retrieval_score": 26.324066}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939, "for": 22229255, "retrieval_score": 25.844276}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940, "for": 22229255, "retrieval_score": 24.506456}
{"snippet": "Pattern.match(string, pos, endpos)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "question_id": 7973, "for": 22229255, "retrieval_score": 20.612213}
{"snippet": "Pattern.match(string, pos)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "question_id": 7974, "for": 22229255, "retrieval_score": 20.612213}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 34410358, "retrieval_score": 17.369625}
{"snippet": "Pattern.split(string)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`.", "question_id": 7979, "for": 34410358, "retrieval_score": 15.730343}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980, "for": 34410358, "retrieval_score": 15.367755}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 34410358, "retrieval_score": 14.373796}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 34410358, "retrieval_score": 14.373796}
{"snippet": "readline.set_completer_delims(string)", "intent": "Set or get the word delimiters for completion . With arguments `string`.", "question_id": 8046, "for": 34410358, "retrieval_score": 13.960307}
{"snippet": "os.path.splitdrive(path)", "intent": "Split the pathname `path` into a pair ( drive , tail ) where drive is either a mount point or the empty string .", "question_id": 7170, "for": 34410358, "retrieval_score": 13.88505}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 34410358, "retrieval_score": 13.622924}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370, "for": 34410358, "retrieval_score": 13.31746}
{"snippet": "locale.ERA_T_FMT", "intent": "Get a format string for time.strftime() to represent a time in a locale-specific era-based way.", "question_id": 5371, "for": 34410358, "retrieval_score": 13.31746}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530, "for": 34410358, "retrieval_score": 19.280605}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529, "for": 34410358, "retrieval_score": 15.514515}
{"snippet": "timeit.Timer(stmt='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals .", "question_id": 10498, "for": 34410358, "retrieval_score": 15.07231}
{"snippet": "os.path.splitdrive(path)", "intent": "Split the pathname `path` into a pair ( drive , tail ) where drive is either a mount point or the empty string .", "question_id": 7170, "for": 34410358, "retrieval_score": 14.416721}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 34410358, "retrieval_score": 13.389379}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 13480031, "retrieval_score": 16.442717}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 13480031, "retrieval_score": 14.091091}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 13480031, "retrieval_score": 11.421688}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 13480031, "retrieval_score": 11.421688}
{"snippet": "collections.abc.MappingView", "intent": "ABCs for mapping, items, keys, and values views.", "question_id": 1326, "for": 13480031, "retrieval_score": 11.4190445}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 4644025, "retrieval_score": 12.138526}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 4644025, "retrieval_score": 12.138526}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271, "for": 4644025, "retrieval_score": 12.120848}
{"snippet": "pwd.getpwall()", "intent": "Return a list of all available password database entries , in arbitrary order .", "question_id": 7705, "for": 4644025, "retrieval_score": 11.8348675}
{"snippet": "spwd.getspall()", "intent": "Return a list of all available shadow password database entries , in arbitrary order .", "question_id": 8790, "for": 4644025, "retrieval_score": 11.562072}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247, "for": 19156472, "retrieval_score": 21.501507}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218, "for": 19156472, "retrieval_score": 20.955555}
{"snippet": "datetime.date()", "intent": "Return date object with same year , month and day .", "question_id": 2281, "for": 19156472, "retrieval_score": 20.955555}
{"snippet": "datetime.datetime(year, month, day, hour=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`.", "question_id": 2248, "for": 19156472, "retrieval_score": 19.942806}
{"snippet": "datetime.datetime(year, month, day, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `minute`.", "question_id": 2249, "for": 19156472, "retrieval_score": 19.942806}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247, "for": 19156472, "retrieval_score": 21.501507}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218, "for": 19156472, "retrieval_score": 20.955555}
{"snippet": "datetime.date()", "intent": "Return date object with same year , month and day .", "question_id": 2281, "for": 19156472, "retrieval_score": 20.955555}
{"snippet": "datetime.datetime(year, month, day, hour=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`.", "question_id": 2248, "for": 19156472, "retrieval_score": 19.942806}
{"snippet": "datetime.datetime(year, month, day, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `minute`.", "question_id": 2249, "for": 19156472, "retrieval_score": 19.942806}
{"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684, "for": 18131741, "retrieval_score": 17.638786}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415, "for": 18131741, "retrieval_score": 17.212559}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271, "for": 18131741, "retrieval_score": 17.050852}
{"snippet": "pwd.getpwall()", "intent": "Return a list of all available password database entries , in arbitrary order .", "question_id": 7705, "for": 18131741, "retrieval_score": 16.648554}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243, "for": 18131741, "retrieval_score": 16.324265}
{"snippet": "os.setpgid(pid, pgrp)", "intent": "Call the system call setpgid ( ) to set the process group id of the process with id `pid` to the process group with id `pgrp` .", "question_id": 6698, "for": 34776651, "retrieval_score": 16.07396}
{"snippet": "os.getpgid(pid)", "intent": "Return the process group id of the process with process id `pid` .", "question_id": 6680, "for": 34776651, "retrieval_score": 15.842251}
{"snippet": "stat.ST_GID", "intent": "Group id of the owner.", "question_id": 9079, "for": 34776651, "retrieval_score": 15.368952}
{"snippet": "stat.S_ISGID", "intent": "Set-group-ID bit.", "question_id": 9095, "for": 34776651, "retrieval_score": 14.443925}
{"snippet": "grp.getgrgid(gid)", "intent": "Return the group database entry for the given numeric group ID . With arguments `gid`.", "question_id": 4269, "for": 34776651, "retrieval_score": 14.246474}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 4267019, "retrieval_score": 16.11045}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 4267019, "retrieval_score": 14.980164}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976, "for": 4267019, "retrieval_score": 14.358647}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 4267019, "retrieval_score": 13.882351}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 4267019, "retrieval_score": 13.882351}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455, "for": 379906, "retrieval_score": 11.232071}
{"snippet": "time.strptime(string)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10456, "for": 379906, "retrieval_score": 11.232071}
{"snippet": "config_parser.read_string(string)", "intent": "Parse configuration data from a `string` .", "question_id": 1516, "for": 379906, "retrieval_score": 10.730953}
{"snippet": "parser.parsestr(text, headersonly=False)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) . Optional `headersonly` is as with the parse ( ) method .", "question_id": 3391, "for": 379906, "retrieval_score": 10.29795}
{"snippet": "float.fromhex(s)", "intent": "Class method to return the float represented by a hexadecimal string s. The string `s` may have leading and trailing whitespace .", "question_id": 9150, "for": 379906, "retrieval_score": 10.22266}
{"snippet": "float.fromhex(s)", "intent": "Class method to return the float represented by a hexadecimal string s. The string `s` may have leading and trailing whitespace .", "question_id": 9150, "for": 379906, "retrieval_score": 13.611889}
{"snippet": "loop.call_later(delay, callback, *args)", "intent": "Schedule `callback` to be called after the given `delay` number of seconds ( can be either an int or a float ) . With arguments `*args`.", "question_id": 193, "for": 379906, "retrieval_score": 12.814202}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000, "for": 379906, "retrieval_score": 12.379128}
{"snippet": "loop.call_at(when, callback, *args)", "intent": "Schedule `callback` to be called at the given absolute timestamp `when` ( an int or a float ) , using the same time reference as loop.time ( ) . With arguments `*args`.", "question_id": 195, "for": 379906, "retrieval_score": 12.132396}
{"snippet": "loop.call_at(when, callback, *args, context=None)", "intent": "Schedule `callback` to be called at the given absolute timestamp `when` ( an int or a float ) , using the same time reference as loop.time ( ) . With arguments `*args`, `context`.", "question_id": 196, "for": 379906, "retrieval_score": 11.92097}
{"snippet": "@abc.abstractproperty", "intent": "A subclass of the built-in property(), indicating an abstract property.", "question_id": 7, "for": 610883, "retrieval_score": 18.836576}
{"snippet": "Token.var", "intent": "A read-only property.", "question_id": 1645, "for": 610883, "retrieval_score": 17.951178}
{"snippet": "Token.old_value", "intent": "A read-only property.", "question_id": 1646, "for": 610883, "retrieval_score": 17.951178}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085, "for": 610883, "retrieval_score": 17.951178}
{"snippet": "shlex.punctuation_chars", "intent": "A read-only property.", "question_id": 8308, "for": 610883, "retrieval_score": 17.951178}
{"snippet": "@abc.abstractproperty", "intent": "A subclass of the built-in property(), indicating an abstract property.", "question_id": 7, "for": 610883, "retrieval_score": 18.836576}
{"snippet": "Token.var", "intent": "A read-only property.", "question_id": 1645, "for": 610883, "retrieval_score": 17.951178}
{"snippet": "Token.old_value", "intent": "A read-only property.", "question_id": 1646, "for": 610883, "retrieval_score": 17.951178}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085, "for": 610883, "retrieval_score": 17.951178}
{"snippet": "shlex.punctuation_chars", "intent": "A read-only property.", "question_id": 8308, "for": 610883, "retrieval_score": 17.951178}
{"snippet": "ArgumentParser.get_default(dest)", "intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "question_id": 102, "for": 610883, "retrieval_score": 24.856201}
{"snippet": "property(fget=None, fset=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value . `fset` is a function for setting an attribute value .", "question_id": 4090, "for": 610883, "retrieval_score": 23.751472}
{"snippet": "property(fget=None, fdel=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value . `fdel` is a function for deleting an attribute value .", "question_id": 4091, "for": 610883, "retrieval_score": 23.751472}
{"snippet": "property(fset=None, fdel=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value . `fdel` is a function for deleting an attribute value .", "question_id": 4093, "for": 610883, "retrieval_score": 23.751472}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086, "for": 610883, "retrieval_score": 23.453026}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983, "for": 28925267, "retrieval_score": 10.445105}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 28925267, "retrieval_score": 10.081384}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797, "for": 28925267, "retrieval_score": 10.073965}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982, "for": 28925267, "retrieval_score": 10.023323}
{"snippet": "bytearray(source, encoding, errors)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`, `errors`.", "question_id": 3981, "for": 28925267, "retrieval_score": 9.890339}
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956, "for": 748491, "retrieval_score": 22.671665}
{"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929, "for": 748491, "retrieval_score": 11.301575}
{"snippet": "tkinter.tix.ComboBox", "intent": "The ComboBox widget is similar to the combo box control in MS Windows.", "question_id": 10554, "for": 748491, "retrieval_score": 10.890862}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355, "for": 748491, "retrieval_score": 10.738449}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196, "for": 748491, "retrieval_score": 10.308907}
{"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919, "for": 19863964, "retrieval_score": 12.687317}
{"snippet": "math.copysign(x, y)", "intent": "Return a float with the magnitude ( absolute value ) of `x` but the sign of `y` .", "question_id": 5886, "for": 19863964, "retrieval_score": 11.185341}
{"snippet": "context.logb(x)", "intent": "Returns the exponent of the magnitude of the operand \u2019 s MSD . With arguments `x`.", "question_id": 2544, "for": 19863964, "retrieval_score": 10.717307}
{"snippet": "turtle.position()", "intent": "Return the turtle \u2019 s current location ( x , y ) ( as a Vec2D vector ) .", "question_id": 10936, "for": 19863964, "retrieval_score": 10.062282}
{"snippet": "turtle.pos()", "intent": "Return the turtle \u2019 s current location ( x , y ) ( as a Vec2D vector ) .", "question_id": 10937, "for": 19863964, "retrieval_score": 10.062282}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427, "for": 4476373, "retrieval_score": 20.311792}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773, "for": 4476373, "retrieval_score": 20.017408}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 4476373, "retrieval_score": 18.830332}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752, "for": 4476373, "retrieval_score": 18.319666}
{"snippet": "urllib.request.urlretrieve(url)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11881, "for": 4476373, "retrieval_score": 18.082153}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427, "for": 4476373, "retrieval_score": 20.311792}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773, "for": 4476373, "retrieval_score": 20.017408}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 4476373, "retrieval_score": 18.830332}
{"snippet": "urllib.request.urlretrieve(url, reporthook=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . With arguments `reporthook`.", "question_id": 11883, "for": 4476373, "retrieval_score": 18.484964}
{"snippet": "urllib.request.urlretrieve(url, reporthook=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . With arguments `reporthook`.", "question_id": 11887, "for": 4476373, "retrieval_score": 18.484964}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773, "for": 4476373, "retrieval_score": 21.27332}
{"snippet": "urllib.request.urlretrieve(url, reporthook=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . With arguments `reporthook`.", "question_id": 11883, "for": 4476373, "retrieval_score": 19.705187}
{"snippet": "urllib.request.urlretrieve(url, reporthook=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . With arguments `reporthook`.", "question_id": 11887, "for": 4476373, "retrieval_score": 19.705187}
{"snippet": "urllib.request.urlretrieve(url)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11881, "for": 4476373, "retrieval_score": 19.338062}
{"snippet": "urllib.request.urlretrieve(url, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11884, "for": 4476373, "retrieval_score": 19.338062}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871, "for": 4476373, "retrieval_score": 26.279978}
{"snippet": "CGIXMLRPCRequestHandler.handle_request(request_text=None)", "intent": "Handle an XML-RPC request . If `request_text` is given , it should be the POST data provided by the HTTP server , otherwise the contents of stdin will be used .", "question_id": 12748, "for": 4476373, "retrieval_score": 25.361874}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773, "for": 4476373, "retrieval_score": 23.896812}
{"snippet": "urllib.request.Request(url, data=None, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11777, "for": 4476373, "retrieval_score": 23.720888}
{"snippet": "urllib.request.urlretrieve(url, reporthook=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . With arguments `reporthook`.", "question_id": 11883, "for": 4476373, "retrieval_score": 22.058743}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105, "for": 23422542, "retrieval_score": 10.109205}
{"snippet": "slice(start, stop, step)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4106, "for": 23422542, "retrieval_score": 10.109205}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107, "for": 23422542, "retrieval_score": 10.109205}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761, "for": 23422542, "retrieval_score": 9.658782}
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440, "for": 23422542, "retrieval_score": 9.641167}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 14591855, "retrieval_score": 12.010139}
{"snippet": "Path.home()", "intent": "Return a new path object representing the user \u2019 s home directory ( as returned by os.path.expanduser ( ) with ~ construct ) :", "question_id": 7266, "for": 14591855, "retrieval_score": 11.696329}
{"snippet": "winreg.KEY_CREATE_SUB_KEY", "intent": "Required to create a subkey of a registry key.", "question_id": 12168, "for": 14591855, "retrieval_score": 11.5733385}
{"snippet": "proxy[key]", "intent": "Return the item of the underlying mapping with key key.", "question_id": 11208, "for": 14591855, "retrieval_score": 11.534636}
{"snippet": "selector_key.data", "intent": "Optional opaque data associated to this file object: for example, this could be used to store a per-client session ID.", "question_id": 8213, "for": 14591855, "retrieval_score": 11.281173}
{"snippet": "operator.indexOf(a, b)", "intent": "Return the index of the first of occurrence of `b` in `a` .", "question_id": 6577, "for": 31950612, "retrieval_score": 20.873318}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 31950612, "retrieval_score": 18.016613}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234, "for": 31950612, "retrieval_score": 16.89412}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513, "for": 31950612, "retrieval_score": 16.28147}
{"snippet": "Repr.maxstring", "intent": "Limit on the number of characters in the representation of the string.", "question_id": 8064, "for": 31950612, "retrieval_score": 16.1408}
{"snippet": "audioop.ulaw2lin(fragment, width)", "intent": "Convert sound fragments in u-LAW encoding to linearly encoded sound fragments . u-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .", "question_id": 707, "for": 10569438, "retrieval_score": 14.954542}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 10569438, "retrieval_score": 12.701446}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 10569438, "retrieval_score": 12.021464}
{"snippet": "html.entities.html5", "intent": "A dictionary that maps HTML5 named character references 1 to the equivalent Unicode character(s), e.g.", "question_id": 4342, "for": 10569438, "retrieval_score": 11.672622}
{"snippet": "ctypes.c_wchar", "intent": "Represents the C wchar_t datatype, and interprets the value as a single character unicode string.", "question_id": 1881, "for": 10569438, "retrieval_score": 10.460871}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348, "for": 10569438, "retrieval_score": 13.404917}
{"snippet": "window.encoding", "intent": "Encoding used to encode method arguments (Unicode strings and characters).", "question_id": 2047, "for": 10569438, "retrieval_score": 11.96196}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 10569438, "retrieval_score": 11.2570915}
{"snippet": "gnu_translations.gettext(message)", "intent": "Look up the `message` id in the catalog and return the corresponding message string , as a Unicode string .", "question_id": 4261, "for": 10569438, "retrieval_score": 11.131894}
{"snippet": "xml.dom.pulldom.parseString(string)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` .", "question_id": 12429, "for": 10569438, "retrieval_score": 10.963811}
{"snippet": "decimal.ROUND_05UP", "intent": "Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero.", "question_id": 2584, "for": 3505831, "retrieval_score": 13.328672}
{"snippet": "UUID.version", "intent": "The UUID version number (1 through 5, meaningful only when the variant is RFC_4122).", "question_id": 11954, "for": 3505831, "retrieval_score": 12.500733}
{"snippet": "nntplib.NNTPProtocolError", "intent": "Exception raised when a reply is received from the server that does not begin with a digit in the range 1\u20135.", "question_id": 6444, "for": 3505831, "retrieval_score": 11.705847}
{"snippet": "errno.ENOSPC", "intent": "No space left on device", "question_id": 3533, "for": 3505831, "retrieval_score": 11.540989}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216, "for": 3505831, "retrieval_score": 10.450547}
{"snippet": "mh_message.remove_sequence(sequence)", "intent": "Remove `sequence` from the list of sequences that include this message .", "question_id": 5837, "for": 7458689, "retrieval_score": 19.443851}
{"snippet": "deque.clear()", "intent": "Remove all elements from the deque leaving it with length 0 .", "question_id": 1355, "for": 7458689, "retrieval_score": 17.875275}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466, "for": 7458689, "retrieval_score": 16.714914}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 7458689, "retrieval_score": 14.599652}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 7458689, "retrieval_score": 14.599652}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855, "for": 23748995, "retrieval_score": 12.324643}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340, "for": 23748995, "retrieval_score": 9.311264}
{"snippet": "system_random.colno", "intent": "The column corresponding to pos (may be None).", "question_id": 7969, "for": 23748995, "retrieval_score": 8.583508}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 23748995, "retrieval_score": 7.7061825}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 23748995, "retrieval_score": 7.7061825}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 23748995, "retrieval_score": 22.872244}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027, "for": 23748995, "retrieval_score": 22.010164}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026, "for": 23748995, "retrieval_score": 21.603933}
{"snippet": "inspect.getinnerframes(traceback, context=1)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "question_id": 5028, "for": 23748995, "retrieval_score": 20.836374}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659, "for": 23748995, "retrieval_score": 18.300264}
{"snippet": "shlex.quotes", "intent": "Characters that will be considered string quotes.", "question_id": 8298, "for": 6275762, "retrieval_score": 13.511384}
{"snippet": "shlex.escapedquotes", "intent": "Characters in quotes that will interpret escape characters defined in escape.", "question_id": 8299, "for": 6275762, "retrieval_score": 11.8454275}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458, "for": 6275762, "retrieval_score": 11.570917}
{"snippet": "nntplib.decode_header(header_str)", "intent": "Decode a header value , un-escaping any escaped non-ASCII characters . `header_str` must be a str object .", "question_id": 6502, "for": 6275762, "retrieval_score": 9.835891}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347, "for": 6275762, "retrieval_score": 9.171202}
{"snippet": "str.islower()", "intent": "Return true if all cased characters 4 in the string are lowercase and there is at least one cased character , false otherwise .", "question_id": 9208, "for": 3668964, "retrieval_score": 20.75012}
{"snippet": "str.isupper()", "intent": "Return true if all cased characters 4 in the string are uppercase and there is at least one cased character , false otherwise .", "question_id": 9213, "for": 3668964, "retrieval_score": 20.75012}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243, "for": 3668964, "retrieval_score": 19.305624}
{"snippet": "str.split(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9244, "for": 3668964, "retrieval_score": 19.305624}
{"snippet": "str.rsplit(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9237, "for": 3668964, "retrieval_score": 16.17945}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 29218750, "retrieval_score": 23.120777}
{"snippet": "widget.selection_remove(*items)", "intent": "Remove items from the selection . With arguments `*items`.", "question_id": 10656, "for": 29218750, "retrieval_score": 18.354237}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488, "for": 29218750, "retrieval_score": 17.910908}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 29218750, "retrieval_score": 17.894873}
{"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700, "for": 29218750, "retrieval_score": 16.760653}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478, "for": 29218750, "retrieval_score": 26.826002}
{"snippet": "http.cookies.BaseCookie()", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances .", "question_id": 4579, "for": 29218750, "retrieval_score": 19.244827}
{"snippet": "widget.selection_remove(*items)", "intent": "Remove items from the selection . With arguments `*items`.", "question_id": 10656, "for": 29218750, "retrieval_score": 17.94048}
{"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700, "for": 29218750, "retrieval_score": 16.760653}
{"snippet": "http.cookies.BaseCookie(input)", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "question_id": 4578, "for": 29218750, "retrieval_score": 16.190704}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 6714826, "retrieval_score": 22.392431}
{"snippet": "str.encode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9188, "for": 6714826, "retrieval_score": 18.347486}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 6714826, "retrieval_score": 17.663654}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 6714826, "retrieval_score": 17.663654}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN", "intent": "Raised when an input byte could not properly be assigned to a character; for example, a NUL byte (value 0) in a UTF-8 input stream.", "question_id": 7793, "for": 6714826, "retrieval_score": 17.332762}
{"snippet": "os.getpgid(pid)", "intent": "Return the process group id of the process with process id `pid` .", "question_id": 6680, "for": 1064335, "retrieval_score": 29.805342}
{"snippet": "os.setpgid(pid, pgrp)", "intent": "Call the system call setpgid ( ) to set the process group id of the process with id `pid` to the process group with id `pgrp` .", "question_id": 6698, "for": 1064335, "retrieval_score": 26.454857}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385, "for": 1064335, "retrieval_score": 21.511917}
{"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108, "for": 1064335, "retrieval_score": 21.511917}
{"snippet": "os.sched_getaffinity(pid)", "intent": "Return the set of CPUs the process with PID `pid` ( or the current process if zero ) is restricted to .", "question_id": 7114, "for": 1064335, "retrieval_score": 21.052258}
{"snippet": "winreg.REG_MULTI_SZ", "intent": "A sequence of null-terminated strings, terminated by two null characters.", "question_id": 12180, "for": 14247586, "retrieval_score": 11.931537}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038, "for": 14247586, "retrieval_score": 11.837113}
{"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957, "for": 14247586, "retrieval_score": 11.281592}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010, "for": 14247586, "retrieval_score": 10.860001}
{"snippet": "inspect.getfullargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5011, "for": 14247586, "retrieval_score": 10.860001}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170, "for": 41133414, "retrieval_score": 27.647175}
{"snippet": "urllib.parse.quote_plus(string)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL .", "question_id": 11713, "for": 41133414, "retrieval_score": 19.894764}
{"snippet": "window.insnstr(str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "question_id": 2078, "for": 41133414, "retrieval_score": 19.658752}
{"snippet": "window.insnstr(str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`, `attr`.", "question_id": 2077, "for": 41133414, "retrieval_score": 19.381742}
{"snippet": "unicodedata.decomposition(chr)", "intent": "Returns the character decomposition mapping assigned to the character `chr` as string .", "question_id": 11354, "for": 41133414, "retrieval_score": 19.284506}
{"snippet": "xml.etree.ElementTree.ParseError", "intent": "XML parse error, raised by the various parsing methods in this module when parsing fails.", "question_id": 12561, "for": 1179305, "retrieval_score": 20.744781}
{"snippet": "xmlparser.EndDoctypeDeclHandler()", "intent": "Called when Expat is done parsing the document type declaration .", "question_id": 7757, "for": 1179305, "retrieval_score": 16.119453}
{"snippet": "xmlparser.ParseFile(file)", "intent": "Parse XML data reading from the object `file` .", "question_id": 7734, "for": 1179305, "retrieval_score": 15.086972}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 1179305, "retrieval_score": 12.815938}
{"snippet": "xmlrpc.client.dumps(params, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12702, "for": 1179305, "retrieval_score": 12.707551}
{"snippet": "sys.exit()", "intent": "Exit from Python .", "question_id": 9789, "for": 3376534, "retrieval_score": 8.052653}
{"snippet": "process.exitcode", "intent": "The child\u2019s exit code.", "question_id": 6183, "for": 3376534, "retrieval_score": 7.818453}
{"snippet": "cgi.test()", "intent": "Robust test CGI script , usable as main program .", "question_id": 1052, "for": 3376534, "retrieval_score": 7.6009207}
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` .", "question_id": 10308, "for": 3376534, "retrieval_score": 7.407923}
{"snippet": "completed_process.returncode", "intent": "Exit status of the child process.", "question_id": 9579, "for": 3376534, "retrieval_score": 7.3886724}
{"snippet": "window.bkgd(ch, attr)", "intent": "Set the background property of the window to the character `ch` , with attributes `attr` .", "question_id": 2015, "for": 19153328, "retrieval_score": 14.299456}
{"snippet": "window.bkgd(ch)", "intent": "Set the background property of the window to the character `ch` , with attributes `attr` .", "question_id": 2016, "for": 19153328, "retrieval_score": 14.299456}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079, "for": 19153328, "retrieval_score": 12.815047}
{"snippet": "email.headerregistry.Group()", "intent": "The class used to represent an address group .", "question_id": 3201, "for": 19153328, "retrieval_score": 11.445961}
{"snippet": "errno.EADDRNOTAVAIL", "intent": "Cannot assign requested address", "question_id": 3604, "for": 19153328, "retrieval_score": 10.960748}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710, "for": 28431359, "retrieval_score": 15.584419}
{"snippet": "base64.b32decode(s)", "intent": "Decode the Base32 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 719, "for": 28431359, "retrieval_score": 15.584419}
{"snippet": "base64.b16decode(s)", "intent": "Decode the Base16 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 724, "for": 28431359, "retrieval_score": 15.584419}
{"snippet": "base64.a85decode(b)", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes .", "question_id": 736, "for": 28431359, "retrieval_score": 15.584419}
{"snippet": "base64.b85decode(b)", "intent": "Decode the base85-encoded bytes-like object or ASCII string `b` and return the decoded bytes .", "question_id": 746, "for": 28431359, "retrieval_score": 15.584419}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 28431359, "retrieval_score": 13.126247}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710, "for": 28431359, "retrieval_score": 13.117157}
{"snippet": "base64.b32decode(s)", "intent": "Decode the Base32 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 719, "for": 28431359, "retrieval_score": 13.117157}
{"snippet": "base64.b16decode(s)", "intent": "Decode the Base16 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 724, "for": 28431359, "retrieval_score": 13.117157}
{"snippet": "base64.a85decode(b)", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes .", "question_id": 736, "for": 28431359, "retrieval_score": 13.117157}
{"snippet": "SMTP.starttls(keyfile=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext .", "question_id": 8527, "for": 14793098, "retrieval_score": 10.072275}
{"snippet": "SMTP.starttls(certfile=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext .", "question_id": 8528, "for": 14793098, "retrieval_score": 10.072275}
{"snippet": "SMTP.starttls(keyfile=None, certfile=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext .", "question_id": 8530, "for": 14793098, "retrieval_score": 10.072275}
{"snippet": "netrc.hosts", "intent": "Dictionary mapping host names to (login, account, password) tuples.", "question_id": 6389, "for": 14793098, "retrieval_score": 9.895752}
{"snippet": "webbrowser.register(name, constructor)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12110, "for": 14793098, "retrieval_score": 8.717834}
{"snippet": "Path.write_bytes(data)", "intent": "Open the file pointed to in bytes mode , write `data` to it , and close the file :", "question_id": 7322, "for": 5285181, "retrieval_score": 20.27568}
{"snippet": "Path.write_text(data)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file :", "question_id": 7323, "for": 5285181, "retrieval_score": 20.27568}
{"snippet": "lzma.LZMAFile()", "intent": "Open an LZMA-compressed file in binary `mode` .", "question_id": 5666, "for": 5285181, "retrieval_score": 19.685482}
{"snippet": "lzma.LZMAFile(mode=\"r\")", "intent": "Open an LZMA-compressed file in binary `mode` .", "question_id": 5668, "for": 5285181, "retrieval_score": 19.685482}
{"snippet": "Path.write_text(data, encoding=None)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file : With arguments `encoding`.", "question_id": 7324, "for": 5285181, "retrieval_score": 19.104797}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463, "for": 627435, "retrieval_score": 13.281182}
{"snippet": "set.pop()", "intent": "Remove and return an arbitrary element from the set .", "question_id": 9465, "for": 627435, "retrieval_score": 12.269502}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464, "for": 627435, "retrieval_score": 11.965677}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 627435, "retrieval_score": 11.755211}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 627435, "retrieval_score": 11.755211}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 627435, "retrieval_score": 14.902272}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 627435, "retrieval_score": 14.766995}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 627435, "retrieval_score": 14.766995}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463, "for": 627435, "retrieval_score": 13.281182}
{"snippet": "set.pop()", "intent": "Remove and return an arbitrary element from the set .", "question_id": 9465, "for": 627435, "retrieval_score": 12.269502}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463, "for": 627435, "retrieval_score": 13.281182}
{"snippet": "set.pop()", "intent": "Remove and return an arbitrary element from the set .", "question_id": 9465, "for": 627435, "retrieval_score": 12.269502}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464, "for": 627435, "retrieval_score": 11.965677}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368, "for": 627435, "retrieval_score": 11.755211}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633, "for": 627435, "retrieval_score": 11.755211}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 627435, "retrieval_score": 25.856512}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 627435, "retrieval_score": 25.856512}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 627435, "retrieval_score": 23.595385}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360, "for": 627435, "retrieval_score": 20.473215}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361, "for": 627435, "retrieval_score": 20.473215}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573, "for": 627435, "retrieval_score": 25.856512}
{"snippet": "operator.__delitem__(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6574, "for": 627435, "retrieval_score": 25.856512}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 627435, "retrieval_score": 23.595385}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360, "for": 627435, "retrieval_score": 20.473215}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361, "for": 627435, "retrieval_score": 20.473215}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745, "for": 8440117, "retrieval_score": 11.008154}
{"snippet": "PrettyPrinter.pprint(object)", "intent": "Print the formatted representation of `object` on the configured stream , followed by a newline .", "question_id": 7657, "for": 8440117, "retrieval_score": 10.934025}
{"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103, "for": 8440117, "retrieval_score": 10.6931}
{"snippet": "symbol_table.get_symbols()", "intent": "Return a list of Symbol instances for names in the table .", "question_id": 9744, "for": 8440117, "retrieval_score": 10.210143}
{"snippet": "gc.DEBUG_COLLECTABLE", "intent": "Print information on collectable objects found.", "question_id": 4190, "for": 8440117, "retrieval_score": 10.187775}
{"snippet": "symbol.is_declared_global()", "intent": "Return True if the symbol is declared global with a global statement .", "question_id": 9759, "for": 8440117, "retrieval_score": 9.410322}
{"snippet": "locale.CRNCYSTR", "intent": "Get the currency symbol, preceded by \u201c-\u201d if the symbol should appear before the value, \u201c+\u201d if the symbol should appear after the value, or \u201c.\u201d if the symbol should replace the radix character.", "question_id": 5367, "for": 8440117, "retrieval_score": 9.366077}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745, "for": 8440117, "retrieval_score": 8.900503}
{"snippet": "symbol.is_parameter()", "intent": "Return True if the symbol is a parameter .", "question_id": 9757, "for": 8440117, "retrieval_score": 8.900503}
{"snippet": "symbol.get_name()", "intent": "Return the symbol \u2019 s name .", "question_id": 9754, "for": 8440117, "retrieval_score": 8.702024}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 18022241, "retrieval_score": 39.693024}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 18022241, "retrieval_score": 31.029627}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 18022241, "retrieval_score": 30.41597}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045, "for": 18022241, "retrieval_score": 29.580982}
{"snippet": "NNTP.getcapabilities()", "intent": "Return the RFC 3977 capabilities advertised by the server , as a dict instance mapping capability names to ( possibly empty ) lists of values .", "question_id": 6450, "for": 18022241, "retrieval_score": 29.515196}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156, "for": 14657241, "retrieval_score": 15.721007}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 14657241, "retrieval_score": 14.7738285}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025, "for": 14657241, "retrieval_score": 14.144896}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027, "for": 14657241, "retrieval_score": 13.53668}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 14657241, "retrieval_score": 13.436213}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 3877491, "retrieval_score": 13.214618}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 3877491, "retrieval_score": 13.078173}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 3877491, "retrieval_score": 12.710983}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040, "for": 3877491, "retrieval_score": 12.710983}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 3877491, "retrieval_score": 11.572665}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 3877491, "retrieval_score": 17.65475}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 3877491, "retrieval_score": 14.421249}
{"snippet": "turtle.clearstamps()", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10931, "for": 3877491, "retrieval_score": 12.829634}
{"snippet": "turtle.clearstamps(n=None)", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10932, "for": 3877491, "retrieval_score": 12.829634}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 3877491, "retrieval_score": 12.765957}
{"snippet": "cursor.rowcount", "intent": "Although the Cursor class of the sqlite3 module implements this attribute, the database engine\u2019s own support for the determination of \u201crows affected\u201d/\u201drows selected\u201d is quirky.", "question_id": 8849, "for": 19490064, "retrieval_score": 29.6212}
{"snippet": "cursor.arraysize", "intent": "Read/write attribute that controls the number of rows returned by fetchmany().", "question_id": 8851, "for": 19490064, "retrieval_score": 28.72466}
{"snippet": "connection.total_changes", "intent": "Returns the total number of database rows that have been modified, inserted, or deleted since the database connection was opened.", "question_id": 8827, "for": 19490064, "retrieval_score": 28.229212}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846, "for": 19490064, "retrieval_score": 27.979889}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847, "for": 19490064, "retrieval_score": 26.220814}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 18461623, "retrieval_score": 16.304}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 18461623, "retrieval_score": 16.304}
{"snippet": "set | other | ...", "intent": "Return a new set with elements from the set and all others.", "question_id": 9446, "for": 18461623, "retrieval_score": 14.704765}
{"snippet": "set.union(*others)", "intent": "Return a new set with elements from the set and all others . With arguments `*others`.", "question_id": 9445, "for": 18461623, "retrieval_score": 13.9133835}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 18461623, "retrieval_score": 12.829637}
{"snippet": "memory_bio.write_eof()", "intent": "Write an EOF marker to the memory BIO .", "question_id": 9059, "for": 19948732, "retrieval_score": 11.12093}
{"snippet": "Token.MISSING", "intent": "A marker object used by Token.old_value.", "question_id": 1647, "for": 19948732, "retrieval_score": 10.358235}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828, "for": 19948732, "retrieval_score": 10.2233515}
{"snippet": "signature.empty", "intent": "A special class-level marker to specify absence of a return annotation.", "question_id": 4983, "for": 19948732, "retrieval_score": 10.071376}
{"snippet": "parameter.empty", "intent": "A special class-level marker to specify absence of default values and annotations.", "question_id": 4997, "for": 19948732, "retrieval_score": 9.839229}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640, "for": 12808420, "retrieval_score": 17.367384}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235, "for": 12808420, "retrieval_score": 16.24705}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 12808420, "retrieval_score": 16.24705}
{"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241, "for": 12808420, "retrieval_score": 16.24705}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242, "for": 12808420, "retrieval_score": 16.24705}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 10805589, "retrieval_score": 27.129656}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355, "for": 10805589, "retrieval_score": 20.331543}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 10805589, "retrieval_score": 20.216496}
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311, "for": 10805589, "retrieval_score": 18.169544}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 10805589, "retrieval_score": 17.611408}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 35561743, "retrieval_score": 15.290414}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 35561743, "retrieval_score": 15.261795}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 35561743, "retrieval_score": 13.878812}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 35561743, "retrieval_score": 13.274264}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 35561743, "retrieval_score": 12.455594}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750, "for": 208894, "retrieval_score": 14.439919}
{"snippet": "email.encoders.encode_base64(msg)", "intent": "Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64 . With arguments `msg`.", "question_id": 3070, "for": 208894, "retrieval_score": 13.445234}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708, "for": 208894, "retrieval_score": 13.034299}
{"snippet": "base64.standard_b64encode(s)", "intent": "Encode bytes-like object `s` using the standard Base64 alphabet and return the encoded bytes .", "question_id": 714, "for": 208894, "retrieval_score": 12.45989}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 208894, "retrieval_score": 11.438964}
{"snippet": "window.insnstr(str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "question_id": 2078, "for": 2094176, "retrieval_score": 17.406748}
{"snippet": "window.insnstr(str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`, `attr`.", "question_id": 2077, "for": 2094176, "retrieval_score": 17.140675}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223, "for": 2094176, "retrieval_score": 16.391964}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234, "for": 2094176, "retrieval_score": 16.391964}
{"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080, "for": 2094176, "retrieval_score": 14.49418}
{"snippet": "window.insstr(str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`.", "question_id": 2082, "for": 2094176, "retrieval_score": 13.30994}
{"snippet": "Dialect.quotechar", "intent": "A one-character string used to quote fields containing special characters, such as the delimiter or quotechar, or which contain new-line characters.", "question_id": 1727, "for": 2094176, "retrieval_score": 13.297356}
{"snippet": "window.insstr(str, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`, `attr`.", "question_id": 2081, "for": 2094176, "retrieval_score": 13.091045}
{"snippet": "window.insnstr(str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "question_id": 2078, "for": 2094176, "retrieval_score": 12.476612}
{"snippet": "window.insnstr(str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`, `attr`.", "question_id": 2077, "for": 2094176, "retrieval_score": 12.284746}
{"snippet": "non_callable_magic_mock.code", "intent": "An HTTP status code as defined in RFC 2616.", "question_id": 11661, "for": 12476452, "retrieval_score": 17.918713}
{"snippet": "base_handler.error_status", "intent": "The HTTP status used for error responses.", "question_id": 12263, "for": 12476452, "retrieval_score": 13.876036}
{"snippet": "HTTPResponse.status", "intent": "Status code returned by server.", "question_id": 4464, "for": 12476452, "retrieval_score": 13.317083}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053, "for": 12476452, "retrieval_score": 12.61427}
{"snippet": "http.client.responses", "intent": "This dictionary maps the HTTP 1.1 status codes to the W3C names.", "question_id": 4426, "for": 12476452, "retrieval_score": 12.239073}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 7571635, "retrieval_score": 12.101342}
{"snippet": "stringprep.in_table_c7(code)", "intent": "Determine whether `code` is in tableC.7 ( Inappropriate for canonical representation ) .", "question_id": 9545, "for": 7571635, "retrieval_score": 11.200114}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800, "for": 7571635, "retrieval_score": 11.084859}
{"snippet": "faulthandler.is_enabled()", "intent": "Check if the fault handler is enabled .", "question_id": 3721, "for": 7571635, "retrieval_score": 11.072291}
{"snippet": "lzma.is_check_supported(check)", "intent": "Returns true if the given integrity `check` is supported on this system .", "question_id": 5722, "for": 7571635, "retrieval_score": 9.7660885}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347, "for": 7571635, "retrieval_score": 12.101342}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800, "for": 7571635, "retrieval_score": 11.919963}
{"snippet": "faulthandler.is_enabled()", "intent": "Check if the fault handler is enabled .", "question_id": 3721, "for": 7571635, "retrieval_score": 11.072291}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api)", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10267, "for": 7571635, "retrieval_score": 10.076183}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268, "for": 7571635, "retrieval_score": 10.076183}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 13438574, "retrieval_score": 15.661245}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 13438574, "retrieval_score": 15.661245}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 13438574, "retrieval_score": 13.345346}
{"snippet": "mailbox.iterkeys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5729, "for": 13438574, "retrieval_score": 11.262759}
{"snippet": "mailbox.keys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5730, "for": 13438574, "retrieval_score": 11.262759}
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106, "for": 15985339, "retrieval_score": 16.754198}
{"snippet": "controller.open_new(url)", "intent": "Open `url` in a new window of the browser handled by this controller , if possible , otherwise , open url in the only browser window .", "question_id": 12118, "for": 15985339, "retrieval_score": 16.099356}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103, "for": 15985339, "retrieval_score": 15.96214}
{"snippet": "webbrowser.open(url)", "intent": "Display `url` using the default browser .", "question_id": 12102, "for": 15985339, "retrieval_score": 14.841232}
{"snippet": "controller.open(url)", "intent": "Display `url` using the browser handled by this controller .", "question_id": 12114, "for": 15985339, "retrieval_score": 13.710716}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351, "for": 4998629, "retrieval_score": 21.65656}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 4998629, "retrieval_score": 21.65656}
{"snippet": "bytearray.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9355, "for": 4998629, "retrieval_score": 21.65656}
{"snippet": "bytearray.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9356, "for": 4998629, "retrieval_score": 21.65656}
{"snippet": "bytes.split()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9363, "for": 4998629, "retrieval_score": 21.65656}
{"snippet": "nntplib.decode_header(header_str)", "intent": "Decode a header value , un-escaping any escaped non-ASCII characters . `header_str` must be a str object .", "question_id": 6502, "for": 5555063, "retrieval_score": 25.065435}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513, "for": 5555063, "retrieval_score": 10.736679}
{"snippet": "str.lstrip()", "intent": "Return a copy of the string with leading characters removed .", "question_id": 9219, "for": 5555063, "retrieval_score": 10.295683}
{"snippet": "str.rstrip()", "intent": "Return a copy of the string with trailing characters removed .", "question_id": 9240, "for": 5555063, "retrieval_score": 10.295683}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218, "for": 5555063, "retrieval_score": 10.274885}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 9637838, "retrieval_score": 26.885277}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 9637838, "retrieval_score": 17.162724}
{"snippet": "base_http_request_handler.date_time_string()", "intent": "Returns the date and time given by `timestamp` ( which must be None or in the format returned by time.time ( ) ) , formatted for a message header .", "question_id": 4655, "for": 9637838, "retrieval_score": 16.409033}
{"snippet": "base_http_request_handler.date_time_string(timestamp=None)", "intent": "Returns the date and time given by `timestamp` ( which must be None or in the format returned by time.time ( ) ) , formatted for a message header .", "question_id": 4656, "for": 9637838, "retrieval_score": 16.409033}
{"snippet": "date.isoformat()", "intent": "Return a string representing the date in ISO 8601 format , \u2018 YYYY-MM-DD \u2019 .", "question_id": 2242, "for": 9637838, "retrieval_score": 15.306684}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061, "for": 9637838, "retrieval_score": 14.612674}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 9637838, "retrieval_score": 14.361959}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 9637838, "retrieval_score": 14.173558}
{"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478, "for": 9637838, "retrieval_score": 11.568691}
{"snippet": "locale.atoi(string)", "intent": "Converts a `string` to an integer , following the LC_NUMERIC conventions .", "question_id": 5403, "for": 9637838, "retrieval_score": 11.386399}
{"snippet": "email_message.replace_header(_name, _value)", "intent": "Replace a header . Replace the first header found in the message that matches `_name` , retaining header order and field name case of the original header . With arguments `_value`.", "question_id": 3254, "for": 29386995, "retrieval_score": 16.463375}
{"snippet": "HTTPResponse.getheader(name)", "intent": "Return the value of the header `name` , or `default` if there is no header matching name .", "question_id": 4458, "for": 29386995, "retrieval_score": 15.951612}
{"snippet": "HTTPResponse.getheader(name, default=None)", "intent": "Return the value of the header `name` , or `default` if there is no header matching name .", "question_id": 4459, "for": 29386995, "retrieval_score": 15.951612}
{"snippet": "base_http_request_handler.error_content_type", "intent": "Specifies the Content-Type HTTP header of error responses sent to the client.", "question_id": 4630, "for": 29386995, "retrieval_score": 15.560058}
{"snippet": "message.replace_header(_name, _value)", "intent": "Replace a header . Replace the first header found in the message that matches `_name` , retaining header order and field name case . With arguments `_value`.", "question_id": 2977, "for": 29386995, "retrieval_score": 15.330078}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 27868020, "retrieval_score": 21.976112}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 27868020, "retrieval_score": 21.976112}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 27868020, "retrieval_score": 21.976112}
{"snippet": "parse_error.position", "intent": "A tuple of line, column numbers, specifying where the error occurred.", "question_id": 12563, "for": 27868020, "retrieval_score": 21.220383}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636, "for": 27868020, "retrieval_score": 20.720673}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636, "for": 27868020, "retrieval_score": 24.256954}
{"snippet": "parse_error.position", "intent": "A tuple of line, column numbers, specifying where the error occurred.", "question_id": 12563, "for": 27868020, "retrieval_score": 21.220383}
{"snippet": "Locator.getColumnNumber()", "intent": "Return the column number where the current event begins .", "question_id": 12630, "for": 27868020, "retrieval_score": 20.005243}
{"snippet": "html_diff.__init__(wrapcolumn=None)", "intent": "Initializes instance of HtmlDiff . `wrapcolumn` is an optional keyword to specify column number where lines are broken and wrapped , defaults to None where lines are not wrapped .", "question_id": 2600, "for": 27868020, "retrieval_score": 18.8236}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518, "for": 27868020, "retrieval_score": 18.547787}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636, "for": 27868020, "retrieval_score": 14.733309}
{"snippet": "context.remainder_near(x, y)", "intent": "Returns `x` - `y` * n , where n is the integer nearest the exact value of x / y ( if the result is 0 then its sign will be the sign of x ) .", "question_id": 2566, "for": 27868020, "retrieval_score": 13.626637}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357, "for": 27868020, "retrieval_score": 12.60564}
{"snippet": "math.ceil(x)", "intent": "Return the ceiling of `x` , the smallest integer greater than or equal to x .", "question_id": 5885, "for": 27868020, "retrieval_score": 12.470463}
{"snippet": "math.floor(x)", "intent": "Return the floor of `x` , the largest integer less than or equal to x .", "question_id": 5889, "for": 27868020, "retrieval_score": 12.470463}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164, "for": 12323403, "retrieval_score": 16.581264}
{"snippet": "xmlparser.StartNamespaceDeclHandler(prefix, uri)", "intent": "Called when an element contains a namespace declaration . With arguments `prefix`, `uri`.", "question_id": 7767, "for": 12323403, "retrieval_score": 13.273325}
{"snippet": "ContentHandler.endElement(name)", "intent": "Signals the end of an element in non-namespace mode . The `name` parameter contains the name of the element type , just as with the startElement ( ) event .", "question_id": 12576, "for": 12323403, "retrieval_score": 12.939963}
{"snippet": "dbm.gnu.error", "intent": "Raised on dbm.gnu-specific errors, such as I/O errors.", "question_id": 2370, "for": 12323403, "retrieval_score": 12.8183155}
{"snippet": "dbm.ndbm.error", "intent": "Raised on dbm.ndbm-specific errors, such as I/O errors.", "question_id": 2379, "for": 12323403, "retrieval_score": 12.8183155}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003, "for": 14301913, "retrieval_score": 16.569353}
{"snippet": "Match.start()", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8004, "for": 14301913, "retrieval_score": 16.569353}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005, "for": 14301913, "retrieval_score": 16.569353}
{"snippet": "Match.end()", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8006, "for": 14301913, "retrieval_score": 16.569353}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105, "for": 14301913, "retrieval_score": 12.75529}
{"snippet": "SMTP.sendmail(from_addr, to_addrs, msg)", "intent": "Send mail . If SMTPUTF8 is included in mail_options , and the server supports it , `from_addr` and `to_addrs` may contain non-ASCII characters . `msg` may be a string containing characters in the ASCII range , or a byte string .", "question_id": 8534, "for": 2813829, "retrieval_score": 12.736683}
{"snippet": "stringprep.in_table_c12(code)", "intent": "Determine whether `code` is in tableC.1.2 ( Non-ASCII space characters ) .", "question_id": 9536, "for": 2813829, "retrieval_score": 11.796781}
{"snippet": "stringprep.in_table_c22(code)", "intent": "Determine whether `code` is in tableC.2.2 ( Non-ASCII control characters ) .", "question_id": 9539, "for": 2813829, "retrieval_score": 11.796781}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707, "for": 2813829, "retrieval_score": 11.689944}
{"snippet": "urllib.parse.quote(string, errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11708, "for": 2813829, "retrieval_score": 11.689944}
{"snippet": "dbm.open(file, mode=0o666)", "intent": "Open the database `file` file and return a corresponding object . The optional `mode` argument is the Unix mode of the file , used only when the database has to be created .", "question_id": 2368, "for": 1679798, "retrieval_score": 13.528796}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089, "for": 1679798, "retrieval_score": 12.889923}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 1679798, "retrieval_score": 12.82885}
{"snippet": "dbm.open(file, flag='r', mode=0o666)", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be : The optional `mode` argument is the Unix mode of the file , used only when the database has to be created .", "question_id": 2369, "for": 1679798, "retrieval_score": 12.533467}
{"snippet": "dbm.open(file)", "intent": "Open the database `file` file and return a corresponding object .", "question_id": 2366, "for": 1679798, "retrieval_score": 12.321375}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 1207457, "retrieval_score": 22.742}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348, "for": 1207457, "retrieval_score": 15.535378}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303, "for": 1207457, "retrieval_score": 15.3848715}
{"snippet": "xml.dom.pulldom.parseString(string)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` .", "question_id": 12429, "for": 1207457, "retrieval_score": 14.823925}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 1207457, "retrieval_score": 14.085953}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 1207457, "retrieval_score": 23.644121}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303, "for": 1207457, "retrieval_score": 16.219975}
{"snippet": "xml.dom.pulldom.parseString(string)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` .", "question_id": 12429, "for": 1207457, "retrieval_score": 15.702543}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348, "for": 1207457, "retrieval_score": 15.535378}
{"snippet": "stat.filemode(mode)", "intent": "Convert a file \u2019 s `mode` to a string of the form \u2018 -rwxrwxrwx \u2019 .", "question_id": 9073, "for": 1207457, "retrieval_score": 15.111706}
{"snippet": "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name)", "intent": "Create zip file at `zip_dir` and `zip_basename` with extension zip which contains the files in `script_name` .", "question_id": 10310, "for": 2225564, "retrieval_score": 23.503588}
{"snippet": "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name, name_in_zip=None)", "intent": "Create zip file at `zip_dir` and `zip_basename` with extension zip which contains the files in `script_name` . `name_in_zip` is the archive name .", "question_id": 10311, "for": 2225564, "retrieval_score": 21.332325}
{"snippet": "compileall.compile_path(skip_curdir=True, maxlevels=0)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . Note that unlike the other compile functions , `maxlevels` defaults to 0 .", "question_id": 1437, "for": 2225564, "retrieval_score": 18.386906}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112, "for": 2225564, "retrieval_score": 18.368612}
{"snippet": "compileall.compile_path(maxlevels=0)", "intent": "Byte-compile all the .py files found along sys.path . Note that unlike the other compile functions , `maxlevels` defaults to 0 .", "question_id": 1431, "for": 2225564, "retrieval_score": 18.359135}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 32283692, "retrieval_score": 33.090828}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175, "for": 32283692, "retrieval_score": 25.694613}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 32283692, "retrieval_score": 25.564304}
{"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897, "for": 32283692, "retrieval_score": 24.562563}
{"snippet": "bz2.compress(data, compresslevel=9)", "intent": "Compress `data` , a bytes-like object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 907, "for": 32283692, "retrieval_score": 24.044184}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175, "for": 32283692, "retrieval_score": 25.694613}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 32283692, "retrieval_score": 22.374426}
{"snippet": "aifc.getcomptype()", "intent": "Return a bytes array of length 4 describing the type of compression used in the audio file .", "question_id": 15, "for": 32283692, "retrieval_score": 19.041855}
{"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425, "for": 32283692, "retrieval_score": 19.01221}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896, "for": 32283692, "retrieval_score": 18.785143}
{"snippet": "SSLContext.wrap_socket(sock, suppress_ragged_eofs=True)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `suppress_ragged_eofs` specifies how the SSLSocket.recv ( ) method should signal unexpected EOF from the other end of the connection .", "question_id": 9025, "for": 247724, "retrieval_score": 14.770347}
{"snippet": "SSLContext.wrap_socket(sock)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) .", "question_id": 9022, "for": 247724, "retrieval_score": 14.328788}
{"snippet": "ssl.MemoryBIO", "intent": "A memory buffer that can be used to pass data between Python and an SSL protocol instance.", "question_id": 9053, "for": 247724, "retrieval_score": 14.195699}
{"snippet": "ctypes.pythonapi", "intent": "An instance of PyDLL that exposes Python C API functions as attributes.", "question_id": 1785, "for": 247724, "retrieval_score": 13.619147}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027, "for": 247724, "retrieval_score": 13.538508}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518, "for": 29760130, "retrieval_score": 16.448795}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013, "for": 29760130, "retrieval_score": 14.617083}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319, "for": 29760130, "retrieval_score": 14.57515}
{"snippet": "IMAP4.getquotaroot(mailbox)", "intent": "Get the list of quota roots for the named `mailbox` .", "question_id": 4705, "for": 29760130, "retrieval_score": 14.165655}
{"snippet": "SSLContext.get_ca_certs()", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates .", "question_id": 9011, "for": 29760130, "retrieval_score": 13.50364}
{"snippet": "array.itemsize", "intent": "The length in bytes of one array item in the internal representation.", "question_id": 119, "for": 35707224, "retrieval_score": 22.801868}
{"snippet": "itertools.combinations_with_replacement(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` allowing individual elements to be repeated more than once .", "question_id": 5244, "for": 35707224, "retrieval_score": 19.576588}
{"snippet": "socket.CMSG_LEN(length)", "intent": "Return the total `length` , without trailing padding , of an ancillary data item with associated data of the given length .", "question_id": 8665, "for": 35707224, "retrieval_score": 19.13654}
{"snippet": "NamedNodeMap.length", "intent": "The length of the attribute list.", "question_id": 12374, "for": 35707224, "retrieval_score": 18.633717}
{"snippet": "i_pv4_network.prefixlen", "intent": "Length of the network prefix, in bits.", "question_id": 5204, "for": 35707224, "retrieval_score": 17.932987}
{"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791, "for": 42364992, "retrieval_score": 16.911415}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058, "for": 42364992, "retrieval_score": 16.815878}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347, "for": 42364992, "retrieval_score": 16.393969}
{"snippet": "doc_test.lineno", "intent": "The line number within filename where this DocTest begins, or None if the line number is unavailable.", "question_id": 2822, "for": 42364992, "retrieval_score": 15.568701}
{"snippet": "symbol_table.get_lineno()", "intent": "Return the number of the first line in the block this table represents .", "question_id": 9737, "for": 42364992, "retrieval_score": 15.527261}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 13163145, "retrieval_score": 25.533443}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 13163145, "retrieval_score": 25.533443}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer, lock=True)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed . If `lock` is True ( the default ) then a new lock object is created to synchronize access to the value .", "question_id": 6268, "for": 13163145, "retrieval_score": 24.109463}
{"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415, "for": 13163145, "retrieval_score": 22.60315}
{"snippet": "decimal.fma(other, third, context=None)", "intent": "Fused multiply-add . With arguments `other`, `third`, `context`.", "question_id": 2416, "for": 13163145, "retrieval_score": 22.01427}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693, "for": 9561243, "retrieval_score": 25.021616}
{"snippet": "msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)", "intent": "Return a new Dialog object . An entry in the Dialog table is made , with the specified coordinates , dialog attributes , `title` , `name` of the `first` , `default` , and `cancel` controls . With arguments `db`, `x`, `y`, `w`, `h`, `attr`.", "question_id": 6135, "for": 9561243, "retrieval_score": 22.036058}
{"snippet": "test.support.ALWAYS_EQ", "intent": "Object that is equal to anything.", "question_id": 10135, "for": 9561243, "retrieval_score": 19.828026}
{"snippet": "turtle.title(titlestring)", "intent": "Set title of turtle window to `titlestring` .", "question_id": 11157, "for": 9561243, "retrieval_score": 18.68141}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779, "for": 9561243, "retrieval_score": 18.664125}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461, "for": 34705205, "retrieval_score": 22.973494}
{"snippet": "email.utils.formataddr(pair, charset='utf-8')", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified . Optional `charset` is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters .", "question_id": 3462, "for": 34705205, "retrieval_score": 18.024557}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489, "for": 34705205, "retrieval_score": 17.887245}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745, "for": 34705205, "retrieval_score": 16.504854}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779, "for": 34705205, "retrieval_score": 16.044685}
{"snippet": "AbstractDigestAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "`authreq` should be the name of the header where the information about the realm is included in the request , `host` should be the host to authenticate to , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11868, "for": 29945684, "retrieval_score": 13.112867}
{"snippet": "HTTPConnection.getresponse()", "intent": "Should be called after a request is sent to get the response from the server .", "question_id": 4435, "for": 29945684, "retrieval_score": 12.10867}
{"snippet": "socket.getnameinfo(sockaddr, flags)", "intent": "Translate a socket address `sockaddr` into a 2-tuple ( host , port ) . Depending on the settings of `flags` , the result can contain a fully-qualified domain name or numeric address representation in host .", "question_id": 8651, "for": 29945684, "retrieval_score": 11.831823}
{"snippet": "AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "Handle an authentication request by getting a user/password pair , and re-trying the request . `authreq` should be the name of the header where the information about the realm is included in the request , `host` specifies the URL and path to authenticate for , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11865, "for": 29945684, "retrieval_score": 11.349979}
{"snippet": "CookiePolicy.domain_return_ok(domain, request)", "intent": "Return false if cookies should not be returned , given cookie `domain` . Note that domain_return_ok ( ) is called for every cookie domain , not just for the `request` domain .", "question_id": 4534, "for": 29945684, "retrieval_score": 11.077775}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 29703793, "retrieval_score": 17.393059}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 29703793, "retrieval_score": 17.393059}
{"snippet": "urllib.parse.urlencode(query, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11737, "for": 29703793, "retrieval_score": 16.194916}
{"snippet": "secrets.token_hex()", "intent": "Return a random text string , in hexadecimal .", "question_id": 8139, "for": 29703793, "retrieval_score": 15.124634}
{"snippet": "secrets.token_hex()", "intent": "Return a random text string , in hexadecimal .", "question_id": 8141, "for": 29703793, "retrieval_score": 15.124634}
{"snippet": "http.cookiejar.LWPCookieJar(filename)", "intent": "A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library \u2019 s Set-Cookie3 file format . With arguments `filename`.", "question_id": 4528, "for": 4682088, "retrieval_score": 22.283447}
{"snippet": "http.cookiejar.LWPCookieJar(filename, delayload=None)", "intent": "A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library \u2019 s Set-Cookie3 file format . With arguments `filename`, `delayload`.", "question_id": 4529, "for": 4682088, "retrieval_score": 21.901773}
{"snippet": "http.cookiejar.LWPCookieJar(filename, policy=None)", "intent": "A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library \u2019 s Set-Cookie3 file format . With arguments `filename`, `policy`.", "question_id": 4530, "for": 4682088, "retrieval_score": 21.901773}
{"snippet": "http.cookiejar.LWPCookieJar(filename, delayload=None, policy=None)", "intent": "A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library \u2019 s Set-Cookie3 file format . With arguments `filename`, `delayload`, `policy`.", "question_id": 4531, "for": 4682088, "retrieval_score": 21.532955}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655, "for": 4682088, "retrieval_score": 12.089667}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 15769246, "retrieval_score": 11.73188}
{"snippet": "Unpacker.unpack_list(unpack_item)", "intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "question_id": 12297, "for": 15769246, "retrieval_score": 11.209145}
{"snippet": "Packer.pack_array(list, pack_item)", "intent": "Packs a variable length `list` of homogeneous items . With arguments `pack_item`.", "question_id": 12284, "for": 15769246, "retrieval_score": 11.170866}
{"snippet": "Unpacker.unpack_array(unpack_item)", "intent": "Unpacks and returns a variable length list of homogeneous items . With arguments `unpack_item`.", "question_id": 12299, "for": 15769246, "retrieval_score": 10.655884}
{"snippet": "tkinter.tix.CheckList", "intent": "The CheckList widget displays a list of items to be selected by the user.", "question_id": 10571, "for": 15769246, "retrieval_score": 10.415798}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491, "for": 13860026, "retrieval_score": 32.142563}
{"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492, "for": 13860026, "retrieval_score": 32.142563}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 13860026, "retrieval_score": 26.930252}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 13860026, "retrieval_score": 24.654947}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 13860026, "retrieval_score": 24.654947}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 18711384, "retrieval_score": 22.777115}
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440, "for": 18711384, "retrieval_score": 19.318764}
{"snippet": "str.encode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9188, "for": 18711384, "retrieval_score": 18.905949}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 18711384, "retrieval_score": 18.074938}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 18711384, "retrieval_score": 18.074938}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 8898294, "retrieval_score": 33.866558}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 8898294, "retrieval_score": 30.402578}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 8898294, "retrieval_score": 30.402578}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 8898294, "retrieval_score": 28.436195}
{"snippet": "tarfile.ENCODING", "intent": "The default character encoding: 'utf-8' on Windows, the value returned by sys.getfilesystemencoding() otherwise.", "question_id": 9908, "for": 8898294, "retrieval_score": 27.139141}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501, "for": 687295, "retrieval_score": 13.358067}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564, "for": 687295, "retrieval_score": 12.967123}
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565, "for": 687295, "retrieval_score": 12.967123}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_OPT", "intent": "The model is optional: it can appear once or not at all, as for A?.", "question_id": 7784, "for": 687295, "retrieval_score": 12.531501}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083, "for": 687295, "retrieval_score": 12.001521}
{"snippet": "Element.removeAttribute(name)", "intent": "Remove an attribute by `name` .", "question_id": 12363, "for": 2850966, "retrieval_score": 15.269894}
{"snippet": "symbol_table.lookup(name)", "intent": "Lookup `name` in the table and return a Symbol instance .", "question_id": 9743, "for": 2850966, "retrieval_score": 14.044962}
{"snippet": "dis.hasname", "intent": "Sequence of bytecodes that access an attribute by name.", "question_id": 2747, "for": 2850966, "retrieval_score": 13.719001}
{"snippet": "ssl.SSLObject", "intent": "A reduced-scope variant of SSLSocket representing an SSL protocol instance that does not contain any network IO methods.", "question_id": 9052, "for": 2850966, "retrieval_score": 13.4044695}
{"snippet": "Element.hasAttribute(name)", "intent": "Returns true if the element has an attribute named by `name` .", "question_id": 12357, "for": 2850966, "retrieval_score": 13.055983}
{"snippet": "faulthandler.dump_traceback_later(timeout)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True .", "question_id": 3722, "for": 14764126, "retrieval_score": 11.230243}
{"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True .", "question_id": 3723, "for": 14764126, "retrieval_score": 11.230243}
{"snippet": "faulthandler.dump_traceback_later(timeout, exit=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . If `exit` is True , call _exit ( ) with status=1 after dumping the tracebacks .", "question_id": 3725, "for": 14764126, "retrieval_score": 10.861474}
{"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False, exit=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . If `exit` is True , call _exit ( ) with status=1 after dumping the tracebacks .", "question_id": 3727, "for": 14764126, "retrieval_score": 10.861474}
{"snippet": "termios.tcflow(fd, action)", "intent": "Suspend or resume input or output on file descriptor `fd` . The `action` argument can be TCOOFF to suspend output , TCOON to restart output , TCIOFF to suspend input , or TCION to restart input .", "question_id": 10107, "for": 14764126, "retrieval_score": 10.256919}
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763, "for": 14764126, "retrieval_score": 11.291034}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711, "for": 14764126, "retrieval_score": 10.960748}
{"snippet": "errno.ESHUTDOWN", "intent": "Cannot send after transport endpoint shutdown", "question_id": 3613, "for": 14764126, "retrieval_score": 10.358235}
{"snippet": "base_server.serve_forever()", "intent": "Handle requests until an explicit shutdown ( ) request .", "question_id": 8762, "for": 14764126, "retrieval_score": 10.081155}
{"snippet": "winreg.ConnectRegistry(computer_name, key)", "intent": "Establishes a connection to a predefined registry handle on another computer , and returns a handle object . `computer_name` is the name of the remote computer , of the form r '' \\\\computername '' . `key` is the predefined handle to connect to .", "question_id": 12121, "for": 14764126, "retrieval_score": 9.495621}
{"snippet": "errno.ECONNABORTED", "intent": "Software caused connection abort", "question_id": 3608, "for": 14764126, "retrieval_score": 12.28765}
{"snippet": "FTP.abort()", "intent": "Abort a file transfer that is in progress .", "question_id": 3923, "for": 14764126, "retrieval_score": 11.885753}
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763, "for": 14764126, "retrieval_score": 11.291034}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711, "for": 14764126, "retrieval_score": 10.960748}
{"snippet": "errno.ESHUTDOWN", "intent": "Cannot send after transport endpoint shutdown", "question_id": 3613, "for": 14764126, "retrieval_score": 10.358235}
{"snippet": "secrets.SystemRandom", "intent": "A class for generating random numbers using the highest-quality sources provided by the operating system.", "question_id": 8131, "for": 14764126, "retrieval_score": 15.11731}
{"snippet": "os.pathsep", "intent": "The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows.", "question_id": 7126, "for": 14764126, "retrieval_score": 14.578587}
{"snippet": "os.uname()", "intent": "Returns information identifying the current operating system .", "question_id": 6710, "for": 14764126, "retrieval_score": 14.545437}
{"snippet": "winreg.HKEY_CURRENT_CONFIG", "intent": "Contains information about the current hardware profile of the local computer system.", "question_id": 12160, "for": 14764126, "retrieval_score": 14.280756}
{"snippet": "stat.ST_CTIME", "intent": "The \u201cctime\u201d as reported by the operating system.", "question_id": 9083, "for": 14764126, "retrieval_score": 14.166487}
{"snippet": "sys.getwindowsversion()", "intent": "Return a named tuple describing the Windows version currently running .", "question_id": 9809, "for": 14764126, "retrieval_score": 13.005425}
{"snippet": "atexit.unregister(func)", "intent": "Remove `func` from the list of functions to be run at interpreter shutdown .", "question_id": 678, "for": 14764126, "retrieval_score": 11.438475}
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763, "for": 14764126, "retrieval_score": 11.291034}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711, "for": 14764126, "retrieval_score": 10.960748}
{"snippet": "test.support.MISSING_C_DOCSTRINGS", "intent": "Return True if running on CPython, not on Windows, and configuration not set with WITH_DOC_STRINGS.", "question_id": 10132, "for": 14764126, "retrieval_score": 10.829489}
{"snippet": "ur_lopener.retrieve(url)", "intent": "Retrieves the contents of `url` and places it in `filename` .", "question_id": 11896, "for": 2769061, "retrieval_score": 12.16455}
{"snippet": "ur_lopener.retrieve(url, filename=None)", "intent": "Retrieves the contents of `url` and places it in `filename` .", "question_id": 11897, "for": 2769061, "retrieval_score": 12.16455}
{"snippet": "window.clrtoeol()", "intent": "Erase from cursor to the end of the line .", "question_id": 2037, "for": 2769061, "retrieval_score": 12.103505}
{"snippet": "Path.read_text()", "intent": "Return the decoded contents of the pointed-to file as a string :", "question_id": 7304, "for": 2769061, "retrieval_score": 10.805363}
{"snippet": "os.writev(fd, buffers)", "intent": "Write the contents of `buffers` to file descriptor `fd` .", "question_id": 6810, "for": 2769061, "retrieval_score": 10.655552}
{"snippet": "module_finder.run_script(pathname)", "intent": "Analyze the contents of the `pathname` file , which must contain Python code .", "question_id": 6056, "for": 2769061, "retrieval_score": 17.102108}
{"snippet": "os.writev(fd, buffers)", "intent": "Write the contents of `buffers` to file descriptor `fd` .", "question_id": 6810, "for": 2769061, "retrieval_score": 14.686019}
{"snippet": "shutil.copyfileobj(fsrc, fdst)", "intent": "Copy the contents of the file-like object `fsrc` to the file-like object `fdst` .", "question_id": 8310, "for": 2769061, "retrieval_score": 14.445826}
{"snippet": "Path.write_text(data)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file :", "question_id": 7323, "for": 2769061, "retrieval_score": 13.925576}
{"snippet": "Record.SetStream(field, value)", "intent": "Set `field` to the contents of the file named `value` , through MsiRecordSetStream ( ) .", "question_id": 6085, "for": 2769061, "retrieval_score": 13.754847}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 29815129, "retrieval_score": 12.795345}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 29815129, "retrieval_score": 12.620594}
{"snippet": "binascii.b2a_uu(data)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char .", "question_id": 821, "for": 29815129, "retrieval_score": 12.283377}
{"snippet": "widget.index(item)", "intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "question_id": 10639, "for": 29815129, "retrieval_score": 11.578508}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175, "for": 29815129, "retrieval_score": 11.499941}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175, "for": 29815129, "retrieval_score": 11.499941}
{"snippet": "mime_types.types_map_inv", "intent": "Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types.", "question_id": 5963, "for": 29815129, "retrieval_score": 8.315062}
{"snippet": "io_base.readlines()", "intent": "Read and return a list of lines from the stream .", "question_id": 5072, "for": 29815129, "retrieval_score": 8.082796}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843, "for": 29815129, "retrieval_score": 8.082796}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831, "for": 29815129, "retrieval_score": 7.9834867}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007, "for": 24082784, "retrieval_score": 15.649377}
{"snippet": "Match.span()", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8008, "for": 24082784, "retrieval_score": 15.649377}
{"snippet": "Pattern.groupindex", "intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "question_id": 7993, "for": 24082784, "retrieval_score": 10.610386}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 24082784, "retrieval_score": 9.395601}
{"snippet": "calendar.calendar(year, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `m`.", "question_id": 1015, "for": 24082784, "retrieval_score": 9.340655}
{"snippet": "ZipFile.namelist()", "intent": "Return a list of archive members by name .", "question_id": 12805, "for": 3731426, "retrieval_score": 30.72384}
{"snippet": "TarFile.getnames()", "intent": "Return the members as a list of their names .", "question_id": 9926, "for": 3731426, "retrieval_score": 28.066118}
{"snippet": "TarFile.getmembers()", "intent": "Return the members of the archive as a list of TarInfo objects .", "question_id": 9925, "for": 3731426, "retrieval_score": 26.939829}
{"snippet": "inspect.getmembers(object)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name .", "question_id": 4946, "for": 3731426, "retrieval_score": 26.234232}
{"snippet": "inspect.getmembers(object, predicate)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name . If the optional `predicate` argument is supplied , only members for which the predicate returns a true value are included .", "question_id": 4945, "for": 3731426, "retrieval_score": 24.04898}
{"snippet": "email_policy.fold(name, value)", "intent": "Header folding is controlled by the refold_source policy setting . A `value` is considered to be a \u2018 source value \u2019 if and only if it does not have a `name` attribute ( having a name attribute means it is a header object of some sort ) .", "question_id": 3437, "for": 16772071, "retrieval_score": 9.535536}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 16772071, "retrieval_score": 8.789388}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 16772071, "retrieval_score": 8.789388}
{"snippet": "types.ClassMethodDescriptorType", "intent": "The type of unbound class methods of some built-in data types such as dict.__dict__['fromkeys'].", "question_id": 11195, "for": 16772071, "retrieval_score": 8.7311125}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179, "for": 16772071, "retrieval_score": 8.599503}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 16772071, "retrieval_score": 13.41673}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 16772071, "retrieval_score": 13.0580225}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 16772071, "retrieval_score": 11.673934}
{"snippet": "patch.dict(in_dict, **kwargs, clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11630, "for": 16772071, "retrieval_score": 11.335356}
{"snippet": "parameterized_mime_header.params", "intent": "A dictionary mapping parameter names to parameter values.", "question_id": 3168, "for": 16772071, "retrieval_score": 10.652369}
{"snippet": "inspect.getmembers(object)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name .", "question_id": 4946, "for": 16772071, "retrieval_score": 25.82904}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968, "for": 16772071, "retrieval_score": 23.290318}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484, "for": 16772071, "retrieval_score": 22.19129}
{"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991, "for": 16772071, "retrieval_score": 22.19129}
{"snippet": "inspect.getmembers(object, predicate)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name . If the optional `predicate` argument is supplied , only members for which the predicate returns a true value are included .", "question_id": 4945, "for": 16772071, "retrieval_score": 19.870008}
{"snippet": "email_policy.fold(name, value)", "intent": "Header folding is controlled by the refold_source policy setting . A `value` is considered to be a \u2018 source value \u2019 if and only if it does not have a `name` attribute ( having a name attribute means it is a header object of some sort ) .", "question_id": 3437, "for": 16772071, "retrieval_score": 9.535536}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 16772071, "retrieval_score": 8.789388}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 16772071, "retrieval_score": 8.789388}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179, "for": 16772071, "retrieval_score": 8.599503}
{"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180, "for": 16772071, "retrieval_score": 8.599503}
{"snippet": "robot_file_parser.modified()", "intent": "Sets the time the robots.txt file was last fetched to the current time .", "question_id": 11914, "for": 5110352, "retrieval_score": 10.024207}
{"snippet": "datetime.now()", "intent": "Return the current local date and time .", "question_id": 2258, "for": 5110352, "retrieval_score": 9.960855}
{"snippet": "base_http_request_handler.log_date_time_string()", "intent": "Returns the current date and time , formatted for logging .", "question_id": 4657, "for": 5110352, "retrieval_score": 9.455015}
{"snippet": "time.localtime(secs)", "intent": "Like gmtime ( ) but converts to local time . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10443, "for": 5110352, "retrieval_score": 9.317146}
{"snippet": "datetime.utcnow()", "intent": "Return the current UTC date and time , with tzinfo None .", "question_id": 2260, "for": 5110352, "retrieval_score": 9.220884}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543, "for": 1883980, "retrieval_score": 47.832626}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617, "for": 1883980, "retrieval_score": 42.847916}
{"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618, "for": 1883980, "retrieval_score": 42.847916}
{"snippet": "ScrolledText.frame", "intent": "The frame which surrounds the text and scroll bar widgets.", "question_id": 10542, "for": 1883980, "retrieval_score": 41.04067}
{"snippet": "widget.stop()", "intent": "Stop autoincrement mode : cancels any recurring timer event initiated by Progressbar.start ( ) for this progress bar .", "question_id": 10619, "for": 1883980, "retrieval_score": 35.18919}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 2813806, "retrieval_score": 20.523567}
{"snippet": "dict.get(key)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9483, "for": 2813806, "retrieval_score": 20.523567}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490, "for": 2813806, "retrieval_score": 19.519218}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 2813806, "retrieval_score": 18.549286}
{"snippet": "dict.pop(key, default)", "intent": "If `key` is in the dictionary , remove it and return its value , else return `default` .", "question_id": 9486, "for": 2813806, "retrieval_score": 16.938646}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723, "for": 10037742, "retrieval_score": 16.256207}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705, "for": 10037742, "retrieval_score": 14.753524}
{"snippet": "locale.CODESET", "intent": "Get a string with the name of the character encoding used in the selected locale.", "question_id": 5354, "for": 10037742, "retrieval_score": 12.472753}
{"snippet": "curses.ascii.unctrl(c)", "intent": "Return a string representation of the ASCII character c. If `c` is printable , this string is the character itself .", "question_id": 1917, "for": 10037742, "retrieval_score": 11.847002}
{"snippet": "unicodedata.decomposition(chr)", "intent": "Returns the character decomposition mapping assigned to the character `chr` as string .", "question_id": 11354, "for": 10037742, "retrieval_score": 11.546831}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 22712292, "retrieval_score": 30.875982}
{"snippet": "array.pop()", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 133, "for": 22712292, "retrieval_score": 30.875982}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 22712292, "retrieval_score": 28.421408}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360, "for": 22712292, "retrieval_score": 26.874037}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361, "for": 22712292, "retrieval_score": 26.874037}
{"snippet": "datetime.time()", "intent": "Return time object with same hour , minute , second , microsecond and fold .", "question_id": 2282, "for": 14043934, "retrieval_score": 13.399386}
{"snippet": "datetime.timetz()", "intent": "Return time object with same hour , minute , second , microsecond , fold , and tzinfo attributes .", "question_id": 2283, "for": 14043934, "retrieval_score": 12.781669}
{"snippet": "uuid.uuid1()", "intent": "Generate a UUID from a host ID , sequence number , and the current time .", "question_id": 11957, "for": 14043934, "retrieval_score": 11.334812}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 14043934, "retrieval_score": 11.006522}
{"snippet": "os.getloadavg()", "intent": "Return the number of processes in the system run queue averaged over the last 1 , 5 , and 15 minutes or raises OSError if the load average was unobtainable .", "question_id": 7118, "for": 14043934, "retrieval_score": 10.96225}
{"snippet": "datetime.time()", "intent": "Return time object with same hour , minute , second , microsecond and fold .", "question_id": 2282, "for": 14043934, "retrieval_score": 15.726433}
{"snippet": "datetime.timetz()", "intent": "Return time object with same hour , minute , second , microsecond , fold , and tzinfo attributes .", "question_id": 2283, "for": 14043934, "retrieval_score": 15.001437}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 14043934, "retrieval_score": 12.79163}
{"snippet": "timedelta.max", "intent": "The most positive timedelta object, timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999).", "question_id": 2215, "for": 14043934, "retrieval_score": 11.1848755}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 14043934, "retrieval_score": 11.006522}
{"snippet": "datetime.time()", "intent": "Return time object with same hour , minute , second , microsecond and fold .", "question_id": 2282, "for": 14043934, "retrieval_score": 15.726433}
{"snippet": "datetime.timetz()", "intent": "Return time object with same hour , minute , second , microsecond , fold , and tzinfo attributes .", "question_id": 2283, "for": 14043934, "retrieval_score": 15.001437}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 14043934, "retrieval_score": 14.029544}
{"snippet": "datetime.timedelta(minutes=0)", "intent": "All arguments are optional and default to 0 . With arguments `minutes`.", "question_id": 2209, "for": 14043934, "retrieval_score": 11.4172}
{"snippet": "timedelta.max", "intent": "The most positive timedelta object, timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999).", "question_id": 2215, "for": 14043934, "retrieval_score": 11.1848755}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353, "for": 14043934, "retrieval_score": 15.591117}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355, "for": 14043934, "retrieval_score": 15.478034}
{"snippet": "tzinfo.dst(dt)", "intent": "Return the daylight saving time ( DST ) adjustment , as a timedelta object or None if DST information isn \u2019 t known . tz.utcoffset ( `dt` ) - tz.dst ( dt )", "question_id": 2354, "for": 14043934, "retrieval_score": 15.422813}
{"snippet": "tzinfo.fromutc(dt)", "intent": "This is called from the default datetime.astimezone ( ) implementation . When called from that , dt.tzinfo is self , and `dt` \u2019 s date and time data are to be viewed as expressing a UTC time .", "question_id": 2356, "for": 14043934, "retrieval_score": 13.882834}
{"snippet": "email.utils.localtime(dt=None)", "intent": "Return local time as an aware datetime object . Otherwise `dt` argument should be a datetime instance , and it is converted to the local time zone according to the system time zone database .", "question_id": 3453, "for": 14043934, "retrieval_score": 13.4389105}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 3059301, "retrieval_score": 18.610796}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 3059301, "retrieval_score": 18.610796}
{"snippet": "charset.header_encode(string)", "intent": "Header-encode the `string` string .", "question_id": 2920, "for": 3059301, "retrieval_score": 11.261516}
{"snippet": "charset.body_encode(string)", "intent": "Body-encode the `string` string .", "question_id": 2922, "for": 3059301, "retrieval_score": 11.261516}
{"snippet": "window.encoding", "intent": "Encoding used to encode method arguments (Unicode strings and characters).", "question_id": 2047, "for": 3059301, "retrieval_score": 10.966358}
{"snippet": "xmlparser.CharacterDataHandler(data)", "intent": "Called for character `data` .", "question_id": 7763, "for": 3059301, "retrieval_score": 16.69534}
{"snippet": "unicodedata.decimal(chr)", "intent": "Returns the decimal value assigned to the character `chr` as integer .", "question_id": 11344, "for": 3059301, "retrieval_score": 15.513543}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140, "for": 3059301, "retrieval_score": 15.265467}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8142, "for": 3059301, "retrieval_score": 15.265467}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363, "for": 3059301, "retrieval_score": 14.530659}
{"snippet": "typing.Tuple", "intent": "Tuple type; Tuple[X, Y] is the type of a tuple of two items with the first item of type X and the second of type Y.", "question_id": 11335, "for": 18131367, "retrieval_score": 26.545233}
{"snippet": "Match.groups()", "intent": "Return a tuple containing all the subgroups of the match , from 1 up to however many groups are in the pattern .", "question_id": 7999, "for": 18131367, "retrieval_score": 20.05333}
{"snippet": "Packer.pack_list(list, pack_item)", "intent": "Packs a `list` of homogeneous items . `pack_item` is the function that is called to pack the individual item .", "question_id": 12282, "for": 18131367, "retrieval_score": 17.425999}
{"snippet": "widget.selection_toggle(*items)", "intent": "Toggle the selection state of each item in items . With arguments `*items`.", "question_id": 10657, "for": 18131367, "retrieval_score": 16.90245}
{"snippet": "email.utils.mktime_tz(tuple)", "intent": "Turn a 10-tuple as returned by parsedate_tz ( ) into a UTC timestamp ( seconds since the Epoch ) . If the timezone item in the `tuple` is None , assume local time .", "question_id": 3467, "for": 18131367, "retrieval_score": 16.624384}
{"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425, "for": 8192379, "retrieval_score": 12.1687765}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `stdin`.", "question_id": 524, "for": 8192379, "retrieval_score": 11.6708765}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None, loop=None)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `stdin`, `loop`.", "question_id": 531, "for": 8192379, "retrieval_score": 11.381875}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426, "for": 8192379, "retrieval_score": 11.256975}
{"snippet": "array.typecode", "intent": "The typecode character used to create the array.", "question_id": 118, "for": 8192379, "retrieval_score": 11.21373}
{"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931, "for": 26155985, "retrieval_score": 12.982736}
{"snippet": "re.MULTILINE", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7932, "for": 26155985, "retrieval_score": 12.982736}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825, "for": 26155985, "retrieval_score": 12.524098}
{"snippet": "binascii.b2a_uu(data)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char .", "question_id": 821, "for": 26155985, "retrieval_score": 12.523586}
{"snippet": "PurePath.drive", "intent": "A string representing the drive letter or name, if any:", "question_id": 7244, "for": 26155985, "retrieval_score": 11.675043}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442, "for": 2755950, "retrieval_score": 18.459927}
{"snippet": "test_case.assertNotRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11444, "for": 2755950, "retrieval_score": 18.459927}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 2755950, "retrieval_score": 18.415703}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 2755950, "retrieval_score": 18.415703}
{"snippet": "text_wrapper.expand_tabs", "intent": "(default: True) If true, then all tab characters in text will be expanded to spaces using the expandtabs() method of text.", "question_id": 10328, "for": 2755950, "retrieval_score": 16.536446}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 35017035, "retrieval_score": 38.70742}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 35017035, "retrieval_score": 28.593681}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 35017035, "retrieval_score": 24.718317}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745, "for": 35017035, "retrieval_score": 23.592716}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684, "for": 35017035, "retrieval_score": 22.881126}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832, "for": 34696853, "retrieval_score": 17.319489}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827, "for": 34696853, "retrieval_score": 16.063953}
{"snippet": "importlib.machinery.SOURCE_SUFFIXES", "intent": "A list of strings representing the recognized file suffixes for source modules.", "question_id": 4865, "for": 34696853, "retrieval_score": 15.684938}
{"snippet": "importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES", "intent": "A list of strings representing the file suffixes for optimized bytecode modules.", "question_id": 4867, "for": 34696853, "retrieval_score": 15.684938}
{"snippet": "importlib.machinery.EXTENSION_SUFFIXES", "intent": "A list of strings representing the recognized file suffixes for extension modules.", "question_id": 4869, "for": 34696853, "retrieval_score": 15.684938}
{"snippet": "ArgumentParser.parse_args()", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 69, "for": 34696853, "retrieval_score": 12.570111}
{"snippet": "ArgumentParser.parse_args(namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 71, "for": 34696853, "retrieval_score": 12.570111}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 34696853, "retrieval_score": 11.924775}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 34696853, "retrieval_score": 11.924775}
{"snippet": "ArgumentParser.parse_args(args=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 70, "for": 34696853, "retrieval_score": 11.757099}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 28901311, "retrieval_score": 24.580633}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 28901311, "retrieval_score": 22.869623}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267, "for": 28901311, "retrieval_score": 19.822186}
{"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269, "for": 28901311, "retrieval_score": 19.822186}
{"snippet": "calendar.day_name", "intent": "An array that represents the days of the week in the current locale.", "question_id": 1022, "for": 28901311, "retrieval_score": 19.529602}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 1780174, "retrieval_score": 38.867367}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480, "for": 1780174, "retrieval_score": 36.149193}
{"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481, "for": 1780174, "retrieval_score": 36.149193}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 1780174, "retrieval_score": 31.178888}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 1780174, "retrieval_score": 28.60613}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008, "for": 1780174, "retrieval_score": 16.911821}
{"snippet": "mh.get_sequences()", "intent": "Return a dictionary of sequence names mapped to key lists .", "question_id": 5783, "for": 1780174, "retrieval_score": 13.666176}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009, "for": 1780174, "retrieval_score": 12.7280245}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175, "for": 1780174, "retrieval_score": 12.562826}
{"snippet": "mime_types.types_map_inv", "intent": "Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types.", "question_id": 5963, "for": 1780174, "retrieval_score": 12.321611}
{"snippet": "calendar.monthrange(year, month)", "intent": "Returns weekday of first day of the `month` and number of days in month , for the specified `year` and month .", "question_id": 991, "for": 42950, "retrieval_score": 21.62806}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989, "for": 42950, "retrieval_score": 15.4857855}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247, "for": 42950, "retrieval_score": 15.378739}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218, "for": 42950, "retrieval_score": 14.585001}
{"snippet": "datetime.date()", "intent": "Return date object with same year , month and day .", "question_id": 2281, "for": 42950, "retrieval_score": 14.585001}
{"snippet": "datetime.datetime(year, month, day, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `second`.", "question_id": 2250, "for": 42950, "retrieval_score": 19.681828}
{"snippet": "datetime.datetime(year, month, day, hour=0, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `second`.", "question_id": 2255, "for": 42950, "retrieval_score": 19.217453}
{"snippet": "calendar.monthrange(year, month)", "intent": "Returns weekday of first day of the `month` and number of days in month , for the specified `year` and month .", "question_id": 991, "for": 42950, "retrieval_score": 17.810158}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989, "for": 42950, "retrieval_score": 15.4857855}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247, "for": 42950, "retrieval_score": 15.378739}
{"snippet": "datetime.datetime(year, month, day, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `second`.", "question_id": 2250, "for": 42950, "retrieval_score": 19.681828}
{"snippet": "datetime.datetime(year, month, day, hour=0, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `second`.", "question_id": 2255, "for": 42950, "retrieval_score": 19.217453}
{"snippet": "calendar.monthrange(year, month)", "intent": "Returns weekday of first day of the `month` and number of days in month , for the specified `year` and month .", "question_id": 991, "for": 42950, "retrieval_score": 17.810158}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989, "for": 42950, "retrieval_score": 15.4857855}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247, "for": 42950, "retrieval_score": 15.378739}
{"snippet": "calendar.monthrange(year, month)", "intent": "Returns weekday of first day of the `month` and number of days in month , for the specified `year` and month .", "question_id": 991, "for": 42950, "retrieval_score": 36.095875}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247, "for": 42950, "retrieval_score": 35.474884}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218, "for": 42950, "retrieval_score": 34.17088}
{"snippet": "datetime.date()", "intent": "Return date object with same year , month and day .", "question_id": 2281, "for": 42950, "retrieval_score": 34.17088}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912, "for": 42950, "retrieval_score": 33.457394}
{"snippet": "datetime.datetime(year, month, day, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `second`.", "question_id": 2250, "for": 42950, "retrieval_score": 25.744501}
{"snippet": "datetime.datetime(year, month, day, hour=0, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `second`.", "question_id": 2255, "for": 42950, "retrieval_score": 25.137085}
{"snippet": "calendar.monthrange(year, month)", "intent": "Returns weekday of first day of the `month` and number of days in month , for the specified `year` and month .", "question_id": 991, "for": 42950, "retrieval_score": 22.789858}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247, "for": 42950, "retrieval_score": 21.915264}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218, "for": 42950, "retrieval_score": 20.955555}
{"snippet": "calendar.monthrange(year, month)", "intent": "Returns weekday of first day of the `month` and number of days in month , for the specified `year` and month .", "question_id": 991, "for": 42950, "retrieval_score": 26.60776}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247, "for": 42950, "retrieval_score": 21.915264}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218, "for": 42950, "retrieval_score": 20.955555}
{"snippet": "datetime.date()", "intent": "Return date object with same year , month and day .", "question_id": 2281, "for": 42950, "retrieval_score": 20.955555}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989, "for": 42950, "retrieval_score": 20.671328}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL", "intent": "There was an error parsing a text declaration in an external entity.", "question_id": 7814, "for": 89228, "retrieval_score": 11.124315}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF", "intent": "An entity reference in an attribute value referred to an external entity instead of an internal entity.", "question_id": 7789, "for": 89228, "retrieval_score": 10.597876}
{"snippet": "ZipInfo.external_attr", "intent": "External file attributes.", "question_id": 12875, "for": 89228, "retrieval_score": 10.466467}
{"snippet": "element_tree.parse(source)", "intent": "Loads an external XML section into this element tree . `source` is a file name or file object .", "question_id": 12525, "for": 89228, "retrieval_score": 9.372613}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003, "for": 89228, "retrieval_score": 9.03601}
{"snippet": "subprocess.check_call(args)", "intent": "Run command with arguments . With arguments `args`.", "question_id": 9669, "for": 89228, "retrieval_score": 17.888954}
{"snippet": "subprocess.check_call(args, stdin=None)", "intent": "Run command with arguments . With arguments `args`, `stdin`.", "question_id": 9670, "for": 89228, "retrieval_score": 17.441463}
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673, "for": 89228, "retrieval_score": 17.441463}
{"snippet": "subprocess.check_call(args, cwd=None)", "intent": "Run command with arguments . With arguments `args`, `cwd`.", "question_id": 9674, "for": 89228, "retrieval_score": 17.441463}
{"snippet": "subprocess.check_call(args, stdin=None, shell=False)", "intent": "Run command with arguments . With arguments `args`, `stdin`, `shell`.", "question_id": 9678, "for": 89228, "retrieval_score": 17.016123}
{"snippet": "NNTP.help(file=None)", "intent": "Send a HELP command . With arguments `file`.", "question_id": 6475, "for": 89228, "retrieval_score": 21.954678}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 89228, "retrieval_score": 21.046745}
{"snippet": "NNTP.list(file=None)", "intent": "Send a LIST or LIST ACTIVE command . With arguments `file`.", "question_id": 6467, "for": 89228, "retrieval_score": 20.323713}
{"snippet": "NNTP.article(file=None)", "intent": "Send an ARTICLE command , where `message_spec` has the same meaning as for stat ( ) . With arguments `file`.", "question_id": 6482, "for": 89228, "retrieval_score": 19.736383}
{"snippet": "NNTP.article(message_spec=None, file=None)", "intent": "Send an ARTICLE command , where `message_spec` has the same meaning as for stat ( ) . With arguments `file`.", "question_id": 6483, "for": 89228, "retrieval_score": 19.736383}
{"snippet": "subprocess.check_call(args)", "intent": "Run command with arguments . With arguments `args`.", "question_id": 9669, "for": 89228, "retrieval_score": 17.888954}
{"snippet": "subprocess.check_call(args, stdin=None)", "intent": "Run command with arguments . With arguments `args`, `stdin`.", "question_id": 9670, "for": 89228, "retrieval_score": 17.441463}
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673, "for": 89228, "retrieval_score": 17.441463}
{"snippet": "subprocess.check_call(args, cwd=None)", "intent": "Run command with arguments . With arguments `args`, `cwd`.", "question_id": 9674, "for": 89228, "retrieval_score": 17.441463}
{"snippet": "subprocess.check_call(args, stdin=None, shell=False)", "intent": "Run command with arguments . With arguments `args`, `stdin`, `shell`.", "question_id": 9678, "for": 89228, "retrieval_score": 17.016123}
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931, "for": 89228, "retrieval_score": 13.17397}
{"snippet": "curses.noecho()", "intent": "Leave echo mode .", "question_id": 1962, "for": 89228, "retrieval_score": 13.17397}
{"snippet": "wsgiref.simple_server.demo_app(environ, start_response)", "intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "question_id": 12227, "for": 89228, "retrieval_score": 12.7013035}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL", "intent": "There was an error parsing a text declaration in an external entity.", "question_id": 7814, "for": 89228, "retrieval_score": 11.124315}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF", "intent": "An entity reference in an attribute value referred to an external entity instead of an internal entity.", "question_id": 7789, "for": 89228, "retrieval_score": 10.597876}
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931, "for": 89228, "retrieval_score": 13.17397}
{"snippet": "curses.noecho()", "intent": "Leave echo mode .", "question_id": 1962, "for": 89228, "retrieval_score": 13.17397}
{"snippet": "wsgiref.simple_server.demo_app(environ, start_response)", "intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "question_id": 12227, "for": 89228, "retrieval_score": 12.7013035}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL", "intent": "There was an error parsing a text declaration in an external entity.", "question_id": 7814, "for": 89228, "retrieval_score": 11.124315}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF", "intent": "An entity reference in an attribute value referred to an external entity instead of an internal entity.", "question_id": 7789, "for": 89228, "retrieval_score": 10.597876}
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931, "for": 89228, "retrieval_score": 13.17397}
{"snippet": "curses.noecho()", "intent": "Leave echo mode .", "question_id": 1962, "for": 89228, "retrieval_score": 13.17397}
{"snippet": "wsgiref.simple_server.demo_app(environ, start_response)", "intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "question_id": 12227, "for": 89228, "retrieval_score": 12.7013035}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL", "intent": "There was an error parsing a text declaration in an external entity.", "question_id": 7814, "for": 89228, "retrieval_score": 11.124315}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF", "intent": "An entity reference in an attribute value referred to an external entity instead of an internal entity.", "question_id": 7789, "for": 89228, "retrieval_score": 10.597876}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL", "intent": "There was an error parsing a text declaration in an external entity.", "question_id": 7814, "for": 89228, "retrieval_score": 11.124315}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF", "intent": "An entity reference in an attribute value referred to an external entity instead of an internal entity.", "question_id": 7789, "for": 89228, "retrieval_score": 10.597876}
{"snippet": "ZipInfo.external_attr", "intent": "External file attributes.", "question_id": 12875, "for": 89228, "retrieval_score": 10.466467}
{"snippet": "element_tree.parse(source)", "intent": "Loads an external XML section into this element tree . `source` is a file name or file object .", "question_id": 12525, "for": 89228, "retrieval_score": 9.372613}
{"snippet": "element_tree.parse(source, parser=None)", "intent": "Loads an external XML section into this element tree . `source` is a file name or file object . `parser` is an optional parser instance .", "question_id": 12526, "for": 89228, "retrieval_score": 9.012806}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL", "intent": "There was an error parsing a text declaration in an external entity.", "question_id": 7814, "for": 89228, "retrieval_score": 11.124315}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF", "intent": "An entity reference in an attribute value referred to an external entity instead of an internal entity.", "question_id": 7789, "for": 89228, "retrieval_score": 10.597876}
{"snippet": "ZipInfo.external_attr", "intent": "External file attributes.", "question_id": 12875, "for": 89228, "retrieval_score": 10.466467}
{"snippet": "element_tree.parse(source)", "intent": "Loads an external XML section into this element tree . `source` is a file name or file object .", "question_id": 12525, "for": 89228, "retrieval_score": 9.372613}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003, "for": 89228, "retrieval_score": 9.03601}
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695, "for": 16566069, "retrieval_score": 16.98973}
{"snippet": "robot_file_parser.set_url(url)", "intent": "Sets the URL referring to a robots.txt file . With arguments `url`.", "question_id": 11909, "for": 16566069, "retrieval_score": 15.409864}
{"snippet": "urllib.parse.urljoin(base, url, allow_fragments=True)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) . The `allow_fragments` argument has the same meaning and default as for urlparse ( ) .", "question_id": 11696, "for": 16566069, "retrieval_score": 15.24572}
{"snippet": "ur_lopener.retrieve(url)", "intent": "Retrieves the contents of `url` and places it in `filename` .", "question_id": 11896, "for": 16566069, "retrieval_score": 14.505194}
{"snippet": "ur_lopener.retrieve(url, filename=None)", "intent": "Retrieves the contents of `url` and places it in `filename` .", "question_id": 11897, "for": 16566069, "retrieval_score": 14.505194}
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695, "for": 16566069, "retrieval_score": 17.970728}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 16566069, "retrieval_score": 17.752035}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752, "for": 16566069, "retrieval_score": 16.980257}
{"snippet": "robot_file_parser.set_url(url)", "intent": "Sets the URL referring to a robots.txt file . With arguments `url`.", "question_id": 11909, "for": 16566069, "retrieval_score": 16.224789}
{"snippet": "urllib.parse.urljoin(base, url, allow_fragments=True)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) . The `allow_fragments` argument has the same meaning and default as for urlparse ( ) .", "question_id": 11696, "for": 16566069, "retrieval_score": 16.080944}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139, "for": 14750675, "retrieval_score": 11.5736885}
{"snippet": "string.ascii_lowercase", "intent": "The lowercase letters 'abcdefghijklmnopqrstuvwxyz'.", "question_id": 9508, "for": 14750675, "retrieval_score": 11.147922}
{"snippet": "string.ascii_uppercase", "intent": "The uppercase letters 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "question_id": 9509, "for": 14750675, "retrieval_score": 11.147922}
{"snippet": "mailbox.clear()", "intent": "Delete all messages from the mailbox .", "question_id": 5745, "for": 14750675, "retrieval_score": 10.937482}
{"snippet": "turtle.clear()", "intent": "Delete the turtle \u2019 s drawings from the screen .", "question_id": 10968, "for": 14750675, "retrieval_score": 10.367577}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 25292838, "retrieval_score": 14.362271}
{"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734, "for": 25292838, "retrieval_score": 13.223087}
{"snippet": "calendar.calendar(year)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class .", "question_id": 1011, "for": 25292838, "retrieval_score": 13.175051}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 25292838, "retrieval_score": 12.565402}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 25292838, "retrieval_score": 12.463225}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129, "for": 8459231, "retrieval_score": 18.024984}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460, "for": 8459231, "retrieval_score": 17.793856}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128, "for": 8459231, "retrieval_score": 17.124811}
{"snippet": "traceback.format_list(extracted_list)", "intent": "Given a list of tuples or FrameSummary objects as returned by extract_tb ( ) or extract_stack ( ) , return a list of strings ready for printing . With arguments `extracted_list`.", "question_id": 10775, "for": 8459231, "retrieval_score": 16.859694}
{"snippet": "Request.header_items()", "intent": "Return a list of tuples ( header_name , header_value ) of the Request headers .", "question_id": 11833, "for": 8459231, "retrieval_score": 16.774792}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225, "for": 4664850, "retrieval_score": 24.247746}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224, "for": 4664850, "retrieval_score": 21.033203}
{"snippet": "str.count(sub, start, end)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9182, "for": 4664850, "retrieval_score": 18.635592}
{"snippet": "str.count(sub, start)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9183, "for": 4664850, "retrieval_score": 18.635592}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 4664850, "retrieval_score": 18.635592}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225, "for": 4664850, "retrieval_score": 22.875502}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224, "for": 4664850, "retrieval_score": 19.893105}
{"snippet": "str.count(sub, start, end)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9182, "for": 4664850, "retrieval_score": 17.263348}
{"snippet": "str.count(sub, start)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9183, "for": 4664850, "retrieval_score": 17.263348}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 4664850, "retrieval_score": 17.263348}
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268, "for": 35005907, "retrieval_score": 14.226059}
{"snippet": "extension_file_loader.is_package(fullname)", "intent": "Returns True if the file path points to a package \u2019 s __init__ module based on EXTENSION_SUFFIXES . With arguments `fullname`.", "question_id": 4908, "for": 35005907, "retrieval_score": 10.790112}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 35005907, "retrieval_score": 10.561672}
{"snippet": "gettext.install(domain)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) .", "question_id": 4239, "for": 35005907, "retrieval_score": 10.172161}
{"snippet": "gettext.install(domain, localedir=None)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) .", "question_id": 4240, "for": 35005907, "retrieval_score": 10.172161}
{"snippet": "socket.SOCK_CLOEXEC", "intent": "These two constants, if defined, can be combined with the socket types and allow you to set some flags atomically (thus avoiding possible race conditions and the need for separate calls).", "question_id": 8563, "for": 18071222, "retrieval_score": 16.48241}
{"snippet": "socket.SOCK_NONBLOCK", "intent": "These two constants, if defined, can be combined with the socket types and allow you to set some flags atomically (thus avoiding possible race conditions and the need for separate calls).", "question_id": 8564, "for": 18071222, "retrieval_score": 16.48241}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820, "for": 18071222, "retrieval_score": 12.837563}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 18071222, "retrieval_score": 11.864949}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 18071222, "retrieval_score": 11.864949}
{"snippet": "dircmp.left_only", "intent": "Files and subdirectories only in a.", "question_id": 3772, "for": 13571134, "retrieval_score": 17.363382}
{"snippet": "dircmp.right_only", "intent": "Files and subdirectories only in b.", "question_id": 3773, "for": 13571134, "retrieval_score": 17.363382}
{"snippet": "urllib.request.ProxyHandler()", "intent": "Cause requests to go through a proxy .", "question_id": 11784, "for": 13571134, "retrieval_score": 16.97028}
{"snippet": "dircmp.common", "intent": "Files and subdirectories in both a and b.", "question_id": 3771, "for": 13571134, "retrieval_score": 16.458649}
{"snippet": "dircmp.left_list", "intent": "Files and subdirectories in a, filtered by hide and ignore.", "question_id": 3769, "for": 13571134, "retrieval_score": 15.643532}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135, "for": 652291, "retrieval_score": 17.72194}
{"snippet": "exit_stack.close()", "intent": "Immediately unwinds the callback stack , invoking callbacks in the reverse order of registration .", "question_id": 1631, "for": 652291, "retrieval_score": 16.08796}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 652291, "retrieval_score": 13.972804}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 652291, "retrieval_score": 13.77218}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271, "for": 652291, "retrieval_score": 13.260785}
{"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004, "for": 24076297, "retrieval_score": 12.152376}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005, "for": 24076297, "retrieval_score": 12.152376}
{"snippet": "window.addnstr(y, x, str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2006, "for": 24076297, "retrieval_score": 12.152376}
{"snippet": "window.addnstr(y, x, str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2007, "for": 24076297, "retrieval_score": 12.152376}
{"snippet": "example.indent", "intent": "The example\u2019s indentation in the containing string, i.e., the number of space characters that precede the example\u2019s first prompt.", "question_id": 2838, "for": 24076297, "retrieval_score": 11.428416}
{"snippet": "float.fromhex(s)", "intent": "Class method to return the float represented by a hexadecimal string s. The string `s` may have leading and trailing whitespace .", "question_id": 9150, "for": 14961562, "retrieval_score": 14.792426}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970, "for": 14961562, "retrieval_score": 14.074233}
{"snippet": "email_message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 3247, "for": 14961562, "retrieval_score": 14.074233}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 14961562, "retrieval_score": 13.644925}
{"snippet": "widget.index(item)", "intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "question_id": 10639, "for": 14961562, "retrieval_score": 13.209765}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644, "for": 176918, "retrieval_score": 17.36663}
{"snippet": "widget.index(item)", "intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "question_id": 10639, "for": 176918, "retrieval_score": 17.258064}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640, "for": 176918, "retrieval_score": 15.81452}
{"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648, "for": 176918, "retrieval_score": 15.396107}
{"snippet": "widget.insert(parent, index, **kw, iid=None)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . If `iid` is specified , it is used as the item identifier ; iid must not already exist in the tree . With arguments `**kw`.", "question_id": 10641, "for": 176918, "retrieval_score": 15.369768}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 104420, "retrieval_score": 22.374426}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 104420, "retrieval_score": 17.310913}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971, "for": 104420, "retrieval_score": 16.55531}
{"snippet": "email_message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 3248, "for": 104420, "retrieval_score": 16.55531}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175, "for": 104420, "retrieval_score": 16.503983}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 104420, "retrieval_score": 15.866804}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971, "for": 104420, "retrieval_score": 13.775877}
{"snippet": "email_message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 3248, "for": 104420, "retrieval_score": 13.775877}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660, "for": 104420, "retrieval_score": 13.478878}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 104420, "retrieval_score": 13.048948}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943, "for": 11066400, "retrieval_score": 22.83959}
{"snippet": "re.split(pattern, string, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . With arguments `flags`.", "question_id": 7945, "for": 11066400, "retrieval_score": 22.559553}
{"snippet": "re.sub(pattern, repl, string, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . With arguments `flags`.", "question_id": 7953, "for": 11066400, "retrieval_score": 20.551645}
{"snippet": "re.sub(pattern, repl, string)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` .", "question_id": 7951, "for": 11066400, "retrieval_score": 20.523733}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688, "for": 11066400, "retrieval_score": 20.505394}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 2052390, "retrieval_score": 21.755074}
{"snippet": "mailbox.get_message(key)", "intent": "Return a representation of the message corresponding to `key` as an instance of the appropriate format-specific Message subclass , or raise a KeyError exception if no such message exists .", "question_id": 5739, "for": 2052390, "retrieval_score": 18.71836}
{"snippet": "mailbox.get_bytes(key)", "intent": "Return a byte representation of the message corresponding to `key` , or raise a KeyError exception if no such message exists .", "question_id": 5740, "for": 2052390, "retrieval_score": 15.932741}
{"snippet": "mailbox.get_string(key)", "intent": "Return a string representation of the message corresponding to `key` , or raise a KeyError exception if no such message exists .", "question_id": 5741, "for": 2052390, "retrieval_score": 15.932741}
{"snippet": "mailbox.get_file(key)", "intent": "Return a file-like representation of the message corresponding to `key` , or raise a KeyError exception if no such message exists .", "question_id": 5742, "for": 2052390, "retrieval_score": 15.661398}
{"snippet": "mailbox.lock()", "intent": "Acquire an exclusive advisory lock on the mailbox so that other processes know not to modify it .", "question_id": 5751, "for": 2052390, "retrieval_score": 11.8344755}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164, "for": 2052390, "retrieval_score": 9.570901}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 2052390, "retrieval_score": 8.975816}
{"snippet": "collections.abc.Generator", "intent": "ABC for generator classes that implement the protocol defined in PEP 342 that extends iterators with the send(), throw() and close() methods.", "question_id": 1318, "for": 2052390, "retrieval_score": 8.897057}
{"snippet": "asyncio.ProactorEventLoop", "intent": "An event loop for Windows that uses \u201cI/O Completion Ports\u201d (IOCP).", "question_id": 343, "for": 2052390, "retrieval_score": 8.667634}
{"snippet": "mailbox.lock()", "intent": "Acquire an exclusive advisory lock on the mailbox so that other processes know not to modify it .", "question_id": 5751, "for": 2052390, "retrieval_score": 11.8344755}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164, "for": 2052390, "retrieval_score": 9.570901}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 2052390, "retrieval_score": 8.975816}
{"snippet": "collections.abc.Generator", "intent": "ABC for generator classes that implement the protocol defined in PEP 342 that extends iterators with the send(), throw() and close() methods.", "question_id": 1318, "for": 2052390, "retrieval_score": 8.897057}
{"snippet": "asyncio.ProactorEventLoop", "intent": "An event loop for Windows that uses \u201cI/O Completion Ports\u201d (IOCP).", "question_id": 343, "for": 2052390, "retrieval_score": 8.667634}
{"snippet": "email.message.MIMEPart(policy=default)", "intent": "This class represents a subpart of a MIME message . With arguments `policy`.", "question_id": 3312, "for": 2052390, "retrieval_score": 15.419483}
{"snippet": "email.message.MIMEPart()", "intent": "This class represents a subpart of a MIME message .", "question_id": 3311, "for": 2052390, "retrieval_score": 15.083211}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843, "for": 2052390, "retrieval_score": 13.518529}
{"snippet": "Panel.hidden()", "intent": "Returns True if the panel is hidden ( not visible ) , False otherwise .", "question_id": 2148, "for": 2052390, "retrieval_score": 13.424271}
{"snippet": "Node.removeChild(oldChild)", "intent": "Remove a child node . `oldChild` must be a child of this node ; if not , ValueError is raised .", "question_id": 12332, "for": 2052390, "retrieval_score": 13.157658}
{"snippet": "example.exc_msg", "intent": "The exception message generated by the example, if the example is expected to generate an exception; or None if it is not expected to generate an exception.", "question_id": 2836, "for": 2052390, "retrieval_score": 19.866003}
{"snippet": "base_server.handle_error(request, client_address)", "intent": "This function is called if the handle ( ) method of a RequestHandlerClass instance raises an exception . With arguments `request`, `client_address`.", "question_id": 8777, "for": 2052390, "retrieval_score": 19.635277}
{"snippet": "unittest.SkipTest(reason)", "intent": "This exception is raised to skip a test . With arguments `reason`.", "question_id": 11362, "for": 2052390, "retrieval_score": 16.2346}
{"snippet": "doctest.IGNORE_EXCEPTION_DETAIL", "intent": "When specified, an example that expects an exception passes if an exception of the expected type is raised, even if the exception detail does not match.", "question_id": 2756, "for": 2052390, "retrieval_score": 15.760062}
{"snippet": "doctest.UnexpectedException(test, example, exc_info)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` raised an unexpected exception . With arguments `test`, `exc_info`.", "question_id": 2906, "for": 2052390, "retrieval_score": 15.701682}
{"snippet": "zipfile.BadZipFile", "intent": "The error raised for bad ZIP files.", "question_id": 12778, "for": 2052390, "retrieval_score": 15.877682}
{"snippet": "email.headerregistry.DateHeader", "intent": "RFC 5322 specifies a very specific format for dates within email headers.", "question_id": 3156, "for": 2052390, "retrieval_score": 15.137635}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730, "for": 2052390, "retrieval_score": 15.071371}
{"snippet": "mailbox.MaildirMessage()", "intent": "A `message` with Maildir-specific behaviors .", "question_id": 5811, "for": 2052390, "retrieval_score": 14.758179}
{"snippet": "mailbox.MaildirMessage(message=None)", "intent": "A `message` with Maildir-specific behaviors .", "question_id": 5812, "for": 2052390, "retrieval_score": 14.758179}
{"snippet": "mailbox.MaildirMessage()", "intent": "A `message` with Maildir-specific behaviors .", "question_id": 5811, "for": 2052390, "retrieval_score": 18.429825}
{"snippet": "mailbox.MaildirMessage(message=None)", "intent": "A `message` with Maildir-specific behaviors .", "question_id": 5812, "for": 2052390, "retrieval_score": 18.429825}
{"snippet": "mailbox.mboxMessage()", "intent": "A `message` with mbox-specific behaviors .", "question_id": 5823, "for": 2052390, "retrieval_score": 18.429825}
{"snippet": "mailbox.mboxMessage(message=None)", "intent": "A `message` with mbox-specific behaviors .", "question_id": 5824, "for": 2052390, "retrieval_score": 18.429825}
{"snippet": "mailbox.MHMessage()", "intent": "A `message` with MH-specific behaviors .", "question_id": 5832, "for": 2052390, "retrieval_score": 18.429825}
{"snippet": "turtle.back(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10905, "for": 2052390, "retrieval_score": 17.27239}
{"snippet": "turtle.bk(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10906, "for": 2052390, "retrieval_score": 17.27239}
{"snippet": "turtle.backward(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10907, "for": 2052390, "retrieval_score": 17.27239}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903, "for": 2052390, "retrieval_score": 16.8918}
{"snippet": "turtle.fd(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10904, "for": 2052390, "retrieval_score": 16.8918}
{"snippet": "widget.identify(x, y)", "intent": "Returns the name of the element at position `x` `y` , or the empty string if the point does not lie within any element .", "question_id": 10592, "for": 7732125, "retrieval_score": 14.621028}
{"snippet": "bytes.istitle()", "intent": "Return true if the sequence is ASCII titlecase and the sequence is not empty , false otherwise .", "question_id": 9393, "for": 7732125, "retrieval_score": 11.9176855}
{"snippet": "bytearray.istitle()", "intent": "Return true if the sequence is ASCII titlecase and the sequence is not empty , false otherwise .", "question_id": 9394, "for": 7732125, "retrieval_score": 11.9176855}
{"snippet": "widget.identify(x, y)", "intent": "Returns the name of the tab element at position `x` , `y` , or the empty string if none .", "question_id": 10606, "for": 7732125, "retrieval_score": 11.8138}
{"snippet": "decimal.Context(flags=None)", "intent": "Creates a new context . If the `flags` field is not specified or is None , all flags are cleared .", "question_id": 2506, "for": 7732125, "retrieval_score": 11.61324}
{"snippet": "FTP_TLS.prot_c()", "intent": "Set up clear text data connection .", "question_id": 3972, "for": 7732125, "retrieval_score": 13.6752}
{"snippet": "FileCookieJar.revert(filename=None)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `filename`.", "question_id": 4515, "for": 7732125, "retrieval_score": 11.131696}
{"snippet": "FileCookieJar.revert(ignore_discard=False)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `ignore_discard`.", "question_id": 4516, "for": 7732125, "retrieval_score": 11.131696}
{"snippet": "FileCookieJar.revert(ignore_expires=False)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `ignore_expires`.", "question_id": 4517, "for": 7732125, "retrieval_score": 11.131696}
{"snippet": "FileCookieJar.revert(filename=None, ignore_discard=False)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `filename`, `ignore_discard`.", "question_id": 4518, "for": 7732125, "retrieval_score": 10.880889}
{"snippet": "socket.inet_pton(address_family, ip_string)", "intent": "Convert an IP address from its family-specific string format to a packed , binary format . Supported values for `address_family` are currently AF_INET and AF_INET6 . If the IP address string `ip_string` is invalid , OSError will be raised .", "question_id": 8663, "for": 9590965, "retrieval_score": 14.526324}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001, "for": 9590965, "retrieval_score": 13.545989}
{"snippet": "complex()", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4002, "for": 9590965, "retrieval_score": 13.545989}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 9590965, "retrieval_score": 11.484909}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000, "for": 9590965, "retrieval_score": 10.794979}
{"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919, "for": 12329853, "retrieval_score": 26.0259}
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333, "for": 12329853, "retrieval_score": 25.785194}
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917, "for": 12329853, "retrieval_score": 24.732458}
{"snippet": "context.rotate(x, y)", "intent": "Returns a rotated copy of `x` , `y` times .", "question_id": 2567, "for": 12329853, "retrieval_score": 24.401014}
{"snippet": "context.shift(x, y)", "intent": "Returns a shifted copy of `x` , `y` times .", "question_id": 2570, "for": 12329853, "retrieval_score": 24.401014}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018, "for": 19205916, "retrieval_score": 17.261623}
{"snippet": "asyncio.SubprocessProtocol(BaseProtocol)", "intent": "The base class for implementing protocols communicating with child processes ( unidirectional pipes ) . With arguments `BaseProtocol`.", "question_id": 430, "for": 19205916, "retrieval_score": 16.689892}
{"snippet": "gettext.GNUTranslations", "intent": "The following methods are overridden from the base class implementation:", "question_id": 4260, "for": 19205916, "retrieval_score": 15.565033}
{"snippet": "datetime.timezone", "intent": "A class that implements the tzinfo abstract base class as a fixed offset from the UTC.", "question_id": 2203, "for": 19205916, "retrieval_score": 15.51224}
{"snippet": "subprocess.SubprocessError", "intent": "Base class for all other exceptions from this module.", "question_id": 9586, "for": 19205916, "retrieval_score": 15.4494}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 4880960, "retrieval_score": 16.931786}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 4880960, "retrieval_score": 14.909272}
{"snippet": "bound_arguments.kwargs", "intent": "A dict of keyword arguments values.", "question_id": 5005, "for": 4880960, "retrieval_score": 14.420143}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244, "for": 4880960, "retrieval_score": 14.216282}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293, "for": 4880960, "retrieval_score": 13.739101}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892, "for": 4880960, "retrieval_score": 16.931786}
{"snippet": "bound_arguments.kwargs", "intent": "A dict of keyword arguments values.", "question_id": 5005, "for": 4880960, "retrieval_score": 14.420143}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244, "for": 4880960, "retrieval_score": 14.216282}
{"snippet": "shelve.Shelf(dict, writeback=False)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times .", "question_id": 8246, "for": 4880960, "retrieval_score": 13.18287}
{"snippet": "resource.RUSAGE_SELF", "intent": "Pass to getrusage() to request resources consumed by the calling process, which is the sum of resources used by all threads in the process.", "question_id": 8097, "for": 4880960, "retrieval_score": 12.41181}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328, "for": 14661051, "retrieval_score": 16.372938}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322, "for": 14661051, "retrieval_score": 16.340591}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140, "for": 14661051, "retrieval_score": 14.794095}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333, "for": 14661051, "retrieval_score": 14.76116}
{"snippet": "json.JSONEncoder(default=None)", "intent": "Extensible JSON encoder for Python data structures . Supports the following objects and types by `default` :", "question_id": 5330, "for": 14661051, "retrieval_score": 13.460144}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372, "for": 23638638, "retrieval_score": 23.55389}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934, "for": 23638638, "retrieval_score": 16.83132}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935, "for": 23638638, "retrieval_score": 16.83132}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136, "for": 23638638, "retrieval_score": 15.054022}
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133, "for": 23638638, "retrieval_score": 14.881225}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271, "for": 35078261, "retrieval_score": 23.824726}
{"snippet": "pwd.getpwall()", "intent": "Return a list of all available password database entries , in arbitrary order .", "question_id": 7705, "for": 35078261, "retrieval_score": 23.262604}
{"snippet": "spwd.getspall()", "intent": "Return a list of all available shadow password database entries , in arbitrary order .", "question_id": 8790, "for": 35078261, "retrieval_score": 22.726395}
{"snippet": "scheduler.queue", "intent": "Read-only attribute returning a list of upcoming events in the order they will be run.", "question_id": 8130, "for": 35078261, "retrieval_score": 21.256493}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853, "for": 35078261, "retrieval_score": 18.499353}
{"snippet": "PurePath.drive", "intent": "A string representing the drive letter or name, if any:", "question_id": 7244, "for": 4223923, "retrieval_score": 12.4615755}
{"snippet": "Packer.pack_string(s)", "intent": "Packs a variable length string , s. The length of the string is first packed as an unsigned integer , then the string data is packed with pack_fstring ( ) . With arguments `s`.", "question_id": 12279, "for": 4223923, "retrieval_score": 11.821011}
{"snippet": "base64.b32decode(s, map01=None)", "intent": "Decode the Base32 encoded bytes-like object or ASCII string `s` and return the decoded bytes . The optional argument `map01` when not None , specifies which letter the digit 1 should be mapped to ( when map01 is not None , the digit 0 is always mapped to the letter O ) .", "question_id": 721, "for": 4223923, "retrieval_score": 11.382847}
{"snippet": "message.get_param(param, unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2994, "for": 4223923, "retrieval_score": 11.223809}
{"snippet": "message.get_param(param, header='content-type', unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2997, "for": 4223923, "retrieval_score": 11.223809}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694, "for": 2597932, "retrieval_score": 22.374426}
{"snippet": "audioop.add(fragment1, fragment2, width)", "intent": "Return a fragment which is the addition of the two samples passed as parameters . `width` is the sample width in bytes , either 1 , 2 , 3 or 4 . With arguments `fragment1`, `fragment2`.", "question_id": 680, "for": 2597932, "retrieval_score": 18.079435}
{"snippet": "Class.methods", "intent": "A dictionary mapping method names to line numbers.", "question_id": 7723, "for": 2597932, "retrieval_score": 16.627462}
{"snippet": "locale.LC_NUMERIC", "intent": "Locale category for formatting numbers.", "question_id": 5409, "for": 2597932, "retrieval_score": 16.624384}
{"snippet": "parse_error.position", "intent": "A tuple of line, column numbers, specifying where the error occurred.", "question_id": 12563, "for": 2597932, "retrieval_score": 16.493965}
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440, "for": 26541968, "retrieval_score": 20.580297}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 26541968, "retrieval_score": 20.04914}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 26541968, "retrieval_score": 20.04914}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 26541968, "retrieval_score": 17.058779}
{"snippet": "bytes.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9278, "for": 26541968, "retrieval_score": 16.241182}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767, "for": 33065588, "retrieval_score": 23.417833}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068, "for": 33065588, "retrieval_score": 21.754871}
{"snippet": "trace.runctx(cmd)", "intent": "Execute the command and gather statistics from the execution with the current tracing parameters , in the defined global and local environments . With arguments `cmd`.", "question_id": 10717, "for": 33065588, "retrieval_score": 16.225946}
{"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750, "for": 33065588, "retrieval_score": 15.511269}
{"snippet": "os.popen(cmd)", "intent": "Open a pipe to or from command `cmd` .", "question_id": 7041, "for": 33065588, "retrieval_score": 15.344946}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617, "for": 775296, "retrieval_score": 18.280758}
{"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618, "for": 775296, "retrieval_score": 18.280758}
{"snippet": "POP3.capa()", "intent": "Query the server \u2019 s capabilities as specified in RFC 2449 .", "question_id": 7603, "for": 775296, "retrieval_score": 13.867097}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675, "for": 775296, "retrieval_score": 13.5999155}
{"snippet": "json_decoder.raw_decode(s)", "intent": "Decode a JSON document from `s` ( a str beginning with a JSON document ) and return a 2-tuple of the Python representation and the index in s where the document ended .", "question_id": 5321, "for": 775296, "retrieval_score": 13.417926}
{"snippet": "imaplib.Internaldate2tuple(datestr)", "intent": "Parse an IMAP4 INTERNALDATE string and return corresponding local time . With arguments `datestr`.", "question_id": 4687, "for": 5868374, "retrieval_score": 18.96491}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891, "for": 5868374, "retrieval_score": 18.745821}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 5868374, "retrieval_score": 17.940475}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 5868374, "retrieval_score": 17.371155}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455, "for": 5868374, "retrieval_score": 14.627673}
