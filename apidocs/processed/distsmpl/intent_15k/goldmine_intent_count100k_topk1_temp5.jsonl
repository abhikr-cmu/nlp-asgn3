{"snippet": "zipfile.BadZipfile", "intent": "Alias of BadZipFile, for compatibility with older Python versions.", "question_id": 12779}
{"snippet": "errno.ECOMM", "intent": "Communication error on send", "question_id": 3575}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "POP3.capa()", "intent": "Query the server \u2019 s capabilities as specified in RFC 2449 .", "question_id": 7603}
{"snippet": "contextlib.AbstractContextManager", "intent": "An abstract base class for classes that implement object.__enter__() and object.__exit__().", "question_id": 1615}
{"snippet": "queue_listener.debug(msg, *args, **kwargs)", "intent": "Logs a message with level DEBUG on this logger . The `msg` is the message format string , and the args are the arguments which are merged into msg using the string formatting operator . With arguments `*args`, `**kwargs`.", "question_id": 5570}
{"snippet": "socketserver.TCPServer(server_address, RequestHandlerClass)", "intent": "This uses the Internet TCP protocol , which provides for continuous streams of data between the client and server . With arguments `server_address`, `RequestHandlerClass`.", "question_id": 8745}
{"snippet": "asyncio.subprocess.DEVNULL", "intent": "Special value that can be used as the stdin, stdout or stderr argument to process creation functions.", "question_id": 545}
{"snippet": "itertools.combinations_with_replacement(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` allowing individual elements to be repeated more than once .", "question_id": 5244}
{"snippet": "widget.xview(*args)", "intent": "Query or modify horizontal position of the treeview . With arguments `*args`.", "question_id": 10670}
{"snippet": "ctypes.WinError(code=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `code` is not specified , GetLastError is called to determine the error code .", "question_id": 1837}
{"snippet": "secrets.SystemRandom", "intent": "A class for generating random numbers using the highest-quality sources provided by the operating system.", "question_id": 8131}
{"snippet": "Cookie.rfc2109", "intent": "True if this cookie was received as an RFC 2109 cookie (ie.", "question_id": 4567}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "SSLContext.set_ecdh_curve(curve_name)", "intent": "Set the curve name for Elliptic Curve-based Diffie-Hellman ( ECDH ) key exchange . The `curve_name` parameter should be a string describing a well-known elliptic curve , for example prime256v1 for a widely supported curve .", "question_id": 9021}
{"snippet": "test.support.SaveSignals", "intent": "Class to save and restore signal handlers registered by the Python signal handler.", "question_id": 10292}
{"snippet": "test_suite.addTests(tests)", "intent": "Add all the `tests` from an iterable of TestCase and TestSuite instances to this test suite .", "question_id": 11484}
{"snippet": "oss_audio_device.read(size)", "intent": "Read `size` bytes from the audio input and return them as a Python string .", "question_id": 7180}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892}
{"snippet": "@unittest.skip(reason)", "intent": "Unconditionally skip the decorated test . `reason` should describe why the test is being skipped .", "question_id": 11358}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832}
{"snippet": "os.POSIX_FADV_NORMAL", "intent": "Flags that can be used in advice in posix_fadvise() that specify the access pattern that is likely to be used.", "question_id": 6777}
{"snippet": "UnknownHandler.unknown_open()", "intent": "Raise a URLError exception .", "question_id": 11878}
{"snippet": "window.cursyncup()", "intent": "Update the current cursor position of all the ancestors of the window to reflect the current cursor position of the window .", "question_id": 2038}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348}
{"snippet": "audioop.minmax(fragment, width)", "intent": "Return a tuple consisting of the minimum and maximum values of all samples in the sound `fragment` . With arguments `width`.", "question_id": 698}
{"snippet": "DatagramProtocol.error_received(exc)", "intent": "Called when a previous send or receive operation raises an OSError . `exc` is the OSError instance .", "question_id": 441}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298}
{"snippet": "dircmp.left_list", "intent": "Files and subdirectories in a, filtered by hide and ignore.", "question_id": 3769}
{"snippet": "sys.abiflags", "intent": "On POSIX systems where Python was built with the standard configure script, this contains the ABI flags as specified by PEP 3149.", "question_id": 9766}
{"snippet": "time.ctime()", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time .", "question_id": 10439}
{"snippet": "pdb.pm()", "intent": "Enter post-mortem debugging of the traceback found in sys.last_traceback .", "question_id": 7340}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "text_wrapper.width", "intent": "(default: 70) The maximum length of wrapped lines.", "question_id": 10327}
{"snippet": "logging.config.listen()", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations .", "question_id": 5416}
{"snippet": "unittest.SkipTest(reason)", "intent": "This exception is raised to skip a test . With arguments `reason`.", "question_id": 11362}
{"snippet": "socket.inet_pton(address_family, ip_string)", "intent": "Convert an IP address from its family-specific string format to a packed , binary format . Supported values for `address_family` are currently AF_INET and AF_INET6 . If the IP address string `ip_string` is invalid , OSError will be raised .", "question_id": 8663}
{"snippet": "curses.flash()", "intent": "Flash the screen .", "question_id": 1935}
{"snippet": "contextlib.ExitStack", "intent": "A context manager that is designed to make it easy to programmatically combine other context managers and cleanup functions, especially those that are optional or otherwise driven by input data.", "question_id": 1626}
{"snippet": "writer.send_flowing_data(data)", "intent": "Output character `data` which may be word-wrapped and re-flowed as needed .", "question_id": 3850}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470}
{"snippet": "logging.handlers.HTTPHandler(host, url, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5544}
{"snippet": "SMTP.login(user, password, initial_response_ok=True)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . `initial_response_ok` is passed through to auth ( ) . With arguments `user`.", "question_id": 8523}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952}
{"snippet": "tkinter.tix.Form", "intent": "The Form geometry manager based on attachment rules for all Tk widgets.", "question_id": 10578}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "context.normalize(x)", "intent": "Reduces `x` to its simplest form .", "question_id": 2558}
{"snippet": "json.load(fp, **kw)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5290}
{"snippet": "aifc.getparams()", "intent": "Returns a namedtuple ( ) ( nchannels , sampwidth , framerate , nframes , comptype , compname ) , equivalent to output of the get* ( ) methods .", "question_id": 17}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584}
{"snippet": "tarfile.TarFile", "intent": "Class for reading and writing tar archives.", "question_id": 9900}
{"snippet": "policy.header_source_parse(sourcelines)", "intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "question_id": 3423}
{"snippet": "asyncio.run_coroutine_threadsafe(coro, loop)", "intent": "Submit a coroutine to the given event `loop` . With arguments `coro`.", "question_id": 619}
{"snippet": "email.utils.format_datetime(dt, usegmt=False)", "intent": "Like formatdate , but the input is a datetime instance . If it is an aware timezone with offset zero , then `usegmt` may be set to True , in which case the string GMT is used instead of the numeric timezone offset . With arguments `dt`.", "question_id": 3477}
{"snippet": "element.find(match, namespaces=None)", "intent": "Finds the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12492}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "copy.copy(x)", "intent": "Return a shallow copy of `x` .", "question_id": 1661}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "ctypes._Pointer", "intent": "Private, abstract base class for pointers.", "question_id": 1896}
{"snippet": "oss_audio_device.setfmt(format)", "intent": "Try to set the current audio `format` to format\u2014see getfmts ( ) for a list .", "question_id": 7185}
{"snippet": "condition.notify_all()", "intent": "Wake up all tasks waiting on this condition .", "question_id": 577}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "os.statvfs(path)", "intent": "Perform a statvfs ( ) system call on the given `path` .", "question_id": 6946}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "kevent.filter", "intent": "Name of the kernel filter.", "question_id": 8204}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "modulefinder.ModuleFinder()", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script .", "question_id": 6025}
{"snippet": "winsound.SND_NOSTOP", "intent": "Do not interrupt sounds currently playing.", "question_id": 12203}
{"snippet": "tree_builder.start(tag, attrs)", "intent": "Opens a new element . `tag` is the element name . `attrs` is a dictionary containing element attributes .", "question_id": 12544}
{"snippet": "widget.selection_toggle(*items)", "intent": "Toggle the selection state of each item in items . With arguments `*items`.", "question_id": 10657}
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763}
{"snippet": "tkinter.tix.ButtonBox", "intent": "The ButtonBox widget creates a box of buttons, such as is commonly used for Ok Cancel.", "question_id": 10553}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "test_case.run()", "intent": "Run the test , collecting the `result` into the TestResult object passed as result .", "question_id": 11369}
{"snippet": "simple_http_request_handler.do_GET()", "intent": "The request is mapped to a local file by interpreting the request as a path relative to the current working directory .", "question_id": 4665}
{"snippet": "@test.support.requires_docstrings", "intent": "Decorator for only running the test if HAVE_DOCSTRINGS.", "question_id": 10220}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "ssl.create_default_context(cafile=None)", "intent": "Return a new SSLContext object with default settings for the given `purpose` . `cafile` , `capath` , `cadata` represent optional CA certificates to trust for certificate verification , as in SSLContext.load_verify_locations ( ) .", "question_id": 8865}
{"snippet": "types.MethodType", "intent": "The type of methods of user-defined class instances.", "question_id": 11189}
{"snippet": "winsound.SND_NOSTOP", "intent": "Do not interrupt sounds currently playing.", "question_id": 12203}
{"snippet": "errno.ENOTUNIQ", "intent": "Name not unique on network", "question_id": 3581}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "logging.captureWarnings(capture)", "intent": "This function is used to turn the `capture` of warnings by logging on and off .", "question_id": 5654}
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "sys.exec_prefix", "intent": "A string giving the site-specific directory prefix where the platform-dependent Python files are installed; by default, this is also '/usr/local'.", "question_id": 9786}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD", "intent": "An operation was requested that requires DTD support to be compiled in, but Expat was configured without DTD support.", "question_id": 7808}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "uuid.RESERVED_MICROSOFT", "intent": "Reserved for Microsoft compatibility.", "question_id": 11970}
{"snippet": "@importlib.util.module_for_loader", "intent": "A decorator for importlib.abc.Loader.load_module() to handle selecting the proper module object to load with.", "question_id": 4931}
{"snippet": "gettext.translation(domain)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "question_id": 4229}
{"snippet": "cmath.pi", "intent": "The mathematical constant \u03c0, as a float.", "question_id": 1120}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164}
{"snippet": "importlib.machinery.BuiltinImporter", "intent": "An importer for built-in modules.", "question_id": 4871}
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106}
{"snippet": "netrc.hosts", "intent": "Dictionary mapping host names to (login, account, password) tuples.", "question_id": 6389}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "maildir_message.add_flag(flag)", "intent": "Set the `flag` ( s ) specified by flag without changing other flags .", "question_id": 5817}
{"snippet": "curses.flash()", "intent": "Flash the screen .", "question_id": 1935}
{"snippet": "test.support.PIPE_MAX_SIZE", "intent": "A constant that is likely larger than the underlying OS pipe buffer size, to make writes blocking.", "question_id": 10124}
{"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037}
{"snippet": "ctypes.Union(*args, **kw)", "intent": "Abstract base class for unions in native byte order . With arguments `*args`, `**kw`.", "question_id": 1886}
{"snippet": "OpenerDirector.open(url)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11837}
{"snippet": "signal.pthread_kill(thread_id, signalnum)", "intent": "Send the signal `signalnum` to the thread `thread_id` , another thread in the same process as the caller .", "question_id": 8389}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "auto.args", "intent": "The tuple of arguments given to the exception constructor.", "question_id": 3629}
{"snippet": "platform.system()", "intent": "Returns the system/OS name , e.g .", "question_id": 7481}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927}
{"snippet": "nis.cat(mapname, domain=default_domain)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value . The `domain` argument allows overriding the NIS domain used for the lookup .", "question_id": 6394}
{"snippet": "Queue.get(block=True)", "intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 7855}
{"snippet": "dataclasses.field(default=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function .", "question_id": 2168}
{"snippet": "WriteTransport.get_write_buffer_limits()", "intent": "Get the high and low watermarks for write flow control .", "question_id": 408}
{"snippet": "tempfile.tempdir", "intent": "When set to a value other than None, this variable defines the default value for the dir argument to the functions defined in this module.", "question_id": 10093}
{"snippet": "platform.system()", "intent": "Returns the system/OS name , e.g .", "question_id": 7481}
{"snippet": "os.readv(fd, buffers)", "intent": "Read from a file descriptor `fd` into a number of mutable bytes-like objects `buffers` .", "question_id": 6805}
{"snippet": "finder.find_module(fullname)", "intent": "An abstract method for finding a loader for the specified module . With arguments `fullname`.", "question_id": 4800}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "NNTP.newnews(group, date, file=None)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) . With arguments `file`.", "question_id": 6464}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "hash.hexdigest()", "intent": "Like digest ( ) except the digest is returned as a string object of double length , containing only hexadecimal digits .", "question_id": 4306}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6794}
{"snippet": "IMAP4.xatom()", "intent": "Allow simple extension commands notified by server in CAPABILITY response .", "question_id": 4753}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164}
{"snippet": "SSLSocket.version()", "intent": "Return the actual SSL protocol version negotiated by the connection as a string , or None is no secure connection is established .", "question_id": 8988}
{"snippet": "Cmd.cmdqueue", "intent": "A list of queued input lines.", "question_id": 1148}
{"snippet": "os.getsid(pid)", "intent": "Call the system call getsid ( ) . With arguments `pid`.", "question_id": 6704}
{"snippet": "locale.strxfrm(string)", "intent": "Transforms a `string` to one that can be used in locale-aware comparisons .", "question_id": 5383}
{"snippet": "json.dump(obj, fp, **kw)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . With arguments `**kw`.", "question_id": 5270}
{"snippet": "shutil.copyfileobj(fsrc, fdst)", "intent": "Copy the contents of the file-like object `fsrc` to the file-like object `fdst` .", "question_id": 8310}
{"snippet": "dbm.open(file, mode=0o666)", "intent": "Open the database `file` file and return a corresponding object . The optional `mode` argument is the Unix mode of the file , used only when the database has to be created .", "question_id": 2368}
{"snippet": "dict(mapping, **kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . If a positional argument is given and it is a `mapping` object , a dictionary is created with the same key-value pairs as the mapping object . With arguments `**kwarg`.", "question_id": 9468}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013}
{"snippet": "email_policy.fold(name, value)", "intent": "Header folding is controlled by the refold_source policy setting . A `value` is considered to be a \u2018 source value \u2019 if and only if it does not have a `name` attribute ( having a name attribute means it is a header object of some sort ) .", "question_id": 3437}
{"snippet": "loop.stop()", "intent": "Stop the event loop .", "question_id": 184}
{"snippet": "float.hex()", "intent": "Return a representation of a floating-point number as a hexadecimal string .", "question_id": 9149}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "gdbm.close()", "intent": "Close the gdbm database .", "question_id": 2378}
{"snippet": "sysconfig.is_python_build()", "intent": "Return True if the running Python interpreter was built from source and is being run from its built location , and not from a location resulting from e.g .", "question_id": 9872}
{"snippet": "curses.typeahead(fd)", "intent": "Specify that the file descriptor `fd` be used for typeahead checking .", "question_id": 1991}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357}
{"snippet": "curses.def_prog_mode()", "intent": "Save the current terminal mode as the \u201c program \u201d mode , the mode when the running program is using curses .", "question_id": 1927}
{"snippet": "symbol_table.get_identifiers()", "intent": "Return a list of names of symbols in this table .", "question_id": 9742}
{"snippet": "dialog.line(name, x, y, width, height)", "intent": "Add and return a Line control . With arguments `name`, `x`, `y`, `width`, `height`.", "question_id": 6139}
{"snippet": "sequence_matcher.ratio()", "intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "question_id": 2687}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "window.refresh(pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol)", "intent": "Update the display immediately ( sync actual screen with previous drawing/deleting methods ) . `pminrow` and `pmincol` specify the upper left-hand corner of the rectangle to be displayed in the pad . `sminrow` , `smincol` , `smaxrow` , and `smaxcol` specify the edges of the rectangle to be displayed on the screen .", "question_id": 2106}
{"snippet": "Pattern.pattern", "intent": "The pattern string from which the pattern object was compiled.", "question_id": 7994}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "zipfile.ZipFile(file, compression=ZIP_STORED, compresslevel=None)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "question_id": 12801}
{"snippet": "importlib.machinery.SourceFileLoader(fullname, path)", "intent": "A concrete implementation of importlib.abc.SourceLoader by subclassing importlib.abc.FileLoader and providing some concrete implementations of other methods . With arguments `fullname`, `path`.", "question_id": 4889}
{"snippet": "winreg.ExpandEnvironmentStrings(str)", "intent": "Expands environment variable placeholders % NAME % in strings like REG_EXPAND_SZ : With arguments `str`.", "question_id": 12135}
{"snippet": "InteractiveInterpreter.write(data)", "intent": "Write a string to the standard error stream ( sys.stderr ) . With arguments `data`.", "question_id": 1183}
{"snippet": "multiprocessing.log_to_stderr()", "intent": "This function performs a call to get_logger ( ) but in addition to returning the logger created by get_logger , it adds a handler which sends output to sys.stderr using format ' [ % ( levelname ) s/ % ( processName ) s ] % ( message ) s ' .", "question_id": 6383}
{"snippet": "locale.YESEXPR", "intent": "Get a regular expression that can be used with the regex function to recognize a positive response to a yes/no question.", "question_id": 5365}
{"snippet": "exit_stack.callback(callback, *args, **kwds)", "intent": "Accepts an arbitrary `callback` function and arguments and adds it to the callback stack . With arguments `*args`, `**kwds`.", "question_id": 1629}
{"snippet": "iterator.__next__()", "intent": "Return the next item from the container .", "question_id": 9153}
{"snippet": "PurePath.parts", "intent": "A tuple giving access to the path\u2019s various components:", "question_id": 7243}
{"snippet": "resource.RLIMIT_CPU", "intent": "The maximum amount of processor time (in seconds) that a process can use.", "question_id": 8076}
{"snippet": "task.cancel()", "intent": "Request the Task to be cancelled .", "question_id": 626}
{"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}
{"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}
{"snippet": "queue_listener.prepare(record)", "intent": "Prepare a `record` for handling .", "question_id": 5560}
{"snippet": "tkinter.tix.NoteBook", "intent": "The NoteBook widget can be used to display many windows in a limited space using a notebook metaphor.", "question_id": 10576}
{"snippet": "stringprep.in_table_c4(code)", "intent": "Determine whether `code` is in tableC.4 ( Non-character code points ) .", "question_id": 9542}
{"snippet": "window.attrset(attr)", "intent": "Set the \u201c background \u201d set of attributes to `attr` .", "question_id": 2014}
{"snippet": "cmath.sin(x)", "intent": "Return the sine of `x` .", "question_id": 1105}
{"snippet": "csvreader.__next__()", "intent": "Return the next row of the reader \u2019 s iterable object as a list ( if the object was returned from reader ( ) ) or a dict ( if it is a DictReader instance ) , parsed according to the current dialect .", "question_id": 1731}
{"snippet": "sysconfig.get_python_version()", "intent": "Return the MAJOR.MINOR Python version number as a string .", "question_id": 9870}
{"snippet": "decimal.Underflow", "intent": "Numerical underflow with result rounded to zero.", "question_id": 2593}
{"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}
{"snippet": "socketserver.BaseRequestHandler", "intent": "This is the superclass of all request handler objects.", "question_id": 8783}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "ZipInfo.extra", "intent": "Expansion field data.", "question_id": 12867}
{"snippet": "context.logical_invert(x)", "intent": "Invert all the digits in `x` .", "question_id": 2546}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "test_result.addSkip(test, reason)", "intent": "Called when the `test` case test is skipped . `reason` is the reason the test gave for skipping .", "question_id": 11527}
{"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "winreg.KEY_WOW64_64KEY", "intent": "Indicates that an application on 64-bit Windows should operate on the 64-bit registry view.", "question_id": 12172}
{"snippet": "json_decoder.decode(s)", "intent": "Return the Python representation of `s` ( a str instance containing a JSON document ) .", "question_id": 5320}
{"snippet": "AU_read.getsampwidth()", "intent": "Returns sample width in bytes .", "question_id": 9709}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH", "intent": "An end tag did not match the innermost open start tag.", "question_id": 7802}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)", "intent": "Return a Request or None in response to a redirect . If a redirection should take place , return a new Request to allow http_error_30* ( ) to perform the redirect to `newurl` . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11850}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "auto.reason", "intent": "A string describing the specific codec error.", "question_id": 3675}
{"snippet": "termios.tcflow(fd, action)", "intent": "Suspend or resume input or output on file descriptor `fd` . The `action` argument can be TCOOFF to suspend output , TCOON to restart output , TCIOFF to suspend input , or TCION to restart input .", "question_id": 10107}
{"snippet": "Cookie.rfc2109", "intent": "True if this cookie was received as an RFC 2109 cookie (ie.", "question_id": 4567}
{"snippet": "email.headerregistry.HeaderRegistry(base_class=BaseHeader)", "intent": "This is the factory used by EmailPolicy by default . HeaderRegistry builds the class used to create a header instance dynamically , using `base_class` and a specialized class retrieved from a registry that it holds .", "question_id": 3176}
{"snippet": "widget.selection_add(*items)", "intent": "Add items to the selection . With arguments `*items`.", "question_id": 10655}
{"snippet": "test.support.script_helper.run_python_until_end(*args, **env_vars)", "intent": "Set up the environment based on env_vars for running the interpreter in a subprocess . With arguments `*args`, `**env_vars`.", "question_id": 10300}
{"snippet": "Cmd.completedefault(text, line, begidx, endidx)", "intent": "Method called to complete an input `line` when no command-specific complete_* ( ) method is available . With arguments `text`, `begidx`, `endidx`.", "question_id": 1140}
{"snippet": "datetime.date()", "intent": "Return date object with same year , month and day .", "question_id": 2281}
{"snippet": "queue_listener.prepare(record)", "intent": "Prepare a `record` for handling .", "question_id": 5560}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258}
{"snippet": "email.utils.formatdate()", "intent": "Returns a date string as per RFC 2822 , e.g .", "question_id": 3468}
{"snippet": "base_manager.connect()", "intent": "Connect a local manager object to a remote manager process :", "question_id": 6286}
{"snippet": "@typing.type_check_only", "intent": "Decorator to mark a class or function to be unavailable at runtime.", "question_id": 11330}
{"snippet": "xml.etree.ElementTree.ElementTree()", "intent": "ElementTree wrapper class .", "question_id": 12507}
{"snippet": "Node.toxml(encoding=None)", "intent": "Return a string or byte string containing the XML represented by the DOM node . With an explicit `encoding` 1 argument , the result is a byte string in the specified encoding .", "question_id": 12412}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855}
{"snippet": "stat.UF_HIDDEN", "intent": "The file should not be displayed in a GUI (Mac OS X 10.5+).", "question_id": 9119}
{"snippet": "collections.deque(iterable)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` .", "question_id": 1351}
{"snippet": "process.terminate()", "intent": "Stop the child process .", "question_id": 551}
{"snippet": "coverage_results.write_results(show_missing=True)", "intent": "Write coverage results . Set `show_missing` to show lines that had no hits .", "question_id": 10726}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "pyc_invalidation_mode.CHECKED_HASH", "intent": "The .pyc file includes a hash of the source file content, which Python will compare against the source at runtime to determine if the .pyc file needs to be regenerated.", "question_id": 7833}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970}
{"snippet": "extension_file_loader.get_source(fullname)", "intent": "Returns None as extension modules do not have source code . With arguments `fullname`.", "question_id": 4910}
{"snippet": "completed_process.args", "intent": "The arguments used to launch the process.", "question_id": 9578}
{"snippet": "str.isidentifier()", "intent": "Return true if the string is a valid identifier according to the language definition , section Identifiers and keywords .", "question_id": 9207}
{"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "filter(function, iterable)", "intent": "Construct an iterator from those elements of `iterable` for which `function` returns true .", "question_id": 4018}
{"snippet": "tracemalloc.get_object_traceback(obj)", "intent": "Get the traceback where the Python object `obj` was allocated .", "question_id": 10842}
{"snippet": "functools.reduce(function, iterable)", "intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . With arguments `iterable`.", "question_id": 4154}
{"snippet": "@unittest.skipIf(condition, reason)", "intent": "Skip the decorated test if `condition` is true . With arguments `reason`.", "question_id": 11359}
{"snippet": "message.get_charsets()", "intent": "Return a list containing the character set names in the message .", "question_id": 3024}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}
{"snippet": "getpass.getpass(stream=None)", "intent": "Prompt the user for a password without echoing . On Unix , the prompt is written to the file-like object `stream` using the replace error handler if needed .", "question_id": 4206}
{"snippet": "charset.__str__()", "intent": "Returns input_charset as a string coerced to lower case .", "question_id": 2923}
{"snippet": "context.minus(x)", "intent": "Minus corresponds to the unary prefix minus operator in Python . With arguments `x`.", "question_id": 2553}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "auto.object", "intent": "The object the codec was attempting to encode or decode.", "question_id": 3676}
{"snippet": "sys.hash_info", "intent": "A named tuple giving parameters of the numeric hash implementation.", "question_id": 9813}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "base_http_request_handler.flush_headers()", "intent": "Finally send the headers to the output stream and flush the internal headers buffer .", "question_id": 4647}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "asyncio.as_completed(aws)", "intent": "Run awaitable objects in the `aws` set concurrently .", "question_id": 615}
{"snippet": "window.mvwin(new_y, new_x)", "intent": "Move the window so its upper-left corner is at ( `new_y` , `new_x` ) .", "question_id": 2095}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "oss_audio_device.writeall(data)", "intent": "Write a bytes-like object `data` to the audio device : waits until the audio device is able to accept data , writes as much data as it will accept , and repeats until data has been completely written .", "question_id": 7182}
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106}
{"snippet": "differ.compare(a, b)", "intent": "Compare two sequences of lines , and generate the delta ( `a` sequence of lines ) . With arguments `b`.", "question_id": 2694}
{"snippet": "xml.sax.handler.all_properties", "intent": "List of all known property names.", "question_id": 12569}
{"snippet": "signal.NSIG", "intent": "One more than the number of the highest signal number.", "question_id": 8378}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "extension_file_loader.is_package(fullname)", "intent": "Returns True if the file path points to a package \u2019 s __init__ module based on EXTENSION_SUFFIXES . With arguments `fullname`.", "question_id": 4908}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}
{"snippet": "FTP_TLS.auth()", "intent": "Set up a secure control connection by using TLS or SSL , depending on what is specified in the ssl_version attribute .", "question_id": 3969}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "http_handler.emit(record)", "intent": "Sends the `record` to the Web server as a URL-encoded dictionary .", "question_id": 5552}
{"snippet": "json.load(fp, **kw, cls=None, object_hook=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . `object_hook` is an optional function that will be called with the result of any object literal decoded ( a dict ) . With arguments `**kw`.", "question_id": 5297}
{"snippet": "deque.append(x)", "intent": "Add `x` to the right side of the deque .", "question_id": 1353}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "Pattern.groupindex", "intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "question_id": 7993}
{"snippet": "datetime.min", "intent": "The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None).", "question_id": 2269}
{"snippet": "errno.ECHRNG", "intent": "Channel number out of range", "question_id": 3549}
{"snippet": "test.support.modules_cleanup(oldmodules)", "intent": "Remove modules except for `oldmodules` and encodings in order to preserve internal cache .", "question_id": 10251}
{"snippet": "html.entities.entitydefs", "intent": "A dictionary mapping XHTML 1.0 entity definitions to their replacement text in ISO Latin-1.", "question_id": 4343}
{"snippet": "os.RTLD_LAZY", "intent": "Flags for use with the setdlopenflags() and getdlopenflags() functions.", "question_id": 7130}
{"snippet": "Path.write_text(data)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file :", "question_id": 7323}
{"snippet": "faulthandler.enable(file=sys.stderr)", "intent": "Enable the fault handler : install handlers for the SIGSEGV , SIGFPE , SIGABRT , SIGBUS and SIGILL signals to dump the Python traceback . The `file` must be kept open until the fault handler is disabled : see issue with file descriptors .", "question_id": 3717}
{"snippet": "mbox.get_file(key)", "intent": "Using the file after calling flush ( ) or close ( ) on the mbox instance may yield unpredictable results or raise an exception . With arguments `key`.", "question_id": 5772}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347}
{"snippet": "tkinter.tix.Tree", "intent": "The Tree widget can be used to display hierarchical data in a tree form.", "question_id": 10572}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}
{"snippet": "doctest.DocFileSuite(*paths, encoding=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `encoding` specifies an encoding that should be used to convert the file to unicode . With arguments `*paths`.", "question_id": 2804}
{"snippet": "memory_handler.close()", "intent": "Calls flush ( ) , sets the target to None and clears the buffer .", "question_id": 5537}
{"snippet": "random.setstate(state)", "intent": "`state` should have been obtained from a previous call to getstate ( ) , and setstate ( ) restores the internal state of the generator to what it was at the time getstate ( ) was called .", "question_id": 7888}
{"snippet": "warnings.catch_warnings()", "intent": "A context manager that copies and , upon exit , restores the warnings filter and the showwarning ( ) function .", "question_id": 12042}
{"snippet": "statistics.variance(data)", "intent": "Return the sample variance of `data` , an iterable of at least two real-valued numbers .", "question_id": 9139}
{"snippet": "doctest.DocFileSuite(*paths, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2798}
{"snippet": "curses.ascii.isspace(c)", "intent": "Checks for ASCII white-space characters ; space , line feed , carriage return , form feed , horizontal tab , vertical tab . With arguments `c`.", "question_id": 1909}
{"snippet": "socket.gethostname()", "intent": "Return a string containing the hostname of the machine where the Python interpreter is currently executing .", "question_id": 8649}
{"snippet": "bytes.isalnum()", "intent": "Return true if all bytes in the sequence are alphabetical ASCII characters or ASCII decimal digits and the sequence is not empty , false otherwise .", "question_id": 9381}
{"snippet": "turtle.tilt(angle)", "intent": "Rotate the turtleshape by `angle` from its current tilt-angle , but do not change the turtle \u2019 s heading ( direction of movement ) .", "question_id": 11004}
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216}
{"snippet": "datetime.min", "intent": "The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None).", "question_id": 2269}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "decimal.radix()", "intent": "Return Decimal ( 10 ) , the radix ( base ) in which the Decimal class does all its arithmetic .", "question_id": 2465}
{"snippet": "trace.Trace(infile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `infile` is the name of the file from which to read stored count information .", "question_id": 10713}
{"snippet": "traceback.format(limit=None)", "intent": "Format the traceback as a list of lines with newlines . If `limit` is set , format the limit most recent frames if limit is positive .", "question_id": 10896}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636}
{"snippet": "threading.local", "intent": "A class that represents thread-local data.", "question_id": 10351}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "loop.sendfile(transport, file, count=None)", "intent": "Send a `file` over a `transport` . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 258}
{"snippet": "tkinter.tix.ComboBox", "intent": "The ComboBox widget is similar to the combo box control in MS Windows.", "question_id": 10554}
{"snippet": "Packer.get_buffer()", "intent": "Returns the current pack buffer as a string .", "question_id": 12273}
{"snippet": "errno.EL2HLT", "intent": "Level 2 halted", "question_id": 3556}
{"snippet": "mailbox.mbox(path, factory=None)", "intent": "A subclass of Mailbox for mailboxes in mbox format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . With arguments `path`.", "question_id": 5769}
{"snippet": "NNTP.getcapabilities()", "intent": "Return the RFC 3977 capabilities advertised by the server , as a dict instance mapping capability names to ( possibly empty ) lists of values .", "question_id": 6450}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "urllib.request.pathname2url(path)", "intent": "Convert the pathname `path` from the local syntax for a path to the form used in the path component of a URL .", "question_id": 11765}
{"snippet": "context.ln(x)", "intent": "Returns the natural ( base e ) logarithm of `x` .", "question_id": 2542}
{"snippet": "str.lower()", "intent": "Return a copy of the string with all the cased characters 4 converted to lowercase .", "question_id": 9217}
{"snippet": "time.localtime()", "intent": "Like gmtime ( ) but converts to local time .", "question_id": 10444}
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835}
{"snippet": "FutureWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python.", "question_id": 3707}
{"snippet": "sequence_matcher.set_seqs(a, b)", "intent": "Set the two sequences to be compared . With arguments `a`, `b`.", "question_id": 2679}
{"snippet": "HTTPPasswordMgr.find_user_password(realm, authuri)", "intent": "Get user/password for given `realm` and URI , if any . With arguments `authuri`.", "question_id": 11858}
{"snippet": "tkinter.tix.ListNoteBook", "intent": "The ListNoteBook widget is very similar to the TixNoteBook widget: it can be used to display many windows in a limited space using a notebook metaphor.", "question_id": 10575}
{"snippet": "SSLSocket.server_side", "intent": "A boolean which is True for server-side sockets and False for client-side sockets.", "question_id": 8991}
{"snippet": "time.time_ns()", "intent": "Similar to time ( ) but returns time as an integer number of nanoseconds since the epoch .", "question_id": 10461}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020}
{"snippet": "socket.CAN_BCM", "intent": "CAN_BCM, in the CAN protocol family, is the broadcast manager (BCM) protocol.", "question_id": 8583}
{"snippet": "locale.CODESET", "intent": "Get a string with the name of the character encoding used in the selected locale.", "question_id": 5354}
{"snippet": "codeop.compile_command(source, symbol=\"single\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . The `symbol` argument determines whether source is compiled as a statement ( 'single ' , the default ) or as an expression ( 'eval ' ) .", "question_id": 1306}
{"snippet": "os.execv(path, args)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "question_id": 7013}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543}
{"snippet": "secrets.choice(sequence)", "intent": "Return a randomly-chosen element from a non-empty `sequence` .", "question_id": 8132}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "writer.send_line_break()", "intent": "Break the current line .", "question_id": 3847}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this turtle .", "question_id": 11019}
{"snippet": "auto.start", "intent": "The first index of invalid data in object.", "question_id": 3677}
{"snippet": "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name)", "intent": "Create zip file at `zip_dir` and `zip_basename` with extension zip which contains the files in `script_name` .", "question_id": 10310}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020}
{"snippet": "inspect.CO_OPTIMIZED", "intent": "The code object is optimized, using fast locals.", "question_id": 5040}
{"snippet": "socket.gethostname()", "intent": "Return a string containing the hostname of the machine where the Python interpreter is currently executing .", "question_id": 8649}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "NNTP.xover(start, end, file=None)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select . With arguments `file`.", "question_id": 6500}
{"snippet": "breakpoint.bpformat()", "intent": "Return a string with all the information about the breakpoint , nicely formatted :", "question_id": 765}
{"snippet": "os.path.split(path)", "intent": "Split the pathname `path` into a pair , ( head , tail ) where tail is the last pathname component and head is everything leading up to that .", "question_id": 7169}
{"snippet": "email.mime.message.MIMEMessage(_msg, policy=compat32)", "intent": "Module : email.mime.message `_msg` is used as the payload , and must be an instance of class Message ( or a subclass thereof ) , otherwise a TypeError is raised . Optional `policy` argument defaults to compat32 .", "question_id": 3352}
{"snippet": "deque.rotate()", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1368}
{"snippet": "InputSource.getPublicId()", "intent": "Returns the public identifier of this InputSource .", "question_id": 12635}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363}
{"snippet": "os.WEXITSTATUS(status)", "intent": "If WIFEXITED ( `status` ) is true , return the integer parameter to the exit ( 2 ) system call .", "question_id": 7093}
{"snippet": "text_wrapper.expand_tabs", "intent": "(default: True) If true, then all tab characters in text will be expanded to spaces using the expandtabs() method of text.", "question_id": 10328}
{"snippet": "urllib.request.urlretrieve(url, filename=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11882}
{"snippet": "turtle.showturtle()", "intent": "Make the turtle visible .", "question_id": 10979}
{"snippet": "os.fsdecode(filename)", "intent": "Decode the path-like `filename` from the filesystem encoding with 'surrogateescape ' error handler , or 'strict ' on Windows ; return str unchanged .", "question_id": 6664}
{"snippet": "asyncio.AbstractEventLoop", "intent": "Abstract base class for asyncio-compliant event loops.", "question_id": 344}
{"snippet": "multiprocessing.freeze_support()", "intent": "Add support for when a program which uses multiprocessing has been frozen to produce a Windows executable .", "question_id": 6222}
{"snippet": "pyc_invalidation_mode.CHECKED_HASH", "intent": "The .pyc file includes a hash of the source file content, which Python will compare against the source at runtime to determine if the .pyc file needs to be regenerated.", "question_id": 7833}
{"snippet": "test.support.get_attribute(obj, name)", "intent": "Get an attribute , raising unittest.SkipTest if AttributeError is raised . With arguments `obj`, `name`.", "question_id": 10257}
{"snippet": "profile.Profile(timer=None)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument .", "question_id": 7670}
{"snippet": "cursor.executescript(sql_script)", "intent": "This is a nonstandard convenience method for executing multiple SQL statements at once . `sql_script` can be an instance of str .", "question_id": 8843}
{"snippet": "nntplib.NNTPTemporaryError", "intent": "Exception raised when a response code in the range 400\u2013499 is received.", "question_id": 6442}
{"snippet": "function.get_frees()", "intent": "Return a tuple containing names of free variables in this function .", "question_id": 9750}
{"snippet": "doc_test_parser.parse(string)", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings .", "question_id": 2859}
{"snippet": "UUID.bytes", "intent": "The UUID as a 16-byte string (containing the six integer fields in big-endian byte order).", "question_id": 11947}
{"snippet": "json.loads(s, **kw)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5300}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "urllib.request.HTTPPasswordMgr", "intent": "Keep a database of  (realm, uri) -> (user, password) mappings.", "question_id": 11786}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "Function.parent", "intent": "For top-level functions, None.", "question_id": 7714}
{"snippet": "@typing.no_type_check_decorator", "intent": "Decorator to give another decorator the no_type_check() effect.", "question_id": 11329}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847}
{"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}
{"snippet": "HMAC.hexdigest()", "intent": "Like digest ( ) except the digest is returned as a string twice the length containing only hexadecimal digits .", "question_id": 4336}
{"snippet": "errno.ENOTUNIQ", "intent": "Name not unique on network", "question_id": 3581}
{"snippet": "TarFile.extract(member, set_attrs=True, numeric_owner=False)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "question_id": 9946}
{"snippet": "base_server.server_close()", "intent": "Clean up the server .", "question_id": 8766}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "bytes(source, encoding)", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) .", "question_id": 9258}
{"snippet": "doctest.DocTestSuite(checker=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . With arguments `checker`.", "question_id": 2813}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "zipapp.create_archive(source, compressed=False)", "intent": "Create an application archive from `source` . The optional `compressed` argument determines whether files are compressed .", "question_id": 12772}
{"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930}
{"snippet": "loop.sock_sendfile(sock, file, offset=0)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket . `offset` tells from where to start reading the file .", "question_id": 282}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "urllib.request.CacheFTPHandler", "intent": "Open FTP URLs, keeping a cache of open FTP connections to minimize delays.", "question_id": 11813}
{"snippet": "@test.support.bigmemtest(size, memuse)", "intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it .", "question_id": 10227}
{"snippet": "DAY_1 ... DAY_7", "intent": "Get the name of the n-th day of the week.", "question_id": 5359}
{"snippet": "message.__delitem__(name)", "intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "question_id": 2968}
{"snippet": "hash.update(data)", "intent": "Update the hash object with the bytes-like object . With arguments `data`.", "question_id": 4304}
{"snippet": "sysconfig.parse_config_h(fp, vars)", "intent": "Parse a config.h-style file . `fp` is a file-like object pointing to the config.h-like file . With arguments `vars`.", "question_id": 9873}
{"snippet": "pyclbr.readmodule_ex(module)", "intent": "Return a dictionary-based tree containing a function or class descriptors for each function and class defined in the `module` with a def or class statement .", "question_id": 7708}
{"snippet": "unittest.TestCase()", "intent": "Instances of the TestCase class represent the logical test units in the unittest universe .", "question_id": 11363}
{"snippet": "IMAP4.getquotaroot(mailbox)", "intent": "Get the list of quota roots for the named `mailbox` .", "question_id": 4705}
{"snippet": "random.SystemRandom()", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system .", "question_id": 7921}
{"snippet": "InputSource.setEncoding(encoding)", "intent": "Sets the character `encoding` of this InputSource .", "question_id": 12638}
{"snippet": "os.getenv(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6668}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "resource.RLIMIT_NPROC", "intent": "The maximum number of processes the current process may create.", "question_id": 8081}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717}
{"snippet": "base_server.socket", "intent": "The socket object on which the server will listen for incoming requests.", "question_id": 8770}
{"snippet": "ftplib.FTP(source_address=None)", "intent": "Return a new instance of the FTP class . `source_address` is a 2-tuple ( host , port ) for the socket to bind to as its source address before connecting .", "question_id": 3884}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670}
{"snippet": "ArgumentParser.print_usage(file=None)", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line . If `file` is None , sys.stdout is assumed .", "question_id": 104}
{"snippet": "difflib.HtmlDiff", "intent": "This class can be used to create an HTML table (or a complete HTML file containing the table) showing a side by side, line by line comparison of text with inter-line and intra-line change highlights.", "question_id": 2597}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298}
{"snippet": "maildir.close()", "intent": "Maildir instances do not keep any open files and the underlying mailboxes do not support locking , so this method does nothing .", "question_id": 5766}
{"snippet": "loop.sock_sendfile(sock, file, offset=0)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket . `offset` tells from where to start reading the file .", "question_id": 282}
{"snippet": "warnings.simplefilter(action)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12033}
{"snippet": "tkinter.tix.OptionMenu", "intent": "The OptionMenu creates a menu button of options.", "question_id": 10559}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508}
{"snippet": "multiprocessing.Queue()", "intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores .", "question_id": 6196}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "socket.connect(address)", "intent": "Connect to a remote socket at `address` .", "question_id": 8676}
{"snippet": "calendar.calendar(year, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `m`.", "question_id": 1015}
{"snippet": "config_parser.getfloat(section, option)", "intent": "A convenience method which coerces the `option` in the specified `section` to a floating point number .", "question_id": 1540}
{"snippet": "str.rstrip()", "intent": "Return a copy of the string with trailing characters removed .", "question_id": 9240}
{"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "gzip_file.mtime", "intent": "When decompressing, the value of the last modification time field in the most recently read header may be read from this attribute, as an integer.", "question_id": 4293}
{"snippet": "NNTP.list(group_pattern=None, file=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` . With arguments `file`.", "question_id": 6468}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491}
{"snippet": "curses.savetty()", "intent": "Save the current state of the terminal modes in a buffer , usable by resetty ( ) .", "question_id": 1977}
{"snippet": "turtle.position()", "intent": "Return the turtle \u2019 s current location ( x , y ) ( as a Vec2D vector ) .", "question_id": 10936}
{"snippet": "test.support.check_warnings(*filters, quiet=True)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . If one or more filters are provided , or if the optional keyword argument `quiet` is False , it checks to make sure the warnings are as expected : each specified filter must match at least one of the warnings raised by the enclosed code or the test fails , and if any warnings are raised that do not match any of the specified filters the test fails . With arguments `*filters`.", "question_id": 10165}
{"snippet": "multiprocessing.get_context()", "intent": "Return a context object which has the same attributes as the multiprocessing module .", "question_id": 6224}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636}
{"snippet": "os.getrandom(size)", "intent": "Get up to `size` random bytes .", "question_id": 7137}
{"snippet": "fileinput.hook_encoded(encoding)", "intent": "Returns a hook which opens each file with open ( ) , using the given `encoding` and `errors` to read the file .", "question_id": 3811}
{"snippet": "parser.st2list(st, line_info=False)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree . If `line_info` is true , line number information will be included for all terminal tokens as a third element of the list representing the token .", "question_id": 7215}
{"snippet": "TabError", "intent": "Raised when indentation contains an inconsistent use of tabs and spaces.", "question_id": 3667}
{"snippet": "timedelta.max", "intent": "The most positive timedelta object, timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999).", "question_id": 2215}
{"snippet": "gzip.open(filename)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4272}
{"snippet": "tarfile.DEFAULT_FORMAT", "intent": "The default format for creating archives.", "question_id": 9912}
{"snippet": "pool.terminate()", "intent": "Stops the worker processes immediately without completing outstanding work .", "question_id": 6357}
{"snippet": "codecs.register(search_function)", "intent": "Register a codec search function . With arguments `search_function`.", "question_id": 1224}
{"snippet": "test.support.optim_args_from_interpreter_flags()", "intent": "Return a list of command line arguments reproducing the current optimization settings in sys.flags .", "question_id": 10172}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}
{"snippet": "base_server.shutdown()", "intent": "Tell the serve_forever ( ) loop to stop and wait until it does .", "question_id": 8765}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426}
{"snippet": "Template.reset()", "intent": "Restore a pipeline template to its initial state .", "question_id": 7428}
{"snippet": "memory_bio.read()", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9056}
{"snippet": "site.addsitedir(sitedir)", "intent": "Add a directory to sys.path and process its .pth files . With arguments `sitedir`.", "question_id": 8407}
{"snippet": "socket_handler.send(packet)", "intent": "Send a pickled byte-string `packet` to the socket .", "question_id": 5488}
{"snippet": "widget.bbox(item)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) .", "question_id": 10620}
{"snippet": "IMAP4.proxyauth(user)", "intent": "Assume authentication as `user` .", "question_id": 4721}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "ensurepip.bootstrap(default_pip=False)", "intent": "Bootstraps pip into the current or designated environment . If `default_pip` is set , then pip will be installed in addition to the two regular scripts .", "question_id": 3494}
{"snippet": "completed_process.check_returncode()", "intent": "If returncode is non-zero , raise a CalledProcessError .", "question_id": 9582}
{"snippet": "cmath.sqrt(x)", "intent": "Return the square root of `x` .", "question_id": 1100}
{"snippet": "oss_audio_device.writeall(data)", "intent": "Write a bytes-like object `data` to the audio device : waits until the audio device is able to accept data , writes as much data as it will accept , and repeats until data has been completely written .", "question_id": 7182}
{"snippet": "unittest.mock.create_autospec(spec, **kwargs, spec_set=False)", "intent": "Create a mock object using another object as a `spec` . If `spec_set` is True then attempting to set attributes that don \u2019 t exist on the spec object will raise an AttributeError . With arguments `**kwargs`.", "question_id": 11650}
{"snippet": "time.clock_getres(clk_id)", "intent": "Return the resolution ( precision ) of the specified clock `clk_id` .", "question_id": 10433}
{"snippet": "str.isnumeric()", "intent": "Return true if all characters in the string are numeric characters , and there is at least one character , false otherwise .", "question_id": 9209}
{"snippet": "resource.RLIMIT_CORE", "intent": "The maximum size (in bytes) of a core file that the current process can create.", "question_id": 8075}
{"snippet": "random.expovariate(lambd)", "intent": "Exponential distribution . `lambd` is 1.0 divided by the desired mean .", "question_id": 7910}
{"snippet": "test.support.script_helper.run_python_until_end(*args, **env_vars)", "intent": "Set up the environment based on env_vars for running the interpreter in a subprocess . With arguments `*args`, `**env_vars`.", "question_id": 10300}
{"snippet": "Node.nodeType", "intent": "An integer representing the node type.", "question_id": 12314}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}
{"snippet": "urllib.request.HTTPErrorProcessor", "intent": "Process HTTP error responses.", "question_id": 11815}
{"snippet": "datetime.min", "intent": "The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None).", "question_id": 2269}
{"snippet": "subprocess.STARTUPINFO()", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation .", "question_id": 9625}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "IMAP4.readline()", "intent": "Reads one line from the remote server .", "question_id": 4723}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136}
{"snippet": "textwrap.indent(text, prefix)", "intent": "Add `prefix` to the beginning of selected lines in `text` .", "question_id": 10324}
{"snippet": "subprocess.Popen(args, cwd=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `cwd` is not None , the function changes the working directory to cwd before executing the child .", "question_id": 9608}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "Document.createProcessingInstruction(target, data)", "intent": "Create and return a processing instruction node containing the `target` and `data` passed as parameters .", "question_id": 12349}
{"snippet": "ScrolledText.frame", "intent": "The frame which surrounds the text and scroll bar widgets.", "question_id": 10542}
{"snippet": "zipimporter.find_module(fullname)", "intent": "Search for a module specified by `fullname` .", "question_id": 12883}
{"snippet": "logging.captureWarnings(capture)", "intent": "This function is used to turn the `capture` of warnings by logging on and off .", "question_id": 5654}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "breakpoint(*args, **kws)", "intent": "This function drops you into the debugger at the call site . With arguments `*args`, `**kws`.", "question_id": 3980}
{"snippet": "i_pv4_network.exploded", "intent": "A string representation of the network, with the mask in prefix notation.", "question_id": 5200}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855}
{"snippet": "breakpoint.bpformat()", "intent": "Return a string with all the information about the breakpoint , nicely formatted :", "question_id": 765}
{"snippet": "SSLSocket.get_channel_binding()", "intent": "Get channel binding data for current connection , as a bytes object .", "question_id": 8982}
{"snippet": "pkgutil.ImpImporter()", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm .", "question_id": 7437}
{"snippet": "sys.meta_path", "intent": "A list of meta path finder objects that have their find_spec() methods called to see if one of the objects can find the module to be imported.", "question_id": 9825}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "profile.Profile(timer=None, subcalls=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument . With arguments `subcalls`.", "question_id": 7675}
{"snippet": "turtle.Vec2D(x, y)", "intent": "A two-dimensional vector class , used as a helper class for implementing turtle graphics . With arguments `x`, `y`.", "question_id": 11167}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}
{"snippet": "errno.EMLINK", "intent": "Too many links", "question_id": 3536}
{"snippet": "readline.read_init_file()", "intent": "Execute a readline initialization file .", "question_id": 8017}
{"snippet": "Record.ClearData()", "intent": "Set all fields of the record to 0 , through MsiRecordClearData ( ) .", "question_id": 6087}
{"snippet": "shutil.copy2(src, dst)", "intent": "Identical to copy ( ) except that copy2 ( ) also attempts to preserve file metadata . When `follow_symlinks` is false , and `src` is a symbolic link , copy2 ( ) attempts to copy all metadata from the src symbolic link to the newly-created `dst` symbolic link .", "question_id": 8320}
{"snippet": "simple_http_request_handler.extensions_map", "intent": "A dictionary mapping suffixes into MIME types.", "question_id": 4662}
{"snippet": "env_builder.post_setup(context)", "intent": "A placeholder method which can be overridden in third party implementations to pre-install packages in the virtual environment or perform other post-creation steps . With arguments `context`.", "question_id": 11987}
{"snippet": "msilib.schema", "intent": "This is the standard MSI schema for MSI 2.0, with the tables variable providing a list of table definitions, and _Validation_records providing the data for MSI validation.", "question_id": 6143}
{"snippet": "inspect.isbuiltin(object)", "intent": "Return true if the `object` is a built-in function or a bound built-in method .", "question_id": 4962}
{"snippet": "dis.stack_effect(opcode, oparg)", "intent": "Compute the stack effect of `opcode` with argument `oparg` .", "question_id": 2731}
{"snippet": "socket.connect(address)", "intent": "Connect to a remote socket at `address` .", "question_id": 8676}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "errno.EROFS", "intent": "Read-only file system", "question_id": 3535}
{"snippet": "Dialect.doublequote", "intent": "Controls how instances of quotechar appearing inside a field should themselves be quoted.", "question_id": 1724}
{"snippet": "ZipInfo.extract_version", "intent": "PKZIP version needed to extract archive.", "question_id": 12870}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417}
{"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}
{"snippet": "Morsel.OutputString()", "intent": "Return a string representing the Morsel , without any surrounding HTTP or JavaScript .", "question_id": 4607}
{"snippet": "smtp_channel.mailfrom", "intent": "Holds a string containing the address identified in the \u201cMAIL FROM:\u201d line from the client.", "question_id": 8443}
{"snippet": "winreg.KEY_QUERY_VALUE", "intent": "Required to query the values of a registry key.", "question_id": 12166}
{"snippet": "connection.create_aggregate(name, num_params, aggregate_class)", "intent": "Creates a user-defined aggregate function . The aggregate class must implement a step method , which accepts the number of parameters `num_params` ( if num_params is -1 , the function may take any number of arguments ) , and a finalize method which will return the final result of the aggregate . With arguments `name`, `aggregate_class`.", "question_id": 8817}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT", "intent": "Something other than whitespace occurred after the document element.", "question_id": 7794}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "socket.getprotobyname(protocolname)", "intent": "Translate an Internet protocol name ( for example , 'icmp ' ) to a constant suitable for passing as the ( optional ) third argument to the socket ( ) function . With arguments `protocolname`.", "question_id": 8652}
{"snippet": "winreg.KEY_ENUMERATE_SUB_KEYS", "intent": "Required to enumerate the subkeys of a registry key.", "question_id": 12169}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "timezone.utc", "intent": "The UTC timezone, timezone(timedelta(0)).", "question_id": 2363}
{"snippet": "class.get_methods()", "intent": "Return a tuple containing the names of methods declared in the class .", "question_id": 9752}
{"snippet": "datetime.tzinfo", "intent": "The object passed as the tzinfo argument to the datetime constructor, or None if none was passed.", "question_id": 2279}
{"snippet": "shutil.copymode(src, dst)", "intent": "Copy the permission bits from `src` to `dst` .", "question_id": 8314}
{"snippet": "ScrolledText.frame", "intent": "The frame which surrounds the text and scroll bar widgets.", "question_id": 10542}
{"snippet": "test.support.ALWAYS_EQ", "intent": "Object that is equal to anything.", "question_id": 10135}
{"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}
{"snippet": "test_loader.testNamePatterns", "intent": "List of Unix shell-style wildcard test name patterns that test methods have to match to be included in test suites (see -v option).", "question_id": 11506}
{"snippet": "shutil.unpack_archive(filename)", "intent": "Unpack an archive . `filename` is the full path of the archive .", "question_id": 8365}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138}
{"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}
{"snippet": "base_http_request_handler.handle_expect_100()", "intent": "When a HTTP/1.1 compliant server receives an Expect : 100-continue request header it responds back with a 100 Continue followed by 200 OK headers .", "question_id": 4636}
{"snippet": "array.itemsize", "intent": "The length in bytes of one array item in the internal representation.", "question_id": 119}
{"snippet": "context.copy_abs(x)", "intent": "Returns a copy of `x` with the sign set to 0 .", "question_id": 2524}
{"snippet": "mock.call_count", "intent": "An integer telling you how many times the mock object has been called:", "question_id": 11589}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None, stdout=None)", "intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`, `stdin`.", "question_id": 529}
{"snippet": "memoryview.nbytes", "intent": "nbytes == product(shape) * itemsize == len(m.tobytes()).", "question_id": 9420}
{"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}
{"snippet": "platform.platform(aliased=0, terse=0)", "intent": "Returns a single string identifying the underlying platform with as much useful information as possible . If `aliased` is true , the function will use aliases for various platforms that report system names which differ from their common names , for example SunOS will be reported as Solaris . Setting `terse` to true causes the function to return only the absolute minimum information needed to identify the platform .", "question_id": 7471}
{"snippet": "sys.abiflags", "intent": "On POSIX systems where Python was built with the standard configure script, this contains the ABI flags as specified by PEP 3149.", "question_id": 9766}
{"snippet": "errno.ERANGE", "intent": "Math result not representable", "question_id": 3539}
{"snippet": "fnmatch.fnmatchcase(filename, pattern)", "intent": "Test whether `filename` matches `pattern` , returning True or False ; the comparison is case-sensitive and does not apply os.path.normcase ( ) .", "question_id": 3814}
{"snippet": "resource.RLIMIT_RTTIME", "intent": "The time limit (in microseconds) on CPU time that a process can spend under real-time scheduling without making a blocking syscall.", "question_id": 8090}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "mailbox.iteritems()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5734}
{"snippet": "thread.getName()", "intent": "Old getter/setter API for name ; use it directly as a property instead .", "question_id": 10367}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "datetime.time", "intent": "An idealized time, independent of any particular day, assuming that every day has exactly 24*60*60 seconds (there is no notion of \u201cleap seconds\u201d here).", "question_id": 2199}
{"snippet": "stringprep.in_table_c21(code)", "intent": "Determine whether `code` is in tableC.2.1 ( ASCII control characters ) .", "question_id": 9538}
{"snippet": "test.support.TestFailed", "intent": "Exception to be raised when a test fails.", "question_id": 10108}
{"snippet": "memoryview.format", "intent": "A string containing the format (in struct module style) for each element in the view.", "question_id": 9422}
{"snippet": "turtle.bgcolor(*args)", "intent": "Set or return background color of the TurtleScreen . With arguments `*args`.", "question_id": 11040}
{"snippet": "symtable.Symbol", "intent": "An entry in a SymbolTable corresponding to an identifier in the source.", "question_id": 9753}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "platform.win32_ver()", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7495}
{"snippet": "IMAP4.noop()", "intent": "Send NOOP to server .", "question_id": 4718}
{"snippet": "kevent.fflags", "intent": "Filter specific flags.", "question_id": 8206}
{"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}
{"snippet": "str.join(iterable)", "intent": "Return a string which is the concatenation of the strings in `iterable` .", "question_id": 9214}
{"snippet": "resource.getpagesize()", "intent": "Returns the number of bytes in a system page .", "question_id": 8096}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}
{"snippet": "test_case.doCleanups()", "intent": "This method is called unconditionally after tearDown ( ) , or after setUp ( ) if setUp ( ) raises an exception .", "question_id": 11472}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "multiprocessing.pool.Pool(processes, initializer)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts .", "question_id": 6329}
{"snippet": "errno.ENETUNREACH", "intent": "Network is unreachable", "question_id": 3606}
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE", "intent": "A parameter entity contained incomplete markup.", "question_id": 7812}
{"snippet": "itertools.product(*iterables)", "intent": "Cartesian product of input iterables . With arguments `*iterables`.", "question_id": 5260}
{"snippet": "importlib.resources.open_text(package, resource)", "intent": "Open for text reading the `resource` within `package` .", "question_id": 4853}
{"snippet": "str.splitlines()", "intent": "Return a list of the lines in the string , breaking at line boundaries .", "question_id": 9246}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : With arguments `*paths`.", "question_id": 2797}
{"snippet": "OptionParser.set_defaults()", "intent": "Set default values for several option destinations at once .", "question_id": 6647}
{"snippet": "typing.SupportsInt", "intent": "An ABC with one abstract method __int__.", "question_id": 11239}
{"snippet": "structure._anonymous_", "intent": "An optional sequence that lists the names of unnamed (anonymous) fields.", "question_id": 1892}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "json.JSONDecoder(object_pairs_hook=None)", "intent": "Simple JSON decoder . `object_pairs_hook` , if specified will be called with the result of every JSON object decoded with an ordered list of pairs .", "question_id": 5316}
{"snippet": "decimal.as_integer_ratio()", "intent": "Return a pair ( n , d ) of integers that represent the given Decimal instance as a fraction , in lowest terms and with a positive denominator :", "question_id": 2396}
{"snippet": "Node.childNodes", "intent": "A list of nodes contained within this node.", "question_id": 12319}
{"snippet": "inspect.isasyncgen(object)", "intent": "Return true if the `object` is an asynchronous generator iterator created by an asynchronous generator function .", "question_id": 4958}
{"snippet": "gettext.bindtextdomain(domain)", "intent": "Bind the `domain` to the locale directory `localedir` .", "question_id": 4210}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490}
{"snippet": "ssl.SSLSyscallError", "intent": "A subclass of SSLError raised when a system error was encountered while trying to fulfill an operation on a SSL socket.", "question_id": 8879}
{"snippet": "json.load(fp, **kw, cls=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . With arguments `**kw`.", "question_id": 5291}
{"snippet": "policy.max_line_length", "intent": "The maximum length of any line in the serialized output, not counting the end of line character(s).", "question_id": 3413}
{"snippet": "shlex.infile", "intent": "The name of the current input file, as initially set at class instantiation time or stacked by later source requests.", "question_id": 8301}
{"snippet": "test.support.patch(test_instance, object_to_patch, attr_name, new_value)", "intent": "Override object_to_patch.attr_name with `new_value` . Also add cleanup procedure to `test_instance` to restore `object_to_patch` for `attr_name` .", "question_id": 10269}
{"snippet": "logging.handlers.HTTPHandler(host, url, secure=False, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `secure` is true , a HTTPS connection will be used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5549}
{"snippet": "NNTP.newnews(group, date)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "question_id": 6463}
{"snippet": "ssl.OP_ENABLE_MIDDLEBOX_COMPAT", "intent": "Send dummy Change Cipher Spec (CCS) messages in TLS 1.3 handshake to make a TLS 1.3 connection look more like a TLS 1.2 connection.", "question_id": 8941}
{"snippet": "i_pv6_address.ipv4_mapped", "intent": "For addresses that appear to be IPv4 mapped addresses (starting with ::FFFF/96), this property will report the embedded IPv4 address.", "question_id": 5189}
{"snippet": "decimal.is_zero()", "intent": "Return True if the argument is a ( positive or negative ) zero and False otherwise .", "question_id": 2428}
{"snippet": "subprocess.getstatusoutput(cmd)", "intent": "Return ( exitcode , output ) of executing `cmd` in a shell .", "question_id": 9689}
{"snippet": "Path.iterdir()", "intent": "When the path points to a directory , yield path objects of the directory contents :", "question_id": 7281}
{"snippet": "curses.baudrate()", "intent": "Return the output speed of the terminal in bits per second .", "question_id": 1920}
{"snippet": "date.max", "intent": "The latest representable date, date(MAXYEAR, 12, 31).", "question_id": 2224}
{"snippet": "sys.builtin_module_names", "intent": "A tuple of strings giving the names of all modules that are compiled into this Python interpreter.", "question_id": 9771}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "oss_audio_device.reset()", "intent": "Immediately stop playing or recording and return the device to a state where it can accept commands .", "question_id": 7189}
{"snippet": "test.support.script_helper.interpreter_requires_environment()", "intent": "Return True if sys.executable interpreter requires environment variables in order to be able to run at all .", "question_id": 10299}
{"snippet": "ctypes.util.find_msvcrt()", "intent": "Windows only : return the filename of the VC runtime library used by Python , and by the extension modules .", "question_id": 1820}
{"snippet": "SMTP.docmd(cmd, args='')", "intent": "Send a command `cmd` to the server . The optional argument `args` is simply concatenated to the command , separated by a space .", "question_id": 8510}
{"snippet": "doc_test_runner.report_success(out, test, example, got)", "intent": "Report that the given `example` ran successfully . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `got` is the actual output from the example .", "question_id": 2870}
{"snippet": "msilib.Binary(filename)", "intent": "Represents entries in the Binary table ; inserting such an object using add_data ( ) reads the file named `filename` into the table .", "question_id": 6064}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`.", "question_id": 3042}
{"snippet": "str.maketrans(x, y)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` .", "question_id": 9221}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "loader.exec_module(module)", "intent": "An abstract method that executes the `module` in its own namespace when a module is imported or reloaded .", "question_id": 4815}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "urllib.request.HTTPCookieProcessor()", "intent": "A class to handle HTTP Cookies .", "question_id": 11782}
{"snippet": "resource.RLIMIT_CPU", "intent": "The maximum amount of processor time (in seconds) that a process can use.", "question_id": 8076}
{"snippet": "subprocess.check_call(args, stdin=None, stdout=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`, `stdin`.", "question_id": 9676}
{"snippet": "queue.cancel_join_thread()", "intent": "Prevent join_thread ( ) from blocking .", "question_id": 6210}
{"snippet": "SSLContext.set_ecdh_curve(curve_name)", "intent": "Set the curve name for Elliptic Curve-based Diffie-Hellman ( ECDH ) key exchange . The `curve_name` parameter should be a string describing a well-known elliptic curve , for example prime256v1 for a widely supported curve .", "question_id": 9021}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458}
{"snippet": "InteractiveInterpreter.runsource(source)", "intent": "Compile and run some `source` in the interpreter .", "question_id": 1175}
{"snippet": "function.get_frees()", "intent": "Return a tuple containing names of free variables in this function .", "question_id": 9750}
{"snippet": "io.StringIO(initial_value='')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` .", "question_id": 5165}
{"snippet": "os.pathsep", "intent": "The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows.", "question_id": 7126}
{"snippet": "oss_audio_device.nonblock()", "intent": "Put the device into non-blocking mode .", "question_id": 7183}
{"snippet": "fileinput.hook_encoded(encoding)", "intent": "Returns a hook which opens each file with open ( ) , using the given `encoding` and `errors` to read the file .", "question_id": 3811}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968}
{"snippet": "ScrolledText.frame", "intent": "The frame which surrounds the text and scroll bar widgets.", "question_id": 10542}
{"snippet": "filter.filter(record)", "intent": "Is the specified `record` to be logged ?", "question_id": 5625}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "turtle.tiltangle(angle=None)", "intent": "Set or return the current tilt-angle . If `angle` is given , rotate the turtleshape to point in the direction specified by angle , regardless of its current tilt-angle .", "question_id": 11007}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "row.verify_message", "intent": "A human readable string of the verification error.", "question_id": 8883}
{"snippet": "config_parser.write(fileobject, space_around_delimiters=True)", "intent": "Write a representation of the configuration to the specified file object , which must be opened in text mode ( accepting strings ) . If `space_around_delimiters` is true , delimiters between keys and values are surrounded by spaces . With arguments `fileobject`.", "question_id": 1562}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "sys.prefix", "intent": "A string giving the site-specific directory prefix where the platform independent Python files are installed; by default, this is the string '/usr/local'.", "question_id": 9831}
{"snippet": "parameter.kind", "intent": "Describes how argument values are bound to the parameter.", "question_id": 5001}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 452}
{"snippet": "stat.ST_ATIME", "intent": "Time of last access.", "question_id": 9081}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "mailbox.NoSuchMailboxError", "intent": "Raised when a mailbox is expected but is not found, such as when instantiating a Mailbox subclass with a path that does not exist (and with the create parameter set to False), or when opening a folder that does not exist.", "question_id": 5857}
{"snippet": "sys.dont_write_bytecode", "intent": "If this is true, Python won\u2019t try to write .pyc files on the import of source modules.", "question_id": 9780}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "multiprocessing.Barrier(parties)", "intent": "A barrier object : a clone of threading.Barrier . With arguments `parties`.", "question_id": 6245}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "fileinput.hook_compressed(filename, mode)", "intent": "Transparently opens files compressed with gzip and bzip2 ( recognized by the extensions '.gz ' and '.bz2 ' ) using the gzip and bz2 modules . If the `filename` extension is not '.gz ' or '.bz2 ' , the file is opened normally ( ie , using open ( ) without any decompression ) . With arguments `mode`.", "question_id": 3810}
{"snippet": "xdrlib.Packer", "intent": "Packer is the class for packing data into XDR representation.", "question_id": 12271}
{"snippet": "locale.CODESET", "intent": "Get a string with the name of the character encoding used in the selected locale.", "question_id": 5354}
{"snippet": "Function.children", "intent": "A dictionary mapping names to descriptors for nested functions and classes.", "question_id": 7715}
{"snippet": "test_loader.loadTestsFromModule(module)", "intent": "Return a suite of all test cases contained in the given `module` .", "question_id": 11492}
{"snippet": "smtplib.SMTP_SSL()", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP .", "question_id": 8478}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "importlib.util.spec_from_file_location(name, location, loader=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . Missing information will be filled in on the spec by making use of `loader` APIs and by the implication that the module will be file-based . With arguments `name`, `location`.", "question_id": 4939}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847}
{"snippet": "Text.data", "intent": "The content of the text node as a string.", "question_id": 12377}
{"snippet": "inspect.getcomments(object)", "intent": "Return in a single string any lines of comments immediately preceding the `object` \u2019 s source code ( for a class , function , or method ) , or at the top of the Python source file ( if the object is a module ) .", "question_id": 4970}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "asyncio.Future(loop=None)", "intent": "A Future represents an eventual result of an asynchronous operation . This way alternative event `loop` implementations can inject their own optimized implementations of a Future object .", "question_id": 360}
{"snippet": "@test.support.requires_IEEE_754", "intent": "Decorator for skipping tests on non-IEEE 754 platforms.", "question_id": 10214}
{"snippet": "time.CLOCK_UPTIME", "intent": "Time whose absolute value is the time the system has been running and not suspended, providing accurate uptime measurement, both absolute and interval.", "question_id": 10470}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "xml.dom.IndexSizeErr", "intent": "Raised when an index or size parameter to a method is negative or exceeds the allowed values.", "question_id": 12383}
{"snippet": "decimal.to_integral_value(rounding=None)", "intent": "Round to the nearest integer without signaling Inexact or Rounded . If given , applies `rounding` ; otherwise , uses the rounding method in either the supplied `context` or the current context .", "question_id": 2489}
{"snippet": "urllib.parse.unquote_plus(string)", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str .", "question_id": 11727}
{"snippet": "ctypes.c_double", "intent": "Represents the C double datatype.", "question_id": 1858}
{"snippet": "gzip.open(filename)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4272}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4502}
{"snippet": "auto.winerror", "intent": "Under Windows, this gives you the native Windows error code.", "question_id": 3655}
{"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}
{"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}
{"snippet": "context.sqrt(x)", "intent": "Square root of a non-negative number to context precision . With arguments `x`.", "question_id": 2571}
{"snippet": "header.encode(\\t', splitchars=';, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3135}
{"snippet": "urllib.request.Request(url, data=None, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11777}
{"snippet": "turtle.setx(x)", "intent": "Set the turtle \u2019 s first coordinate to `x` , leave second coordinate unchanged .", "question_id": 10918}
{"snippet": "urllib.parse.quote_from_bytes(bytes)", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding .", "question_id": 11721}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919}
{"snippet": "inspect.isasyncgen(object)", "intent": "Return true if the `object` is an asynchronous generator iterator created by an asynchronous generator function .", "question_id": 4958}
{"snippet": "operator.indexOf(a, b)", "intent": "Return the index of the first of occurrence of `b` in `a` .", "question_id": 6577}
{"snippet": "bz2_file.peek()", "intent": "Return buffered data without advancing the file position .", "question_id": 895}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "Popen.poll()", "intent": "Check if child process has terminated .", "question_id": 9609}
{"snippet": "shutil.get_unpack_formats()", "intent": "Return a list of all registered formats for unpacking .", "question_id": 8370}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "doctest.DocFileSuite(*paths, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2798}
{"snippet": "test_case.debug()", "intent": "Run the test without collecting the result .", "question_id": 11374}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "asyncio.subprocess.DEVNULL", "intent": "Special value that can be used as the stdin, stdout or stderr argument to process creation functions.", "question_id": 545}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "ServerProxy.system.methodSignature(name)", "intent": "This method takes one parameter , the `name` of a method implemented by the XML-RPC server .", "question_id": 12680}
{"snippet": "Element.removeAttributeNode(oldAttr)", "intent": "Remove and return `oldAttr` from the attribute list , if present .", "question_id": 12364}
{"snippet": "tkinter.tix.NoteBook", "intent": "The NoteBook widget can be used to display many windows in a limited space using a notebook metaphor.", "question_id": 10576}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "winreg.HKEY_DYN_DATA", "intent": "This key is not used in versions of Windows after 98.", "question_id": 12161}
{"snippet": "smtplib.SMTP()", "intent": "An SMTP instance encapsulates an SMTP connection .", "question_id": 8458}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "_c_data._b_base_", "intent": "Sometimes ctypes data instances do not own the memory block they contain, instead they share part of the memory block of a base object.", "question_id": 1850}
{"snippet": "devpoll.modify(fd)", "intent": "This method does an unregister ( ) followed by a register ( ) . With arguments `fd`.", "question_id": 8175}
{"snippet": "mime_types.types_map", "intent": "Tuple containing two dictionaries, mapping filename extensions to MIME types: the first dictionary is for the non-standards types and the second one is for the standard types.", "question_id": 5962}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "zipimporter.find_module(fullname, path)", "intent": "Search for a module specified by `fullname` . The optional `path` argument is ignored\u2014it \u2019 s there for compatibility with the importer protocol .", "question_id": 12882}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "sys.exit()", "intent": "Exit from Python .", "question_id": 9789}
{"snippet": "process.kill()", "intent": "Same as terminate ( ) but using the SIGKILL signal on Unix .", "question_id": 6187}
{"snippet": "tkinter.tix.tixCommand", "intent": "The tix commands provide access to miscellaneous elements of Tix\u2019s internal state and the Tix application context.", "question_id": 10579}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "itertools.product(*iterables)", "intent": "Cartesian product of input iterables . With arguments `*iterables`.", "question_id": 5260}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}
{"snippet": "AU_write.writeframesraw(data)", "intent": "Write audio frames , without correcting nframes . With arguments `data`.", "question_id": 9728}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "itertools.cycle(iterable)", "intent": "Make an iterator returning elements from the `iterable` and saving a copy of each .", "question_id": 5250}
{"snippet": "memory_bio.read()", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9056}
{"snippet": "bytes.isalnum()", "intent": "Return true if all bytes in the sequence are alphabetical ASCII characters or ASCII decimal digits and the sequence is not empty , false otherwise .", "question_id": 9381}
{"snippet": "ossaudiodev.OSSAudioError", "intent": "This exception is raised on certain errors.", "question_id": 7173}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "time.perf_counter()", "intent": "Return the value ( in fractional seconds ) of a performance counter , i.e .", "question_id": 10448}
{"snippet": "base_server.allow_reuse_address", "intent": "Whether the server will allow the reuse of an address.", "question_id": 8771}
{"snippet": "context.compare_total_mag(x, y)", "intent": "Compares two operands using their abstract representation , ignoring sign . With arguments `x`, `y`.", "question_id": 2523}
{"snippet": "ssl.SSLCertVerificationError", "intent": "A subclass of SSLError raised when certificate validation has failed.", "question_id": 8881}
{"snippet": "inspect.getcomments(object)", "intent": "Return in a single string any lines of comments immediately preceding the `object` \u2019 s source code ( for a class , function , or method ) , or at the top of the Python source file ( if the object is a module ) .", "question_id": 4970}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "asyncio.gather(*aws, return_exceptions=False)", "intent": "Run awaitable objects in the aws sequence concurrently . If `return_exceptions` is False ( default ) , the first raised exception is immediately propagated to the task that awaits on gather ( ) . With arguments `*aws`.", "question_id": 601}
{"snippet": "NNTP.head(file=None)", "intent": "Same as article ( ) , but sends a HEAD command . The lines returned ( or written to `file` ) will only contain the message headers , not the body .", "question_id": 6486}
{"snippet": "set.update(*others)", "intent": "Update the set , adding elements from all others . With arguments `*others`.", "question_id": 9454}
{"snippet": "asyncio.ensure_future(obj)", "intent": "Return : If `obj` is neither of the above a TypeError is raised .", "question_id": 355}
{"snippet": "curses.ascii.ispunct(c)", "intent": "Checks for any printable ASCII character which is not a space or an alphanumeric character . With arguments `c`.", "question_id": 1908}
{"snippet": "bytes(source, encoding)", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) .", "question_id": 9258}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "crypt.mksalt()", "intent": "Return a randomly generated salt of the specified `method` .", "question_id": 1676}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "test.support.check_syntax_error(testcase, statement, lineno=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `lineno` is not None , compares to the line of the SyntaxError .", "question_id": 10233}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "bound_arguments.arguments", "intent": "An ordered, mutable mapping (collections.OrderedDict) of parameters\u2019 names to arguments\u2019 values.", "question_id": 5003}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "window.resize(nlines, ncols)", "intent": "Reallocate storage for a curses window to adjust its dimensions to the specified values . With arguments `nlines`, `ncols`.", "question_id": 2108}
{"snippet": "itertools.product(*iterables)", "intent": "Cartesian product of input iterables . With arguments `*iterables`.", "question_id": 5260}
{"snippet": "importlib.abc.MetaPathFinder", "intent": "An abstract base class representing a meta path finder.", "question_id": 4802}
{"snippet": "sys.builtin_module_names", "intent": "A tuple of strings giving the names of all modules that are compiled into this Python interpreter.", "question_id": 9771}
{"snippet": "socket.timeout", "intent": "A subclass of OSError, this exception is raised when a timeout occurs on a socket which has had timeouts enabled via a prior call to settimeout() (or implicitly through setdefaulttimeout()).", "question_id": 8554}
{"snippet": "control.condition(action, condition)", "intent": "Make an entry into the ControlCondition table for this control . With arguments `action`, `condition`.", "question_id": 6131}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564}
{"snippet": "threading.Barrier(parties)", "intent": "Create a barrier object for `parties` number of threads .", "question_id": 10417}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "queue.PriorityQueue()", "intent": "Constructor for a priority queue .", "question_id": 7841}
{"snippet": "SSLContext.verify_flags", "intent": "The flags for certificate verification operations.", "question_id": 9050}
{"snippet": "SMTP.helo()", "intent": "Identify yourself to the SMTP server using HELO .", "question_id": 8515}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}
{"snippet": "style.theme_use()", "intent": "If `themename` is not given , returns the theme in use .", "question_id": 10692}
{"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}
{"snippet": "NNTP.body(file=None)", "intent": "Same as article ( ) , but sends a BODY command . The lines returned ( or written to `file` ) will only contain the message body , not the headers .", "question_id": 6490}
{"snippet": "turtle.tiltangle(angle=None)", "intent": "Set or return the current tilt-angle . If `angle` is given , rotate the turtleshape to point in the direction specified by angle , regardless of its current tilt-angle .", "question_id": 11007}
{"snippet": "errno.EACCES", "intent": "Permission denied", "question_id": 3518}
{"snippet": "tarfile.TarFile(mode='r')", "intent": "All following arguments are optional and can be accessed as instance attributes as well . `mode` is either ' r ' to read from an existing archive , ' a ' to append data to an existing file , ' w ' to create a new file overwriting an existing one , or ' x ' to create a new file only if it does not already exist .", "question_id": 9915}
{"snippet": "zipfile.BadZipFile", "intent": "The error raised for bad ZIP files.", "question_id": 12778}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "test.support.make_bad_fd()", "intent": "Create an invalid file descriptor by opening and closing a temporary file , and returning its descriptor .", "question_id": 10230}
{"snippet": "process.kill()", "intent": "Same as terminate ( ) but using the SIGKILL signal on Unix .", "question_id": 6187}
{"snippet": "importlib.resources.open_text(package, resource, encoding='utf-8')", "intent": "Open for text reading the `resource` within `package` . `encoding` and `errors` have the same meaning as with built-in open ( ) .", "question_id": 4854}
{"snippet": "ast.increment_lineno(node)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file .", "question_id": 153}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943}
{"snippet": "Document.getElementsByTagName(tagName)", "intent": "Search for all descendants ( direct children , children \u2019 s children , etc . ) With arguments `tagName`.", "question_id": 12352}
{"snippet": "unittest.mock.Mock(**kwargs)", "intent": "Create a new Mock object . With arguments `**kwargs`.", "question_id": 11560}
{"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271}
{"snippet": "curses.reset_prog_mode()", "intent": "Restore the terminal to \u201c program \u201d mode , as previously saved by def_prog_mode ( ) .", "question_id": 1972}
{"snippet": "TarInfo.uid", "intent": "User ID of the user who originally stored this member.", "question_id": 9987}
{"snippet": "set.isdisjoint(other)", "intent": "Return True if the set has no elements in common with `other` .", "question_id": 9438}
{"snippet": "parameter.kind", "intent": "Describes how argument values are bound to the parameter.", "question_id": 5001}
{"snippet": "ZipFile.extractall(path=None, pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "question_id": 12823}
{"snippet": "symbol_table.get_identifiers()", "intent": "Return a list of names of symbols in this table .", "question_id": 9742}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499}
{"snippet": "cgi.parse(fp=None)", "intent": "Parse a query in the environment or from a file ( the file defaults to sys.stdin ) . With arguments `fp`.", "question_id": 1030}
{"snippet": "scheduler.enter(delay, priority, action)", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`.", "question_id": 8122}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941}
{"snippet": "base_server.serve_forever()", "intent": "Handle requests until an explicit shutdown ( ) request .", "question_id": 8762}
{"snippet": "tkinter.tix.OptionMenu", "intent": "The OptionMenu creates a menu button of options.", "question_id": 10559}
{"snippet": "curses.def_shell_mode()", "intent": "Save the current terminal mode as the \u201c shell \u201d mode , the mode when the running program is not using curses .", "question_id": 1928}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757}
{"snippet": "sys.getsizeof(object, default)", "intent": "Return the size of an `object` in bytes . If given , `default` will be returned if the object does not provide means to retrieve the size .", "question_id": 9802}
{"snippet": "context.divide_int(x, y)", "intent": "Return `x` divided by `y` , truncated to an integer .", "question_id": 2528}
{"snippet": "context.scaleb(x, y)", "intent": "Returns the first operand after adding the second value its exp . With arguments `x`, `y`.", "question_id": 2569}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348}
{"snippet": "Cookie.value", "intent": "Cookie value (a string), or None.", "question_id": 4559}
{"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}
{"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}
{"snippet": "inspect.Signature(return_annotation=Signature.empty)", "intent": "A Signature object represents the call signature of a function and its return annotation . The optional `return_annotation` argument , can be an arbitrary Python object , is the \u201c return \u201d annotation of the callable .", "question_id": 4981}
{"snippet": "faulthandler.disable()", "intent": "Disable the fault handler : uninstall the signal handlers installed by enable ( ) .", "question_id": 3720}
{"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778}
{"snippet": "io_base.truncate()", "intent": "Resize the stream to the given `size` in bytes ( or the current position if size is not specified ) .", "question_id": 5078}
{"snippet": "test.support.run_unittest(*classes)", "intent": "Execute unittest.TestCase subclasses passed to the function . With arguments `*classes`.", "question_id": 10157}
{"snippet": "FileCookieJar.save()", "intent": "Save cookies to a file .", "question_id": 4498}
{"snippet": "context.keys()", "intent": "Return a list of all variables in the context object .", "question_id": 1658}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392}
{"snippet": "trace.results()", "intent": "Return a CoverageResults object that contains the cumulative results of all previous calls to run , runctx and runfunc for the given Trace instance .", "question_id": 10722}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "str.istitle()", "intent": "Return true if the string is a titlecased string and there is at least one character , for example uppercase characters may only follow uncased characters and lowercase characters only cased ones .", "question_id": 9212}
{"snippet": "Path.resolve(strict=False)", "intent": "Make the path absolute , resolving any symlinks . If the path doesn \u2019 t exist and `strict` is True , FileNotFoundError is raised .", "question_id": 7311}
{"snippet": "xml.etree.ElementTree.Comment()", "intent": "Comment element factory .", "question_id": 12434}
{"snippet": "smtp_channel.mailfrom", "intent": "Holds a string containing the address identified in the \u201cMAIL FROM:\u201d line from the client.", "question_id": 8443}
{"snippet": "reprlib.repr(obj)", "intent": "This is the repr ( ) method of aRepr . With arguments `obj`.", "question_id": 8052}
{"snippet": "message.get_filename()", "intent": "Return the value of the filename parameter of the Content-Disposition header of the message .", "question_id": 3017}
{"snippet": "test.support.PIPE_MAX_SIZE", "intent": "A constant that is likely larger than the underlying OS pipe buffer size, to make writes blocking.", "question_id": 10124}
{"snippet": "email.header.Header(charset=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `charset` serves two purposes : it has the same meaning as the charset argument to the append ( ) method .", "question_id": 3118}
{"snippet": "bdb.reset()", "intent": "Set the botframe , stopframe , returnframe and quitting attributes with values ready to start debugging .", "question_id": 771}
{"snippet": "SMTP.sendmail(from_addr, to_addrs, msg, mail_options=())", "intent": "Send mail . If SMTPUTF8 is included in mail_options , and the server supports it , `from_addr` and `to_addrs` may contain non-ASCII characters . `msg` may be a string containing characters in the ASCII range , or a byte string . The caller may pass a list of ESMTP options ( such as 8bitmime ) to be used in MAIL FROM commands as `mail_options` .", "question_id": 8535}
{"snippet": "errno.EUNATCH", "intent": "Protocol driver not attached", "question_id": 3554}
{"snippet": "dbm.open(file)", "intent": "Open the database `file` file and return a corresponding object .", "question_id": 2366}
{"snippet": "window.cursyncup()", "intent": "Update the current cursor position of all the ancestors of the window to reflect the current cursor position of the window .", "question_id": 2038}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "inspect.isawaitable(object)", "intent": "Return true if the `object` can be used in await expression .", "question_id": 4956}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "dis.stack_effect(opcode, oparg)", "intent": "Compute the stack effect of `opcode` with argument `oparg` .", "question_id": 2731}
{"snippet": "asyncio.SelectorEventLoop", "intent": "An event loop based on the selectors module.", "question_id": 342}
{"snippet": "statistics.StatisticsError", "intent": "Subclass of ValueError for statistics-related exceptions.", "question_id": 9141}
{"snippet": "itertools.starmap(function, iterable)", "intent": "Make an iterator that computes the `function` using arguments obtained from the `iterable` .", "question_id": 5264}
{"snippet": "urllib.request.urlcleanup()", "intent": "Cleans up temporary files that may have been left behind by previous calls to urlretrieve ( ) .", "question_id": 11889}
{"snippet": "py_compile.compile(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . `invalidation_mode` should be a member of the PycInvalidationMode enum and controls how the generated bytecode cache is invalidated at runtime .", "question_id": 7826}
{"snippet": "email_message.clear_content()", "intent": "Remove the payload and all of the Content- headers , leaving all other headers intact and in their original order .", "question_id": 3307}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "abc.ABC", "intent": "A helper class that has ABCMeta as its metaclass.", "question_id": 0}
{"snippet": "text_wrapper.replace_whitespace", "intent": "(default: True) If true, after tab expansion but before wrapping, the wrap() method will replace each whitespace character with a single space.", "question_id": 10330}
{"snippet": "sys.prefix", "intent": "A string giving the site-specific directory prefix where the platform independent Python files are installed; by default, this is the string '/usr/local'.", "question_id": 9831}
{"snippet": "SummaryInformation.Persist()", "intent": "Write the modified properties to the summary information stream , using MsiSummaryInfoPersist ( ) .", "question_id": 6080}
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : With arguments `*paths`.", "question_id": 2797}
{"snippet": "locale.YESEXPR", "intent": "Get a regular expression that can be used with the regex function to recognize a positive response to a yes/no question.", "question_id": 5365}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "asyncio.WriteTransport(BaseTransport)", "intent": "A base transport for write-only connections . With arguments `BaseTransport`.", "question_id": 391}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "decimal.Clamped", "intent": "Altered an exponent to fit representation constraints.", "question_id": 2585}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271}
{"snippet": "set.isdisjoint(other)", "intent": "Return True if the set has no elements in common with `other` .", "question_id": 9438}
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133}
{"snippet": "argparse.Namespace", "intent": "Simple class used by default by parse_args() to create an object holding attributes and return it.", "question_id": 73}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "os.times()", "intent": "Returns the current global process times .", "question_id": 7069}
{"snippet": "html.entities.codepoint2name", "intent": "A dictionary that maps Unicode code points to HTML entity names.", "question_id": 4345}
{"snippet": "test.support.TESTFN_UNICODE", "intent": "Set to a non-ASCII name for a temporary file.", "question_id": 10116}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081}
{"snippet": "resource.prlimit(pid, resource, limits)", "intent": "Combines setrlimit ( ) and getrlimit ( ) in one function and supports to get and set the resources `limits` of an arbitrary process . If `pid` is 0 , then the call applies to the current process . `resource` and limits have the same meaning as in setrlimit ( ) , except that limits is optional .", "question_id": 8073}
{"snippet": "Text.data", "intent": "The content of the text node as a string.", "question_id": 12377}
{"snippet": "gc.set_threshold(threshold0)", "intent": "Set the garbage collection thresholds ( the collection frequency ) . Setting `threshold0` to zero disables collection .", "question_id": 4178}
{"snippet": "Template.append(cmd, kind)", "intent": "Append a new action at the end . The `cmd` variable must be a valid bourne shell command . The `kind` variable consists of two letters .", "question_id": 7431}
{"snippet": "SSLSocket.server_hostname", "intent": "Hostname of the server: str type, or None for server-side socket or if the hostname was not specified in the constructor.", "question_id": 8992}
{"snippet": "asyncio.SafeChildWatcher", "intent": "This implementation avoids disrupting other code spawning processes by polling every process explicitly on a SIGCHLD signal.", "question_id": 388}
{"snippet": "null_handler.createLock()", "intent": "This method returns None for the lock , since there is no underlying I/O to which access needs to be serialized .", "question_id": 5439}
{"snippet": "operator.iadd(a, b)", "intent": "`a` = iadd ( a , `b` ) is equivalent to a += b .", "question_id": 6588}
{"snippet": "xmlrpc.client.dumps(params, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12702}
{"snippet": "random.vonmisesvariate(mu, kappa)", "intent": "`mu` is the mean angle , expressed in radians between 0 and 2*pi , and `kappa` is the concentration parameter , which must be greater than or equal to zero .", "question_id": 7915}
{"snippet": "curses.endwin()", "intent": "De-initialize the library , and return terminal to normal status .", "question_id": 1932}
{"snippet": "joinable_queue.poll()", "intent": "Return whether there is any data available to be read .", "question_id": 6235}
{"snippet": "statistics.median_grouped(data)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation .", "question_id": 9130}
{"snippet": "errno.EOVERFLOW", "intent": "Value too large for defined data type", "question_id": 3580}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832}
{"snippet": "buffering_handler.flush()", "intent": "You can override this to implement custom flushing behavior .", "question_id": 5527}
{"snippet": "ssl.enum_certificates(store_name)", "intent": "Retrieve certificates from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8899}
{"snippet": "formatter.add_line_break()", "intent": "Add a hard line break if one does not already exist .", "question_id": 3820}
{"snippet": "sys.exit(arg)", "intent": "Exit from Python . The optional argument `arg` can be an integer giving the exit status ( defaulting to zero ) , or another type of object .", "question_id": 9788}
{"snippet": "http.HTTPStatus", "intent": "A subclass of enum.IntEnum that defines a set of HTTP status codes, reason phrases and long descriptions written in English.", "question_id": 4613}
{"snippet": "email_message.iter_attachments()", "intent": "Return an iterator over all of the immediate sub-parts of the message that are not candidate \u201c body \u201d parts .", "question_id": 3288}
{"snippet": "sys.builtin_module_names", "intent": "A tuple of strings giving the names of all modules that are compiled into this Python interpreter.", "question_id": 9771}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}
{"snippet": "stat_result.st_blksize", "intent": "\u201cPreferred\u201d blocksize for efficient file system I/O.", "question_id": 6936}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "traceback_exception.from_exception(exc)", "intent": "Capture an exception for later rendering . With arguments `exc`.", "question_id": 10812}
{"snippet": "asyncio.ProactorEventLoop", "intent": "An event loop for Windows that uses \u201cI/O Completion Ports\u201d (IOCP).", "question_id": 343}
{"snippet": "tkinter.tix.NoteBook", "intent": "The NoteBook widget can be used to display many windows in a limited space using a notebook metaphor.", "question_id": 10576}
{"snippet": "buffered_reader.read1(size)", "intent": "Read and return up to `size` bytes with only one call on the raw stream .", "question_id": 5122}
{"snippet": "timezone.utc", "intent": "The UTC timezone, timezone(timedelta(0)).", "question_id": 2363}
{"snippet": "decimal.ROUND_CEILING", "intent": "Round towards Infinity.", "question_id": 2577}
{"snippet": "crypt.METHOD_SHA256", "intent": "Another Modular Crypt Format method with 16 character salt and 43 character hash based on the SHA-256 hash function.", "question_id": 1669}
{"snippet": "errno.ENETRESET", "intent": "Network dropped connection because of reset", "question_id": 3607}
{"snippet": "datetime.time", "intent": "An idealized time, independent of any particular day, assuming that every day has exactly 24*60*60 seconds (there is no notion of \u201cleap seconds\u201d here).", "question_id": 2199}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "curses.color_content(color_number)", "intent": "Return the intensity of the red , green , and blue ( RGB ) components in the color `color_number` , which must be between 0 and COLORS .", "question_id": 1924}
{"snippet": "base_rotating_handler.rotator", "intent": "If this attribute is set to a callable, the rotate() method delegates to this callable.", "question_id": 5455}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket .", "question_id": 9023}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "email.mime.audio.MIMEAudio(_audiodata, **_params, _subtype=None)", "intent": "Module : email.mime.audio `_audiodata` is a string containing the raw audio data . Otherwise you can explicitly specify the audio subtype via the `_subtype` argument . With arguments `**_params`.", "question_id": 3335}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679}
{"snippet": "IMAP4.namespace()", "intent": "Returns IMAP namespaces as defined in RFC 2342 .", "question_id": 4717}
{"snippet": "random.shuffle(x)", "intent": "Shuffle the sequence `x` in place .", "question_id": 7904}
{"snippet": "shelve.open(filename, writeback=False)", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . If the optional `writeback` parameter is set to True , all entries accessed are also cached in memory , and written back on sync ( ) and close ( ) ; this can make it handier to mutate mutable entries in the persistent dictionary , but , if many entries are accessed , it can consume vast amounts of memory for the cache , and it can make the close operation very slow since all accessed entries are written back ( there is no way to determine which accessed entries are mutable , nor which ones were actually mutated ) .", "question_id": 8237}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}
{"snippet": "pickletools.optimize(picklestring)", "intent": "Returns a new equivalent pickle string after eliminating unused PUT opcodes . With arguments `picklestring`.", "question_id": 7426}
{"snippet": "style.theme_names()", "intent": "Returns a list of all known themes .", "question_id": 10691}
{"snippet": "tixCommand.tix_getbitmap(name)", "intent": "Locates a bitmap file of the `name` name.xpm or name in one of the bitmap directories ( see the tix_addbitmapdir ( ) method ) .", "question_id": 10583}
{"snippet": "typing.Any", "intent": "Special type indicating an unconstrained type.", "question_id": 11331}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "contextmanager.__enter__()", "intent": "Enter the runtime context and return either this object or another object related to the runtime context .", "question_id": 9497}
{"snippet": "html.entities.html5", "intent": "A dictionary that maps HTML5 named character references 1 to the equivalent Unicode character(s), e.g.", "question_id": 4342}
{"snippet": "turtle.pendown()", "intent": "Pull the pen down \u2013 drawing when moving .", "question_id": 10948}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "stat.UF_COMPRESSED", "intent": "The file is stored compressed (Mac OS X 10.6+).", "question_id": 9118}
{"snippet": "FTP.rename(fromname, toname)", "intent": "Rename file `fromname` on the server to `toname` .", "question_id": 3959}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "hash.update(data)", "intent": "Update the hash object with the bytes-like object . With arguments `data`.", "question_id": 4304}
{"snippet": "io.StringIO(initial_value='')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` .", "question_id": 5165}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "email.utils.format_datetime(dt, usegmt=False)", "intent": "Like formatdate , but the input is a datetime instance . If it is an aware timezone with offset zero , then `usegmt` may be set to True , in which case the string GMT is used instead of the numeric timezone offset . With arguments `dt`.", "question_id": 3477}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499}
{"snippet": "widget.bbox(item)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) .", "question_id": 10620}
{"snippet": "queue_listener.flush()", "intent": "Ensure all logging output has been flushed .", "question_id": 5604}
{"snippet": "oss_audio_device.close()", "intent": "Explicitly close the audio device .", "question_id": 7178}
{"snippet": "email.message.Message()", "intent": "If `policy` is specified ( it must be an instance of a policy class ) use the rules it specifies to update and serialize the representation of the message .", "question_id": 2936}
{"snippet": "errno.ECHRNG", "intent": "Channel number out of range", "question_id": 3549}
{"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}
{"snippet": "errno.EADDRNOTAVAIL", "intent": "Cannot assign requested address", "question_id": 3604}
{"snippet": "subprocess.check_call(args, stdin=None)", "intent": "Run command with arguments . With arguments `args`, `stdin`.", "question_id": 9670}
{"snippet": "context.copy_sign(x, y)", "intent": "Copies the sign from `y` to `x` .", "question_id": 2526}
{"snippet": "binascii.crc32(data, value)", "intent": "Compute CRC-32 , the 32-bit checksum of `data` , starting with an initial CRC of `value` .", "question_id": 841}
{"snippet": "context.logical_and(x, y)", "intent": "Applies the logical operation and between each operand \u2019 s digits . With arguments `x`, `y`.", "question_id": 2545}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982}
{"snippet": "widget.detach(*items)", "intent": "Unlinks all of the specified items from the tree . With arguments `*items`.", "question_id": 10628}
{"snippet": "Node.hasChildNodes()", "intent": "Returns true if the node has any child nodes .", "question_id": 12328}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946}
{"snippet": "symbol.get_namespaces()", "intent": "Return a list of namespaces bound to this name .", "question_id": 9764}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698}
{"snippet": "unicodedata.combining(chr)", "intent": "Returns the canonical combining class assigned to the character `chr` as integer .", "question_id": 11351}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934}
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763}
{"snippet": "widget.selection_remove(*items)", "intent": "Remove items from the selection . With arguments `*items`.", "question_id": 10656}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}
{"snippet": "IMAP4.getquotaroot(mailbox)", "intent": "Get the list of quota roots for the named `mailbox` .", "question_id": 4705}
{"snippet": "locale.format_string(format, val, grouping=False, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5387}
{"snippet": "asyncio.Protocol(BaseProtocol)", "intent": "The base class for implementing streaming protocols ( TCP , Unix sockets , etc ) . With arguments `BaseProtocol`.", "question_id": 427}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480}
{"snippet": "email.encoders.encode_base64(msg)", "intent": "Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64 . With arguments `msg`.", "question_id": 3070}
{"snippet": "netrc.authenticators(host)", "intent": "Return a 3-tuple ( login , account , password ) of authenticators for `host` .", "question_id": 6387}
{"snippet": "ScrolledText.frame", "intent": "The frame which surrounds the text and scroll bar widgets.", "question_id": 10542}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "sys.hash_info", "intent": "A named tuple giving parameters of the numeric hash implementation.", "question_id": 9813}
{"snippet": "somenamedtuple._field_defaults", "intent": "Dictionary mapping field names to default values.", "question_id": 1388}
{"snippet": "warnings.simplefilter(action)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12033}
{"snippet": "timeit.timeit()", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10476}
{"snippet": "test.support.rmtree(path)", "intent": "Call shutil.rmtree ( ) on `path` or call os.lstat ( ) and os.rmdir ( ) to remove a path and its contents .", "question_id": 10142}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "tkinter.tix.HList", "intent": "The HList widget can be used to display any data that have a hierarchical structure, for example, file system directory trees.", "question_id": 10570}
{"snippet": "codeop.compile_command(source, symbol=\"single\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . The `symbol` argument determines whether source is compiled as a statement ( 'single ' , the default ) or as an expression ( 'eval ' ) .", "question_id": 1306}
{"snippet": "DeprecationWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "question_id": 3703}
{"snippet": "unittest.mock.PropertyMock(*args, **kwargs)", "intent": "A mock intended to be used as a property , or other descriptor , on a class . With arguments `*args`, `**kwargs`.", "question_id": 11607}
{"snippet": "DictWriter.writeheader()", "intent": "Write a row with the field names ( as specified in the constructor ) .", "question_id": 1738}
{"snippet": "dis.haslocal", "intent": "Sequence of bytecodes that access a local variable.", "question_id": 2750}
{"snippet": "struct.size", "intent": "The calculated size of the struct (and hence of the bytes object produced by the pack() method) corresponding to format.", "question_id": 9566}
{"snippet": "resource.RUSAGE_BOTH", "intent": "Pass to getrusage() to request resources consumed by both the current process and child processes.", "question_id": 8099}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "message.get_charsets()", "intent": "Return a list containing the character set names in the message .", "question_id": 3024}
{"snippet": "FutureWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python.", "question_id": 3707}
{"snippet": "json_decoder.decode(s)", "intent": "Return the Python representation of `s` ( a str instance containing a JSON document ) .", "question_id": 5320}
{"snippet": "modulefinder.ReplacePackage(oldname, newname)", "intent": "Allows specifying that the module named `oldname` is in fact the package named `newname` .", "question_id": 6024}
{"snippet": "SSLContext.set_ecdh_curve(curve_name)", "intent": "Set the curve name for Elliptic Curve-based Diffie-Hellman ( ECDH ) key exchange . The `curve_name` parameter should be a string describing a well-known elliptic curve , for example prime256v1 for a widely supported curve .", "question_id": 9021}
{"snippet": "resource.RLIMIT_SWAP", "intent": "The maximum size (in bytes) of the swap space that may be reserved or used by all of this user id\u2019s processes.", "question_id": 8093}
{"snippet": "tarfile.TarFile(format=DEFAULT_FORMAT)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . `format` controls the archive format .", "question_id": 9917}
{"snippet": "stat_result.st_blksize", "intent": "\u201cPreferred\u201d blocksize for efficient file system I/O.", "question_id": 6936}
{"snippet": "json.load(fp, **kw, parse_constant=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_constant` , if specified , will be called with one of the following strings : '-Infinity ' , 'Infinity ' , 'NaN ' . With arguments `**kw`.", "question_id": 5295}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529}
{"snippet": "sys.get_coroutine_origin_tracking_depth()", "intent": "Get the current coroutine origin tracking depth , as set by set_coroutine_origin_tracking_depth ( ) .", "question_id": 9811}
{"snippet": "test_suite.__iter__()", "intent": "Tests grouped by a TestSuite are always accessed by iteration .", "question_id": 11488}
{"snippet": "subprocess.CompletedProcess", "intent": "The return value from run(), representing a process that has finished.", "question_id": 9577}
{"snippet": "bytearray.fromhex(string)", "intent": "This bytearray class method returns bytearray object , decoding the given `string` object .", "question_id": 9267}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS", "intent": "The document contains no elements (XML requires all documents to contain exactly one top-level element)..", "question_id": 7796}
{"snippet": "queue_handler.emit(record)", "intent": "Enqueues the result of preparing the LogRecord . This can result in the `record` silently being dropped ( if logging.raiseExceptions is False ) or a message printed to sys.stderr ( if logging.raiseExceptions is True ) .", "question_id": 5554}
{"snippet": "inspect.getargvalues(frame)", "intent": "Get information about arguments passed into a particular `frame` .", "question_id": 5012}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "message.defects", "intent": "The defects attribute contains a list of all the problems found when parsing this message.", "question_id": 3030}
{"snippet": "Telnet.expect(list)", "intent": "Read until one from a `list` of a regular expressions matches .", "question_id": 10030}
{"snippet": "Dialect.delimiter", "intent": "A one-character string used to separate fields.", "question_id": 1723}
{"snippet": "mailbox.MaildirMessage()", "intent": "A `message` with Maildir-specific behaviors .", "question_id": 5811}
{"snippet": "errno.EFBIG", "intent": "File too large", "question_id": 3532}
{"snippet": "message.__delitem__(name)", "intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "question_id": 2968}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "chunk.read()", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1090}
{"snippet": "typing.List(list, MutableSequenceT)", "intent": "Generic version of `list` . With arguments `MutableSequenceT`.", "question_id": 11270}
{"snippet": "@unittest.skip(reason)", "intent": "Unconditionally skip the decorated test . `reason` should describe why the test is being skipped .", "question_id": 11358}
{"snippet": "imp.new_module(name)", "intent": "Return a new empty module object called `name` .", "question_id": 4765}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "compileall.compile_path(optimize=-1)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `optimize`.", "question_id": 1435}
{"snippet": "winreg.LoadKey(key, sub_key, file_name)", "intent": "Creates a subkey under the specified `key` and stores registration information from a specified file into that subkey . `sub_key` is a string that identifies the subkey to load . `file_name` is the name of the file to load registry data from .", "question_id": 12137}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "resource.RLIMIT_NICE", "intent": "The ceiling for the process\u2019s nice level (calculated as 20 - rlim_cur).", "question_id": 8088}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}
{"snippet": "kevent.udata", "intent": "User defined value.", "question_id": 8208}
{"snippet": "resource.RLIMIT_MEMLOCK", "intent": "The maximum address space which may be locked in memory.", "question_id": 8084}
{"snippet": "CookiePolicy.domain_return_ok(domain, request)", "intent": "Return false if cookies should not be returned , given cookie `domain` . Note that domain_return_ok ( ) is called for every cookie domain , not just for the `request` domain .", "question_id": 4534}
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824}
{"snippet": "xmlparser.ErrorCode", "intent": "Numeric code specifying the problem.", "question_id": 7749}
{"snippet": "json.load(fp, **kw)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5290}
{"snippet": "formatter.push_style(*styles)", "intent": "Push any number of arbitrary style specifications . With arguments `*styles`.", "question_id": 3832}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}
{"snippet": "window.mvderwin(y, x)", "intent": "Move the window inside its parent window . With arguments `y`, `x`.", "question_id": 2094}
{"snippet": "multiprocessing.set_executable()", "intent": "Sets the path of the Python interpreter to use when starting a child process .", "question_id": 6228}
{"snippet": "xmlparser.EndNamespaceDeclHandler(prefix)", "intent": "Called when the closing tag is reached for an element that contained a namespace declaration . With arguments `prefix`.", "question_id": 7768}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}
{"snippet": "Telnet.open(host)", "intent": "Connect to a `host` .", "question_id": 10020}
{"snippet": "datagram_handler.send(s)", "intent": "Send a pickled byte-string to a socket . With arguments `s`.", "question_id": 5493}
{"snippet": "joinable_queue.send(obj)", "intent": "Send an object to the other end of the connection which should be read using recv ( ) . With arguments `obj`.", "question_id": 6230}
{"snippet": "asyncio.StreamWriter", "intent": "Represents a writer object that provides APIs to write data to the IO stream.", "question_id": 511}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "shutil.move(src, dst)", "intent": "Recursively move a file or directory ( `src` ) to another location ( `dst` ) and return the destination .", "question_id": 8338}
{"snippet": "turtle.numinput(title, prompt)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input .", "question_id": 11084}
{"snippet": "WindowsError", "intent": "Only available on Windows.", "question_id": 3684}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951}
{"snippet": "cursor.fetchone()", "intent": "Fetches the next row of a query result set , returning a single sequence , or None when no more data is available .", "question_id": 8844}
{"snippet": "PurePath.suffix", "intent": "The file extension of the final component, if any:", "question_id": 7250}
{"snippet": "context.to_eng_string(x)", "intent": "Convert to a string , using engineering notation if an exponent is needed . With arguments `x`.", "question_id": 2573}
{"snippet": "tarfile.TarFile(dereference=False)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . If `dereference` is False , add symbolic and hard links to the archive .", "question_id": 9919}
{"snippet": "loop.shutdown_asyncgens()", "intent": "Schedule all currently open asynchronous generator objects to close with an aclose ( ) call .", "question_id": 188}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}
{"snippet": "winreg.REG_QWORD_LITTLE_ENDIAN", "intent": "A 64-bit number in little-endian format.", "question_id": 12183}
{"snippet": "help(object)", "intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "question_id": 4030}
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763}
{"snippet": "concurrent.futures.as_completed(fs)", "intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) .", "question_id": 1484}
{"snippet": "sax2_dom.getEvent()", "intent": "Return a tuple containing event and the current node as xml.dom.minidom.Document if event equals START_DOCUMENT , xml.dom.minidom.Element if event equals START_ELEMENT or END_ELEMENT or xml.dom.minidom.Text if event equals CHARACTERS .", "question_id": 12432}
{"snippet": "xmlrpc.server.SimpleXMLRPCRequestHandler", "intent": "Create a new request handler instance.", "question_id": 12730}
{"snippet": "email.policy.SMTP", "intent": "Suitable for serializing messages in conformance with the email RFCs.", "question_id": 3440}
{"snippet": "stat.UF_HIDDEN", "intent": "The file should not be displayed in a GUI (Mac OS X 10.5+).", "question_id": 9119}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "pprint.PrettyPrinter(compact=False)", "intent": "Construct a PrettyPrinter instance . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7628}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "Cookie.port", "intent": "String representing a port or a set of ports (eg.", "question_id": 4560}
{"snippet": "aifc.getsampwidth()", "intent": "Return the size in bytes of individual samples .", "question_id": 12}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "cursor.execute(sql)", "intent": "Executes an SQL statement . With arguments `sql`.", "question_id": 8841}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "robot_file_parser.safe", "intent": "The UUID was generated by the platform in a multiprocessing-safe way.", "question_id": 11934}
{"snippet": "tempfile.gettempdir()", "intent": "Return the name of the directory used for temporary files .", "question_id": 10089}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716}
{"snippet": "OptionParser.print_usage()", "intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "question_id": 6644}
{"snippet": "loop.get_task_factory()", "intent": "Return a task factory or None if the default one is in use .", "question_id": 201}
{"snippet": "re.fullmatch(pattern, string)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object .", "question_id": 7941}
{"snippet": "timeit.Timer(stmt='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals .", "question_id": 10498}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "re.escape(pattern)", "intent": "Escape special characters in `pattern` .", "question_id": 7959}
{"snippet": "html_calendar.cssclasses_weekday_head", "intent": "A list of CSS classes used for weekday names in the header row.", "question_id": 972}
{"snippet": "urllib.request.urlretrieve(url)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11881}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "Telnet.read_lazy()", "intent": "Process and return data already in the queues ( lazy ) .", "question_id": 10015}
{"snippet": "curses.has_colors()", "intent": "Return True if the terminal can display colors ; otherwise , return False .", "question_id": 1940}
{"snippet": "SubprocessTransport.close()", "intent": "Kill the subprocess by calling the kill ( ) method .", "question_id": 425}
{"snippet": "Popen.wait(timeout=None)", "intent": "Wait for child process to terminate . If the process does not terminate after `timeout` seconds , raise a TimeoutExpired exception .", "question_id": 9611}
{"snippet": "socketserver.BaseRequestHandler", "intent": "This is the superclass of all request handler objects.", "question_id": 8783}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716}
{"snippet": "platform.architecture()", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information .", "question_id": 7458}
{"snippet": "oss_audio_device.writeall(data)", "intent": "Write a bytes-like object `data` to the audio device : waits until the audio device is able to accept data , writes as much data as it will accept , and repeats until data has been completely written .", "question_id": 7182}
{"snippet": "asyncio.new_event_loop()", "intent": "Create a new event loop object .", "question_id": 181}
{"snippet": "sys.getsizeof(object)", "intent": "Return the size of an `object` in bytes .", "question_id": 9803}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "tkinter.tix.PanedWindow", "intent": "The PanedWindow widget allows the user to interactively manipulate the sizes of several panes.", "question_id": 10574}
{"snippet": "ZipInfo.file_size", "intent": "Size of the uncompressed file.", "question_id": 12879}
{"snippet": "os.access(path, mode, effective_ids=False)", "intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions . If `effective_ids` is True , access ( ) will perform its access checks using the effective uid/gid instead of the real uid/gid .", "question_id": 6822}
{"snippet": "inspect.ismethod(object)", "intent": "Return true if the `object` is a bound method written in Python .", "question_id": 4950}
{"snippet": "os.getgrouplist(user, group)", "intent": "Return list of `group` ids that `user` belongs to .", "question_id": 6677}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454}
{"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343}
{"snippet": "template.substitute(mapping, **kwds)", "intent": "Performs the template substitution , returning a new string . `mapping` is any dictionary-like object with keys that match the placeholders in the template . With arguments `**kwds`.", "question_id": 9526}
{"snippet": "urllib.request.url2pathname(path)", "intent": "Convert the `path` component path from a percent-encoded URL to the local syntax for a path .", "question_id": 11766}
{"snippet": "NodeList.length", "intent": "The number of nodes in the sequence.", "question_id": 12337}
{"snippet": "collections.ChainMap(*maps)", "intent": "A ChainMap groups multiple dicts or other mappings together to create a single , updateable view . With arguments `*maps`.", "question_id": 1335}
{"snippet": "winreg.REG_FULL_RESOURCE_DESCRIPTOR", "intent": "A hardware setting.", "question_id": 12185}
{"snippet": "socket.CMSG_LEN(length)", "intent": "Return the total `length` , without trailing padding , of an ancillary data item with associated data of the given length .", "question_id": 8665}
{"snippet": "TarFile.open()", "intent": "Alternative constructor .", "question_id": 9923}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "i_pv4_network.subnets(new_prefix=None)", "intent": "The subnets that join to make the current network definition , depending on the argument values . `new_prefix` is the desired new prefix of the subnets ; it must be larger than our prefix .", "question_id": 5210}
{"snippet": "doctest.Example(source, want, options=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `options`.", "question_id": 2828}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "ossaudiodev.OSSAudioError", "intent": "This exception is raised on certain errors.", "question_id": 7173}
{"snippet": "gc.DEBUG_UNCOLLECTABLE", "intent": "Print information of uncollectable objects found (objects which are not reachable but cannot be freed by the collector).", "question_id": 4191}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518}
{"snippet": "asyncio.BoundedSemaphore()", "intent": "A bounded semaphore object .", "question_id": 588}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490}
{"snippet": "message.get_content_type()", "intent": "Return the message \u2019 s content type .", "question_id": 2978}
{"snippet": "multiprocessing.sharedctypes.copy(obj)", "intent": "Return a ctypes object allocated from shared memory which is a copy of the ctypes object `obj` .", "question_id": 6275}
{"snippet": "formatter.format(record)", "intent": "The `record` \u2019 s attribute dictionary is used as the operand to a string formatting operation .", "question_id": 5618}
{"snippet": "Path.write_text(data)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file :", "question_id": 7323}
{"snippet": "FileCookieJar.save(ignore_discard=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4500}
{"snippet": "socket.create_connection(address)", "intent": "Connect to a TCP service listening on the Internet `address` ( a 2-tuple ( host , port ) ) , and return the socket object .", "question_id": 8629}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "UnboundLocalError", "intent": "Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.", "question_id": 3672}
{"snippet": "base_request_handler.handle()", "intent": "This function must do all the work required to service a request .", "question_id": 8785}
{"snippet": "email.charset.add_codec(charset, codecname)", "intent": "Add a codec that map characters in the given character set to and from Unicode . `charset` is the canonical name of a character set . `codecname` is the name of a Python codec , as appropriate for the second argument to the str \u2019 s encode ( ) method .", "question_id": 2935}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "email.headerregistry.Address()", "intent": "The class used to represent an email address .", "question_id": 3186}
{"snippet": "ast.get_docstring(node, clean=True)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring . If `clean` is true , clean up the docstring \u2019 s indentation with inspect.cleandoc ( ) .", "question_id": 151}
{"snippet": "XMLReader.parse(source)", "intent": "Process an input `source` , producing SAX events .", "question_id": 12613}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "trace.Trace(countcallers=0)", "intent": "Create an object to `trace` execution of a single statement or expression . `countcallers` enables call relationship tracking .", "question_id": 10710}
{"snippet": "cgi.parse()", "intent": "Parse a query in the environment or from a file ( the file defaults to sys.stdin ) .", "question_id": 1029}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "widget.insert(parent, index, **kw, iid=None)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . If `iid` is specified , it is used as the item identifier ; iid must not already exist in the tree . With arguments `**kw`.", "question_id": 10641}
{"snippet": "os.path.relpath(path)", "intent": "Return a relative filepath to `path` either from the current directory or from an optional `start` directory .", "question_id": 7164}
{"snippet": "FileCookieJar.filename", "intent": "Filename of default file in which to keep cookies.", "question_id": 4522}
{"snippet": "tabnanny.verbose", "intent": "Flag indicating whether to print verbose messages.", "question_id": 9886}
{"snippet": "@classmethod", "intent": "Transform a method into a class method.", "question_id": 3991}
{"snippet": "context.logical_invert(x)", "intent": "Invert all the digits in `x` .", "question_id": 2546}
{"snippet": "mh.get_file(key)", "intent": "Depending upon the host platform , it may not be possible to remove the underlying message while the returned file remains open . With arguments `key`.", "question_id": 5791}
{"snippet": "ssl.OP_NO_TICKET", "intent": "Prevent client side from requesting a session ticket.", "question_id": 8944}
{"snippet": "InteractiveInterpreter.showtraceback()", "intent": "Display the exception that just occurred .", "question_id": 1182}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400}
{"snippet": "InteractiveConsole.interact(banner=None)", "intent": "Closely emulate the interactive Python console . The optional `banner` argument specify the banner to print before the first interaction ; by default it prints a banner similar to the one printed by the standard Python interpreter , followed by the class name of the console object in parentheses ( so as not to confuse this with the real interpreter \u2013 since it \u2019 s so close !", "question_id": 1185}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "json.JSONEncoder(default=None)", "intent": "Extensible JSON encoder for Python data structures . Supports the following objects and types by `default` :", "question_id": 5330}
{"snippet": "base64.urlsafe_b64encode(s)", "intent": "Encode bytes-like object `s` using the URL- and filesystem-safe alphabet , which substitutes - instead of + and _ instead of / in the standard Base64 alphabet , and return the encoded bytes .", "question_id": 716}
{"snippet": "aifc.setsampwidth(width)", "intent": "Specify the size in bytes of audio samples . With arguments `width`.", "question_id": 28}
{"snippet": "xml.sax.handler.EntityResolver", "intent": "Basic interface for resolving entities.", "question_id": 12566}
{"snippet": "asyncio.current_task(loop=None)", "intent": "Return the currently running Task instance , or None if no task is running . If `loop` is None get_running_loop ( ) is used to get the current loop .", "question_id": 621}
{"snippet": "ssl.OP_NO_COMPRESSION", "intent": "Disable compression on the SSL channel.", "question_id": 8942}
{"snippet": "linecache.checkcache()", "intent": "Check the cache for validity .", "question_id": 5346}
{"snippet": "os.terminal_size", "intent": "A subclass of tuple, holding (columns, lines) of the terminal window size.", "question_id": 6813}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "urllib.request.urlopen(url, cafile=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "question_id": 11754}
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701}
{"snippet": "SSLContext.sni_callback", "intent": "Register a callback function that will be called after the TLS Client Hello handshake message has been received by the SSL/TLS server when the TLS client specifies a server name indication.", "question_id": 9018}
{"snippet": "json.load(fp, **kw)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5290}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "stringprep.in_table_a1(code)", "intent": "Determine whether `code` is in tableA.1 ( Unassigned code points in Unicode 3.2 ) .", "question_id": 9531}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}
{"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}
{"snippet": "Cookie.port_specified", "intent": "True if a port or set of ports was explicitly specified by the server (in the Set-Cookie / Set-Cookie2 header).", "question_id": 4568}
{"snippet": "Telnet.expect(list)", "intent": "Read until one from a `list` of a regular expressions matches .", "question_id": 10030}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "cmath.sqrt(x)", "intent": "Return the square root of `x` .", "question_id": 1100}
{"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819}
{"snippet": "process.start()", "intent": "Start the process \u2019 s activity .", "question_id": 6176}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "smtpd.DebuggingServer(localaddr, remoteaddr)", "intent": "Create a new debugging server . With arguments `localaddr`, `remoteaddr`.", "question_id": 8424}
{"snippet": "audioop.minmax(fragment, width)", "intent": "Return a tuple consisting of the minimum and maximum values of all samples in the sound `fragment` . With arguments `width`.", "question_id": 698}
{"snippet": "datetime.min", "intent": "The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None).", "question_id": 2269}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351}
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "locale.LC_ALL", "intent": "Combination of all locale settings.", "question_id": 5410}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4502}
{"snippet": "pickle.Unpickler(file)", "intent": "This takes a binary `file` for reading a pickle data stream .", "question_id": 7398}
{"snippet": "crypt.METHOD_CRYPT", "intent": "The traditional method with a 2 character salt and 13 characters of hash.", "question_id": 1672}
{"snippet": "structure._pack_", "intent": "An optional small integer that allows overriding the alignment of structure fields in the instance.", "question_id": 1891}
{"snippet": "sys.__interactivehook__", "intent": "When this attribute exists, its value is automatically called (with no arguments) when the interpreter is launched in interactive mode.", "question_id": 9817}
{"snippet": "json.dump(obj, fp, **kw, ensure_ascii=True)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped . With arguments `**kw`.", "question_id": 5272}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "io.RawIOBase", "intent": "Base class for raw binary I/O.", "question_id": 5083}
{"snippet": "HTTPResponse.reason", "intent": "Reason phrase returned by server.", "question_id": 4465}
{"snippet": "locale.format_string(format, val, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5386}
{"snippet": "ipaddress.ip_address(address)", "intent": "Return an IPv4Address or IPv6Address object depending on the IP `address` passed as argument .", "question_id": 5170}
{"snippet": "ast.get_docstring(node, clean=True)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring . If `clean` is true , clean up the docstring \u2019 s indentation with inspect.cleandoc ( ) .", "question_id": 151}
{"snippet": "decimal.compare_signal(other)", "intent": "This operation is identical to the compare ( ) method , except that all NaNs signal . With arguments `other`.", "question_id": 2401}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}
{"snippet": "Document.getElementsByTagName(tagName)", "intent": "Search for all descendants ( direct children , children \u2019 s children , etc . ) With arguments `tagName`.", "question_id": 12352}
{"snippet": "faulthandler.dump_traceback_later(timeout, exit=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . If `exit` is True , call _exit ( ) with status=1 after dumping the tracebacks .", "question_id": 3725}
{"snippet": "contextmanager.__enter__()", "intent": "Enter the runtime context and return either this object or another object related to the runtime context .", "question_id": 9497}
{"snippet": "types.FunctionType", "intent": "The type of user-defined functions and functions created by lambda  expressions.", "question_id": 11183}
{"snippet": "maildir.list_folders()", "intent": "Return a list of the names of all folders .", "question_id": 5758}
{"snippet": "queue.cancel_join_thread()", "intent": "Prevent join_thread ( ) from blocking .", "question_id": 6210}
{"snippet": "task.print_stack(file=None)", "intent": "Print the stack or traceback for this Task . The `file` argument is an I/O stream to which the output is written ; by default output is written to sys.stderr .", "question_id": 638}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659}
{"snippet": "Element.getAttribute(name)", "intent": "Return the value of the attribute named by `name` as a string .", "question_id": 12359}
{"snippet": "decimal.is_signed()", "intent": "Return True if the argument has a negative sign and False otherwise .", "question_id": 2424}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529}
{"snippet": "email.policy.compat32", "intent": "An instance of Compat32, providing  backward compatibility with the behavior of the email package in Python 3.2.", "question_id": 3451}
{"snippet": "zipfile.ZipFile(file, compression=ZIP_STORED, compresslevel=None)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "question_id": 12801}
{"snippet": "multiprocessing.Queue()", "intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores .", "question_id": 6196}
{"snippet": "fileinput.lineno()", "intent": "Return the cumulative line number of the line that has just been read .", "question_id": 3794}
{"snippet": "HTTPConnection.blocksize", "intent": "Buffer size in bytes for sending a file-like message body.", "question_id": 4443}
{"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145}
{"snippet": "winreg.REG_DWORD_BIG_ENDIAN", "intent": "A 32-bit number in big-endian format.", "question_id": 12177}
{"snippet": "os.fstat(fd)", "intent": "Get the status of the file descriptor `fd` .", "question_id": 6723}
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "asyncio.Task(coro, loop=None)", "intent": "A Future-like object that runs a Python coroutine . Event loops use cooperative scheduling : an event `loop` runs one Task at a time . With arguments `coro`.", "question_id": 625}
{"snippet": "asyncio.SendfileNotAvailableError", "intent": "The \u201csendfile\u201d syscall is not available for the given socket or file type.", "question_id": 348}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}
{"snippet": "socket.recvmsg_into(buffers)", "intent": "Receive normal data and ancillary data from the socket , behaving as recvmsg ( ) would , but scatter the non-ancillary data into a series of `buffers` instead of returning a new bytes object .", "question_id": 8710}
{"snippet": "PurePath.joinpath(*other)", "intent": "Calling this method is equivalent to combining the path with each of the other arguments in turn : With arguments `*other`.", "question_id": 7257}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "inspect.getdoc(object)", "intent": "Get the documentation string for an `object` , cleaned up with cleandoc ( ) .", "question_id": 4969}
{"snippet": "threading.main_thread()", "intent": "Return the main Thread object .", "question_id": 10345}
{"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919}
{"snippet": "netrc.macros", "intent": "Dictionary mapping macro names to string lists.", "question_id": 6390}
{"snippet": "str.isdecimal()", "intent": "Return true if all characters in the string are decimal characters and there is at least one character , false otherwise .", "question_id": 9205}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`.", "question_id": 3042}
{"snippet": "datetime.time(hour=0)", "intent": "All arguments are optional . With arguments `hour`.", "question_id": 2315}
{"snippet": "cursor.executescript(sql_script)", "intent": "This is a nonstandard convenience method for executing multiple SQL statements at once . `sql_script` can be an instance of str .", "question_id": 8843}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012}
{"snippet": "mh.set_sequences(sequences)", "intent": "Re-define the `sequences` that exist in the mailbox based upon sequences , a dictionary of names mapped to key lists , like returned by get_sequences ( ) .", "question_id": 5784}
{"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}
{"snippet": "FileCookieJar.filename", "intent": "Filename of default file in which to keep cookies.", "question_id": 4522}
{"snippet": "coverage_results.write_results(coverdir=None)", "intent": "Write coverage results . `coverdir` specifies the directory into which the coverage result files will be output .", "question_id": 10728}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "os.removedirs(name)", "intent": "Remove directories recursively . With arguments `name`.", "question_id": 6891}
{"snippet": "winreg.HKEY_USERS", "intent": "Registry entries subordinate to this key define the default user configuration for new users on the local computer and the user configuration for the current user.", "question_id": 12158}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "bdb.reset()", "intent": "Set the botframe , stopframe , returnframe and quitting attributes with values ready to start debugging .", "question_id": 771}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}
{"snippet": "str.expandtabs()", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size .", "question_id": 9192}
{"snippet": "os.access(path, mode, effective_ids=False)", "intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions . If `effective_ids` is True , access ( ) will perform its access checks using the effective uid/gid instead of the real uid/gid .", "question_id": 6822}
{"snippet": "operator.and_(a, b)", "intent": "Return the bitwise and of `a` and `b` .", "question_id": 6534}
{"snippet": "SimpleXMLRPCServer.register_function()", "intent": "Register a `function` that can respond to XML-RPC requests .", "question_id": 12731}
{"snippet": "curses.def_prog_mode()", "intent": "Save the current terminal mode as the \u201c program \u201d mode , the mode when the running program is using curses .", "question_id": 1927}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025}
{"snippet": "hashlib.algorithms_available", "intent": "A set containing the names of the hash algorithms that are available in the running Python interpreter.", "question_id": 4300}
{"snippet": "ipaddress.NetmaskValueError(ValueError)", "intent": "Any value error related to the net mask . With arguments `ValueError`.", "question_id": 5238}
{"snippet": "mime_types.readfp(fp)", "intent": "Load MIME type information from an open file `fp` .", "question_id": 5972}
{"snippet": "winsound.SND_PURGE", "intent": "Stop playing all instances of the specified sound.", "question_id": 12200}
{"snippet": "sys.dllhandle", "intent": "Integer specifying the handle of the Python DLL.", "question_id": 9778}
{"snippet": "tracemalloc.get_traceback_limit()", "intent": "Get the maximum number of frames stored in the traceback of a trace .", "question_id": 10843}
{"snippet": "winreg.EnableReflectionKey(key)", "intent": "Restores registry reflection for the specified disabled `key` .", "question_id": 12153}
{"snippet": "netrc.authenticators(host)", "intent": "Return a 3-tuple ( login , account , password ) of authenticators for `host` .", "question_id": 6387}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797}
{"snippet": "FTP_TLS.prot_p()", "intent": "Set up secure data connection .", "question_id": 3971}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "test_case.maxDiff", "intent": "This attribute controls the maximum length of diffs output by assert methods that report diffs on failure.", "question_id": 11466}
{"snippet": "code.InteractiveConsole()", "intent": "Closely emulate the behavior of the interactive Python interpreter .", "question_id": 1157}
{"snippet": "html.entities.codepoint2name", "intent": "A dictionary that maps Unicode code points to HTML entity names.", "question_id": 4345}
{"snippet": "sys.float_info", "intent": "A named tuple holding information about the float type.", "question_id": 9791}
{"snippet": "socket.recv(bufsize)", "intent": "Receive data from the socket . The maximum amount of data to be received at once is specified by `bufsize` .", "question_id": 8702}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573}
{"snippet": "@typing.overload", "intent": "The @overload decorator allows describing functions and methods that support multiple different combinations of argument types.", "question_id": 11327}
{"snippet": "filter(function, iterable)", "intent": "Construct an iterator from those elements of `iterable` for which `function` returns true .", "question_id": 4018}
{"snippet": "test_suite.addTests(tests)", "intent": "Add all the `tests` from an iterable of TestCase and TestSuite instances to this test suite .", "question_id": 11484}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "mock.reset_mock()", "intent": "The reset_mock method resets all the call attributes on a mock object :", "question_id": 11578}
{"snippet": "Pattern.match(string)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object .", "question_id": 7975}
{"snippet": "context.normalize(x)", "intent": "Reduces `x` to its simplest form .", "question_id": 2558}
{"snippet": "os.path.getctime(path)", "intent": "Return the system \u2019 s ctime which , on some systems ( like Unix ) is the time of the last metadata change , and , on others ( like Windows ) , is the creation time for `path` .", "question_id": 7153}
{"snippet": "window.insstr(str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`.", "question_id": 2082}
{"snippet": "sys.implementation", "intent": "An object containing information about the implementation of the currently running Python interpreter.", "question_id": 9815}
{"snippet": "audioop.reverse(fragment, width)", "intent": "Reverse the samples in a `fragment` and returns the modified fragment . With arguments `width`.", "question_id": 703}
{"snippet": "calendar.day_name", "intent": "An array that represents the days of the week in the current locale.", "question_id": 1022}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "PurePath.as_posix()", "intent": "Return a string representation of the path with forward slashes ( / ) :", "question_id": 7253}
{"snippet": "unittest.TextTestRunner()", "intent": "A basic test runner implementation that outputs results to a `stream` .", "question_id": 11533}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "inspect.CO_OPTIMIZED", "intent": "The code object is optimized, using fast locals.", "question_id": 5040}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460}
{"snippet": "example.indent", "intent": "The example\u2019s indentation in the containing string, i.e., the number of space characters that precede the example\u2019s first prompt.", "question_id": 2838}
{"snippet": "cmath.sqrt(x)", "intent": "Return the square root of `x` .", "question_id": 1100}
{"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}
{"snippet": "writer.new_margin(margin, level)", "intent": "Set the `margin` `level` to the integer level and the logical tag to margin .", "question_id": 3844}
{"snippet": "structure._pack_", "intent": "An optional small integer that allows overriding the alignment of structure fields in the instance.", "question_id": 1891}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "xmlparser.buffer_text", "intent": "Setting this to true causes the xmlparser object to buffer textual content returned by Expat to avoid multiple calls to the CharacterDataHandler() callback whenever possible.", "question_id": 7744}
{"snippet": "xml.etree.ElementTree.TreeBuilder()", "intent": "Generic element structure builder .", "question_id": 12539}
{"snippet": "logging.config.stopListening()", "intent": "Stops the listening server which was created with a call to listen ( ) .", "question_id": 5420}
{"snippet": "test_suite.__iter__()", "intent": "Tests grouped by a TestSuite are always accessed by iteration .", "question_id": 11488}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835}
{"snippet": "signal.NSIG", "intent": "One more than the number of the highest signal number.", "question_id": 8378}
{"snippet": "decimal.ROUND_05UP", "intent": "Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero.", "question_id": 2584}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "secrets.compare_digest(a, b)", "intent": "Return True if strings `a` and `b` are equal , otherwise False , in such a way as to reduce the risk of timing attacks .", "question_id": 8147}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "errno.EINPROGRESS", "intent": "Operation now in progress", "question_id": 3620}
{"snippet": "decimal.copy_negate()", "intent": "Return the negation of the argument .", "question_id": 2409}
{"snippet": "Node.unlink()", "intent": "Break internal references within the DOM so that it will be garbage collected on versions of Python without cyclic GC .", "question_id": 12402}
{"snippet": "FTP_TLS.prot_p()", "intent": "Set up secure data connection .", "question_id": 3971}
{"snippet": "cursor.execute(sql, parameters)", "intent": "Executes an SQL statement . With arguments `sql`, `parameters`.", "question_id": 8840}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "policy.header_store_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` provided by the application program when the application program is modifying a Message programmatically ( as opposed to a Message created by a parser ) .", "question_id": 3424}
{"snippet": "random.setstate(state)", "intent": "`state` should have been obtained from a previous call to getstate ( ) , and setstate ( ) restores the internal state of the generator to what it was at the time getstate ( ) was called .", "question_id": 7888}
{"snippet": "imp.NullImporter(path_string)", "intent": "The NullImporter type is a PEP 302 import hook that handles non-directory path strings by failing to find any modules . With arguments `path_string`.", "question_id": 4780}
{"snippet": "Option.TYPES", "intent": "A tuple of type names; in your subclass, simply define a new tuple TYPES that builds on the standard one.", "question_id": 6649}
{"snippet": "ZipFile.open(name, pwd=None)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . `pwd` is the password used to decrypt encrypted ZIP files .", "question_id": 12808}
{"snippet": "Telnet.expect(list)", "intent": "Read until one from a `list` of a regular expressions matches .", "question_id": 10030}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "ast.literal_eval(node_or_string)", "intent": "Safely evaluate an expression node or a string containing a Python literal or container display . With arguments `node_or_string`.", "question_id": 149}
{"snippet": "email_message.get_content(*args, **kw)", "intent": "Call the get_content ( ) method of the `content_manager` , passing self as the message object , and passing along any other arguments or keywords as additional arguments . With arguments `*args`, `**kw`.", "question_id": 3290}
{"snippet": "connection.backup(target, pages=0)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time .", "question_id": 8830}
{"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254}
{"snippet": "urllib.request.ProxyHandler()", "intent": "Cause requests to go through a proxy .", "question_id": 11784}
{"snippet": "InteractiveConsole.resetbuffer()", "intent": "Remove any unhandled source text from the input buffer .", "question_id": 1189}
{"snippet": "unittest.mock.patch(target, **kwargs)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11608}
{"snippet": "tarfile.TarFile", "intent": "Class for reading and writing tar archives.", "question_id": 9900}
{"snippet": "base_http_request_handler.handle()", "intent": "Calls handle_one_request ( ) once ( or , if persistent connections are enabled , multiple times ) to handle incoming HTTP requests .", "question_id": 4634}
{"snippet": "ssl.VERIFY_X509_STRICT", "intent": "Possible value for SSLContext.verify_flags to disable workarounds for broken X.509 certificates.", "question_id": 8918}
{"snippet": "modulefinder.ModuleFinder(excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6028}
{"snippet": "SSLSocket.verify_client_post_handshake()", "intent": "Requests post-handshake authentication ( PHA ) from a TLS 1.3 client .", "question_id": 8987}
{"snippet": "test.support.FS_NONASCII", "intent": "A non-ASCII character encodable by os.fsencode().", "question_id": 10114}
{"snippet": "connection.executescript(sql_script)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executescript ( ) method with the given `sql_script` , and returns the cursor .", "question_id": 8815}
{"snippet": "system_random.pattern", "intent": "The regular expression pattern.", "question_id": 7966}
{"snippet": "multiprocessing.Queue()", "intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores .", "question_id": 6196}
{"snippet": "doctest.DocTestParser", "intent": "A processing class used to extract interactive examples from a string, and use them to create a DocTest object.", "question_id": 2855}
{"snippet": "DeprecationWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "question_id": 3703}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this turtle .", "question_id": 11019}
{"snippet": "calendar.itermonthdays(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 913}
{"snippet": "SMTP.login(user, password, initial_response_ok=True)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . `initial_response_ok` is passed through to auth ( ) . With arguments `user`.", "question_id": 8523}
{"snippet": "cmath.inf", "intent": "Floating-point positive infinity.", "question_id": 1123}
{"snippet": "window.insstr(str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`.", "question_id": 2082}
{"snippet": "class.mro()", "intent": "This method can be overridden by a metaclass to customize the method resolution order for its instances .", "question_id": 9505}
{"snippet": "turtle.showturtle()", "intent": "Make the turtle visible .", "question_id": 10979}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "tracemalloc.start()", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators .", "question_id": 10847}
{"snippet": "sync_manager.list(sequence)", "intent": "Create a shared list object and return a proxy for it . With arguments `sequence`.", "question_id": 6317}
{"snippet": "socket.detach()", "intent": "Put the socket object into closed state without actually closing the underlying file descriptor .", "question_id": 8678}
{"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415}
{"snippet": "turtle.Vec2D(x, y)", "intent": "A two-dimensional vector class , used as a helper class for implementing turtle graphics . With arguments `x`, `y`.", "question_id": 11167}
{"snippet": "tkinter.tix.DirSelectDialog", "intent": "The DirSelectDialog widget presents the directories in the file system in a dialog window.", "question_id": 10565}
{"snippet": "test_case.defaultTestResult()", "intent": "Return an instance of the test result class that should be used for this test case class ( if no other result instance is provided to the run ( ) method ) .", "question_id": 11468}
{"snippet": "calendar.isleap(year)", "intent": "Returns True if `year` is a leap year , otherwise False .", "question_id": 987}
{"snippet": "errno.ELIBEXEC", "intent": "Cannot exec a shared library directly", "question_id": 3588}
{"snippet": "os.getgroups()", "intent": "Return list of supplemental group ids associated with the current process .", "question_id": 6678}
{"snippet": "platform.libc_ver()", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7537}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832}
{"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "types.ClassMethodDescriptorType", "intent": "The type of unbound class methods of some built-in data types such as dict.__dict__['fromkeys'].", "question_id": 11195}
{"snippet": "sys.api_version", "intent": "The C API version for this interpreter.", "question_id": 9853}
{"snippet": "os.terminal_size", "intent": "A subclass of tuple, holding (columns, lines) of the terminal window size.", "question_id": 6813}
{"snippet": "SMTP.verify(address)", "intent": "Check the validity of an `address` on this server using SMTP VRFY .", "question_id": 8521}
{"snippet": "tkinter.tix.DirSelectDialog", "intent": "The DirSelectDialog widget presents the directories in the file system in a dialog window.", "question_id": 10565}
{"snippet": "errno.EBADFD", "intent": "File descriptor in bad state", "question_id": 3582}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971}
{"snippet": "mailbox.itervalues()", "intent": "Return an iterator over representations of all messages if called as itervalues ( ) or __iter__ ( ) or return a list of such representations if called as values ( ) .", "question_id": 5731}
{"snippet": "ctypes.DllCanUnloadNow()", "intent": "Windows only : This function is a hook which allows implementing in-process COM servers with ctypes .", "question_id": 1817}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "widget.index(item)", "intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "question_id": 10639}
{"snippet": "chunk.read()", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1090}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488}
{"snippet": "configparser.InterpolationError", "intent": "Base class for exceptions raised when problems occur performing string interpolation.", "question_id": 1596}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "POP3.rpop(user)", "intent": "Use RPOP authentication ( similar to UNIX r-commands ) to log into POP3 server . With arguments `user`.", "question_id": 7607}
{"snippet": "datetime.strptime(date_string, format)", "intent": "Return a datetime corresponding to `date_string` , parsed according to `format` .", "question_id": 2268}
{"snippet": "formatter.vformat(format_string, args, kwargs)", "intent": "This function does the actual work of formatting . With arguments `format_string`, `args`, `kwargs`.", "question_id": 9518}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "Popen.stdin", "intent": "If the stdin argument was PIPE, this attribute is a writeable stream object as returned by open().", "question_id": 9620}
{"snippet": "window.getstr(y, x)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`.", "question_id": 2061}
{"snippet": "cgi.print_environ()", "intent": "Format the shell environment in HTML .", "question_id": 1053}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "tokenize.TokenError", "intent": "Raised when either a docstring or expression that may be split over several lines is not completed anywhere in the file, for example:", "question_id": 10705}
{"snippet": "SMTP.auth(mechanism, authobject)", "intent": "Issue an SMTP AUTH command for the specified authentication `mechanism` , and handle the challenge response via `authobject` .", "question_id": 8524}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626}
{"snippet": "tracemalloc.get_traceback_limit()", "intent": "Get the maximum number of frames stored in the traceback of a trace .", "question_id": 10843}
{"snippet": "csv.register_dialect(name, dialect, **fmtparams)", "intent": "Associate `dialect` with `name` . With arguments `**fmtparams`.", "question_id": 1684}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "errno.ETXTBSY", "intent": "Text file busy", "question_id": 3531}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "asyncio.as_completed(aws, loop=None)", "intent": "Run awaitable objects in the `aws` set concurrently . With arguments `loop`.", "question_id": 616}
{"snippet": "cgi.parse()", "intent": "Parse a query in the environment or from a file ( the file defaults to sys.stdin ) .", "question_id": 1029}
{"snippet": "lock.acquire()", "intent": "Acquire a lock , blocking or non-blocking .", "question_id": 6252}
{"snippet": "turtle.shape()", "intent": "Set turtle shape to shape with given `name` or , if name is not given , return name of current shape .", "question_id": 10982}
{"snippet": "operator.iconcat(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6592}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705}
{"snippet": "SSLSocket.verify_client_post_handshake()", "intent": "Requests post-handshake authentication ( PHA ) from a TLS 1.3 client .", "question_id": 8987}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "uuid.UUID()", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11937}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "mock.mock_add_spec(spec)", "intent": "Add a `spec` to a mock .", "question_id": 11582}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "asyncio.DatagramTransport(BaseTransport)", "intent": "A transport for datagram ( UDP ) connections . With arguments `BaseTransport`.", "question_id": 394}
{"snippet": "TarInfo.size", "intent": "Size in bytes.", "question_id": 9982}
{"snippet": "inspect.CO_VARARGS", "intent": "The code object has a variable positional parameter (*args-like).", "question_id": 5042}
{"snippet": "tarfile.TarFile(format=DEFAULT_FORMAT)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . `format` controls the archive format .", "question_id": 9917}
{"snippet": "turtle.bgcolor(*args)", "intent": "Set or return background color of the TurtleScreen . With arguments `*args`.", "question_id": 11040}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "IndexError", "intent": "Raised when a sequence subscript is out of range.", "question_id": 3642}
{"snippet": "decimal.ROUND_HALF_EVEN", "intent": "Round to nearest with ties going to nearest even integer.", "question_id": 2581}
{"snippet": "crypt.METHOD_CRYPT", "intent": "The traditional method with a 2 character salt and 13 characters of hash.", "question_id": 1672}
{"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157}
{"snippet": "mailbox.get_bytes(key)", "intent": "Return a byte representation of the message corresponding to `key` , or raise a KeyError exception if no such message exists .", "question_id": 5740}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013}
{"snippet": "Cmd.ruler", "intent": "The character used to draw separator lines under the help-message headers.", "question_id": 1153}
{"snippet": "directory.remove_pyc()", "intent": "Remove .pyc files on uninstall .", "question_id": 6113}
{"snippet": "window.untouchwin()", "intent": "Mark all lines in the window as unchanged since the last call to refresh ( ) .", "question_id": 2128}
{"snippet": "contextlib.ContextDecorator", "intent": "A base class that enables a context manager to also be used as a decorator.", "question_id": 1625}
{"snippet": "base_request_handler.handle()", "intent": "This function must do all the work required to service a request .", "question_id": 8785}
{"snippet": "traceback.clear_frames(tb)", "intent": "Clears the local variables of all the stack frames in a traceback `tb` by calling the clear ( ) method of each frame object .", "question_id": 10791}
{"snippet": "cgihttp_request_handler.do_POST()", "intent": "This method serves the 'POST ' request type , only allowed for CGI scripts .", "question_id": 4668}
{"snippet": "message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If `replace` is False ( the default ) the header is moved to the end of the list of headers . With arguments `param`.", "question_id": 3004}
{"snippet": "bytes.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9262}
{"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938}
{"snippet": "shlex.shlex(punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8277}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "pdb.pm()", "intent": "Enter post-mortem debugging of the traceback found in sys.last_traceback .", "question_id": 7340}
{"snippet": "Node.toprettyxml()", "intent": "Return a pretty-printed version of the document .", "question_id": 12413}
{"snippet": "nntplib.decode_header(header_str)", "intent": "Decode a header value , un-escaping any escaped non-ASCII characters . `header_str` must be a str object .", "question_id": 6502}
{"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796}
{"snippet": "socket.recv_into(buffer, nbytes, flags)", "intent": "Receive up to `nbytes` bytes from the socket , storing the data into a `buffer` rather than creating a new bytestring . See the Unix manual page recv ( 2 ) for the meaning of the optional argument `flags` ; it defaults to zero .", "question_id": 8714}
{"snippet": "xml.etree.ElementTree.XMLPullParser()", "intent": "A pull parser suitable for non-blocking applications .", "question_id": 12556}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "os.path.splitext(path)", "intent": "Split the pathname `path` into a pair ( root , ext ) such that root + ext == path , and ext is empty or begins with a period and contains at most one period .", "question_id": 7171}
{"snippet": "IMAP4.authenticate(mechanism, authobject)", "intent": "Authenticate command \u2014 requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :", "question_id": 4692}
{"snippet": "socket.CMSG_LEN(length)", "intent": "Return the total `length` , without trailing padding , of an ancillary data item with associated data of the given length .", "question_id": 8665}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488}
{"snippet": "traceback_exception.format_exception_only()", "intent": "Format the exception part of the traceback .", "question_id": 10822}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "os.name", "intent": "The name of the operating system dependent module imported.", "question_id": 6656}
{"snippet": "xml.sax.saxutils.quoteattr(data)", "intent": "Similar to escape ( ) , but also prepares `data` to be used as an attribute value .", "question_id": 12656}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "maildir.close()", "intent": "Maildir instances do not keep any open files and the underlying mailboxes do not support locking , so this method does nothing .", "question_id": 5766}
{"snippet": "shutil.get_archive_formats()", "intent": "Return a list of supported formats for archiving .", "question_id": 8358}
{"snippet": "auto.errno", "intent": "A numeric error code from the C variable errno.", "question_id": 3654}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this turtle .", "question_id": 11019}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "doctest.OutputChecker", "intent": "A class used to check the whether the actual output from a doctest example matches the expected output.", "question_id": 2883}
{"snippet": "http.cookiejar.LWPCookieJar(filename)", "intent": "A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library \u2019 s Set-Cookie3 file format . With arguments `filename`.", "question_id": 4528}
{"snippet": "ZipFile.filename", "intent": "Name of the ZIP file.", "question_id": 12843}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}
{"snippet": "re.compile(pattern, flags=0)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below . The expression \u2019 s behaviour can be modified by specifying a `flags` value .", "question_id": 7923}
{"snippet": "os.RWF_HIPRI", "intent": "High priority read/write.", "question_id": 6787}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "multiprocessing.Queue()", "intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores .", "question_id": 6196}
{"snippet": "pickle.PickleError", "intent": "Common base class for the other pickling exceptions.", "question_id": 7387}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "Node.toxml(encoding=None)", "intent": "Return a string or byte string containing the XML represented by the DOM node . With an explicit `encoding` 1 argument , the result is a byte string in the specified encoding .", "question_id": 12412}
{"snippet": "FileCookieJar.filename", "intent": "Filename of default file in which to keep cookies.", "question_id": 4522}
{"snippet": "msvcrt.heapmin()", "intent": "Force the malloc ( ) heap to clean itself up and return unused blocks to the operating system .", "question_id": 6164}
{"snippet": "stat.S_ISFIFO(mode)", "intent": "Return non-zero if the `mode` is from a FIFO ( named pipe ) .", "question_id": 9065}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201}
{"snippet": "test_loader.discover(start_dir)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory .", "question_id": 11499}
{"snippet": "tkinter.tix.tixCommand", "intent": "The tix commands provide access to miscellaneous elements of Tix\u2019s internal state and the Tix application context.", "question_id": 10579}
{"snippet": "http_handler.emit(record)", "intent": "Sends the `record` to the Web server as a URL-encoded dictionary .", "question_id": 5552}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "question_id": 1299}
{"snippet": "hashlib.algorithms_available", "intent": "A set containing the names of the hash algorithms that are available in the running Python interpreter.", "question_id": 4300}
{"snippet": "codeop.CommandCompiler", "intent": "Instances of this class have __call__() methods identical in signature to compile_command(); the difference is that if the instance compiles program text containing a __future__ statement, the instance \u2018remembers\u2019 and compiles all subsequent program texts with the statement in force.", "question_id": 1309}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "email_policy.utf8", "intent": "If False, follow RFC 5322, supporting non-ASCII characters in headers by encoding them as \u201cencoded words\u201d.", "question_id": 3429}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "memory_bio.read()", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9056}
{"snippet": "context.remainder_near(x, y)", "intent": "Returns `x` - `y` * n , where n is the integer nearest the exact value of x / y ( if the result is 0 then its sign will be the sign of x ) .", "question_id": 2566}
{"snippet": "winreg.REG_FULL_RESOURCE_DESCRIPTOR", "intent": "A hardware setting.", "question_id": 12185}
{"snippet": "wsgiref.util.FileWrapper(filelike)", "intent": "A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object \u2019 s read ( ) method to obtain bytestrings to yield .", "question_id": 12217}
{"snippet": "ensurepip.bootstrap(upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3491}
{"snippet": "hashlib.algorithms_available", "intent": "A set containing the names of the hash algorithms that are available in the running Python interpreter.", "question_id": 4300}
{"snippet": "itertools.count()", "intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "question_id": 5246}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802}
{"snippet": "csv.writer(csvfile, **fmtparams, dialect='excel')", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1683}
{"snippet": "ArgumentParser.convert_arg_line_to_args(arg_line)", "intent": "Arguments that are read from a file ( see the fromfile_prefix_chars keyword argument to the ArgumentParser constructor ) are read one argument per line . This method takes a single argument `arg_line` which is a string read from the argument file .", "question_id": 109}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF", "intent": "A character reference referred to a character which is illegal in XML (for example, character 0, or \u2018&#0;\u2019).", "question_id": 7790}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992}
{"snippet": "threading.local", "intent": "A class that represents thread-local data.", "question_id": 10351}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX", "intent": "The document attempted to remove the namespace declaration associated with a prefix.", "question_id": 7811}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "widget.set(item)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` .", "question_id": 10658}
{"snippet": "tarfile.TarFile(encoding=ENCODING)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . The `encoding` and errors arguments define the character encoding to be used for reading or writing the archive and how conversion errors are going to be handled .", "question_id": 9921}
{"snippet": "errno.ENOSYS", "intent": "Function not implemented", "question_id": 3543}
{"snippet": "writer.send_hor_rule(*args, **kw)", "intent": "Display a horizontal rule on the output device . With arguments `*args`, `**kw`.", "question_id": 3849}
{"snippet": "Telnet.read_lazy()", "intent": "Process and return data already in the queues ( lazy ) .", "question_id": 10015}
{"snippet": "os.sched_getaffinity(pid)", "intent": "Return the set of CPUs the process with PID `pid` ( or the current process if zero ) is restricted to .", "question_id": 7114}
{"snippet": "webbrowser.open(url, autoraise=True)", "intent": "Display `url` using the default browser . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12104}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer, lock=True)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed . If `lock` is True ( the default ) then a new lock object is created to synchronize access to the value .", "question_id": 6268}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "test.support.import_fresh_module(name)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10242}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "zlib.compressobj()", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once .", "question_id": 12907}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common, shallow=True)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` . The `shallow` parameter has the same meaning and default value as for filecmp.cmp ( ) .", "question_id": 3758}
{"snippet": "inspect.isasyncgen(object)", "intent": "Return true if the `object` is an asynchronous generator iterator created by an asynchronous generator function .", "question_id": 4958}
{"snippet": "json.JSONEncoder(check_circular=True)", "intent": "Extensible JSON encoder for Python data structures . If `check_circular` is true ( the default ) , then lists , dicts , and custom encoded objects will be checked for circular references during encoding to prevent an infinite recursion ( which would cause an OverflowError ) .", "question_id": 5325}
{"snippet": "curses.resize_term(nlines, ncols)", "intent": "Backend function used by resizeterm ( ) , performing most of the work ; when resizing the windows , resize_term ( ) blank-fills the areas that are extended . With arguments `nlines`, `ncols`.", "question_id": 1975}
{"snippet": "base_handler.error_status", "intent": "The HTTP status used for error responses.", "question_id": 12263}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}
{"snippet": "bz2.BZ2File(filename)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly .", "question_id": 886}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "bytes.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9262}
{"snippet": "test.support.wait_threads_exit()", "intent": "Context manager to wait until all threads created in the with statement exit .", "question_id": 10196}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122}
{"snippet": "collections.abc.MappingView", "intent": "ABCs for mapping, items, keys, and values views.", "question_id": 1326}
{"snippet": "sysconfig.parse_config_h(fp)", "intent": "Parse a config.h-style file . `fp` is a file-like object pointing to the config.h-like file .", "question_id": 9874}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302}
{"snippet": "IndentationError", "intent": "Base class for syntax errors related to incorrect indentation.", "question_id": 3666}
{"snippet": "json.JSONEncoder(ensure_ascii=True)", "intent": "Extensible JSON encoder for Python data structures . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped .", "question_id": 5324}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "mh.close()", "intent": "MH instances do not keep any open files , so this method is equivalent to unlock ( ) .", "question_id": 5793}
{"snippet": "property(fdel=None)", "intent": "Return a property attribute . `fdel` is a function for deleting an attribute value .", "question_id": 4088}
{"snippet": "user_dict.data", "intent": "A real dictionary used to store the contents of the UserDict class.", "question_id": 1397}
{"snippet": "xml.parsers.expat.errors.codes", "intent": "A dictionary mapping numeric error codes to their string descriptions.", "question_id": 7787}
{"snippet": "decimal.Context(prec=None)", "intent": "Creates a new context . `prec` is an integer in the range [ 1 , MAX_PREC ] that sets the precision for arithmetic operations in the context .", "question_id": 2500}
{"snippet": "Path.iterdir()", "intent": "When the path points to a directory , yield path objects of the directory contents :", "question_id": 7281}
{"snippet": "stats.print_callers(*restrictions)", "intent": "This method for the Stats class prints a list of all functions that called each function in the profiled database . With arguments `*restrictions`.", "question_id": 7696}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "platform.system()", "intent": "Returns the system/OS name , e.g .", "question_id": 7481}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661}
{"snippet": "lzma.LZMACompressor(check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5680}
{"snippet": "warnings.formatwarning(message, category, filename, lineno)", "intent": "Format a warning the standard way . `line` is a line of source code to be included in the warning `message` ; if line is not supplied , formatwarning ( ) will try to read the line specified by `filename` and `lineno` . With arguments `category`.", "question_id": 12021}
{"snippet": "asyncio.gather(*aws)", "intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`.", "question_id": 599}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "email.errors.MultipartConversionError", "intent": "Raised when a payload is added to a Message object using add_payload(), but the payload is already a scalar and the message\u2019s Content-Type main type is not either multipart or missing.", "question_id": 3077}
{"snippet": "webbrowser.open(url)", "intent": "Display `url` using the default browser .", "question_id": 12102}
{"snippet": "ssl.SSLObject", "intent": "A reduced-scope variant of SSLSocket representing an SSL protocol instance that does not contain any network IO methods.", "question_id": 9052}
{"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}
{"snippet": "inspect_loader.source_to_code(data)", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e .", "question_id": 4829}
{"snippet": "struct.unpack(format, buffer)", "intent": "Unpack from the `buffer` buffer ( presumably packed by pack ( `format` , ... ) ) according to the format string format .", "question_id": 9553}
{"snippet": "Repr.maxlong", "intent": "Maximum number of characters in the representation for an integer.", "question_id": 8063}
{"snippet": "http_handler.mapLogRecord(record)", "intent": "Provides a dictionary , based on `record` , which is to be URL-encoded and sent to the web server .", "question_id": 5551}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196}
{"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}
{"snippet": "base_request_handler.setup()", "intent": "Called before the handle ( ) method to perform any initialization actions required .", "question_id": 8784}
{"snippet": "sys.last_type", "intent": "These three variables are not always defined; they are set when an exception is not handled and the interpreter prints an error message and a stack traceback.", "question_id": 9820}
{"snippet": "turtle.pendown()", "intent": "Pull the pen down \u2013 drawing when moving .", "question_id": 10948}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "locale.LC_NUMERIC", "intent": "Locale category for formatting numbers.", "question_id": 5409}
{"snippet": "locale.format(format, val)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`.", "question_id": 5388}
{"snippet": "decimal.max_mag(other)", "intent": "Similar to the max ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`.", "question_id": 2445}
{"snippet": "itertools.takewhile(predicate, iterable)", "intent": "Make an iterator that returns elements from the `iterable` as long as the `predicate` is true .", "question_id": 5265}
{"snippet": "turtle.delay()", "intent": "Set or return the drawing `delay` in milliseconds .", "question_id": 11056}
{"snippet": "fileinput.nextfile()", "intent": "Close the current file so that the next iteration will read the first line from the next file ( if any ) ; lines not read from the file will not count towards the cumulative line count .", "question_id": 3798}
{"snippet": "ssl.OP_CIPHER_SERVER_PREFERENCE", "intent": "Use the server\u2019s cipher ordering preference, rather than the client\u2019s.", "question_id": 8938}
{"snippet": "definition.__name__", "intent": "The name of the class, function, method, descriptor, or generator instance.", "question_id": 9502}
{"snippet": "ssl.OP_CIPHER_SERVER_PREFERENCE", "intent": "Use the server\u2019s cipher ordering preference, rather than the client\u2019s.", "question_id": 8938}
{"snippet": "text_wrapper.drop_whitespace", "intent": "(default: True) If true, whitespace at the beginning and ending of every line (after wrapping but before indenting) is dropped.", "question_id": 10331}
{"snippet": "condition.notify_all()", "intent": "Wake up all tasks waiting on this condition .", "question_id": 577}
{"snippet": "gzip_file.mtime", "intent": "When decompressing, the value of the last modification time field in the most recently read header may be read from this attribute, as an integer.", "question_id": 4293}
{"snippet": "os.terminal_size", "intent": "A subclass of tuple, holding (columns, lines) of the terminal window size.", "question_id": 6813}
{"snippet": "Option.const", "intent": "For actions that store a constant value, the constant value to store.", "question_id": 6631}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "writer.flush()", "intent": "Flush any buffered output or device control events .", "question_id": 3841}
{"snippet": "ZipInfo.extra", "intent": "Expansion field data.", "question_id": 12867}
{"snippet": "base_handler._flush()", "intent": "Force buffered data to be transmitted to the client .", "question_id": 12249}
{"snippet": "base_handler.sendfile()", "intent": "Override to implement platform-specific file transmission .", "question_id": 12267}
{"snippet": "_thread.start_new_thread(function, args)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "question_id": 12944}
{"snippet": "copy.deepcopy(x)", "intent": "Return a deep copy of `x` .", "question_id": 1663}
{"snippet": "subprocess.STARTUPINFO()", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation .", "question_id": 9625}
{"snippet": "turtle.register_shape(name)", "intent": "There are three different ways to call this function : With arguments `name`.", "question_id": 11098}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "datetime.hour", "intent": "In range(24).", "question_id": 2275}
{"snippet": "audioop.tomono(fragment, width, lfactor, rfactor)", "intent": "Convert a stereo `fragment` to a mono fragment . The left channel is multiplied by `lfactor` and the right channel by `rfactor` before adding the two channels to give a mono signal . With arguments `width`.", "question_id": 705}
{"snippet": "NNTP.ihave(message_id, data)", "intent": "Send an IHAVE command . `message_id` is the id of the message to send to the server ( enclosed in ' < ' and ' > ' ) . The `data` parameter and the return value are the same as for post ( ) .", "question_id": 6493}
{"snippet": "collections.abc.AsyncGenerator", "intent": "ABC for asynchronous generator classes that implement the protocol defined in PEP 525 and PEP 492.", "question_id": 1334}
{"snippet": "tkinter.tix.LabelEntry", "intent": "The LabelEntry widget packages an entry widget and a label into one mega widget.", "question_id": 10556}
{"snippet": "context.same_quantum(x, y)", "intent": "Returns True if the two operands have the same exponent . With arguments `x`, `y`.", "question_id": 2568}
{"snippet": "py_compile.compile(file, dfile=None)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . If `dfile` is specified , it is used as the name of the source file in error messages when instead of file .", "question_id": 7823}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX", "intent": "An undeclared prefix was found when namespace processing was enabled.", "question_id": 7810}
{"snippet": "os.getlogin()", "intent": "Return the name of the user logged in on the controlling terminal of the process .", "question_id": 6679}
{"snippet": "Pattern.match(string)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object .", "question_id": 7975}
{"snippet": "signal.getsignal(signalnum)", "intent": "Return the current signal handler for the signal `signalnum` .", "question_id": 8387}
{"snippet": "smtplib.SMTP(source_address=None)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `source_address` parameter allows binding to some specific source address in a machine with multiple network interfaces , and/or to some specific source TCP port .", "question_id": 8462}
{"snippet": "timedelta.max", "intent": "The most positive timedelta object, timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999).", "question_id": 2215}
{"snippet": "ur_lopener.version", "intent": "Variable that specifies the user agent of the opener object.", "question_id": 11904}
{"snippet": "ctypes.pointer(obj)", "intent": "This function creates a new pointer instance , pointing to `obj` .", "question_id": 1829}
{"snippet": "getopt.error", "intent": "Alias for GetoptError; for backward compatibility.", "question_id": 4203}
{"snippet": "statistics.variance(data)", "intent": "Return the sample variance of `data` , an iterable of at least two real-valued numbers .", "question_id": 9139}
{"snippet": "HMAC.digest_size", "intent": "The size of the resulting HMAC digest in bytes.", "question_id": 4338}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493}
{"snippet": "context.copy()", "intent": "Return a duplicate of the context .", "question_id": 2511}
{"snippet": "widget.yview(*args)", "intent": "Query or modify vertical position of the treeview . With arguments `*args`.", "question_id": 10671}
{"snippet": "header.append(s)", "intent": "Append the string `s` to the MIME header .", "question_id": 3126}
{"snippet": "__import__(name)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4135}
{"snippet": "breakpoint.bpformat()", "intent": "Return a string with all the information about the breakpoint , nicely formatted :", "question_id": 765}
{"snippet": "decimal.to_eng_string(context=None)", "intent": "Convert to a string , using engineering notation if an exponent is needed . With arguments `context`.", "question_id": 2479}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "window.cursyncup()", "intent": "Update the current cursor position of all the ancestors of the window to reflect the current cursor position of the window .", "question_id": 2038}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478}
{"snippet": "string.ascii_lowercase", "intent": "The lowercase letters 'abcdefghijklmnopqrstuvwxyz'.", "question_id": 9508}
{"snippet": "Panel.move(y, x)", "intent": "Move the panel to the screen coordinates ( `y` , `x` ) .", "question_id": 2150}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "mime_version_header.minor", "intent": "The minor version number as an integer", "question_id": 3166}
{"snippet": "widget.yview(*args)", "intent": "Query or modify vertical position of the treeview . With arguments `*args`.", "question_id": 10671}
{"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}
{"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "email.policy.HTTP", "intent": "Suitable for serializing headers with for use in HTTP traffic.", "question_id": 3442}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}
{"snippet": "HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)", "intent": "Redirect to the Location : or URI : URL . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11851}
{"snippet": "errno.ELIBBAD", "intent": "Accessing a corrupted shared library", "question_id": 3585}
{"snippet": "frame.lineno", "intent": "Line number (int).", "question_id": 10869}
{"snippet": "SSLContext.get_ca_certs(binary_form=False)", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "question_id": 9012}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617}
{"snippet": "aifc.aifc()", "intent": "Create an AIFF-C file .", "question_id": 26}
{"snippet": "Pattern.search(string)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object .", "question_id": 7972}
{"snippet": "os.SCHED_SPORADIC", "intent": "Scheduling policy for sporadic server programs.", "question_id": 7099}
{"snippet": "doctest.SKIP", "intent": "When specified, do not run the example at all.", "question_id": 2757}
{"snippet": "unittest.mock.Mock(**kwargs)", "intent": "Create a new Mock object . With arguments `**kwargs`.", "question_id": 11560}
{"snippet": "dis.haslocal", "intent": "Sequence of bytecodes that access a local variable.", "question_id": 2750}
{"snippet": "Telnet.mt_interact()", "intent": "Multithreaded version of interact ( ) .", "question_id": 10029}
{"snippet": "multiprocessing.connection.wait(object_list)", "intent": "Wait till an object in `object_list` is ready .", "question_id": 6380}
{"snippet": "queue_listener.format(record)", "intent": "Do formatting for a `record` - if a formatter is set , use it .", "question_id": 5608}
{"snippet": "types.prepare_class(name, bases=(), kwds=None)", "intent": "Calculates the appropriate metaclass and creates the class namespace . The arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) and the keyword arguments ( such as metaclass ) . The return value is a 3-tuple : metaclass , namespace , `kwds` With arguments `bases`.", "question_id": 11181}
{"snippet": "license", "intent": "Object that when printed, prints the message \u201cType license() to see the full license text\u201d, and when called, displays the full license text in a pager-like fashion (one screen at a time).", "question_id": 1614}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "nis.maps()", "intent": "Return a list of all valid maps .", "question_id": 6395}
{"snippet": "sys.int_info", "intent": "A named tuple that holds information about Python\u2019s internal representation of integers.", "question_id": 9816}
{"snippet": "uuid.uuid1(node=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `node` is not given , getnode ( ) is used to obtain the hardware address .", "question_id": 11958}
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835}
{"snippet": "io.StringIO(initial_value='')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` .", "question_id": 5165}
{"snippet": "test.support.wait_threads_exit(timeout=60.0)", "intent": "Context manager to wait until all threads created in the with statement exit . With arguments `timeout`.", "question_id": 10197}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348}
{"snippet": "NNTP.over(message_spec)", "intent": "Send an OVER command , or an XOVER command on legacy servers . `message_spec` can be either a string representing a message id , or a ( first , last ) tuple of numbers indicating a range of articles in the current group , or a ( first , None ) tuple indicating a range of articles starting from first to the last article in the current group , or None to select the current article in the current group .", "question_id": 6472}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH", "intent": "An end tag did not match the innermost open start tag.", "question_id": 7802}
{"snippet": "os.DirEntry", "intent": "Object yielded by scandir() to expose the file path and other file attributes of a directory entry.", "question_id": 6906}
{"snippet": "loop.create_task(coro)", "intent": "Schedule the execution of a Coroutines . With arguments `coro`.", "question_id": 199}
{"snippet": "system_random.pattern", "intent": "The regular expression pattern.", "question_id": 7966}
{"snippet": "deque.clear()", "intent": "Remove all elements from the deque leaving it with length 0 .", "question_id": 1355}
{"snippet": "profile.Profile(timer=None)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument .", "question_id": 7670}
{"snippet": "email.policy.compat32", "intent": "An instance of Compat32, providing  backward compatibility with the behavior of the email package in Python 3.2.", "question_id": 3451}
{"snippet": "i_pv4_network.network_address", "intent": "The network address for the network.", "question_id": 5196}
{"snippet": "time.strftime(format)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument .", "question_id": 10454}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "context_var.name", "intent": "The name of the variable.", "question_id": 1639}
{"snippet": "widget.state()", "intent": "Modify or inquire widget state .", "question_id": 10595}
{"snippet": "oss_audio_device.setfmt(format)", "intent": "Try to set the current audio `format` to format\u2014see getfmts ( ) for a list .", "question_id": 7185}
{"snippet": "turtle.tiltangle(angle=None)", "intent": "Set or return the current tilt-angle . If `angle` is given , rotate the turtleshape to point in the direction specified by angle , regardless of its current tilt-angle .", "question_id": 11007}
{"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103}
{"snippet": "mock.call_count", "intent": "An integer telling you how many times the mock object has been called:", "question_id": 11589}
{"snippet": "winreg.SetValue(key, sub_key, type, value)", "intent": "Associates a `value` with a specified `key` . `sub_key` is a string that names the subkey with which the value is associated . `type` is an integer that specifies the type of the data .", "question_id": 12150}
{"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "json.loads(s, **kw)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5300}
{"snippet": "bz2.compress(data)", "intent": "Compress `data` , a bytes-like object .", "question_id": 906}
{"snippet": "IMAP4.status(mailbox, names)", "intent": "Request named status conditions for `mailbox` . With arguments `names`.", "question_id": 4744}
{"snippet": "ssl.OP_NO_COMPRESSION", "intent": "Disable compression on the SSL channel.", "question_id": 8942}
{"snippet": "contextlib.redirect_stderr(new_target)", "intent": "Similar to redirect_stdout ( ) but redirecting sys.stderr to another file or file-like object . With arguments `new_target`.", "question_id": 1624}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "timeit.Timer(stmt='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals .", "question_id": 10498}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "formatter.parse(format_string)", "intent": "Loop over the `format_string` and return an iterable of tuples ( literal_text , field_name , format_spec , conversion ) .", "question_id": 9519}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}
{"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, cte=None, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `cte` is set , encode the payload using the specified content transfer encoding , and set the Content-Transfer-Encoding header to that value . If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'EmailMessage'>`.", "question_id": 3066}
{"snippet": "socket.AF_LINK", "intent": "Availability: BSD, OSX.", "question_id": 8606}
{"snippet": "str.join(iterable)", "intent": "Return a string which is the concatenation of the strings in `iterable` .", "question_id": 9214}
{"snippet": "smtp_server.channel_class", "intent": "Override this in subclasses to use a custom SMTPChannel for managing SMTP clients.", "question_id": 8423}
{"snippet": "loop.get_exception_handler()", "intent": "Return the current exception handler , or None if no custom exception handler was set .", "question_id": 308}
{"snippet": "Node.childNodes", "intent": "A list of nodes contained within this node.", "question_id": 12319}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "stat.S_ISUID", "intent": "Set UID bit.", "question_id": 9094}
{"snippet": "inspect.Signature()", "intent": "A Signature object represents the call signature of a function and its return annotation .", "question_id": 4979}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499}
{"snippet": "shlex.commenters", "intent": "The string of characters that are recognized as comment beginners.", "question_id": 8294}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026}
{"snippet": "mock.call_count", "intent": "An integer telling you how many times the mock object has been called:", "question_id": 11589}
{"snippet": "SSLContext.set_ciphers(ciphers)", "intent": "Set the available `ciphers` for sockets created with this context .", "question_id": 9015}
{"snippet": "turtle.hideturtle()", "intent": "Make the turtle invisible .", "question_id": 10977}
{"snippet": "winsound.SND_PURGE", "intent": "Stop playing all instances of the specified sound.", "question_id": 12200}
{"snippet": "os.stat_result", "intent": "Object whose attributes correspond roughly to the members of the stat structure.", "question_id": 6921}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "urllib.parse.quote_from_bytes(bytes)", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding .", "question_id": 11721}
{"snippet": "generator.write(s)", "intent": "Write `s` to the write method of the outfp passed to the Generator \u2019 s constructor .", "question_id": 3105}
{"snippet": "PurePath.drive", "intent": "A string representing the drive letter or name, if any:", "question_id": 7244}
{"snippet": "http_handler.mapLogRecord(record)", "intent": "Provides a dictionary , based on `record` , which is to be URL-encoded and sent to the web server .", "question_id": 5551}
{"snippet": "errno.EISCONN", "intent": "Transport endpoint is already connected", "question_id": 3611}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "sequence_matcher.real_quick_ratio()", "intent": "Return an upper bound on ratio ( ) very quickly .", "question_id": 2689}
{"snippet": "breakpoint(*args, **kws)", "intent": "This function drops you into the debugger at the call site . With arguments `*args`, `**kws`.", "question_id": 3980}
{"snippet": "os.forkpty()", "intent": "Fork a child process , using a new pseudo-terminal as the child \u2019 s controlling terminal .", "question_id": 7036}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706}
{"snippet": "xmlrpc.client.dumps(params, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12702}
{"snippet": "re.X", "intent": "This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments.", "question_id": 7935}
{"snippet": "queue.put_nowait(obj)", "intent": "Equivalent to put ( `obj` , False ) .", "question_id": 6203}
{"snippet": "message.is_multipart()", "intent": "Return True if the message \u2019 s payload is a list of sub-Message objects , otherwise return False .", "question_id": 2952}
{"snippet": "ssl.OP_NO_TICKET", "intent": "Prevent client side from requesting a session ticket.", "question_id": 8944}
{"snippet": "dialog.text(name, x, y, width, height, attributes, text)", "intent": "Add and return a Text control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `text`.", "question_id": 6137}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "dircmp.left_list", "intent": "Files and subdirectories in a, filtered by hide and ignore.", "question_id": 3769}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "turtle.tracer()", "intent": "Turn turtle animation on/off and set `delay` for update drawings .", "question_id": 11058}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "async_chat.push_with_producer(producer)", "intent": "Takes a `producer` object and adds it to the producer queue associated with the channel .", "question_id": 176}
{"snippet": "FTP.login()", "intent": "Log in as the given `user` .", "question_id": 3915}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "env_builder.setup_python(context)", "intent": "Creates a copy or symlink to the Python executable in the environment . With arguments `context`.", "question_id": 11985}
{"snippet": "SubprocessTransport.close()", "intent": "Kill the subprocess by calling the kill ( ) method .", "question_id": 425}
{"snippet": "sys.exit()", "intent": "Exit from Python .", "question_id": 9789}
{"snippet": "Wave_write.close()", "intent": "Make sure nframes is correct , and close the file if it was opened by wave .", "question_id": 12064}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "SMTP.helo()", "intent": "Identify yourself to the SMTP server using HELO .", "question_id": 8515}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}
{"snippet": "dbm.whichdb(filename)", "intent": "This function attempts to guess which of the several simple database modules available \u2014 dbm.gnu , dbm.ndbm or dbm.dumb \u2014 should be used to open a given file . With arguments `filename`.", "question_id": 2365}
{"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "curses.flushinp()", "intent": "Flush all input buffers .", "question_id": 1936}
{"snippet": "statistics.StatisticsError", "intent": "Subclass of ValueError for statistics-related exceptions.", "question_id": 9141}
{"snippet": "webbrowser.open_new_tab(url)", "intent": "Open `url` in a new page ( \u201c tab \u201d ) of the default browser , if possible , otherwise equivalent to open_new ( ) .", "question_id": 12107}
{"snippet": "UUID.bytes_le", "intent": "The UUID as a 16-byte string (with time_low, time_mid, and time_hi_version in little-endian byte order).", "question_id": 11948}
{"snippet": "IMAP4.proxyauth(user)", "intent": "Assume authentication as `user` .", "question_id": 4721}
{"snippet": "connection.backup(target, pages=0, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8834}
{"snippet": "int.to_bytes(length, byteorder)", "intent": "Return an array of bytes representing an integer . The integer is represented using `length` bytes . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9143}
{"snippet": "ZipInfo.from_file(filename)", "intent": "Construct a ZipInfo instance for a file on the filesystem , in preparation for adding it to a zip file . `filename` should be the path to a file or directory on the filesystem .", "question_id": 12860}
{"snippet": "html_calendar.formatyear(theyear, width=3)", "intent": "Return a year \u2019 s calendar as an HTML table . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 961}
{"snippet": "SMTP.auth(mechanism, authobject)", "intent": "Issue an SMTP AUTH command for the specified authentication `mechanism` , and handle the challenge response via `authobject` .", "question_id": 8524}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221}
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244}
{"snippet": "ssl.SSLContext(protocol=PROTOCOL_TLS)", "intent": "Create a new SSL context . You may pass `protocol` which must be one of the PROTOCOL_* constants defined in this module .", "question_id": 8995}
{"snippet": "BaseCookie.value_encode(val)", "intent": "Return a tuple ( real_value , coded_value ) . `val` can be any type , but coded_value will always be converted to a string .", "question_id": 4583}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "queue.cancel_join_thread()", "intent": "Prevent join_thread ( ) from blocking .", "question_id": 6210}
{"snippet": "template.substitute(mapping, **kwds)", "intent": "Performs the template substitution , returning a new string . `mapping` is any dictionary-like object with keys that match the placeholders in the template . With arguments `**kwds`.", "question_id": 9526}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "sqlite3.complete_statement(sql)", "intent": "Returns True if the string `sql` contains one or more complete SQL statements terminated by semicolons .", "question_id": 8801}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948}
{"snippet": "cgihttp_request_handler.do_POST()", "intent": "This method serves the 'POST ' request type , only allowed for CGI scripts .", "question_id": 4668}
{"snippet": "contextlib.AsyncExitStack", "intent": "An asynchronous context manager, similar to ExitStack, that supports combining both synchronous and asynchronous context managers, as well as having coroutines for cleanup logic.", "question_id": 1632}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309}
{"snippet": "ftplib.error_perm", "intent": "Exception raised when an error code signifying a permanent error (response codes in the range 500\u2013599) is received.", "question_id": 3900}
{"snippet": "mime_types.read(filename, strict=True)", "intent": "Load MIME information from a file named `filename` . If `strict` is True , information will be added to list of standard types , else to the list of non-standard types .", "question_id": 5971}
{"snippet": "base_http_request_handler.headers", "intent": "Holds an instance of the class specified by the MessageClass class variable.", "question_id": 4624}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF", "intent": "An entity reference contained another reference to the same entity; possibly via a different name, and possibly indirectly.", "question_id": 7800}
{"snippet": "content_manager.get_content(msg, *args, **kw)", "intent": "Look up a handler function based on the mimetype of `msg` ( see next paragraph ) , call it , passing through all arguments , and return the result of the call . With arguments `*args`, `**kw`.", "question_id": 3032}
{"snippet": "winsound.SND_ASYNC", "intent": "Return immediately, allowing sounds to play asynchronously.", "question_id": 12201}
{"snippet": "io.RawIOBase", "intent": "Base class for raw binary I/O.", "question_id": 5083}
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824}
{"snippet": "errno.ENOPKG", "intent": "Package not installed", "question_id": 3570}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `stdin`.", "question_id": 524}
{"snippet": "Unpacker.unpack_float()", "intent": "Unpacks a single-precision floating point number .", "question_id": 12290}
{"snippet": "multiprocessing.Pipe()", "intent": "Returns a pair ( conn1 , conn2 ) of Connection objects representing the ends of a pipe .", "question_id": 6194}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "random.Random()", "intent": "Class that implements the default pseudo-random number generator used by the random module .", "question_id": 7919}
{"snippet": "context.scaleb(x, y)", "intent": "Returns the first operand after adding the second value its exp . With arguments `x`, `y`.", "question_id": 2569}
{"snippet": "bdb.set_next(frame)", "intent": "Stop on the next line in or below the given `frame` .", "question_id": 786}
{"snippet": "stringprep.in_table_c11_c12(code)", "intent": "Determine whether `code` is in tableC.1 ( Space characters , union of C.1.1 and C.1.2 ) .", "question_id": 9537}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "formatter.end_paragraph(blanklines)", "intent": "Close any open paragraphs and insert at least `blanklines` before the next paragraph .", "question_id": 3819}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730}
{"snippet": "nntplib.NNTPDataError", "intent": "Exception raised when there is some error in the response data.", "question_id": 6445}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667}
{"snippet": "html_calendar.formatyear(theyear)", "intent": "Return a year \u2019 s calendar as an HTML table . With arguments `theyear`.", "question_id": 960}
{"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}
{"snippet": "counter.update()", "intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) .", "question_id": 1349}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762}
{"snippet": "itertools.product(*iterables)", "intent": "Cartesian product of input iterables . With arguments `*iterables`.", "question_id": 5260}
{"snippet": "turtle.pendown()", "intent": "Pull the pen down \u2013 drawing when moving .", "question_id": 10948}
{"snippet": "NNTP.post(data)", "intent": "Post an article using the POST command . The `data` argument is either a file object opened for binary reading , or any iterable of bytes objects ( representing raw lines of the article to be posted ) .", "question_id": 6492}
{"snippet": "formatter.add_flowing_data(data)", "intent": "Provide `data` which should be formatted with collapsed whitespace .", "question_id": 3822}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "urllib.request.Request(url, data=None, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11777}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757}
{"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}
{"snippet": "mailbox.mbox(path, factory=None)", "intent": "A subclass of Mailbox for mailboxes in mbox format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . With arguments `path`.", "question_id": 5769}
{"snippet": "sys.warnoptions", "intent": "This is an implementation detail of the warnings framework; do not modify this value.", "question_id": 9855}
{"snippet": "turtle.circle(radius, steps=None)", "intent": "Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10925}
{"snippet": "xmlrpc.client.dumps(params, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12702}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "auto.start", "intent": "The first index of invalid data in object.", "question_id": 3677}
{"snippet": "__import__(name)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4135}
{"snippet": "tempfile.mkstemp()", "intent": "Creates a temporary file in the most secure manner possible .", "question_id": 10071}
{"snippet": "signal.NSIG", "intent": "One more than the number of the highest signal number.", "question_id": 8378}
{"snippet": "Request.add_unredirected_header(key, header)", "intent": "Add a `header` that will not be added to a redirected request . With arguments `key`.", "question_id": 11826}
{"snippet": "datetime.datetime(year, month, day, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `second`.", "question_id": 2250}
{"snippet": "OptionParser.set_defaults()", "intent": "Set default values for several option destinations at once .", "question_id": 6647}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659}
{"snippet": "fcntl.flock(fd, operation)", "intent": "Perform the lock `operation` operation on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "question_id": 3746}
{"snippet": "errno.EADDRNOTAVAIL", "intent": "Cannot assign requested address", "question_id": 3604}
{"snippet": "formatter.check_unused_args(used_args, args, kwargs)", "intent": "Implement checking for unused arguments if desired . The arguments to this function is the set of all argument keys that were actually referred to in the format string ( integers for positional arguments , and strings for named arguments ) , and a reference to the `args` and `kwargs` that was passed to vformat . With arguments `used_args`.", "question_id": 9522}
{"snippet": "urllib.parse.SplitResult(scheme, netloc, path, query, fragment)", "intent": "Concrete class for urlsplit ( ) results containing str data . With arguments `scheme`, `netloc`, `path`, `query`, `fragment`.", "question_id": 11701}
{"snippet": "uu.Error", "intent": "Subclass of Exception, this can be raised by uu.decode() under various situations, such as described above, but also including a badly formatted header, or truncated input file.", "question_id": 11933}
{"snippet": "NNTP.newnews(group, date)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "question_id": 6463}
{"snippet": "xml.sax.saxutils.XMLGenerator()", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document .", "question_id": 12658}
{"snippet": "resource.RLIMIT_CORE", "intent": "The maximum size (in bytes) of a core file that the current process can create.", "question_id": 8075}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "inspect.ismethod(object)", "intent": "Return true if the `object` is a bound method written in Python .", "question_id": 4950}
{"snippet": "math.pi", "intent": "The mathematical constant \u03c0 = 3.141592\u2026, to available precision.", "question_id": 5934}
{"snippet": "queue_listener.createLock()", "intent": "Initializes a thread lock which can be used to serialize access to underlying I/O functionality which may not be threadsafe .", "question_id": 5596}
{"snippet": "curses.endwin()", "intent": "De-initialize the library , and return terminal to normal status .", "question_id": 1932}
{"snippet": "ipaddress.get_mixed_type_key(obj)", "intent": "Return a key suitable for sorting between networks and addresses . `obj` is either a network or address object .", "question_id": 5236}
{"snippet": "inspect.getmembers(object)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name .", "question_id": 4946}
{"snippet": "task.cancel()", "intent": "Request the Task to be cancelled .", "question_id": 626}
{"snippet": "curses.color_pair(color_number)", "intent": "Return the attribute value for displaying text in the specified color . With arguments `color_number`.", "question_id": 1925}
{"snippet": "typing.Callable", "intent": "Callable type; Callable[[int], str] is a function of (int) -> str.", "question_id": 11336}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "context.next_minus(x)", "intent": "Returns the largest representable number smaller than `x` .", "question_id": 2555}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057}
{"snippet": "queue.qsize()", "intent": "Return the approximate size of the queue .", "question_id": 6197}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "base_http_request_handler.log_request()", "intent": "Logs an accepted ( successful ) request .", "question_id": 4648}
{"snippet": "errno.EBADFD", "intent": "File descriptor in bad state", "question_id": 3582}
{"snippet": "inspect.isclass(object)", "intent": "Return true if the `object` is a class , whether built-in or created in Python code .", "question_id": 4949}
{"snippet": "datetime.strptime(date_string, format)", "intent": "Return a datetime corresponding to `date_string` , parsed according to `format` .", "question_id": 2268}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}
{"snippet": "winreg.ConnectRegistry(computer_name, key)", "intent": "Establishes a connection to a predefined registry handle on another computer , and returns a handle object . `computer_name` is the name of the remote computer , of the form r '' \\\\computername '' . `key` is the predefined handle to connect to .", "question_id": 12121}
{"snippet": "breakpoint.bpformat()", "intent": "Return a string with all the information about the breakpoint , nicely formatted :", "question_id": 765}
{"snippet": "xmlparser.StartElementHandler(name, attributes)", "intent": "Called for the start of every element . `name` is a string containing the element name , and `attributes` is the element attributes .", "question_id": 7760}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938}
{"snippet": "SubprocessTransport.kill()", "intent": "Kill the subprocess .", "question_id": 422}
{"snippet": "str.rstrip()", "intent": "Return a copy of the string with trailing characters removed .", "question_id": 9240}
{"snippet": "operator.iadd(a, b)", "intent": "`a` = iadd ( a , `b` ) is equivalent to a += b .", "question_id": 6588}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "symbol_table.lookup(name)", "intent": "Lookup `name` in the table and return a Symbol instance .", "question_id": 9743}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "AU_read.getframerate()", "intent": "Returns sampling frequency .", "question_id": 9710}
{"snippet": "msvcrt.setmode(fd, flags)", "intent": "Set the line-end translation mode for the file descriptor `fd` . To set it to text mode , `flags` should be os.O_TEXT ; for binary , it should be os.O_BINARY .", "question_id": 6152}
{"snippet": "handle.cancel()", "intent": "Cancel the callback .", "question_id": 330}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "sys.settrace(tracefunc)", "intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "question_id": 9839}
{"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}
{"snippet": "winreg.REG_DWORD", "intent": "32-bit number.", "question_id": 12175}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}
{"snippet": "doctest.COMPARISON_FLAGS", "intent": "A bitmask or\u2019ing together all the comparison flags above.", "question_id": 2758}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204}
{"snippet": "winreg.ConnectRegistry(computer_name, key)", "intent": "Establishes a connection to a predefined registry handle on another computer , and returns a handle object . `computer_name` is the name of the remote computer , of the form r '' \\\\computername '' . `key` is the predefined handle to connect to .", "question_id": 12121}
{"snippet": "re.escape(pattern)", "intent": "Escape special characters in `pattern` .", "question_id": 7959}
{"snippet": "loop.getnameinfo(sockaddr)", "intent": "Asynchronous version of socket.getnameinfo ( ) . With arguments `sockaddr`.", "question_id": 299}
{"snippet": "xmlparser.DefaultHandlerExpand(data)", "intent": "This is the same as the DefaultHandler ( ) , but doesn \u2019 t inhibit expansion of internal entities . With arguments `data`.", "question_id": 7773}
{"snippet": "subprocess.Popen(args, cwd=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `cwd` is not None , the function changes the working directory to cwd before executing the child .", "question_id": 9608}
{"snippet": "stat.UF_HIDDEN", "intent": "The file should not be displayed in a GUI (Mac OS X 10.5+).", "question_id": 9119}
{"snippet": "queue_listener.emit(record)", "intent": "Do whatever it takes to actually log the specified logging `record` .", "question_id": 5609}
{"snippet": "tkinter.tix.LabelFrame", "intent": "The LabelFrame widget packages a frame widget and a label into one mega widget.", "question_id": 10557}
{"snippet": "threading.Barrier(parties)", "intent": "Create a barrier object for `parties` number of threads .", "question_id": 10417}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "xml.parsers.expat.XMLParserType", "intent": "The type of the return values from the ParserCreate() function.", "question_id": 7726}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "lazy_loader.factory(loader)", "intent": "A static method which returns a callable that creates a lazy `loader` .", "question_id": 4944}
{"snippet": "path_entry_finder.find_loader(fullname)", "intent": "A legacy method for finding a loader for the specified module . With arguments `fullname`.", "question_id": 4810}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "socket.inet_aton(ip_string)", "intent": "Convert an IPv4 address from dotted-quad string format ( for example , \u2018 123.45.67.89 \u2019 ) to 32-bit packed binary format , as a bytes object four characters in length . With arguments `ip_string`.", "question_id": 8661}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713}
{"snippet": "test.support.EnvironmentVarGuard", "intent": "Class used to temporarily set or unset environment variables.", "question_id": 10286}
{"snippet": "Node.childNodes", "intent": "A list of nodes contained within this node.", "question_id": 12319}
{"snippet": "Node.firstChild", "intent": "The first child of the node, if there are any, or None.", "question_id": 12320}
{"snippet": "gettext.install(domain)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) .", "question_id": 4239}
{"snippet": "doctest.Example(source, want, options=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `options`.", "question_id": 2828}
{"snippet": "xmlparser.StartElementHandler(name, attributes)", "intent": "Called for the start of every element . `name` is a string containing the element name , and `attributes` is the element attributes .", "question_id": 7760}
{"snippet": "set < other", "intent": "Test whether the set is a proper subset of other, that is, set <= other and set != other.", "question_id": 9441}
{"snippet": "typing.Callable", "intent": "Callable type; Callable[[int], str] is a function of (int) -> str.", "question_id": 11336}
{"snippet": "collections.OrderedDict()", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order .", "question_id": 1390}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "@test.support.anticipate_failure(condition)", "intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "question_id": 10208}
{"snippet": "hashlib.algorithms_available", "intent": "A set containing the names of the hash algorithms that are available in the running Python interpreter.", "question_id": 4300}
{"snippet": "ssl.SSLSyscallError", "intent": "A subclass of SSLError raised when a system error was encountered while trying to fulfill an operation on a SSL socket.", "question_id": 8879}
{"snippet": "bytearray.fromhex(string)", "intent": "This bytearray class method returns bytearray object , decoding the given `string` object .", "question_id": 9267}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "gettext.gettext(message)", "intent": "Return the localized translation of `message` , based on the current global domain , language , and locale directory .", "question_id": 4216}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}
{"snippet": "glob.glob(pathname)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification .", "question_id": 4264}
{"snippet": "process.terminate()", "intent": "Terminate the process .", "question_id": 6186}
{"snippet": "null_translations.install(names=None)", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "question_id": 4259}
{"snippet": "charset.body_encoding", "intent": "Same as header_encoding, but describes the encoding for the mail message\u2019s body, which indeed may be different than the header encoding.", "question_id": 2914}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922}
{"snippet": "decimal.FloatOperation", "intent": "Enable stricter semantics for mixing floats and Decimals.", "question_id": 2594}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this turtle .", "question_id": 11019}
{"snippet": "mock.configure_mock(**kwargs)", "intent": "Set attributes on the mock through keyword arguments . With arguments `**kwargs`.", "question_id": 11585}
{"snippet": "auto.end", "intent": "The index after the last invalid data in object.", "question_id": 3678}
{"snippet": "os.nice(increment)", "intent": "Add `increment` to the process \u2019 s \u201c niceness \u201d .", "question_id": 7039}
{"snippet": "tempfile.tempdir", "intent": "When set to a value other than None, this variable defines the default value for the dir argument to the functions defined in this module.", "question_id": 10093}
{"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957}
{"snippet": "tabnanny.filename_only", "intent": "Flag indicating whether to print only the filenames of files containing whitespace related problems.", "question_id": 9887}
{"snippet": "context.radix()", "intent": "Just returns 10 , as this is Decimal , : )", "question_id": 2564}
{"snippet": "ScrolledText.frame", "intent": "The frame which surrounds the text and scroll bar widgets.", "question_id": 10542}
{"snippet": "widget.selection_remove(*items)", "intent": "Remove items from the selection . With arguments `*items`.", "question_id": 10656}
{"snippet": "winreg.HKEY_USERS", "intent": "Registry entries subordinate to this key define the default user configuration for new users on the local computer and the user configuration for the current user.", "question_id": 12158}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "xml.dom.XMLNS_NAMESPACE", "intent": "The namespace URI for namespace declarations, as defined by Document Object Model (DOM) Level 2 Core Specification (section 1.1.8).", "question_id": 12309}
{"snippet": "curses.color_content(color_number)", "intent": "Return the intensity of the red , green , and blue ( RGB ) components in the color `color_number` , which must be between 0 and COLORS .", "question_id": 1924}
{"snippet": "context.compare_total(x, y)", "intent": "Compares two operands using their abstract representation . With arguments `x`, `y`.", "question_id": 2522}
{"snippet": "test_suite.__iter__()", "intent": "Tests grouped by a TestSuite are always accessed by iteration .", "question_id": 11488}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "test.support.SaveSignals", "intent": "Class to save and restore signal handlers registered by the Python signal handler.", "question_id": 10292}
{"snippet": "datetime.date()", "intent": "Return date object with same year , month and day .", "question_id": 2281}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "concurrent.futures.ProcessPoolExecutor(mp_context=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `mp_context` can be a multiprocessing context or None .", "question_id": 1459}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513}
{"snippet": "oss_audio_device.post()", "intent": "Tell the driver that there is likely to be a pause in the output , making it possible for the device to handle the pause more intelligently .", "question_id": 7190}
{"snippet": "set - other - ...", "intent": "Return a new set with elements in the set that are not in the others.", "question_id": 9450}
{"snippet": "smtplib.SMTPAuthenticationError", "intent": "SMTP authentication went wrong.", "question_id": 8507}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "cursor.arraysize", "intent": "Read/write attribute that controls the number of rows returned by fetchmany().", "question_id": 8851}
{"snippet": "errno.EFBIG", "intent": "File too large", "question_id": 3532}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "NNTP.login()", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6451}
{"snippet": "element_tree.write(file, xml_declaration=None)", "intent": "Writes the element tree to a `file` , as XML . `xml_declaration` controls if an XML declaration should be added to the file .", "question_id": 12529}
{"snippet": "robot_file_parser.unknown", "intent": "The platform does not provide information on whether the UUID was generated safely or not.", "question_id": 11936}
{"snippet": "xml_pull_parser.read_events()", "intent": "Return an iterator over the events which have been encountered in the data fed to the parser .", "question_id": 12560}
{"snippet": "mmap.move(dest, src, count)", "intent": "Copy the `count` bytes starting at offset `src` to the destination index `dest` .", "question_id": 6008}
{"snippet": "str.center(width)", "intent": "Return centered in a string of length `width` .", "question_id": 9181}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "Popen.pid", "intent": "The process ID of the child process.", "question_id": 9623}
{"snippet": "socket.SocketType", "intent": "This is a Python type object that represents the socket object type.", "question_id": 8633}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922}
{"snippet": "string.ascii_uppercase", "intent": "The uppercase letters 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "question_id": 9509}
{"snippet": "Cookie.port_specified", "intent": "True if a port or set of ports was explicitly specified by the server (in the Set-Cookie / Set-Cookie2 header).", "question_id": 4568}
{"snippet": "heapq.merge(*iterables, key=None)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element .", "question_id": 4322}
{"snippet": "readline.write_history_file()", "intent": "Save the history list to a readline history file , overwriting any existing file .", "question_id": 8024}
{"snippet": "test.support.gc_collect()", "intent": "Force as many objects as possible to be collected .", "question_id": 10192}
{"snippet": "decimal.Decimal(context=None)", "intent": "Construct a new Decimal object based from `value` . The `context` precision does not affect how many digits are stored .", "question_id": 2393}
{"snippet": "winreg.HKEY_PERFORMANCE_DATA", "intent": "Registry entries subordinate to this key allow you to access performance data.", "question_id": 12159}
{"snippet": "statistics.stdev(data)", "intent": "Return the sample standard deviation ( the square root of the sample variance ) . With arguments `data`.", "question_id": 9137}
{"snippet": "@abc.abstractstaticmethod", "intent": "A subclass of the built-in staticmethod(), indicating an abstract staticmethod.", "question_id": 6}
{"snippet": "test.support.is_jython", "intent": "True if the running interpreter is Jython.", "question_id": 10111}
{"snippet": "errno.EALREADY", "intent": "Operation already in progress", "question_id": 3619}
{"snippet": "oss_mixer_device.fileno()", "intent": "Returns the file handle number of the open mixer device file .", "question_id": 7202}
{"snippet": "fancy_ur_lopener.prompt_user_passwd(host, realm)", "intent": "Return information needed to authenticate the user at the given `host` in the specified security `realm` .", "question_id": 11906}
{"snippet": "readline.set_completion_display_matches_hook(function)", "intent": "Set or remove the completion display `function` .", "question_id": 8048}
{"snippet": "FTP.mlsd(path=\"\", facts=)", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed . `facts` is a list of strings representing the type of information desired ( e.g .", "question_id": 3950}
{"snippet": "str.center(width, fillchar)", "intent": "Return centered in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "question_id": 9180}
{"snippet": "counter.update()", "intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) .", "question_id": 1349}
{"snippet": "sqlite3.register_adapter(type, callable)", "intent": "Registers a `callable` to convert the custom Python `type` type into one of SQLite \u2019 s supported types .", "question_id": 8800}
{"snippet": "io.StringIO(initial_value='')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` .", "question_id": 5165}
{"snippet": "ZipInfo.date_time", "intent": "The time and date of the last modification to the archive member.", "question_id": 12864}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "shutil.copy2(src, dst)", "intent": "Identical to copy ( ) except that copy2 ( ) also attempts to preserve file metadata . When `follow_symlinks` is false , and `src` is a symbolic link , copy2 ( ) attempts to copy all metadata from the src symbolic link to the newly-created `dst` symbolic link .", "question_id": 8320}
{"snippet": "dispatcher.listen(backlog)", "intent": "Listen for connections made to the socket . The `backlog` argument specifies the maximum number of queued connections and should be at least 1 ; the maximum value is system-dependent ( usually 5 ) .", "question_id": 670}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "wsgiref.handlers.IISCGIHandler", "intent": "A specialized alternative to CGIHandler, for use when deploying on Microsoft\u2019s IIS web server, without having set the config allowPathInfo option (IIS>=7) or metabase allowPathInfoForScriptMappings (IIS<7).", "question_id": 12237}
{"snippet": "IMAP4.thread(threading_algorithm, charset, search_criterion)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4747}
{"snippet": "profile.Profile(timer=None)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument .", "question_id": 7670}
{"snippet": "deque.popleft()", "intent": "Remove and return an element from the left side of the deque .", "question_id": 1365}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}
{"snippet": "os.getpgid(pid)", "intent": "Return the process group id of the process with process id `pid` .", "question_id": 6680}
{"snippet": "WriteTransport.get_write_buffer_limits()", "intent": "Get the high and low watermarks for write flow control .", "question_id": 408}
{"snippet": "csv.writer(csvfile, **fmtparams, dialect='excel')", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1683}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025}
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493}
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445}
{"snippet": "datetime.hour", "intent": "In range(24).", "question_id": 2275}
{"snippet": "tkinter.tix.LabelEntry", "intent": "The LabelEntry widget packages an entry widget and a label into one mega widget.", "question_id": 10556}
{"snippet": "pickle.Pickler(file, protocol=None, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . The optional `protocol` argument , an integer , tells the pickler to use the given protocol ; supported protocols are 0 to HIGHEST_PROTOCOL . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7393}
{"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "tixCommand.tix_configure(**kw)", "intent": "Query or modify the configuration options of the Tix application context . With arguments `**kw`.", "question_id": 10580}
{"snippet": "AU_write.writeframesraw(data)", "intent": "Write audio frames , without correcting nframes . With arguments `data`.", "question_id": 9728}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "Node.unlink()", "intent": "Break internal references within the DOM so that it will be garbage collected on versions of Python without cyclic GC .", "question_id": 12402}
{"snippet": "json.dumps(obj, **kw)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "question_id": 5280}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "profile.Profile(timer=None)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument .", "question_id": 7670}
{"snippet": "mh.get_sequences()", "intent": "Return a dictionary of sequence names mapped to key lists .", "question_id": 5783}
{"snippet": "Packer.reset()", "intent": "Resets the pack buffer to the empty string .", "question_id": 12274}
{"snippet": "Cmd.ruler", "intent": "The character used to draw separator lines under the help-message headers.", "question_id": 1153}
{"snippet": "crypt.METHOD_BLOWFISH", "intent": "Another Modular Crypt Format method with 22 character salt and 31 character hash based on the Blowfish cipher.", "question_id": 1670}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "loop.call_soon_threadsafe(callback, *args)", "intent": "A thread-safe variant of call_soon ( ) . With arguments `callback`, `*args`.", "question_id": 191}
{"snippet": "policy.message_factory", "intent": "A factory function for constructing a new empty message object.", "question_id": 3418}
{"snippet": "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request . If the optional `allow_dotted_names` argument is true and the instance does not have a _dispatch ( ) method , then if the requested method name contains periods , each component of the method name is searched for individually , with the effect that a simple hierarchical search is performed .", "question_id": 12736}
{"snippet": "cgi.parse_header(string)", "intent": "Parse a MIME header ( such as Content-Type ) into a main value and a dictionary of parameters . With arguments `string`.", "question_id": 1051}
{"snippet": "Element.removeAttribute(name)", "intent": "Remove an attribute by `name` .", "question_id": 12363}
{"snippet": "DocumentType.entities", "intent": "This is a NamedNodeMap giving the definitions of external entities.", "question_id": 12342}
{"snippet": "handle.cancel()", "intent": "Cancel the callback .", "question_id": 330}
{"snippet": "zipimport.zipimporter(archivepath)", "intent": "Create a new zipimporter instance . `archivepath` must be a path to a ZIP file , or to a specific path within a ZIP file .", "question_id": 12881}
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630}
{"snippet": "ssl.SSLContext(protocol=PROTOCOL_TLS)", "intent": "Create a new SSL context . You may pass `protocol` which must be one of the PROTOCOL_* constants defined in this module .", "question_id": 8995}
{"snippet": "__debug__", "intent": "This constant is true if Python was not started with an -O option.", "question_id": 1607}
{"snippet": "formatter.format(record)", "intent": "The `record` \u2019 s attribute dictionary is used as the operand to a string formatting operation .", "question_id": 5618}
{"snippet": "test.support.import_fresh_module(name, blocked=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . With arguments `name`.", "question_id": 10244}
{"snippet": "mailbox.iterkeys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5729}
{"snippet": "socket.sendto(bytes, address)", "intent": "Send data to the socket . Return the number of `bytes` sent . The socket should not be connected to a remote socket , since the destination socket is specified by `address` .", "question_id": 8721}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "pkgutil.iter_modules()", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path .", "question_id": 7445}
{"snippet": "inspect.CO_VARARGS", "intent": "The code object has a variable positional parameter (*args-like).", "question_id": 5042}
{"snippet": "CookieJar.clear()", "intent": "Clear some cookies .", "question_id": 4496}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}
{"snippet": "calendar.HTMLCalendar()", "intent": "This class can be used to generate HTML calendars .", "question_id": 956}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, params=None)", "intent": "Add `headers` and payload to `msg` : If `params` is specified , iterate its items method and use the resulting ( key , value ) pairs to set additional parameters on the Content-Type header . With arguments `<'str'>`.", "question_id": 3045}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "cmath.nan", "intent": "A floating-point \u201cnot a number\u201d (NaN) value.", "question_id": 1125}
{"snippet": "cmath.log10(x)", "intent": "Return the base-10 logarithm of `x` .", "question_id": 1099}
{"snippet": "trace.Trace(countcallers=0)", "intent": "Create an object to `trace` execution of a single statement or expression . `countcallers` enables call relationship tracking .", "question_id": 10710}
{"snippet": "fileinput.filename()", "intent": "Return the name of the file currently being read .", "question_id": 3792}
{"snippet": "Cmd.cmdloop()", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument .", "question_id": 1135}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "pipes.Template", "intent": "An abstraction of a pipeline.", "question_id": 7427}
{"snippet": "tkinter.tix.Form", "intent": "The Form geometry manager based on attachment rules for all Tk widgets.", "question_id": 10578}
{"snippet": "window.mvderwin(y, x)", "intent": "Move the window inside its parent window . With arguments `y`, `x`.", "question_id": 2094}
{"snippet": "errno.ERANGE", "intent": "Math result not representable", "question_id": 3539}
{"snippet": "gettext.textdomain()", "intent": "Change or query the current global `domain` .", "question_id": 4214}
{"snippet": "code.InteractiveInterpreter()", "intent": "This class deals with parsing and interpreter state ( the user \u2019 s namespace ) ; it does not deal with input buffering or prompting or input file naming ( the filename is always passed in explicitly ) .", "question_id": 1155}
{"snippet": "mh.pack()", "intent": "Rename messages in the mailbox as necessary to eliminate gaps in numbering .", "question_id": 5785}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}
{"snippet": "readline.redisplay()", "intent": "Change what \u2019 s displayed on the screen to reflect the current contents of the line buffer .", "question_id": 8020}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}
{"snippet": "directory.add_file(file)", "intent": "Add a `file` to the current component of the directory , starting a new one if there is no current component .", "question_id": 6103}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX", "intent": "An undeclared prefix was found when namespace processing was enabled.", "question_id": 7810}
{"snippet": "ssl.CertificateError", "intent": "An alias for SSLCertVerificationError.", "question_id": 8884}
{"snippet": "XMLReader.getFeature(featurename)", "intent": "Return the current setting for feature `featurename` .", "question_id": 12623}
{"snippet": "zlib.crc32(data, value)", "intent": "Computes a CRC ( Cyclic Redundancy Check ) checksum of `data` . If `value` is present , it is used as the starting value of the checksum ; otherwise , a default value of 0 is used .", "question_id": 12917}
{"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220}
{"snippet": "faulthandler.dump_traceback_later(timeout)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True .", "question_id": 3722}
{"snippet": "Cmd.intro", "intent": "A string to issue as an intro or banner.", "question_id": 1149}
{"snippet": "weakref.WeakValueDictionary(dict)", "intent": "Mapping class that references values weakly . With arguments `dict`.", "question_id": 12084}
{"snippet": "template.substitute(mapping, **kwds)", "intent": "Performs the template substitution , returning a new string . `mapping` is any dictionary-like object with keys that match the placeholders in the template . With arguments `**kwds`.", "question_id": 9526}
{"snippet": "unittest.TestCase()", "intent": "Instances of the TestCase class represent the logical test units in the unittest universe .", "question_id": 11363}
{"snippet": "urllib.request.url2pathname(path)", "intent": "Convert the `path` component path from a percent-encoded URL to the local syntax for a path .", "question_id": 11766}
{"snippet": "errno.EBADFD", "intent": "File descriptor in bad state", "question_id": 3582}
{"snippet": "tkinter.tix.CheckList", "intent": "The CheckList widget displays a list of items to be selected by the user.", "question_id": 10571}
{"snippet": "locale.LC_ALL", "intent": "Combination of all locale settings.", "question_id": 5410}
{"snippet": "context.divmod(x, y)", "intent": "Divides two numbers and returns the integer part of the result . With arguments `x`, `y`.", "question_id": 2529}
{"snippet": "os.defpath", "intent": "The default search path used by exec*p* and spawn*p* if the environment doesn\u2019t have a 'PATH' key.", "question_id": 7127}
{"snippet": "str.capitalize()", "intent": "Return a copy of the string with its first character capitalized and the rest lowercased .", "question_id": 9178}
{"snippet": "textbox.do_command(ch)", "intent": "Process a single command keystroke . With arguments `ch`.", "question_id": 2138}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459}
{"snippet": "typing.cast(typ, val)", "intent": "Cast a value to a type . With arguments `typ`, `val`.", "question_id": 11323}
{"snippet": "system_random.pattern", "intent": "The regular expression pattern.", "question_id": 7966}
{"snippet": "Match.lastindex", "intent": "The integer index of the last matched capturing group, or None if no group was matched at all.", "question_id": 8011}
{"snippet": "window.idcok(flag)", "intent": "If `flag` is False , curses no longer considers using the hardware insert/delete character feature of the terminal ; if flag is True , use of character insertion and deletion is enabled .", "question_id": 2066}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "imp.get_magic()", "intent": "Return the magic string value used to recognize byte-compiled code files ( .pyc files ) .", "question_id": 4760}
{"snippet": "context.keys()", "intent": "Return a list of all variables in the context object .", "question_id": 1658}
{"snippet": "Token.var", "intent": "A read-only property.", "question_id": 1645}
{"snippet": "lzma.LZMACompressor(check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5680}
{"snippet": "turtle.distance(x)", "intent": "Return the distance from the turtle to ( `x` , `y` ) , the given vector , or the given other turtle , in turtle step units .", "question_id": 10943}
{"snippet": "winreg.REG_MULTI_SZ", "intent": "A sequence of null-terminated strings, terminated by two null characters.", "question_id": 12180}
{"snippet": "random.seed()", "intent": "Initialize the random number generator .", "question_id": 7883}
{"snippet": "ArgumentParser.add_subparsers()", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit .", "question_id": 84}
{"snippet": "doctest.DONT_ACCEPT_TRUE_FOR_1", "intent": "By default, if an expected output block contains just 1, an actual output block containing just 1 or just True is considered to be a match, and similarly for 0 versus False.", "question_id": 2752}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319}
{"snippet": "collections.abc.MappingView", "intent": "ABCs for mapping, items, keys, and values views.", "question_id": 1326}
{"snippet": "asyncio.BufferedProtocol(BaseProtocol)", "intent": "A base class for implementing streaming protocols with manual control of the receive buffer . With arguments `BaseProtocol`.", "question_id": 428}
{"snippet": "urllib.parse.urlsplit(urlstring)", "intent": "This is similar to urlparse ( ) , but does not split the params from the URL . With arguments `urlstring`.", "question_id": 11690}
{"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617}
{"snippet": "test.support.gc_collect()", "intent": "Force as many objects as possible to be collected .", "question_id": 10192}
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956}
{"snippet": "cgitb.handler()", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) .", "question_id": 1073}
{"snippet": "asyncio.sleep(delay, loop=None)", "intent": "Block for `delay` seconds . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 597}
{"snippet": "array.itemsize", "intent": "The length in bytes of one array item in the internal representation.", "question_id": 119}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}
{"snippet": "@typing.type_check_only", "intent": "Decorator to mark a class or function to be unavailable at runtime.", "question_id": 11330}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "urllib.request.ProxyBasicAuthHandler()", "intent": "Handle authentication with the proxy .", "question_id": 11793}
{"snippet": "TarFile.extractall(numeric_owner=False)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "question_id": 9935}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}
{"snippet": "file_handler.emit(record)", "intent": "Outputs the `record` to the file .", "question_id": 5435}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}
{"snippet": "logging.handlers.BufferingHandler(capacity)", "intent": "Initializes the handler with a buffer of the specified `capacity` .", "question_id": 5525}
{"snippet": "function.get_frees()", "intent": "Return a tuple containing names of free variables in this function .", "question_id": 9750}
{"snippet": "subprocess.Popen(args, executable=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9601}
{"snippet": "text_calendar.formatmonth(theyear, themonth)", "intent": "Return a month \u2019 s calendar in a multi-line string . With arguments `theyear`, `themonth`.", "question_id": 928}
{"snippet": "typing.TYPE_CHECKING", "intent": "A special constant that is assumed to be True by 3rd party static type checkers.", "question_id": 11339}
{"snippet": "future.cancel()", "intent": "Attempt to cancel the call .", "question_id": 1468}
{"snippet": "sys.getwindowsversion()", "intent": "Return a named tuple describing the Windows version currently running .", "question_id": 9809}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "decimal.normalize()", "intent": "Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal ( ' 0 ' ) to Decimal ( '0e0 ' ) .", "question_id": 2457}
{"snippet": "shlex.wordchars", "intent": "The string of characters that will accumulate into multi-character tokens.", "question_id": 8295}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "Node.firstChild", "intent": "The first child of the node, if there are any, or None.", "question_id": 12320}
{"snippet": "file_handler.emit(record)", "intent": "Outputs the `record` to the file .", "question_id": 5435}
{"snippet": "IMAP4.partial(message_num, message_part, start, length)", "intent": "Fetch truncated part of a message . With arguments `message_num`, `message_part`, `start`, `length`.", "question_id": 4720}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "tkinter.tix.DirSelectBox", "intent": "The DirSelectBox is similar to the standard Motif(TM) directory-selection box.", "question_id": 10566}
{"snippet": "socket.fileno()", "intent": "Return the socket \u2019 s file descriptor ( a small integer ) , or -1 on failure .", "question_id": 8680}
{"snippet": "stringprep.in_table_c8(code)", "intent": "Determine whether `code` is in tableC.8 ( Change display properties or are deprecated ) .", "question_id": 9546}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826}
{"snippet": "cgitb.handler()", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) .", "question_id": 1073}
{"snippet": "contextlib.ExitStack", "intent": "A context manager that is designed to make it easy to programmatically combine other context managers and cleanup functions, especially those that are optional or otherwise driven by input data.", "question_id": 1626}
{"snippet": "str.islower()", "intent": "Return true if all cased characters 4 in the string are lowercase and there is at least one cased character , false otherwise .", "question_id": 9208}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "test.support.import_fresh_module(name)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10242}
{"snippet": "loop.sendfile(transport, file)", "intent": "Send a `file` over a `transport` .", "question_id": 256}
{"snippet": "inspect.getframeinfo(frame)", "intent": "Get information about a `frame` or traceback object .", "question_id": 5023}
{"snippet": "signal.ITIMER_REAL", "intent": "Decrements interval timer in real time, and delivers SIGALRM upon expiration.", "question_id": 8379}
{"snippet": "config_parser.getboolean(section, option, fallback)", "intent": "A convenience method which coerces the `option` in the specified `section` to a Boolean value . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "question_id": 1544}
{"snippet": "pickle.Pickler(file)", "intent": "This takes a binary `file` for writing a pickle data stream .", "question_id": 7390}
{"snippet": "sys.version_info", "intent": "A tuple containing the five components of the version number: major, minor, micro, releaselevel, and serial.", "question_id": 9854}
{"snippet": "profile.Profile()", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides .", "question_id": 7669}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499}
{"snippet": "fileinput.filename()", "intent": "Return the name of the file currently being read .", "question_id": 3792}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348}
{"snippet": "select.kevent(ident, filter=KQ_FILTER_READ, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `filter`, `data`.", "question_id": 8164}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711}
{"snippet": "hmac.new(key)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key .", "question_id": 4329}
{"snippet": "resource.RLIMIT_SWAP", "intent": "The maximum size (in bytes) of the swap space that may be reserved or used by all of this user id\u2019s processes.", "question_id": 8093}
{"snippet": "abstract_event_loop.expected", "intent": "The total number (int) of expected bytes.", "question_id": 350}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124}
{"snippet": "shutil.get_archive_formats()", "intent": "Return a list of supported formats for archiving .", "question_id": 8358}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832}
{"snippet": "aifc.rewind()", "intent": "Rewind the read pointer .", "question_id": 21}
{"snippet": "Node.normalize()", "intent": "Join adjacent text nodes so that all stretches of text are stored as single Text instances .", "question_id": 12334}
{"snippet": "faulthandler.dump_traceback()", "intent": "Dump the tracebacks of all threads into `file` .", "question_id": 3712}
{"snippet": "Function.children", "intent": "A dictionary mapping names to descriptors for nested functions and classes.", "question_id": 7715}
{"snippet": "locale.CODESET", "intent": "Get a string with the name of the character encoding used in the selected locale.", "question_id": 5354}
{"snippet": "asyncio.as_completed(aws)", "intent": "Run awaitable objects in the `aws` set concurrently .", "question_id": 615}
{"snippet": "locale.YESEXPR", "intent": "Get a regular expression that can be used with the regex function to recognize a positive response to a yes/no question.", "question_id": 5365}
{"snippet": "sunau.AUDIO_FILE_MAGIC", "intent": "An integer every valid Sun AU file begins with, stored in big-endian form.", "question_id": 9694}
{"snippet": "tkinter.ttk.Style", "intent": "This class is used to manipulate the style database.", "question_id": 10672}
{"snippet": "email.mime.image.MIMEImage(_imagedata, **_params)", "intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . With arguments `**_params`.", "question_id": 3342}
{"snippet": "asyncio.Task(coro, loop=None)", "intent": "A Future-like object that runs a Python coroutine . Event loops use cooperative scheduling : an event `loop` runs one Task at a time . With arguments `coro`.", "question_id": 625}
{"snippet": "sys.exit()", "intent": "Exit from Python .", "question_id": 9789}
{"snippet": "tkinter.tix.HList", "intent": "The HList widget can be used to display any data that have a hierarchical structure, for example, file system directory trees.", "question_id": 10570}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "resource.RLIMIT_RTTIME", "intent": "The time limit (in microseconds) on CPU time that a process can spend under real-time scheduling without making a blocking syscall.", "question_id": 8090}
{"snippet": "WindowsError", "intent": "Only available on Windows.", "question_id": 3684}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}
{"snippet": "DefaultCookiePolicy.strict_rfc2965_unverifiable", "intent": "Follow RFC 2965 rules on unverifiable transactions (usually, an unverifiable transaction is one resulting from a redirect or a request for an image hosted on another site).", "question_id": 4547}
{"snippet": "shlex.split(s, posix=True)", "intent": "Split the string `s` using shell-like syntax . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8270}
{"snippet": "stat.UF_OPAQUE", "intent": "The directory is opaque when viewed through a union stack.", "question_id": 9116}
{"snippet": "window.border()", "intent": "Draw a border around the edges of the window .", "question_id": 2027}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "asyncio.ProactorEventLoop", "intent": "An event loop for Windows that uses \u201cI/O Completion Ports\u201d (IOCP).", "question_id": 343}
{"snippet": "socket.recvmsg_into(buffers)", "intent": "Receive normal data and ancillary data from the socket , behaving as recvmsg ( ) would , but scatter the non-ancillary data into a series of `buffers` instead of returning a new bytes object .", "question_id": 8710}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "time.time()", "intent": "Return the time in seconds since the epoch as a floating point number .", "question_id": 10458}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "os.stat(path)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` .", "question_id": 6917}
{"snippet": "tracemalloc.start()", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators .", "question_id": 10847}
{"snippet": "urllib.request.urlcleanup()", "intent": "Cleans up temporary files that may have been left behind by previous calls to urlretrieve ( ) .", "question_id": 11889}
{"snippet": "bytecode.from_traceback(tb)", "intent": "Construct a Bytecode instance from the given traceback , setting current_offset to the instruction responsible for the exception . With arguments `tb`.", "question_id": 2699}
{"snippet": "uuid.getnode()", "intent": "Get the hardware address as a 48-bit positive integer .", "question_id": 11956}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}
{"snippet": "hash.hexdigest()", "intent": "Like digest ( ) except the digest is returned as a string object of double length , containing only hexadecimal digits .", "question_id": 4306}
{"snippet": "doctest.DocTestSuite(extraglobs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `extraglobs` specifies an extra set of global variables , which is merged into globs .", "question_id": 2809}
{"snippet": "test_case.assertLogs()", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11411}
{"snippet": "bz2_file.peek()", "intent": "Return buffered data without advancing the file position .", "question_id": 895}
{"snippet": "ftplib.FTP_TLS()", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 .", "question_id": 3888}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}
{"snippet": "subprocess.CalledProcessError", "intent": "Subclass of SubprocessError, raised when a process run by check_call() or check_output() returns a non-zero exit status.", "question_id": 9593}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}
{"snippet": "shlex.source", "intent": "This attribute is None by default.", "question_id": 8303}
{"snippet": "contextvars.Context", "intent": "A mapping of ContextVars to their values.", "question_id": 1649}
{"snippet": "exit_stack.callback(callback, *args, **kwds)", "intent": "Accepts an arbitrary `callback` function and arguments and adds it to the callback stack . With arguments `*args`, `**kwds`.", "question_id": 1629}
{"snippet": "itertools.groupby(iterable, key=None)", "intent": "Make an iterator that returns consecutive keys and groups from the `iterable` . The `key` is a function computing a key value for each element .", "question_id": 5254}
{"snippet": "set -= other | ...", "intent": "Update the set, removing elements found in others.", "question_id": 9459}
{"snippet": "directory.start_component(keyfile=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `keyfile` is given , the KeyPath is left null in the Component table .", "question_id": 6097}
{"snippet": "UUID.version", "intent": "The UUID version number (1 through 5, meaningful only when the variant is RFC_4122).", "question_id": 11954}
{"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}
{"snippet": "site.main()", "intent": "Adds all the standard site-specific directories to the module search path .", "question_id": 8406}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT", "intent": "Something other than whitespace occurred after the document element.", "question_id": 7794}
{"snippet": "xml.dom.WrongDocumentErr", "intent": "Raised when a node is inserted in a different document than it currently belongs to, and the implementation does not support migrating the node from one document to the other.", "question_id": 12395}
{"snippet": "asyncio.AbstractEventLoop", "intent": "Abstract base class for asyncio-compliant event loops.", "question_id": 344}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392}
{"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}
{"snippet": "mh.pack()", "intent": "Rename messages in the mailbox as necessary to eliminate gaps in numbering .", "question_id": 5785}
{"snippet": "base_http_request_handler.responses", "intent": "This attribute contains a mapping of error code integers to two-element tuples containing a short and long message.", "question_id": 4633}
{"snippet": "loop.call_later(delay, callback, *args)", "intent": "Schedule `callback` to be called after the given `delay` number of seconds ( can be either an int or a float ) . With arguments `*args`.", "question_id": 193}
{"snippet": "numbers.Integral", "intent": "Subtypes Rational and adds a conversion to int.", "question_id": 6512}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "inspect.CO_ITERABLE_COROUTINE", "intent": "The flag is used to transform generators into generator-based coroutines.", "question_id": 5048}
{"snippet": "os.sched_get_priority_max(policy)", "intent": "Get the maximum priority value for `policy` .", "question_id": 7106}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224}
{"snippet": "dis.distb()", "intent": "Disassemble the top-of-stack function of a traceback , using the last traceback if none was passed .", "question_id": 2715}
{"snippet": "config_parser.write(fileobject, space_around_delimiters=True)", "intent": "Write a representation of the configuration to the specified file object , which must be opened in text mode ( accepting strings ) . If `space_around_delimiters` is true , delimiters between keys and values are surrounded by spaces . With arguments `fileobject`.", "question_id": 1562}
{"snippet": "winsound.SND_FILENAME", "intent": "The sound parameter is the name of a WAV file.", "question_id": 12196}
{"snippet": "asyncio.SubprocessTransport(BaseTransport)", "intent": "An abstraction to represent a connection between a parent and its child OS process . With arguments `BaseTransport`.", "question_id": 395}
{"snippet": "str.ljust(width, fillchar)", "intent": "Return the string left justified in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "question_id": 9215}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "mimetypes.knownfiles", "intent": "List of type map file names commonly installed.", "question_id": 5951}
{"snippet": "bytes(source, encoding)", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) .", "question_id": 9258}
{"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778}
{"snippet": "profile.Profile(subcalls=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . With arguments `subcalls`.", "question_id": 7672}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "set -= other | ...", "intent": "Update the set, removing elements found in others.", "question_id": 9459}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "widget.start()", "intent": "Begin autoincrement mode : schedules a recurring timer event that calls Progressbar.step ( ) every `interval` milliseconds .", "question_id": 10615}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "multiprocessing.SimpleQueue", "intent": "It is a simplified Queue type, very close to a locked Pipe.", "question_id": 6211}
{"snippet": "winreg.HKEY_DYN_DATA", "intent": "This key is not used in versions of Windows after 98.", "question_id": 12161}
{"snippet": "asyncio.SelectorEventLoop", "intent": "An event loop based on the selectors module.", "question_id": 342}
{"snippet": "itertools.zip_longest(*iterables, fillvalue=None)", "intent": "Make an iterator that aggregates elements from each of the iterables . If the iterables are of uneven length , missing values are filled-in with `fillvalue` . With arguments `*iterables`.", "question_id": 5269}
{"snippet": "imp.new_module(name)", "intent": "Return a new empty module object called `name` .", "question_id": 4765}
{"snippet": "ssl.OP_NO_SSLv3", "intent": "Prevents an SSLv3 connection.", "question_id": 8932}
{"snippet": "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12129}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4502}
{"snippet": "mime_types.types_map_inv", "intent": "Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types.", "question_id": 5963}
{"snippet": "errno.ENOSPC", "intent": "No space left on device", "question_id": 3533}
{"snippet": "os.pardir", "intent": "The constant string used by the operating system to refer to the parent directory.", "question_id": 7122}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997}
{"snippet": "dircmp.same_files", "intent": "Files which are identical in both a and b, using the class\u2019s file comparison operator.", "question_id": 3777}
{"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}
{"snippet": "zipfile.is_zipfile(filename)", "intent": "Returns True if `filename` is a valid ZIP file based on its magic number , otherwise returns False .", "question_id": 12787}
{"snippet": "asyncio.Queue(maxsize=0, loop=None)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite . With arguments `loop`.", "question_id": 448}
{"snippet": "gdbm.reorganize()", "intent": "If you have carried out a lot of deletions and would like to shrink the space used by the gdbm file , this routine will reorganize the database .", "question_id": 2376}
{"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038}
{"snippet": "asyncio.Task(coro)", "intent": "A Future-like object that runs a Python coroutine . With arguments `coro`.", "question_id": 624}
{"snippet": "trace.Trace(timing=False)", "intent": "Create an object to `trace` execution of a single statement or expression . `timing` enables a timestamp relative to when tracing was started to be displayed .", "question_id": 10715}
{"snippet": "resource.RLIMIT_VMEM", "intent": "The largest area of mapped memory which the process may occupy.", "question_id": 8085}
{"snippet": "writer.send_literal_data(data)", "intent": "Output character `data` which has already been formatted for display .", "question_id": 3851}
{"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}
{"snippet": "functools.reduce(function, iterable)", "intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . With arguments `iterable`.", "question_id": 4154}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951}
{"snippet": "content_manager.get_content(msg, *args, **kw)", "intent": "Look up a handler function based on the mimetype of `msg` ( see next paragraph ) , call it , passing through all arguments , and return the result of the call . With arguments `*args`, `**kw`.", "question_id": 3032}
{"snippet": "threading.main_thread()", "intent": "Return the main Thread object .", "question_id": 10345}
{"snippet": "plistlib.dump(value, fp, sort_keys=True)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . With arguments `fp`.", "question_id": 7565}
{"snippet": "UnboundLocalError", "intent": "Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.", "question_id": 3672}
{"snippet": "multiprocessing.freeze_support()", "intent": "Add support for when a program which uses multiprocessing has been frozen to produce a Windows executable .", "question_id": 6222}
{"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "decimal.is_infinite()", "intent": "Return True if the argument is either positive or negative infinity and False otherwise .", "question_id": 2419}
{"snippet": "curses.curs_set(visibility)", "intent": "Set the cursor state . `visibility` can be set to 0 , 1 , or 2 , for invisible , normal , or very visible .", "question_id": 1926}
{"snippet": "string.ascii_lowercase", "intent": "The lowercase letters 'abcdefghijklmnopqrstuvwxyz'.", "question_id": 9508}
{"snippet": "smtplib.SMTPAuthenticationError", "intent": "SMTP authentication went wrong.", "question_id": 8507}
{"snippet": "email.contentmanager.set_content(msg, <'str'>)", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`.", "question_id": 3039}
{"snippet": "xml.sax.saxutils.XMLGenerator(short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12661}
{"snippet": "cmath.exp(x)", "intent": "Return e raised to the power `x` , where e is the base of natural logarithms .", "question_id": 1096}
{"snippet": "errno.EIO", "intent": "I/O error", "question_id": 3510}
{"snippet": "subprocess.CREATE_NEW_CONSOLE", "intent": "The new process has a new console, instead of inheriting its parent\u2019s console (the default).", "question_id": 9647}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "zlib.crc32(data)", "intent": "Computes a CRC ( Cyclic Redundancy Check ) checksum of `data` .", "question_id": 12918}
{"snippet": "errno.EOVERFLOW", "intent": "Value too large for defined data type", "question_id": 3580}
{"snippet": "os.pardir", "intent": "The constant string used by the operating system to refer to the parent directory.", "question_id": 7122}
{"snippet": "urllib.request.HTTPHandler", "intent": "A class to handle opening of HTTP URLs.", "question_id": 11801}
{"snippet": "turtle.register_shape(name)", "intent": "There are three different ways to call this function : With arguments `name`.", "question_id": 11098}
{"snippet": "SMTP.docmd(cmd, args='')", "intent": "Send a command `cmd` to the server . The optional argument `args` is simply concatenated to the command , separated by a space .", "question_id": 8510}
{"snippet": "sys.getsizeof(object)", "intent": "Return the size of an `object` in bytes .", "question_id": 9803}
{"snippet": "curses.color_pair(color_number)", "intent": "Return the attribute value for displaying text in the specified color . With arguments `color_number`.", "question_id": 1925}
{"snippet": "smtplib.SMTP(source_address=None)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `source_address` parameter allows binding to some specific source address in a machine with multiple network interfaces , and/or to some specific source TCP port .", "question_id": 8462}
{"snippet": "test.support.import_fresh_module(name, deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10245}
{"snippet": "SMTP.helo()", "intent": "Identify yourself to the SMTP server using HELO .", "question_id": 8515}
{"snippet": "time.perf_counter()", "intent": "Return the value ( in fractional seconds ) of a performance counter , i.e .", "question_id": 10448}
{"snippet": "os.abort()", "intent": "Generate a SIGABRT signal to the current process .", "question_id": 7008}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "time.thread_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current thread .", "question_id": 10459}
{"snippet": "shutil.Error", "intent": "This exception collects exceptions that are raised during a multi-file operation.", "question_id": 8349}
{"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}
{"snippet": "window.vline(ch, n)", "intent": "Display a vertical line starting at ( y , x ) with length `n` consisting of the character `ch` .", "question_id": 2129}
{"snippet": "loop.stop()", "intent": "Stop the event loop .", "question_id": 184}
{"snippet": "test_loader.suiteClass", "intent": "Callable object that constructs a test suite from a list of tests.", "question_id": 11505}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "winreg.REG_FULL_RESOURCE_DESCRIPTOR", "intent": "A hardware setting.", "question_id": 12185}
{"snippet": "smtplib.SMTP(source_address=None)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `source_address` parameter allows binding to some specific source address in a machine with multiple network interfaces , and/or to some specific source TCP port .", "question_id": 8462}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910}
{"snippet": "unittest.main(exit=True)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . By default main calls sys.exit ( ) with an `exit` code indicating success or failure of the tests run .", "question_id": 11551}
{"snippet": "context.radix()", "intent": "Just returns 10 , as this is Decimal , : )", "question_id": 2564}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "sys.version", "intent": "A string containing the version number of the Python interpreter plus additional information on the build number and compiler used.", "question_id": 9852}
{"snippet": "header.append(s)", "intent": "Append the string `s` to the MIME header .", "question_id": 3126}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716}
{"snippet": "frame.lineno", "intent": "Line number (int).", "question_id": 10869}
{"snippet": "platform.python_version_tuple()", "intent": "Returns the Python version as tuple ( major , minor , patchlevel ) of strings .", "question_id": 7479}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_ABORTED", "intent": "This should not be reported to Python applications.", "question_id": 7818}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "ctypes.pythonapi", "intent": "An instance of PyDLL that exposes Python C API functions as attributes.", "question_id": 1785}
{"snippet": "bytes.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9262}
{"snippet": "codeop.compile_command(source, filename=\"<input>\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . In that case , the `filename` attribute of the code object will be filename , which defaults to ' < input > ' .", "question_id": 1305}
{"snippet": "time.CLOCK_MONOTONIC", "intent": "Clock that cannot be set and represents monotonic time since some unspecified starting point.", "question_id": 10465}
{"snippet": "dbm.dumb.open(filename)", "intent": "Open a dumbdbm database and return a dumbdbm object . The `filename` argument is the basename of the database file ( without any specific extensions ) .", "question_id": 2388}
{"snippet": "locale.YESEXPR", "intent": "Get a regular expression that can be used with the regex function to recognize a positive response to a yes/no question.", "question_id": 5365}
{"snippet": "multiprocessing.Pipe()", "intent": "Returns a pair ( conn1 , conn2 ) of Connection objects representing the ends of a pipe .", "question_id": 6194}
{"snippet": "ZipFile.extractall(pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "question_id": 12821}
{"snippet": "FileCookieJar.load(filename=None)", "intent": "Load cookies from a file . With arguments `filename`.", "question_id": 4507}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "sndhdr.what(filename)", "intent": "Determines the type of sound data stored in the file `filename` using whathdr ( ) .", "question_id": 8549}
{"snippet": "loader.module_repr(module)", "intent": "A legacy method which when implemented calculates and returns the given `module` \u2019 s repr , as a string .", "question_id": 4817}
{"snippet": "json.dump(obj, fp, **kw, ensure_ascii=True)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped . With arguments `**kw`.", "question_id": 5272}
{"snippet": "test_case.run()", "intent": "Run the test , collecting the `result` into the TestResult object passed as result .", "question_id": 11369}
{"snippet": "traceback.extract_tb(tb)", "intent": "Return a StackSummary object representing a list of \u201c pre-processed \u201d stack trace entries extracted from the traceback object `tb` .", "question_id": 10769}
{"snippet": "email.utils.formatdate()", "intent": "Returns a date string as per RFC 2822 , e.g .", "question_id": 3468}
{"snippet": "marshal.load(file)", "intent": "Read one value from the open `file` and return it .", "question_id": 5880}
{"snippet": "json.JSONEncoder(skipkeys=False)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None .", "question_id": 5323}
{"snippet": "SummaryInformation.Persist()", "intent": "Write the modified properties to the summary information stream , using MsiSummaryInfoPersist ( ) .", "question_id": 6080}
{"snippet": "coverage_results.update(other)", "intent": "Merge in data from another CoverageResults object . With arguments `other`.", "question_id": 10724}
{"snippet": "ZipInfo.extract_version", "intent": "PKZIP version needed to extract archive.", "question_id": 12870}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518}
{"snippet": "mock.mock_add_spec(spec)", "intent": "Add a `spec` to a mock .", "question_id": 11582}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716}
{"snippet": "socket.setdefaulttimeout(timeout)", "intent": "Set the default `timeout` in seconds ( float ) for new socket objects .", "question_id": 8668}
{"snippet": "DictWriter.writeheader()", "intent": "Write a row with the field names ( as specified in the constructor ) .", "question_id": 1738}
{"snippet": "HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)", "intent": "Return a Request or None in response to a redirect . If a redirection should take place , return a new Request to allow http_error_30* ( ) to perform the redirect to `newurl` . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11850}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503}
{"snippet": "shlex.shlex(instream=None, punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8280}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348}
{"snippet": "smtp_channel.mailfrom", "intent": "Holds a string containing the address identified in the \u201cMAIL FROM:\u201d line from the client.", "question_id": 8443}
{"snippet": "coverage_results.update(other)", "intent": "Merge in data from another CoverageResults object . With arguments `other`.", "question_id": 10724}
{"snippet": "getpass.GetPassWarning", "intent": "A UserWarning subclass issued when password input may be echoed.", "question_id": 4208}
{"snippet": "node_visitor.visit(node)", "intent": "Visit a `node` .", "question_id": 160}
{"snippet": "shlex.get_token()", "intent": "Return a token .", "question_id": 8283}
{"snippet": "asyncio.wait(aws, loop=None)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 608}
{"snippet": "memory_bio.read()", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9056}
{"snippet": "i_pv4_network.subnets()", "intent": "The subnets that join to make the current network definition , depending on the argument values .", "question_id": 5208}
{"snippet": "os.posix_fadvise(fd, offset, len, advice)", "intent": "Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations . The `advice` applies to the region of the file specified by `fd` starting at `offset` and continuing for `len` bytes .", "question_id": 6776}
{"snippet": "test.support.get_attribute(obj, name)", "intent": "Get an attribute , raising unittest.SkipTest if AttributeError is raised . With arguments `obj`, `name`.", "question_id": 10257}
{"snippet": "turtle.pensize()", "intent": "Set the line thickness to `width` or return it .", "question_id": 10954}
{"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}
{"snippet": "os.fchmod(fd, mode)", "intent": "Change the `mode` of the file given by `fd` to the numeric mode .", "question_id": 6719}
{"snippet": "audioop.ratecv(fragment, width, nchannels, inrate, outrate, state)", "intent": "Convert the frame rate of the input `fragment` . `state` is a tuple containing the state of the converter . With arguments `width`, `nchannels`, `inrate`, `outrate`.", "question_id": 702}
{"snippet": "os.makedirs(name)", "intent": "Recursive directory creation function . With arguments `name`.", "question_id": 6866}
{"snippet": "base_http_request_handler.sys_version", "intent": "Contains the Python system version, in a form usable by the version_string method and the server_version class variable.", "question_id": 4628}
{"snippet": "weakref.ReferenceType", "intent": "The type object for weak references objects.", "question_id": 12096}
{"snippet": "sys.hash_info", "intent": "A named tuple giving parameters of the numeric hash implementation.", "question_id": 9813}
{"snippet": "Path.touch(exist_ok=True)", "intent": "Create a file at this given path . If the file already exists , the function succeeds if `exist_ok` is true ( and its modification time is updated to the current time ) , otherwise FileExistsError is raised .", "question_id": 7319}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION", "intent": "A CDATA marked section was not closed.", "question_id": 7806}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "window.encoding", "intent": "Encoding used to encode method arguments (Unicode strings and characters).", "question_id": 2047}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499}
{"snippet": "loader.load_module(fullname)", "intent": "A legacy method for loading a module . With arguments `fullname`.", "question_id": 4816}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "aifc.getparams()", "intent": "Returns a namedtuple ( ) ( nchannels , sampwidth , framerate , nframes , comptype , compname ) , equivalent to output of the get* ( ) methods .", "question_id": 17}
{"snippet": "i_pv4_network.network_address", "intent": "The network address for the network.", "question_id": 5196}
{"snippet": "bytes.rsplit(maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9353}
{"snippet": "ArgumentParser.convert_arg_line_to_args(arg_line)", "intent": "Arguments that are read from a file ( see the fromfile_prefix_chars keyword argument to the ArgumentParser constructor ) are read one argument per line . This method takes a single argument `arg_line` which is a string read from the argument file .", "question_id": 109}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "statistics.median_grouped(data)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation .", "question_id": 9130}
{"snippet": "pickle.UnpicklingError", "intent": "Error raised when there is a problem unpickling an object, such as a data corruption or a security violation.", "question_id": 7389}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "winreg.HKEY_PERFORMANCE_DATA", "intent": "Registry entries subordinate to this key allow you to access performance data.", "question_id": 12159}
{"snippet": "types.ClassMethodDescriptorType", "intent": "The type of unbound class methods of some built-in data types such as dict.__dict__['fromkeys'].", "question_id": 11195}
{"snippet": "loop.time()", "intent": "Return the current time , as a float value , according to the event loop \u2019 s internal monotonic clock .", "question_id": 197}
{"snippet": "babyl.get_labels()", "intent": "Return a list of the names of all user-defined labels used in the mailbox .", "question_id": 5798}
{"snippet": "prototype(func_spec)", "intent": "Returns a foreign function exported by a shared library . `func_spec` must be a 2-tuple ( name_or_ordinal , library ) .", "question_id": 1804}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "queue.join_thread()", "intent": "Join the background thread .", "question_id": 6209}
{"snippet": "Node.nodeName", "intent": "This has a different meaning for each node type; see the DOM specification for details.", "question_id": 12325}
{"snippet": "base_selector.modify(fileobj, events)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8218}
{"snippet": "context.compare_total(x, y)", "intent": "Compares two operands using their abstract representation . With arguments `x`, `y`.", "question_id": 2522}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "crypt.METHOD_SHA512", "intent": "A Modular Crypt Format method with 16 character salt and 86 character hash based on the SHA-512 hash function.", "question_id": 1668}
{"snippet": "queue_listener.format(record)", "intent": "Do formatting for a `record` - if a formatter is set , use it .", "question_id": 5608}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "stat.S_IREAD", "intent": "Unix V7 synonym for S_IRUSR.", "question_id": 9110}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "set -= other | ...", "intent": "Update the set, removing elements found in others.", "question_id": 9459}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}
{"snippet": "FieldStorage.getfirst(name, default=None)", "intent": "This method always returns only one value associated with form field `name` . 1 If no such form field or value exists then the method returns the value specified by the optional parameter `default` .", "question_id": 1027}
{"snippet": "mock.return_value", "intent": "Set this to configure the value returned by calling the mock:", "question_id": 11590}
{"snippet": "codecs.register(search_function)", "intent": "Register a codec search function . With arguments `search_function`.", "question_id": 1224}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "time.isoformat()", "intent": "Return a string representing the time in ISO 8601 format , HH : MM : SS.ffffff or , if microsecond is 0 , HH : MM : SS If utcoffset ( ) does not return None , a string is appended , giving the UTC offset : HH : MM : SS.ffffff+HH : MM [ : SS [ .ffffff ] ] or , if self.microsecond is 0 , HH : MM : SS+HH : MM [ : SS [ .ffffff ] ] .", "question_id": 2344}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "platform.python_build()", "intent": "Returns a tuple ( buildno , builddate ) stating the Python build number and date as strings .", "question_id": 7473}
{"snippet": "file_finder.find_spec(fullname)", "intent": "Attempt to find the spec to handle `fullname` within path .", "question_id": 4884}
{"snippet": "xml.sax.saxutils.unescape(data, entities={})", "intent": "Unescape ' & amp ; ' , ' & lt ; ' , and ' & gt ; ' in a string of `data` . You can unescape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12655}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}
{"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047}
{"snippet": "text_io_wrapper.reconfigure(encoding, errors, newline)", "intent": "Reconfigure this text stream using new settings for `encoding` , `errors` , `newline` , line_buffering and `write_through` .", "question_id": 5160}
{"snippet": "SMTP.auth(mechanism, authobject)", "intent": "Issue an SMTP AUTH command for the specified authentication `mechanism` , and handle the challenge response via `authobject` .", "question_id": 8524}
{"snippet": "test_case.defaultTestResult()", "intent": "Return an instance of the test result class that should be used for this test case class ( if no other result instance is provided to the run ( ) method ) .", "question_id": 11468}
{"snippet": "loader.exec_module(module)", "intent": "An abstract method that executes the `module` in its own namespace when a module is imported or reloaded .", "question_id": 4815}
{"snippet": "wsgiref.handlers.read_environ()", "intent": "Transcode CGI variables from os.environ to PEP 3333 \u201c bytes in unicode \u201d strings , returning a new dictionary .", "question_id": 12270}
{"snippet": "window.timeout(delay)", "intent": "Set blocking or non-blocking read behavior for the window . If `delay` is negative , blocking read is used ( which will wait indefinitely for input ) .", "question_id": 2124}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}
{"snippet": "window.insdelln(nlines)", "intent": "Insert `nlines` lines into the specified window above the current line .", "question_id": 2075}
{"snippet": "set &= other & ...", "intent": "Update the set, keeping only elements found in it and all others.", "question_id": 9457}
{"snippet": "winreg.REG_DWORD_LITTLE_ENDIAN", "intent": "A 32-bit number in little-endian format.", "question_id": 12176}
{"snippet": "html_calendar.cssclass_noday", "intent": "The CSS class for a weekday occurring in the previous or coming month.", "question_id": 971}
{"snippet": "io.RawIOBase", "intent": "Base class for raw binary I/O.", "question_id": 5083}
{"snippet": "errno.EIDRM", "intent": "Identifier removed", "question_id": 3548}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "subprocess.DETACHED_PROCESS", "intent": "A Popen creationflags parameter to specify that a new process will not inherit its parent\u2019s console.", "question_id": 9656}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "test.support.HAVE_DOCSTRINGS", "intent": "Check for presence of docstrings.", "question_id": 10133}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "tkinter.tix.InputOnly", "intent": "The InputOnly widgets are to accept inputs from the user, which can be done with the bind command (Unix only).", "question_id": 10577}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868}
{"snippet": "Telnet.set_debuglevel(debuglevel)", "intent": "Set the debug level . The higher the value of `debuglevel` , the more debug output you get ( on sys.stdout ) .", "question_id": 10023}
{"snippet": "_c_data._b_base_", "intent": "Sometimes ctypes data instances do not own the memory block they contain, instead they share part of the memory block of a base object.", "question_id": 1850}
{"snippet": "ssl.MemoryBIO", "intent": "A memory buffer that can be used to pass data between Python and an SSL protocol instance.", "question_id": 9053}
{"snippet": "gettext.find(domain, languages=None)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code .", "question_id": 4223}
{"snippet": "doc_test_runner.run(test, compileflags=None)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . `compileflags` gives the set of flags that should be used by the Python compiler when running the examples .", "question_id": 2874}
{"snippet": "codeop.compile_command(source, symbol=\"single\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . The `symbol` argument determines whether source is compiled as a statement ( 'single ' , the default ) or as an expression ( 'eval ' ) .", "question_id": 1306}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705}
{"snippet": "deque.popleft()", "intent": "Remove and return an element from the left side of the deque .", "question_id": 1365}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892}
{"snippet": "turtle.setup()", "intent": "Set the size and position of the main window .", "question_id": 11107}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "Class.super", "intent": "A list of Class objects which describe the immediate base classes of the class being described.", "question_id": 7722}
{"snippet": "sync_manager.Array(typecode, sequence)", "intent": "Create an array and return a proxy for it . With arguments `typecode`, `sequence`.", "question_id": 6311}
{"snippet": "set - other - ...", "intent": "Return a new set with elements in the set that are not in the others.", "question_id": 9450}
{"snippet": "queue_handler.enqueue(record)", "intent": "Enqueues the `record` on the queue using put_nowait ( ) ; you may want to override this if you want to use blocking behaviour , or a timeout , or a customized queue implementation .", "question_id": 5556}
{"snippet": "errno.EALREADY", "intent": "Operation already in progress", "question_id": 3619}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470}
{"snippet": "numbers.Number", "intent": "The root of the numeric hierarchy.", "question_id": 6503}
{"snippet": "asyncio.AbstractEventLoop", "intent": "Abstract base class for asyncio-compliant event loops.", "question_id": 344}
{"snippet": "str.islower()", "intent": "Return true if all cased characters 4 in the string are lowercase and there is at least one cased character , false otherwise .", "question_id": 9208}
{"snippet": "pprint.pprint(object)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline .", "question_id": 7643}
{"snippet": "compat32.fold(name, value)", "intent": "Headers are folded using the Header folding algorithm , which preserves existing line breaks in the `value` , and wraps each resulting line to the max_line_length . With arguments `name`.", "question_id": 3449}
{"snippet": "csv.writer(csvfile, **fmtparams, dialect='excel')", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1683}
{"snippet": "abc_meta.__subclasshook__(subclass)", "intent": "( Must be defined as a class method . ) Check whether `subclass` is considered a subclass of this ABC .", "question_id": 3}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136}
{"snippet": "math.isinf(x)", "intent": "Return True if `x` is a positive or negative infinity , and False otherwise .", "question_id": 5899}
{"snippet": "message.get_charsets()", "intent": "Return a list containing the character set names in the message .", "question_id": 3024}
{"snippet": "memoryview.nbytes", "intent": "nbytes == product(shape) * itemsize == len(m.tobytes()).", "question_id": 9420}
{"snippet": "mimetypes.read_mime_types(filename)", "intent": "Load the type map given in the file `filename` , if it exists .", "question_id": 5947}
{"snippet": "xml.sax.handler.all_features", "intent": "List of all features.", "question_id": 12568}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112}
{"snippet": "bdb.format_stack_entry(frame_lineno)", "intent": "Return a string with information about a stack entry , identified by a ( frame , lineno ) tuple : With arguments `frame_lineno`.", "question_id": 805}
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311}
{"snippet": "IMAP4.noop()", "intent": "Send NOOP to server .", "question_id": 4718}
{"snippet": "socketserver.UDPServer(server_address, RequestHandlerClass)", "intent": "This uses datagrams , which are discrete packets of information that may arrive out of order or be lost while in transit . With arguments `server_address`, `RequestHandlerClass`.", "question_id": 8747}
{"snippet": "SMTP.sendmail(from_addr, to_addrs, msg)", "intent": "Send mail . If SMTPUTF8 is included in mail_options , and the server supports it , `from_addr` and `to_addrs` may contain non-ASCII characters . `msg` may be a string containing characters in the ASCII range , or a byte string .", "question_id": 8534}
{"snippet": "typing.TypeVar", "intent": "Type variable.", "question_id": 11229}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}
{"snippet": "winreg.REG_LINK", "intent": "A Unicode symbolic link.", "question_id": 12179}
{"snippet": "curses.ascii.unctrl(c)", "intent": "Return a string representation of the ASCII character c. If `c` is printable , this string is the character itself .", "question_id": 1917}
{"snippet": "base_request_handler.handle()", "intent": "This function must do all the work required to service a request .", "question_id": 8785}
{"snippet": "unittest.TestSuite()", "intent": "This class represents an aggregation of individual test cases and test suites .", "question_id": 11481}
{"snippet": "test_case.assertMultiLineEqual(first, second, msg=None)", "intent": "Test that the multiline string `first` is equal to the string `second` . With arguments `msg`.", "question_id": 11449}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "decimal.DivisionByZero", "intent": "Signals the division of a non-infinite number by zero.", "question_id": 2587}
{"snippet": "wsgi_request_handler.get_environ()", "intent": "Returns a dictionary containing the WSGI environment for a request .", "question_id": 12232}
{"snippet": "time.CLOCK_MONOTONIC", "intent": "Clock that cannot be set and represents monotonic time since some unspecified starting point.", "question_id": 10465}
{"snippet": "os.pread(fd, n, offset)", "intent": "Read at most `n` bytes from file descriptor `fd` at a position of `offset` , leaving the file offset unchanged .", "question_id": 6783}
{"snippet": "ctypes.c_byte", "intent": "Represents the C signed char datatype, and interprets the value as small integer.", "question_id": 1855}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "@importlib.util.module_for_loader", "intent": "A decorator for importlib.abc.Loader.load_module() to handle selecting the proper module object to load with.", "question_id": 4931}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}
{"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931}
{"snippet": "auto.args", "intent": "The tuple of arguments given to the exception constructor.", "question_id": 3629}
{"snippet": "email.header.Header(charset=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `charset` serves two purposes : it has the same meaning as the charset argument to the append ( ) method .", "question_id": 3118}
{"snippet": "errno.EUNATCH", "intent": "Protocol driver not attached", "question_id": 3554}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196}
{"snippet": "subprocess.PIPE", "intent": "Special value that can be used as the stdin, stdout or stderr argument to Popen and indicates that a pipe to the standard stream should be opened.", "question_id": 9584}
{"snippet": "os.popen(cmd, mode='r', buffering=-1)", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' . The `buffering` argument has the same meaning as the corresponding argument to the built-in open ( ) function .", "question_id": 7044}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "turtle.numinput(title, prompt, default=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11085}
{"snippet": "hash.update(data)", "intent": "Update the hash object with the bytes-like object . With arguments `data`.", "question_id": 4304}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "UUID.fields", "intent": "A tuple of the six integer fields of the UUID, which are also available as six individual attributes and two derived attributes:", "question_id": 11949}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api)", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10267}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "doctest.DONT_ACCEPT_TRUE_FOR_1", "intent": "By default, if an expected output block contains just 1, an actual output block containing just 1 or just True is considered to be a match, and similarly for 0 versus False.", "question_id": 2752}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "semaphore.acquire(blocking=True, timeout=None)", "intent": "Acquire a semaphore . When invoked with `blocking` set to false , do not block . When invoked with a `timeout` other than None , it will block for at most timeout seconds .", "question_id": 10402}
{"snippet": "test_loader.suiteClass", "intent": "Callable object that constructs a test suite from a list of tests.", "question_id": 11505}
{"snippet": "raw_io_base.readall()", "intent": "Read and return all the bytes from the stream until EOF , using multiple calls to the stream if necessary .", "question_id": 5086}
{"snippet": "dircmp.left_list", "intent": "Files and subdirectories in a, filtered by hide and ignore.", "question_id": 3769}
{"snippet": "secrets.token_urlsafe()", "intent": "Return a random URL-safe text string , containing `nbytes` random bytes .", "question_id": 8143}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670}
{"snippet": "tkinter.tix.TList", "intent": "The TList widget can be used to display data in a tabular format.", "question_id": 10573}
{"snippet": "memory_bio.write_eof()", "intent": "Write an EOF marker to the memory BIO .", "question_id": 9059}
{"snippet": "asyncio.BaseProtocol", "intent": "Base protocol with methods that all protocols share.", "question_id": 426}
{"snippet": "opname", "intent": "human readable name for operation", "question_id": 2735}
{"snippet": "aifc.getcomptype()", "intent": "Return a bytes array of length 4 describing the type of compression used in the audio file .", "question_id": 15}
{"snippet": "sys.exit()", "intent": "Exit from Python .", "question_id": 9789}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659}
{"snippet": "stat.UF_HIDDEN", "intent": "The file should not be displayed in a GUI (Mac OS X 10.5+).", "question_id": 9119}
{"snippet": "dispatcher.handle_connect()", "intent": "Called when the active opener \u2019 s socket actually makes a connection .", "question_id": 656}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "typing.Tuple", "intent": "Tuple type; Tuple[X, Y] is the type of a tuple of two items with the first item of type X and the second of type Y.", "question_id": 11335}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "XMLReader.getFeature(featurename)", "intent": "Return the current setting for feature `featurename` .", "question_id": 12623}
{"snippet": "env_builder.setup_python(context)", "intent": "Creates a copy or symlink to the Python executable in the environment . With arguments `context`.", "question_id": 11985}
{"snippet": "json.JSONDecoder()", "intent": "Simple JSON decoder .", "question_id": 5310}
{"snippet": "ssl.OP_NO_COMPRESSION", "intent": "Disable compression on the SSL channel.", "question_id": 8942}
{"snippet": "str.swapcase()", "intent": "Return a copy of the string with uppercase characters converted to lowercase and vice versa .", "question_id": 9252}
{"snippet": "Path.iterdir()", "intent": "When the path points to a directory , yield path objects of the directory contents :", "question_id": 7281}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}
{"snippet": "sys.setcheckinterval(interval)", "intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "question_id": 9834}
{"snippet": "imghdr.tests", "intent": "A list of functions performing the individual tests.", "question_id": 4759}
{"snippet": "context.rotate(x, y)", "intent": "Returns a rotated copy of `x` , `y` times .", "question_id": 2567}
{"snippet": "errno.EMLINK", "intent": "Too many links", "question_id": 3536}
{"snippet": "compileall.compile_dir(dir, legacy=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1415}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "mime_types.types_map_inv", "intent": "Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types.", "question_id": 5963}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "os.waitpid(pid, options)", "intent": "The details of this function differ on Unix and Windows . On Unix : Wait for completion of a child process given by process id `pid` , and return a tuple containing its process id and exit status indication ( encoded as for wait ( ) ) . The semantics of the call are affected by the value of the integer `options` , which should be 0 for normal operation .", "question_id": 7082}
{"snippet": "formatter.vformat(format_string, args, kwargs)", "intent": "This function does the actual work of formatting . With arguments `format_string`, `args`, `kwargs`.", "question_id": 9518}
{"snippet": "widget.state()", "intent": "Modify or inquire widget state .", "question_id": 10595}
{"snippet": "breakpoint.bpprint()", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 766}
{"snippet": "FileExistsError", "intent": "Raised when trying to create a file or directory which already exists.", "question_id": 3693}
{"snippet": "task.print_stack(file=None)", "intent": "Print the stack or traceback for this Task . The `file` argument is an I/O stream to which the output is written ; by default output is written to sys.stderr .", "question_id": 638}
{"snippet": "cursor.fetchone()", "intent": "Fetches the next row of a query result set , returning a single sequence , or None when no more data is available .", "question_id": 8844}
{"snippet": "pickle.Pickler(file)", "intent": "This takes a binary `file` for writing a pickle data stream .", "question_id": 7390}
{"snippet": "SSLContext.wrap_socket(sock)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) .", "question_id": 9022}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "pool.imap(func, iterable)", "intent": "A lazier version of map ( ) . With arguments `func`, `iterable`.", "question_id": 6347}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}
{"snippet": "SubprocessTransport.terminate()", "intent": "Stop the subprocess .", "question_id": 424}
{"snippet": "base_header.defects", "intent": "A tuple of HeaderDefect instances reporting any RFC compliance problems found during parsing.", "question_id": 3152}
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309}
{"snippet": "xml.etree.ElementTree.XMLID(text)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data .", "question_id": 12471}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962}
{"snippet": "os.geteuid()", "intent": "Return the current process \u2019 s effective user id .", "question_id": 6675}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "termios.tcflow(fd, action)", "intent": "Suspend or resume input or output on file descriptor `fd` . The `action` argument can be TCOOFF to suspend output , TCOON to restart output , TCIOFF to suspend input , or TCION to restart input .", "question_id": 10107}
{"snippet": "env_builder.setup_scripts(context)", "intent": "Installs activation scripts appropriate to the platform into the virtual environment . With arguments `context`.", "question_id": 11986}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "Node.hasAttributes()", "intent": "Returns true if the node has any attributes .", "question_id": 12327}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800}
{"snippet": "property(fdel=None)", "intent": "Return a property attribute . `fdel` is a function for deleting an attribute value .", "question_id": 4088}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2805}
{"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}
{"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326}
{"snippet": "wave.open(file, mode=None)", "intent": "If `file` is a string , open the file by that name , otherwise treat it as a file-like object . `mode` can be :", "question_id": 12047}
{"snippet": "SyntaxError", "intent": "Raised when the parser encounters a syntax error.", "question_id": 3665}
{"snippet": "IMAP4.getquotaroot(mailbox)", "intent": "Get the list of quota roots for the named `mailbox` .", "question_id": 4705}
{"snippet": "str.zfill(width)", "intent": "Return a copy of the string left filled with ASCII ' 0 ' digits to make a string of length `width` .", "question_id": 9256}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "ctypes.c_ubyte", "intent": "Represents the C unsigned char datatype, it interprets the value as small integer.", "question_id": 1871}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348}
{"snippet": "queue_listener.emit(record)", "intent": "Do whatever it takes to actually log the specified logging `record` .", "question_id": 5609}
{"snippet": "fileinput.hook_encoded(encoding)", "intent": "Returns a hook which opens each file with open ( ) , using the given `encoding` and `errors` to read the file .", "question_id": 3811}
{"snippet": "cmath.nan", "intent": "A floating-point \u201cnot a number\u201d (NaN) value.", "question_id": 1125}
{"snippet": "syslog.setlogmask(maskpri)", "intent": "Set the priority mask to `maskpri` and return the previous mask value .", "question_id": 9884}
{"snippet": "AU_write.setnframes(n)", "intent": "Set the number of frames . With arguments `n`.", "question_id": 9724}
{"snippet": "cgi.parse(fp=None)", "intent": "Parse a query in the environment or from a file ( the file defaults to sys.stdin ) . With arguments `fp`.", "question_id": 1030}
{"snippet": "operator.iadd(a, b)", "intent": "`a` = iadd ( a , `b` ) is equivalent to a += b .", "question_id": 6588}
{"snippet": "xml.dom.NamespaceErr", "intent": "If an attempt is made to change any object in a way that is not permitted with regard to the Namespaces in XML recommendation, this exception is raised.", "question_id": 12389}
{"snippet": "bdb.checkfuncname(b, frame)", "intent": "Check whether we should break here , depending on the way the breakpoint `b` was set . If it was set via line number , it checks if b.line is the same as the one in the `frame` also passed as argument .", "question_id": 817}
{"snippet": "test_result.tb_locals", "intent": "If set to true then local variables will be shown in tracebacks.", "question_id": 11517}
{"snippet": "xml.dom.XML_NAMESPACE", "intent": "The namespace URI associated with the reserved prefix xml, as defined by Namespaces in XML (section 4).", "question_id": 12308}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "kevent.fflags", "intent": "Filter specific flags.", "question_id": 8206}
{"snippet": "simple_http_request_handler.do_HEAD()", "intent": "This method serves the 'HEAD ' request type : it sends the headers it would send for the equivalent GET request .", "question_id": 4664}
{"snippet": "turtle.shape()", "intent": "Set turtle shape to shape with given `name` or , if name is not given , return name of current shape .", "question_id": 10982}
{"snippet": "os.path.commonpath(paths)", "intent": "Return the longest common sub-path of each pathname in the sequence `paths` .", "question_id": 7144}
{"snippet": "bdb.set_next(frame)", "intent": "Stop on the next line in or below the given `frame` .", "question_id": 786}
{"snippet": "context.to_sci_string(x)", "intent": "Converts a number to a string using scientific notation . With arguments `x`.", "question_id": 2575}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "test.support.run_doctest(module)", "intent": "Run doctest.testmod ( ) on the given `module` .", "question_id": 10158}
{"snippet": "xmlrpc.client.dumps(params, methodname=None, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` . With arguments `methodname`.", "question_id": 12705}
{"snippet": "tkinter.tix.Select", "intent": "The Select widget is a container of button subwidgets.", "question_id": 10561}
{"snippet": "json.dumps(obj, **kw, separators=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `separators`.", "question_id": 5287}
{"snippet": "compileall.compile_file(fullname, legacy=False)", "intent": "Compile the file with path `fullname` . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1424}
{"snippet": "Pattern.match(string)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object .", "question_id": 7975}
{"snippet": "os.major(device)", "intent": "Extract the `device` major number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6882}
{"snippet": "connection.iterdump()", "intent": "Returns an iterator to dump the database in an SQL text format .", "question_id": 8828}
{"snippet": "os.ctermid()", "intent": "Return the filename corresponding to the controlling terminal of the process .", "question_id": 6657}
{"snippet": "curses.resize_term(nlines, ncols)", "intent": "Backend function used by resizeterm ( ) , performing most of the work ; when resizing the windows , resize_term ( ) blank-fills the areas that are extended . With arguments `nlines`, `ncols`.", "question_id": 1975}
{"snippet": "msvcrt.getwch()", "intent": "Wide char variant of getch ( ) , returning a Unicode value .", "question_id": 6157}
{"snippet": "multiprocessing.Semaphore()", "intent": "A semaphore object : a close analog of threading.Semaphore .", "question_id": 6264}
{"snippet": "executor.map(func, *iterables)", "intent": "Similar to map ( `func` , `*iterables` ) except :", "question_id": 1441}
{"snippet": "windows_proactor_event_loop_policy.attach_loop(loop)", "intent": "Attach the watcher to an event `loop` .", "question_id": 386}
{"snippet": "ipaddress.get_mixed_type_key(obj)", "intent": "Return a key suitable for sorting between networks and addresses . `obj` is either a network or address object .", "question_id": 5236}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "HTMLParser.feed(data)", "intent": "Feed some text to the parser . It is processed insofar as it consists of complete elements ; incomplete `data` is buffered until more data is fed or close ( ) is called .", "question_id": 4351}
{"snippet": "queue_listener.handle(record)", "intent": "Conditionally emits the specified logging `record` , depending on filters which may have been added to the handler .", "question_id": 5606}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679}
{"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}
{"snippet": "turtle.degrees(fullcircle=360.0)", "intent": "Set angle measurement units , i.e . With arguments `fullcircle`.", "question_id": 10946}
{"snippet": "tkinter.ttk.Style", "intent": "This class is used to manipulate the style database.", "question_id": 10672}
{"snippet": "DTDHandler.notationDecl(name, publicId, systemId)", "intent": "Handle a notation declaration event . With arguments `name`, `publicId`, `systemId`.", "question_id": 12583}
{"snippet": "test.support.is_jython", "intent": "True if the running interpreter is Jython.", "question_id": 10111}
{"snippet": "HTTPConnection.blocksize", "intent": "Buffer size in bytes for sending a file-like message body.", "question_id": 4443}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "errno.EFBIG", "intent": "File too large", "question_id": 3532}
{"snippet": "multiprocessing.set_executable()", "intent": "Sets the path of the Python interpreter to use when starting a child process .", "question_id": 6228}
{"snippet": "set | other | ...", "intent": "Return a new set with elements from the set and all others.", "question_id": 9446}
{"snippet": "winsound.SND_MEMORY", "intent": "The sound parameter to PlaySound() is a memory image of a WAV file, as a bytes-like object.", "question_id": 12199}
{"snippet": "context.normalize(x)", "intent": "Reduces `x` to its simplest form .", "question_id": 2558}
{"snippet": "doctest.DocTestSuite(globs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "question_id": 2808}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}
{"snippet": "decimal.DivisionByZero", "intent": "Signals the division of a non-infinite number by zero.", "question_id": 2587}
{"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513}
{"snippet": "curses.resetty()", "intent": "Restore the state of the terminal modes to what it was at the last call to savetty ( ) .", "question_id": 1974}
{"snippet": "msilib.CAB(name)", "intent": "The class CAB represents a CAB file . `name` is the name of the CAB file in the MSI file .", "question_id": 6088}
{"snippet": "py_compile.PycInvalidationMode", "intent": "A enumeration of possible methods the interpreter can use to determine whether a bytecode file is up to date with a source file.", "question_id": 7831}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371}
{"snippet": "io.RawIOBase", "intent": "Base class for raw binary I/O.", "question_id": 5083}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "PurePath.name", "intent": "A string representing the final path component, excluding the drive and root, if any:", "question_id": 7249}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING", "intent": "A behavioral change was requested after parsing started that can only be changed before parsing has started.", "question_id": 7809}
{"snippet": "Popen.wait()", "intent": "Wait for child process to terminate .", "question_id": 9610}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225}
{"snippet": "email_policy.header_factory", "intent": "A callable that takes two arguments, name and value, where name is a header field name and value is an unfolded header field value, and returns a string subclass that represents that header.", "question_id": 3431}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "http.cookiejar.LWPCookieJar(filename)", "intent": "A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library \u2019 s Set-Cookie3 file format . With arguments `filename`.", "question_id": 4528}
{"snippet": "resource_reader.resource_path(resource)", "intent": "Returns the file system path to the `resource` .", "question_id": 4820}
{"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "webbrowser.open(url)", "intent": "Display `url` using the default browser .", "question_id": 12102}
{"snippet": "ftplib.FTP_TLS(host='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `host`.", "question_id": 3889}
{"snippet": "urllib.parse.urljoin(base, url, allow_fragments=True)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) . The `allow_fragments` argument has the same meaning and default as for urlparse ( ) .", "question_id": 11696}
{"snippet": "asyncio.TimeoutError", "intent": "The operation has exceeded the given deadline.", "question_id": 345}
{"snippet": "@typing.type_check_only", "intent": "Decorator to mark a class or function to be unavailable at runtime.", "question_id": 11330}
{"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515}
{"snippet": "stats.dump_stats(filename)", "intent": "Save the data loaded into the Stats object to a file named `filename` .", "question_id": 7692}
{"snippet": "test.support.check_free_after_iterating(test, iter, cls)", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.", "question_id": 10271}
{"snippet": "NNTP.help()", "intent": "Send a HELP command .", "question_id": 6474}
{"snippet": "stat.S_IRWXU", "intent": "Mask for file owner permissions.", "question_id": 9097}
{"snippet": "SimpleXMLRPCServer.register_function()", "intent": "Register a `function` that can respond to XML-RPC requests .", "question_id": 12731}
{"snippet": "inspect.getinnerframes(traceback, context=1)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "question_id": 5028}
{"snippet": "os.path.normcase(path)", "intent": "Normalize the case of a pathname . On other operating systems , return the `path` unchanged .", "question_id": 7161}
{"snippet": "resource.getpagesize()", "intent": "Returns the number of bytes in a system page .", "question_id": 8096}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "msvcrt.putwch(unicode_char)", "intent": "Wide char variant of putch ( ) , accepting a Unicode value . With arguments `unicode_char`.", "question_id": 6161}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "errno.ENOMEM", "intent": "Out of memory", "question_id": 3517}
{"snippet": "NNTP.post(data)", "intent": "Post an article using the POST command . The `data` argument is either a file object opened for binary reading , or any iterable of bytes objects ( representing raw lines of the article to be posted ) .", "question_id": 6492}
{"snippet": "curses.ascii.isgraph(c)", "intent": "Checks for ASCII any printable character except space . With arguments `c`.", "question_id": 1905}
{"snippet": "Telnet.expect(list)", "intent": "Read until one from a `list` of a regular expressions matches .", "question_id": 10030}
{"snippet": "asyncio.Protocol(BaseProtocol)", "intent": "The base class for implementing streaming protocols ( TCP , Unix sockets , etc ) . With arguments `BaseProtocol`.", "question_id": 427}
{"snippet": "errno.EHOSTUNREACH", "intent": "No route to host", "question_id": 3618}
{"snippet": "config_parser.getfloat(section, option)", "intent": "A convenience method which coerces the `option` in the specified `section` to a floating point number .", "question_id": 1540}
{"snippet": "stringprep.in_table_d1(code)", "intent": "Determine whether `code` is in tableD.1 ( Characters with bidirectional property \u201c R \u201d or \u201c AL \u201d ) .", "question_id": 9548}
{"snippet": "struct.pack_into(format, buffer, offset, v1, v2)", "intent": "Pack the values `v1` , `v2` , \u2026 according to the `format` string format and write the packed bytes into the writable `buffer` buffer starting at position `offset` .", "question_id": 9552}
{"snippet": "stringprep.in_table_c11_c12(code)", "intent": "Determine whether `code` is in tableC.1 ( Space characters , union of C.1.1 and C.1.2 ) .", "question_id": 9537}
{"snippet": "ctypes.create_unicode_buffer(init_or_size)", "intent": "This function creates a mutable unicode character buffer . `init_or_size` must be an integer which specifies the `size` of the array , or a string which will be used to initialize the array items .", "question_id": 1815}
{"snippet": "html_diff.make_table(fromlines, tolines)", "intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML table showing line by line differences with inter-line and intra-line changes highlighted .", "question_id": 2618}
{"snippet": "dataclasses.field(default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2169}
{"snippet": "io.RawIOBase", "intent": "Base class for raw binary I/O.", "question_id": 5083}
{"snippet": "doctest.Example(source, want, options=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `options`.", "question_id": 2828}
{"snippet": "cgitb.enable(logdir=None, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1068}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138}
{"snippet": "DefaultCookiePolicy.DomainLiberal", "intent": "Equivalent to 0 (ie.", "question_id": 4555}
{"snippet": "xml.sax.handler.all_features", "intent": "List of all features.", "question_id": 12568}
{"snippet": "csvreader.__next__()", "intent": "Return the next row of the reader \u2019 s iterable object as a list ( if the object was returned from reader ( ) ) or a dict ( if it is a DictReader instance ) , parsed according to the current dialect .", "question_id": 1731}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "resource.RLIMIT_NICE", "intent": "The ceiling for the process\u2019s nice level (calculated as 20 - rlim_cur).", "question_id": 8088}
{"snippet": "test.support.HAVE_DOCSTRINGS", "intent": "Check for presence of docstrings.", "question_id": 10133}
{"snippet": "urllib.parse.quote_plus(string, safe='')", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` .", "question_id": 11714}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "os.popen(cmd, mode='r', buffering=-1)", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' . The `buffering` argument has the same meaning as the corresponding argument to the built-in open ( ) function .", "question_id": 7044}
{"snippet": "resource.RLIMIT_NPTS", "intent": "The maximum number of pseudo-terminals created by this user id.", "question_id": 8094}
{"snippet": "getpass.getuser()", "intent": "Return the \u201c login name \u201d of the user .", "question_id": 4209}
{"snippet": "ssl.CertificateError", "intent": "An alias for SSLCertVerificationError.", "question_id": 8884}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "str.splitlines(keepends)", "intent": "Return a list of the lines in the string , breaking at line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9245}
{"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946}
{"snippet": "Path.is_dir()", "intent": "Return True if the path points to a directory ( or a symbolic link pointing to a directory ) , False if it points to another kind of file .", "question_id": 7273}
{"snippet": "turtle.shapetransform(t11=None, t22=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 . The determinant t11 * `t22` - t12 * t21 must not be zero , otherwise an error is raised .", "question_id": 11015}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020}
{"snippet": "zipfile.ZipFile(file, mode='r', compresslevel=None)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "question_id": 12799}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "selectors.DefaultSelector", "intent": "The default selector class, using the most efficient implementation available on the current platform.", "question_id": 8225}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513}
{"snippet": "__debug__", "intent": "This constant is true if Python was not started with an -O option.", "question_id": 1607}
{"snippet": "xmlparser.ParseFile(file)", "intent": "Parse XML data reading from the object `file` .", "question_id": 7734}
{"snippet": "ctypes.pythonapi", "intent": "An instance of PyDLL that exposes Python C API functions as attributes.", "question_id": 1785}
{"snippet": "subprocess.ABOVE_NORMAL_PRIORITY_CLASS", "intent": "A Popen creationflags parameter to specify that a new process will have an above average priority.", "question_id": 9649}
{"snippet": "unittest.mock.call(*args, **kwargs)", "intent": "call ( ) is a helper object for making simpler assertions , for comparing with call_args , call_args_list , mock_calls and method_calls . With arguments `*args`, `**kwargs`.", "question_id": 11647}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "shlex.shlex(punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8277}
{"snippet": "cgi.print_environ_usage()", "intent": "Print a list of useful ( used by CGI ) environment variables in HTML .", "question_id": 1056}
{"snippet": "finder.find_module(fullname)", "intent": "An abstract method for finding a loader for the specified module . With arguments `fullname`.", "question_id": 4800}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "ast.NodeVisitor", "intent": "A node visitor base class that walks the abstract syntax tree and calls a visitor function for every node found.", "question_id": 159}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243}
{"snippet": "os.terminal_size", "intent": "A subclass of tuple, holding (columns, lines) of the terminal window size.", "question_id": 6813}
{"snippet": "winsound.SND_ALIAS", "intent": "The sound parameter is a sound association name from the registry.", "question_id": 12197}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "sequence_matcher.get_grouped_opcodes()", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2685}
{"snippet": "module_finder.run_script(pathname)", "intent": "Analyze the contents of the `pathname` file , which must contain Python code .", "question_id": 6056}
{"snippet": "str.splitlines(keepends)", "intent": "Return a list of the lines in the string , breaking at line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9245}
{"snippet": "tkinter.tix.LabelFrame", "intent": "The LabelFrame widget packages a frame widget and a label into one mega widget.", "question_id": 10557}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "test_case.subTest(**params)", "intent": "Return a context manager which executes the enclosed code block as a subtest . With arguments `**params`.", "question_id": 11372}
{"snippet": "termios.tcflow(fd, action)", "intent": "Suspend or resume input or output on file descriptor `fd` . The `action` argument can be TCOOFF to suspend output , TCOON to restart output , TCIOFF to suspend input , or TCION to restart input .", "question_id": 10107}
{"snippet": "profile.runcall(func, *args, **kwargs)", "intent": "Profile `func` ( `*args` , `**kwargs` )", "question_id": 7687}
{"snippet": "mime_types.readfp(fp)", "intent": "Load MIME type information from an open file `fp` .", "question_id": 5972}
{"snippet": "UUID.bytes", "intent": "The UUID as a 16-byte string (containing the six integer fields in big-endian byte order).", "question_id": 11947}
{"snippet": "sqlite3.register_converter(typename, callable)", "intent": "Registers a `callable` to convert a bytestring from the database into a custom Python type . The callable will be invoked for all database values that are of the type `typename` .", "question_id": 8799}
{"snippet": "buffered_io_base.readinto1(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , using at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "question_id": 5097}
{"snippet": "unittest.TestCase(methodName='runTest')", "intent": "Instances of the TestCase class represent the logical test units in the unittest universe . Each instance of TestCase will run a single base method : the method named `methodName` .", "question_id": 11364}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "window.getbegyx()", "intent": "Return a tuple ( y , x ) of co-ordinates of upper-left corner .", "question_id": 2049}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175}
{"snippet": "connection.commit()", "intent": "This method commits the current transaction .", "question_id": 8808}
{"snippet": "io.StringIO(initial_value='')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` .", "question_id": 5165}
{"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "time.clock_getres(clk_id)", "intent": "Return the resolution ( precision ) of the specified clock `clk_id` .", "question_id": 10433}
{"snippet": "errno.EACCES", "intent": "Permission denied", "question_id": 3518}
{"snippet": "style.theme_names()", "intent": "Returns a list of all known themes .", "question_id": 10691}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370}
{"snippet": "memoryview.contiguous", "intent": "A bool indicating whether the memory is contiguous.", "question_id": 9430}
{"snippet": "oss_audio_device.mode", "intent": "The I/O mode for the file, either \"r\", \"rw\", or \"w\".", "question_id": 7200}
{"snippet": "POP3.rset()", "intent": "Remove any deletion marks for the mailbox .", "question_id": 7613}
{"snippet": "aifc.tell()", "intent": "Return the current write position in the output file .", "question_id": 34}
{"snippet": "mh.close()", "intent": "MH instances do not keep any open files , so this method is equivalent to unlock ( ) .", "question_id": 5793}
{"snippet": "gzip.open(filename)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4272}
{"snippet": "SSLSocket.server_hostname", "intent": "Hostname of the server: str type, or None for server-side socket or if the hostname was not specified in the constructor.", "question_id": 8992}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "joinable_queue.poll()", "intent": "Return whether there is any data available to be read .", "question_id": 6235}
{"snippet": "heapq.nsmallest(n, iterable)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` .", "question_id": 4327}
{"snippet": "winreg.REG_EXPAND_SZ", "intent": "Null-terminated string containing references to environment variables (%PATH%).", "question_id": 12178}
{"snippet": "str.islower()", "intent": "Return true if all cased characters 4 in the string are lowercase and there is at least one cased character , false otherwise .", "question_id": 9208}
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106}
{"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}
{"snippet": "unicodedata.lookup(name)", "intent": "Look up character by `name` .", "question_id": 11340}
{"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}
{"snippet": "numbers.Integral", "intent": "Subtypes Rational and adds a conversion to int.", "question_id": 6512}
{"snippet": "sys.getsizeof(object)", "intent": "Return the size of an `object` in bytes .", "question_id": 9803}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "connection.iterdump()", "intent": "Returns an iterator to dump the database in an SQL text format .", "question_id": 8828}
{"snippet": "curses.has_il()", "intent": "Return True if the terminal has insert- and delete-line capabilities , or can simulate them using scrolling regions .", "question_id": 1942}
{"snippet": "stat_result.st_mtime", "intent": "Time of most recent content modification expressed in seconds.", "question_id": 6930}
{"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "FTP.retrlines(cmd, callback=None)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) . The `callback` function is called for each line with a string argument containing the line with the trailing CRLF stripped .", "question_id": 3931}
{"snippet": "socketserver.UDPServer(server_address, RequestHandlerClass)", "intent": "This uses datagrams , which are discrete packets of information that may arrive out of order or be lost while in transit . With arguments `server_address`, `RequestHandlerClass`.", "question_id": 8747}
{"snippet": "pickle.Pickler(file)", "intent": "This takes a binary `file` for writing a pickle data stream .", "question_id": 7390}
{"snippet": "msilib.Binary(filename)", "intent": "Represents entries in the Binary table ; inserting such an object using add_data ( ) reads the file named `filename` into the table .", "question_id": 6064}
{"snippet": "terminal_size.lines", "intent": "Height of the terminal window in characters.", "question_id": 6815}
{"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_NONE", "intent": "No modifier is given, so it can appear exactly once, as for A.", "question_id": 7783}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626}
{"snippet": "aifc.rewind()", "intent": "Rewind the read pointer .", "question_id": 21}
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "platform.python_revision()", "intent": "Returns a string identifying the Python implementation SCM revision .", "question_id": 7477}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "wsgiref.handlers.IISCGIHandler", "intent": "A specialized alternative to CGIHandler, for use when deploying on Microsoft\u2019s IIS web server, without having set the config allowPathInfo option (IIS>=7) or metabase allowPathInfoForScriptMappings (IIS<7).", "question_id": 12237}
{"snippet": "queue_listener.critical(msg, *args, **kwargs)", "intent": "Logs a message with level CRITICAL on this logger . With arguments `msg`, `*args`, `**kwargs`.", "question_id": 5574}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "os.times()", "intent": "Returns the current global process times .", "question_id": 7069}
{"snippet": "Node.toxml()", "intent": "Return a string or byte string containing the XML represented by the DOM node .", "question_id": 12411}
{"snippet": "fileinput.lineno()", "intent": "Return the cumulative line number of the line that has just been read .", "question_id": 3794}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617}
{"snippet": "controller.open(url, new=0, autoraise=True)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible . With arguments `autoraise`.", "question_id": 12117}
{"snippet": "subprocess.Popen(args, cwd=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `cwd` is not None , the function changes the working directory to cwd before executing the child .", "question_id": 9608}
{"snippet": "Repr.maxdict", "intent": "Limits on the number of entries represented for the named object type.", "question_id": 8056}
{"snippet": "email.headerregistry.ParameterizedMIMEHeader", "intent": "MIME headers all start with the prefix \u2018Content-\u2018.", "question_id": 3167}
{"snippet": "unittest.mock.Mock(**kwargs, unsafe=False)", "intent": "Create a new Mock object . With arguments `**kwargs`, `unsafe`.", "question_id": 11567}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "hashlib.algorithms_available", "intent": "A set containing the names of the hash algorithms that are available in the running Python interpreter.", "question_id": 4300}
{"snippet": "@abc.abstractstaticmethod", "intent": "A subclass of the built-in staticmethod(), indicating an abstract staticmethod.", "question_id": 6}
{"snippet": "asyncio.Task(coro, loop=None)", "intent": "A Future-like object that runs a Python coroutine . Event loops use cooperative scheduling : an event `loop` runs one Task at a time . With arguments `coro`.", "question_id": 625}
{"snippet": "SSLContext.set_ecdh_curve(curve_name)", "intent": "Set the curve name for Elliptic Curve-based Diffie-Hellman ( ECDH ) key exchange . The `curve_name` parameter should be a string describing a well-known elliptic curve , for example prime256v1 for a widely supported curve .", "question_id": 9021}
{"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "memoryview.c_contiguous", "intent": "A bool indicating whether the memory is C-contiguous.", "question_id": 9428}
{"snippet": "http_handler.mapLogRecord(record)", "intent": "Provides a dictionary , based on `record` , which is to be URL-encoded and sent to the web server .", "question_id": 5551}
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763}
{"snippet": "decimal.is_infinite()", "intent": "Return True if the argument is either positive or negative infinity and False otherwise .", "question_id": 2419}
{"snippet": "asyncio.SafeChildWatcher", "intent": "This implementation avoids disrupting other code spawning processes by polling every process explicitly on a SIGCHLD signal.", "question_id": 388}
{"snippet": "BaseTransport.is_closing()", "intent": "Return True if the transport is closing or is closed .", "question_id": 397}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "bdb.set_step()", "intent": "Stop after one line of code .", "question_id": 785}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951}
{"snippet": "ssl.OP_NO_COMPRESSION", "intent": "Disable compression on the SSL channel.", "question_id": 8942}
{"snippet": "io.DEFAULT_BUFFER_SIZE", "intent": "An int containing the default buffer size used by the module\u2019s buffered I/O classes.", "question_id": 5050}
{"snippet": "json.JSONDecoder(parse_constant=None)", "intent": "Simple JSON decoder . `parse_constant` , if specified , will be called with one of the following strings : '-Infinity ' , 'Infinity ' , 'NaN ' .", "question_id": 5314}
{"snippet": "class.mro()", "intent": "This method can be overridden by a metaclass to customize the method resolution order for its instances .", "question_id": 9505}
{"snippet": "json.JSONDecoder()", "intent": "Simple JSON decoder .", "question_id": 5310}
{"snippet": "multiprocessing.Pipe()", "intent": "Returns a pair ( conn1 , conn2 ) of Connection objects representing the ends of a pipe .", "question_id": 6194}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_SYNTAX", "intent": "Some unspecified syntax error was encountered.", "question_id": 7801}
{"snippet": "doc_test.examples", "intent": "A list of Example objects encoding the individual interactive Python examples that should be run by this test.", "question_id": 2818}
{"snippet": "cmath.inf", "intent": "Floating-point positive infinity.", "question_id": 1123}
{"snippet": "Node.toprettyxml()", "intent": "Return a pretty-printed version of the document .", "question_id": 12413}
{"snippet": "xml.etree.ElementTree.ElementTree()", "intent": "ElementTree wrapper class .", "question_id": 12507}
{"snippet": "tracemalloc.get_tracemalloc_memory()", "intent": "Get the memory usage in bytes of the tracemalloc module used to store traces of memory blocks .", "question_id": 10845}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "context.compare_signal(x, y)", "intent": "Compares the values of the two operands numerically . With arguments `x`, `y`.", "question_id": 2521}
{"snippet": "patch.multiple(target, **kwargs, create=False)", "intent": "Perform multiple patches in a single call . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11634}
{"snippet": "SSLSocket.do_handshake()", "intent": "Perform the SSL setup handshake .", "question_id": 8976}
{"snippet": "dict.keys()", "intent": "Return a new view of the dictionary \u2019 s keys .", "question_id": 9485}
{"snippet": "locale.LC_NUMERIC", "intent": "Locale category for formatting numbers.", "question_id": 5409}
{"snippet": "html_calendar.formatyear(theyear, width=3)", "intent": "Return a year \u2019 s calendar as an HTML table . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 961}
{"snippet": "doc_test_runner.report_unexpected_exception(out, test, example, exc_info)", "intent": "Report that the given `example` raised an unexpected exception . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `exc_info` is a tuple containing information about the unexpected exception ( as returned by sys.exc_info ( ) ) .", "question_id": 2872}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758}
{"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617}
{"snippet": "curses.has_colors()", "intent": "Return True if the terminal can display colors ; otherwise , return False .", "question_id": 1940}
{"snippet": "html_diff.__init__(linejunk=None)", "intent": "Initializes instance of HtmlDiff . `linejunk` and `charjunk` are optional keyword arguments passed into ndiff ( ) ( used by HtmlDiff to generate the side by side HTML differences ) .", "question_id": 2601}
{"snippet": "connection.isolation_level", "intent": "Get or set the current default isolation level.", "question_id": 8804}
{"snippet": "tkinter.ttk.Style", "intent": "This class is used to manipulate the style database.", "question_id": 10672}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "winreg.HKEY_CLASSES_ROOT", "intent": "Registry entries subordinate to this key define types (or classes) of documents and the properties associated with those types.", "question_id": 12155}
{"snippet": "ctypes.PYFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the Python calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1800}
{"snippet": "_c_data._b_base_", "intent": "Sometimes ctypes data instances do not own the memory block they contain, instead they share part of the memory block of a base object.", "question_id": 1850}
{"snippet": "scheduler.enter(delay, priority, action)", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`.", "question_id": 8122}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "async_exit_stack.aclose()", "intent": "Similar to close ( ) but properly handles awaitables .", "question_id": 1636}
{"snippet": "Pattern.findall(string, pos, endpos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7981}
{"snippet": "errno.ELIBMAX", "intent": "Attempting to link in too many shared libraries", "question_id": 3587}
{"snippet": "window.border()", "intent": "Draw a border around the edges of the window .", "question_id": 2027}
{"snippet": "random.lognormvariate(mu, sigma)", "intent": "Log normal distribution . If you take the natural logarithm of this distribution , you \u2019 ll get a normal distribution with mean `mu` and standard deviation `sigma` .", "question_id": 7913}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415}
{"snippet": "coverage_results.write_results(show_missing=True)", "intent": "Write coverage results . Set `show_missing` to show lines that had no hits .", "question_id": 10726}
{"snippet": "decimal.ROUND_UP", "intent": "Round away from zero.", "question_id": 2583}
{"snippet": "winreg.KEY_ENUMERATE_SUB_KEYS", "intent": "Required to enumerate the subkeys of a registry key.", "question_id": 12169}
{"snippet": "turtle.title(titlestring)", "intent": "Set title of turtle window to `titlestring` .", "question_id": 11157}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "str.islower()", "intent": "Return true if all cased characters 4 in the string are lowercase and there is at least one cased character , false otherwise .", "question_id": 9208}
{"snippet": "@typing.overload", "intent": "The @overload decorator allows describing functions and methods that support multiple different combinations of argument types.", "question_id": 11327}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711}
{"snippet": "urllib.request.FancyURLopener()", "intent": "FancyURLopener subclasses URLopener providing default handling for the following HTTP response codes : 301 , 302 , 303 , 307 and 401 .", "question_id": 11905}
{"snippet": "AU_read.getframerate()", "intent": "Returns sampling frequency .", "question_id": 9710}
{"snippet": "DAY_1 ... DAY_7", "intent": "Get the name of the n-th day of the week.", "question_id": 5359}
{"snippet": "Record.GetInteger(field)", "intent": "Return the value of `field` as an integer where possible .", "question_id": 6082}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "urllib.request.urlopen(url, cafile=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "question_id": 11754}
{"snippet": "Cmd.ruler", "intent": "The character used to draw separator lines under the help-message headers.", "question_id": 1153}
{"snippet": "itertools.permutations(iterable)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5258}
{"snippet": "mimetypes.knownfiles", "intent": "List of type map file names commonly installed.", "question_id": 5951}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832}
{"snippet": "turtle.Screen", "intent": "Subclass of TurtleScreen, with four methods added.", "question_id": 11162}
{"snippet": "curses.has_il()", "intent": "Return True if the terminal has insert- and delete-line capabilities , or can simulate them using scrolling regions .", "question_id": 1942}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947}
{"snippet": "dis.haslocal", "intent": "Sequence of bytecodes that access a local variable.", "question_id": 2750}
{"snippet": "concurrent.futures.wait(fs, timeout=None)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `timeout` can be used to control the maximum number of seconds to wait before returning .", "question_id": 1481}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT", "intent": "Something other than whitespace occurred after the document element.", "question_id": 7794}
{"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796}
{"snippet": "trace.results()", "intent": "Return a CoverageResults object that contains the cumulative results of all previous calls to run , runctx and runfunc for the given Trace instance .", "question_id": 10722}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009}
{"snippet": "partial.args", "intent": "The leftmost positional arguments that will be prepended to the positional arguments provided to a partial object call.", "question_id": 4165}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "cgitb.handler()", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) .", "question_id": 1073}
{"snippet": "loop.create_unix_server(protocol_factory)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`.", "question_id": 242}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "os.read(fd, n)", "intent": "Read at most `n` bytes from file descriptor `fd` .", "question_id": 6793}
{"snippet": "email.parser.Parser()", "intent": "This class is parallel to BytesParser , but handles string input .", "question_id": 3384}
{"snippet": "codec_info.encode", "intent": "The stateless encoding and decoding functions.", "question_id": 1212}
{"snippet": "itertools.permutations(iterable)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5258}
{"snippet": "base_handler.os_environ", "intent": "The default environment variables to be included in every request\u2019s WSGI environment.", "question_id": 12256}
{"snippet": "site.USER_SITE", "intent": "Path to the user site-packages for the running Python.", "question_id": 8404}
{"snippet": "loop.call_later(delay, callback, *args)", "intent": "Schedule `callback` to be called after the given `delay` number of seconds ( can be either an int or a float ) . With arguments `*args`.", "question_id": 193}
{"snippet": "dis.hasname", "intent": "Sequence of bytecodes that access an attribute by name.", "question_id": 2747}
{"snippet": "concurrent.futures.thread.BrokenThreadPool", "intent": "Derived from BrokenExecutor, this exception class is raised when one of the workers of a ThreadPoolExecutor has failed initializing.", "question_id": 1489}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081}
{"snippet": "time.perf_counter()", "intent": "Return the value ( in fractional seconds ) of a performance counter , i.e .", "question_id": 10448}
{"snippet": "inspect.getargvalues(frame)", "intent": "Get information about arguments passed into a particular `frame` .", "question_id": 5012}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}
{"snippet": "cgihttp_request_handler.do_POST()", "intent": "This method serves the 'POST ' request type , only allowed for CGI scripts .", "question_id": 4668}
{"snippet": "Record.SetString(field, value)", "intent": "Set `field` to `value` through MsiRecordSetString ( ) .", "question_id": 6084}
{"snippet": "queue.get_nowait()", "intent": "Equivalent to get ( False ) .", "question_id": 6207}
{"snippet": "SMTP.docmd(cmd, args='')", "intent": "Send a command `cmd` to the server . The optional argument `args` is simply concatenated to the command , separated by a space .", "question_id": 8510}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779}
{"snippet": "ssl.match_hostname(cert, hostname)", "intent": "Verify that `cert` ( in decoded format as returned by SSLSocket.getpeercert ( ) ) matches the given `hostname` .", "question_id": 8890}
{"snippet": "TarFile.add(name)", "intent": "Add the file `name` to the archive .", "question_id": 9949}
{"snippet": "os.path.relpath(path)", "intent": "Return a relative filepath to `path` either from the current directory or from an optional `start` directory .", "question_id": 7164}
{"snippet": "oss_audio_device.setfmt(format)", "intent": "Try to set the current audio `format` to format\u2014see getfmts ( ) for a list .", "question_id": 7185}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271}
{"snippet": "tabnanny.NannyNag", "intent": "Raised by process_tokens() if detecting an ambiguous indent.", "question_id": 9888}
{"snippet": "cursor.arraysize", "intent": "Read/write attribute that controls the number of rows returned by fetchmany().", "question_id": 8851}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "window.inch(y, x)", "intent": "Return the character at the given position in the window . With arguments `y`, `x`.", "question_id": 2069}
{"snippet": "asyncio.gather(*aws, return_exceptions=False)", "intent": "Run awaitable objects in the aws sequence concurrently . If `return_exceptions` is False ( default ) , the first raised exception is immediately propagated to the task that awaits on gather ( ) . With arguments `*aws`.", "question_id": 601}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}
{"snippet": "tzinfo.dst(dt)", "intent": "Return the daylight saving time ( DST ) adjustment , as a timedelta object or None if DST information isn \u2019 t known . tz.utcoffset ( `dt` ) - tz.dst ( dt )", "question_id": 2354}
{"snippet": "Template.prepend(cmd, kind)", "intent": "Add a new action at the beginning . With arguments `cmd`, `kind`.", "question_id": 7432}
{"snippet": "config_parser.write(fileobject, space_around_delimiters=True)", "intent": "Write a representation of the configuration to the specified file object , which must be opened in text mode ( accepting strings ) . If `space_around_delimiters` is true , delimiters between keys and values are surrounded by spaces . With arguments `fileobject`.", "question_id": 1562}
{"snippet": "asyncio.subprocess.DEVNULL", "intent": "Special value that can be used as the stdin, stdout or stderr argument to process creation functions.", "question_id": 545}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372}
{"snippet": "marshal.dump(value, file)", "intent": "Write the `value` on the open `file` .", "question_id": 5879}
{"snippet": "charset.body_encode(string)", "intent": "Body-encode the `string` string .", "question_id": 2922}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "abc.ABC", "intent": "A helper class that has ABCMeta as its metaclass.", "question_id": 0}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "sync_manager.Value(typecode, value)", "intent": "Create an object with a writable `value` attribute and return a proxy for it . With arguments `typecode`.", "question_id": 6312}
{"snippet": "turtle.onkey(fun, key)", "intent": "Bind `fun` to key-release event of `key` .", "question_id": 11067}
{"snippet": "errno.EBADE", "intent": "Invalid exchange", "question_id": 3557}
{"snippet": "dbm.dumb.open(filename)", "intent": "Open a dumbdbm database and return a dumbdbm object . The `filename` argument is the basename of the database file ( without any specific extensions ) .", "question_id": 2388}
{"snippet": "test.support.patch(test_instance, object_to_patch, attr_name, new_value)", "intent": "Override object_to_patch.attr_name with `new_value` . Also add cleanup procedure to `test_instance` to restore `object_to_patch` for `attr_name` .", "question_id": 10269}
{"snippet": "memoryview(obj)", "intent": "Create a memoryview that references `obj` .", "question_id": 9411}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047}
{"snippet": "policy.header_source_parse(sourcelines)", "intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "question_id": 3423}
{"snippet": "datetime.now()", "intent": "Return the current local date and time .", "question_id": 2258}
{"snippet": "turtle.back(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10905}
{"snippet": "null_translations.add_fallback(fallback)", "intent": "Add `fallback` as the fallback object for the current translation object .", "question_id": 4250}
{"snippet": "joinable_queue.poll()", "intent": "Return whether there is any data available to be read .", "question_id": 6235}
{"snippet": "audioop.rms(fragment, width)", "intent": "Return the root-mean-square of the `fragment` , i.e . With arguments `width`.", "question_id": 704}
{"snippet": "text_calendar.formatmonth(theyear, themonth)", "intent": "Return a month \u2019 s calendar in a multi-line string . With arguments `theyear`, `themonth`.", "question_id": 928}
{"snippet": "decimal.compare_total(other)", "intent": "Compare two operands using their abstract representation rather than their numerical value . With arguments `other`.", "question_id": 2403}
{"snippet": "@test.support.anticipate_failure(condition)", "intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "question_id": 10208}
{"snippet": "pdb.Pdb(nosigint=False)", "intent": "Pdb is the debugger class . If you want Pdb not to touch the SIGINT handler , set `nosigint` to true .", "question_id": 7346}
{"snippet": "curses.panel.top_panel()", "intent": "Returns the top panel in the panel stack .", "question_id": 2143}
{"snippet": "binascii.b2a_uu(data)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char .", "question_id": 821}
{"snippet": "config_parser.sections()", "intent": "Return a list of the sections available ; the default section is not included in the list .", "question_id": 1507}
{"snippet": "Unpacker.unpack_bytes()", "intent": "Unpacks and returns a variable length byte stream , similarly to unpack_string ( ) .", "question_id": 12296}
{"snippet": "stat.S_IRWXG", "intent": "Mask for group permissions.", "question_id": 9101}
{"snippet": "connection.load_extension(path)", "intent": "This routine loads a SQLite extension from a shared library . With arguments `path`.", "question_id": 8824}
{"snippet": "urllib.request.build_opener()", "intent": "Return an OpenerDirector instance , which chains the handlers in the order given .", "question_id": 11764}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026}
{"snippet": "str.rjust(width)", "intent": "Return the string right justified in a string of length `width` .", "question_id": 9233}
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917}
{"snippet": "xmlrpc.client.dumps(params, encoding=None)", "intent": "Convert `params` into an XML-RPC request . If methodresponse is true , only a single value can be returned , meaning that params must be of length 1. `encoding` , if supplied , is the encoding to use in the generated XML ; the default is UTF-8 .", "question_id": 12701}
{"snippet": "turtle.position()", "intent": "Return the turtle \u2019 s current location ( x , y ) ( as a Vec2D vector ) .", "question_id": 10936}
{"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}
{"snippet": "readline.write_history_file()", "intent": "Save the history list to a readline history file , overwriting any existing file .", "question_id": 8024}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}
{"snippet": "writer.new_margin(margin, level)", "intent": "Set the `margin` `level` to the integer level and the logical tag to margin .", "question_id": 3844}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779}
{"snippet": "i_pv4_network.hosts()", "intent": "Returns an iterator over the usable hosts in the network .", "question_id": 5205}
{"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "HTMLParser.handle_entityref(name)", "intent": "This method is called to process a named character reference of the form & `name` ; ( e.g .", "question_id": 4360}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "InteractiveInterpreter.runsource(source)", "intent": "Compile and run some `source` in the interpreter .", "question_id": 1175}
{"snippet": "tempfile.gettempdir()", "intent": "Return the name of the directory used for temporary files .", "question_id": 10089}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "test.support.CleanImport(*module_names)", "intent": "A context manager to force import to return a new module reference . With arguments `*module_names`.", "question_id": 10290}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518}
{"snippet": "asyncio.sleep(delay, loop=None)", "intent": "Block for `delay` seconds . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 597}
{"snippet": "widget.get_children()", "intent": "Returns the list of children belonging to `item` .", "question_id": 10622}
{"snippet": "sys.settrace(tracefunc)", "intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "question_id": 9839}
{"snippet": "InteractiveInterpreter.showtraceback()", "intent": "Display the exception that just occurred .", "question_id": 1182}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761}
{"snippet": "ordered_dict.popitem()", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair .", "question_id": 1391}
{"snippet": "turtle.getshapes()", "intent": "Return a list of names of all currently available turtle shapes .", "question_id": 11097}
{"snippet": "shlex.commenters", "intent": "The string of characters that are recognized as comment beginners.", "question_id": 8294}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "ZipFile.extractall(path=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12819}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "pickle.dump(obj, file, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7365}
{"snippet": "curses.start_color()", "intent": "Must be called if the programmer wants to use colors , and before any other color manipulation routine is called .", "question_id": 1983}
{"snippet": "PurePath.joinpath(*other)", "intent": "Calling this method is equivalent to combining the path with each of the other arguments in turn : With arguments `*other`.", "question_id": 7257}
{"snippet": "tokenize.open(filename)", "intent": "Open a file in read only mode using the encoding detected by detect_encoding ( ) . With arguments `filename`.", "question_id": 10704}
{"snippet": "sys.is_finalizing()", "intent": "Return True if the Python interpreter is shutting down , False otherwise .", "question_id": 9819}
{"snippet": "example.lineno", "intent": "The line number within the string containing this example where the example begins.", "question_id": 2837}
{"snippet": "urllib.request.FancyURLopener()", "intent": "FancyURLopener subclasses URLopener providing default handling for the following HTTP response codes : 301 , 302 , 303 , 307 and 401 .", "question_id": 11905}
{"snippet": "nt_event_log_handler.close()", "intent": "At this point , you can remove the application name from the registry as a source of event log entries .", "question_id": 5510}
{"snippet": "os.removedirs(name)", "intent": "Remove directories recursively . With arguments `name`.", "question_id": 6891}
{"snippet": "pickle.dump(obj, file, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7365}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "winreg.KEY_ENUMERATE_SUB_KEYS", "intent": "Required to enumerate the subkeys of a registry key.", "question_id": 12169}
{"snippet": "datetime.hour", "intent": "In range(24).", "question_id": 2275}
{"snippet": "decimal.is_infinite()", "intent": "Return True if the argument is either positive or negative infinity and False otherwise .", "question_id": 2419}
{"snippet": "ssl.PEM_cert_to_DER_cert(PEM_cert_string)", "intent": "Given a certificate as an ASCII PEM string , returns a DER-encoded sequence of bytes for that same certificate . With arguments `PEM_cert_string`.", "question_id": 8897}
{"snippet": "ipaddress.ip_address(address)", "intent": "Return an IPv4Address or IPv6Address object depending on the IP `address` passed as argument .", "question_id": 5170}
{"snippet": "r_lock.release()", "intent": "Release a lock , decrementing the recursion level .", "question_id": 6262}
{"snippet": "email_message.clear_content()", "intent": "Remove the payload and all of the Content- headers , leaving all other headers intact and in their original order .", "question_id": 3307}
{"snippet": "AU_write.writeframesraw(data)", "intent": "Write audio frames , without correcting nframes . With arguments `data`.", "question_id": 9728}
{"snippet": "os.makedirs(name, mode=0o777, exist_ok=False)", "intent": "Recursive directory creation function . The `mode` parameter is passed to mkdir ( ) for creating the leaf directory ; see the mkdir ( ) description for how it is interpreted . If `exist_ok` is False ( the default ) , an FileExistsError is raised if the target directory already exists . With arguments `name`.", "question_id": 6869}
{"snippet": "trace.Trace()", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10706}
{"snippet": "smtp_channel.mailfrom", "intent": "Holds a string containing the address identified in the \u201cMAIL FROM:\u201d line from the client.", "question_id": 8443}
{"snippet": "wsgi_request_handler.get_environ()", "intent": "Returns a dictionary containing the WSGI environment for a request .", "question_id": 12232}
{"snippet": "audioop.tostereo(fragment, width, lfactor, rfactor)", "intent": "Generate a stereo `fragment` from a mono fragment . Each pair of samples in the stereo fragment are computed from the mono sample , whereby left channel samples are multiplied by `lfactor` and right channel samples by `rfactor` . With arguments `width`.", "question_id": 706}
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232}
{"snippet": "typing.Any", "intent": "Special type indicating an unconstrained type.", "question_id": 11331}
{"snippet": "calendar.day_name", "intent": "An array that represents the days of the week in the current locale.", "question_id": 1022}
{"snippet": "file_handler.close()", "intent": "Closes the file .", "question_id": 5434}
{"snippet": "errno.ELIBSCN", "intent": ".lib section in a.out corrupted", "question_id": 3586}
{"snippet": "doctest.FAIL_FAST", "intent": "When specified, exit after the first failing example and don\u2019t attempt to run the remaining examples.", "question_id": 2763}
{"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103}
{"snippet": "time.perf_counter()", "intent": "Return the value ( in fractional seconds ) of a performance counter , i.e .", "question_id": 10448}
{"snippet": "ur_lopener.open_unknown(fullurl, data=None)", "intent": "Overridable interface to open unknown URL types . With arguments `fullurl`, `data`.", "question_id": 11895}
{"snippet": "errno.ESHUTDOWN", "intent": "Cannot send after transport endpoint shutdown", "question_id": 3613}
{"snippet": "base_server.socket_type", "intent": "The type of socket used by the server; socket.SOCK_STREAM and socket.SOCK_DGRAM are two common values.", "question_id": 8773}
{"snippet": "HTMLParser.handle_comment(data)", "intent": "This method is called when a comment is encountered ( e.g . With arguments `data`.", "question_id": 4362}
{"snippet": "multiprocessing.Queue()", "intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores .", "question_id": 6196}
{"snippet": "collections.abc.Collection", "intent": "ABC for sized iterable container classes.", "question_id": 1315}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "time.perf_counter()", "intent": "Return the value ( in fractional seconds ) of a performance counter , i.e .", "question_id": 10448}
{"snippet": "winreg.HKEY_PERFORMANCE_DATA", "intent": "Registry entries subordinate to this key allow you to access performance data.", "question_id": 12159}
{"snippet": "inspect.getsourcefile(object)", "intent": "Return the name of the Python source file in which an `object` was defined .", "question_id": 4973}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}
{"snippet": "collections.abc.MappingView", "intent": "ABCs for mapping, items, keys, and values views.", "question_id": 1326}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "plistlib.dump(value, fp, sort_keys=True, skipkeys=False)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . When `skipkeys` is false ( the default ) the function raises TypeError when a key of a dictionary is not a string , otherwise such keys are skipped . With arguments `fp`.", "question_id": 7569}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}
{"snippet": "turtle.reset()", "intent": "Delete the turtle \u2019 s drawings from the screen , re-center the turtle and set variables to the default values .", "question_id": 10967}
{"snippet": "time.ctime()", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time .", "question_id": 10439}
{"snippet": "ur_lopener.version", "intent": "Variable that specifies the user agent of the opener object.", "question_id": 11904}
{"snippet": "smtplib.SMTP(source_address=None)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `source_address` parameter allows binding to some specific source address in a machine with multiple network interfaces , and/or to some specific source TCP port .", "question_id": 8462}
{"snippet": "test.support.find_unused_port()", "intent": "Returns an unused port that should be suitable for binding .", "question_id": 10261}
{"snippet": "loop.create_future()", "intent": "Create an asyncio.Future object attached to the event loop .", "question_id": 198}
{"snippet": "pkgutil.ModuleInfo(module_finder, name, ispkg)", "intent": "A namedtuple that holds a brief summary of a module \u2019 s info . With arguments `module_finder`, `name`, `ispkg`.", "question_id": 7435}
{"snippet": "doctest.ELLIPSIS", "intent": "When specified, an ellipsis marker (...) in the expected output can match any substring in the actual output.", "question_id": 2755}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584}
{"snippet": "loop.sendfile(transport, file, count=None)", "intent": "Send a `file` over a `transport` . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 258}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927}
{"snippet": "urllib.request.urlretrieve(url, reporthook=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . With arguments `reporthook`.", "question_id": 11883}
{"snippet": "@asyncio.coroutine", "intent": "Decorator to mark generator-based coroutines.", "question_id": 644}
{"snippet": "statistics.median(data)", "intent": "Return the median ( middle value ) of numeric `data` , using the common \u201c mean of middle two \u201d method .", "question_id": 9127}
{"snippet": "turtle.Turtle", "intent": "Subclass of RawTurtle, has the same interface but draws on a default Screen object created automatically when needed for the first time.", "question_id": 11160}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164}
{"snippet": "random.lognormvariate(mu, sigma)", "intent": "Log normal distribution . If you take the natural logarithm of this distribution , you \u2019 ll get a normal distribution with mean `mu` and standard deviation `sigma` .", "question_id": 7913}
{"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478}
{"snippet": "mime_types.read(filename, strict=True)", "intent": "Load MIME information from a file named `filename` . If `strict` is True , information will be added to list of standard types , else to the list of non-standard types .", "question_id": 5971}
{"snippet": "dircmp.funny_files", "intent": "Files which are in both a and b, but could not be compared.", "question_id": 3779}
{"snippet": "textbox.edit(validator)", "intent": "This is the entry point you will normally use . If `validator` is supplied , it must be a function .", "question_id": 2136}
{"snippet": "call.call_list()", "intent": "For a call object that represents multiple calls , call_list ( ) returns a list of all the intermediate calls as well as the final call .", "question_id": 11648}
{"snippet": "pkgutil.ImpImporter()", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm .", "question_id": 7437}
{"snippet": "threading.main_thread()", "intent": "Return the main Thread object .", "question_id": 10345}
{"snippet": "IMAP4.getquotaroot(mailbox)", "intent": "Get the list of quota roots for the named `mailbox` .", "question_id": 4705}
{"snippet": "urllib.robotparser.RobotFileParser()", "intent": "This class provides methods to read , parse and answer questions about the robots.txt file at `url` .", "question_id": 11907}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "Match.re", "intent": "The regular expression object whose match() or search() method produced this match instance.", "question_id": 8013}
{"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}
{"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037}
{"snippet": "turtle.getcanvas()", "intent": "Return the Canvas of this TurtleScreen .", "question_id": 11096}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454}
{"snippet": "email.message.Message()", "intent": "If `policy` is specified ( it must be an instance of a policy class ) use the rules it specifies to update and serialize the representation of the message .", "question_id": 2936}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "sys.path_importer_cache", "intent": "A dictionary acting as a cache for finder objects.", "question_id": 9829}
{"snippet": "weakref.WeakMethod(method)", "intent": "A custom ref subclass which simulates a weak reference to a bound `method` ( i.e. , a method defined on a class and looked up on an instance ) .", "question_id": 12089}
{"snippet": "message.walk()", "intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "question_id": 3027}
{"snippet": "header_registry.__getitem__(name)", "intent": "Construct and return a class to handle creating a `name` header .", "question_id": 3184}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "json.load(fp, **kw, parse_float=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_float` , if specified , will be called with the string of every JSON float to be decoded . With arguments `**kw`.", "question_id": 5293}
{"snippet": "frame.lineno", "intent": "Line number (int).", "question_id": 10869}
{"snippet": "control.condition(action, condition)", "intent": "Make an entry into the ControlCondition table for this control . With arguments `action`, `condition`.", "question_id": 6131}
{"snippet": "os.setxattr(path, attribute, value)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` .", "question_id": 7001}
{"snippet": "test.support.check__all__(test_case, module, name_of_module=None)", "intent": "Assert that the __all__ variable of `module` contains all public names . The `name_of_module` argument can specify ( as a string or tuple thereof ) what module ( s ) an API could be defined in order to be detected as a public API . With arguments `test_case`.", "question_id": 10278}
{"snippet": "window.clear()", "intent": "Like erase ( ) , but also cause the whole window to be repainted upon next call to refresh ( ) .", "question_id": 2034}
{"snippet": "locale.THOUSEP", "intent": "Get the separator character for thousands (groups of three digits).", "question_id": 5364}
{"snippet": "example.options", "intent": "A dictionary mapping from option flags to True or False, which is used to override default options for this example.", "question_id": 2839}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358}
{"snippet": "os.dup2(fd, fd2, inheritable=True)", "intent": "Duplicate file descriptor `fd` to `fd2` , closing the latter first if necessary . The new file descriptor is `inheritable` by default or non-inheritable if inheritable is False .", "question_id": 6718}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "weakref.ref(object)", "intent": "Return a weak reference to `object` .", "question_id": 12075}
{"snippet": "string.ascii_lowercase", "intent": "The lowercase letters 'abcdefghijklmnopqrstuvwxyz'.", "question_id": 9508}
{"snippet": "message.get_params()", "intent": "Return the message \u2019 s Content-Type parameters , as a list .", "question_id": 2983}
{"snippet": "json.dumps(obj, **kw)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "question_id": 5280}
{"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796}
{"snippet": "abstract_event_loop.expected", "intent": "The total number (int) of expected bytes.", "question_id": 350}
{"snippet": "template.safe_substitute(mapping, **kwds)", "intent": "Like substitute ( ) , except that if placeholders are missing from `mapping` and kwds , instead of raising a KeyError exception , the original placeholder will appear in the resulting string intact . With arguments `**kwds`.", "question_id": 9527}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "BaseException", "intent": "The base class for all built-in exceptions.", "question_id": 3628}
{"snippet": "tkinter.tix.InputOnly", "intent": "The InputOnly widgets are to accept inputs from the user, which can be done with the bind command (Unix only).", "question_id": 10577}
{"snippet": "tracemalloc.get_traced_memory()", "intent": "Get the current size and peak size of memory blocks traced by the tracemalloc module as a tuple : ( current : int , peak : int ) .", "question_id": 10844}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363}
{"snippet": "socket.create_connection(address)", "intent": "Connect to a TCP service listening on the Internet `address` ( a 2-tuple ( host , port ) ) , and return the socket object .", "question_id": 8629}
{"snippet": "inspect.getdoc(object)", "intent": "Get the documentation string for an `object` , cleaned up with cleandoc ( ) .", "question_id": 4969}
{"snippet": "audioop.alaw2lin(fragment, width)", "intent": "Convert sound fragments in a-LAW encoding to linearly encoded sound fragments . a-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .", "question_id": 682}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "Unpacker.get_position()", "intent": "Returns the current unpack position in the data buffer .", "question_id": 12286}
{"snippet": "IncrementalParser.feed(data)", "intent": "Process a chunk of `data` .", "question_id": 12627}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "async_chat.found_terminator()", "intent": "Called when the incoming data stream matches the termination condition set by set_terminator ( ) .", "question_id": 173}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "test.support.disable_faulthandler()", "intent": "A context manager that replaces sys.stderr with sys.__stderr__ .", "question_id": 10191}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992}
{"snippet": "time.time_ns()", "intent": "Similar to time ( ) but returns time as an integer number of nanoseconds since the epoch .", "question_id": 10461}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "zipfile.ZipFile(file, compresslevel=None)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "question_id": 12796}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "test_case.assertDictEqual(first, second)", "intent": "Test that two dictionaries are equal . With arguments `first`, `second`.", "question_id": 11460}
{"snippet": "system_random.pattern", "intent": "The regular expression pattern.", "question_id": 7966}
{"snippet": "traceback.print_exc()", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10745}
{"snippet": "trace.results()", "intent": "Return a CoverageResults object that contains the cumulative results of all previous calls to run , runctx and runfunc for the given Trace instance .", "question_id": 10722}
{"snippet": "mock.mock_add_spec(spec)", "intent": "Add a `spec` to a mock .", "question_id": 11582}
{"snippet": "curses.has_colors()", "intent": "Return True if the terminal can display colors ; otherwise , return False .", "question_id": 1940}
{"snippet": "writer.send_hor_rule(*args, **kw)", "intent": "Display a horizontal rule on the output device . With arguments `*args`, `**kw`.", "question_id": 3849}
{"snippet": "Cmd.emptyline()", "intent": "Method called when an empty line is entered in response to the prompt .", "question_id": 1138}
{"snippet": "xml.dom.WrongDocumentErr", "intent": "Raised when a node is inserted in a different document than it currently belongs to, and the implementation does not support migrating the node from one document to the other.", "question_id": 12395}
{"snippet": "errno.ETXTBSY", "intent": "Text file busy", "question_id": 3531}
{"snippet": "connection.close()", "intent": "This closes the database connection .", "question_id": 8810}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962}
{"snippet": "__import__(name)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4135}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543}
{"snippet": "imp.get_tag()", "intent": "Return the PEP 3147 magic tag string matching this version of Python \u2019 s magic number , as returned by get_magic ( ) .", "question_id": 4770}
{"snippet": "email_message.make_related()", "intent": "Convert a non-multipart message into a multipart/related message , moving any existing Content- headers and payload into a ( new ) first part of the multipart .", "question_id": 3294}
{"snippet": "curses.resizeterm(nlines, ncols)", "intent": "Resize the standard and current windows to the specified dimensions , and adjusts other bookkeeping data used by the curses library that record the window dimensions ( in particular the SIGWINCH handler ) . With arguments `nlines`, `ncols`.", "question_id": 1976}
{"snippet": "InteractiveInterpreter.showsyntaxerror(filename=None)", "intent": "Display the syntax error that just occurred . If `filename` is given , it is stuffed into the exception instead of the default filename provided by Python \u2019 s parser , because it always uses ' < string > ' when reading from a string .", "question_id": 1181}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "ImportError", "intent": "Raised when the import statement has troubles trying to load a module.", "question_id": 3640}
{"snippet": "bytes.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9262}
{"snippet": "element.tag", "intent": "A string identifying what kind of data this element represents (the element type, in other words).", "question_id": 12479}
{"snippet": "config_parser.read_string(string)", "intent": "Parse configuration data from a `string` .", "question_id": 1516}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}
{"snippet": "itertools.starmap(function, iterable)", "intent": "Make an iterator that computes the `function` using arguments obtained from the `iterable` .", "question_id": 5264}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "loader.create_module(spec)", "intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "question_id": 4814}
{"snippet": "decimal.remainder_near(other)", "intent": "Return the remainder from dividing self by `other` .", "question_id": 2466}
{"snippet": "message.epilogue", "intent": "The epilogue attribute acts the same way as the preamble attribute, except that it contains text that appears between the last boundary and the end of the message.", "question_id": 3029}
{"snippet": "asyncio.sleep(delay, loop=None)", "intent": "Block for `delay` seconds . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 597}
{"snippet": "widget.bbox(item)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) .", "question_id": 10620}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "ctypes.WinError()", "intent": "Windows only : this function is probably the worst-named thing in ctypes .", "question_id": 1836}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "netrc.macros", "intent": "Dictionary mapping macro names to string lists.", "question_id": 6390}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025}
{"snippet": "somenamedtuple._replace(**kwargs)", "intent": "Return a new instance of the named tuple replacing specified fields with new values : With arguments `**kwargs`.", "question_id": 1386}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922}
{"snippet": "string.ascii_uppercase", "intent": "The uppercase letters 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "question_id": 9509}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}
{"snippet": "Record.GetInteger(field)", "intent": "Return the value of `field` as an integer where possible .", "question_id": 6082}
{"snippet": "text_io_base.encoding", "intent": "The name of the encoding used to decode the stream\u2019s bytes into strings, and to encode strings into bytes.", "question_id": 5133}
{"snippet": "configparser.InterpolationSyntaxError", "intent": "Exception raised when the source text into which substitutions are made does not conform to the required syntax.", "question_id": 1599}
{"snippet": "pipes.Template", "intent": "An abstraction of a pipeline.", "question_id": 7427}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "NNTP.xover(start, end, file=None)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select . With arguments `file`.", "question_id": 6500}
{"snippet": "parser.parse(fp)", "intent": "Read all the data from the text-mode file-like object `fp` , parse the resulting text , and return the root message object .", "question_id": 3388}
{"snippet": "subprocess.CompletedProcess", "intent": "The return value from run(), representing a process that has finished.", "question_id": 9577}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "window.getbegyx()", "intent": "Return a tuple ( y , x ) of co-ordinates of upper-left corner .", "question_id": 2049}
{"snippet": "snapshot.traces", "intent": "Traces of all memory blocks allocated by Python: sequence of Trace instances.", "question_id": 10879}
{"snippet": "dis.hasjrel", "intent": "Sequence of bytecodes that have a relative jump target.", "question_id": 2748}
{"snippet": "context.remainder_near(x, y)", "intent": "Returns `x` - `y` * n , where n is the integer nearest the exact value of x / y ( if the result is 0 then its sign will be the sign of x ) .", "question_id": 2566}
{"snippet": "policy.header_max_count(name)", "intent": "Return the maximum allowed number of headers named `name` .", "question_id": 3422}
{"snippet": "shlex.shlex(punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8277}
{"snippet": "_func_ptr.errcheck", "intent": "Assign a Python function or another callable to this attribute.", "question_id": 1789}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "ossaudiodev.OSSAudioError", "intent": "This exception is raised on certain errors.", "question_id": 7173}
{"snippet": "datetime.replace(minute=self.minute)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `minute`.", "question_id": 2289}
{"snippet": "asyncio.sleep(delay, result=None, loop=None)", "intent": "Block for `delay` seconds . If `result` is provided , it is returned to the caller when the coroutine completes . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 598}
{"snippet": "parameter.kind", "intent": "Describes how argument values are bound to the parameter.", "question_id": 5001}
{"snippet": "imaplib.IMAP4_SSL(keyfile=None)", "intent": "This is a subclass derived from IMAP4 that connects over an SSL encrypted socket ( to use this class you need a socket module that was compiled with SSL support ) . `keyfile` and `certfile` are a legacy alternative to ssl_context - they can point to PEM-formatted private key and certificate chain files for the SSL connection .", "question_id": 4679}
{"snippet": "enum.IntFlag", "intent": "Base class for creating enumerated constants that can be combined using the bitwise operators without losing their IntFlag membership.", "question_id": 3501}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175}
{"snippet": "decimal.compare_total(other)", "intent": "Compare two operands using their abstract representation rather than their numerical value . With arguments `other`.", "question_id": 2403}
{"snippet": "chunk.getname()", "intent": "Returns the name ( ID ) of the chunk .", "question_id": 1083}
{"snippet": "time.timezone", "intent": "The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK).", "question_id": 10474}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357}
{"snippet": "Popen.wait()", "intent": "Wait for child process to terminate .", "question_id": 9610}
{"snippet": "ZipInfo.date_time", "intent": "The time and date of the last modification to the archive member.", "question_id": 12864}
{"snippet": "SSLContext.maximum_version", "intent": "A TLSVersion enum member representing the highest supported TLS version.", "question_id": 9044}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "asyncio.subprocess.DEVNULL", "intent": "Special value that can be used as the stdin, stdout or stderr argument to process creation functions.", "question_id": 545}
{"snippet": "typing.Callable", "intent": "Callable type; Callable[[int], str] is a function of (int) -> str.", "question_id": 11336}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "symbol_table.lookup(name)", "intent": "Lookup `name` in the table and return a Symbol instance .", "question_id": 9743}
{"snippet": "OptionParser.set_defaults()", "intent": "Set default values for several option destinations at once .", "question_id": 6647}
{"snippet": "unittest.TestCase()", "intent": "Instances of the TestCase class represent the logical test units in the unittest universe .", "question_id": 11363}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "imp.C_EXTENSION", "intent": "The module was found as dynamically loadable shared library.", "question_id": 4776}
{"snippet": "email.charset.Charset()", "intent": "Map character sets to their email properties .", "question_id": 2910}
{"snippet": "style.theme_create(themename)", "intent": "Create a new theme . It is an error if `themename` already exists .", "question_id": 10686}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "curses.resizeterm(nlines, ncols)", "intent": "Resize the standard and current windows to the specified dimensions , and adjusts other bookkeeping data used by the curses library that record the window dimensions ( in particular the SIGWINCH handler ) . With arguments `nlines`, `ncols`.", "question_id": 1976}
{"snippet": "TarFile.gettarinfo()", "intent": "Create a TarInfo object from the result of os.stat ( ) or equivalent on an existing file .", "question_id": 9959}
{"snippet": "policy.message_factory", "intent": "A factory function for constructing a new empty message object.", "question_id": 3418}
{"snippet": "widget.next(item)", "intent": "Returns the identifier of `item` \u2019 s next sibling , or \u2018 \u2019 if item is the last child of its parent .", "question_id": 10645}
{"snippet": "turtle.numinput(title, prompt)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input .", "question_id": 11084}
{"snippet": "config_parser.items()", "intent": "When section is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT .", "question_id": 1552}
{"snippet": "doctest.DocTestSuite(globs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "question_id": 2808}
{"snippet": "smtpd.DebuggingServer(localaddr, remoteaddr)", "intent": "Create a new debugging server . With arguments `localaddr`, `remoteaddr`.", "question_id": 8424}
{"snippet": "modulefinder.ModuleFinder(debug=0, excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6033}
{"snippet": "errno.EALREADY", "intent": "Operation already in progress", "question_id": 3619}
{"snippet": "patch.multiple(target, **kwargs, create=False)", "intent": "Perform multiple patches in a single call . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11634}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}
{"snippet": "webbrowser.open(url, autoraise=True)", "intent": "Display `url` using the default browser . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12104}
{"snippet": "loader.module_repr(module)", "intent": "A legacy method which when implemented calculates and returns the given `module` \u2019 s repr , as a string .", "question_id": 4817}
{"snippet": "types.MethodDescriptorType", "intent": "The type of methods of some built-in data types such as str.join().", "question_id": 11194}
{"snippet": "stringprep.in_table_c8(code)", "intent": "Determine whether `code` is in tableC.8 ( Change display properties or are deprecated ) .", "question_id": 9546}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "sysconfig.get_config_var(name)", "intent": "Return the value of a single variable `name` .", "question_id": 9859}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "@importlib.util.module_for_loader", "intent": "A decorator for importlib.abc.Loader.load_module() to handle selecting the proper module object to load with.", "question_id": 4931}
{"snippet": "module_finder.modules", "intent": "A dictionary mapping module names to modules.", "question_id": 6057}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "shlex.escapedquotes", "intent": "Characters in quotes that will interpret escape characters defined in escape.", "question_id": 8299}
{"snippet": "dis.opname", "intent": "Sequence of operation names, indexable using the bytecode.", "question_id": 2742}
{"snippet": "configparser.InterpolationError", "intent": "Base class for exceptions raised when problems occur performing string interpolation.", "question_id": 1596}
{"snippet": "io.RawIOBase", "intent": "Base class for raw binary I/O.", "question_id": 5083}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992}
{"snippet": "asyncio.StreamReader", "intent": "Represents a reader object that provides APIs to read data from the IO stream.", "question_id": 503}
{"snippet": "traceback.format(limit=None)", "intent": "Format the traceback as a list of lines with newlines . If `limit` is set , format the limit most recent frames if limit is positive .", "question_id": 10896}
{"snippet": "tkinter.tix.Tk()", "intent": "Toplevel widget of Tix which represents mostly the main window of an application .", "question_id": 10544}
{"snippet": "context.min(x, y)", "intent": "Compares two values numerically and returns the minimum . With arguments `x`, `y`.", "question_id": 2551}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}
{"snippet": "mock.configure_mock(**kwargs)", "intent": "Set attributes on the mock through keyword arguments . With arguments `**kwargs`.", "question_id": 11585}
{"snippet": "executor.map(func, *iterables)", "intent": "Similar to map ( `func` , `*iterables` ) except :", "question_id": 1441}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003}
{"snippet": "shutil.copy2(src, dst)", "intent": "Identical to copy ( ) except that copy2 ( ) also attempts to preserve file metadata . When `follow_symlinks` is false , and `src` is a symbolic link , copy2 ( ) attempts to copy all metadata from the src symbolic link to the newly-created `dst` symbolic link .", "question_id": 8320}
{"snippet": "base_handler._flush()", "intent": "Force buffered data to be transmitted to the client .", "question_id": 12249}
{"snippet": "sys.settrace(tracefunc)", "intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "question_id": 9839}
{"snippet": "msilib.Control(dlg, name)", "intent": "Base class of the dialog controls . `dlg` is the dialog object the control belongs to , and `name` is the control \u2019 s name .", "question_id": 6125}
{"snippet": "SSLContext.wrap_socket(sock)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) .", "question_id": 9022}
{"snippet": "sys.builtin_module_names", "intent": "A tuple of strings giving the names of all modules that are compiled into this Python interpreter.", "question_id": 9771}
{"snippet": "tkinter.tix.StdButtonBox", "intent": "The StdButtonBox widget is a group of standard buttons for Motif-like dialog boxes.", "question_id": 10562}
{"snippet": "XMLReader.getFeature(featurename)", "intent": "Return the current setting for feature `featurename` .", "question_id": 12623}
{"snippet": "tkinter.tix.DirSelectDialog", "intent": "The DirSelectDialog widget presents the directories in the file system in a dialog window.", "question_id": 10565}
{"snippet": "xml.etree.ElementTree.fromstring(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12438}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855}
{"snippet": "email.parser.FeedParser()", "intent": "Works like BytesFeedParser except that the input to the feed ( ) method must be a string .", "question_id": 3368}
{"snippet": "os.WEXITED", "intent": "Flags that can be used in options in waitid() that specify what child signal to wait for.", "question_id": 7075}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716}
{"snippet": "email.message.Message()", "intent": "If `policy` is specified ( it must be an instance of a policy class ) use the rules it specifies to update and serialize the representation of the message .", "question_id": 2936}
{"snippet": "types.AsyncGeneratorType", "intent": "The type of asynchronous generator-iterator objects, created by asynchronous generator functions.", "question_id": 11187}
{"snippet": "pickle.HIGHEST_PROTOCOL", "intent": "An integer, the highest protocol version available.", "question_id": 7361}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "stringprep.in_table_c7(code)", "intent": "Determine whether `code` is in tableC.7 ( Inappropriate for canonical representation ) .", "question_id": 9545}
{"snippet": "inspect.getsourcefile(object)", "intent": "Return the name of the Python source file in which an `object` was defined .", "question_id": 4973}
{"snippet": "base_handler.os_environ", "intent": "The default environment variables to be included in every request\u2019s WSGI environment.", "question_id": 12256}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "asyncio.ProactorEventLoop", "intent": "An event loop for Windows that uses \u201cI/O Completion Ports\u201d (IOCP).", "question_id": 343}
{"snippet": "stringprep.in_table_c12(code)", "intent": "Determine whether `code` is in tableC.1.2 ( Non-ASCII space characters ) .", "question_id": 9536}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "xml.etree.ElementTree.ParseError", "intent": "XML parse error, raised by the various parsing methods in this module when parsing fails.", "question_id": 12561}
{"snippet": "site.USER_SITE", "intent": "Path to the user site-packages for the running Python.", "question_id": 8404}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088}
{"snippet": "sys.base_exec_prefix", "intent": "Set during Python startup, before site.py is run, to the same value as exec_prefix.", "question_id": 9768}
{"snippet": "base_selector.register(fileobj, events)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor .", "question_id": 8215}
{"snippet": "cmath.inf", "intent": "Floating-point positive infinity.", "question_id": 1123}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138}
{"snippet": "inspect.getdoc(object)", "intent": "Get the documentation string for an `object` , cleaned up with cleandoc ( ) .", "question_id": 4969}
{"snippet": "errno.EHOSTUNREACH", "intent": "No route to host", "question_id": 3618}
{"snippet": "crypt.mksalt()", "intent": "Return a randomly generated salt of the specified `method` .", "question_id": 1676}
{"snippet": "warnings.warn(message, category=None, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12003}
{"snippet": "set ^= other", "intent": "Update the set, keeping only elements found in either set, but not in both.", "question_id": 9461}
{"snippet": "sqlite3.register_converter(typename, callable)", "intent": "Registers a `callable` to convert a bytestring from the database into a custom Python type . The callable will be invoked for all database values that are of the type `typename` .", "question_id": 8799}
{"snippet": "turtle.numinput(title, prompt)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input .", "question_id": 11084}
{"snippet": "xmlrpc.client.dumps(params, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12702}
{"snippet": "winsound.SND_LOOP", "intent": "Play the sound repeatedly.", "question_id": 12198}
{"snippet": "SMTP.login(user, password, initial_response_ok=True)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . `initial_response_ok` is passed through to auth ( ) . With arguments `user`.", "question_id": 8523}
{"snippet": "loader.create_module(spec)", "intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "question_id": 4814}
{"snippet": "tixCommand.tix_filedialog()", "intent": "Returns the file selection dialog that may be shared among different calls from this application .", "question_id": 10586}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "xml.etree.ElementTree.ParseError", "intent": "XML parse error, raised by the various parsing methods in this module when parsing fails.", "question_id": 12561}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "gc.enable()", "intent": "Enable automatic garbage collection .", "question_id": 4167}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948}
{"snippet": "turtle.numinput(title, prompt, default=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11085}
{"snippet": "socket.recvmsg_into(buffers)", "intent": "Receive normal data and ancillary data from the socket , behaving as recvmsg ( ) would , but scatter the non-ancillary data into a series of `buffers` instead of returning a new bytes object .", "question_id": 8710}
{"snippet": "test_loader.testNamePatterns", "intent": "List of Unix shell-style wildcard test name patterns that test methods have to match to be included in test suites (see -v option).", "question_id": 11506}
{"snippet": "test_case.assertRaisesRegex(exception, regex, msg=None)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` . With arguments `msg`.", "question_id": 11404}
{"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157}
{"snippet": "traceback.format_exc()", "intent": "This is like print_exc ( `limit` ) but returns a string instead of printing to a file .", "question_id": 10781}
{"snippet": "TarInfo.tobuf()", "intent": "Create a string buffer from a TarInfo object .", "question_id": 9973}
{"snippet": "test.support.modules_cleanup(oldmodules)", "intent": "Remove modules except for `oldmodules` and encodings in order to preserve internal cache .", "question_id": 10251}
{"snippet": "email_message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3260}
{"snippet": "gc.get_referents(*objs)", "intent": "Return a list of objects directly referred to by any of the arguments . With arguments `*objs`.", "question_id": 4182}
{"snippet": "sysconfig.get_python_version()", "intent": "Return the MAJOR.MINOR Python version number as a string .", "question_id": 9870}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370}
{"snippet": "errno.EMFILE", "intent": "Too many open files", "question_id": 3529}
{"snippet": "ZipInfo.volume", "intent": "Volume number of file header.", "question_id": 12873}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}
{"snippet": "turtle.reset()", "intent": "Delete the turtle \u2019 s drawings from the screen , re-center the turtle and set variables to the default values .", "question_id": 10967}
{"snippet": "winreg.ExpandEnvironmentStrings(str)", "intent": "Expands environment variable placeholders % NAME % in strings like REG_EXPAND_SZ : With arguments `str`.", "question_id": 12135}
{"snippet": "resource.RUSAGE_SELF", "intent": "Pass to getrusage() to request resources consumed by the calling process, which is the sum of resources used by all threads in the process.", "question_id": 8097}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "ArgumentParser.print_usage(file=None)", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line . If `file` is None , sys.stdout is assumed .", "question_id": 104}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}
{"snippet": "decimal.Decimal(context=None)", "intent": "Construct a new Decimal object based from `value` . The `context` precision does not affect how many digits are stored .", "question_id": 2393}
{"snippet": "xml.dom.DomstringSizeErr", "intent": "Raised when a specified range of text does not fit into a string.", "question_id": 12381}
{"snippet": "configparser.RawConfigParser(':'), ';'), delimiters=('=')", "intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`, `delimiters`.", "question_id": 1583}
{"snippet": "getopt.error", "intent": "Alias for GetoptError; for backward compatibility.", "question_id": 4203}
{"snippet": "types.MethodType", "intent": "The type of methods of user-defined class instances.", "question_id": 11189}
{"snippet": "InteractiveInterpreter.runsource(source)", "intent": "Compile and run some `source` in the interpreter .", "question_id": 1175}
{"snippet": "text_calendar.prmonth(theyear, themonth, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 934}
{"snippet": "unittest.TextTestRunner()", "intent": "A basic test runner implementation that outputs results to a `stream` .", "question_id": 11533}
{"snippet": "errno.EADDRINUSE", "intent": "Address already in use", "question_id": 3603}
{"snippet": "structure._pack_", "intent": "An optional small integer that allows overriding the alignment of structure fields in the instance.", "question_id": 1891}
{"snippet": "xml.dom.InuseAttributeErr", "intent": "Raised when an attempt is made to insert an Attr node that is already present elsewhere in the document.", "question_id": 12384}
{"snippet": "asyncio.sleep(delay, loop=None)", "intent": "Block for `delay` seconds . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 597}
{"snippet": "window.standend()", "intent": "Turn off the standout attribute .", "question_id": 2115}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357}
{"snippet": "ast.iter_fields(node)", "intent": "Yield a tuple of ( fieldname , value ) for each field in node._fields that is present on `node` .", "question_id": 156}
{"snippet": "tabnanny.check(file_or_dir)", "intent": "If `file_or_dir` is a directory and not a symbolic link , then recursively descend the directory tree named by file_or_dir , checking all .py files along the way .", "question_id": 9885}
{"snippet": "stringprep.in_table_c3(code)", "intent": "Determine whether `code` is in tableC.3 ( Private use ) .", "question_id": 9541}
{"snippet": "winsound.SND_ASYNC", "intent": "Return immediately, allowing sounds to play asynchronously.", "question_id": 12201}
{"snippet": "Document.createTextNode(data)", "intent": "Create and return a text node containing the `data` passed as a parameter .", "question_id": 12347}
{"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957}
{"snippet": "crypt.METHOD_SHA256", "intent": "Another Modular Crypt Format method with 16 character salt and 43 character hash based on the SHA-256 hash function.", "question_id": 1669}
{"snippet": "threading.stack_size(size)", "intent": "Return the thread stack `size` used when creating new threads .", "question_id": 10348}
{"snippet": "statistics.median_low(data)", "intent": "Return the low median of numeric `data` .", "question_id": 9128}
{"snippet": "test_result.startTest(test)", "intent": "Called when the `test` case test is about to be run .", "question_id": 11520}
{"snippet": "loop.call_exception_handler(context)", "intent": "Call the current event loop exception handler . `context` is a dict object containing the following keys ( new keys may be introduced in future Python versions ) :", "question_id": 310}
{"snippet": "datetime.timestamp()", "intent": "Return POSIX timestamp corresponding to the datetime instance .", "question_id": 2302}
{"snippet": "os.WEXITED", "intent": "Flags that can be used in options in waitid() that specify what child signal to wait for.", "question_id": 7075}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140}
{"snippet": "email.headerregistry.HeaderRegistry(base_class=BaseHeader)", "intent": "This is the factory used by EmailPolicy by default . HeaderRegistry builds the class used to create a header instance dynamically , using `base_class` and a specialized class retrieved from a registry that it holds .", "question_id": 3176}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "symbol_table.lookup(name)", "intent": "Lookup `name` in the table and return a Symbol instance .", "question_id": 9743}
{"snippet": "ftplib.error_reply", "intent": "Exception raised when an unexpected reply is received from the server.", "question_id": 3898}
{"snippet": "os.supports_dir_fd", "intent": "A Set object indicating which functions in the os module permit use of their dir_fd parameter.", "question_id": 6947}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "os.read(fd, n)", "intent": "Read at most `n` bytes from file descriptor `fd` .", "question_id": 6793}
{"snippet": "sys.maxunicode", "intent": "An integer giving the value of the largest Unicode code point, i.e.", "question_id": 9824}
{"snippet": "zipapp.create_archive(source)", "intent": "Create an application archive from `source` .", "question_id": 12767}
{"snippet": "window.insstr(str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`.", "question_id": 2082}
{"snippet": "asyncio.Task(coro)", "intent": "A Future-like object that runs a Python coroutine . With arguments `coro`.", "question_id": 624}
{"snippet": "os.getrandom(size)", "intent": "Get up to `size` random bytes .", "question_id": 7137}
{"snippet": "urllib.request.urlretrieve(url, reporthook=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . With arguments `reporthook`.", "question_id": 11883}
{"snippet": "test.support.MISSING_C_DOCSTRINGS", "intent": "Return True if running on CPython, not on Windows, and configuration not set with WITH_DOC_STRINGS.", "question_id": 10132}
{"snippet": "tkinter.tix.ComboBox", "intent": "The ComboBox widget is similar to the combo box control in MS Windows.", "question_id": 10554}
{"snippet": "DefaultCookiePolicy.strict_ns_unverifiable", "intent": "Apply RFC 2965 rules on unverifiable transactions even to Netscape cookies.", "question_id": 4548}
{"snippet": "Cmd.misc_header", "intent": "The header to issue if the help output has a section for miscellaneous  help topics (that is, there are help_*() methods without corresponding do_*() methods).", "question_id": 1151}
{"snippet": "test_case.assertDictEqual(first, second)", "intent": "Test that two dictionaries are equal . With arguments `first`, `second`.", "question_id": 11460}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "Match.group(group1)", "intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "question_id": 7996}
{"snippet": "site.getusersitepackages()", "intent": "Return the path of the user-specific site-packages directory , USER_SITE .", "question_id": 8411}
{"snippet": "Packer.pack_opaque(data)", "intent": "Packs a variable length opaque `data` string , similarly to pack_string ( ) .", "question_id": 12280}
{"snippet": "date.day", "intent": "Between 1 and the number of days in the given month of the given year.", "question_id": 2228}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "code.InteractiveInterpreter()", "intent": "This class deals with parsing and interpreter state ( the user \u2019 s namespace ) ; it does not deal with input buffering or prompting or input file naming ( the filename is always passed in explicitly ) .", "question_id": 1155}
{"snippet": "logging.config.stopListening()", "intent": "Stops the listening server which was created with a call to listen ( ) .", "question_id": 5420}
{"snippet": "stringprep.in_table_b1(code)", "intent": "Determine whether `code` is in tableB.1 ( Commonly mapped to nothing ) .", "question_id": 9532}
{"snippet": "base_handler.traceback_limit", "intent": "The maximum number of frames to include in tracebacks output by the default log_exception() method.", "question_id": 12261}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "bound_arguments.arguments", "intent": "An ordered, mutable mapping (collections.OrderedDict) of parameters\u2019 names to arguments\u2019 values.", "question_id": 5003}
{"snippet": "turtle.resizemode()", "intent": "Set resizemode to one of the values : \u201c auto \u201d , \u201c user \u201d , \u201c noresize \u201d .", "question_id": 10984}
{"snippet": "Compress.copy()", "intent": "Returns a copy of the compression object .", "question_id": 12930}
{"snippet": "SO_*", "intent": "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module.", "question_id": 8565}
{"snippet": "selectors.DefaultSelector", "intent": "The default selector class, using the most efficient implementation available on the current platform.", "question_id": 8225}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : With arguments `*paths`.", "question_id": 2797}
{"snippet": "sys.builtin_module_names", "intent": "A tuple of strings giving the names of all modules that are compiled into this Python interpreter.", "question_id": 9771}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "sequence_matcher.get_matching_blocks()", "intent": "Return list of triples describing non-overlapping matching subsequences .", "question_id": 2683}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "shlex.quotes", "intent": "Characters that will be considered string quotes.", "question_id": 8298}
{"snippet": "NNTP.over(message_spec)", "intent": "Send an OVER command , or an XOVER command on legacy servers . `message_spec` can be either a string representing a message id , or a ( first , last ) tuple of numbers indicating a range of articles in the current group , or a ( first , None ) tuple indicating a range of articles starting from first to the last article in the current group , or None to select the current article in the current group .", "question_id": 6472}
{"snippet": "bz2.BZ2File(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 889}
{"snippet": "XMLReader.parse(source)", "intent": "Process an input `source` , producing SAX events .", "question_id": 12613}
{"snippet": "loop.connect_write_pipe(protocol_factory, pipe)", "intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 302}
{"snippet": "profile.runcall(func, *args, **kwargs)", "intent": "Profile `func` ( `*args` , `**kwargs` )", "question_id": 7687}
{"snippet": "raw_io_base.readall()", "intent": "Read and return all the bytes from the stream until EOF , using multiple calls to the stream if necessary .", "question_id": 5086}
{"snippet": "window.clrtoeol()", "intent": "Erase from cursor to the end of the line .", "question_id": 2037}
{"snippet": "bytes_io.getbuffer()", "intent": "Return a readable and writable view over the contents of the buffer without copying them .", "question_id": 5111}
{"snippet": "turtle.end_fill()", "intent": "Fill the shape drawn after the last call to begin_fill ( ) .", "question_id": 10966}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "sunau.Error", "intent": "An error raised when something is impossible because of Sun AU specs or implementation deficiency.", "question_id": 9693}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "deque.reverse()", "intent": "Reverse the elements of the deque in-place and then return None .", "question_id": 1367}
{"snippet": "writer.send_line_break()", "intent": "Break the current line .", "question_id": 3847}
{"snippet": "patch.multiple(target, **kwargs, spec=None, create=False)", "intent": "Perform multiple patches in a single call . The arguments `spec` , `spec_set` , create , `autospec` and `new_callable` have the same meaning as for patch ( ) . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11638}
{"snippet": "Match.group(group1)", "intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "question_id": 7996}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "connection.set_authorizer(authorizer_callback)", "intent": "This routine registers a callback . With arguments `authorizer_callback`.", "question_id": 8820}
{"snippet": "test.support.EnvironmentVarGuard", "intent": "Class used to temporarily set or unset environment variables.", "question_id": 10286}
{"snippet": "message.get_param(param, unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2994}
{"snippet": "asyncio.Task(coro)", "intent": "A Future-like object that runs a Python coroutine . With arguments `coro`.", "question_id": 624}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706}
{"snippet": "turtle.shapetransform()", "intent": "Set or return the current transformation matrix of the turtle shape .", "question_id": 11008}
{"snippet": "os.RTLD_LAZY", "intent": "Flags for use with the setdlopenflags() and getdlopenflags() functions.", "question_id": 7130}
{"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042}
{"snippet": "ast.parse(source, filename='<unknown>')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 146}
{"snippet": "errno.ELIBACC", "intent": "Can not access a needed shared library", "question_id": 3584}
{"snippet": "asyncio.BufferedProtocol(BaseProtocol)", "intent": "A base class for implementing streaming protocols with manual control of the receive buffer . With arguments `BaseProtocol`.", "question_id": 428}
{"snippet": "sys.dont_write_bytecode", "intent": "If this is true, Python won\u2019t try to write .pyc files on the import of source modules.", "question_id": 9780}
{"snippet": "sys.version", "intent": "A string containing the version number of the Python interpreter plus additional information on the build number and compiler used.", "question_id": 9852}
{"snippet": "time.strftime(format)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument .", "question_id": 10454}
{"snippet": "@classmethod", "intent": "Transform a method into a class method.", "question_id": 3991}
{"snippet": "devpoll.poll()", "intent": "Polls the set of registered file descriptors , and returns a possibly-empty list containing ( fd , event ) 2-tuples for the descriptors that have events or errors to report .", "question_id": 8178}
{"snippet": "mock._get_child_mock(**kw)", "intent": "Create the child mocks for attributes and return value . With arguments `**kw`.", "question_id": 11587}
{"snippet": "text_io_base.encoding", "intent": "The name of the encoding used to decode the stream\u2019s bytes into strings, and to encode strings into bytes.", "question_id": 5133}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "user_dict.data", "intent": "A real dictionary used to store the contents of the UserDict class.", "question_id": 1397}
{"snippet": "socket.ntohs(x)", "intent": "Convert 16-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8658}
{"snippet": "time.time()", "intent": "Return the time in seconds since the epoch as a floating point number .", "question_id": 10458}
{"snippet": "mmap.readline()", "intent": "Returns a single line , starting at the current file position and up to the next newline .", "question_id": 6012}
{"snippet": "datetime.hour", "intent": "In range(24).", "question_id": 2275}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "binary.decode(bytes)", "intent": "Accept a base64 `bytes` object and decode it as the instance \u2019 s new data .", "question_id": 12687}
{"snippet": "re.findall(pattern, string, flags=0)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings . With arguments `flags`.", "question_id": 7948}
{"snippet": "PurePath.drive", "intent": "A string representing the drive letter or name, if any:", "question_id": 7244}
{"snippet": "@classmethod", "intent": "Transform a method into a class method.", "question_id": 3991}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "IncrementalParser.feed(data)", "intent": "Process a chunk of `data` .", "question_id": 12627}
{"snippet": "traceback.extract_tb(tb)", "intent": "Return a StackSummary object representing a list of \u201c pre-processed \u201d stack trace entries extracted from the traceback object `tb` .", "question_id": 10769}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}
{"snippet": "turtle.setheading(to_angle)", "intent": "Set the orientation of the turtle to `to_angle` .", "question_id": 10920}
{"snippet": "tkinter.tix.LabelEntry", "intent": "The LabelEntry widget packages an entry widget and a label into one mega widget.", "question_id": 10556}
{"snippet": "itertools.permutations(iterable)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5258}
{"snippet": "file_handler.close()", "intent": "Closes the file .", "question_id": 5434}
{"snippet": "Match.lastindex", "intent": "The integer index of the last matched capturing group, or None if no group was matched at all.", "question_id": 8011}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}
{"snippet": "widget.parent(item)", "intent": "Returns the ID of the parent of `item` , or \u2018 \u2019 if item is at the top level of the hierarchy .", "question_id": 10646}
{"snippet": "xml.etree.ElementTree.iterparse(source)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data .", "question_id": 12442}
{"snippet": "locale.ERA_D_T_FMT", "intent": "Get a format string for time.strftime() to represent date and time in a locale-specific era-based way.", "question_id": 5369}
{"snippet": "os.path.commonprefix(list)", "intent": "Return the longest path prefix ( taken character-by-character ) that is a prefix of all paths in `list` .", "question_id": 7145}
{"snippet": "math.degrees(x)", "intent": "Convert angle `x` from radians to degrees .", "question_id": 5922}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "os.getpgid(pid)", "intent": "Return the process group id of the process with process id `pid` .", "question_id": 6680}
{"snippet": "winreg.HKEY_USERS", "intent": "Registry entries subordinate to this key define the default user configuration for new users on the local computer and the user configuration for the current user.", "question_id": 12158}
{"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819}
{"snippet": "configparser.RawConfigParser(':'), ';'))", "intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`.", "question_id": 1579}
{"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846}
{"snippet": "loop.create_server(protocol_factory)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`.", "question_id": 232}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}
{"snippet": "Match.group()", "intent": "Returns one or more subgroups of the match .", "question_id": 7997}
{"snippet": "asyncio.WriteTransport(BaseTransport)", "intent": "A base transport for write-only connections . With arguments `BaseTransport`.", "question_id": 391}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "csv.excel_tab", "intent": "The excel_tab class defines the usual properties of an Excel-generated TAB-delimited file.", "question_id": 1712}
{"snippet": "test_case.assertMultiLineEqual(first, second, msg=None)", "intent": "Test that the multiline string `first` is equal to the string `second` . With arguments `msg`.", "question_id": 11449}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "ZipInfo.extra", "intent": "Expansion field data.", "question_id": 12867}
{"snippet": "socketserver.BaseServer(server_address, RequestHandlerClass)", "intent": "This is the superclass of all Server objects in the module . The two parameters are stored in the respective `server_address` and `RequestHandlerClass` attributes .", "question_id": 8759}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "os.path.splitext(path)", "intent": "Split the pathname `path` into a pair ( root , ext ) such that root + ext == path , and ext is empty or begins with a period and contains at most one period .", "question_id": 7171}
{"snippet": "context.scaleb(x, y)", "intent": "Returns the first operand after adding the second value its exp . With arguments `x`, `y`.", "question_id": 2569}
{"snippet": "turtle.pendown()", "intent": "Pull the pen down \u2013 drawing when moving .", "question_id": 10948}
{"snippet": "types.SimpleNamespace", "intent": "A simple object subclass that provides attribute access to its namespace, as well as a meaningful repr.", "question_id": 11217}
{"snippet": "re.split(pattern, string, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . With arguments `flags`.", "question_id": 7945}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "crypt.METHOD_MD5", "intent": "Another Modular Crypt Format method with 8 character salt and 22 character hash based on the MD5 hash function.", "question_id": 1671}
{"snippet": "html_calendar.formatyear(theyear)", "intent": "Return a year \u2019 s calendar as an HTML table . With arguments `theyear`.", "question_id": 960}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}
{"snippet": "readline.append_history_file(nelements)", "intent": "Append the last `nelements` items of history to a file .", "question_id": 8026}
{"snippet": "datetime.time", "intent": "An idealized time, independent of any particular day, assuming that every day has exactly 24*60*60 seconds (there is no notion of \u201cleap seconds\u201d here).", "question_id": 2199}
{"snippet": "time.ctime()", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time .", "question_id": 10439}
{"snippet": "DefaultCookiePolicy.strict_ns_unverifiable", "intent": "Apply RFC 2965 rules on unverifiable transactions even to Netscape cookies.", "question_id": 4548}
{"snippet": "readline.get_completion_type()", "intent": "Get the type of completion being attempted .", "question_id": 8043}
{"snippet": "inspect.getinnerframes(traceback, context=1)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "question_id": 5028}
{"snippet": "difflib.Differ()", "intent": "Optional keyword parameters `linejunk` and `charjunk` are for filter functions ( or None ) :", "question_id": 2690}
{"snippet": "symbol_table.get_identifiers()", "intent": "Return a list of names of symbols in this table .", "question_id": 9742}
{"snippet": "locale.LC_MESSAGES", "intent": "Locale category for message display.", "question_id": 5408}
{"snippet": "smtp_channel.mailfrom", "intent": "Holds a string containing the address identified in the \u201cMAIL FROM:\u201d line from the client.", "question_id": 8443}
{"snippet": "test_case.records", "intent": "A list of logging.LogRecord objects of the matching log messages.", "question_id": 11415}
{"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055}
{"snippet": "os.EX_IOERR", "intent": "Exit code that means that an error occurred while doing I/O on some file.", "question_id": 7029}
{"snippet": "HTMLParser.close()", "intent": "Force processing of all buffered data as if it were followed by an end-of-file mark .", "question_id": 4352}
{"snippet": "stat_result.st_atime", "intent": "Time of most recent access expressed in seconds.", "question_id": 6929}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "UnicodeTranslateError", "intent": "Raised when a Unicode-related error occurs during translating.", "question_id": 3681}
{"snippet": "pdb.runeval(expression, globals=None)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control . With arguments `globals`.", "question_id": 7332}
{"snippet": "json_decoder.decode(s)", "intent": "Return the Python representation of `s` ( a str instance containing a JSON document ) .", "question_id": 5320}
{"snippet": "configparser.ConfigParser(':'), ';'), strict=True)", "intent": "The main configuration parser . When `strict` is True ( the default ) , the parser won \u2019 t allow for any section or option duplicates while reading from a single source ( file , string or dictionary ) , raising DuplicateSectionError or DuplicateOptionError . With arguments `':')`, `';')`.", "question_id": 1503}
{"snippet": "os.path.splitext(path)", "intent": "Split the pathname `path` into a pair ( root , ext ) such that root + ext == path , and ext is empty or begins with a period and contains at most one period .", "question_id": 7171}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499}
{"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}
{"snippet": "NNTP.ihave(message_id, data)", "intent": "Send an IHAVE command . `message_id` is the id of the message to send to the server ( enclosed in ' < ' and ' > ' ) . The `data` parameter and the return value are the same as for post ( ) .", "question_id": 6493}
{"snippet": "SSLContext.wrap_socket(sock, do_handshake_on_connect=True)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `do_handshake_on_connect` specifies whether to do the SSL handshake automatically after doing a socket.connect ( ) , or whether the application program will call it explicitly , by invoking the SSLSocket.do_handshake ( ) method .", "question_id": 9024}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "text_wrapper.subsequent_indent", "intent": "(default: '') String that will be prepended to all lines of wrapped output except the first.", "question_id": 10333}
{"snippet": "xmlrpc.client.Fault", "intent": "A Fault object encapsulates the content of an XML-RPC fault tag.", "question_id": 12689}
{"snippet": "Repr.maxstring", "intent": "Limit on the number of characters in the representation of the string.", "question_id": 8064}
{"snippet": "Template.prepend(cmd, kind)", "intent": "Add a new action at the beginning . With arguments `cmd`, `kind`.", "question_id": 7432}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194}
{"snippet": "AU_write.writeframes(data)", "intent": "Write audio frames and make sure nframes is correct . With arguments `data`.", "question_id": 9729}
{"snippet": "datetime.resolution", "intent": "The smallest possible difference between non-equal datetime objects, timedelta(microseconds=1).", "question_id": 2271}
{"snippet": "mh.set_sequences(sequences)", "intent": "Re-define the `sequences` that exist in the mailbox based upon sequences , a dictionary of names mapped to key lists , like returned by get_sequences ( ) .", "question_id": 5784}
{"snippet": "errno.EMLINK", "intent": "Too many links", "question_id": 3536}
{"snippet": "io_base.seekable()", "intent": "Return True if the stream supports random access .", "question_id": 5076}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802}
{"snippet": "xml.sax.saxutils.escape(data)", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` .", "question_id": 12652}
{"snippet": "text_wrapper.expand_tabs", "intent": "(default: True) If true, then all tab characters in text will be expanded to spaces using the expandtabs() method of text.", "question_id": 10328}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832}
{"snippet": "finder.find_module(fullname)", "intent": "An abstract method for finding a loader for the specified module . With arguments `fullname`.", "question_id": 4800}
{"snippet": "CookiePolicy.hide_cookie2", "intent": "Don\u2019t add Cookie2 header to requests (the presence of this header indicates to the server that we understand RFC 2965 cookies).", "question_id": 4538}
{"snippet": "xml.sax.handler.all_features", "intent": "List of all features.", "question_id": 12568}
{"snippet": "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None)", "intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Otherwise you can explicitly specify the image subtype via the `_subtype` argument . With arguments `**_params`.", "question_id": 3343}
{"snippet": "turtle.Turtle", "intent": "Subclass of RawTurtle, has the same interface but draws on a default Screen object created automatically when needed for the first time.", "question_id": 11160}
{"snippet": "importlib.import_module(name)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g .", "question_id": 4793}
{"snippet": "str.strip()", "intent": "Return a copy of the string with the leading and trailing characters removed .", "question_id": 9251}
{"snippet": "test.support.temp_cwd(name='tempcwd')", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory .", "question_id": 10183}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826}
{"snippet": "re.subn(pattern, repl, string)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`.", "question_id": 7955}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "UnboundLocalError", "intent": "Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.", "question_id": 3672}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "FieldStorage.getfirst(name, default=None)", "intent": "This method always returns only one value associated with form field `name` . 1 If no such form field or value exists then the method returns the value specified by the optional parameter `default` .", "question_id": 1027}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832}
{"snippet": "test.support.TESTFN_UNENCODABLE", "intent": "Set to a filename (str type) that should not be able to be encoded by file system encoding in strict mode.", "question_id": 10118}
{"snippet": "errno.ENETUNREACH", "intent": "Network is unreachable", "question_id": 3606}
{"snippet": "curses.panel.top_panel()", "intent": "Returns the top panel in the panel stack .", "question_id": 2143}
{"snippet": "loop.remove_signal_handler(sig)", "intent": "Remove the handler for the `sig` signal .", "question_id": 304}
{"snippet": "opname", "intent": "human readable name for operation", "question_id": 2735}
{"snippet": "os.path.splitdrive(path)", "intent": "Split the pathname `path` into a pair ( drive , tail ) where drive is either a mount point or the empty string .", "question_id": 7170}
{"snippet": "Panel.above()", "intent": "Returns the panel above the current panel .", "question_id": 2145}
{"snippet": "inspect.CO_VARARGS", "intent": "The code object has a variable positional parameter (*args-like).", "question_id": 5042}
{"snippet": "inspect.Signature(parameters=None, return_annotation=Signature.empty)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection . The optional `return_annotation` argument , can be an arbitrary Python object , is the \u201c return \u201d annotation of the callable .", "question_id": 4982}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "os.WEXITSTATUS(status)", "intent": "If WIFEXITED ( `status` ) is true , return the integer parameter to the exit ( 2 ) system call .", "question_id": 7093}
{"snippet": "SSLContext.maximum_version", "intent": "A TLSVersion enum member representing the highest supported TLS version.", "question_id": 9044}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470}
{"snippet": "traceback_exception.extract(frame_gen, capture_locals=False)", "intent": "Construct a StackSummary object from a frame generator ( such as is returned by walk_stack ( ) or walk_tb ( ) ) . If `limit` is supplied , only this many frames are taken from `frame_gen` . If `capture_locals` is True the local variables in each FrameSummary are captured as object representations .", "question_id": 10826}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "readline.clear_history()", "intent": "Clear the current history .", "question_id": 8029}
{"snippet": "turtle.ondrag(fun, btn=1)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`.", "question_id": 11028}
{"snippet": "stat.S_IMODE(mode)", "intent": "Return the portion of the file \u2019 s `mode` that can be set by os.chmod ( ) \u2014that is , the file \u2019 s permission bits , plus the sticky bit , set-group-id , and set-user-id bits ( on systems that support them ) .", "question_id": 9071}
{"snippet": "test_suite.__iter__()", "intent": "Tests grouped by a TestSuite are always accessed by iteration .", "question_id": 11488}
{"snippet": "poplib.error_proto", "intent": "Exception raised on any errors from this module (errors from socket module are not caught).", "question_id": 7600}
{"snippet": "@functools.lru_cache()", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4146}
{"snippet": "mimetypes.knownfiles", "intent": "List of type map file names commonly installed.", "question_id": 5951}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "ctypes.create_unicode_buffer(init_or_size)", "intent": "This function creates a mutable unicode character buffer . `init_or_size` must be an integer which specifies the `size` of the array , or a string which will be used to initialize the array items .", "question_id": 1815}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478}
{"snippet": "filter.filter(record)", "intent": "Is the specified `record` to be logged ?", "question_id": 5625}
{"snippet": "test_case.output", "intent": "A list of str objects with the formatted output of matching messages.", "question_id": 11416}
{"snippet": "trace.size", "intent": "Size of the memory block in bytes (int).", "question_id": 10892}
{"snippet": "nis.maps(domain=default_domain)", "intent": "Return a list of all valid maps . The `domain` argument allows overriding the NIS domain used for the lookup .", "question_id": 6396}
{"snippet": "email.header.Header(maxlinelen=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . The maximum line length can be specified explicitly via `maxlinelen` .", "question_id": 3119}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "json.dump(obj, fp, **kw)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . With arguments `**kw`.", "question_id": 5270}
{"snippet": "smtplib.SMTP_SSL(context=None)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . `context` , also optional , can contain a SSLContext and allows configuring various aspects of the secure connection .", "question_id": 8484}
{"snippet": "shlex.source", "intent": "This attribute is None by default.", "question_id": 8303}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "io_base.__del__()", "intent": "Prepare for object destruction .", "question_id": 5082}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "ctypes.pythonapi", "intent": "An instance of PyDLL that exposes Python C API functions as attributes.", "question_id": 1785}
{"snippet": "tarfile.DEFAULT_FORMAT", "intent": "The default format for creating archives.", "question_id": 9912}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "ZipFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object .", "question_id": 12814}
{"snippet": "math.remainder(x, y)", "intent": "Return the IEEE 754-style remainder of `x` with respect to `y` .", "question_id": 5903}
{"snippet": "fileinput.isfirstline()", "intent": "Returns true if the line just read is the first line of its file , otherwise returns false .", "question_id": 3796}
{"snippet": "tracemalloc.start()", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators .", "question_id": 10847}
{"snippet": "asyncio.Queue(loop=None)", "intent": "A first in , first out ( FIFO ) queue . With arguments `loop`.", "question_id": 447}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "smtplib.SMTP(source_address=None)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `source_address` parameter allows binding to some specific source address in a machine with multiple network interfaces , and/or to some specific source TCP port .", "question_id": 8462}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "dis.stack_effect(opcode, oparg)", "intent": "Compute the stack effect of `opcode` with argument `oparg` .", "question_id": 2731}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717}
{"snippet": "imp.get_tag()", "intent": "Return the PEP 3147 magic tag string matching this version of Python \u2019 s magic number , as returned by get_magic ( ) .", "question_id": 4770}
{"snippet": "mock.mock_add_spec(spec)", "intent": "Add a `spec` to a mock .", "question_id": 11582}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "ctypes.pointer(obj)", "intent": "This function creates a new pointer instance , pointing to `obj` .", "question_id": 1829}
{"snippet": "shutil.make_archive(base_name, format, root_dir)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive .", "question_id": 8356}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922}
{"snippet": "sys.getrefcount(object)", "intent": "Return the reference count of the `object` .", "question_id": 9800}
{"snippet": "cgi.print_environ_usage()", "intent": "Print a list of useful ( used by CGI ) environment variables in HTML .", "question_id": 1056}
{"snippet": "unittest.TestCase(methodName='runTest')", "intent": "Instances of the TestCase class represent the logical test units in the unittest universe . Each instance of TestCase will run a single base method : the method named `methodName` .", "question_id": 11364}
{"snippet": "non_callable_magic_mock.reason", "intent": "This is usually a string explaining the reason for this error.", "question_id": 11662}
{"snippet": "cmath.log10(x)", "intent": "Return the base-10 logarithm of `x` .", "question_id": 1099}
{"snippet": "env_builder.create_configuration(context)", "intent": "Creates the pyvenv.cfg configuration file in the environment . With arguments `context`.", "question_id": 11984}
{"snippet": "stat_result.st_blksize", "intent": "\u201cPreferred\u201d blocksize for efficient file system I/O.", "question_id": 6936}
{"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "message.set_charset(charset)", "intent": "Set the character set of the payload to `charset` , which can either be a Charset instance ( see email.charset ) , a string naming a character set , or None .", "question_id": 2962}
{"snippet": "date.isoformat()", "intent": "Return a string representing the date in ISO 8601 format , \u2018 YYYY-MM-DD \u2019 .", "question_id": 2242}
{"snippet": "ArgumentParser.parse_args()", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 69}
{"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}
{"snippet": "connection.isolation_level", "intent": "Get or set the current default isolation level.", "question_id": 8804}
{"snippet": "ctypes.c_char_p", "intent": "Represents the C char * datatype when it points to a zero-terminated string.", "question_id": 1857}
{"snippet": "differ.compare(a, b)", "intent": "Compare two sequences of lines , and generate the delta ( `a` sequence of lines ) . With arguments `b`.", "question_id": 2694}
{"snippet": "socket.CMSG_LEN(length)", "intent": "Return the total `length` , without trailing padding , of an ancillary data item with associated data of the given length .", "question_id": 8665}
{"snippet": "urllib.request.DataHandler", "intent": "Open data URLs.", "question_id": 11811}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}
{"snippet": "os.path.splitdrive(path)", "intent": "Split the pathname `path` into a pair ( drive , tail ) where drive is either a mount point or the empty string .", "question_id": 7170}
{"snippet": "getopt.error", "intent": "Alias for GetoptError; for backward compatibility.", "question_id": 4203}
{"snippet": "TabError", "intent": "Raised when indentation contains an inconsistent use of tabs and spaces.", "question_id": 3667}
{"snippet": "ctypes.resize(obj, size)", "intent": "This function resizes the internal memory buffer of `obj` , which must be an instance of a ctypes type . It is not possible to make the buffer smaller than the native `size` of the objects type , as given by sizeof ( type ( obj ) ) , but it is possible to enlarge the buffer .", "question_id": 1830}
{"snippet": "test.support.TEST_HTTP_URL", "intent": "Define the URL of a dedicated HTTP server for the network tests.", "question_id": 10134}
{"snippet": "EOFError", "intent": "Raised when the input() function hits an end-of-file condition (EOF) without reading any data.", "question_id": 3637}
{"snippet": "importlib.machinery.BYTECODE_SUFFIXES", "intent": "A list of strings representing the recognized file suffixes for bytecode modules (including the leading dot).", "question_id": 4868}
{"snippet": "stat.S_ISCHR(mode)", "intent": "Return non-zero if the `mode` is from a character special device file .", "question_id": 9062}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}
{"snippet": "decimal.as_tuple()", "intent": "Return a named tuple representation of the number : DecimalTuple ( sign , digits , exponent ) .", "question_id": 2397}
{"snippet": "base_http_request_handler.handle_expect_100()", "intent": "When a HTTP/1.1 compliant server receives an Expect : 100-continue request header it responds back with a 100 Continue followed by 200 OK headers .", "question_id": 4636}
{"snippet": "plistlib.dump(value, fp, sort_keys=True)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . With arguments `fp`.", "question_id": 7565}
{"snippet": "os.GRND_NONBLOCK", "intent": "By  default, when reading from /dev/random, getrandom() blocks if no random bytes are available, and when reading from /dev/urandom, it blocks if the entropy pool has not yet been initialized.", "question_id": 7140}
{"snippet": "hash.hexdigest()", "intent": "Like digest ( ) except the digest is returned as a string object of double length , containing only hexadecimal digits .", "question_id": 4306}
{"snippet": "tkinter.tix.CheckList", "intent": "The CheckList widget displays a list of items to be selected by the user.", "question_id": 10571}
{"snippet": "base_handler.log_exception(exc_info)", "intent": "Log the `exc_info` tuple in the server log .", "question_id": 12260}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360}
{"snippet": "socket.getprotobyname(protocolname)", "intent": "Translate an Internet protocol name ( for example , 'icmp ' ) to a constant suitable for passing as the ( optional ) third argument to the socket ( ) function . With arguments `protocolname`.", "question_id": 8652}
{"snippet": "base_http_request_handler.sys_version", "intent": "Contains the Python system version, in a form usable by the version_string method and the server_version class variable.", "question_id": 4628}
{"snippet": "msilib.Control(dlg, name)", "intent": "Base class of the dialog controls . `dlg` is the dialog object the control belongs to , and `name` is the control \u2019 s name .", "question_id": 6125}
{"snippet": "decimal.compare_total(other)", "intent": "Compare two operands using their abstract representation rather than their numerical value . With arguments `other`.", "question_id": 2403}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573}
{"snippet": "test.support.temp_cwd(name='tempcwd')", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory .", "question_id": 10183}
{"snippet": "config_parser.write(fileobject, space_around_delimiters=True)", "intent": "Write a representation of the configuration to the specified file object , which must be opened in text mode ( accepting strings ) . If `space_around_delimiters` is true , delimiters between keys and values are surrounded by spaces . With arguments `fileobject`.", "question_id": 1562}
{"snippet": "context.keys()", "intent": "Return a list of all variables in the context object .", "question_id": 1658}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, server_hostname=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . On client connections , the optional parameter `server_hostname` specifies the hostname of the service which we are connecting to .", "question_id": 9030}
{"snippet": "xml.dom.InvalidCharacterErr", "intent": "This exception is raised when a string parameter contains a character that is not permitted in the context it\u2019s being used in by the XML 1.0 recommendation.", "question_id": 12386}
{"snippet": "zipimporter.find_module(fullname)", "intent": "Search for a module specified by `fullname` .", "question_id": 12883}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962}
{"snippet": "base_server.handle_timeout()", "intent": "This function is called when the timeout attribute has been set to a value other than None and the timeout period has passed with no requests being received .", "question_id": 8778}
{"snippet": "operator.iconcat(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6592}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003}
{"snippet": "loop.sendfile(transport, file, offset=0, count=None)", "intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 260}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "typing.get_type_hints(obj)", "intent": "Return a dictionary containing type hints for a function , method , module or class object . With arguments `obj`.", "question_id": 11326}
{"snippet": "statistics.median(data)", "intent": "Return the median ( middle value ) of numeric `data` , using the common \u201c mean of middle two \u201d method .", "question_id": 9127}
{"snippet": "unittest.mock.mock_open(read_data=None)", "intent": "A helper function to create a `mock` to replace the use of open ( ) . `read_data` is a string for the read ( ) , readline ( ) , and readlines ( ) methods of the file handle to return .", "question_id": 11655}
{"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "Path.symlink_to(target)", "intent": "Make this path a symbolic link to `target` .", "question_id": 7315}
{"snippet": "wsgi_request_handler.get_environ()", "intent": "Returns a dictionary containing the WSGI environment for a request .", "question_id": 12232}
{"snippet": "urllib.request.ProxyHandler()", "intent": "Cause requests to go through a proxy .", "question_id": 11784}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "curses.panel.bottom_panel()", "intent": "Returns the bottom panel in the panel stack .", "question_id": 2141}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "Locator.getColumnNumber()", "intent": "Return the column number where the current event begins .", "question_id": 12630}
{"snippet": "UnboundLocalError", "intent": "Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.", "question_id": 3672}
{"snippet": "os.path.split(path)", "intent": "Split the pathname `path` into a pair , ( head , tail ) where tail is the last pathname component and head is everything leading up to that .", "question_id": 7169}
{"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283}
{"snippet": "mh_message.set_sequences(sequences)", "intent": "Set the list of `sequences` that include this message .", "question_id": 5835}
{"snippet": "base_http_request_handler.sys_version", "intent": "Contains the Python system version, in a form usable by the version_string method and the server_version class variable.", "question_id": 4628}
{"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919}
{"snippet": "asyncio.wait(aws, loop=None)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 608}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}
{"snippet": "os.truncate(path, length)", "intent": "Truncate the file corresponding to `path` , so that it is at most `length` bytes in size .", "question_id": 6956}
{"snippet": "os.getpgid(pid)", "intent": "Return the process group id of the process with process id `pid` .", "question_id": 6680}
{"snippet": "base_selector.select()", "intent": "Wait until some registered file objects become ready , or the `timeout` expires .", "question_id": 8220}
{"snippet": "decimal.Decimal()", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2391}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924}
{"snippet": "PurePath.as_posix()", "intent": "Return a string representation of the path with forward slashes ( / ) :", "question_id": 7253}
{"snippet": "ssl.OP_NO_COMPRESSION", "intent": "Disable compression on the SSL channel.", "question_id": 8942}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "msilib.add_tables(database, module)", "intent": "Add all table content from `module` to `database` .", "question_id": 6065}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164}
{"snippet": "set |= other | ...", "intent": "Update the set, adding elements from all others.", "question_id": 9455}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "urllib.request.urlretrieve(url)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11881}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "text_wrapper.expand_tabs", "intent": "(default: True) If true, then all tab characters in text will be expanded to spaces using the expandtabs() method of text.", "question_id": 10328}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513}
{"snippet": "profile.runcall(func, *args, **kwargs)", "intent": "Profile `func` ( `*args` , `**kwargs` )", "question_id": 7687}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "text_io_base.encoding", "intent": "The name of the encoding used to decode the stream\u2019s bytes into strings, and to encode strings into bytes.", "question_id": 5133}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382}
{"snippet": "decimal.normalize()", "intent": "Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal ( ' 0 ' ) to Decimal ( '0e0 ' ) .", "question_id": 2457}
{"snippet": "threading.local", "intent": "A class that represents thread-local data.", "question_id": 10351}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}
{"snippet": "Wave_read.close()", "intent": "Close the stream if it was opened by wave , and make the instance unusable .", "question_id": 12050}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "email.headerregistry.ParameterizedMIMEHeader", "intent": "MIME headers all start with the prefix \u2018Content-\u2018.", "question_id": 3167}
{"snippet": "_thread.start_new_thread(function, args, kwargs)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "question_id": 12943}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "unittest.main(verbosity=1)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . You can run tests with more detailed information by passing in the `verbosity` argument :", "question_id": 11552}
{"snippet": "decimal.Decimal(context=None)", "intent": "Construct a new Decimal object based from `value` . The `context` precision does not affect how many digits are stored .", "question_id": 2393}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}
{"snippet": "platform.libc_ver()", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7537}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "module_type.__package__", "intent": "Which package a module belongs to.", "question_id": 11201}
{"snippet": "pdb.Pdb(nosigint=False)", "intent": "Pdb is the debugger class . If you want Pdb not to touch the SIGINT handler , set `nosigint` to true .", "question_id": 7346}
{"snippet": "oss_mixer_device.fileno()", "intent": "Returns the file handle number of the open mixer device file .", "question_id": 7202}
{"snippet": "ordered_dict.popitem()", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair .", "question_id": 1391}
{"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617}
{"snippet": "audioop.maxpp(fragment, width)", "intent": "Return the maximum peak-peak value in the sound `fragment` . With arguments `width`.", "question_id": 697}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460}
{"snippet": "xml.etree.ElementTree.TreeBuilder(element_factory=None)", "intent": "Generic element structure builder . `element_factory` , when given , must be a callable accepting two positional arguments : a tag and a dict of attributes .", "question_id": 12540}
{"snippet": "PurePath.joinpath(*other)", "intent": "Calling this method is equivalent to combining the path with each of the other arguments in turn : With arguments `*other`.", "question_id": 7257}
{"snippet": "struct.error", "intent": "Exception raised on various occasions; argument is a string describing what is wrong.", "question_id": 9550}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "formatter.format(format_string, *args, **kwargs)", "intent": "The primary API method . With arguments `format_string`, `*args`, `**kwargs`.", "question_id": 9517}
{"snippet": "TarFile.extract(member, path=\"\", numeric_owner=False)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "question_id": 9945}
{"snippet": "memory_handler.flush()", "intent": "For a MemoryHandler , flushing means just sending the buffered records to the target , if there is one .", "question_id": 5538}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705}
{"snippet": "random.choices(population, weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7896}
{"snippet": "FTP.dir()", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output .", "question_id": 3958}
{"snippet": "counter.elements()", "intent": "Return an iterator over elements repeating each as many times as its count .", "question_id": 1342}
{"snippet": "cmath.log10(x)", "intent": "Return the base-10 logarithm of `x` .", "question_id": 1099}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351}
{"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}
{"snippet": "doctest.DebugRunner()", "intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered .", "question_id": 2894}
{"snippet": "turtle.tracer(n=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11059}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164}
{"snippet": "style.layout(style, layoutspec=None)", "intent": "Define the widget layout for given `style` . If `layoutspec` is omitted , return the layout specification for given style .", "question_id": 10682}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138}
{"snippet": "email.headerregistry.DateHeader", "intent": "RFC 5322 specifies a very specific format for dates within email headers.", "question_id": 3156}
{"snippet": "SSLContext.session_stats()", "intent": "Get statistics about the SSL sessions created or managed by this context .", "question_id": 9042}
{"snippet": "re.escape(pattern)", "intent": "Escape special characters in `pattern` .", "question_id": 7959}
{"snippet": "ossaudiodev.OSSAudioError", "intent": "This exception is raised on certain errors.", "question_id": 7173}
{"snippet": "math.isinf(x)", "intent": "Return True if `x` is a positive or negative infinity , and False otherwise .", "question_id": 5899}
{"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012}
{"snippet": "mime_types.readfp(fp)", "intent": "Load MIME type information from an open file `fp` .", "question_id": 5972}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717}
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060}
{"snippet": "sequence_matcher.get_grouped_opcodes()", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2685}
{"snippet": "tkinter.tix.InputOnly", "intent": "The InputOnly widgets are to accept inputs from the user, which can be done with the bind command (Unix only).", "question_id": 10577}
{"snippet": "style.element_options(elementname)", "intent": "Returns the list of `elementname` \u2019 s options .", "question_id": 10685}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "sys.setswitchinterval(interval)", "intent": "Set the interpreter \u2019 s thread switch `interval` ( in seconds ) .", "question_id": 9838}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218}
{"snippet": "readline.parse_and_bind(string)", "intent": "Execute the init line provided in the `string` argument .", "question_id": 8015}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490}
{"snippet": "subprocess.getoutput(cmd)", "intent": "Return output ( stdout and stderr ) of executing `cmd` in a shell .", "question_id": 9690}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328}
{"snippet": "set.difference(*others)", "intent": "Return a new set with elements in the set that are not in the others . With arguments `*others`.", "question_id": 9449}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "HMAC.hexdigest()", "intent": "Like digest ( ) except the digest is returned as a string twice the length containing only hexadecimal digits .", "question_id": 4336}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}
{"snippet": "pdb.Pdb(nosigint=False)", "intent": "Pdb is the debugger class . If you want Pdb not to touch the SIGINT handler , set `nosigint` to true .", "question_id": 7346}
{"snippet": "os.execv(path, args)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "question_id": 7013}
{"snippet": "curses.use_default_colors()", "intent": "Allow use of default values for colors on terminals supporting this feature .", "question_id": 1998}
{"snippet": "dircmp.left_list", "intent": "Files and subdirectories in a, filtered by hide and ignore.", "question_id": 3769}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}
{"snippet": "example.options", "intent": "A dictionary mapping from option flags to True or False, which is used to override default options for this example.", "question_id": 2839}
{"snippet": "ZipFile.extractall(path=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12819}
{"snippet": "shutil.make_archive(base_name, format)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) .", "question_id": 8357}
{"snippet": "Path.symlink_to(target, target_is_directory=False)", "intent": "Make this path a symbolic link to `target` . Under Windows , `target_is_directory` must be true ( default False ) if the link \u2019 s target is a directory .", "question_id": 7316}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "dict.keys()", "intent": "Return a new view of the dictionary \u2019 s keys .", "question_id": 9485}
{"snippet": "dis.opname", "intent": "Sequence of operation names, indexable using the bytecode.", "question_id": 2742}
{"snippet": "gc.freeze()", "intent": "Freeze all the objects tracked by gc - move them to a permanent generation and ignore all the future collections .", "question_id": 4184}
{"snippet": "io.TextIOWrapper(buffer, encoding=None, newline=None)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` . `encoding` gives the name of the encoding that the stream will be decoded or encoded with . `newline` controls how line endings are handled .", "question_id": 5153}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "lzma.LZMACompressor(check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5680}
{"snippet": "sys.get_coroutine_origin_tracking_depth()", "intent": "Get the current coroutine origin tracking depth , as set by set_coroutine_origin_tracking_depth ( ) .", "question_id": 9811}
{"snippet": "UserWarning", "intent": "Base class for warnings generated by user code.", "question_id": 3702}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "mailcap.findmatch(caps, plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5872}
{"snippet": "ZipInfo.create_system", "intent": "System which created ZIP archive.", "question_id": 12868}
{"snippet": "sndhdr.what(filename)", "intent": "Determines the type of sound data stored in the file `filename` using whathdr ( ) .", "question_id": 8549}
{"snippet": "email.message_from_file(fp)", "intent": "Return a message object structure tree from an open file object . This is equivalent to Parser ( ) .parse ( `fp` ) .", "question_id": 3408}
{"snippet": "dircmp.same_files", "intent": "Files which are identical in both a and b, using the class\u2019s file comparison operator.", "question_id": 3777}
{"snippet": "window.echochar(ch, attr)", "intent": "Add character `ch` with attribute `attr` , and immediately call refresh ( ) on the window .", "question_id": 2044}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753}
{"snippet": "signal.CTRL_C_EVENT", "intent": "The signal corresponding to the Ctrl+C keystroke event.", "question_id": 8376}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "time.monotonic()", "intent": "Return the value ( in fractional seconds ) of a monotonic clock , i.e .", "question_id": 10446}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "gc.disable()", "intent": "Disable automatic garbage collection .", "question_id": 4168}
{"snippet": "queue_listener.filter(record)", "intent": "Applies this logger \u2019 s filters to the `record` and returns a true value if the record is to be processed .", "question_id": 5579}
{"snippet": "symbol_table.get_identifiers()", "intent": "Return a list of names of symbols in this table .", "question_id": 9742}
{"snippet": "str.index(sub, start, end)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`, `start`, `end`.", "question_id": 9199}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_NONE", "intent": "No modifier is given, so it can appear exactly once, as for A.", "question_id": 7783}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626}
{"snippet": "loop.close()", "intent": "Close the event loop .", "question_id": 187}
{"snippet": "pyclbr.readmodule(module)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package .", "question_id": 7706}
{"snippet": "@typing.no_type_check_decorator", "intent": "Decorator to give another decorator the no_type_check() effect.", "question_id": 11329}
{"snippet": "locale.THOUSEP", "intent": "Get the separator character for thousands (groups of three digits).", "question_id": 5364}
{"snippet": "locale.LC_NUMERIC", "intent": "Locale category for formatting numbers.", "question_id": 5409}
{"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}
{"snippet": "_c_data.in_dll(library, name)", "intent": "This method returns a ctypes type instance exported by a shared `library` . `name` is the name of the symbol that exports the data , library is the loaded shared library .", "question_id": 1849}
{"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}
{"snippet": "doctest.DocTestRunner(verbose=None, optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `verbose` controls the DocTestRunner \u2019 s verbosity . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2867}
{"snippet": "turtle.ondrag(fun, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `add`.", "question_id": 11029}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "aifc.setframerate(rate)", "intent": "Specify the sampling frequency in frames per second . With arguments `rate`.", "question_id": 29}
{"snippet": "doctest.DONT_ACCEPT_BLANKLINE", "intent": "By default, if an expected output block contains a line containing only the string <BLANKLINE>, then that line will match a blank line in the actual output.", "question_id": 2753}
{"snippet": "xmlrpc.client.dumps(params, methodresponse=None, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12707}
{"snippet": "writer.new_margin(margin, level)", "intent": "Set the `margin` `level` to the integer level and the logical tag to margin .", "question_id": 3844}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}
{"snippet": "thread.start()", "intent": "Start the thread \u2019 s activity .", "question_id": 10362}
{"snippet": "gettext.dgettext(domain, message)", "intent": "Like gettext ( ) , but look the `message` up in the specified `domain` .", "question_id": 4217}
{"snippet": "base_rotating_handler.rotator", "intent": "If this attribute is set to a callable, the rotate() method delegates to this callable.", "question_id": 5455}
{"snippet": "errno.EOVERFLOW", "intent": "Value too large for defined data type", "question_id": 3580}
{"snippet": "statistics.median_grouped(data)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation .", "question_id": 9130}
{"snippet": "audioop.mul(fragment, width, factor)", "intent": "Return a `fragment` that has all samples in the original fragment multiplied by the floating-point value `factor` . With arguments `width`.", "question_id": 699}
{"snippet": "profile.print_stats()", "intent": "Create a Stats object based on the current profile and print the results to stdout .", "question_id": 7682}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "turtle.position()", "intent": "Return the turtle \u2019 s current location ( x , y ) ( as a Vec2D vector ) .", "question_id": 10936}
{"snippet": "base_http_request_handler.handle_one_request()", "intent": "This method will parse and dispatch the request to the appropriate do_* ( ) method .", "question_id": 4635}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "Cmd.doc_header", "intent": "The header to issue if the help output has a section for documented commands.", "question_id": 1150}
{"snippet": "sys.exit()", "intent": "Exit from Python .", "question_id": 9789}
{"snippet": "traceback.print_tb(tb, file=None)", "intent": "Print up to `limit` stack trace entries from traceback object `tb` ( starting from the caller \u2019 s frame ) if limit is positive . If `file` is omitted or None , the output goes to sys.stderr ; otherwise it should be an open file or file-like object to receive the output .", "question_id": 10735}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "BaseCookie.js_output(attrs=None)", "intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP headers was sent . The meaning for `attrs` is the same as in output ( ) .", "question_id": 4593}
{"snippet": "getopt.error", "intent": "Alias for GetoptError; for backward compatibility.", "question_id": 4203}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "turtle.onkey(fun, key)", "intent": "Bind `fun` to key-release event of `key` .", "question_id": 11067}
{"snippet": "socket.fromshare(data)", "intent": "Instantiate a socket from `data` obtained from the socket.share ( ) method .", "question_id": 8632}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}
{"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725}
{"snippet": "html_calendar.cssclasses_weekday_head", "intent": "A list of CSS classes used for weekday names in the header row.", "question_id": 972}
{"snippet": "window.border()", "intent": "Draw a border around the edges of the window .", "question_id": 2027}
{"snippet": "_thread.interrupt_main()", "intent": "Simulate the effect of a signal.SIGINT signal arriving in the main thread .", "question_id": 12945}
{"snippet": "zipfile.BadZipFile", "intent": "The error raised for bad ZIP files.", "question_id": 12778}
{"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}
{"snippet": "decimal.radix()", "intent": "Return Decimal ( 10 ) , the radix ( base ) in which the Decimal class does all its arithmetic .", "question_id": 2465}
{"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}
{"snippet": "turtle.onkey(fun, key)", "intent": "Bind `fun` to key-release event of `key` .", "question_id": 11067}
{"snippet": "SSLContext.load_cert_chain(certfile, keyfile=None)", "intent": "Load a private key and the corresponding certificate . The `certfile` string must be the path to a single file in PEM format containing the certificate as well as any number of CA certificates needed to establish the certificate \u2019 s authenticity . The `keyfile` string , if present , must point to a file containing the private key in .", "question_id": 8998}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this turtle .", "question_id": 11019}
{"snippet": "HTMLParser.get_starttag_text()", "intent": "Return the text of the most recently opened start tag .", "question_id": 4355}
{"snippet": "address_header.groups", "intent": "A tuple of Group objects encoding the addresses and groups found in the header value.", "question_id": 3159}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "errno.EFBIG", "intent": "File too large", "question_id": 3532}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "base_request_handler.setup()", "intent": "Called before the handle ( ) method to perform any initialization actions required .", "question_id": 8784}
{"snippet": "io.BytesIO()", "intent": "A stream implementation using an in-memory bytes buffer .", "question_id": 5110}
{"snippet": "sys.call_tracing(func, args)", "intent": "Call `func` ( *args ) , while tracing is enabled . With arguments `args`.", "question_id": 9772}
{"snippet": "errno.EFAULT", "intent": "Bad address", "question_id": 3519}
{"snippet": "cgi.print_environ_usage()", "intent": "Print a list of useful ( used by CGI ) environment variables in HTML .", "question_id": 1056}
{"snippet": "asyncio.sleep(delay, loop=None)", "intent": "Block for `delay` seconds . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 597}
{"snippet": "test.support.WarningsRecorder", "intent": "Class used to record warnings for unit tests.", "question_id": 10295}
{"snippet": "xml.sax.xmlreader.IncrementalParser", "intent": "In some cases, it is desirable not to parse an input source at once, but to feed chunks of the document as they get available.", "question_id": 12607}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493}
{"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725}
{"snippet": "smtplib.SMTPSenderRefused", "intent": "Sender address refused.", "question_id": 8501}
{"snippet": "test_case.assertLogs()", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11411}
{"snippet": "HTTPPasswordMgr.find_user_password(realm, authuri)", "intent": "Get user/password for given `realm` and URI , if any . With arguments `authuri`.", "question_id": 11858}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713}
{"snippet": "async_result.get()", "intent": "Return the result when it arrives .", "question_id": 6361}
{"snippet": "turtle.listen()", "intent": "Set focus on TurtleScreen ( in order to collect key-events ) .", "question_id": 11063}
{"snippet": "cursor.description", "intent": "This read-only attribute provides the column names of the last query.", "question_id": 8852}
{"snippet": "HMAC.hexdigest()", "intent": "Like digest ( ) except the digest is returned as a string twice the length containing only hexadecimal digits .", "question_id": 4336}
{"snippet": "cmath.pi", "intent": "The mathematical constant \u03c0, as a float.", "question_id": 1120}
{"snippet": "sys.setswitchinterval(interval)", "intent": "Set the interpreter \u2019 s thread switch `interval` ( in seconds ) .", "question_id": 9838}
{"snippet": "sys.version", "intent": "A string containing the version number of the Python interpreter plus additional information on the build number and compiler used.", "question_id": 9852}
{"snippet": "test.support.check_syntax_error(testcase, statement)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "question_id": 10231}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679}
{"snippet": "asyncore.loop(timeout, use_poll)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) .", "question_id": 649}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "test.support.import_fresh_module(name, deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10245}
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "decimal.normalize()", "intent": "Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal ( ' 0 ' ) to Decimal ( '0e0 ' ) .", "question_id": 2457}
{"snippet": "os.path.split(path)", "intent": "Split the pathname `path` into a pair , ( head , tail ) where tail is the last pathname component and head is everything leading up to that .", "question_id": 7169}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037}
{"snippet": "Element.getElementsByTagName(tagName)", "intent": "Same as equivalent method in the Document class . With arguments `tagName`.", "question_id": 12355}
{"snippet": "queue_listener.emit(record)", "intent": "Do whatever it takes to actually log the specified logging `record` .", "question_id": 5609}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "set < other", "intent": "Test whether the set is a proper subset of other, that is, set <= other and set != other.", "question_id": 9441}
{"snippet": "Node.appendChild(newChild)", "intent": "Add a new child node to this node at the end of the list of children , returning `newChild` .", "question_id": 12330}
{"snippet": "typing.Collection(Sized)", "intent": "A generic version of collections.abc.Collection With arguments `Sized`.", "question_id": 11251}
{"snippet": "gettext.install(domain)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) .", "question_id": 4239}
{"snippet": "pickle.Pickler(file)", "intent": "This takes a binary `file` for writing a pickle data stream .", "question_id": 7390}
{"snippet": "decimal.max_mag(other)", "intent": "Similar to the max ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`.", "question_id": 2445}
{"snippet": "difflib.Differ()", "intent": "Optional keyword parameters `linejunk` and `charjunk` are for filter functions ( or None ) :", "question_id": 2690}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN", "intent": "Some token (such as a start tag) was not closed before the end of the stream or the next token was encountered.", "question_id": 7803}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "directory.remove_pyc()", "intent": "Remove .pyc files on uninstall .", "question_id": 6113}
{"snippet": "base_selector.modify(fileobj, events)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8218}
{"snippet": "readline.redisplay()", "intent": "Change what \u2019 s displayed on the screen to reflect the current contents of the line buffer .", "question_id": 8020}
{"snippet": "asyncio.open_connection()", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects .", "question_id": 463}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028}
{"snippet": "Repr.repr_TYPE(obj, level)", "intent": "Formatting methods for specific types are implemented as methods with a name based on the type name . In the method name , TYPE is replaced by ' _'.join ( type ( `obj` ) .__name__.split ( ) ) . Type-specific methods which need to recursively format a value should call self.repr1 ( subobj , `level` - 1 ) .", "question_id": 8068}
{"snippet": "FileCookieJar.filename", "intent": "Filename of default file in which to keep cookies.", "question_id": 4522}
{"snippet": "Request.type", "intent": "The URI scheme.", "question_id": 11817}
{"snippet": "os.getenv(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6668}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds)", "intent": "Run the `cmd` shell command . With arguments `**kwds`.", "question_id": 533}
{"snippet": "doctest.FAIL_FAST", "intent": "When specified, exit after the first failing example and don\u2019t attempt to run the remaining examples.", "question_id": 2763}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "base64.urlsafe_b64encode(s)", "intent": "Encode bytes-like object `s` using the URL- and filesystem-safe alphabet , which substitutes - instead of + and _ instead of / in the standard Base64 alphabet , and return the encoded bytes .", "question_id": 716}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "Wave_write.setsampwidth(n)", "intent": "Set the sample width to `n` bytes .", "question_id": 12066}
{"snippet": "str.index(sub, start, end)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`, `start`, `end`.", "question_id": 9199}
{"snippet": "typing.Type()", "intent": "A variable annotated with C may accept a value of type C. In contrast , a variable annotated with Type [ C ] may accept values that are classes themselves \u2013 specifically , it will accept the class object of C. For example :", "question_id": 11232}
{"snippet": "locale.THOUSEP", "intent": "Get the separator character for thousands (groups of three digits).", "question_id": 5364}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892}
{"snippet": "class.get_methods()", "intent": "Return a tuple containing the names of methods declared in the class .", "question_id": 9752}
{"snippet": "writer.new_styles(styles)", "intent": "Set additional `styles` .", "question_id": 3846}
{"snippet": "context.minus(x)", "intent": "Minus corresponds to the unary prefix minus operator in Python . With arguments `x`.", "question_id": 2553}
{"snippet": "oss_audio_device.mode", "intent": "The I/O mode for the file, either \"r\", \"rw\", or \"w\".", "question_id": 7200}
{"snippet": "window.noutrefresh()", "intent": "Mark for refresh but wait .", "question_id": 2098}
{"snippet": "os.preadv(fd, buffers, offset)", "intent": "Read from a file descriptor `fd` at a position of `offset` into mutable bytes-like objects `buffers` , leaving the file offset unchanged .", "question_id": 6784}
{"snippet": "TarInfo.gid", "intent": "Group ID of the user who originally stored this member.", "question_id": 9988}
{"snippet": "ArgumentParser.add_subparsers()", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit .", "question_id": 84}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832}
{"snippet": "random.choices(population, weights=None, cum_weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7899}
{"snippet": "formatter.AbstractWriter", "intent": "A writer which can be used in debugging formatters, but not much else.", "question_id": 3854}
{"snippet": "DefaultCookiePolicy.strict_ns_domain", "intent": "Flags indicating how strict to be with domain-matching rules for Netscape cookies.", "question_id": 4549}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}
{"snippet": "coverage_results.write_results(show_missing=True)", "intent": "Write coverage results . Set `show_missing` to show lines that had no hits .", "question_id": 10726}
{"snippet": "Protocol.eof_received()", "intent": "Called when the other end signals it won \u2019 t send any more data ( for example by calling transport.write_eof ( ) , if the other end also uses asyncio ) .", "question_id": 436}
{"snippet": "loop.sock_sendfile(sock, file)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket .", "question_id": 281}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "ZipFile.extractall(path=None, pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "question_id": 12823}
{"snippet": "xml.etree.ElementTree.ParseError", "intent": "XML parse error, raised by the various parsing methods in this module when parsing fails.", "question_id": 12561}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "SSLContext.set_ecdh_curve(curve_name)", "intent": "Set the curve name for Elliptic Curve-based Diffie-Hellman ( ECDH ) key exchange . The `curve_name` parameter should be a string describing a well-known elliptic curve , for example prime256v1 for a widely supported curve .", "question_id": 9021}
{"snippet": "socket.getfqdn(name)", "intent": "Return a fully qualified domain `name` for name .", "question_id": 8645}
{"snippet": "smtp_channel.mailfrom", "intent": "Holds a string containing the address identified in the \u201cMAIL FROM:\u201d line from the client.", "question_id": 8443}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "memoryview.tobytes()", "intent": "Return the data in the buffer as a bytestring .", "question_id": 9413}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081}
{"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}
{"snippet": "py_compile.compile(file, dfile=None)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . If `dfile` is specified , it is used as the name of the source file in error messages when instead of file .", "question_id": 7823}
{"snippet": "Dialect.escapechar", "intent": "A one-character string used by the writer to escape the delimiter if quoting is set to QUOTE_NONE and the quotechar if doublequote is False.", "question_id": 1725}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}
{"snippet": "FTP.storbinary(cmd, fp)", "intent": "Store a file in binary transfer mode . `cmd` should be an appropriate STOR command : `` STOR filename '' . `fp` is a file object ( opened in binary mode ) which is read until EOF using its read ( ) method in blocks of size `blocksize` to provide the data to be stored .", "question_id": 3933}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "Pattern.groupindex", "intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "question_id": 7993}
{"snippet": "mailbox.lock()", "intent": "Acquire an exclusive advisory lock on the mailbox so that other processes know not to modify it .", "question_id": 5751}
{"snippet": "calendar.HTMLCalendar(firstweekday=0)", "intent": "This class can be used to generate HTML calendars . With arguments `firstweekday`.", "question_id": 957}
{"snippet": "writer.send_line_break()", "intent": "Break the current line .", "question_id": 3847}
{"snippet": "dialog.line(name, x, y, width, height)", "intent": "Add and return a Line control . With arguments `name`, `x`, `y`, `width`, `height`.", "question_id": 6139}
{"snippet": "code.interact()", "intent": "Convenience function to run a read-eval-print loop .", "question_id": 1161}
{"snippet": "audioop.reverse(fragment, width)", "intent": "Reverse the samples in a `fragment` and returns the modified fragment . With arguments `width`.", "question_id": 703}
{"snippet": "file_finder.find_spec(fullname)", "intent": "Attempt to find the spec to handle `fullname` within path .", "question_id": 4884}
{"snippet": "os.utime(path, ns)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6959}
{"snippet": "str.isnumeric()", "intent": "Return true if all characters in the string are numeric characters , and there is at least one character , false otherwise .", "question_id": 9209}
{"snippet": "subprocess.check_output(args)", "intent": "Run command with arguments and return its output . With arguments `args`.", "question_id": 9679}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003}
{"snippet": "itertools.product(*iterables)", "intent": "Cartesian product of input iterables . With arguments `*iterables`.", "question_id": 5260}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "cursor.connection", "intent": "This read-only attribute provides the SQLite database Connection used by the Cursor object.", "question_id": 8853}
{"snippet": "wsgiref.validate.validator(application)", "intent": "Wrap `application` and return a new WSGI application object .", "question_id": 12235}
{"snippet": "email_message.iter_attachments()", "intent": "Return an iterator over all of the immediate sub-parts of the message that are not candidate \u201c body \u201d parts .", "question_id": 3288}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243}
{"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}
{"snippet": "audioop.lin2adpcm(fragment, width, state)", "intent": "Convert samples to 4 bit Intel/DVI ADPCM encoding . adpcmfrag is the ADPCM coded `fragment` packed 2 4-bit values per byte . `state` is a tuple containing the state of the coder . With arguments `width`.", "question_id": 692}
{"snippet": "os.getpriority(which, who)", "intent": "Get program scheduling priority . The value `which` is one of PRIO_PROCESS , PRIO_PGRP , or PRIO_USER , and `who` is interpreted relative to which ( a process identifier for PRIO_PROCESS , process group identifier for PRIO_PGRP , and a user ID for PRIO_USER ) .", "question_id": 6684}
{"snippet": "operator.countOf(a, b)", "intent": "Return the number of occurrences of `b` in `a` .", "question_id": 6572}
{"snippet": "mailbox.Error", "intent": "The based class for all other module-specific exceptions.", "question_id": 5856}
{"snippet": "msvcrt.putwch(unicode_char)", "intent": "Wide char variant of putch ( ) , accepting a Unicode value . With arguments `unicode_char`.", "question_id": 6161}
{"snippet": "errno.EOVERFLOW", "intent": "Value too large for defined data type", "question_id": 3580}
{"snippet": "logging.handlers.BufferingHandler(capacity)", "intent": "Initializes the handler with a buffer of the specified `capacity` .", "question_id": 5525}
{"snippet": "Dialect.lineterminator", "intent": "The string used to terminate lines produced by the writer.", "question_id": 1726}
{"snippet": "queue_listener.info(msg, *args, **kwargs)", "intent": "Logs a message with level INFO on this logger . With arguments `msg`, `*args`, `**kwargs`.", "question_id": 5571}
{"snippet": "str.lower()", "intent": "Return a copy of the string with all the cased characters 4 converted to lowercase .", "question_id": 9217}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}
{"snippet": "widget.index(tab_id)", "intent": "Returns the numeric index of the tab specified by `tab_id` , or the total number of tabs if tab_id is the string \u201c end \u201d .", "question_id": 10607}
{"snippet": "errno.ESHUTDOWN", "intent": "Cannot send after transport endpoint shutdown", "question_id": 3613}
{"snippet": "urllib.request.urlretrieve(url, filename=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11882}
{"snippet": "formatter.push_alignment(align)", "intent": "Push a new alignment setting onto the alignment stack . If the alignment value is changed from the previous setting , the writer \u2019 s new_alignment ( ) method is called with the `align` value .", "question_id": 3826}
{"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857}
{"snippet": "nntplib.decode_header(header_str)", "intent": "Decode a header value , un-escaping any escaped non-ASCII characters . `header_str` must be a str object .", "question_id": 6502}
{"snippet": "inspect.Signature()", "intent": "A Signature object represents the call signature of a function and its return annotation .", "question_id": 4979}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "inspect.Signature(return_annotation=Signature.empty)", "intent": "A Signature object represents the call signature of a function and its return annotation . The optional `return_annotation` argument , can be an arbitrary Python object , is the \u201c return \u201d annotation of the callable .", "question_id": 4981}
{"snippet": "completed_process.check_returncode()", "intent": "If returncode is non-zero , raise a CalledProcessError .", "question_id": 9582}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "threading.Lock", "intent": "The class implementing primitive lock objects.", "question_id": 10374}
{"snippet": "concurrent.futures.ProcessPoolExecutor(mp_context=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `mp_context` can be a multiprocessing context or None .", "question_id": 1459}
{"snippet": "text_wrapper.break_long_words", "intent": "(default: True) If true, then words longer than width will be broken in order to ensure that no lines are longer than width.", "question_id": 10335}
{"snippet": "email.utils.encode_rfc2231(s)", "intent": "Encode the string `s` according to RFC 2231 .", "question_id": 3479}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "socket.sendmsg(buffers)", "intent": "Send normal and ancillary data to the socket , gathering the non-ancillary data from a series of `buffers` and concatenating it into a single message .", "question_id": 8726}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025}
{"snippet": "dataclasses.replace(instance, **changes)", "intent": "Creates a new object of the same type of `instance` , replacing fields with values from changes . With arguments `**changes`.", "question_id": 2193}
{"snippet": "dict(mapping, **kwarg)", "intent": "Create a new dictionary . With arguments `mapping`, `**kwarg`.", "question_id": 4005}
{"snippet": "email_message.iter_attachments()", "intent": "Return an iterator over all of the immediate sub-parts of the message that are not candidate \u201c body \u201d parts .", "question_id": 3288}
{"snippet": "tkinter.tix.tixCommand", "intent": "The tix commands provide access to miscellaneous elements of Tix\u2019s internal state and the Tix application context.", "question_id": 10579}
{"snippet": "parser.st2list(st, line_info=False)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree . If `line_info` is true , line number information will be included for all terminal tokens as a third element of the list representing the token .", "question_id": 7215}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "statistics.harmonic_mean(data)", "intent": "Return the harmonic mean of `data` , a sequence or iterator of real-valued numbers .", "question_id": 9126}
{"snippet": "cmath.sqrt(x)", "intent": "Return the square root of `x` .", "question_id": 1100}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2805}
{"snippet": "ctypes.c_int32", "intent": "Represents the C 32-bit signed int datatype.", "question_id": 1864}
{"snippet": "ssl.OP_ENABLE_MIDDLEBOX_COMPAT", "intent": "Send dummy Change Cipher Spec (CCS) messages in TLS 1.3 handshake to make a TLS 1.3 connection look more like a TLS 1.2 connection.", "question_id": 8941}
{"snippet": "loop.sendfile(transport, file, offset=0)", "intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file .", "question_id": 257}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "os.removedirs(name)", "intent": "Remove directories recursively . With arguments `name`.", "question_id": 6891}
{"snippet": "xmlrpc.client.Fault", "intent": "A Fault object encapsulates the content of an XML-RPC fault tag.", "question_id": 12689}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "difflib.HtmlDiff", "intent": "This class can be used to create an HTML table (or a complete HTML file containing the table) showing a side by side, line by line comparison of text with inter-line and intra-line change highlights.", "question_id": 2597}
{"snippet": "cgihttp_request_handler.do_POST()", "intent": "This method serves the 'POST ' request type , only allowed for CGI scripts .", "question_id": 4668}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "question_id": 1299}
{"snippet": "html_calendar.cssclasses_weekday_head", "intent": "A list of CSS classes used for weekday names in the header row.", "question_id": 972}
{"snippet": "stat.UF_HIDDEN", "intent": "The file should not be displayed in a GUI (Mac OS X 10.5+).", "question_id": 9119}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982}
{"snippet": "tkinter.Tk(baseName=None)", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`.", "question_id": 10519}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962}
{"snippet": "email.contentmanager.set_content(msg, <'str'>)", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`.", "question_id": 3039}
{"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "queue_listener.flush()", "intent": "Ensure all logging output has been flushed .", "question_id": 5604}
{"snippet": "_func_ptr.argtypes", "intent": "Assign a tuple of ctypes types to specify the argument types that the function accepts.", "question_id": 1788}
{"snippet": "buffering_handler.flush()", "intent": "You can override this to implement custom flushing behavior .", "question_id": 5527}
{"snippet": "scheduler.run(blocking=True)", "intent": "Run all scheduled events . If `blocking` is false executes the scheduled events due to expire soonest ( if any ) and then return the deadline of the next scheduled call in the scheduler ( if any ) .", "question_id": 8129}
{"snippet": "message.get_param(param, unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2994}
{"snippet": "ast.dump(node)", "intent": "Return a formatted dump of the tree in `node` .", "question_id": 163}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "tarfile.TarFile(mode='r')", "intent": "All following arguments are optional and can be accessed as instance attributes as well . `mode` is either ' r ' to read from an existing archive , ' a ' to append data to an existing file , ' w ' to create a new file overwriting an existing one , or ' x ' to create a new file only if it does not already exist .", "question_id": 9915}
{"snippet": "connection.close()", "intent": "This closes the database connection .", "question_id": 8810}
{"snippet": "stat_result.st_flags", "intent": "User defined flags for file.", "question_id": 6938}
{"snippet": "IMAP4.noop()", "intent": "Send NOOP to server .", "question_id": 4718}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951}
{"snippet": "asyncio.AbstractEventLoop", "intent": "Abstract base class for asyncio-compliant event loops.", "question_id": 344}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "Element.setAttributeNode(newAttr)", "intent": "Add a new attribute node to the element , replacing an existing attribute if necessary if the name attribute matches . If `newAttr` is already in use , InuseAttributeErr will be raised .", "question_id": 12367}
{"snippet": "email.utils.format_datetime(dt, usegmt=False)", "intent": "Like formatdate , but the input is a datetime instance . If it is an aware timezone with offset zero , then `usegmt` may be set to True , in which case the string GMT is used instead of the numeric timezone offset . With arguments `dt`.", "question_id": 3477}
{"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040}
{"snippet": "writer.send_line_break()", "intent": "Break the current line .", "question_id": 3847}
{"snippet": "memoryview.format", "intent": "A string containing the format (in struct module style) for each element in the view.", "question_id": 9422}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "FTPHandler.ftp_open(req)", "intent": "Open the FTP file indicated by `req` .", "question_id": 11875}
{"snippet": "winsound.SND_FILENAME", "intent": "The sound parameter is the name of a WAV file.", "question_id": 12196}
{"snippet": "contextlib.redirect_stderr(new_target)", "intent": "Similar to redirect_stdout ( ) but redirecting sys.stderr to another file or file-like object . With arguments `new_target`.", "question_id": 1624}
{"snippet": "doc_test_parser.parse(string)", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings .", "question_id": 2859}
{"snippet": "plistlib.readPlistFromBytes(data)", "intent": "Read a plist `data` from a bytes object .", "question_id": 7581}
{"snippet": "unittest.TestCase(methodName='runTest')", "intent": "Instances of the TestCase class represent the logical test units in the unittest universe . Each instance of TestCase will run a single base method : the method named `methodName` .", "question_id": 11364}
{"snippet": "dict.copy()", "intent": "Return a shallow copy of the dictionary .", "question_id": 9479}
{"snippet": "ossaudiodev.OSSAudioError", "intent": "This exception is raised on certain errors.", "question_id": 7173}
{"snippet": "PurePath.drive", "intent": "A string representing the drive letter or name, if any:", "question_id": 7244}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983}
{"snippet": "tempfile.gettempdir()", "intent": "Return the name of the directory used for temporary files .", "question_id": 10089}
{"snippet": "decimal.FloatOperation", "intent": "Enable stricter semantics for mixing floats and Decimals.", "question_id": 2594}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "deque.clear()", "intent": "Remove all elements from the deque leaving it with length 0 .", "question_id": 1355}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "window.syncok(flag)", "intent": "If `flag` is True , then syncup ( ) is called automatically whenever there is a change in the window .", "question_id": 2122}
{"snippet": "subprocess.STD_OUTPUT_HANDLE", "intent": "The standard output device.", "question_id": 9642}
{"snippet": "queue_listener.format(record)", "intent": "Do formatting for a `record` - if a formatter is set , use it .", "question_id": 5608}
{"snippet": "gc.set_threshold(threshold0, threshold1)", "intent": "Set the garbage collection thresholds ( the collection frequency ) . Setting `threshold0` to zero disables collection . If generation 0 has been examined more than `threshold1` times since generation 1 has been examined , then generation 1 is examined as well .", "question_id": 4177}
{"snippet": "time.ctime()", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time .", "question_id": 10439}
{"snippet": "sys.implementation", "intent": "An object containing information about the implementation of the currently running Python interpreter.", "question_id": 9815}
{"snippet": "IMAP4.login_cram_md5(user, password)", "intent": "Force use of CRAM-MD5 authentication when identifying the client to protect the `password` . With arguments `user`.", "question_id": 4710}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "errno.EMLINK", "intent": "Too many links", "question_id": 3536}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "mailbox.itervalues()", "intent": "Return an iterator over representations of all messages if called as itervalues ( ) or __iter__ ( ) or return a list of such representations if called as values ( ) .", "question_id": 5731}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING", "intent": "A behavioral change was requested after parsing started that can only be changed before parsing has started.", "question_id": 7809}
{"snippet": "sys.ps1", "intent": "Strings specifying the primary and secondary prompt of the interpreter.", "question_id": 9832}
{"snippet": "os.rename(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6892}
{"snippet": "decimal.max_mag(other)", "intent": "Similar to the max ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`.", "question_id": 2445}
{"snippet": "ArgumentParser.print_usage(file=None)", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line . If `file` is None , sys.stdout is assumed .", "question_id": 104}
{"snippet": "os.fdatasync(fd)", "intent": "Force write of file with filedescriptor `fd` to disk .", "question_id": 6721}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "queue.maxsize", "intent": "Number of items allowed in the queue.", "question_id": 449}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823}
{"snippet": "locale.strxfrm(string)", "intent": "Transforms a `string` to one that can be used in locale-aware comparisons .", "question_id": 5383}
{"snippet": "str.join(iterable)", "intent": "Return a string which is the concatenation of the strings in `iterable` .", "question_id": 9214}
{"snippet": "HTMLParser.close()", "intent": "Force processing of all buffered data as if it were followed by an end-of-file mark .", "question_id": 4352}
{"snippet": "extension_file_loader.is_package(fullname)", "intent": "Returns True if the file path points to a package \u2019 s __init__ module based on EXTENSION_SUFFIXES . With arguments `fullname`.", "question_id": 4908}
{"snippet": "asyncio.Transport(WriteTransport, ReadTransport)", "intent": "Interface representing a bidirectional transport , such as a TCP connection . With arguments `WriteTransport`, `ReadTransport`.", "question_id": 393}
{"snippet": "Unpacker.unpack_bytes()", "intent": "Unpacks and returns a variable length byte stream , similarly to unpack_string ( ) .", "question_id": 12296}
{"snippet": "tracemalloc.clear_traces()", "intent": "Clear traces of memory blocks allocated by Python .", "question_id": 10841}
{"snippet": "policy.mangle_from_", "intent": "If True, lines starting with \u201cFrom \u201c in the body are escaped by putting a > in front of them.", "question_id": 3417}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "heapq.merge(*iterables, key=None)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element .", "question_id": 4322}
{"snippet": "subprocess.CREATE_NEW_CONSOLE", "intent": "The new process has a new console, instead of inheriting its parent\u2019s console (the default).", "question_id": 9647}
{"snippet": "i_pv4_address.exploded", "intent": "The string representation in dotted decimal notation.", "question_id": 5177}
{"snippet": "chain.from_iterable(iterable)", "intent": "Alternate constructor for chain ( ) . Gets chained inputs from a single `iterable` argument that is evaluated lazily .", "question_id": 5242}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271}
{"snippet": "BaseCookie.js_output()", "intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP headers was sent .", "question_id": 4592}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX", "intent": "The document attempted to remove the namespace declaration associated with a prefix.", "question_id": 7811}
{"snippet": "contextlib.ExitStack", "intent": "A context manager that is designed to make it easy to programmatically combine other context managers and cleanup functions, especially those that are optional or otherwise driven by input data.", "question_id": 1626}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "ctypes.memset(dst, c, count)", "intent": "Same as the standard C memset library function : fills the memory block at address `dst` with `count` bytes of value c. dst must be an integer specifying an address , or a ctypes instance . With arguments `c`.", "question_id": 1827}
{"snippet": "pkgutil.ImpImporter()", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm .", "question_id": 7437}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992}
{"snippet": "text_io_base.write(s)", "intent": "Write the string `s` to the stream and return the number of characters written .", "question_id": 5145}
{"snippet": "tracemalloc.Traceback", "intent": "Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "question_id": 10894}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "TarFile.add(name)", "intent": "Add the file `name` to the archive .", "question_id": 9949}
{"snippet": "cursor.connection", "intent": "This read-only attribute provides the SQLite database Connection used by the Cursor object.", "question_id": 8853}
{"snippet": "socket.inet_pton(address_family, ip_string)", "intent": "Convert an IP address from its family-specific string format to a packed , binary format . Supported values for `address_family` are currently AF_INET and AF_INET6 . If the IP address string `ip_string` is invalid , OSError will be raised .", "question_id": 8663}
{"snippet": "xml.sax.saxutils.unescape(data, entities={})", "intent": "Unescape ' & amp ; ' , ' & lt ; ' , and ' & gt ; ' in a string of `data` . You can unescape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12655}
{"snippet": "lzma.LZMAFile(check=-1)", "intent": "Open an LZMA-compressed file in binary `mode` . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5670}
{"snippet": "Request.type", "intent": "The URI scheme.", "question_id": 11817}
{"snippet": "ctypes.c_void_p", "intent": "Represents the C void * type.", "question_id": 1880}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "platform.popen(cmd)", "intent": "Portable popen ( ) interface . With arguments `cmd`.", "question_id": 7505}
{"snippet": "exit_stack.pop_all()", "intent": "Transfers the callback stack to a fresh ExitStack instance and returns it .", "question_id": 1630}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_NONE", "intent": "No modifier is given, so it can appear exactly once, as for A.", "question_id": 7783}
{"snippet": "calendar.calendar(year)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class .", "question_id": 1011}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "contextlib.redirect_stdout(new_target)", "intent": "Context manager for temporarily redirecting sys.stdout to another file or file-like object . With arguments `new_target`.", "question_id": 1623}
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461}
{"snippet": "functools.reduce(function, iterable)", "intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . With arguments `iterable`.", "question_id": 4154}
{"snippet": "message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If `replace` is False ( the default ) the header is moved to the end of the list of headers . With arguments `param`.", "question_id": 3004}
{"snippet": "test_suite.addTests(tests)", "intent": "Add all the `tests` from an iterable of TestCase and TestSuite instances to this test suite .", "question_id": 11484}
{"snippet": "dir_entry.is_symlink()", "intent": "Return True if this entry is a symbolic link ( even if broken ) ; return False if the entry points to a directory or any kind of file , or if it doesn \u2019 t exist anymore .", "question_id": 6914}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "queue_listener.emit(record)", "intent": "Do whatever it takes to actually log the specified logging `record` .", "question_id": 5609}
{"snippet": "copy.deepcopy(x)", "intent": "Return a deep copy of `x` .", "question_id": 1663}
{"snippet": "watched_file_handler.reopenIfNeeded()", "intent": "Checks to see if the file has changed .", "question_id": 5448}
{"snippet": "resource_reader.resource_path(resource)", "intent": "Returns the file system path to the `resource` .", "question_id": 4820}
{"snippet": "io.StringIO(initial_value='')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` .", "question_id": 5165}
{"snippet": "compileall.compile_dir(dir, legacy=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1415}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "base_server.socket", "intent": "The socket object on which the server will listen for incoming requests.", "question_id": 8770}
{"snippet": "warnings.warn(message, category=None, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12003}
{"snippet": "email.utils.localtime(dt=None)", "intent": "Return local time as an aware datetime object . Otherwise `dt` argument should be a datetime instance , and it is converted to the local time zone according to the system time zone database .", "question_id": 3453}
{"snippet": "gettext.ngettext(singular, plural, n)", "intent": "Like gettext ( ) , but consider `plural` forms . If no translation is found , return `singular` if n is 1 ; return plural otherwise . If a translation is found , apply the plural formula to `n` , and return the resulting message ( some languages have more than two plural forms ) .", "question_id": 4218}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138}
{"snippet": "Template.reset()", "intent": "Restore a pipeline template to its initial state .", "question_id": 7428}
{"snippet": "test_loader.getTestCaseNames(testCaseClass)", "intent": "Return a sorted sequence of method names found within `testCaseClass` ; this should be a subclass of TestCase .", "question_id": 11498}
{"snippet": "queue.maxsize", "intent": "Number of items allowed in the queue.", "question_id": 449}
{"snippet": "Cookie.port_specified", "intent": "True if a port or set of ports was explicitly specified by the server (in the Set-Cookie / Set-Cookie2 header).", "question_id": 4568}
{"snippet": "errno.EREMOTEIO", "intent": "Remote I/O error", "question_id": 3626}
{"snippet": "str.swapcase()", "intent": "Return a copy of the string with uppercase characters converted to lowercase and vice versa .", "question_id": 9252}
{"snippet": "os.openpty()", "intent": "Open a new pseudo-terminal pair .", "question_id": 6772}
{"snippet": "gettext.find(domain, languages=None)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code .", "question_id": 4223}
{"snippet": "turtle.getscreen()", "intent": "Return the TurtleScreen object the turtle is drawing on .", "question_id": 11037}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757}
{"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}
{"snippet": "asyncio.Server", "intent": "Server objects are asynchronous context managers.", "question_id": 334}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826}
{"snippet": "test.support.make_bad_fd()", "intent": "Create an invalid file descriptor by opening and closing a temporary file , and returning its descriptor .", "question_id": 10230}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4505}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "differ.compare(a, b)", "intent": "Compare two sequences of lines , and generate the delta ( `a` sequence of lines ) . With arguments `b`.", "question_id": 2694}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "csv.writer(csvfile, **fmtparams)", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . With arguments `**fmtparams`.", "question_id": 1682}
{"snippet": "curses.has_il()", "intent": "Return True if the terminal has insert- and delete-line capabilities , or can simulate them using scrolling regions .", "question_id": 1942}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "trace.runctx(cmd)", "intent": "Execute the command and gather statistics from the execution with the current tracing parameters , in the defined global and local environments . With arguments `cmd`.", "question_id": 10717}
{"snippet": "base_selector.register(fileobj, events, data=None)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor . `data` is an opaque object .", "question_id": 8216}
{"snippet": "csvreader.dialect", "intent": "A read-only description of the dialect in use by the parser.", "question_id": 1732}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}
{"snippet": "DictWriter.writeheader()", "intent": "Write a row with the field names ( as specified in the constructor ) .", "question_id": 1738}
{"snippet": "tracemalloc.get_object_traceback(obj)", "intent": "Get the traceback where the Python object `obj` was allocated .", "question_id": 10842}
{"snippet": "AU_write.writeframes(data)", "intent": "Write audio frames and make sure nframes is correct . With arguments `data`.", "question_id": 9729}
{"snippet": "pickle.UnpicklingError", "intent": "Error raised when there is a problem unpickling an object, such as a data corruption or a security violation.", "question_id": 7389}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "imp.C_EXTENSION", "intent": "The module was found as dynamically loadable shared library.", "question_id": 4776}
{"snippet": "context_var.name", "intent": "The name of the variable.", "question_id": 1639}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "ReadTransport.is_reading()", "intent": "Return True if the transport is receiving new data .", "question_id": 402}
{"snippet": "element_tree.write(file, short_empty_elements=True)", "intent": "Writes the element tree to a `file` , as XML . The keyword-only `short_empty_elements` parameter controls the formatting of elements that contain no content .", "question_id": 12532}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "queue_listener.format(record)", "intent": "Do formatting for a `record` - if a formatter is set , use it .", "question_id": 5608}
{"snippet": "Pattern.match(string)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object .", "question_id": 7975}
{"snippet": "SSLContext.wrap_socket(sock, do_handshake_on_connect=True)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `do_handshake_on_connect` specifies whether to do the SSL handshake automatically after doing a socket.connect ( ) , or whether the application program will call it explicitly , by invoking the SSLSocket.do_handshake ( ) method .", "question_id": 9024}
{"snippet": "turtle.settiltangle(angle)", "intent": "Rotate the turtleshape to point in the direction specified by `angle` , regardless of its current tilt-angle .", "question_id": 11005}
{"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}
{"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929}
{"snippet": "sysconfig.get_python_version()", "intent": "Return the MAJOR.MINOR Python version number as a string .", "question_id": 9870}
{"snippet": "stat.S_ISUID", "intent": "Set UID bit.", "question_id": 9094}
{"snippet": "test.support.run_in_subinterp(code)", "intent": "Run `code` in subinterpreter .", "question_id": 10270}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "decimal.exp()", "intent": "Return the value of the ( natural ) exponential function e**x at the given number .", "question_id": 2412}
{"snippet": "element_tree.findtext(match, default=None)", "intent": "Same as Element.findtext ( ) , starting at the root of the tree . With arguments `match`, `default`.", "question_id": 12517}
{"snippet": "socket.recvmsg_into(buffers)", "intent": "Receive normal data and ancillary data from the socket , behaving as recvmsg ( ) would , but scatter the non-ancillary data into a series of `buffers` instead of returning a new bytes object .", "question_id": 8710}
{"snippet": "asyncio.BufferedProtocol(BaseProtocol)", "intent": "A base class for implementing streaming protocols with manual control of the receive buffer . With arguments `BaseProtocol`.", "question_id": 428}
{"snippet": "SSLContext.verify_flags", "intent": "The flags for certificate verification operations.", "question_id": 9050}
{"snippet": "operator.indexOf(a, b)", "intent": "Return the index of the first of occurrence of `b` in `a` .", "question_id": 6577}
{"snippet": "finder.find_module(fullname)", "intent": "An abstract method for finding a loader for the specified module . With arguments `fullname`.", "question_id": 4800}
{"snippet": "FieldStorage.getfirst(name, default=None)", "intent": "This method always returns only one value associated with form field `name` . 1 If no such form field or value exists then the method returns the value specified by the optional parameter `default` .", "question_id": 1027}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6794}
{"snippet": "tixCommand.tix_getbitmap(name)", "intent": "Locates a bitmap file of the `name` name.xpm or name in one of the bitmap directories ( see the tix_addbitmapdir ( ) method ) .", "question_id": 10583}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971}
{"snippet": "gdbm.firstkey()", "intent": "It \u2019 s possible to loop over every key in the database using this method and the nextkey ( ) method .", "question_id": 2374}
{"snippet": "feature.set_current()", "intent": "Make this feature the current feature of msilib .", "question_id": 6124}
{"snippet": "context.keys()", "intent": "Return a list of all variables in the context object .", "question_id": 1658}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING", "intent": "A behavioral change was requested after parsing started that can only be changed before parsing has started.", "question_id": 7809}
{"snippet": "NodeList.length", "intent": "The number of nodes in the sequence.", "question_id": 12337}
{"snippet": "json.load(fp, **kw, cls=None, object_hook=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . `object_hook` is an optional function that will be called with the result of any object literal decoded ( a dict ) . With arguments `**kw`.", "question_id": 5297}
{"snippet": "tabnanny.NannyNag", "intent": "Raised by process_tokens() if detecting an ambiguous indent.", "question_id": 9888}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "completed_process.args", "intent": "The arguments used to launch the process.", "question_id": 9578}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "tarfile.TarFile(mode='r')", "intent": "All following arguments are optional and can be accessed as instance attributes as well . `mode` is either ' r ' to read from an existing archive , ' a ' to append data to an existing file , ' w ' to create a new file overwriting an existing one , or ' x ' to create a new file only if it does not already exist .", "question_id": 9915}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "window.overwrite(destwin, sminrow, smincol, dminrow, dmincol, dmaxrow)", "intent": "Overwrite the window on top of `destwin` . `sminrow` and `smincol` are the upper-left coordinates of the source window , the other variables mark a rectangle in the destination window . With arguments `dminrow`, `dmincol`, `dmaxrow`.", "question_id": 2102}
{"snippet": "cmath.nanj", "intent": "Complex number with zero real part and NaN imaginary part.", "question_id": 1126}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857}
{"snippet": "turtle.onkey(fun, key)", "intent": "Bind `fun` to key-release event of `key` .", "question_id": 11067}
{"snippet": "random.lognormvariate(mu, sigma)", "intent": "Log normal distribution . If you take the natural logarithm of this distribution , you \u2019 ll get a normal distribution with mean `mu` and standard deviation `sigma` .", "question_id": 7913}
{"snippet": "TarInfo.size", "intent": "Size in bytes.", "question_id": 9982}
{"snippet": "lzma.compress(data, format=FORMAT_XZ)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5705}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941}
{"snippet": "dis.findlabels(code)", "intent": "Detect all offsets in the `code` object code which are jump targets , and return a list of these offsets .", "question_id": 2730}
{"snippet": "sys.ps1", "intent": "Strings specifying the primary and secondary prompt of the interpreter.", "question_id": 9832}
{"snippet": "loop.create_connection(protocol_factory, family=0)", "intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation . The socket `family` can be either AF_INET or AF_INET6 depending on host ( or the family argument , if provided ) .", "question_id": 206}
{"snippet": "turtle.title(titlestring)", "intent": "Set title of turtle window to `titlestring` .", "question_id": 11157}
{"snippet": "Unpacker.unpack_float()", "intent": "Unpacks a single-precision floating point number .", "question_id": 12290}
{"snippet": "window.untouchwin()", "intent": "Mark all lines in the window as unchanged since the last call to refresh ( ) .", "question_id": 2128}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454}
{"snippet": "opname", "intent": "human readable name for operation", "question_id": 2735}
{"snippet": "os.getppid()", "intent": "Return the parent \u2019 s process id .", "question_id": 6683}
{"snippet": "xmlrpc.client.Fault", "intent": "A Fault object encapsulates the content of an XML-RPC fault tag.", "question_id": 12689}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "email.message_from_string(s)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) .", "question_id": 3404}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`.", "question_id": 10304}
{"snippet": "turtle.setworldcoordinates(llx, lly, urx, ury)", "intent": "Set up user-defined coordinate system and switch to mode \u201c world \u201d if necessary . With arguments `llx`, `lly`, `urx`, `ury`.", "question_id": 11055}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962}
{"snippet": "datetime.hour", "intent": "In range(24).", "question_id": 2275}
{"snippet": "deque.append(x)", "intent": "Add `x` to the right side of the deque .", "question_id": 1353}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660}
{"snippet": "TarFile.extractall(numeric_owner=False)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "question_id": 9935}
{"snippet": "test_result.skipped", "intent": "A list containing 2-tuples of TestCase instances and strings holding the reason for skipping the test.", "question_id": 11510}
{"snippet": "async_result.successful()", "intent": "Return whether the call completed without raising an exception .", "question_id": 6365}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "shlex.get_token()", "intent": "Return a token .", "question_id": 8283}
{"snippet": "auto.object", "intent": "The object the codec was attempting to encode or decode.", "question_id": 3676}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "Node.toxml()", "intent": "Return a string or byte string containing the XML represented by the DOM node .", "question_id": 12411}
{"snippet": "stat.UF_COMPRESSED", "intent": "The file is stored compressed (Mac OS X 10.6+).", "question_id": 9118}
{"snippet": "base_handler.os_environ", "intent": "The default environment variables to be included in every request\u2019s WSGI environment.", "question_id": 12256}
{"snippet": "ImportWarning", "intent": "Base class for warnings about probable mistakes in module imports.", "question_id": 3708}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "email_policy.fold(name, value)", "intent": "Header folding is controlled by the refold_source policy setting . A `value` is considered to be a \u2018 source value \u2019 if and only if it does not have a `name` attribute ( having a name attribute means it is a header object of some sort ) .", "question_id": 3437}
{"snippet": "tracemalloc.stop()", "intent": "Stop tracing Python memory allocations : uninstall hooks on Python memory allocators .", "question_id": 10849}
{"snippet": "html_diff.__init__(linejunk=None)", "intent": "Initializes instance of HtmlDiff . `linejunk` and `charjunk` are optional keyword arguments passed into ndiff ( ) ( used by HtmlDiff to generate the side by side HTML differences ) .", "question_id": 2601}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}
{"snippet": "IMAP4.noop()", "intent": "Send NOOP to server .", "question_id": 4718}
{"snippet": "multiprocessing.Semaphore()", "intent": "A semaphore object : a close analog of threading.Semaphore .", "question_id": 6264}
{"snippet": "message.__getitem__(name)", "intent": "Return the value of the named header field . `name` should not include the colon field separator .", "question_id": 2966}
{"snippet": "_func_ptr.errcheck", "intent": "Assign a Python function or another callable to this attribute.", "question_id": 1789}
{"snippet": "stat.ST_MODE", "intent": "Inode protection mode.", "question_id": 9074}
{"snippet": "InputSource.setEncoding(encoding)", "intent": "Sets the character `encoding` of this InputSource .", "question_id": 12638}
{"snippet": "Pattern.match(string)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object .", "question_id": 7975}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "binascii.b2a_uu(data)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char .", "question_id": 821}
{"snippet": "hash.name", "intent": "The canonical name of this hash, always lowercase and always suitable as a parameter to new() to create another hash of this type.", "question_id": 4303}
{"snippet": "tkinter.tix.DirSelectBox", "intent": "The DirSelectBox is similar to the standard Motif(TM) directory-selection box.", "question_id": 10566}
{"snippet": "pickle.Unpickler(file)", "intent": "This takes a binary `file` for reading a pickle data stream .", "question_id": 7398}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "importlib.abc.ExecutionLoader", "intent": "An abstract base class which inherits from InspectLoader that, when implemented, helps a module to be executed as a script.", "question_id": 4833}
{"snippet": "asyncio.wrap_future(future)", "intent": "Wrap a concurrent.futures.Future object in a asyncio.Future object . With arguments `future`.", "question_id": 357}
{"snippet": "os.removedirs(name)", "intent": "Remove directories recursively . With arguments `name`.", "question_id": 6891}
{"snippet": "imaplib.IMAP4_SSL(keyfile=None)", "intent": "This is a subclass derived from IMAP4 that connects over an SSL encrypted socket ( to use this class you need a socket module that was compiled with SSL support ) . `keyfile` and `certfile` are a legacy alternative to ssl_context - they can point to PEM-formatted private key and certificate chain files for the SSL connection .", "question_id": 4679}
{"snippet": "platform.win32_ver()", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7495}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460}
{"snippet": "robot_file_parser.modified()", "intent": "Sets the time the robots.txt file was last fetched to the current time .", "question_id": 11914}
{"snippet": "mimetypes.guess_extension(type)", "intent": "Guess the extension for a file based on its MIME `type` , given by type .", "question_id": 5943}
{"snippet": "style.theme_create(themename)", "intent": "Create a new theme . It is an error if `themename` already exists .", "question_id": 10686}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "readline.insert_text(string)", "intent": "Insert text into the line buffer at the cursor position . With arguments `string`.", "question_id": 8019}
{"snippet": "errno.ECOMM", "intent": "Communication error on send", "question_id": 3575}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927}
{"snippet": "email.mime.application.MIMEApplication(_data, **_params, _subtype='octet-stream')", "intent": "Module : email.mime.application `_data` is a string containing the raw byte data . Optional `_subtype` specifies the MIME subtype and defaults to octet-stream . With arguments `**_params`.", "question_id": 3327}
{"snippet": "logging.handlers.HTTPHandler(host, url, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5544}
{"snippet": "str.splitlines(keepends)", "intent": "Return a list of the lines in the string , breaking at line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9245}
{"snippet": "socket.ntohl(x)", "intent": "Convert 32-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8657}
{"snippet": "text_wrapper.max_lines", "intent": "(default: None) If not None, then the output will contain at most max_lines lines, with placeholder appearing at the end of the output.", "question_id": 10337}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460}
{"snippet": "mailbox.iteritems()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5734}
{"snippet": "json.load(fp, **kw)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5290}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}
{"snippet": "pickle.Unpickler(file)", "intent": "This takes a binary `file` for reading a pickle data stream .", "question_id": 7398}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026}
{"snippet": "mock.mock_calls", "intent": "mock_calls records all calls to the mock object, its methods, magic methods and return value mocks.", "question_id": 11595}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717}
{"snippet": "email.headerregistry.DateHeader", "intent": "RFC 5322 specifies a very specific format for dates within email headers.", "question_id": 3156}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "errno.EPERM", "intent": "Operation not permitted", "question_id": 3506}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "config_parser.get(section, option)", "intent": "Get an `option` value for the named `section` .", "question_id": 1524}
{"snippet": "errno.EMFILE", "intent": "Too many open files", "question_id": 3529}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "types.DynamicClassAttribute()", "intent": "Route attribute access on a class to __getattr__ .", "question_id": 11218}
{"snippet": "ssl.enum_certificates(store_name)", "intent": "Retrieve certificates from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8899}
{"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL", "intent": "There was an error parsing a text declaration in an external entity.", "question_id": 7814}
{"snippet": "errno.ELIBBAD", "intent": "Accessing a corrupted shared library", "question_id": 3585}
{"snippet": "math.floor(x)", "intent": "Return the floor of `x` , the largest integer less than or equal to x .", "question_id": 5889}
{"snippet": "ZipInfo.file_size", "intent": "Size of the uncompressed file.", "question_id": 12879}
{"snippet": "pool.map(func, iterable)", "intent": "A parallel equivalent of the map ( ) built-in function ( it supports only one `iterable` argument though ) . With arguments `func`.", "question_id": 6341}
{"snippet": "warnings.formatwarning(message, category, filename, lineno)", "intent": "Format a warning the standard way . `line` is a line of source code to be included in the warning `message` ; if line is not supplied , formatwarning ( ) will try to read the line specified by `filename` and `lineno` . With arguments `category`.", "question_id": 12021}
{"snippet": "Node.unlink()", "intent": "Break internal references within the DOM so that it will be garbage collected on versions of Python without cyclic GC .", "question_id": 12402}
{"snippet": "errno.EREMOTEIO", "intent": "Remote I/O error", "question_id": 3626}
{"snippet": "NotImplemented", "intent": "Special value which should be returned by the binary special methods (e.g.", "question_id": 1605}
{"snippet": "NNTP.help(file=None)", "intent": "Send a HELP command . With arguments `file`.", "question_id": 6475}
{"snippet": "socket.if_nametoindex(if_name)", "intent": "Return a network interface index number corresponding to an interface name . With arguments `if_name`.", "question_id": 8671}
{"snippet": "errno.EBADFD", "intent": "File descriptor in bad state", "question_id": 3582}
{"snippet": "email.headerregistry.HeaderRegistry(base_class=BaseHeader)", "intent": "This is the factory used by EmailPolicy by default . HeaderRegistry builds the class used to create a header instance dynamically , using `base_class` and a specialized class retrieved from a registry that it holds .", "question_id": 3176}
{"snippet": "HTTPResponse.reason", "intent": "Reason phrase returned by server.", "question_id": 4465}
{"snippet": "@test.support.anticipate_failure(condition)", "intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "question_id": 10208}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "somenamedtuple._field_defaults", "intent": "Dictionary mapping field names to default values.", "question_id": 1388}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453}
{"snippet": "curses.has_colors()", "intent": "Return True if the terminal can display colors ; otherwise , return False .", "question_id": 1940}
{"snippet": "IMAP4.xatom()", "intent": "Allow simple extension commands notified by server in CAPABILITY response .", "question_id": 4753}
{"snippet": "base_server.get_request()", "intent": "Must accept a request from the socket , and return a 2-tuple containing the new socket object to be used to communicate with the client , and the client \u2019 s address .", "question_id": 8776}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "socket.sendfile(file, count=None)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 8734}
{"snippet": "stats.dump_stats(filename)", "intent": "Save the data loaded into the Stats object to a file named `filename` .", "question_id": 7692}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "Protocol.data_received(data)", "intent": "Called when some `data` is received .", "question_id": 435}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "SMTP.verify(address)", "intent": "Check the validity of an `address` on this server using SMTP VRFY .", "question_id": 8521}
{"snippet": "logging.log(level, msg, *args, **kwargs)", "intent": "Logs a message with `level` level on the root logger . With arguments `msg`, `*args`, `**kwargs`.", "question_id": 5643}
{"snippet": "base_header.defects", "intent": "A tuple of HeaderDefect instances reporting any RFC compliance problems found during parsing.", "question_id": 3152}
{"snippet": "shlex.shlex(punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8277}
{"snippet": "TarInfo.gid", "intent": "Group ID of the user who originally stored this member.", "question_id": 9988}
{"snippet": "base_server.server_close()", "intent": "Clean up the server .", "question_id": 8766}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "SSLContext.maximum_version", "intent": "A TLSVersion enum member representing the highest supported TLS version.", "question_id": 9044}
{"snippet": "os.EX_IOERR", "intent": "Exit code that means that an error occurred while doing I/O on some file.", "question_id": 7029}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "json.dump(obj, fp, **kw, allow_nan=True)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `allow_nan` is false ( default : True ) , then it will be a ValueError to serialize out of range float values ( nan , inf , -inf ) in strict compliance of the JSON specification . With arguments `**kw`.", "question_id": 5274}
{"snippet": "queue_listener.__init__()", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5594}
{"snippet": "task.print_stack(file=None)", "intent": "Print the stack or traceback for this Task . The `file` argument is an I/O stream to which the output is written ; by default output is written to sys.stderr .", "question_id": 638}
{"snippet": "buffering_handler.flush()", "intent": "You can override this to implement custom flushing behavior .", "question_id": 5527}
{"snippet": "stringprep.in_table_c3(code)", "intent": "Determine whether `code` is in tableC.3 ( Private use ) .", "question_id": 9541}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982}
{"snippet": "errno.ENOTUNIQ", "intent": "Name not unique on network", "question_id": 3581}
{"snippet": "linecache.lazycache(filename, module_globals)", "intent": "Capture enough detail about a non-file-based module to permit getting its lines later via getline ( ) even if `module_globals` is None in the later call . With arguments `filename`.", "question_id": 5348}
{"snippet": "nntp_ssl.response", "intent": "The response of the server if available, as a str object.", "question_id": 6440}
{"snippet": "Node.toxml(encoding=None)", "intent": "Return a string or byte string containing the XML represented by the DOM node . With an explicit `encoding` 1 argument , the result is a byte string in the specified encoding .", "question_id": 12412}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060}
{"snippet": "style.theme_create(themename)", "intent": "Create a new theme . It is an error if `themename` already exists .", "question_id": 10686}
{"snippet": "ctypes.c_double", "intent": "Represents the C double datatype.", "question_id": 1858}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "email.utils.format_datetime(dt, usegmt=False)", "intent": "Like formatdate , but the input is a datetime instance . If it is an aware timezone with offset zero , then `usegmt` may be set to True , in which case the string GMT is used instead of the numeric timezone offset . With arguments `dt`.", "question_id": 3477}
{"snippet": "property(fdel=None)", "intent": "Return a property attribute . `fdel` is a function for deleting an attribute value .", "question_id": 4088}
{"snippet": "zipimporter.find_module(fullname, path)", "intent": "Search for a module specified by `fullname` . The optional `path` argument is ignored\u2014it \u2019 s there for compatibility with the importer protocol .", "question_id": 12882}
{"snippet": "window.clrtoeol()", "intent": "Erase from cursor to the end of the line .", "question_id": 2037}
{"snippet": "HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)", "intent": "Return a Request or None in response to a redirect . If a redirection should take place , return a new Request to allow http_error_30* ( ) to perform the redirect to `newurl` . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11850}
{"snippet": "symbol_table.get_id()", "intent": "Return the table \u2019 s identifier .", "question_id": 9735}
{"snippet": "tarfile.StreamError", "intent": "Is raised for the limitations that are typical for stream-like TarFile objects.", "question_id": 9905}
{"snippet": "cursor.fetchone()", "intent": "Fetches the next row of a query result set , returning a single sequence , or None when no more data is available .", "question_id": 8844}
{"snippet": "future.add_done_callback(callback, context=None)", "intent": "Add a `callback` to be run when the Future is done . An optional keyword-only `context` argument allows specifying a custom contextvars.Context for the callback to run in .", "question_id": 367}
{"snippet": "multiprocessing.AuthenticationError", "intent": "Raised when there is an authentication error.", "question_id": 6191}
{"snippet": "base_http_request_handler.headers", "intent": "Holds an instance of the class specified by the MessageClass class variable.", "question_id": 4624}
{"snippet": "io.FileIO(name, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener .", "question_id": 5102}
{"snippet": "ssl.SSLZeroReturnError", "intent": "A subclass of SSLError raised when trying to read or write and the SSL connection has been closed cleanly.", "question_id": 8876}
{"snippet": "zlib.error", "intent": "Exception raised on compression and decompression errors.", "question_id": 12892}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "locale.CRNCYSTR", "intent": "Get the currency symbol, preceded by \u201c-\u201d if the symbol should appear before the value, \u201c+\u201d if the symbol should appear after the value, or \u201c.\u201d if the symbol should replace the radix character.", "question_id": 5367}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}
{"snippet": "config_parser.getfloat(section, option)", "intent": "A convenience method which coerces the `option` in the specified `section` to a floating point number .", "question_id": 1540}
{"snippet": "os.path.split(path)", "intent": "Split the pathname `path` into a pair , ( head , tail ) where tail is the last pathname component and head is everything leading up to that .", "question_id": 7169}
{"snippet": "str.rjust(width)", "intent": "Return the string right justified in a string of length `width` .", "question_id": 9233}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}
{"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}
{"snippet": "ipaddress.get_mixed_type_key(obj)", "intent": "Return a key suitable for sorting between networks and addresses . `obj` is either a network or address object .", "question_id": 5236}
{"snippet": "sys.getsizeof(object)", "intent": "Return the size of an `object` in bytes .", "question_id": 9803}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}
{"snippet": "thread.daemon", "intent": "A boolean value indicating whether this thread is a daemon thread (True) or not (False).", "question_id": 10371}
{"snippet": "cursor.executemany(sql, seq_of_parameters)", "intent": "Executes an SQL command against all parameter sequences or mappings found in the sequence `seq_of_parameters` . With arguments `sql`.", "question_id": 8842}
{"snippet": "wsgiref.handlers.IISCGIHandler", "intent": "A specialized alternative to CGIHandler, for use when deploying on Microsoft\u2019s IIS web server, without having set the config allowPathInfo option (IIS>=7) or metabase allowPathInfoForScriptMappings (IIS<7).", "question_id": 12237}
{"snippet": "xmlrpc.client.loads(data)", "intent": "Convert an XML-RPC request or response into Python objects , a ( params , methodname ) . The `use_builtin_types` flag can be used to cause date/time values to be presented as datetime.datetime objects and binary `data` to be presented as bytes objects ; this flag is false by default .", "question_id": 12708}
{"snippet": "threading.settrace(func)", "intent": "Set a trace function for all threads started from the threading module . The `func` will be passed to sys.settrace ( ) for each thread , before its run ( ) method is called .", "question_id": 10346}
{"snippet": "platform.system()", "intent": "Returns the system/OS name , e.g .", "question_id": 7481}
{"snippet": "dataclasses.replace(instance, **changes)", "intent": "Creates a new object of the same type of `instance` , replacing fields with values from changes . With arguments `**changes`.", "question_id": 2193}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "io_base.readline()", "intent": "Read and return one line from the stream .", "question_id": 5070}
{"snippet": "socket.inet_pton(address_family, ip_string)", "intent": "Convert an IP address from its family-specific string format to a packed , binary format . Supported values for `address_family` are currently AF_INET and AF_INET6 . If the IP address string `ip_string` is invalid , OSError will be raised .", "question_id": 8663}
{"snippet": "base_selector.select()", "intent": "Wait until some registered file objects become ready , or the `timeout` expires .", "question_id": 8220}
{"snippet": "@contextlib.contextmanager", "intent": "This function is a decorator that can be used to define a factory function for with statement context managers, without needing to create a class or separate __enter__() and __exit__() methods.", "question_id": 1617}
{"snippet": "ssl.HAS_SNI", "intent": "Whether the OpenSSL library has built-in support for the Server Name Indication extension (as defined in RFC 6066).", "question_id": 8948}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "ssl.PROTOCOL_TLS", "intent": "Selects the highest protocol version that both the client and server support.", "question_id": 8921}
{"snippet": "email.header.Header()", "intent": "Create a MIME-compliant header that can contain strings in different character sets .", "question_id": 3116}
{"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971}
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060}
{"snippet": "sequence_matcher.quick_ratio()", "intent": "Return an upper bound on ratio ( ) relatively quickly .", "question_id": 2688}
{"snippet": "inspect.CO_NOFREE", "intent": "The flag is set if there are no free or cell variables.", "question_id": 5046}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name)", "intent": "Create zip file at `zip_dir` and `zip_basename` with extension zip which contains the files in `script_name` .", "question_id": 10310}
{"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300}
{"snippet": "py_compile.PycInvalidationMode", "intent": "A enumeration of possible methods the interpreter can use to determine whether a bytecode file is up to date with a source file.", "question_id": 7831}
{"snippet": "resource.RUSAGE_SELF", "intent": "Pass to getrusage() to request resources consumed by the calling process, which is the sum of resources used by all threads in the process.", "question_id": 8097}
{"snippet": "locale.currency(val, symbol=True, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5397}
{"snippet": "HTTPPasswordMgr.find_user_password(realm, authuri)", "intent": "Get user/password for given `realm` and URI , if any . With arguments `authuri`.", "question_id": 11858}
{"snippet": "readline.add_history(line)", "intent": "Append `line` to the history buffer , as if it was the last line typed .", "question_id": 8034}
{"snippet": "chunk.getname()", "intent": "Returns the name ( ID ) of the chunk .", "question_id": 1083}
{"snippet": "time.perf_counter()", "intent": "Return the value ( in fractional seconds ) of a performance counter , i.e .", "question_id": 10448}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460}
{"snippet": "socket.inet_pton(address_family, ip_string)", "intent": "Convert an IP address from its family-specific string format to a packed , binary format . Supported values for `address_family` are currently AF_INET and AF_INET6 . If the IP address string `ip_string` is invalid , OSError will be raised .", "question_id": 8663}
{"snippet": "configparser.ConfigParser(':'), ';'), delimiters=('=')", "intent": "The main configuration parser . When `delimiters` is given , it is used as the set of substrings that divide keys from values . With arguments `':')`, `';')`.", "question_id": 1500}
{"snippet": "parser.parse(fp)", "intent": "Read all the data from the text-mode file-like object `fp` , parse the resulting text , and return the root message object .", "question_id": 3388}
{"snippet": "statistic.size", "intent": "Total size of memory blocks in bytes (int).", "question_id": 10882}
{"snippet": "@reprlib.recursive_repr()", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread .", "question_id": 8053}
{"snippet": "textwrap.indent(text, prefix)", "intent": "Add `prefix` to the beginning of selected lines in `text` .", "question_id": 10324}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "ssl.MemoryBIO", "intent": "A memory buffer that can be used to pass data between Python and an SSL protocol instance.", "question_id": 9053}
{"snippet": "aifc.setsampwidth(width)", "intent": "Specify the size in bytes of audio samples . With arguments `width`.", "question_id": 28}
{"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615}
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014}
{"snippet": "sax2_dom.getEvent()", "intent": "Return a tuple containing event and the current node as xml.dom.minidom.Document if event equals START_DOCUMENT , xml.dom.minidom.Element if event equals START_ELEMENT or END_ELEMENT or xml.dom.minidom.Text if event equals CHARACTERS .", "question_id": 12432}
{"snippet": "process.terminate()", "intent": "Stop the child process .", "question_id": 551}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221}
{"snippet": "doctest.REPORT_ONLY_FIRST_FAILURE", "intent": "When specified, display the first failing example in each doctest, but suppress output for all remaining examples.", "question_id": 2762}
{"snippet": "turtle.shapetransform(t22=None)", "intent": "Set or return the current transformation matrix of the turtle shape . The determinant t11 * `t22` - t12 * t21 must not be zero , otherwise an error is raised .", "question_id": 11012}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "SSLContext.load_cert_chain(certfile, keyfile=None, password=None)", "intent": "Load a private key and the corresponding certificate . The `certfile` string must be the path to a single file in PEM format containing the certificate as well as any number of CA certificates needed to establish the certificate \u2019 s authenticity . The `keyfile` string , if present , must point to a file containing the private key in . The `password` argument may be a function to call to get the password for decrypting the private key .", "question_id": 9000}
{"snippet": "str.lower()", "intent": "Return a copy of the string with all the cased characters 4 converted to lowercase .", "question_id": 9217}
{"snippet": "fileinput.isstdin()", "intent": "Returns true if the last line was read from sys.stdin , otherwise returns false .", "question_id": 3797}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "msilib.Binary(filename)", "intent": "Represents entries in the Binary table ; inserting such an object using add_data ( ) reads the file named `filename` into the table .", "question_id": 6064}
{"snippet": "test_loader.discover(start_dir)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory .", "question_id": 11499}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "lzma.compress(data, format=FORMAT_XZ)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5705}
{"snippet": "Packer.reset()", "intent": "Resets the pack buffer to the empty string .", "question_id": 12274}
{"snippet": "winsound.SND_ASYNC", "intent": "Return immediately, allowing sounds to play asynchronously.", "question_id": 12201}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "test.support.check_syntax_error(testcase, statement)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "question_id": 10231}
{"snippet": "errno.ENOSR", "intent": "Out of streams resources", "question_id": 3568}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "connection.row_factory", "intent": "You can change this attribute to a callable that accepts the cursor and the original row as a tuple and will return the real result row.", "question_id": 8825}
{"snippet": "SubprocessProtocol.process_exited()", "intent": "Called when the child process has exited .", "question_id": 444}
{"snippet": "shlex.infile", "intent": "The name of the current input file, as initially set at class instantiation time or stacked by later source requests.", "question_id": 8301}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "signature.replace()", "intent": "Create a new Signature instance based on the instance replace was invoked on .", "question_id": 4990}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "gc.set_threshold(threshold0)", "intent": "Set the garbage collection thresholds ( the collection frequency ) . Setting `threshold0` to zero disables collection .", "question_id": 4178}
{"snippet": "SSLContext.cert_store_stats()", "intent": "Get statistics about quantities of loaded X.509 certificates , count of X.509 certificates flagged as CA certificates and certificate revocation lists as dictionary .", "question_id": 8996}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "errno.ENOMEM", "intent": "Out of memory", "question_id": 3517}
{"snippet": "bdb.run(cmd)", "intent": "Debug a statement executed via the exec ( ) function . With arguments `cmd`.", "question_id": 807}
{"snippet": "asyncio.SelectorEventLoop", "intent": "An event loop based on the selectors module.", "question_id": 342}
{"snippet": "selectors.DefaultSelector", "intent": "The default selector class, using the most efficient implementation available on the current platform.", "question_id": 8225}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564}
{"snippet": "zlib.compressobj()", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once .", "question_id": 12907}
{"snippet": "class.get_methods()", "intent": "Return a tuple containing the names of methods declared in the class .", "question_id": 9752}
{"snippet": "stat.ST_SIZE", "intent": "Size in bytes of a plain file; amount of data waiting on some special files.", "question_id": 9080}
{"snippet": "turtle.circle(radius, steps=None)", "intent": "Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10925}
{"snippet": "queue_listener.createLock()", "intent": "Initializes a thread lock which can be used to serialize access to underlying I/O functionality which may not be threadsafe .", "question_id": 5596}
{"snippet": "ossaudiodev.OSSAudioError", "intent": "This exception is raised on certain errors.", "question_id": 7173}
{"snippet": "readline.append_history_file(nelements)", "intent": "Append the last `nelements` items of history to a file .", "question_id": 8026}
{"snippet": "pkgutil.ImpImporter()", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm .", "question_id": 7437}
{"snippet": "token.NL", "intent": "Token value used to indicate a non-terminating newline.", "question_id": 10699}
{"snippet": "test_loader.errors", "intent": "A list of the non-fatal errors encountered while loading tests.", "question_id": 11490}
{"snippet": "symbol_table.get_id()", "intent": "Return the table \u2019 s identifier .", "question_id": 9735}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "dis.hasfree", "intent": "Sequence of bytecodes that access a free variable (note that \u2018free\u2019 in this context refers to names in the current scope that are referenced by inner scopes or names in outer scopes that are referenced from this scope.", "question_id": 2746}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}
{"snippet": "widget.index(tab_id)", "intent": "Returns the numeric index of the tab specified by `tab_id` , or the total number of tabs if tab_id is the string \u201c end \u201d .", "question_id": 10607}
{"snippet": "queue.put_nowait(obj)", "intent": "Equivalent to put ( `obj` , False ) .", "question_id": 6203}
{"snippet": "NNTP.login()", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6451}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009}
{"snippet": "stat_result.st_gen", "intent": "File generation number.", "question_id": 6939}
{"snippet": "dataclasses.Field", "intent": "Field objects describe each defined field.", "question_id": 2177}
{"snippet": "coverage_results.update(other)", "intent": "Merge in data from another CoverageResults object . With arguments `other`.", "question_id": 10724}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201}
{"snippet": "re.L", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7929}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "null_translations.install(names=None)", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "question_id": 4259}
{"snippet": "connection.text_factory", "intent": "Using this attribute you can control what objects are returned for the TEXT data type.", "question_id": 8826}
{"snippet": "gc.get_count()", "intent": "Return the current collection counts as a tuple of ( count0 , count1 , count2 ) .", "question_id": 4179}
{"snippet": "counter.update()", "intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) .", "question_id": 1349}
{"snippet": "socket.inet_aton(ip_string)", "intent": "Convert an IPv4 address from dotted-quad string format ( for example , \u2018 123.45.67.89 \u2019 ) to 32-bit packed binary format , as a bytes object four characters in length . With arguments `ip_string`.", "question_id": 8661}
{"snippet": "email.policy.compat32", "intent": "An instance of Compat32, providing  backward compatibility with the behavior of the email package in Python 3.2.", "question_id": 3451}
{"snippet": "dispatcher.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 671}
{"snippet": "POP3.noop()", "intent": "Do nothing .", "question_id": 7614}
{"snippet": "tkinter.tix.OptionMenu", "intent": "The OptionMenu creates a menu button of options.", "question_id": 10559}
{"snippet": "loop.close()", "intent": "Close the event loop .", "question_id": 187}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "subprocess.check_call(args, stdout=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`.", "question_id": 9671}
{"snippet": "random.seed()", "intent": "Initialize the random number generator .", "question_id": 7883}
{"snippet": "text_io_base.newlines", "intent": "A string, a tuple of strings, or None, indicating the newlines translated so far.", "question_id": 5135}
{"snippet": "scheduler.run()", "intent": "Run all scheduled events .", "question_id": 8128}
{"snippet": "ctypes.c_short", "intent": "Represents the C signed short datatype.", "question_id": 1868}
{"snippet": "str.index(sub, start, end)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`, `start`, `end`.", "question_id": 9199}
{"snippet": "signal.ITIMER_REAL", "intent": "Decrements interval timer in real time, and delivers SIGALRM upon expiration.", "question_id": 8379}
{"snippet": "file_finder.find_spec(fullname)", "intent": "Attempt to find the spec to handle `fullname` within path .", "question_id": 4884}
{"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}
{"snippet": "binascii.b2a_uu(data)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char .", "question_id": 821}
{"snippet": "json.JSONDecoder()", "intent": "Simple JSON decoder .", "question_id": 5310}
{"snippet": "sys.api_version", "intent": "The C API version for this interpreter.", "question_id": 9853}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716}
{"snippet": "time.thread_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current thread .", "question_id": 10459}
{"snippet": "sys.getrecursionlimit()", "intent": "Return the current value of the recursion limit , the maximum depth of the Python interpreter stack .", "question_id": 9801}
{"snippet": "weakref.WeakValueDictionary(dict)", "intent": "Mapping class that references values weakly . With arguments `dict`.", "question_id": 12084}
{"snippet": "startupinfo.hStdInput", "intent": "If dwFlags specifies STARTF_USESTDHANDLES, this attribute is the standard input handle for the process.", "question_id": 9636}
{"snippet": "socket.ioctl(control, option)", "intent": "The ioctl ( ) method is a limited interface to the WSAIoctl system interface . Currently only the following `control` codes are supported : SIO_RCVALL , SIO_KEEPALIVE_VALS , and SIO_LOOPBACK_FAST_PATH . With arguments `option`.", "question_id": 8688}
{"snippet": "sequence_matcher.set_seqs(a, b)", "intent": "Set the two sequences to be compared . With arguments `a`, `b`.", "question_id": 2679}
{"snippet": "set &= other & ...", "intent": "Update the set, keeping only elements found in it and all others.", "question_id": 9457}
{"snippet": "condition.notify_all()", "intent": "Wake up all tasks waiting on this condition .", "question_id": 577}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket .", "question_id": 9023}
{"snippet": "errno.ELIBMAX", "intent": "Attempting to link in too many shared libraries", "question_id": 3587}
{"snippet": "pprint.PrettyPrinter(indent=1, depth=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7630}
{"snippet": "ssl.OP_SINGLE_DH_USE", "intent": "Prevents re-use of the same DH key for distinct SSL sessions.", "question_id": 8939}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951}
{"snippet": "itertools.compress(data, selectors)", "intent": "Make an iterator that filters elements from `data` returning only those that have a corresponding element in `selectors` that evaluates to True .", "question_id": 5245}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "base_handler.setup_environ()", "intent": "Set the environ attribute to a fully-populated WSGI environment .", "question_id": 12259}
{"snippet": "mock.side_effect", "intent": "This can either be a function to be called when the mock is called, an iterable or an exception (class or instance) to be raised.", "question_id": 11591}
{"snippet": "memory_handler.close()", "intent": "Calls flush ( ) , sets the target to None and clears the buffer .", "question_id": 5537}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "parser.st2list(st, col_info=False)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree . With arguments `col_info`.", "question_id": 7216}
{"snippet": "pickle.PickleError", "intent": "Common base class for the other pickling exceptions.", "question_id": 7387}
{"snippet": "errno.EBFONT", "intent": "Bad font file format", "question_id": 3564}
{"snippet": "uuid.uuid1(clock_seq=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `clock_seq` is given , it is used as the sequence number ; otherwise a random 14-bit sequence number is chosen .", "question_id": 11959}
{"snippet": "turtle.shapetransform(t11=None, t22=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 . The determinant t11 * `t22` - t12 * t21 must not be zero , otherwise an error is raised .", "question_id": 11015}
{"snippet": "inspect.Signature(return_annotation=Signature.empty)", "intent": "A Signature object represents the call signature of a function and its return annotation . The optional `return_annotation` argument , can be an arbitrary Python object , is the \u201c return \u201d annotation of the callable .", "question_id": 4981}
{"snippet": "message.get_content_charset(failobj=None)", "intent": "Return the charset parameter of the Content-Type header , coerced to lower case . If there is no Content-Type header , or if that header has no charset parameter , `failobj` is returned .", "question_id": 3023}
{"snippet": "i_pv4_address.exploded", "intent": "The string representation in dotted decimal notation.", "question_id": 5177}
{"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "email.header.Header()", "intent": "Create a MIME-compliant header that can contain strings in different character sets .", "question_id": 3116}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}
{"snippet": "i_pv4_address.packed", "intent": "The binary representation of this address - a bytes object of the appropriate length (most significant octet first).", "question_id": 5178}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "tracemalloc.get_traceback_limit()", "intent": "Get the maximum number of frames stored in the traceback of a trace .", "question_id": 10843}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "struct.calcsize(format)", "intent": "Return the size of the struct ( and hence of the bytes object produced by pack ( `format` , ... ) ) corresponding to the format string format .", "question_id": 9557}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503}
{"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}
{"snippet": "object.__getstate__()", "intent": "Classes can further influence how their instances are pickled ; if the class defines the method __getstate__ ( ) , it is called and the returned object is pickled as the contents for the instance , instead of the contents of the instance \u2019 s dictionary .", "question_id": 7411}
{"snippet": "memoryview.contiguous", "intent": "A bool indicating whether the memory is contiguous.", "question_id": 9430}
{"snippet": "auto.end", "intent": "The index after the last invalid data in object.", "question_id": 3678}
{"snippet": "wave.open(file, mode=None)", "intent": "If `file` is a string , open the file by that name , otherwise treat it as a file-like object . `mode` can be :", "question_id": 12047}
{"snippet": "datetime.utcnow()", "intent": "Return the current UTC date and time , with tzinfo None .", "question_id": 2260}
{"snippet": "platform.python_implementation()", "intent": "Returns a string identifying the Python implementation .", "question_id": 7476}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "Element.setAttributeNode(newAttr)", "intent": "Add a new attribute node to the element , replacing an existing attribute if necessary if the name attribute matches . If `newAttr` is already in use , InuseAttributeErr will be raised .", "question_id": 12367}
{"snippet": "json.dump(obj, fp, **kw, sort_keys=False)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `sort_keys` is true ( default : False ) , then the output of dictionaries will be sorted by key . With arguments `**kw`.", "question_id": 5279}
{"snippet": "concurrent.futures.ProcessPoolExecutor(mp_context=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `mp_context` can be a multiprocessing context or None .", "question_id": 1459}
{"snippet": "Request.add_unredirected_header(key, header)", "intent": "Add a `header` that will not be added to a redirected request . With arguments `key`.", "question_id": 11826}
{"snippet": "zlib.crc32(data)", "intent": "Computes a CRC ( Cyclic Redundancy Check ) checksum of `data` .", "question_id": 12918}
{"snippet": "typing.cast(typ, val)", "intent": "Cast a value to a type . With arguments `typ`, `val`.", "question_id": 11323}
{"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103}
{"snippet": "doctest.SKIP", "intent": "When specified, do not run the example at all.", "question_id": 2757}
{"snippet": "json.load(fp, **kw)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5290}
{"snippet": "license", "intent": "Object that when printed, prints the message \u201cType license() to see the full license text\u201d, and when called, displays the full license text in a pager-like fashion (one screen at a time).", "question_id": 1614}
{"snippet": "time.perf_counter()", "intent": "Return the value ( in fractional seconds ) of a performance counter , i.e .", "question_id": 10448}
{"snippet": "stat_result.st_blksize", "intent": "\u201cPreferred\u201d blocksize for efficient file system I/O.", "question_id": 6936}
{"snippet": "ensurepip.bootstrap()", "intent": "Bootstraps pip into the current or designated environment .", "question_id": 3489}
{"snippet": "http_handler.emit(record)", "intent": "Sends the `record` to the Web server as a URL-encoded dictionary .", "question_id": 5552}
{"snippet": "turtle.numinput(title, prompt, default=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11085}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2805}
{"snippet": "sys.getandroidapilevel()", "intent": "Return the build time API version of Android as an integer .", "question_id": 9794}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "sys.builtin_module_names", "intent": "A tuple of strings giving the names of all modules that are compiled into this Python interpreter.", "question_id": 9771}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "abstract_event_loop.expected", "intent": "The total number (int) of expected bytes.", "question_id": 350}
{"snippet": "FTP.dir()", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output .", "question_id": 3958}
{"snippet": "urllib.request.HTTPSHandler(context=None)", "intent": "A class to handle opening of HTTPS URLs . `context` and `check_hostname` have the same meaning as in http.client.HTTPSConnection .", "question_id": 11804}
{"snippet": "POP3.rpop(user)", "intent": "Use RPOP authentication ( similar to UNIX r-commands ) to log into POP3 server . With arguments `user`.", "question_id": 7607}
{"snippet": "test_case.setUpClass()", "intent": "A class method called before tests in an individual class are run .", "question_id": 11367}
{"snippet": "test_loader.testNamePatterns", "intent": "List of Unix shell-style wildcard test name patterns that test methods have to match to be included in test suites (see -v option).", "question_id": 11506}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_SYNTAX", "intent": "Some unspecified syntax error was encountered.", "question_id": 7801}
{"snippet": "asyncio.wait_for(aw, timeout)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` .", "question_id": 605}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "statistics.harmonic_mean(data)", "intent": "Return the harmonic mean of `data` , a sequence or iterator of real-valued numbers .", "question_id": 9126}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "ctypes.pythonapi", "intent": "An instance of PyDLL that exposes Python C API functions as attributes.", "question_id": 1785}
{"snippet": "trace.run(cmd)", "intent": "Execute the command and gather statistics from the execution with the current tracing parameters . `cmd` must be a string or code object , suitable for passing into exec ( ) .", "question_id": 10716}
{"snippet": "mailbox.iteritems()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5734}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "os.WIFSIGNALED(status)", "intent": "Return True if the process exited due to a signal , otherwise return False . With arguments `status`.", "question_id": 7091}
{"snippet": "xml.etree.ElementTree.ProcessingInstruction(target)", "intent": "PI element factory . `target` is a string containing the PI target .", "question_id": 12448}
{"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678}
{"snippet": "base_http_request_handler.handle()", "intent": "Calls handle_one_request ( ) once ( or , if persistent connections are enabled , multiple times ) to handle incoming HTTP requests .", "question_id": 4634}
{"snippet": "asyncio.SelectorEventLoop", "intent": "An event loop based on the selectors module.", "question_id": 342}
{"snippet": "cursor.rowcount", "intent": "Although the Cursor class of the sqlite3 module implements this attribute, the database engine\u2019s own support for the determination of \u201crows affected\u201d/\u201drows selected\u201d is quirky.", "question_id": 8849}
{"snippet": "uuid.uuid1()", "intent": "Generate a UUID from a host ID , sequence number , and the current time .", "question_id": 11957}
{"snippet": "mock.reset_mock()", "intent": "The reset_mock method resets all the call attributes on a mock object :", "question_id": 11578}
{"snippet": "connection.interrupt()", "intent": "You can call this method from a different thread to abort any queries that might be executing on the connection .", "question_id": 8819}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "urllib.request.urlretrieve(url)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11881}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "CGIXMLRPCRequestHandler.handle_request(request_text=None)", "intent": "Handle an XML-RPC request . If `request_text` is given , it should be the POST data provided by the HTTP server , otherwise the contents of stdin will be used .", "question_id": 12748}
{"snippet": "winsound.SND_LOOP", "intent": "Play the sound repeatedly.", "question_id": 12198}
{"snippet": "importlib.util.spec_from_file_location(name, location, loader=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . Missing information will be filled in on the spec by making use of `loader` APIs and by the implication that the module will be file-based . With arguments `name`, `location`.", "question_id": 4939}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "tkinter.tix.Tree", "intent": "The Tree widget can be used to display hierarchical data in a tree form.", "question_id": 10572}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "memory_handler.flush()", "intent": "For a MemoryHandler , flushing means just sending the buffered records to the target , if there is one .", "question_id": 5538}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`.", "question_id": 64}
{"snippet": "queue_listener.emit(record)", "intent": "Do whatever it takes to actually log the specified logging `record` .", "question_id": 5609}
{"snippet": "test.support.gc_collect()", "intent": "Force as many objects as possible to be collected .", "question_id": 10192}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`.", "question_id": 5585}
{"snippet": "concurrent.futures.thread.BrokenThreadPool", "intent": "Derived from BrokenExecutor, this exception class is raised when one of the workers of a ThreadPoolExecutor has failed initializing.", "question_id": 1489}
{"snippet": "stringprep.in_table_c8(code)", "intent": "Determine whether `code` is in tableC.8 ( Change display properties or are deprecated ) .", "question_id": 9546}
{"snippet": "cmath.sqrt(x)", "intent": "Return the square root of `x` .", "question_id": 1100}
{"snippet": "deque.append(x)", "intent": "Add `x` to the right side of the deque .", "question_id": 1353}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}
{"snippet": "ssl.create_default_context(cafile=None)", "intent": "Return a new SSLContext object with default settings for the given `purpose` . `cafile` , `capath` , `cadata` represent optional CA certificates to trust for certificate verification , as in SSLContext.load_verify_locations ( ) .", "question_id": 8865}
{"snippet": "shutil.get_unpack_formats()", "intent": "Return a list of all registered formats for unpacking .", "question_id": 8370}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "base_handler.os_environ", "intent": "The default environment variables to be included in every request\u2019s WSGI environment.", "question_id": 12256}
{"snippet": "enum.auto", "intent": "Instances are replaced with an appropriate value for Enum members.", "question_id": 3504}
{"snippet": "async_chat.push_with_producer(producer)", "intent": "Takes a `producer` object and adds it to the producer queue associated with the channel .", "question_id": 176}
{"snippet": "types.ClassMethodDescriptorType", "intent": "The type of unbound class methods of some built-in data types such as dict.__dict__['fromkeys'].", "question_id": 11195}
{"snippet": "csvreader.__next__()", "intent": "Return the next row of the reader \u2019 s iterable object as a list ( if the object was returned from reader ( ) ) or a dict ( if it is a DictReader instance ) , parsed according to the current dialect .", "question_id": 1731}
{"snippet": "tree_builder.data(data)", "intent": "Adds text to the current element . `data` is a string .", "question_id": 12542}
{"snippet": "winreg.REG_DWORD_LITTLE_ENDIAN", "intent": "A 32-bit number in little-endian format.", "question_id": 12176}
{"snippet": "socket.SocketType", "intent": "This is a Python type object that represents the socket object type.", "question_id": 8633}
{"snippet": "shutil.get_archive_formats()", "intent": "Return a list of supported formats for archiving .", "question_id": 8358}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427}
{"snippet": "xml.parsers.expat.error", "intent": "Alias for ExpatError.", "question_id": 7725}
{"snippet": "NNTP.quit()", "intent": "Send a QUIT command and close the connection .", "question_id": 6448}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "signal.pthread_kill(thread_id, signalnum)", "intent": "Send the signal `signalnum` to the thread `thread_id` , another thread in the same process as the caller .", "question_id": 8389}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}
{"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}
{"snippet": "test_case.longMessage", "intent": "This class attribute determines what happens when a custom failure message is passed as the msg argument to an assertXYY call that fails.", "question_id": 11465}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}
{"snippet": "os.sendfile(out, in, offset, count, headers, trailers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6795}
{"snippet": "locale.LC_NUMERIC", "intent": "Locale category for formatting numbers.", "question_id": 5409}
{"snippet": "binascii.a2b_hqx(string)", "intent": "Convert binhex4 formatted ASCII data to binary , without doing RLE-decompression . The `string` should contain a complete number of binary bytes , or ( in case of the last portion of the binhex4 data ) have the remaining bits zero .", "question_id": 836}
{"snippet": "readline.get_begidx()", "intent": "Get the beginning or ending index of the completion scope .", "question_id": 8044}
{"snippet": "i_pv4_network.broadcast_address", "intent": "The broadcast address for the network.", "question_id": 5197}
{"snippet": "test.support.temp_cwd(name='tempcwd')", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory .", "question_id": 10183}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "tkinter.tix.Tree", "intent": "The Tree widget can be used to display hierarchical data in a tree form.", "question_id": 10572}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "shutil.get_unpack_formats()", "intent": "Return a list of all registered formats for unpacking .", "question_id": 8370}
{"snippet": "CookieJar.clear(domain)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed .", "question_id": 4495}
{"snippet": "sysconfig.get_config_var(name)", "intent": "Return the value of a single variable `name` .", "question_id": 9859}
{"snippet": "ssl.OPENSSL_VERSION_INFO", "intent": "A tuple of five integers representing version information about the OpenSSL library:", "question_id": 8958}
{"snippet": "mailbox.Error", "intent": "The based class for all other module-specific exceptions.", "question_id": 5856}
{"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648}
{"snippet": "errno.EALREADY", "intent": "Operation already in progress", "question_id": 3619}
{"snippet": "getpass.getuser()", "intent": "Return the \u201c login name \u201d of the user .", "question_id": 4209}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}
{"snippet": "HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)", "intent": "Return a Request or None in response to a redirect . If a redirection should take place , return a new Request to allow http_error_30* ( ) to perform the redirect to `newurl` . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11850}
{"snippet": "itertools.permutations(iterable)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5258}
{"snippet": "Path.symlink_to(target)", "intent": "Make this path a symbolic link to `target` .", "question_id": 7315}
{"snippet": "concurrent.futures.as_completed(fs)", "intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) .", "question_id": 1484}
{"snippet": "window.encoding", "intent": "Encoding used to encode method arguments (Unicode strings and characters).", "question_id": 2047}
{"snippet": "inspect.isgeneratorfunction(object)", "intent": "Return true if the `object` is a Python generator function .", "question_id": 4952}
{"snippet": "Pattern.search(string)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object .", "question_id": 7972}
{"snippet": "os.path.getmtime(path)", "intent": "Return the time of last modification of `path` .", "question_id": 7152}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}
{"snippet": "test_case.assertMultiLineEqual(first, second, msg=None)", "intent": "Test that the multiline string `first` is equal to the string `second` . With arguments `msg`.", "question_id": 11449}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}
{"snippet": "test_case.assertIs(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11383}
{"snippet": "doctest.testfile(filename, module_relative=True)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `module_relative` specifies how the filename should be interpreted :", "question_id": 2767}
{"snippet": "HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)", "intent": "Redirect to the Location : or URI : URL . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11851}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this turtle .", "question_id": 11019}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "email.policy.compat32", "intent": "An instance of Compat32, providing  backward compatibility with the behavior of the email package in Python 3.2.", "question_id": 3451}
{"snippet": "fraction.__round__()", "intent": "The first version returns the nearest int to self , rounding half to even .", "question_id": 3875}
{"snippet": "queue_listener.emit(record)", "intent": "Do whatever it takes to actually log the specified logging `record` .", "question_id": 5609}
{"snippet": "urllib.parse.urljoin(base, url, allow_fragments=True)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) . The `allow_fragments` argument has the same meaning and default as for urlparse ( ) .", "question_id": 11696}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}
{"snippet": "sys.builtin_module_names", "intent": "A tuple of strings giving the names of all modules that are compiled into this Python interpreter.", "question_id": 9771}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831}
{"snippet": "path_entry_finder.find_loader(fullname)", "intent": "A legacy method for finding a loader for the specified module . With arguments `fullname`.", "question_id": 4810}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564}
{"snippet": "xml.dom.InvalidCharacterErr", "intent": "This exception is raised when a string parameter contains a character that is not permitted in the context it\u2019s being used in by the XML 1.0 recommendation.", "question_id": 12386}
{"snippet": "somenamedtuple._replace(**kwargs)", "intent": "Return a new instance of the named tuple replacing specified fields with new values : With arguments `**kwargs`.", "question_id": 1386}
{"snippet": "sys.float_repr_style", "intent": "A string indicating how the repr() function behaves for floats.", "question_id": 9792}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392}
{"snippet": "ast.get_docstring(node, clean=True)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring . If `clean` is true , clean up the docstring \u2019 s indentation with inspect.cleandoc ( ) .", "question_id": 151}
{"snippet": "curses.curs_set(visibility)", "intent": "Set the cursor state . `visibility` can be set to 0 , 1 , or 2 , for invisible , normal , or very visible .", "question_id": 1926}
{"snippet": "tkinter.tix.ComboBox", "intent": "The ComboBox widget is similar to the combo box control in MS Windows.", "question_id": 10554}
{"snippet": "locale.YESEXPR", "intent": "Get a regular expression that can be used with the regex function to recognize a positive response to a yes/no question.", "question_id": 5365}
{"snippet": "dataclasses.field(default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2169}
{"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012}
{"snippet": "urllib.request.url2pathname(path)", "intent": "Convert the `path` component path from a percent-encoded URL to the local syntax for a path .", "question_id": 11766}
{"snippet": "sysconfig.get_python_version()", "intent": "Return the MAJOR.MINOR Python version number as a string .", "question_id": 9870}
{"snippet": "scheduler.run()", "intent": "Run all scheduled events .", "question_id": 8128}
{"snippet": "content_manager.get_content(msg, *args, **kw)", "intent": "Look up a handler function based on the mimetype of `msg` ( see next paragraph ) , call it , passing through all arguments , and return the result of the call . With arguments `*args`, `**kw`.", "question_id": 3032}
{"snippet": "xml.sax.parse(filename_or_stream, handler)", "intent": "Create a SAX parser and use it to parse a document . The document , passed in as `filename_or_stream` , can be a filename or a file object . The `handler` parameter needs to be a SAX ContentHandler instance .", "question_id": 12593}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "random.random()", "intent": "Return the next random floating point number in the range [ 0.0 , 1.0 ) .", "question_id": 7906}
{"snippet": "base_request_handler.handle()", "intent": "This function must do all the work required to service a request .", "question_id": 8785}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "OptionParser.disable_interspersed_args()", "intent": "Set parsing to stop on the first non-option .", "question_id": 6638}
{"snippet": "text_wrapper.break_long_words", "intent": "(default: True) If true, then words longer than width will be broken in order to ensure that no lines are longer than width.", "question_id": 10335}
{"snippet": "zipfile.ZipFile(file, mode='r', compresslevel=None)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "question_id": 12799}
{"snippet": "datetime.tzinfo", "intent": "An abstract base class for time zone information objects.", "question_id": 2202}
{"snippet": "mimetypes.knownfiles", "intent": "List of type map file names commonly installed.", "question_id": 5951}
{"snippet": "asyncio.SelectorEventLoop", "intent": "An event loop based on the selectors module.", "question_id": 342}
{"snippet": "sys.getsizeof(object)", "intent": "Return the size of an `object` in bytes .", "question_id": 9803}
{"snippet": "smtp_server.channel_class", "intent": "Override this in subclasses to use a custom SMTPChannel for managing SMTP clients.", "question_id": 8423}
{"snippet": "turtle.radians()", "intent": "Set the angle measurement units to radians .", "question_id": 10947}
{"snippet": "decimal.Inexact", "intent": "Indicates that rounding occurred and the result is not exact.", "question_id": 2588}
{"snippet": "asyncio.gather(*aws, return_exceptions=False)", "intent": "Run awaitable objects in the aws sequence concurrently . If `return_exceptions` is False ( default ) , the first raised exception is immediately propagated to the task that awaits on gather ( ) . With arguments `*aws`.", "question_id": 601}
{"snippet": "ArgumentParser.exit()", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 110}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "test_case.records", "intent": "A list of logging.LogRecord objects of the matching log messages.", "question_id": 11415}
{"snippet": "BaseCookie.load(rawdata)", "intent": "If `rawdata` is a string , parse it as an HTTP_COOKIE and add the values found there as Morsels .", "question_id": 4594}
{"snippet": "BaseCookie.js_output(attrs=None)", "intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP headers was sent . The meaning for `attrs` is the same as in output ( ) .", "question_id": 4593}
{"snippet": "base64.b64decode(s, altchars=None)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters .", "question_id": 711}
{"snippet": "platform.python_version()", "intent": "Returns the Python version as string 'major.minor.patchlevel ' .", "question_id": 7478}
{"snippet": "smtp_server.channel_class", "intent": "Override this in subclasses to use a custom SMTPChannel for managing SMTP clients.", "question_id": 8423}
{"snippet": "errno.EFBIG", "intent": "File too large", "question_id": 3532}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885}
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910}
{"snippet": "pool.imap(func, iterable, chunksize)", "intent": "A lazier version of map ( ) . The `chunksize` argument is the same as the one used by the map ( ) method . With arguments `func`, `iterable`.", "question_id": 6346}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "window.mvderwin(y, x)", "intent": "Move the window inside its parent window . With arguments `y`, `x`.", "question_id": 2094}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "threading.Event", "intent": "Class implementing event objects.", "question_id": 10406}
{"snippet": "inspect.isgeneratorfunction(object)", "intent": "Return true if the `object` is a Python generator function .", "question_id": 4952}
{"snippet": "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12129}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670}
{"snippet": "os.SCHED_IDLE", "intent": "Scheduling policy for extremely low priority background tasks.", "question_id": 7098}
{"snippet": "select.epoll()", "intent": "( Only supported on Linux 2.5.44 and newer . )", "question_id": 8150}
{"snippet": "modulefinder.ModuleFinder(excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6028}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "text_io_base.read()", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5138}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "tixCommand.tix_configure(**kw)", "intent": "Query or modify the configuration options of the Tix application context . With arguments `**kw`.", "question_id": 10580}
{"snippet": "csv.register_dialect(name, dialect, **fmtparams)", "intent": "Associate `dialect` with `name` . With arguments `**fmtparams`.", "question_id": 1684}
{"snippet": "turtle.bgcolor(*args)", "intent": "Set or return background color of the TurtleScreen . With arguments `*args`.", "question_id": 11040}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "nntplib.NNTPProtocolError", "intent": "Exception raised when a reply is received from the server that does not begin with a digit in the range 1\u20135.", "question_id": 6444}
{"snippet": "stat.UF_NODUMP", "intent": "Do not dump the file.", "question_id": 9113}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "curses.reset_prog_mode()", "intent": "Restore the terminal to \u201c program \u201d mode , as previously saved by def_prog_mode ( ) .", "question_id": 1972}
{"snippet": "mailbox.NotEmptyError", "intent": "Raised when a mailbox is not empty but is expected to be, such as when deleting a folder that contains messages.", "question_id": 5858}
{"snippet": "cgi.test()", "intent": "Robust test CGI script , usable as main program .", "question_id": 1052}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)", "intent": "Return a Request or None in response to a redirect . If a redirection should take place , return a new Request to allow http_error_30* ( ) to perform the redirect to `newurl` . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11850}
{"snippet": "asyncio.as_completed(aws, loop=None)", "intent": "Run awaitable objects in the `aws` set concurrently . With arguments `loop`.", "question_id": 616}
{"snippet": "fileinput.input()", "intent": "Create an instance of the FileInput class .", "question_id": 3782}
{"snippet": "email.charset.Charset()", "intent": "Map character sets to their email properties .", "question_id": 2910}
{"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "maildir.close()", "intent": "Maildir instances do not keep any open files and the underlying mailboxes do not support locking , so this method does nothing .", "question_id": 5766}
{"snippet": "call.call_list()", "intent": "For a call object that represents multiple calls , call_list ( ) returns a list of all the intermediate calls as well as the final call .", "question_id": 11648}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}
{"snippet": "audioop.maxpp(fragment, width)", "intent": "Return the maximum peak-peak value in the sound `fragment` . With arguments `width`.", "question_id": 697}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds)", "intent": "Run the `cmd` shell command . With arguments `**kwds`.", "question_id": 533}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "time.strftime(format)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument .", "question_id": 10454}
{"snippet": "auto.start", "intent": "The first index of invalid data in object.", "question_id": 3677}
{"snippet": "doctest.Example(source, want, options=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `options`.", "question_id": 2828}
{"snippet": "email_policy.fold(name, value)", "intent": "Header folding is controlled by the refold_source policy setting . A `value` is considered to be a \u2018 source value \u2019 if and only if it does not have a `name` attribute ( having a name attribute means it is a header object of some sort ) .", "question_id": 3437}
{"snippet": "json_encoder.lineno", "intent": "The line corresponding to pos.", "question_id": 5339}
{"snippet": "auto.filename", "intent": "For exceptions that involve a file system path (such as open() or os.unlink()), filename is the file name passed to the function.", "question_id": 3657}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "kevent.fflags", "intent": "Filter specific flags.", "question_id": 8206}
{"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929}
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630}
{"snippet": "smtp_channel.rcpttos", "intent": "Holds a list of strings containing the addresses identified in the \u201cRCPT TO:\u201d lines from the client.", "question_id": 8444}
{"snippet": "platform.linux_distribution('debian', 'redhat', 'mandrake', ...), supported_dists=('SuSE')", "intent": "Tries to determine the name of the Linux OS distribution name . `supported_dists` may be given to define the set of Linux distributions to look for . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`.", "question_id": 7531}
{"snippet": "tkinter.tix.tixCommand", "intent": "The tix commands provide access to miscellaneous elements of Tix\u2019s internal state and the Tix application context.", "question_id": 10579}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "marshal.dumps(value)", "intent": "Return the bytes object that would be written to a file by dump ( `value` , file ) .", "question_id": 5882}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713}
{"snippet": "tkinter.tix.DirSelectBox", "intent": "The DirSelectBox is similar to the standard Motif(TM) directory-selection box.", "question_id": 10566}
{"snippet": "style.layout(style, layoutspec=None)", "intent": "Define the widget layout for given `style` . If `layoutspec` is omitted , return the layout specification for given style .", "question_id": 10682}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}
{"snippet": "context.keys()", "intent": "Return a list of all variables in the context object .", "question_id": 1658}
{"snippet": "Telnet.expect(list)", "intent": "Read until one from a `list` of a regular expressions matches .", "question_id": 10030}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "text_wrapper.width", "intent": "(default: 70) The maximum length of wrapped lines.", "question_id": 10327}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "_c_data.in_dll(library, name)", "intent": "This method returns a ctypes type instance exported by a shared `library` . `name` is the name of the symbol that exports the data , library is the loaded shared library .", "question_id": 1849}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "msilib.schema", "intent": "This is the standard MSI schema for MSI 2.0, with the tables variable providing a list of table definitions, and _Validation_records providing the data for MSI validation.", "question_id": 6143}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}
{"snippet": "winreg.REG_BINARY", "intent": "Binary data in any form.", "question_id": 12174}
{"snippet": "email.utils.format_datetime(dt, usegmt=False)", "intent": "Like formatdate , but the input is a datetime instance . If it is an aware timezone with offset zero , then `usegmt` may be set to True , in which case the string GMT is used instead of the numeric timezone offset . With arguments `dt`.", "question_id": 3477}
{"snippet": "header.encode(\\t', splitchars=';, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3135}
{"snippet": "xmlparser.CurrentByteIndex", "intent": "Current byte index in the parser input.", "question_id": 7752}
{"snippet": "context.same_quantum(x, y)", "intent": "Returns True if the two operands have the same exponent . With arguments `x`, `y`.", "question_id": 2568}
{"snippet": "ctypes.c_double", "intent": "Represents the C double datatype.", "question_id": 1858}
{"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508}
{"snippet": "dircmp.left_only", "intent": "Files and subdirectories only in a.", "question_id": 3772}
{"snippet": "process.is_alive()", "intent": "Return whether the process is alive .", "question_id": 6180}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "urllib.request.UnknownHandler", "intent": "A catch-all class to handle unknown URLs.", "question_id": 11814}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "errno.EUNATCH", "intent": "Protocol driver not attached", "question_id": 3554}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454}
{"snippet": "address_header.groups", "intent": "A tuple of Group objects encoding the addresses and groups found in the header value.", "question_id": 3159}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "test_case.assertIn(first, second)", "intent": "Test that `first` is ( or is not ) in `second` .", "question_id": 11391}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "curses.color_content(color_number)", "intent": "Return the intensity of the red , green , and blue ( RGB ) components in the color `color_number` , which must be between 0 and COLORS .", "question_id": 1924}
{"snippet": "message.__getitem__(name)", "intent": "Return the value of the named header field . `name` should not include the colon field separator .", "question_id": 2966}
{"snippet": "config_parser.read_dict(dictionary, source='<dict>')", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order . Optional argument `source` specifies a context-specific name of the dictionary passed .", "question_id": 1519}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "queue.full()", "intent": "Return True if there are maxsize items in the queue .", "question_id": 451}
{"snippet": "turtle.begin_poly()", "intent": "Start recording the vertices of a polygon .", "question_id": 11031}
{"snippet": "base_header.defects", "intent": "A tuple of HeaderDefect instances reporting any RFC compliance problems found during parsing.", "question_id": 3152}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "mh.pack()", "intent": "Rename messages in the mailbox as necessary to eliminate gaps in numbering .", "question_id": 5785}
{"snippet": "window.getbegyx()", "intent": "Return a tuple ( y , x ) of co-ordinates of upper-left corner .", "question_id": 2049}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081}
{"snippet": "UnboundLocalError", "intent": "Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.", "question_id": 3672}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "site.USER_SITE", "intent": "Path to the user site-packages for the running Python.", "question_id": 8404}
{"snippet": "xmlparser.NotStandaloneHandler()", "intent": "Called if the XML document hasn \u2019 t been declared as being a standalone document .", "question_id": 7774}
{"snippet": "mock.call_count", "intent": "An integer telling you how many times the mock object has been called:", "question_id": 11589}
{"snippet": "cursor.close()", "intent": "Close the cursor now ( rather than whenever __del__ is called ) .", "question_id": 8848}
{"snippet": "tkinter.Tk(baseName=None)", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`.", "question_id": 10519}
{"snippet": "FileCookieJar.load()", "intent": "Load cookies from a file .", "question_id": 4506}
{"snippet": "faulthandler.enable(file=sys.stderr)", "intent": "Enable the fault handler : install handlers for the SIGSEGV , SIGFPE , SIGABRT , SIGBUS and SIGILL signals to dump the Python traceback . The `file` must be kept open until the fault handler is disabled : see issue with file descriptors .", "question_id": 3717}
{"snippet": "json.loads(s, **kw, encoding=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . The other arguments have the same meaning as in load ( ) , except `encoding` which is ignored and deprecated . With arguments `**kw`.", "question_id": 5301}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "parser.tuple2st(sequence)", "intent": "This is the same function as sequence2st ( ) . With arguments `sequence`.", "question_id": 7213}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}
{"snippet": "os.closerange(fd_low, fd_high)", "intent": "Close all file descriptors from `fd_low` ( inclusive ) to `fd_high` ( exclusive ) , ignoring errors .", "question_id": 6714}
{"snippet": "platform.python_implementation()", "intent": "Returns a string identifying the Python implementation .", "question_id": 7476}
{"snippet": "traceback.print_exc()", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10745}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}
{"snippet": "gettext.ngettext(singular, plural, n)", "intent": "Like gettext ( ) , but consider `plural` forms . If no translation is found , return `singular` if n is 1 ; return plural otherwise . If a translation is found , apply the plural formula to `n` , and return the resulting message ( some languages have more than two plural forms ) .", "question_id": 4218}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "urllib.request.OpenerDirector", "intent": "The OpenerDirector class opens URLs via BaseHandlers chained together.", "question_id": 11778}
{"snippet": "platform.win32_ver()", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7495}
{"snippet": "contextlib.ExitStack", "intent": "A context manager that is designed to make it easy to programmatically combine other context managers and cleanup functions, especially those that are optional or otherwise driven by input data.", "question_id": 1626}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "sys.dllhandle", "intent": "Integer specifying the handle of the Python DLL.", "question_id": 9778}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "deque.append(x)", "intent": "Add `x` to the right side of the deque .", "question_id": 1353}
{"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459}
{"snippet": "inspect.getdoc(object)", "intent": "Get the documentation string for an `object` , cleaned up with cleandoc ( ) .", "question_id": 4969}
{"snippet": "errno.ELIBACC", "intent": "Can not access a needed shared library", "question_id": 3584}
{"snippet": "PermissionError", "intent": "Raised when trying to run an operation without the adequate access rights - for example filesystem permissions.", "question_id": 3698}
{"snippet": "calendar.LocaleTextCalendar()", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 977}
{"snippet": "datetime.now(tz=None)", "intent": "Return the current local date and time . If optional argument `tz` is None or not specified , this is like today ( ) , but , if possible , supplies more precision than can be gotten from going through a time.time ( ) timestamp ( for example , this may be possible on platforms supplying the C gettimeofday ( ) function ) .", "question_id": 2259}
{"snippet": "Option.const", "intent": "For actions that store a constant value, the constant value to store.", "question_id": 6631}
{"snippet": "email.headerregistry.ParameterizedMIMEHeader", "intent": "MIME headers all start with the prefix \u2018Content-\u2018.", "question_id": 3167}
{"snippet": "asyncio.BaseProtocol", "intent": "Base protocol with methods that all protocols share.", "question_id": 426}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "@abc.abstractclassmethod", "intent": "A subclass of the built-in classmethod(), indicating an abstract classmethod.", "question_id": 5}
{"snippet": "Telnet.write(buffer)", "intent": "Write a byte string to the socket , doubling any IAC characters . With arguments `buffer`.", "question_id": 10027}
{"snippet": "test.support.WarningsRecorder", "intent": "Class used to record warnings for unit tests.", "question_id": 10295}
{"snippet": "decimal.radix()", "intent": "Return Decimal ( 10 ) , the radix ( base ) in which the Decimal class does all its arithmetic .", "question_id": 2465}
{"snippet": "datetime.min", "intent": "The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None).", "question_id": 2269}
{"snippet": "calendar.day_name", "intent": "An array that represents the days of the week in the current locale.", "question_id": 1022}
{"snippet": "io.BytesIO()", "intent": "A stream implementation using an in-memory bytes buffer .", "question_id": 5110}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679}
{"snippet": "DataHandler.data_open(req)", "intent": "Read a data URL . With arguments `req`.", "question_id": 11874}
{"snippet": "Repr.maxlevel", "intent": "Depth limit on the creation of recursive representations.", "question_id": 8055}
{"snippet": "ArgumentParser.add_mutually_exclusive_group()", "intent": "Create a mutually exclusive group .", "question_id": 99}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "inspect.Parameter(name, kind, annotation=Parameter.empty)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`, `annotation`.", "question_id": 4995}
{"snippet": "json_encoder.pos", "intent": "The start index of doc where parsing failed.", "question_id": 5338}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "xml.dom.pulldom.default_bufsize", "intent": "Default value for the bufsize parameter to parse().", "question_id": 12431}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962}
{"snippet": "unittest.main(defaultTest=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11547}
{"snippet": "mock.reset_mock(side_effect=False)", "intent": "The reset_mock method resets all the call attributes on a mock object : Note that reset_mock ( ) doesn \u2019 t clear the return value , `side_effect` or any child attributes you have set using normal assignment by default .", "question_id": 11580}
{"snippet": "netrc.macros", "intent": "Dictionary mapping macro names to string lists.", "question_id": 6390}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "datetime.strptime(date_string, format)", "intent": "Return a datetime corresponding to `date_string` , parsed according to `format` .", "question_id": 2268}
{"snippet": "mock.mock_add_spec(spec, spec_set=False)", "intent": "Add a `spec` to a mock . If `spec_set` is true then only attributes on the spec can be set .", "question_id": 11583}
{"snippet": "threading.Barrier(parties)", "intent": "Create a barrier object for `parties` number of threads .", "question_id": 10417}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "xmlparser.DefaultHandlerExpand(data)", "intent": "This is the same as the DefaultHandler ( ) , but doesn \u2019 t inhibit expansion of internal entities . With arguments `data`.", "question_id": 7773}
{"snippet": "socketserver.BaseServer(server_address, RequestHandlerClass)", "intent": "This is the superclass of all Server objects in the module . The two parameters are stored in the respective `server_address` and `RequestHandlerClass` attributes .", "question_id": 8759}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "atexit.unregister(func)", "intent": "Remove `func` from the list of functions to be run at interpreter shutdown .", "question_id": 678}
{"snippet": "symbol_table.get_identifiers()", "intent": "Return a list of names of symbols in this table .", "question_id": 9742}
{"snippet": "dis.Instruction", "intent": "Details for a bytecode operation", "question_id": 2733}
{"snippet": "html.entities.codepoint2name", "intent": "A dictionary that maps Unicode code points to HTML entity names.", "question_id": 4345}
{"snippet": "non_callable_magic_mock.headers", "intent": "The HTTP response headers for the HTTP request that caused the HTTPError.", "question_id": 11663}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947}
{"snippet": "itertools.tee(iterable)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5266}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136}
{"snippet": "json.dumps(obj, **kw)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "question_id": 5280}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "curses.resize_term(nlines, ncols)", "intent": "Backend function used by resizeterm ( ) , performing most of the work ; when resizing the windows , resize_term ( ) blank-fills the areas that are extended . With arguments `nlines`, `ncols`.", "question_id": 1975}
{"snippet": "stat.ST_SIZE", "intent": "Size in bytes of a plain file; amount of data waiting on some special files.", "question_id": 9080}
{"snippet": "snapshot.statistics(key_type: str)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`.", "question_id": 10876}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982}
{"snippet": "stream_reader.readlines()", "intent": "Read all lines available on the input stream and return them as a list of lines .", "question_id": 1295}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "__import__(name)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4135}
{"snippet": "decimal.sqrt()", "intent": "Return the square root of the argument to full precision .", "question_id": 2476}
{"snippet": "base_handler.log_exception(exc_info)", "intent": "Log the `exc_info` tuple in the server log .", "question_id": 12260}
{"snippet": "bytes.lower()", "intent": "Return a copy of the sequence with all the uppercase ASCII characters converted to their corresponding lowercase counterpart .", "question_id": 9397}
{"snippet": "csvreader.__next__()", "intent": "Return the next row of the reader \u2019 s iterable object as a list ( if the object was returned from reader ( ) ) or a dict ( if it is a DictReader instance ) , parsed according to the current dialect .", "question_id": 1731}
{"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946}
{"snippet": "mimetypes.knownfiles", "intent": "List of type map file names commonly installed.", "question_id": 5951}
{"snippet": "uuid.RFC_4122", "intent": "Specifies the UUID layout given in RFC 4122.", "question_id": 11969}
{"snippet": "cursor.lastrowid", "intent": "This read-only attribute provides the rowid of the last modified row.", "question_id": 8850}
{"snippet": "base_handler.get_scheme()", "intent": "Return the URL scheme being used for the current request .", "question_id": 12258}
{"snippet": "somenamedtuple._make(iterable)", "intent": "Class method that makes a new instance from an existing sequence or `iterable` .", "question_id": 1384}
{"snippet": "formatter.pop_alignment()", "intent": "Restore the previous alignment .", "question_id": 3827}
{"snippet": "os.GRND_NONBLOCK", "intent": "By  default, when reading from /dev/random, getrandom() blocks if no random bytes are available, and when reading from /dev/urandom, it blocks if the entropy pool has not yet been initialized.", "question_id": 7140}
{"snippet": "numbers.Complex", "intent": "Subclasses of this type describe complex numbers and include the operations that work on the built-in complex type.", "question_id": 6504}
{"snippet": "asyncio.BufferedProtocol(BaseProtocol)", "intent": "A base class for implementing streaming protocols with manual control of the receive buffer . With arguments `BaseProtocol`.", "question_id": 428}
{"snippet": "watched_file_handler.reopenIfNeeded()", "intent": "Checks to see if the file has changed .", "question_id": 5448}
{"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040}
{"snippet": "dircmp.report_partial_closure()", "intent": "Print a comparison between a and b and common immediate subdirectories .", "question_id": 3765}
{"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}
{"snippet": "plistlib.dump(value, fp, sort_keys=True, skipkeys=False)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . When `skipkeys` is false ( the default ) the function raises TypeError when a key of a dictionary is not a string , otherwise such keys are skipped . With arguments `fp`.", "question_id": 7569}
{"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080}
{"snippet": "Cmd.ruler", "intent": "The character used to draw separator lines under the help-message headers.", "question_id": 1153}
{"snippet": "Node.normalize()", "intent": "Join adjacent text nodes so that all stretches of text are stored as single Text instances .", "question_id": 12334}
{"snippet": "xmlrpc.client.dumps(params, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12702}
{"snippet": "test.support.IPV6_ENABLED", "intent": "Set to True if IPV6 is enabled on this host, False otherwise.", "question_id": 10121}
{"snippet": "text_wrapper.fix_sentence_endings", "intent": "(default: False) If true, TextWrapper attempts to detect sentence endings and ensure that sentences are always separated by exactly two spaces.", "question_id": 10334}
{"snippet": "audioop.tomono(fragment, width, lfactor, rfactor)", "intent": "Convert a stereo `fragment` to a mono fragment . The left channel is multiplied by `lfactor` and the right channel by `rfactor` before adding the two channels to give a mono signal . With arguments `width`.", "question_id": 705}
{"snippet": "test_loader.loadTestsFromModule(module)", "intent": "Return a suite of all test cases contained in the given `module` .", "question_id": 11492}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}
{"snippet": "ast.increment_lineno(node)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file .", "question_id": 153}
{"snippet": "xml.dom.WrongDocumentErr", "intent": "Raised when a node is inserted in a different document than it currently belongs to, and the implementation does not support migrating the node from one document to the other.", "question_id": 12395}
{"snippet": "inspect.isgeneratorfunction(object)", "intent": "Return true if the `object` is a Python generator function .", "question_id": 4952}
{"snippet": "HTTPConnection.getresponse()", "intent": "Should be called after a request is sent to get the response from the server .", "question_id": 4435}
{"snippet": "shelve.DbfilenameShelf(filename)", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object .", "question_id": 8260}
{"snippet": "errno.ETOOMANYREFS", "intent": "Too many references: cannot splice", "question_id": 3614}
{"snippet": "asyncio.LimitOverrunError", "intent": "Reached the buffer size limit while looking for a separator.", "question_id": 352}
{"snippet": "json.dumps(obj, **kw)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "question_id": 5280}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "PurePath.drive", "intent": "A string representing the drive letter or name, if any:", "question_id": 7244}
{"snippet": "smtplib.LMTP(local_hostname=None)", "intent": "The LMTP protocol , which is very similar to ESMTP , is heavily based on the standard SMTP client . The optional arguments `local_hostname` and `source_address` have the same meaning as they do in the SMTP class .", "question_id": 8491}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464}
{"snippet": "random.vonmisesvariate(mu, kappa)", "intent": "`mu` is the mean angle , expressed in radians between 0 and 2*pi , and `kappa` is the concentration parameter , which must be greater than or equal to zero .", "question_id": 7915}
{"snippet": "style.theme_create(themename, parent=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme .", "question_id": 10687}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}
{"snippet": "window.standend()", "intent": "Turn off the standout attribute .", "question_id": 2115}
{"snippet": "Telnet.mt_interact()", "intent": "Multithreaded version of interact ( ) .", "question_id": 10029}
{"snippet": "email.encoders.encode_noop(msg)", "intent": "This does nothing ; it doesn \u2019 t even set the Content-Transfer-Encoding header . With arguments `msg`.", "question_id": 3072}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667}
{"snippet": "SMTP.helo()", "intent": "Identify yourself to the SMTP server using HELO .", "question_id": 8515}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "str.isdecimal()", "intent": "Return true if all characters in the string are decimal characters and there is at least one character , false otherwise .", "question_id": 9205}
{"snippet": "cgihttp_request_handler.cgi_directories", "intent": "This defaults to ['/cgi-bin', '/htbin'] and describes directories to treat as containing CGI scripts.", "question_id": 4667}
{"snippet": "FTPHandler.ftp_open(req)", "intent": "Open the FTP file indicated by `req` .", "question_id": 11875}
{"snippet": "Path.rmdir()", "intent": "Remove this directory .", "question_id": 7313}
{"snippet": "faulthandler.enable(file=sys.stderr)", "intent": "Enable the fault handler : install handlers for the SIGSEGV , SIGFPE , SIGABRT , SIGBUS and SIGILL signals to dump the Python traceback . The `file` must be kept open until the fault handler is disabled : see issue with file descriptors .", "question_id": 3717}
{"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}
{"snippet": "itertools.accumulate(iterable, func)", "intent": "Make an iterator that returns accumulated sums , or accumulated results of other binary functions ( specified via the optional `func` argument ) . Elements of the input `iterable` may be any type that can be accepted as arguments to func .", "question_id": 5239}
{"snippet": "joinable_queue.poll()", "intent": "Return whether there is any data available to be read .", "question_id": 6235}
{"snippet": "itertools.groupby(iterable, key=None)", "intent": "Make an iterator that returns consecutive keys and groups from the `iterable` . The `key` is a function computing a key value for each element .", "question_id": 5254}
{"snippet": "queue_listener.enqueue_sentinel()", "intent": "Writes a sentinel to the queue to tell the listener to quit .", "question_id": 5564}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968}
{"snippet": "logging.getLevelName(level)", "intent": "Returns the textual representation of logging `level` level .", "question_id": 5647}
{"snippet": "queue_listener.hasHandlers()", "intent": "Checks to see if this logger has any handlers configured .", "question_id": 5593}
{"snippet": "zipfile.ZipFile(file)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object .", "question_id": 12792}
{"snippet": "crypt.METHOD_SHA512", "intent": "A Modular Crypt Format method with 16 character salt and 86 character hash based on the SHA-512 hash function.", "question_id": 1668}
{"snippet": "turtle.shape()", "intent": "Set turtle shape to shape with given `name` or , if name is not given , return name of current shape .", "question_id": 10982}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124}
{"snippet": "str.capitalize()", "intent": "Return a copy of the string with its first character capitalized and the rest lowercased .", "question_id": 9178}
{"snippet": "urllib.request.ProxyBasicAuthHandler()", "intent": "Handle authentication with the proxy .", "question_id": 11793}
{"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300}
{"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103}
{"snippet": "signal.ITIMER_REAL", "intent": "Decrements interval timer in real time, and delivers SIGALRM upon expiration.", "question_id": 8379}
{"snippet": "Panel.hide()", "intent": "Hide the panel .", "question_id": 2149}
{"snippet": "auto.errno", "intent": "A numeric error code from the C variable errno.", "question_id": 3654}
{"snippet": "os.pwrite(fd, str, offset)", "intent": "Write the bytestring in `str` to file descriptor `fd` at position of `offset` , leaving the file offset unchanged .", "question_id": 6788}
{"snippet": "configparser.RawConfigParser(':'), ';'))", "intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`.", "question_id": 1579}
{"snippet": "BaseTransport.is_closing()", "intent": "Return True if the transport is closing or is closed .", "question_id": 397}
{"snippet": "array.array(typecode, initializer)", "intent": "A new array whose items are restricted by `typecode` , and initialized from the optional `initializer` value , which must be a list , a bytes-like object , or iterable over elements of the appropriate type .", "question_id": 115}
{"snippet": "types.SimpleNamespace", "intent": "A simple object subclass that provides attribute access to its namespace, as well as a meaningful repr.", "question_id": 11217}
{"snippet": "mock.reset_mock()", "intent": "The reset_mock method resets all the call attributes on a mock object :", "question_id": 11578}
{"snippet": "cmd.Cmd(completekey='tab')", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab .", "question_id": 1128}
{"snippet": "shutil.which(cmd, mode=os.F_OK | os.X_OK)", "intent": "Return the `path` to an executable which would be run if the given `cmd` was called . `mode` is a permission mask passed to os.access ( ) , by default determining if the file exists and executable .", "question_id": 8346}
{"snippet": "widget.state()", "intent": "Modify or inquire widget state .", "question_id": 10595}
{"snippet": "inspect.CO_ITERABLE_COROUTINE", "intent": "The flag is used to transform generators into generator-based coroutines.", "question_id": 5048}
{"snippet": "asyncio.Queue(maxsize=0)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .", "question_id": 446}
{"snippet": "doctest.testfile(filename, package=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for a module-relative filename .", "question_id": 2769}
{"snippet": "style.element_options(elementname)", "intent": "Returns the list of `elementname` \u2019 s options .", "question_id": 10685}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "time.tzname", "intent": "A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone.", "question_id": 10475}
{"snippet": "array.typecode", "intent": "The typecode character used to create the array.", "question_id": 118}
{"snippet": "math.degrees(x)", "intent": "Convert angle `x` from radians to degrees .", "question_id": 5922}
{"snippet": "condition.wait()", "intent": "Wait until notified or until a `timeout` occurs .", "question_id": 10390}
{"snippet": "typing.ClassVar", "intent": "Special type construct to mark class variables.", "question_id": 11337}
{"snippet": "msilib.add_tables(database, module)", "intent": "Add all table content from `module` to `database` .", "question_id": 6065}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826}
{"snippet": "context.divide_int(x, y)", "intent": "Return `x` divided by `y` , truncated to an integer .", "question_id": 2528}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357}
{"snippet": "tkinter.tix.NoteBook", "intent": "The NoteBook widget can be used to display many windows in a limited space using a notebook metaphor.", "question_id": 10576}
{"snippet": "DefaultCookiePolicy.DomainStrictNonDomain", "intent": "Cookies that did not explicitly specify a domain cookie-attribute can only be returned to a domain equal to the domain that set the cookie (eg.", "question_id": 4553}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "gettext.install(domain)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) .", "question_id": 4239}
{"snippet": "simple_http_request_handler.directory", "intent": "If not specified, the directory to serve is the current working directory.", "question_id": 4663}
{"snippet": "_func_ptr.errcheck", "intent": "Assign a Python function or another callable to this attribute.", "question_id": 1789}
{"snippet": "turtle.getshapes()", "intent": "Return a list of names of all currently available turtle shapes .", "question_id": 11097}
{"snippet": "turtle.delay()", "intent": "Set or return the drawing `delay` in milliseconds .", "question_id": 11056}
{"snippet": "BufferedProtocol.get_buffer(sizehint)", "intent": "Called to allocate a new receive buffer . `sizehint` is the recommended minimum size for the returned buffer .", "question_id": 437}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "statistics.median_high(data)", "intent": "Return the high median of `data` .", "question_id": 9129}
{"snippet": "module_finder.report()", "intent": "Print a report to standard output that lists the modules imported by the script and their paths , as well as modules that are missing or seem to be missing .", "question_id": 6055}
{"snippet": "curses.color_pair(color_number)", "intent": "Return the attribute value for displaying text in the specified color . With arguments `color_number`.", "question_id": 1925}
{"snippet": "doctest.DocTest(examples, globs, name, filename, lineno, docstring)", "intent": "A collection of doctest `examples` that should be run in a single namespace . With arguments `globs`, `name`, `filename`, `lineno`, `docstring`.", "question_id": 2817}
{"snippet": "site.USER_SITE", "intent": "Path to the user site-packages for the running Python.", "question_id": 8404}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "io.RawIOBase", "intent": "Base class for raw binary I/O.", "question_id": 5083}
{"snippet": "inspect.stack()", "intent": "Return a list of frame records for the caller \u2019 s stack .", "question_id": 5030}
{"snippet": "stat_result.st_ino", "intent": "Platform dependent, but if non-zero, uniquely identifies the file for a given value of st_dev.", "question_id": 6923}
{"snippet": "ImportError", "intent": "Raised when the import statement has troubles trying to load a module.", "question_id": 3640}
{"snippet": "cursor.execute(sql, parameters)", "intent": "Executes an SQL statement . With arguments `sql`, `parameters`.", "question_id": 8840}
{"snippet": "pickle.Pickler(file, protocol=None, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . The optional `protocol` argument , an integer , tells the pickler to use the given protocol ; supported protocols are 0 to HIGHEST_PROTOCOL . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7393}
{"snippet": "os.WEXITED", "intent": "Flags that can be used in options in waitid() that specify what child signal to wait for.", "question_id": 7075}
{"snippet": "timer.repeat(number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) .", "question_id": 10513}
{"snippet": "extension_file_loader.path", "intent": "Path to the extension module.", "question_id": 4905}
{"snippet": "base_server.socket", "intent": "The socket object on which the server will listen for incoming requests.", "question_id": 8770}
{"snippet": "@typing.overload", "intent": "The @overload decorator allows describing functions and methods that support multiple different combinations of argument types.", "question_id": 11327}
{"snippet": "DictWriter.writeheader()", "intent": "Write a row with the field names ( as specified in the constructor ) .", "question_id": 1738}
{"snippet": "urllib.request.ProxyHandler()", "intent": "Cause requests to go through a proxy .", "question_id": 11784}
{"snippet": "tabnanny.NannyNag", "intent": "Raised by process_tokens() if detecting an ambiguous indent.", "question_id": 9888}
{"snippet": "SMTP.docmd(cmd, args='')", "intent": "Send a command `cmd` to the server . The optional argument `args` is simply concatenated to the command , separated by a space .", "question_id": 8510}
{"snippet": "element.get(key, default=None)", "intent": "Gets the element attribute named `key` . Returns the attribute value , or `default` if the attribute was not found .", "question_id": 12485}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "pool.apply_async(func)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`.", "question_id": 6339}
{"snippet": "widget.selection_remove(*items)", "intent": "Remove items from the selection . With arguments `*items`.", "question_id": 10656}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857}
{"snippet": "errno.ETXTBSY", "intent": "Text file busy", "question_id": 3531}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347}
{"snippet": "XMLReader.getProperty(propertyname)", "intent": "Return the current setting for property `propertyname` .", "question_id": 12625}
{"snippet": "stats.dump_stats(filename)", "intent": "Save the data loaded into the Stats object to a file named `filename` .", "question_id": 7692}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363}
{"snippet": "email.charset.Charset()", "intent": "Map character sets to their email properties .", "question_id": 2910}
{"snippet": "io.StringIO(newline='\\n')", "intent": "An in-memory stream for text I/O . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "question_id": 5166}
{"snippet": "fraction.__round__(ndigits)", "intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "question_id": 3876}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "configparser.BasicInterpolation", "intent": "The default implementation used by ConfigParser.", "question_id": 1491}
{"snippet": "readline.get_completion_type()", "intent": "Get the type of completion being attempted .", "question_id": 8043}
{"snippet": "test.support.run_in_subinterp(code)", "intent": "Run `code` in subinterpreter .", "question_id": 10270}
{"snippet": "set & other & ...", "intent": "Return a new set with elements common to the set and all others.", "question_id": 9448}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "xml.sax.xmlreader.XMLReader", "intent": "Base class which can be inherited by SAX parsers.", "question_id": 12606}
{"snippet": "datetime.utctimetuple()", "intent": "If datetime instance d is naive , this is the same as d.timetuple ( ) except that tm_isdst is forced to 0 regardless of what d.dst ( ) returns .", "question_id": 2300}
{"snippet": "__import__(name)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4135}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "errno.ENOTUNIQ", "intent": "Name not unique on network", "question_id": 3581}
{"snippet": "locale.CODESET", "intent": "Get a string with the name of the character encoding used in the selected locale.", "question_id": 5354}
{"snippet": "gettext.bindtextdomain(domain)", "intent": "Bind the `domain` to the locale directory `localedir` .", "question_id": 4210}
{"snippet": "shlex.debug", "intent": "If this attribute is numeric and 1 or more, a shlex instance will print verbose progress output on its behavior.", "question_id": 8304}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}
{"snippet": "tracemalloc.get_object_traceback(obj)", "intent": "Get the traceback where the Python object `obj` was allocated .", "question_id": 10842}
{"snippet": "unittest.removeHandler()", "intent": "When called without arguments this `function` removes the control-c handler if it has been installed .", "question_id": 11558}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}
{"snippet": "env_builder.create_configuration(context)", "intent": "Creates the pyvenv.cfg configuration file in the environment . With arguments `context`.", "question_id": 11984}
{"snippet": "socket_handler.close()", "intent": "Closes the socket .", "question_id": 5483}
{"snippet": "pkgutil.walk_packages(onerror=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "question_id": 7452}
{"snippet": "locale.D_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent a date in a locale-specific way.", "question_id": 5356}
{"snippet": "mock.return_value", "intent": "Set this to configure the value returned by calling the mock:", "question_id": 11590}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "socket.sendmsg(buffers)", "intent": "Send normal and ancillary data to the socket , gathering the non-ancillary data from a series of `buffers` and concatenating it into a single message .", "question_id": 8726}
{"snippet": "xml.dom.pulldom.parseString(string, parser=None)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` . With arguments `parser`.", "question_id": 12430}
{"snippet": "Pattern.groups", "intent": "The number of capturing groups in the pattern.", "question_id": 7992}
{"snippet": "Option.help", "intent": "Help text to print for this option when listing all available options after the user supplies a help option (such as --help).", "question_id": 6636}
{"snippet": "null_translations.install()", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ .", "question_id": 4258}
{"snippet": "logging.disable()", "intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "question_id": 5644}
{"snippet": "xml.etree.ElementTree.parse(source)", "intent": "Parses an XML section into an element tree . `source` is a filename or file object containing XML data .", "question_id": 12446}
{"snippet": "zipfile.ZipFile(file, mode='r', compresslevel=None)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "question_id": 12799}
{"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425}
{"snippet": "sync_manager.Array(typecode, sequence)", "intent": "Create an array and return a proxy for it . With arguments `typecode`, `sequence`.", "question_id": 6311}
{"snippet": "site.ENABLE_USER_SITE", "intent": "Flag showing the status of the user site-packages directory.", "question_id": 8403}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "test.support.script_helper.run_python_until_end(*args, **env_vars)", "intent": "Set up the environment based on env_vars for running the interpreter in a subprocess . With arguments `*args`, `**env_vars`.", "question_id": 10300}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122}
{"snippet": "test_result.tb_locals", "intent": "If set to true then local variables will be shown in tracebacks.", "question_id": 11517}
{"snippet": "ast.NodeTransformer", "intent": "A NodeVisitor subclass that walks the abstract syntax tree and allows modification of nodes.", "question_id": 162}
{"snippet": "template.substitute(mapping, **kwds)", "intent": "Performs the template substitution , returning a new string . `mapping` is any dictionary-like object with keys that match the placeholders in the template . With arguments `**kwds`.", "question_id": 9526}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}
{"snippet": "asyncore.loop(timeout, use_poll, map, count)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 647}
{"snippet": "style.theme_names()", "intent": "Returns a list of all known themes .", "question_id": 10691}
{"snippet": "FTP.storlines(cmd, fp)", "intent": "Store a file in ASCII transfer mode . `cmd` should be an appropriate STOR command ( see storbinary ( ) ) . Lines are read until EOF from the file object `fp` ( opened in binary mode ) using its readline ( ) method to provide the data to be stored .", "question_id": 3941}
{"snippet": "inspect.CO_ITERABLE_COROUTINE", "intent": "The flag is used to transform generators into generator-based coroutines.", "question_id": 5048}
{"snippet": "inspect.isgeneratorfunction(object)", "intent": "Return true if the `object` is a Python generator function .", "question_id": 4952}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847}
{"snippet": "UnboundLocalError", "intent": "Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.", "question_id": 3672}
{"snippet": "dict(iterable, **kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . Otherwise , the positional argument must be an `iterable` object . With arguments `**kwarg`.", "question_id": 9469}
{"snippet": "urllib.request.HTTPCookieProcessor()", "intent": "A class to handle HTTP Cookies .", "question_id": 11782}
{"snippet": "winsound.SND_FILENAME", "intent": "The sound parameter is the name of a WAV file.", "question_id": 12196}
{"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "Node.toxml(encoding=None)", "intent": "Return a string or byte string containing the XML represented by the DOM node . With an explicit `encoding` 1 argument , the result is a byte string in the specified encoding .", "question_id": 12412}
{"snippet": "pkgutil.get_importer(path_item)", "intent": "Retrieve a finder for the given `path_item` .", "question_id": 7441}
{"snippet": "base_http_request_handler.error_content_type", "intent": "Specifies the Content-Type HTTP header of error responses sent to the client.", "question_id": 4630}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "base_http_request_handler.sys_version", "intent": "Contains the Python system version, in a form usable by the version_string method and the server_version class variable.", "question_id": 4628}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454}
{"snippet": "cursor.execute(sql, parameters)", "intent": "Executes an SQL statement . With arguments `sql`, `parameters`.", "question_id": 8840}
{"snippet": "csv.writer(csvfile, **fmtparams, dialect='excel')", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1683}
{"snippet": "errno.EUNATCH", "intent": "Protocol driver not attached", "question_id": 3554}
{"snippet": "collections.deque(iterable)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` .", "question_id": 1351}
{"snippet": "decimal.FloatOperation", "intent": "Enable stricter semantics for mixing floats and Decimals.", "question_id": 2594}
{"snippet": "posix.environ", "intent": "A dictionary representing the string environment at the time the interpreter was started.", "question_id": 7622}
{"snippet": "gc.set_threshold(threshold0, threshold1)", "intent": "Set the garbage collection thresholds ( the collection frequency ) . Setting `threshold0` to zero disables collection . If generation 0 has been examined more than `threshold1` times since generation 1 has been examined , then generation 1 is examined as well .", "question_id": 4177}
{"snippet": "io.IncrementalNewlineDecoder", "intent": "A helper codec that decodes newlines for universal newlines mode.", "question_id": 5169}
{"snippet": "plistlib.writePlist(rootObject, pathOrFile)", "intent": "Write `rootObject` to an XML plist file . `pathOrFile` may be either a file name or a ( writable and binary ) file object", "question_id": 7580}
{"snippet": "queue_listener.flush()", "intent": "Ensure all logging output has been flushed .", "question_id": 5604}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "mh.close()", "intent": "MH instances do not keep any open files , so this method is equivalent to unlock ( ) .", "question_id": 5793}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "test.support.temp_cwd(name='tempcwd')", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory .", "question_id": 10183}
{"snippet": "turtle.textinput(title, prompt)", "intent": "Pop up a dialog window for input of a string . Parameter `title` is the title of the dialog window , `prompt` is a text mostly describing what information to input .", "question_id": 11083}
{"snippet": "filecmp.dircmp(a, b, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3762}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "@abc.abstractproperty", "intent": "A subclass of the built-in property(), indicating an abstract property.", "question_id": 7}
{"snippet": "urllib.request.HTTPBasicAuthHandler()", "intent": "Handle authentication with the remote host .", "question_id": 11791}
{"snippet": "ArgumentParser.add_argument(name or flags..., action)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`.", "question_id": 67}
{"snippet": "tarfile.StreamError", "intent": "Is raised for the limitations that are typical for stream-like TarFile objects.", "question_id": 9905}
{"snippet": "message.get_content_charset(failobj=None)", "intent": "Return the charset parameter of the Content-Type header , coerced to lower case . If there is no Content-Type header , or if that header has no charset parameter , `failobj` is returned .", "question_id": 3023}
{"snippet": "os.forkpty()", "intent": "Fork a child process , using a new pseudo-terminal as the child \u2019 s controlling terminal .", "question_id": 7036}
{"snippet": "doctest.DocTestRunner()", "intent": "A processing class used to execute and verify the interactive examples in a DocTest .", "question_id": 2861}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "PurePath.parents", "intent": "An immutable sequence providing access to the logical ancestors of the path:", "question_id": 7247}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "math.trunc(x)", "intent": "Return the Real value `x` truncated to an Integral ( usually an integer ) .", "question_id": 5904}
{"snippet": "ArgumentParser.parse_args()", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 69}
{"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION", "intent": "A CDATA marked section was not closed.", "question_id": 7806}
{"snippet": "secrets.choice(sequence)", "intent": "Return a randomly-chosen element from a non-empty `sequence` .", "question_id": 8132}
{"snippet": "bz2_file.peek()", "intent": "Return buffered data without advancing the file position .", "question_id": 895}
{"snippet": "socket.gethostname()", "intent": "Return a string containing the hostname of the machine where the Python interpreter is currently executing .", "question_id": 8649}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325}
{"snippet": "dispatcher.recv(buffer_size)", "intent": "Read at most `buffer_size` bytes from the socket \u2019 s remote end-point .", "question_id": 669}
{"snippet": "secrets.token_urlsafe()", "intent": "Return a random URL-safe text string , containing `nbytes` random bytes .", "question_id": 8143}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "pathlib.PureWindowsPath(*pathsegments)", "intent": "A subclass of PurePath , this path flavour represents Windows filesystem paths : With arguments `*pathsegments`.", "question_id": 7242}
{"snippet": "widget.start()", "intent": "Begin autoincrement mode : schedules a recurring timer event that calls Progressbar.step ( ) every `interval` milliseconds .", "question_id": 10615}
{"snippet": "_pointer.contents", "intent": "Returns the object to which to pointer points.", "question_id": 1898}
{"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}
{"snippet": "platform.python_build()", "intent": "Returns a tuple ( buildno , builddate ) stating the Python build number and date as strings .", "question_id": 7473}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "snapshot.dump(filename)", "intent": "Write the snapshot into a file . With arguments `filename`.", "question_id": 10873}
{"snippet": "ctypes.create_unicode_buffer(init_or_size)", "intent": "This function creates a mutable unicode character buffer . `init_or_size` must be an integer which specifies the `size` of the array , or a string which will be used to initialize the array items .", "question_id": 1815}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "fileinput.input()", "intent": "Create an instance of the FileInput class .", "question_id": 3782}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "json.dump(obj, fp, **kw, ensure_ascii=True)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped . With arguments `**kw`.", "question_id": 5272}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797}
{"snippet": "errno.ELIBBAD", "intent": "Accessing a corrupted shared library", "question_id": 3585}
{"snippet": "turtle.exitonclick()", "intent": "Bind bye ( ) method to mouse clicks on the Screen .", "question_id": 11106}
{"snippet": "io.UnsupportedOperation", "intent": "An exception inheriting OSError and ValueError that is raised when an unsupported operation is called on a stream.", "question_id": 5062}
{"snippet": "traceback.extract_tb(tb)", "intent": "Return a StackSummary object representing a list of \u201c pre-processed \u201d stack trace entries extracted from the traceback object `tb` .", "question_id": 10769}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "pickle.Unpickler(file, fix_imports=True)", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7399}
{"snippet": "sequence_matcher.get_matching_blocks()", "intent": "Return list of triples describing non-overlapping matching subsequences .", "question_id": 2683}
{"snippet": "aifc.getnchannels()", "intent": "Return the number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 11}
{"snippet": "queue.cancel_join_thread()", "intent": "Prevent join_thread ( ) from blocking .", "question_id": 6210}
{"snippet": "turtle.bgcolor(*args)", "intent": "Set or return background color of the TurtleScreen . With arguments `*args`.", "question_id": 11040}
{"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515}
{"snippet": "Panel.hide()", "intent": "Hide the panel .", "question_id": 2149}
{"snippet": "task.print_stack(limit=None, file=None)", "intent": "Print the stack or traceback for this Task . The `limit` argument is passed to get_stack ( ) directly . The `file` argument is an I/O stream to which the output is written ; by default output is written to sys.stderr .", "question_id": 639}
{"snippet": "tabnanny.filename_only", "intent": "Flag indicating whether to print only the filenames of files containing whitespace related problems.", "question_id": 9887}
{"snippet": "sys._getframe()", "intent": "Return a frame object from the call stack .", "question_id": 9806}
{"snippet": "subprocess.CREATE_NEW_CONSOLE", "intent": "The new process has a new console, instead of inheriting its parent\u2019s console (the default).", "question_id": 9647}
{"snippet": "readline.write_history_file()", "intent": "Save the history list to a readline history file , overwriting any existing file .", "question_id": 8024}
{"snippet": "inspect.getmembers(object)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name .", "question_id": 4946}
{"snippet": "wsgiref.handlers.IISCGIHandler", "intent": "A specialized alternative to CGIHandler, for use when deploying on Microsoft\u2019s IIS web server, without having set the config allowPathInfo option (IIS>=7) or metabase allowPathInfoForScriptMappings (IIS<7).", "question_id": 12237}
{"snippet": "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name)", "intent": "Create zip file at `zip_dir` and `zip_basename` with extension zip which contains the files in `script_name` .", "question_id": 10310}
{"snippet": "DefaultCookiePolicy.strict_ns_domain", "intent": "Flags indicating how strict to be with domain-matching rules for Netscape cookies.", "question_id": 4549}
{"snippet": "NNTP.body(file=None)", "intent": "Same as article ( ) , but sends a BODY command . The lines returned ( or written to `file` ) will only contain the message body , not the headers .", "question_id": 6490}
{"snippet": "test.support.optim_args_from_interpreter_flags()", "intent": "Return a list of command line arguments reproducing the current optimization settings in sys.flags .", "question_id": 10172}
{"snippet": "gc.get_count()", "intent": "Return the current collection counts as a tuple of ( count0 , count1 , count2 ) .", "question_id": 4179}
{"snippet": "json.dump(obj, fp, **kw, indent=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level . With arguments `**kw`.", "question_id": 5276}
{"snippet": "warnings.warn(message, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12001}
{"snippet": "somenamedtuple._field_defaults", "intent": "Dictionary mapping field names to default values.", "question_id": 1388}
{"snippet": "platform.python_version_tuple()", "intent": "Returns the Python version as tuple ( major , minor , patchlevel ) of strings .", "question_id": 7479}
{"snippet": "formatter.check_unused_args(used_args, args, kwargs)", "intent": "Implement checking for unused arguments if desired . The arguments to this function is the set of all argument keys that were actually referred to in the format string ( integers for positional arguments , and strings for named arguments ) , and a reference to the `args` and `kwargs` that was passed to vformat . With arguments `used_args`.", "question_id": 9522}
{"snippet": "cursor.rowcount", "intent": "Although the Cursor class of the sqlite3 module implements this attribute, the database engine\u2019s own support for the determination of \u201crows affected\u201d/\u201drows selected\u201d is quirky.", "question_id": 8849}
{"snippet": "urllib.request.urlopen(url, cafile=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "question_id": 11754}
{"snippet": "curses.use_default_colors()", "intent": "Allow use of default values for colors on terminals supporting this feature .", "question_id": 1998}
{"snippet": "msvcrt.kbhit()", "intent": "Return true if a keypress is waiting to be read .", "question_id": 6155}
{"snippet": "test.support.gc_collect()", "intent": "Force as many objects as possible to be collected .", "question_id": 10192}
{"snippet": "stat_result.st_blksize", "intent": "\u201cPreferred\u201d blocksize for efficient file system I/O.", "question_id": 6936}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "stat.UF_HIDDEN", "intent": "The file should not be displayed in a GUI (Mac OS X 10.5+).", "question_id": 9119}
{"snippet": "binascii.b2a_uu(data)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char .", "question_id": 821}
{"snippet": "readline.set_completer_delims(string)", "intent": "Set or get the word delimiters for completion . With arguments `string`.", "question_id": 8046}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "asyncio.FastChildWatcher", "intent": "This implementation reaps every terminated processes by calling os.waitpid(-1) directly, possibly breaking other code spawning processes and waiting for their termination.", "question_id": 389}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "configparser.InterpolationError", "intent": "Base class for exceptions raised when problems occur performing string interpolation.", "question_id": 1596}
{"snippet": "email.utils.parseaddr(address)", "intent": "Parse `address` \u2013 which should be the value of some address-containing field such as To or Cc \u2013 into its constituent realname and email address parts .", "question_id": 3460}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}
{"snippet": "str.expandtabs()", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size .", "question_id": 9192}
{"snippet": "wsgiref.simple_server.demo_app(environ, start_response)", "intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "question_id": 12227}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415}
{"snippet": "context.minus(x)", "intent": "Minus corresponds to the unary prefix minus operator in Python . With arguments `x`.", "question_id": 2553}
{"snippet": "turtle.end_fill()", "intent": "Fill the shape drawn after the last call to begin_fill ( ) .", "question_id": 10966}
{"snippet": "turtle.Turtle", "intent": "Subclass of RawTurtle, has the same interface but draws on a default Screen object created automatically when needed for the first time.", "question_id": 11160}
{"snippet": "gzip.compress(data)", "intent": "Compress the `data` , returning a bytes object containing the compressed data .", "question_id": 4294}
{"snippet": "cmath.polar(x)", "intent": "Return the representation of `x` in polar coordinates .", "question_id": 1094}
{"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}
{"snippet": "charset.__str__()", "intent": "Returns input_charset as a string coerced to lower case .", "question_id": 2923}
{"snippet": "json.load(fp, **kw)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5290}
{"snippet": "shutil.unpack_archive(filename)", "intent": "Unpack an archive . `filename` is the full path of the archive .", "question_id": 8365}
{"snippet": "frozenset(iterable)", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4023}
{"snippet": "poplib.error_proto", "intent": "Exception raised on any errors from this module (errors from socket module are not caught).", "question_id": 7600}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800}
{"snippet": "http.client.HTTP_PORT", "intent": "The default port for the HTTP protocol (always 80).", "question_id": 4424}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "ssl.VERIFY_X509_STRICT", "intent": "Possible value for SSLContext.verify_flags to disable workarounds for broken X.509 certificates.", "question_id": 8918}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140}
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223}
{"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042}
{"snippet": "inspect.getsourcefile(object)", "intent": "Return the name of the Python source file in which an `object` was defined .", "question_id": 4973}
{"snippet": "asyncio.Event()", "intent": "An event object .", "question_id": 563}
{"snippet": "operator.iconcat(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6592}
{"snippet": "errno.ESHUTDOWN", "intent": "Cannot send after transport endpoint shutdown", "question_id": 3613}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826}
{"snippet": "smtp_channel.conn", "intent": "Holds the socket object connecting to the client.", "question_id": 8438}
{"snippet": "FTP.delete(filename)", "intent": "Remove the file named `filename` from the server .", "question_id": 3960}
{"snippet": "buffering_handler.flush()", "intent": "You can override this to implement custom flushing behavior .", "question_id": 5527}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "sys.warnoptions", "intent": "This is an implementation detail of the warnings framework; do not modify this value.", "question_id": 9855}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "locale.atoi(string)", "intent": "Converts a `string` to an integer , following the LC_NUMERIC conventions .", "question_id": 5403}
{"snippet": "json.JSONEncoder(skipkeys=False)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None .", "question_id": 5323}
{"snippet": "tracemalloc.clear_traces()", "intent": "Clear traces of memory blocks allocated by Python .", "question_id": 10841}
{"snippet": "SimpleXMLRPCServer.register_function()", "intent": "Register a `function` that can respond to XML-RPC requests .", "question_id": 12731}
{"snippet": "tracemalloc.take_snapshot()", "intent": "Take a snapshot of traces of memory blocks allocated by Python .", "question_id": 10850}
{"snippet": "itertools.groupby(iterable)", "intent": "Make an iterator that returns consecutive keys and groups from the `iterable` .", "question_id": 5253}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "mime_version_header.version", "intent": "The version number as a string, with any whitespace and/or comments removed.", "question_id": 3164}
{"snippet": "mailbox.iteritems()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5734}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "test.support.check_syntax_error(testcase, statement, lineno=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `lineno` is not None , compares to the line of the SyntaxError .", "question_id": 10233}
{"snippet": "Dialect.delimiter", "intent": "A one-character string used to separate fields.", "question_id": 1723}
{"snippet": "locale.LC_ALL", "intent": "Combination of all locale settings.", "question_id": 5410}
{"snippet": "xmlparser.CurrentLineNumber", "intent": "Current line number in the parser input.", "question_id": 7754}
{"snippet": "struct.iter_unpack(format, buffer)", "intent": "Iteratively unpack from the `buffer` buffer according to the `format` string format .", "question_id": 9556}
{"snippet": "json.JSONDecoder()", "intent": "Simple JSON decoder .", "question_id": 5310}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "_func_ptr.argtypes", "intent": "Assign a tuple of ctypes types to specify the argument types that the function accepts.", "question_id": 1788}
{"snippet": "async_exit_stack.aclose()", "intent": "Similar to close ( ) but properly handles awaitables .", "question_id": 1636}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "i_pv4_address.is_private", "intent": "True if the address is allocated for private networks.", "question_id": 5181}
{"snippet": "UnboundLocalError", "intent": "Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.", "question_id": 3672}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826}
{"snippet": "decimal.normalize()", "intent": "Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal ( ' 0 ' ) to Decimal ( '0e0 ' ) .", "question_id": 2457}
{"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}
{"snippet": "py_zip_file.writepy(pathname, filterfunc=None)", "intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) . `filterfunc` , if given , must be a function taking a single string argument .", "question_id": 12858}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934}
{"snippet": "audioop.reverse(fragment, width)", "intent": "Reverse the samples in a `fragment` and returns the modified fragment . With arguments `width`.", "question_id": 703}
{"snippet": "patch.multiple(target, **kwargs, spec=None, create=False)", "intent": "Perform multiple patches in a single call . The arguments `spec` , `spec_set` , create , `autospec` and `new_callable` have the same meaning as for patch ( ) . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11638}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363}
{"snippet": "Option.action", "intent": "(default: \"store\")", "question_id": 6626}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713}
{"snippet": "os.WUNTRACED", "intent": "This option causes child processes to be reported if they have been stopped but their current state has not been reported since they were stopped.", "question_id": 7087}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "ssl.CertificateError", "intent": "An alias for SSLCertVerificationError.", "question_id": 8884}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "resource.getrlimit(resource)", "intent": "Returns a tuple ( soft , hard ) with the current soft and hard limits of `resource` .", "question_id": 8071}
{"snippet": "widget.identify_region(x, y)", "intent": "Returns one of : With arguments `x`, `y`.", "question_id": 10637}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "maildir_message.add_flag(flag)", "intent": "Set the `flag` ( s ) specified by flag without changing other flags .", "question_id": 5817}
{"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}
{"snippet": "sysconfig.get_path(name, scheme, vars, expand)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) . get_path ( ) will use the variables returned by get_config_vars ( ) to `expand` the path .", "question_id": 9862}
{"snippet": "Cmd.cmdloop()", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument .", "question_id": 1135}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "OptionParser.get_version()", "intent": "Same as print_version ( ) but returns the version string instead of printing it .", "question_id": 6621}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer, lock=True)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed . If `lock` is True ( the default ) then a new lock object is created to synchronize access to the value .", "question_id": 6268}
{"snippet": "struct.size", "intent": "The calculated size of the struct (and hence of the bytes object produced by the pack() method) corresponding to format.", "question_id": 9566}
{"snippet": "xml.dom.pulldom.parseString(string)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` .", "question_id": 12429}
{"snippet": "urllib.parse.quote_from_bytes(bytes)", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding .", "question_id": 11721}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "array.buffer_info()", "intent": "Return a tuple ( address , length ) giving the current memory address and the length in elements of the buffer used to hold array \u2019 s contents .", "question_id": 121}
{"snippet": "errno.ELIBMAX", "intent": "Attempting to link in too many shared libraries", "question_id": 3587}
{"snippet": "file_io.mode", "intent": "The mode as given in the constructor.", "question_id": 5107}
{"snippet": "joinable_queue.recv_bytes()", "intent": "Return a complete message of byte data sent from the other end of the connection as a string .", "question_id": 6240}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020}
{"snippet": "simple_http_request_handler.directory", "intent": "If not specified, the directory to serve is the current working directory.", "question_id": 4663}
{"snippet": "stream_reader.read(size, chars)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding . The `chars` argument indicates the number of decoded code points or bytes to return .", "question_id": 1287}
{"snippet": "contextvars.Context", "intent": "A mapping of ContextVars to their values.", "question_id": 1649}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892}
{"snippet": "stringprep.in_table_c4(code)", "intent": "Determine whether `code` is in tableC.4 ( Non-character code points ) .", "question_id": 9542}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}
{"snippet": "time.tzname", "intent": "A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone.", "question_id": 10475}
{"snippet": "FTP.mlsd()", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) .", "question_id": 3947}
{"snippet": "@test.support.requires_mac_version(*min_version)", "intent": "Decorator for the minimum version when running test on Mac OS X . With arguments `*min_version`.", "question_id": 10213}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "mailbox.MaildirMessage()", "intent": "A `message` with Maildir-specific behaviors .", "question_id": 5811}
{"snippet": "gc.get_objects()", "intent": "Returns a list of all objects tracked by the collector , excluding the list returned .", "question_id": 4174}
{"snippet": "cursor.executescript(sql_script)", "intent": "This is a nonstandard convenience method for executing multiple SQL statements at once . `sql_script` can be an instance of str .", "question_id": 8843}
{"snippet": "winreg.REG_DWORD_BIG_ENDIAN", "intent": "A 32-bit number in big-endian format.", "question_id": 12177}
{"snippet": "urllib.parse.quote_from_bytes(bytes)", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding .", "question_id": 11721}
{"snippet": "path_entry_finder.find_loader(fullname)", "intent": "A legacy method for finding a loader for the specified module . With arguments `fullname`.", "question_id": 4810}
{"snippet": "inspect.CO_ITERABLE_COROUTINE", "intent": "The flag is used to transform generators into generator-based coroutines.", "question_id": 5048}
{"snippet": "audioop.tomono(fragment, width, lfactor, rfactor)", "intent": "Convert a stereo `fragment` to a mono fragment . The left channel is multiplied by `lfactor` and the right channel by `rfactor` before adding the two channels to give a mono signal . With arguments `width`.", "question_id": 705}
{"snippet": "DocumentType.notations", "intent": "This is a NamedNodeMap giving the definitions of notations.", "question_id": 12343}
{"snippet": "signal.CTRL_C_EVENT", "intent": "The signal corresponding to the Ctrl+C keystroke event.", "question_id": 8376}
{"snippet": "readline.insert_text(string)", "intent": "Insert text into the line buffer at the cursor position . With arguments `string`.", "question_id": 8019}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "config_parser.read(filenames, encoding=None)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed . With arguments `encoding`.", "question_id": 1513}
{"snippet": "Option.help", "intent": "Help text to print for this option when listing all available options after the user supplies a help option (such as --help).", "question_id": 6636}
{"snippet": "dict.pop(key, default)", "intent": "If `key` is in the dictionary , remove it and return its value , else return `default` .", "question_id": 9486}
{"snippet": "scheduler.run()", "intent": "Run all scheduled events .", "question_id": 8128}
{"snippet": "readline.set_history_length(length)", "intent": "Set or return the desired number of lines to save in the history file . With arguments `length`.", "question_id": 8028}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "xmlparser.EndDoctypeDeclHandler()", "intent": "Called when Expat is done parsing the document type declaration .", "question_id": 7757}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "sqlite3.DatabaseError", "intent": "Exception raised for errors that are related to the database.", "question_id": 8858}
{"snippet": "sqlite3.version_info", "intent": "The version number of this module, as a tuple of integers.", "question_id": 8792}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "ssl.MemoryBIO", "intent": "A memory buffer that can be used to pass data between Python and an SSL protocol instance.", "question_id": 9053}
{"snippet": "SubprocessProtocol.pipe_data_received(fd, data)", "intent": "Called when the child process writes `data` into its stdout or stderr pipe . `fd` is the integer file descriptor of the pipe .", "question_id": 442}
{"snippet": "BaseCookie.value_encode(val)", "intent": "Return a tuple ( real_value , coded_value ) . `val` can be any type , but coded_value will always be converted to a string .", "question_id": 4583}
{"snippet": "json.JSONEncoder(skipkeys=False)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None .", "question_id": 5323}
{"snippet": "cursor.lastrowid", "intent": "This read-only attribute provides the rowid of the last modified row.", "question_id": 8850}
{"snippet": "time.isoformat()", "intent": "Return a string representing the time in ISO 8601 format , HH : MM : SS.ffffff or , if microsecond is 0 , HH : MM : SS If utcoffset ( ) does not return None , a string is appended , giving the UTC offset : HH : MM : SS.ffffff+HH : MM [ : SS [ .ffffff ] ] or , if self.microsecond is 0 , HH : MM : SS+HH : MM [ : SS [ .ffffff ] ] .", "question_id": 2344}
{"snippet": "UUID.version", "intent": "The UUID version number (1 through 5, meaningful only when the variant is RFC_4122).", "question_id": 11954}
{"snippet": "NNTP.xhdr(hdr, str)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search .", "question_id": 6497}
{"snippet": "barrier.wait(timeout=None)", "intent": "Pass the barrier . If a `timeout` is provided , it is used in preference to any that was supplied to the class constructor .", "question_id": 10422}
{"snippet": "ContentHandler.startElement(name, attrs)", "intent": "Signals the start of an element in non-namespace mode . The `name` parameter contains the raw XML 1.0 name of the element type as a string and the `attrs` parameter holds an object of the Attributes interface ( see The Attributes Interface ) containing the attributes of the element .", "question_id": 12575}
{"snippet": "queue_listener.format(record)", "intent": "Do formatting for a `record` - if a formatter is set , use it .", "question_id": 5608}
{"snippet": "doctest.DocTest(examples, globs, name, filename, lineno, docstring)", "intent": "A collection of doctest `examples` that should be run in a single namespace . With arguments `globs`, `name`, `filename`, `lineno`, `docstring`.", "question_id": 2817}
{"snippet": "AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "Handle an authentication request by getting a user/password pair , and re-trying the request . `authreq` should be the name of the header where the information about the realm is included in the request , `host` specifies the URL and path to authenticate for , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11865}
{"snippet": "os.forkpty()", "intent": "Fork a child process , using a new pseudo-terminal as the child \u2019 s controlling terminal .", "question_id": 7036}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454}
{"snippet": "text_wrapper.max_lines", "intent": "(default: None) If not None, then the output will contain at most max_lines lines, with placeholder appearing at the end of the output.", "question_id": 10337}
{"snippet": "str.isnumeric()", "intent": "Return true if all characters in the string are numeric characters , and there is at least one character , false otherwise .", "question_id": 9209}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131}
{"snippet": "loop.sendfile(transport, file, offset=0, count=None)", "intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 260}
{"snippet": "sys.winver", "intent": "The version number used to form registry keys on Windows platforms.", "question_id": 9856}
{"snippet": "resource.RLIMIT_RTTIME", "intent": "The time limit (in microseconds) on CPU time that a process can spend under real-time scheduling without making a blocking syscall.", "question_id": 8090}
{"snippet": "loop.create_unix_connection(protocol_factory)", "intent": "Create a Unix connection . With arguments `protocol_factory`.", "question_id": 222}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}
{"snippet": "turtle.radians()", "intent": "Set the angle measurement units to radians .", "question_id": 10947}
{"snippet": "test_case.assertNotEqual(first, second)", "intent": "Test that `first` and `second` are not equal .", "question_id": 11377}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "window.redrawwin()", "intent": "Touch the entire window , causing it to be completely redrawn on the next refresh ( ) call .", "question_id": 2105}
{"snippet": "select.select(rlist, wlist, xlist)", "intent": "This is a straightforward interface to the Unix select ( ) system call . With arguments `rlist`, `wlist`, `xlist`.", "question_id": 8167}
{"snippet": "timedelta.resolution", "intent": "The smallest possible difference between non-equal timedelta objects, timedelta(microseconds=1).", "question_id": 2216}
{"snippet": "formatter.vformat(format_string, args, kwargs)", "intent": "This function does the actual work of formatting . With arguments `format_string`, `args`, `kwargs`.", "question_id": 9518}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "os.popen(cmd)", "intent": "Open a pipe to or from command `cmd` .", "question_id": 7041}
{"snippet": "py_zip_file.writepy(pathname)", "intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) .", "question_id": 12856}
{"snippet": "turtle.textinput(title, prompt)", "intent": "Pop up a dialog window for input of a string . Parameter `title` is the title of the dialog window , `prompt` is a text mostly describing what information to input .", "question_id": 11083}
{"snippet": "text_wrapper.fix_sentence_endings", "intent": "(default: False) If true, TextWrapper attempts to detect sentence endings and ensure that sentences are always separated by exactly two spaces.", "question_id": 10334}
{"snippet": "os.stat_result", "intent": "Object whose attributes correspond roughly to the members of the stat structure.", "question_id": 6921}
{"snippet": "lzma.LZMAFile(filename=None)", "intent": "Open an LZMA-compressed file in binary `mode` . The `filename` argument specifies either the file object to wrap , or the name of the file to open ( as a str , bytes or path-like object ) .", "question_id": 5667}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "cmath.nanj", "intent": "Complex number with zero real part and NaN imaginary part.", "question_id": 1126}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "json.JSONEncoder(skipkeys=False)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None .", "question_id": 5323}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "dispatcher.handle_accept()", "intent": "Called on listening channels ( passive openers ) when a connection can be established with a new remote endpoint that has issued a connect ( ) call for the local endpoint .", "question_id": 659}
{"snippet": "style.layout(style, layoutspec=None)", "intent": "Define the widget layout for given `style` . If `layoutspec` is omitted , return the layout specification for given style .", "question_id": 10682}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}
{"snippet": "Template.prepend(cmd, kind)", "intent": "Add a new action at the beginning . With arguments `cmd`, `kind`.", "question_id": 7432}
{"snippet": "inspect.iscoroutinefunction(object)", "intent": "Return true if the `object` is a coroutine function ( a function defined with an async def syntax ) .", "question_id": 4954}
{"snippet": "FTP.login()", "intent": "Log in as the given `user` .", "question_id": 3915}
{"snippet": "test_case.subTest(**params)", "intent": "Return a context manager which executes the enclosed code block as a subtest . With arguments `**params`.", "question_id": 11372}
{"snippet": "json_decoder.raw_decode(s)", "intent": "Decode a JSON document from `s` ( a str beginning with a JSON document ) and return a 2-tuple of the Python representation and the index in s where the document ended .", "question_id": 5321}
{"snippet": "file_loader.load_module(fullname)", "intent": "Calls super \u2019 s load_module ( ) . With arguments `fullname`.", "question_id": 4838}
{"snippet": "decimal.ROUND_CEILING", "intent": "Round towards Infinity.", "question_id": 2577}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5865}
{"snippet": "base_server.shutdown()", "intent": "Tell the serve_forever ( ) loop to stop and wait until it does .", "question_id": 8765}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `stdin`.", "question_id": 524}
{"snippet": "socket.inet_pton(address_family, ip_string)", "intent": "Convert an IP address from its family-specific string format to a packed , binary format . Supported values for `address_family` are currently AF_INET and AF_INET6 . If the IP address string `ip_string` is invalid , OSError will be raised .", "question_id": 8663}
{"snippet": "modulefinder.ReplacePackage(oldname, newname)", "intent": "Allows specifying that the module named `oldname` is in fact the package named `newname` .", "question_id": 6024}
{"snippet": "locale.nl_langinfo(option)", "intent": "Return some locale-specific information as a string . With arguments `option`.", "question_id": 5353}
{"snippet": "dis.findlabels(code)", "intent": "Detect all offsets in the `code` object code which are jump targets , and return a list of these offsets .", "question_id": 2730}
{"snippet": "stringprep.in_table_c5(code)", "intent": "Determine whether `code` is in tableC.5 ( Surrogate codes ) .", "question_id": 9543}
{"snippet": "turtle.begin_poly()", "intent": "Start recording the vertices of a polygon .", "question_id": 11031}
{"snippet": "turtle.clear()", "intent": "Delete the turtle \u2019 s drawings from the screen .", "question_id": 10968}
{"snippet": "View.Close()", "intent": "Close the view , through MsiViewClose ( ) .", "question_id": 6076}
{"snippet": "buffering_handler.flush()", "intent": "You can override this to implement custom flushing behavior .", "question_id": 5527}
{"snippet": "Queue.get(block=True)", "intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 7855}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363}
{"snippet": "curses.termattrs()", "intent": "Return a logical OR of all video attributes supported by the terminal .", "question_id": 1984}
{"snippet": "xml_pull_parser.read_events()", "intent": "Return an iterator over the events which have been encountered in the data fed to the parser .", "question_id": 12560}
{"snippet": "pyc_invalidation_mode.TIMESTAMP", "intent": "The .pyc file includes the timestamp and size of the source file, which Python will compare against the metadata of the source file at runtime to determine if the .pyc file needs to be regenerated.", "question_id": 7832}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617}
{"snippet": "logging.captureWarnings(capture)", "intent": "This function is used to turn the `capture` of warnings by logging on and off .", "question_id": 5654}
{"snippet": "base_header.defects", "intent": "A tuple of HeaderDefect instances reporting any RFC compliance problems found during parsing.", "question_id": 3152}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800}
{"snippet": "decimal.adjusted()", "intent": "Return the adjusted exponent after shifting out the coefficient \u2019 s rightmost digits until only the lead digit remains : Decimal ( '321e+5 ' ) .adjusted ( ) returns seven .", "question_id": 2395}
{"snippet": "gc.DEBUG_STATS", "intent": "Print statistics during collection.", "question_id": 4189}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "mailbox.mbox(path, factory=None)", "intent": "A subclass of Mailbox for mailboxes in mbox format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . With arguments `path`.", "question_id": 5769}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458}
{"snippet": "ArgumentParser.add_mutually_exclusive_group()", "intent": "Create a mutually exclusive group .", "question_id": 99}
{"snippet": "decimal.ROUND_HALF_EVEN", "intent": "Round to nearest with ties going to nearest even integer.", "question_id": 2581}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124}
{"snippet": "io.StringIO(initial_value='')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` .", "question_id": 5165}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "context.logical_invert(x)", "intent": "Invert all the digits in `x` .", "question_id": 2546}
{"snippet": "ur_lopener.version", "intent": "Variable that specifies the user agent of the opener object.", "question_id": 11904}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "email.headerregistry.DateHeader", "intent": "RFC 5322 specifies a very specific format for dates within email headers.", "question_id": 3156}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN", "intent": "Raised when an input byte could not properly be assigned to a character; for example, a NUL byte (value 0) in a UTF-8 input stream.", "question_id": 7793}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "devpoll.modify(fd)", "intent": "This method does an unregister ( ) followed by a register ( ) . With arguments `fd`.", "question_id": 8175}
{"snippet": "socket.listen()", "intent": "Enable a server to accept connections .", "question_id": 8690}
{"snippet": "non_callable_magic_mock.headers", "intent": "The HTTP response headers for the HTTP request that caused the HTTPError.", "question_id": 11663}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038}
{"snippet": "extension_file_loader.path", "intent": "Path to the extension module.", "question_id": 4905}
{"snippet": "connection.total_changes", "intent": "Returns the total number of database rows that have been modified, inserted, or deleted since the database connection was opened.", "question_id": 8827}
{"snippet": "itertools.permutations(iterable)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5258}
{"snippet": "message.get_all(name, failobj=None)", "intent": "Return a list of all the values for the field named `name` . If there are no such named headers in the message , `failobj` is returned ( defaults to None ) .", "question_id": 2975}
{"snippet": "Popen.communicate()", "intent": "Interact with process : Send data to stdin .", "question_id": 9612}
{"snippet": "pdb.pm()", "intent": "Enter post-mortem debugging of the traceback found in sys.last_traceback .", "question_id": 7340}
{"snippet": "AU_read.getcompname()", "intent": "Human-readable version of getcomptype ( ) .", "question_id": 9713}
{"snippet": "SSLSocket.getpeercert(binary_form=False)", "intent": "If there is no certificate for the peer on the other end of the connection , return None . If the `binary_form` parameter is False , and a certificate was received from the peer , this method returns a dict instance .", "question_id": 8978}
{"snippet": "config_parser.getfloat(section, option)", "intent": "A convenience method which coerces the `option` in the specified `section` to a floating point number .", "question_id": 1540}
{"snippet": "stringprep.in_table_c6(code)", "intent": "Determine whether `code` is in tableC.6 ( Inappropriate for plain text ) .", "question_id": 9544}
{"snippet": "random.lognormvariate(mu, sigma)", "intent": "Log normal distribution . If you take the natural logarithm of this distribution , you \u2019 ll get a normal distribution with mean `mu` and standard deviation `sigma` .", "question_id": 7913}
{"snippet": "profile.Profile(timer=None)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument .", "question_id": 7670}
{"snippet": "socket.getprotobyname(protocolname)", "intent": "Translate an Internet protocol name ( for example , 'icmp ' ) to a constant suitable for passing as the ( optional ) third argument to the socket ( ) function . With arguments `protocolname`.", "question_id": 8652}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "contextlib.ContextDecorator", "intent": "A base class that enables a context manager to also be used as a decorator.", "question_id": 1625}
{"snippet": "tkinter.tix.NoteBook", "intent": "The NoteBook widget can be used to display many windows in a limited space using a notebook metaphor.", "question_id": 10576}
{"snippet": "asyncio.Event()", "intent": "An event object .", "question_id": 563}
{"snippet": "shutil.unpack_archive(filename)", "intent": "Unpack an archive . `filename` is the full path of the archive .", "question_id": 8365}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488}
{"snippet": "concurrent.futures.ThreadPoolExecutor()", "intent": "An Executor subclass that uses a pool of at most `max_workers` threads to execute calls asynchronously .", "question_id": 1447}
{"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037}
{"snippet": "set.pop()", "intent": "Remove and return an arbitrary element from the set .", "question_id": 9465}
{"snippet": "logging.captureWarnings(capture)", "intent": "This function is used to turn the `capture` of warnings by logging on and off .", "question_id": 5654}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460}
{"snippet": "dis.opname", "intent": "Sequence of operation names, indexable using the bytecode.", "question_id": 2742}
{"snippet": "_func_ptr.argtypes", "intent": "Assign a tuple of ctypes types to specify the argument types that the function accepts.", "question_id": 1788}
{"snippet": "numbers.Complex", "intent": "Subclasses of this type describe complex numbers and include the operations that work on the built-in complex type.", "question_id": 6504}
{"snippet": "set.pop()", "intent": "Remove and return an arbitrary element from the set .", "question_id": 9465}
{"snippet": "context.divide_int(x, y)", "intent": "Return `x` divided by `y` , truncated to an integer .", "question_id": 2528}
{"snippet": "doctest.DebugRunner()", "intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered .", "question_id": 2894}
{"snippet": "__import__(name, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4138}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "os.popen(cmd, mode='r', buffering=-1)", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' . The `buffering` argument has the same meaning as the corresponding argument to the built-in open ( ) function .", "question_id": 7044}
{"snippet": "turtle.tracer()", "intent": "Turn turtle animation on/off and set `delay` for update drawings .", "question_id": 11058}
{"snippet": "cmd.Cmd()", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework .", "question_id": 1127}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717}
{"snippet": "wsgiref.handlers.IISCGIHandler", "intent": "A specialized alternative to CGIHandler, for use when deploying on Microsoft\u2019s IIS web server, without having set the config allowPathInfo option (IIS>=7) or metabase allowPathInfoForScriptMappings (IIS<7).", "question_id": 12237}
{"snippet": "errno.ENOENT", "intent": "No such file or directory", "question_id": 3507}
{"snippet": "asyncio.Condition(loop=None)", "intent": "A Condition object . With arguments `loop`.", "question_id": 571}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235}
{"snippet": "email_message.get_content(*args, **kw)", "intent": "Call the get_content ( ) method of the `content_manager` , passing self as the message object , and passing along any other arguments or keywords as additional arguments . With arguments `*args`, `**kw`.", "question_id": 3290}
{"snippet": "ctypes.c_byte", "intent": "Represents the C signed char datatype, and interprets the value as small integer.", "question_id": 1855}
{"snippet": "unicodedata.decimal(chr)", "intent": "Returns the decimal value assigned to the character `chr` as integer .", "question_id": 11344}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "Repr.maxstring", "intent": "Limit on the number of characters in the representation of the string.", "question_id": 8064}
{"snippet": "xml.etree.ElementTree.TreeBuilder()", "intent": "Generic element structure builder .", "question_id": 12539}
{"snippet": "xml.etree.ElementTree.iterparse(source)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data .", "question_id": 12442}
{"snippet": "turtle.undo()", "intent": "Undo ( repeatedly ) the last turtle action ( s ) .", "question_id": 10933}
{"snippet": "decimal.next_plus()", "intent": "Return the smallest number representable in the given `context` ( or in the current thread \u2019 s context if no context is given ) that is larger than the given operand .", "question_id": 2453}
{"snippet": "winreg.REG_SZ", "intent": "A null-terminated string.", "question_id": 12187}
{"snippet": "threading.main_thread()", "intent": "Return the main Thread object .", "question_id": 10345}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "calendar.day_name", "intent": "An array that represents the days of the week in the current locale.", "question_id": 1022}
{"snippet": "xml.dom.IndexSizeErr", "intent": "Raised when an index or size parameter to a method is negative or exceeds the allowed values.", "question_id": 12383}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "tracemalloc.DomainFilter(inclusive: bool, domain: int)", "intent": "Filter traces of memory blocks by their address space ( domain ) . With arguments `inclusive: bool`, `domain: int`.", "question_id": 10851}
{"snippet": "InteractiveConsole.interact(banner=None)", "intent": "Closely emulate the interactive Python console . The optional `banner` argument specify the banner to print before the first interaction ; by default it prints a banner similar to the one printed by the standard Python interpreter , followed by the class name of the console object in parentheses ( so as not to confuse this with the real interpreter \u2013 since it \u2019 s so close !", "question_id": 1185}
{"snippet": "multiprocessing.active_children()", "intent": "Return list of all live children of the current process .", "question_id": 6219}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340}
{"snippet": "test_case.id()", "intent": "Return a string identifying the specific test case .", "question_id": 11469}
{"snippet": "dict(iterable, **kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . Otherwise , the positional argument must be an `iterable` object . With arguments `**kwarg`.", "question_id": 9469}
{"snippet": "email_message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3260}
{"snippet": "modulefinder.ModuleFinder(excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6028}
{"snippet": "test_loader.testNamePatterns", "intent": "List of Unix shell-style wildcard test name patterns that test methods have to match to be included in test suites (see -v option).", "question_id": 11506}
{"snippet": "test_case.assertMultiLineEqual(first, second)", "intent": "Test that the multiline string `first` is equal to the string `second` .", "question_id": 11448}
{"snippet": "random.uniform(a, b)", "intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "question_id": 7907}
{"snippet": "errno.ENOSYS", "intent": "Function not implemented", "question_id": 3543}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175}
{"snippet": "deque.append(x)", "intent": "Add `x` to the right side of the deque .", "question_id": 1353}
{"snippet": "email.utils.formatdate(localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3474}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "cursor.fetchone()", "intent": "Fetches the next row of a query result set , returning a single sequence , or None when no more data is available .", "question_id": 8844}
{"snippet": "context.logical_invert(x)", "intent": "Invert all the digits in `x` .", "question_id": 2546}
{"snippet": "curses.use_default_colors()", "intent": "Allow use of default values for colors on terminals supporting this feature .", "question_id": 1998}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "element.findtext(match, default=None, namespaces=None)", "intent": "Finds text for the first subelement matching `match` . Returns the text content of the first matching element , or `default` if no element was found . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12498}
{"snippet": "time.time_ns()", "intent": "Similar to time ( ) but returns time as an integer number of nanoseconds since the epoch .", "question_id": 10461}
{"snippet": "text_wrapper.subsequent_indent", "intent": "(default: '') String that will be prepended to all lines of wrapped output except the first.", "question_id": 10333}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "dataclasses.field(default=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function .", "question_id": 2168}
{"snippet": "locale.D_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent a date in a locale-specific way.", "question_id": 5356}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929}
{"snippet": "multiprocessing.set_executable()", "intent": "Sets the path of the Python interpreter to use when starting a child process .", "question_id": 6228}
{"snippet": "NNTP.date()", "intent": "Return a pair ( response , date ) .", "question_id": 6494}
{"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}
{"snippet": "test.support.fd_count()", "intent": "Count the number of open file descriptors .", "question_id": 10154}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_SEQ", "intent": "Models which represent a series of models which follow one after the other are indicated with this model type.", "question_id": 7782}
{"snippet": "test_case.assertIs(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11383}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "test.support.modules_cleanup(oldmodules)", "intent": "Remove modules except for `oldmodules` and encodings in order to preserve internal cache .", "question_id": 10251}
{"snippet": "errno.ESHUTDOWN", "intent": "Cannot send after transport endpoint shutdown", "question_id": 3613}
{"snippet": "CookieJar.clear_session_cookies()", "intent": "Discard all session cookies .", "question_id": 4497}
{"snippet": "multiprocessing.set_executable()", "intent": "Sets the path of the Python interpreter to use when starting a child process .", "question_id": 6228}
{"snippet": "socket.AF_LINK", "intent": "Availability: BSD, OSX.", "question_id": 8606}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "turtle.bgcolor(*args)", "intent": "Set or return background color of the TurtleScreen . With arguments `*args`.", "question_id": 11040}
{"snippet": "mailbox.get_bytes(key)", "intent": "Return a byte representation of the message corresponding to `key` , or raise a KeyError exception if no such message exists .", "question_id": 5740}
{"snippet": "module_finder.run_script(pathname)", "intent": "Analyze the contents of the `pathname` file , which must contain Python code .", "question_id": 6056}
{"snippet": "modulefinder.ModuleFinder(debug=0, excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6033}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "winreg.EnableReflectionKey(key)", "intent": "Restores registry reflection for the specified disabled `key` .", "question_id": 12153}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081}
{"snippet": "HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)", "intent": "Return a Request or None in response to a redirect . If a redirection should take place , return a new Request to allow http_error_30* ( ) to perform the redirect to `newurl` . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11850}
{"snippet": "config_parser.read_string(string)", "intent": "Parse configuration data from a `string` .", "question_id": 1516}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_PLUS", "intent": "The model must occur one or more times (like A+).", "question_id": 7785}
{"snippet": "auto.winerror", "intent": "Under Windows, this gives you the native Windows error code.", "question_id": 3655}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "bytes_io.getvalue()", "intent": "Return bytes containing the entire contents of the buffer .", "question_id": 5112}
{"snippet": "set.update(*others)", "intent": "Update the set , adding elements from all others . With arguments `*others`.", "question_id": 9454}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "mime_types.readfp(fp)", "intent": "Load MIME type information from an open file `fp` .", "question_id": 5972}
{"snippet": "window.noutrefresh()", "intent": "Mark for refresh but wait .", "question_id": 2098}
{"snippet": "system_random.pattern", "intent": "The regular expression pattern.", "question_id": 7966}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "weakref.WeakMethod(method)", "intent": "A custom ref subclass which simulates a weak reference to a bound `method` ( i.e. , a method defined on a class and looked up on an instance ) .", "question_id": 12089}
{"snippet": "xml.sax.xmlreader.IncrementalParser", "intent": "In some cases, it is desirable not to parse an input source at once, but to feed chunks of the document as they get available.", "question_id": 12607}
{"snippet": "ac_out_buffer_size", "intent": "The asynchronous output buffer size (default 4096).", "question_id": 169}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427}
{"snippet": "py_compile.compile(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . `invalidation_mode` should be a member of the PycInvalidationMode enum and controls how the generated bytecode cache is invalidated at runtime .", "question_id": 7826}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "stringprep.in_table_c9(code)", "intent": "Determine whether `code` is in tableC.9 ( Tagging characters ) .", "question_id": 9547}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}
{"snippet": "types.DynamicClassAttribute()", "intent": "Route attribute access on a class to __getattr__ .", "question_id": 11218}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "test_loader.loadTestsFromModule(module)", "intent": "Return a suite of all test cases contained in the given `module` .", "question_id": 11492}
{"snippet": "json.JSONEncoder(allow_nan=True)", "intent": "Extensible JSON encoder for Python data structures . If `allow_nan` is true ( the default ) , then NaN , Infinity , and -Infinity will be encoded as such .", "question_id": 5326}
{"snippet": "set ^= other", "intent": "Update the set, keeping only elements found in either set, but not in both.", "question_id": 9461}
{"snippet": "urllib.request.HTTPPasswordMgr", "intent": "Keep a database of  (realm, uri) -> (user, password) mappings.", "question_id": 11786}
{"snippet": "sync_manager.dict()", "intent": "Create a shared dict object and return a proxy for it .", "question_id": 6313}
{"snippet": "timedelta.total_seconds()", "intent": "Return the total number of seconds contained in the duration .", "question_id": 2217}
{"snippet": "HTMLParser.handle_data(data)", "intent": "This method is called to process arbitrary `data` ( e.g .", "question_id": 4359}
{"snippet": "widget.set(item)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` .", "question_id": 10658}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490}
{"snippet": "mock.reset_mock(side_effect=False)", "intent": "The reset_mock method resets all the call attributes on a mock object : Note that reset_mock ( ) doesn \u2019 t clear the return value , `side_effect` or any child attributes you have set using normal assignment by default .", "question_id": 11580}
{"snippet": "getpass.getuser()", "intent": "Return the \u201c login name \u201d of the user .", "question_id": 4209}
{"snippet": "object.__getnewargs_ex__()", "intent": "In protocols 2 and newer , classes that implements the __getnewargs_ex__ ( ) method can dictate the values passed to the __new__ ( ) method upon unpickling .", "question_id": 7409}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "condition.wait()", "intent": "Wait until notified or until a `timeout` occurs .", "question_id": 10390}
{"snippet": "audioop.avg(fragment, width)", "intent": "Return the average over all samples in the `fragment` . With arguments `width`.", "question_id": 683}
{"snippet": "keyword.iskeyword(s)", "intent": "Return true if `s` is a Python keyword .", "question_id": 5341}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "widget.selection_toggle(*items)", "intent": "Toggle the selection state of each item in items . With arguments `*items`.", "question_id": 10657}
{"snippet": "i_pv4_network.hosts()", "intent": "Returns an iterator over the usable hosts in the network .", "question_id": 5205}
{"snippet": "inspect.isasyncgenfunction(object)", "intent": "Return true if the `object` is an asynchronous generator function , for example :", "question_id": 4957}
{"snippet": "library_loader.LoadLibrary(name)", "intent": "Load a shared library into the process and return it . With arguments `name`.", "question_id": 1780}
{"snippet": "audioop.getsample(fragment, width, index)", "intent": "Return the value of sample `index` from the `fragment` . With arguments `width`.", "question_id": 691}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426}
{"snippet": "pkgutil.walk_packages(onerror=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "question_id": 7452}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "CookieJar.clear()", "intent": "Clear some cookies .", "question_id": 4496}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_NONE", "intent": "No modifier is given, so it can appear exactly once, as for A.", "question_id": 7783}
{"snippet": "curses.color_content(color_number)", "intent": "Return the intensity of the red , green , and blue ( RGB ) components in the color `color_number` , which must be between 0 and COLORS .", "question_id": 1924}
{"snippet": "fileinput.nextfile()", "intent": "Close the current file so that the next iteration will read the first line from the next file ( if any ) ; lines not read from the file will not count towards the cumulative line count .", "question_id": 3798}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_PLUS", "intent": "The model must occur one or more times (like A+).", "question_id": 7785}
{"snippet": "path_entry_finder.find_loader(fullname)", "intent": "A legacy method for finding a loader for the specified module . With arguments `fullname`.", "question_id": 4810}
{"snippet": "mailbox.itervalues()", "intent": "Return an iterator over representations of all messages if called as itervalues ( ) or __iter__ ( ) or return a list of such representations if called as values ( ) .", "question_id": 5731}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "binascii.a2b_hex(hexstr)", "intent": "Return the binary data represented by the hexadecimal string `hexstr` .", "question_id": 845}
{"snippet": "module_finder.report()", "intent": "Print a report to standard output that lists the modules imported by the script and their paths , as well as modules that are missing or seem to be missing .", "question_id": 6055}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "abstract_event_loop_policy.get_child_watcher()", "intent": "Get a child process watcher object .", "question_id": 378}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "cursor.rowcount", "intent": "Although the Cursor class of the sqlite3 module implements this attribute, the database engine\u2019s own support for the determination of \u201crows affected\u201d/\u201drows selected\u201d is quirky.", "question_id": 8849}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "text_wrapper.break_long_words", "intent": "(default: True) If true, then words longer than width will be broken in order to ensure that no lines are longer than width.", "question_id": 10335}
{"snippet": "robot_file_parser.can_fetch(useragent, url)", "intent": "Returns True if the `useragent` is allowed to fetch the `url` according to the rules contained in the parsed robots.txt file .", "question_id": 11912}
{"snippet": "Path.home()", "intent": "Return a new path object representing the user \u2019 s home directory ( as returned by os.path.expanduser ( ) with ~ construct ) :", "question_id": 7266}
{"snippet": "winreg.EnableReflectionKey(key)", "intent": "Restores registry reflection for the specified disabled `key` .", "question_id": 12153}
{"snippet": "abc_meta.__subclasshook__(subclass)", "intent": "( Must be defined as a class method . ) Check whether `subclass` is considered a subclass of this ABC .", "question_id": 3}
{"snippet": "xmlrpc.server.SimpleXMLRPCRequestHandler", "intent": "Create a new request handler instance.", "question_id": 12730}
{"snippet": "oss_audio_device.read(size)", "intent": "Read `size` bytes from the audio input and return them as a Python string .", "question_id": 7180}
{"snippet": "fileinput.isstdin()", "intent": "Returns true if the last line was read from sys.stdin , otherwise returns false .", "question_id": 3797}
{"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}
{"snippet": "text_wrapper.break_on_hyphens", "intent": "(default: True) If true, wrapping will occur preferably on whitespaces and right after hyphens in compound words, as it is customary in English.", "question_id": 10336}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340}
{"snippet": "completed_process.stdout", "intent": "Captured stdout from the child process.", "question_id": 9580}
{"snippet": "platform.win32_ver()", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7495}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271}
{"snippet": "i_pv4_address.reverse_pointer", "intent": "The name of the reverse DNS PTR record for the IP address, e.g.", "question_id": 5179}
{"snippet": "text_io_base.read()", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5138}
{"snippet": "binascii.b2a_qp(data)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding .", "question_id": 828}
{"snippet": "ZipFile.filename", "intent": "Name of the ZIP file.", "question_id": 12843}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "getpass.getuser()", "intent": "Return the \u201c login name \u201d of the user .", "question_id": 4209}
{"snippet": "window.subpad(begin_y, begin_x)", "intent": "Return a sub-window , whose upper-left corner is at ( `begin_y` , `begin_x` ) , and whose width/height is ncols/nlines .", "question_id": 2117}
{"snippet": "message.keys()", "intent": "Return a list of all the message \u2019 s header field names .", "question_id": 2969}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}
{"snippet": "connection.text_factory", "intent": "Using this attribute you can control what objects are returned for the TEXT data type.", "question_id": 8826}
{"snippet": "DeprecationWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "question_id": 3703}
{"snippet": "inspect.Signature(parameters=None)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection .", "question_id": 4980}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}
{"snippet": "trace.Trace(infile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `infile` is the name of the file from which to read stored count information .", "question_id": 10713}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "os.makedirs(name, mode=0o777)", "intent": "Recursive directory creation function . The `mode` parameter is passed to mkdir ( ) for creating the leaf directory ; see the mkdir ( ) description for how it is interpreted . With arguments `name`.", "question_id": 6867}
{"snippet": "decimal.to_integral_value(rounding=None)", "intent": "Round to the nearest integer without signaling Inexact or Rounded . If given , applies `rounding` ; otherwise , uses the rounding method in either the supplied `context` or the current context .", "question_id": 2489}
{"snippet": "statistics.harmonic_mean(data)", "intent": "Return the harmonic mean of `data` , a sequence or iterator of real-valued numbers .", "question_id": 9126}
{"snippet": "decimal.radix()", "intent": "Return Decimal ( 10 ) , the radix ( base ) in which the Decimal class does all its arithmetic .", "question_id": 2465}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "question_id": 1299}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "csv.reader(csvfile, **fmtparams, dialect='excel')", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . 1 An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1681}
{"snippet": "mock.side_effect", "intent": "This can either be a function to be called when the mock is called, an iterable or an exception (class or instance) to be raised.", "question_id": 11591}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454}
{"snippet": "sunau.AUDIO_FILE_MAGIC", "intent": "An integer every valid Sun AU file begins with, stored in big-endian form.", "question_id": 9694}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}
{"snippet": "abstract_event_loop_policy.get_child_watcher()", "intent": "Get a child process watcher object .", "question_id": 378}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "pkgutil.walk_packages()", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules .", "question_id": 7449}
{"snippet": "dis.hasjrel", "intent": "Sequence of bytecodes that have a relative jump target.", "question_id": 2748}
{"snippet": "message.get_param(param, unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2994}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "tkinter.tix.ComboBox", "intent": "The ComboBox widget is similar to the combo box control in MS Windows.", "question_id": 10554}
{"snippet": "smtp_channel.rcpttos", "intent": "Holds a list of strings containing the addresses identified in the \u201cRCPT TO:\u201d lines from the client.", "question_id": 8444}
{"snippet": "decimal.DefaultContext", "intent": "This context is used by the Context constructor as a prototype for new contexts.", "question_id": 2498}
{"snippet": "FTP.login()", "intent": "Log in as the given `user` .", "question_id": 3915}
{"snippet": "xmlrpc.client.loads(data, use_datetime=False)", "intent": "Convert an XML-RPC request or response into Python objects , a ( params , methodname ) . The `use_builtin_types` flag can be used to cause date/time values to be presented as datetime.datetime objects and binary `data` to be presented as bytes objects ; this flag is false by default . The obsolete `use_datetime` flag is similar to use_builtin_types but it applies only to date/time values .", "question_id": 12709}
{"snippet": "xmlparser.ProcessingInstructionHandler(target, data)", "intent": "Called for every processing instruction . With arguments `target`, `data`.", "question_id": 7762}
{"snippet": "curses.flash()", "intent": "Flash the screen .", "question_id": 1935}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "ssl.PROTOCOL_SSLv3", "intent": "Selects SSL version 3 as the channel encryption protocol.", "question_id": 8926}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "Repr.maxstring", "intent": "Limit on the number of characters in the representation of the string.", "question_id": 8064}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "ssl.OP_NO_RENEGOTIATION", "intent": "Disable all renegotiation in TLSv1.2 and earlier.", "question_id": 8937}
{"snippet": "readline.append_history_file(nelements)", "intent": "Append the last `nelements` items of history to a file .", "question_id": 8026}
{"snippet": "unicodedata.digit(chr)", "intent": "Returns the digit value assigned to the character `chr` as integer .", "question_id": 11346}
{"snippet": "email.iterators.body_line_iterator(msg)", "intent": "This iterates over all the payloads in all the subparts of `msg` , returning the string payloads line-by-line .", "question_id": 3208}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "email.utils.format_datetime(dt, usegmt=False)", "intent": "Like formatdate , but the input is a datetime instance . If it is an aware timezone with offset zero , then `usegmt` may be set to True , in which case the string GMT is used instead of the numeric timezone offset . With arguments `dt`.", "question_id": 3477}
{"snippet": "oss_audio_device.read(size)", "intent": "Read `size` bytes from the audio input and return them as a Python string .", "question_id": 7180}
{"snippet": "_thread.start_new_thread(function, args, kwargs)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "question_id": 12943}
{"snippet": "typing.ForwardRef", "intent": "A class used for internal typing representation of string forward references.", "question_id": 11321}
{"snippet": "decimal.sqrt()", "intent": "Return the square root of the argument to full precision .", "question_id": 2476}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "base_http_request_handler.error_message_format", "intent": "Specifies a format string that should be used by send_error() method for building an error response to the client.", "question_id": 4629}
{"snippet": "xmlparser.DefaultHandlerExpand(data)", "intent": "This is the same as the DefaultHandler ( ) , but doesn \u2019 t inhibit expansion of internal entities . With arguments `data`.", "question_id": 7773}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "test.support.check_syntax_error(testcase, statement, errtext='', lineno=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . `errtext` is the text of the error raised by SyntaxError . If `lineno` is not None , compares to the line of the SyntaxError .", "question_id": 10235}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}
{"snippet": "plistlib.load(fp)", "intent": "Read a plist file . `fp` should be a readable and binary file object .", "question_id": 7547}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201}
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824}
{"snippet": "style.theme_use()", "intent": "If `themename` is not given , returns the theme in use .", "question_id": 10692}
{"snippet": "inspect.iscoroutinefunction(object)", "intent": "Return true if the `object` is a coroutine function ( a function defined with an async def syntax ) .", "question_id": 4954}
{"snippet": "date.day", "intent": "Between 1 and the number of days in the given month of the given year.", "question_id": 2228}
{"snippet": "ast.dump(node)", "intent": "Return a formatted dump of the tree in `node` .", "question_id": 163}
{"snippet": "xml.sax.xmlreader.InputSource(system_id=None)", "intent": "Encapsulation of the information needed by the XMLReader to read entities . With arguments `system_id`.", "question_id": 12610}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "time.time()", "intent": "Return the time in seconds since the epoch as a floating point number .", "question_id": 10458}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "audioop.findfactor(fragment, reference)", "intent": "Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .", "question_id": 688}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "@reprlib.recursive_repr()", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread .", "question_id": 8053}
{"snippet": "xdrlib.Unpacker(data)", "intent": "Unpacker is the complementary class which unpacks XDR `data` values from a string buffer .", "question_id": 12272}
{"snippet": "Record.GetFieldCount()", "intent": "Return the number of fields of the record , through MsiRecordGetFieldCount ( ) .", "question_id": 6081}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "tracemalloc.get_object_traceback(obj)", "intent": "Get the traceback where the Python object `obj` was allocated .", "question_id": 10842}
{"snippet": "test_suite.addTests(tests)", "intent": "Add all the `tests` from an iterable of TestCase and TestSuite instances to this test suite .", "question_id": 11484}
{"snippet": "test.support.run_unittest(*classes)", "intent": "Execute unittest.TestCase subclasses passed to the function . With arguments `*classes`.", "question_id": 10157}
{"snippet": "concurrent.futures.thread.BrokenThreadPool", "intent": "Derived from BrokenExecutor, this exception class is raised when one of the workers of a ThreadPoolExecutor has failed initializing.", "question_id": 1489}
{"snippet": "str.isspace()", "intent": "Return true if there are only whitespace characters in the string and there is at least one character , false otherwise .", "question_id": 9211}
{"snippet": "errno.EL3RST", "intent": "Level 3 reset", "question_id": 3552}
{"snippet": "context.compare_total(x, y)", "intent": "Compares two operands using their abstract representation . With arguments `x`, `y`.", "question_id": 2522}
{"snippet": "str.center(width)", "intent": "Return centered in a string of length `width` .", "question_id": 9181}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}
{"snippet": "errno.ECOMM", "intent": "Communication error on send", "question_id": 3575}
{"snippet": "window.touchwin()", "intent": "Pretend the whole window has been changed , for purposes of drawing optimizations .", "question_id": 2127}
{"snippet": "Path.iterdir()", "intent": "When the path points to a directory , yield path objects of the directory contents :", "question_id": 7281}
{"snippet": "Packer.pack_bytes(bytes)", "intent": "Packs a variable length byte stream , similarly to pack_string ( ) . With arguments `bytes`.", "question_id": 12281}
{"snippet": "str.join(iterable)", "intent": "Return a string which is the concatenation of the strings in `iterable` .", "question_id": 9214}
{"snippet": "loop.create_unix_connection(protocol_factory)", "intent": "Create a Unix connection . With arguments `protocol_factory`.", "question_id": 222}
{"snippet": "SSLSocket.do_handshake()", "intent": "Perform the SSL setup handshake .", "question_id": 8976}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855}
{"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162}
{"snippet": "SystemError", "intent": "Raised when the interpreter finds an internal error, but the situation does not look so serious to cause it to abandon all hope.", "question_id": 3668}
{"snippet": "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name)", "intent": "Create zip file at `zip_dir` and `zip_basename` with extension zip which contains the files in `script_name` .", "question_id": 10310}
{"snippet": "widget.selection_add(*items)", "intent": "Add items to the selection . With arguments `*items`.", "question_id": 10655}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "typing.Type(GenericCT_co)", "intent": "A variable annotated with C may accept a value of type C. In contrast , a variable annotated with Type [ C ] may accept values that are classes themselves \u2013 specifically , it will accept the class object of C. For example : With arguments `GenericCT_co`.", "question_id": 11231}
{"snippet": "plistlib.loads(data)", "intent": "Load a plist from a bytes object . With arguments `data`.", "question_id": 7555}
{"snippet": "base_http_request_handler.handle()", "intent": "Calls handle_one_request ( ) once ( or , if persistent connections are enabled , multiple times ) to handle incoming HTTP requests .", "question_id": 4634}
{"snippet": "asyncio.gather(*aws)", "intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`.", "question_id": 599}
{"snippet": "winsound.SND_NOSTOP", "intent": "Do not interrupt sounds currently playing.", "question_id": 12203}
{"snippet": "doc_test_runner.report_success(out, test, example, got)", "intent": "Report that the given `example` ran successfully . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `got` is the actual output from the example .", "question_id": 2870}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "contextmanager.__enter__()", "intent": "Enter the runtime context and return either this object or another object related to the runtime context .", "question_id": 9497}
{"snippet": "asyncio.run_coroutine_threadsafe(coro, loop)", "intent": "Submit a coroutine to the given event `loop` . With arguments `coro`.", "question_id": 619}
{"snippet": "itertools.permutations(iterable)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5258}
{"snippet": "sys.dont_write_bytecode", "intent": "If this is true, Python won\u2019t try to write .pyc files on the import of source modules.", "question_id": 9780}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "window.attron(attr)", "intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2013}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "Pattern.search(string)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object .", "question_id": 7972}
{"snippet": "window.encoding", "intent": "Encoding used to encode method arguments (Unicode strings and characters).", "question_id": 2047}
{"snippet": "@functools.lru_cache()", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4146}
{"snippet": "turtle.setheading(to_angle)", "intent": "Set the orientation of the turtle to `to_angle` .", "question_id": 10920}
{"snippet": "__import__(name, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4138}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "mh.get_sequences()", "intent": "Return a dictionary of sequence names mapped to key lists .", "question_id": 5783}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "faulthandler.disable()", "intent": "Disable the fault handler : uninstall the signal handlers installed by enable ( ) .", "question_id": 3720}
{"snippet": "socket.recvmsg_into(buffers)", "intent": "Receive normal data and ancillary data from the socket , behaving as recvmsg ( ) would , but scatter the non-ancillary data into a series of `buffers` instead of returning a new bytes object .", "question_id": 8710}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "audioop.avg(fragment, width)", "intent": "Return the average over all samples in the `fragment` . With arguments `width`.", "question_id": 683}
{"snippet": "Telnet.read_lazy()", "intent": "Process and return data already in the queues ( lazy ) .", "question_id": 10015}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "os.RWF_NOWAIT", "intent": "Do not wait for data which is not immediately available.", "question_id": 6786}
{"snippet": "locale.LC_NUMERIC", "intent": "Locale category for formatting numbers.", "question_id": 5409}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491}
{"snippet": "ssl.OPENSSL_VERSION_INFO", "intent": "A tuple of five integers representing version information about the OpenSSL library:", "question_id": 8958}
{"snippet": "turtle.pen(**pendict)", "intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "question_id": 10958}
{"snippet": "logging.handlers.HTTPHandler(host, url, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5544}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "sys.implementation", "intent": "An object containing information about the implementation of the currently running Python interpreter.", "question_id": 9815}
{"snippet": "gettext.bindtextdomain(domain)", "intent": "Bind the `domain` to the locale directory `localedir` .", "question_id": 4210}
{"snippet": "pickletools.dis(pickle, memo=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler .", "question_id": 7417}
{"snippet": "ctypes.PyDLL(name)", "intent": "Instances of this class behave like CDLL instances , except that the Python GIL is not released during the function call , and after the function execution the Python error flag is checked . With arguments `name`.", "question_id": 1770}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "re.finditer(pattern, string)", "intent": "Return an iterator yielding match objects over all non-overlapping matches for the RE `pattern` in `string` .", "question_id": 7949}
{"snippet": "turtle.showturtle()", "intent": "Make the turtle visible .", "question_id": 10979}
{"snippet": "operator.iconcat(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6592}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499}
{"snippet": "base_request_handler.handle()", "intent": "This function must do all the work required to service a request .", "question_id": 8785}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "os.GRND_RANDOM", "intent": "If  this  bit  is  set,  then  random bytes are drawn from the /dev/random pool instead of the /dev/urandom pool.", "question_id": 7141}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`.", "question_id": 10304}
{"snippet": "context.keys()", "intent": "Return a list of all variables in the context object .", "question_id": 1658}
{"snippet": "readline.read_init_file(filename)", "intent": "Execute a readline initialization file . The default `filename` is the last filename used .", "question_id": 8016}
{"snippet": "connection.executescript(sql_script)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executescript ( ) method with the given `sql_script` , and returns the cursor .", "question_id": 8815}
{"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}
{"snippet": "test.support.SMALLEST", "intent": "Object that is less than anything (except itself).", "question_id": 10137}
{"snippet": "shutil.copystat(src, dst, follow_symlinks=True)", "intent": "Copy the permission bits , last access time , last modification time , and flags from `src` to `dst` . If `follow_symlinks` is false , and src and dst both refer to symbolic links , copystat ( ) will operate on the symbolic links themselves rather than the files the symbolic links refer to\u2014reading the information from the src symbolic link , and writing the information to the dst symbolic link .", "question_id": 8317}
{"snippet": "unicodedata.combining(chr)", "intent": "Returns the canonical combining class assigned to the character `chr` as integer .", "question_id": 11351}
{"snippet": "curses.ascii.isspace(c)", "intent": "Checks for ASCII white-space characters ; space , line feed , carriage return , form feed , horizontal tab , vertical tab . With arguments `c`.", "question_id": 1909}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "msilib.UuidCreate()", "intent": "Return the string representation of a new unique identifier .", "question_id": 6059}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573}
{"snippet": "memory_handler.flush()", "intent": "For a MemoryHandler , flushing means just sending the buffered records to the target , if there is one .", "question_id": 5538}
{"snippet": "differ.compare(a, b)", "intent": "Compare two sequences of lines , and generate the delta ( `a` sequence of lines ) . With arguments `b`.", "question_id": 2694}
{"snippet": "mailbox.mbox(path)", "intent": "A subclass of Mailbox for mailboxes in mbox format . With arguments `path`.", "question_id": 5768}
{"snippet": "shutil.which(cmd, mode=os.F_OK | os.X_OK)", "intent": "Return the `path` to an executable which would be run if the given `cmd` was called . `mode` is a permission mask passed to os.access ( ) , by default determining if the file exists and executable .", "question_id": 8346}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}
{"snippet": "StopIteration", "intent": "Raised by built-in function next() and an iterator\u2019s __next__() method to signal that there are no further items produced by the iterator.", "question_id": 3663}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "unittest.mock.patch(target, **kwargs)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11608}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "asyncio.SubprocessTransport(BaseTransport)", "intent": "An abstraction to represent a connection between a parent and its child OS process . With arguments `BaseTransport`.", "question_id": 395}
{"snippet": "logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info)", "intent": "Contains all the information pertinent to the event being logged . The primary information is passed in `msg` and `args` , which are combined using msg % args to create the message field of the record . With arguments `name`, `level`, `pathname`, `lineno`, `exc_info`.", "question_id": 5626}
{"snippet": "process.kill()", "intent": "Kill the child .", "question_id": 552}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "nntplib.decode_header(header_str)", "intent": "Decode a header value , un-escaping any escaped non-ASCII characters . `header_str` must be a str object .", "question_id": 6502}
{"snippet": "context.power(x, y)", "intent": "Return `x` to the power of `y` , reduced `modulo` modulo if given .", "question_id": 2561}
{"snippet": "errno.EL3RST", "intent": "Level 3 reset", "question_id": 3552}
{"snippet": "dispatcher.recv(buffer_size)", "intent": "Read at most `buffer_size` bytes from the socket \u2019 s remote end-point .", "question_id": 669}
{"snippet": "test_case.records", "intent": "A list of logging.LogRecord objects of the matching log messages.", "question_id": 11415}
{"snippet": "date.weekday()", "intent": "Return the day of the week as an integer , where Monday is 0 and Sunday is 6 .", "question_id": 2239}
{"snippet": "warnings.simplefilter(action)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12033}
{"snippet": "doctest.Example(source, want, options=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `options`.", "question_id": 2828}
{"snippet": "cmd.Cmd()", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework .", "question_id": 1127}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706}
{"snippet": "test.support.patch(test_instance, object_to_patch, attr_name, new_value)", "intent": "Override object_to_patch.attr_name with `new_value` . Also add cleanup procedure to `test_instance` to restore `object_to_patch` for `attr_name` .", "question_id": 10269}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667}
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760}
{"snippet": "FileCookieJar.filename", "intent": "Filename of default file in which to keep cookies.", "question_id": 4522}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "stat_result.st_blksize", "intent": "\u201cPreferred\u201d blocksize for efficient file system I/O.", "question_id": 6936}
{"snippet": "DAY_1 ... DAY_7", "intent": "Get the name of the n-th day of the week.", "question_id": 5359}
{"snippet": "task.result()", "intent": "Return the result of the Task .", "question_id": 629}
{"snippet": "marshal.dump(value, file)", "intent": "Write the `value` on the open `file` .", "question_id": 5879}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529}
{"snippet": "hashlib.algorithms_available", "intent": "A set containing the names of the hash algorithms that are available in the running Python interpreter.", "question_id": 4300}
{"snippet": "logging.getLogger()", "intent": "Return a logger with the specified `name` or , if name is None , return a logger which is the root logger of the hierarchy .", "question_id": 5633}
{"snippet": "Template.open(file, mode)", "intent": "Return a file-like object , open to `file` , but read from or written to by the pipeline . With arguments `mode`.", "question_id": 7433}
{"snippet": "base_http_request_handler.handle_one_request()", "intent": "This method will parse and dispatch the request to the appropriate do_* ( ) method .", "question_id": 4635}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "robot_file_parser.safe", "intent": "The UUID was generated by the platform in a multiprocessing-safe way.", "question_id": 11934}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "errno.ECHRNG", "intent": "Channel number out of range", "question_id": 3549}
{"snippet": "Pattern.groups", "intent": "The number of capturing groups in the pattern.", "question_id": 7992}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717}
{"snippet": "ReferenceError", "intent": "This exception is raised when a weak reference proxy, created by the weakref.proxy() function, is used to access an attribute of the referent after it has been garbage collected.", "question_id": 3661}
{"snippet": "asyncio.get_running_loop()", "intent": "Return the running event loop in the current OS thread .", "question_id": 178}
{"snippet": "gzip.open(filename)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4272}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "urllib.request.DataHandler", "intent": "Open data URLs.", "question_id": 11811}
{"snippet": "completed_process.args", "intent": "The arguments used to launch the process.", "question_id": 9578}
{"snippet": "window.attron(attr)", "intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2013}
{"snippet": "deque.appendleft(x)", "intent": "Add `x` to the left side of the deque .", "question_id": 1354}
{"snippet": "weakref.getweakrefs(object)", "intent": "Return a list of all weak reference and proxy objects which refer to `object` .", "question_id": 12080}
{"snippet": "statistics.mean(data)", "intent": "Return the sample arithmetic mean of `data` which can be a sequence or iterator .", "question_id": 9125}
{"snippet": "message.defects", "intent": "The defects attribute contains a list of all the problems found when parsing this message.", "question_id": 3030}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "xml.sax.SAXParseException(msg, exception, locator)", "intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "question_id": 12599}
{"snippet": "winreg.ConnectRegistry(computer_name, key)", "intent": "Establishes a connection to a predefined registry handle on another computer , and returns a handle object . `computer_name` is the name of the remote computer , of the form r '' \\\\computername '' . `key` is the predefined handle to connect to .", "question_id": 12121}
{"snippet": "dircmp.funny_files", "intent": "Files which are in both a and b, but could not be compared.", "question_id": 3779}
{"snippet": "signal.CTRL_C_EVENT", "intent": "The signal corresponding to the Ctrl+C keystroke event.", "question_id": 8376}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_NONE", "intent": "No modifier is given, so it can appear exactly once, as for A.", "question_id": 7783}
{"snippet": "sys.builtin_module_names", "intent": "A tuple of strings giving the names of all modules that are compiled into this Python interpreter.", "question_id": 9771}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "xml.etree.ElementTree.XMLID(text)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data .", "question_id": 12471}
{"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, cte=None, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `cte` is set , encode the payload using the specified content transfer encoding , and set the Content-Transfer-Encoding header to that value . If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'EmailMessage'>`.", "question_id": 3066}
{"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081}
{"snippet": "Path.is_dir()", "intent": "Return True if the path points to a directory ( or a symbolic link pointing to a directory ) , False if it points to another kind of file .", "question_id": 7273}
{"snippet": "Option.action", "intent": "(default: \"store\")", "question_id": 6626}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "shutil.get_unpack_formats()", "intent": "Return a list of all registered formats for unpacking .", "question_id": 8370}
{"snippet": "header.encode(\\t', splitchars=';, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3135}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466}
{"snippet": "__import__(name)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4135}
{"snippet": "xmlrpc.client.ProtocolError", "intent": "A ProtocolError object describes a protocol error in the underlying transport layer (such as a 404 \u2018not found\u2019 error if the server named by the URI does not exist).", "question_id": 12692}
{"snippet": "Popen.poll()", "intent": "Check if child process has terminated .", "question_id": 9609}
{"snippet": "mailbox.popitem()", "intent": "Return an arbitrary ( key , message ) pair , where key is a key and message is a message representation , and delete the corresponding message .", "question_id": 5748}
{"snippet": "fractions.gcd(a, b)", "intent": "Return the greatest common divisor of the integers `a` and `b` .", "question_id": 3877}
{"snippet": "widget.yview(*args)", "intent": "Query or modify vertical position of the treeview . With arguments `*args`.", "question_id": 10671}
{"snippet": "TarInfo.tobuf()", "intent": "Create a string buffer from a TarInfo object .", "question_id": 9973}
{"snippet": "tkinter.tix.OptionMenu", "intent": "The OptionMenu creates a menu button of options.", "question_id": 10559}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "window.bkgdset(ch)", "intent": "Set the window \u2019 s background . With arguments `ch`.", "question_id": 2018}
{"snippet": "smtplib.SMTP(source_address=None)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `source_address` parameter allows binding to some specific source address in a machine with multiple network interfaces , and/or to some specific source TCP port .", "question_id": 8462}
{"snippet": "curses.def_prog_mode()", "intent": "Save the current terminal mode as the \u201c program \u201d mode , the mode when the running program is using curses .", "question_id": 1927}
{"snippet": "tokenize.TokenError", "intent": "Raised when either a docstring or expression that may be split over several lines is not completed anywhere in the file, for example:", "question_id": 10705}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131}
{"snippet": "msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)", "intent": "Return a new Dialog object . An entry in the Dialog table is made , with the specified coordinates , dialog attributes , `title` , `name` of the `first` , `default` , and `cancel` controls . With arguments `db`, `x`, `y`, `w`, `h`, `attr`.", "question_id": 6135}
{"snippet": "text_wrapper.break_on_hyphens", "intent": "(default: True) If true, wrapping will occur preferably on whitespaces and right after hyphens in compound words, as it is customary in English.", "question_id": 10336}
{"snippet": "errno.EXDEV", "intent": "Cross-device link", "question_id": 3523}
{"snippet": "env_builder.setup_scripts(context)", "intent": "Installs activation scripts appropriate to the platform into the virtual environment . With arguments `context`.", "question_id": 11986}
{"snippet": "doctest.ELLIPSIS", "intent": "When specified, an ellipsis marker (...) in the expected output can match any substring in the actual output.", "question_id": 2755}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271}
{"snippet": "Telnet.read_lazy()", "intent": "Process and return data already in the queues ( lazy ) .", "question_id": 10015}
{"snippet": "zipfile.ZipFile", "intent": "The class for reading and writing ZIP files.", "question_id": 12781}
{"snippet": "ServerProxy.system.methodSignature(name)", "intent": "This method takes one parameter , the `name` of a method implemented by the XML-RPC server .", "question_id": 12680}
{"snippet": "header.__str__()", "intent": "Returns an approximation of the Header as a string , using an unlimited line length .", "question_id": 3138}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "dict(mapping, **kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . If a positional argument is given and it is a `mapping` object , a dictionary is created with the same key-value pairs as the mapping object . With arguments `**kwarg`.", "question_id": 9468}
{"snippet": "turtle.Vec2D(x, y)", "intent": "A two-dimensional vector class , used as a helper class for implementing turtle graphics . With arguments `x`, `y`.", "question_id": 11167}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "test.support.run_in_subinterp(code)", "intent": "Run `code` in subinterpreter .", "question_id": 10270}
{"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877}
{"snippet": "inspect.isbuiltin(object)", "intent": "Return true if the `object` is a built-in function or a bound built-in method .", "question_id": 4962}
{"snippet": "dialog.checkbox(name, x, y, width, height, attributes, property, text, next_control)", "intent": "Add and return a CheckBox control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `property`, `text`, `next_control`.", "question_id": 6142}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "module_finder.run_script(pathname)", "intent": "Analyze the contents of the `pathname` file , which must contain Python code .", "question_id": 6056}
{"snippet": "socket.recvfrom_into(buffer)", "intent": "Receive data from the socket , writing it into `buffer` instead of creating a new bytestring .", "question_id": 8713}
{"snippet": "POP3.top(which, howmuch)", "intent": "Retrieves the message header plus `howmuch` lines of the message after the header of message number `which` .", "question_id": 7616}
{"snippet": "module_finder.report()", "intent": "Print a report to standard output that lists the modules imported by the script and their paths , as well as modules that are missing or seem to be missing .", "question_id": 6055}
{"snippet": "@test.support.skip_unless_bind_unix_socket", "intent": "A decorator for running tests that require a functional bind() for Unix sockets.", "question_id": 10207}
{"snippet": "hashlib.new(name, data)", "intent": "Is a generic constructor that takes the string `name` of the desired algorithm as its first parameter . With arguments `data`.", "question_id": 4297}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "test.support.FS_NONASCII", "intent": "A non-ASCII character encodable by os.fsencode().", "question_id": 10114}
{"snippet": "fraction.numerator", "intent": "Numerator of the Fraction in lowest term.", "question_id": 3867}
{"snippet": "sys.flags", "intent": "The named tuple flags exposes the status of command line flags.", "question_id": 9790}
{"snippet": "context.keys()", "intent": "Return a list of all variables in the context object .", "question_id": 1658}
{"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "gnu_translations.gettext(message)", "intent": "Look up the `message` id in the catalog and return the corresponding message string , as a Unicode string .", "question_id": 4261}
{"snippet": "email.policy.HTTP", "intent": "Suitable for serializing headers with for use in HTTP traffic.", "question_id": 3442}
{"snippet": "glob.escape(pathname)", "intent": "Escape all special characters ( ' ? With arguments `pathname`.", "question_id": 4268}
{"snippet": "symbol_table.lookup(name)", "intent": "Lookup `name` in the table and return a Symbol instance .", "question_id": 9743}
{"snippet": "EOFError", "intent": "Raised when the input() function hits an end-of-file condition (EOF) without reading any data.", "question_id": 3637}
{"snippet": "urllib.request.urlopen(url, cadefault=False)", "intent": "Open the URL `url` , which can be either a string or a Request object . The `cadefault` parameter is ignored .", "question_id": 11756}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454}
{"snippet": "stream_reader.readuntil()", "intent": "Read data from the stream until `separator` is found .", "question_id": 508}
{"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617}
{"snippet": "dis.haslocal", "intent": "Sequence of bytecodes that access a local variable.", "question_id": 2750}
{"snippet": "set -= other | ...", "intent": "Update the set, removing elements found in others.", "question_id": 9459}
{"snippet": "Wave_write.setsampwidth(n)", "intent": "Set the sample width to `n` bytes .", "question_id": 12066}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "smtp_handler.getSubject(record)", "intent": "If you want to specify a subject line which is record-dependent , override this method . With arguments `record`.", "question_id": 5524}
{"snippet": "turtle.filling()", "intent": "Return fillstate ( True if filling , False else ) .", "question_id": 10964}
{"snippet": "ssl.OP_ENABLE_MIDDLEBOX_COMPAT", "intent": "Send dummy Change Cipher Spec (CCS) messages in TLS 1.3 handshake to make a TLS 1.3 connection look more like a TLS 1.2 connection.", "question_id": 8941}
{"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}
{"snippet": "SimpleQueue.put_nowait(item)", "intent": "Equivalent to put ( `item` ) , provided for compatibility with Queue.put_nowait ( ) .", "question_id": 7867}
{"snippet": "watched_file_handler.emit(record)", "intent": "Outputs the `record` to the file , but first calls reopenIfNeeded ( ) to reopen the file if it has changed .", "question_id": 5449}
{"snippet": "Dialect.doublequote", "intent": "Controls how instances of quotechar appearing inside a field should themselves be quoted.", "question_id": 1724}
{"snippet": "errno.EIDRM", "intent": "Identifier removed", "question_id": 3548}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "Pattern.groups", "intent": "The number of capturing groups in the pattern.", "question_id": 7992}
{"snippet": "FTP.delete(filename)", "intent": "Remove the file named `filename` from the server .", "question_id": 3960}
{"snippet": "errno.EAGAIN", "intent": "Try again", "question_id": 3516}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "errno.ESHUTDOWN", "intent": "Cannot send after transport endpoint shutdown", "question_id": 3613}
{"snippet": "test.support.MISSING_C_DOCSTRINGS", "intent": "Return True if running on CPython, not on Windows, and configuration not set with WITH_DOC_STRINGS.", "question_id": 10132}
{"snippet": "trace.runctx(cmd)", "intent": "Execute the command and gather statistics from the execution with the current tracing parameters , in the defined global and local environments . With arguments `cmd`.", "question_id": 10717}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "semaphore.release()", "intent": "Release a semaphore , incrementing the internal counter by one .", "question_id": 587}
{"snippet": "base_http_request_handler.MessageClass", "intent": "Specifies an email.message.Message-like class to parse HTTP headers.", "question_id": 4632}
{"snippet": "glob.iglob(pathname)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`.", "question_id": 4266}
{"snippet": "style.theme_create(themename)", "intent": "Create a new theme . It is an error if `themename` already exists .", "question_id": 10686}
{"snippet": "DocumentType.name", "intent": "The name of the root element as given in the DOCTYPE declaration, if present.", "question_id": 12341}
{"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429}
{"snippet": "SSLContext.wrap_socket(sock)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) .", "question_id": 9022}
{"snippet": "InteractiveConsole.interact(banner=None, exitmsg=None)", "intent": "Closely emulate the interactive Python console . The optional `banner` argument specify the banner to print before the first interaction ; by default it prints a banner similar to the one printed by the standard Python interpreter , followed by the class name of the console object in parentheses ( so as not to confuse this with the real interpreter \u2013 since it \u2019 s so close ! The optional `exitmsg` argument specifies an exit message printed when exiting .", "question_id": 1187}
{"snippet": "typing.TYPE_CHECKING", "intent": "A special constant that is assumed to be True by 3rd party static type checkers.", "question_id": 11339}
{"snippet": "test.support.modules_cleanup(oldmodules)", "intent": "Remove modules except for `oldmodules` and encodings in order to preserve internal cache .", "question_id": 10251}
{"snippet": "coverage_results.update(other)", "intent": "Merge in data from another CoverageResults object . With arguments `other`.", "question_id": 10724}
{"snippet": "random.randrange(stop)", "intent": "Return a randomly selected element from range ( start , `stop` , step ) .", "question_id": 7890}
{"snippet": "dict.keys()", "intent": "Return a new view of the dictionary \u2019 s keys .", "question_id": 9485}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}
{"snippet": "doc_test_runner.report_unexpected_exception(out, test, example, exc_info)", "intent": "Report that the given `example` raised an unexpected exception . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `exc_info` is a tuple containing information about the unexpected exception ( as returned by sys.exc_info ( ) ) .", "question_id": 2872}
{"snippet": "pool.apply(func, args, kwds)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6332}
{"snippet": "socket.makefile(mode='r')", "intent": "Return a file object associated with the socket . These arguments are interpreted the same way as by the built-in open ( ) function , except the only supported `mode` values are ' r ' ( default ) , ' w ' and ' b ' .", "question_id": 8692}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "_thread.interrupt_main()", "intent": "Simulate the effect of a signal.SIGINT signal arriving in the main thread .", "question_id": 12945}
{"snippet": "sys.settrace(tracefunc)", "intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "question_id": 9839}
{"snippet": "sunau.AUDIO_FILE_MAGIC", "intent": "An integer every valid Sun AU file begins with, stored in big-endian form.", "question_id": 9694}
{"snippet": "curses.ascii.alt(c)", "intent": "Return the 8-bit character corresponding to the given ASCII character ( the character bit value is bitwise-ored with 0x80 ) . With arguments `c`.", "question_id": 1916}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892}
{"snippet": "pty.openpty()", "intent": "Open a new pseudo-terminal pair , using os.openpty ( ) if possible , or emulation code for generic Unix systems .", "question_id": 7699}
{"snippet": "loop.create_connection(protocol_factory, family=0)", "intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation . The socket `family` can be either AF_INET or AF_INET6 depending on host ( or the family argument , if provided ) .", "question_id": 206}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}
{"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400}
{"snippet": "dispatcher.handle_expt()", "intent": "Called when there is out of band ( OOB ) data for a socket connection .", "question_id": 655}
{"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004}
{"snippet": "snapshot.traces", "intent": "Traces of all memory blocks allocated by Python: sequence of Trace instances.", "question_id": 10879}
{"snippet": "math.remainder(x, y)", "intent": "Return the IEEE 754-style remainder of `x` with respect to `y` .", "question_id": 5903}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}
{"snippet": "errno.EL2HLT", "intent": "Level 2 halted", "question_id": 3556}
{"snippet": "asyncio.subprocess.DEVNULL", "intent": "Special value that can be used as the stdin, stdout or stderr argument to process creation functions.", "question_id": 545}
{"snippet": "mock.reset_mock(side_effect=False)", "intent": "The reset_mock method resets all the call attributes on a mock object : Note that reset_mock ( ) doesn \u2019 t clear the return value , `side_effect` or any child attributes you have set using normal assignment by default .", "question_id": 11580}
{"snippet": "mime_types.types_map_inv", "intent": "Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types.", "question_id": 5963}
{"snippet": "inspect.CO_ITERABLE_COROUTINE", "intent": "The flag is used to transform generators into generator-based coroutines.", "question_id": 5048}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717}
{"snippet": "netrc.macros", "intent": "Dictionary mapping macro names to string lists.", "question_id": 6390}
{"snippet": "socketserver.BaseRequestHandler", "intent": "This is the superclass of all request handler objects.", "question_id": 8783}
{"snippet": "InteractiveConsole.interact(banner=None, exitmsg=None)", "intent": "Closely emulate the interactive Python console . The optional `banner` argument specify the banner to print before the first interaction ; by default it prints a banner similar to the one printed by the standard Python interpreter , followed by the class name of the console object in parentheses ( so as not to confuse this with the real interpreter \u2013 since it \u2019 s so close ! The optional `exitmsg` argument specifies an exit message printed when exiting .", "question_id": 1187}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "Unpacker.unpack_list(unpack_item)", "intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "question_id": 12297}
{"snippet": "collections.abc.MappingView", "intent": "ABCs for mapping, items, keys, and values views.", "question_id": 1326}
{"snippet": "i_pv4_network.num_addresses", "intent": "The total number of addresses in the network.", "question_id": 5203}
{"snippet": "os.initgroups(username, gid)", "intent": "Call the system initgroups ( ) to initialize the group access list with all of the groups of which the specified `username` is a member , plus the specified group id . With arguments `gid`.", "question_id": 6691}
{"snippet": "unittest.mock.NonCallableMock(**kwargs)", "intent": "A non-callable version of Mock . With arguments `**kwargs`.", "question_id": 11597}
{"snippet": "doctest.DocFileSuite(*paths, encoding=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `encoding` specifies an encoding that should be used to convert the file to unicode . With arguments `*paths`.", "question_id": 2804}
{"snippet": "HTMLParser.handle_data(data)", "intent": "This method is called to process arbitrary `data` ( e.g .", "question_id": 4359}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716}
{"snippet": "errno.ELIBSCN", "intent": ".lib section in a.out corrupted", "question_id": 3586}
{"snippet": "xml.etree.ElementTree.ProcessingInstruction(target)", "intent": "PI element factory . `target` is a string containing the PI target .", "question_id": 12448}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716}
{"snippet": "test.support.TEST_DATA_DIR", "intent": "Set to the data directory within the test package.", "question_id": 10128}
{"snippet": "i_pv4_address.reverse_pointer", "intent": "The name of the reverse DNS PTR record for the IP address, e.g.", "question_id": 5179}
{"snippet": "socket.sendmsg(buffers)", "intent": "Send normal and ancillary data to the socket , gathering the non-ancillary data from a series of `buffers` and concatenating it into a single message .", "question_id": 8726}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "robot_file_parser.can_fetch(useragent, url)", "intent": "Returns True if the `useragent` is allowed to fetch the `url` according to the rules contained in the parsed robots.txt file .", "question_id": 11912}
{"snippet": "turtle.numinput(title, prompt)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input .", "question_id": 11084}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "SubprocessTransport.kill()", "intent": "Kill the subprocess .", "question_id": 422}
{"snippet": "email.charset.Charset()", "intent": "Map character sets to their email properties .", "question_id": 2910}
{"snippet": "select.select(rlist, wlist, xlist, timeout)", "intent": "This is a straightforward interface to the Unix select ( ) system call . The optional `timeout` argument specifies a time-out as a floating point number in seconds . With arguments `rlist`, `wlist`, `xlist`.", "question_id": 8166}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "msvcrt.heapmin()", "intent": "Force the malloc ( ) heap to clean itself up and return unused blocks to the operating system .", "question_id": 6164}
{"snippet": "feature.set_current()", "intent": "Make this feature the current feature of msilib .", "question_id": 6124}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "aifc.getframerate()", "intent": "Return the sampling rate ( number of audio frames per second ) .", "question_id": 13}
{"snippet": "concurrent.futures.ProcessPoolExecutor()", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes .", "question_id": 1457}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513}
{"snippet": "asyncio.Semaphore(value=1, loop=None)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) . With arguments `loop`.", "question_id": 584}
{"snippet": "multiprocessing.set_executable()", "intent": "Sets the path of the Python interpreter to use when starting a child process .", "question_id": 6228}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "zipfile.ZipFile(file, mode='r', compresslevel=None)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "question_id": 12799}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846}
{"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "joinable_queue.poll()", "intent": "Return whether there is any data available to be read .", "question_id": 6235}
{"snippet": "mailbox.close()", "intent": "Flush the mailbox , unlock it if necessary , and close any open files .", "question_id": 5753}
{"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}
{"snippet": "multiprocessing.Value(typecode_or_type, *args)", "intent": "Return a ctypes object allocated from shared memory . `typecode_or_type` determines the type of the returned object : it is either a ctypes type or a one character typecode of the kind used by the array module . `*args` is passed on to the constructor for the type .", "question_id": 6265}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757}
{"snippet": "fnmatch.fnmatchcase(filename, pattern)", "intent": "Test whether `filename` matches `pattern` , returning True or False ; the comparison is case-sensitive and does not apply os.path.normcase ( ) .", "question_id": 3814}
{"snippet": "locale.NOEXPR", "intent": "Get a regular expression that can be used with the regex(3) function to recognize a negative response to a yes/no question.", "question_id": 5366}
{"snippet": "shlex.infile", "intent": "The name of the current input file, as initially set at class instantiation time or stacked by later source requests.", "question_id": 8301}
{"snippet": "context.same_quantum(x, y)", "intent": "Returns True if the two operands have the same exponent . With arguments `x`, `y`.", "question_id": 2568}
{"snippet": "shutil.disk_usage(path)", "intent": "Return disk usage statistics about the given `path` as a named tuple with the attributes total , used and free , which are the amount of total , used and free space , in bytes .", "question_id": 8340}
{"snippet": "winreg.REG_DWORD_LITTLE_ENDIAN", "intent": "A 32-bit number in little-endian format.", "question_id": 12176}
{"snippet": "email.policy.compat32", "intent": "An instance of Compat32, providing  backward compatibility with the behavior of the email package in Python 3.2.", "question_id": 3451}
{"snippet": "ZipFile.extractall(path=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12819}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "TarFile.open()", "intent": "Alternative constructor .", "question_id": 9923}
{"snippet": "ModuleNotFoundError", "intent": "A subclass of ImportError which is raised by import when a module could not be located.", "question_id": 3641}
{"snippet": "bound_arguments.apply_defaults()", "intent": "Set default values for missing arguments .", "question_id": 5007}
{"snippet": "turtle.clear()", "intent": "Delete the turtle \u2019 s drawings from the screen .", "question_id": 10968}
{"snippet": "dict.values()", "intent": "Return a new view of the dictionary \u2019 s values .", "question_id": 9493}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "timer.print_exc()", "intent": "Helper to print a traceback from the timed code .", "question_id": 10515}
{"snippet": "class.get_methods()", "intent": "Return a tuple containing the names of methods declared in the class .", "question_id": 9752}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "tty.setcbreak(fd)", "intent": "Change the mode of file descriptor `fd` to cbreak .", "question_id": 10901}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "window.echochar(ch, attr)", "intent": "Add character `ch` with attribute `attr` , and immediately call refresh ( ) on the window .", "question_id": 2044}
{"snippet": "asyncio.BaseProtocol", "intent": "Base protocol with methods that all protocols share.", "question_id": 426}
{"snippet": "nntplib.NNTPProtocolError", "intent": "Exception raised when a reply is received from the server that does not begin with a digit in the range 1\u20135.", "question_id": 6444}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642}
{"snippet": "platform.python_version_tuple()", "intent": "Returns the Python version as tuple ( major , minor , patchlevel ) of strings .", "question_id": 7479}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "os.sched_getaffinity(pid)", "intent": "Return the set of CPUs the process with PID `pid` ( or the current process if zero ) is restricted to .", "question_id": 7114}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "bz2.BZ2File(filename)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly .", "question_id": 886}
{"snippet": "errno.EBADE", "intent": "Invalid exchange", "question_id": 3557}
{"snippet": "statistics.median_grouped(data)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation .", "question_id": 9130}
{"snippet": "mock.call_count", "intent": "An integer telling you how many times the mock object has been called:", "question_id": 11589}
{"snippet": "stat.ST_MTIME", "intent": "Time of last modification.", "question_id": 9082}
{"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}
{"snippet": "int.to_bytes(length, byteorder)", "intent": "Return an array of bytes representing an integer . The integer is represented using `length` bytes . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9143}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762}
{"snippet": "zipfile.ZipFile(file, mode='r')", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file .", "question_id": 12793}
{"snippet": "tkinter.tix.Control", "intent": "The Control widget is also known as the SpinBox widget.", "question_id": 10555}
{"snippet": "Function.children", "intent": "A dictionary mapping names to descriptors for nested functions and classes.", "question_id": 7715}
{"snippet": "traceback.clear_frames(tb)", "intent": "Clears the local variables of all the stack frames in a traceback `tb` by calling the clear ( ) method of each frame object .", "question_id": 10791}
{"snippet": "loop.connect_write_pipe(protocol_factory, pipe)", "intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 302}
{"snippet": "ArgumentParser.print_usage(file=None)", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line . If `file` is None , sys.stdout is assumed .", "question_id": 104}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997}
{"snippet": "base_server.socket", "intent": "The socket object on which the server will listen for incoming requests.", "question_id": 8770}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "curses.isendwin()", "intent": "Return True if endwin ( ) has been called ( that is , the curses library has been deinitialized ) .", "question_id": 1949}
{"snippet": "snapshot.statistics(key_type: str)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`.", "question_id": 10876}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "Path.rmdir()", "intent": "Remove this directory .", "question_id": 7313}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201}
{"snippet": "curses.curs_set(visibility)", "intent": "Set the cursor state . `visibility` can be set to 0 , 1 , or 2 , for invisible , normal , or very visible .", "question_id": 1926}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_SYNTAX", "intent": "Some unspecified syntax error was encountered.", "question_id": 7801}
{"snippet": "loop.sock_recv_into(sock, buf)", "intent": "Receive data from `sock` into the `buf` buffer .", "question_id": 277}
{"snippet": "task.cancel()", "intent": "Request the Task to be cancelled .", "question_id": 626}
{"snippet": "resource_reader.contents()", "intent": "Returns an iterable of strings over the contents of the package .", "question_id": 4822}
{"snippet": "stringprep.in_table_c8(code)", "intent": "Determine whether `code` is in tableC.8 ( Change display properties or are deprecated ) .", "question_id": 9546}
{"snippet": "concurrent.futures.thread.BrokenThreadPool", "intent": "Derived from BrokenExecutor, this exception class is raised when one of the workers of a ThreadPoolExecutor has failed initializing.", "question_id": 1489}
{"snippet": "uu.encode(in_file, out_file, backtick=False)", "intent": "Uuencode file `in_file` into file `out_file` . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "question_id": 11920}
{"snippet": "plistlib.load(fp, dict_type=dict)", "intent": "Read a plist file . `fp` should be a readable and binary file object . The `dict_type` is the type used for dictionaries that are read from the plist file .", "question_id": 7550}
{"snippet": "platform.python_implementation()", "intent": "Returns a string identifying the Python implementation .", "question_id": 7476}
{"snippet": "buffered_reader.read1(size)", "intent": "Read and return up to `size` bytes with only one call on the raw stream .", "question_id": 5122}
{"snippet": "math.pow(x, y)", "intent": "Return `x` raised to the power `y` .", "question_id": 5912}
{"snippet": "xml.dom.InuseAttributeErr", "intent": "Raised when an attempt is made to insert an Attr node that is already present elsewhere in the document.", "question_id": 12384}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "token.ISTERMINAL(x)", "intent": "Return true for terminal token values . With arguments `x`.", "question_id": 10695}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164}
{"snippet": "CGIXMLRPCRequestHandler.handle_request(request_text=None)", "intent": "Handle an XML-RPC request . If `request_text` is given , it should be the POST data provided by the HTTP server , otherwise the contents of stdin will be used .", "question_id": 12748}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224}
{"snippet": "test_result.addSuccess(test)", "intent": "Called when the `test` case test succeeds .", "question_id": 11526}
{"snippet": "writer.new_spacing(spacing)", "intent": "Set the `spacing` style to spacing .", "question_id": 3845}
{"snippet": "os.pread(fd, n, offset)", "intent": "Read at most `n` bytes from file descriptor `fd` at a position of `offset` , leaving the file offset unchanged .", "question_id": 6783}
{"snippet": "pickle.UnpicklingError", "intent": "Error raised when there is a problem unpickling an object, such as a data corruption or a security violation.", "question_id": 7389}
{"snippet": "ctypes.c_longlong", "intent": "Represents the C signed long long datatype.", "question_id": 1867}
{"snippet": "tkinter.tix.NoteBook", "intent": "The NoteBook widget can be used to display many windows in a limited space using a notebook metaphor.", "question_id": 10576}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_OPT", "intent": "The model is optional: it can appear once or not at all, as for A?.", "question_id": 7784}
{"snippet": "types.DynamicClassAttribute()", "intent": "Route attribute access on a class to __getattr__ .", "question_id": 11218}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}
{"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283}
{"snippet": "collections.ChainMap(*maps)", "intent": "A ChainMap groups multiple dicts or other mappings together to create a single , updateable view . With arguments `*maps`.", "question_id": 1335}
{"snippet": "queue_listener.format(record)", "intent": "Do formatting for a `record` - if a formatter is set , use it .", "question_id": 5608}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "os.lseek(fd, pos, how)", "intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "question_id": 6734}
{"snippet": "Purpose.SERVER_AUTH", "intent": "Option for create_default_context() and SSLContext.load_default_certs().", "question_id": 8964}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "resource.RLIMIT_SWAP", "intent": "The maximum size (in bytes) of the swap space that may be reserved or used by all of this user id\u2019s processes.", "question_id": 8093}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "smtp_server.channel_class", "intent": "Override this in subclasses to use a custom SMTPChannel for managing SMTP clients.", "question_id": 8423}
{"snippet": "somenamedtuple._replace(**kwargs)", "intent": "Return a new instance of the named tuple replacing specified fields with new values : With arguments `**kwargs`.", "question_id": 1386}
{"snippet": "Pattern.split(string)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`.", "question_id": 7979}
{"snippet": "argparse.ArgumentParser(usage=None)", "intent": "Create a new ArgumentParser object . With arguments `usage`.", "question_id": 40}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225}
{"snippet": "window.border()", "intent": "Draw a border around the edges of the window .", "question_id": 2027}
{"snippet": "imp.C_EXTENSION", "intent": "The module was found as dynamically loadable shared library.", "question_id": 4776}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_SYNTAX", "intent": "Some unspecified syntax error was encountered.", "question_id": 7801}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "mailbox.Error", "intent": "The based class for all other module-specific exceptions.", "question_id": 5856}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529}
{"snippet": "base64.a85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 729}
{"snippet": "audioop.rms(fragment, width)", "intent": "Return the root-mean-square of the `fragment` , i.e . With arguments `width`.", "question_id": 704}
{"snippet": "asyncio.Future(loop=None)", "intent": "A Future represents an eventual result of an asynchronous operation . This way alternative event `loop` implementations can inject their own optimized implementations of a Future object .", "question_id": 360}
{"snippet": "gettext.translation(domain, class_=None)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths . The actual class instantiated is `class_` if provided , otherwise GNUTranslations .", "question_id": 4232}
{"snippet": "formatter.push_style(*styles)", "intent": "Push any number of arbitrary style specifications . With arguments `*styles`.", "question_id": 3832}
{"snippet": "bytes_io.read1()", "intent": "In BytesIO , this is the same as read ( ) .", "question_id": 5114}
{"snippet": "event.clear()", "intent": "Clear ( unset ) the event .", "question_id": 567}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "Dialect.doublequote", "intent": "Controls how instances of quotechar appearing inside a field should themselves be quoted.", "question_id": 1724}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "simple_http_request_handler.extensions_map", "intent": "A dictionary mapping suffixes into MIME types.", "question_id": 4662}
{"snippet": "json.JSONEncoder(sort_keys=False)", "intent": "Extensible JSON encoder for Python data structures . If `sort_keys` is true ( default : False ) , then the output of dictionaries will be sorted by key ; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis .", "question_id": 5327}
{"snippet": "_thread.interrupt_main()", "intent": "Simulate the effect of a signal.SIGINT signal arriving in the main thread .", "question_id": 12945}
{"snippet": "os.DirEntry", "intent": "Object yielded by scandir() to expose the file path and other file attributes of a directory entry.", "question_id": 6906}
{"snippet": "wsgiref.util.request_uri(environ, include_query=True)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . If `include_query` is false , the query string is not included in the resulting URI . With arguments `environ`.", "question_id": 12212}
{"snippet": "turtle.onkeypress(fun)", "intent": "Bind `fun` to key-press event of `key` if key is given , or to any key-press-event if no key is given .", "question_id": 11069}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "turtle.stamp()", "intent": "Stamp a copy of the turtle shape onto the canvas at the current turtle position .", "question_id": 10929}
{"snippet": "async_result.get()", "intent": "Return the result when it arrives .", "question_id": 6361}
{"snippet": "code.InteractiveInterpreter(locals=None)", "intent": "This class deals with parsing and interpreter state ( the user \u2019 s namespace ) ; it does not deal with input buffering or prompting or input file naming ( the filename is always passed in explicitly ) . The optional `locals` argument specifies the dictionary in which code will be executed ; it defaults to a newly created dictionary with key '__name__ ' set to '__console__ ' and key '__doc__ ' set to None .", "question_id": 1156}
{"snippet": "dis.hasname", "intent": "Sequence of bytecodes that access an attribute by name.", "question_id": 2747}
{"snippet": "Template.clone()", "intent": "Return a new , equivalent , pipeline template .", "question_id": 7429}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194}
{"snippet": "audioop.findmax(fragment, length)", "intent": "Search `fragment` for a slice of `length` length samples ( not bytes ! )", "question_id": 690}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "Unpacker.unpack_string()", "intent": "Unpacks and returns a variable length string .", "question_id": 12294}
{"snippet": "calendar.monthrange(year, month)", "intent": "Returns weekday of first day of the `month` and number of days in month , for the specified `year` and month .", "question_id": 991}
{"snippet": "timedelta.max", "intent": "The most positive timedelta object, timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999).", "question_id": 2215}
{"snippet": "io.BytesIO()", "intent": "A stream implementation using an in-memory bytes buffer .", "question_id": 5110}
{"snippet": "asyncore.dispatcher_with_send", "intent": "A dispatcher subclass which adds simple buffered output capability, useful for simple clients.", "question_id": 674}
{"snippet": "base_server.handle_timeout()", "intent": "This function is called when the timeout attribute has been set to a value other than None and the timeout period has passed with no requests being received .", "question_id": 8778}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659}
{"snippet": "async_exit_stack.aclose()", "intent": "Similar to close ( ) but properly handles awaitables .", "question_id": 1636}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "itertools.count()", "intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "question_id": 5246}
{"snippet": "pickle.load(file)", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein .", "question_id": 7371}
{"snippet": "connection.total_changes", "intent": "Returns the total number of database rows that have been modified, inserted, or deleted since the database connection was opened.", "question_id": 8827}
{"snippet": "zipfile.ZipFile", "intent": "The class for reading and writing ZIP files.", "question_id": 12781}
{"snippet": "statistics.mean(data)", "intent": "Return the sample arithmetic mean of `data` which can be a sequence or iterator .", "question_id": 9125}
{"snippet": "socket_handler.send(packet)", "intent": "Send a pickled byte-string `packet` to the socket .", "question_id": 5488}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "datetime.timestamp()", "intent": "Return POSIX timestamp corresponding to the datetime instance .", "question_id": 2302}
{"snippet": "io.BlockingIOError", "intent": "This is a compatibility alias for the builtin BlockingIOError exception.", "question_id": 5061}
{"snippet": "widget.start()", "intent": "Begin autoincrement mode : schedules a recurring timer event that calls Progressbar.step ( ) every `interval` milliseconds .", "question_id": 10615}
{"snippet": "ctypes.c_short", "intent": "Represents the C signed short datatype.", "question_id": 1868}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "Telnet.read_lazy()", "intent": "Process and return data already in the queues ( lazy ) .", "question_id": 10015}
{"snippet": "struct.iter_unpack(format, buffer)", "intent": "Iteratively unpack from the `buffer` buffer according to the `format` string format .", "question_id": 9556}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "xml.dom.InvalidCharacterErr", "intent": "This exception is raised when a string parameter contains a character that is not permitted in the context it\u2019s being used in by the XML 1.0 recommendation.", "question_id": 12386}
{"snippet": "email.headerregistry.ParameterizedMIMEHeader", "intent": "MIME headers all start with the prefix \u2018Content-\u2018.", "question_id": 3167}
{"snippet": "stat.UF_HIDDEN", "intent": "The file should not be displayed in a GUI (Mac OS X 10.5+).", "question_id": 9119}
{"snippet": "errno.ENONET", "intent": "Machine is not on the network", "question_id": 3569}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "zipapp.create_archive(source)", "intent": "Create an application archive from `source` .", "question_id": 12767}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "tkinter.ttk.Style", "intent": "This class is used to manipulate the style database.", "question_id": 10672}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "errno.ESTALE", "intent": "Stale NFS file handle", "question_id": 3621}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "InteractiveConsole.resetbuffer()", "intent": "Remove any unhandled source text from the input buffer .", "question_id": 1189}
{"snippet": "dis.haslocal", "intent": "Sequence of bytecodes that access a local variable.", "question_id": 2750}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426}
{"snippet": "i_pv4_interface.network", "intent": "The network (IPv4Network) this interface belongs to.", "question_id": 5226}
{"snippet": "test_case.maxDiff", "intent": "This attribute controls the maximum length of diffs output by assert methods that report diffs on failure.", "question_id": 11466}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "base_handler.error_body", "intent": "The error response body.", "question_id": 12265}
{"snippet": "urllib.request.ProxyHandler()", "intent": "Cause requests to go through a proxy .", "question_id": 11784}
{"snippet": "resource.getpagesize()", "intent": "Returns the number of bytes in a system page .", "question_id": 8096}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}
{"snippet": "non_callable_magic_mock.reason", "intent": "This is usually a string explaining the reason for this error.", "question_id": 11662}
{"snippet": "Packer.pack_opaque(data)", "intent": "Packs a variable length opaque `data` string , similarly to pack_string ( ) .", "question_id": 12280}
{"snippet": "smtp_handler.getSubject(record)", "intent": "If you want to specify a subject line which is record-dependent , override this method . With arguments `record`.", "question_id": 5524}
{"snippet": "tkinter.tix.PanedWindow", "intent": "The PanedWindow widget allows the user to interactively manipulate the sizes of several panes.", "question_id": 10574}
{"snippet": "turtle.filling()", "intent": "Return fillstate ( True if filling , False else ) .", "question_id": 10964}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "asyncio.WindowsProactorEventLoopPolicy", "intent": "An alternative event loop policy that uses the ProactorEventLoop event loop implementation.", "question_id": 381}
{"snippet": "smtplib.SMTP(source_address=None)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `source_address` parameter allows binding to some specific source address in a machine with multiple network interfaces , and/or to some specific source TCP port .", "question_id": 8462}
{"snippet": "executor.map(func, *iterables, timeout=None)", "intent": "Similar to map ( `func` , `*iterables` ) except : The returned iterator raises a concurrent.futures.TimeoutError if __next__ ( ) is called and the result isn \u2019 t available after `timeout` seconds from the original call to Executor.map ( ) .", "question_id": 1442}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "window.attrset(attr)", "intent": "Set the \u201c background \u201d set of attributes to `attr` .", "question_id": 2014}
{"snippet": "mock.return_value", "intent": "Set this to configure the value returned by calling the mock:", "question_id": 11590}
{"snippet": "config_parser.sections()", "intent": "Return a list of the sections available ; the default section is not included in the list .", "question_id": 1507}
{"snippet": "Pattern.match(string)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object .", "question_id": 7975}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}
{"snippet": "formatter.assert_line_data()", "intent": "Inform the formatter that data has been added to the current paragraph out-of-band .", "question_id": 3836}
{"snippet": "locale.CHAR_MAX", "intent": "This is a symbolic constant used for different values returned by localeconv().", "question_id": 5411}
{"snippet": "subprocess.Popen(args, cwd=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `cwd` is not None , the function changes the working directory to cwd before executing the child .", "question_id": 9608}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common, shallow=True)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` . The `shallow` parameter has the same meaning and default value as for filecmp.cmp ( ) .", "question_id": 3758}
{"snippet": "mime_types.read(filename, strict=True)", "intent": "Load MIME information from a file named `filename` . If `strict` is True , information will be added to list of standard types , else to the list of non-standard types .", "question_id": 5971}
{"snippet": "Path.write_text(data)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file :", "question_id": 7323}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "traceback.print_stack()", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive .", "question_id": 10761}
{"snippet": "env_builder.install_scripts(context, path)", "intent": "`path` is the path to a directory that should contain subdirectories \u201c common \u201d , \u201c posix \u201d , \u201c nt \u201d , each containing scripts destined for the bin directory in the environment . With arguments `context`.", "question_id": 11988}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490}
{"snippet": "terminal_size.columns", "intent": "Width of the terminal window in characters.", "question_id": 6814}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "shlex.wordchars", "intent": "The string of characters that will accumulate into multi-character tokens.", "question_id": 8295}
{"snippet": "widget.enable_traversal()", "intent": "Enable keyboard traversal for a toplevel window containing this notebook .", "question_id": 10614}
{"snippet": "locale.LC_NUMERIC", "intent": "Locale category for formatting numbers.", "question_id": 5409}
{"snippet": "str.swapcase()", "intent": "Return a copy of the string with uppercase characters converted to lowercase and vice versa .", "question_id": 9252}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "errno.ERANGE", "intent": "Math result not representable", "question_id": 3539}
{"snippet": "os.path.split(path)", "intent": "Split the pathname `path` into a pair , ( head , tail ) where tail is the last pathname component and head is everything leading up to that .", "question_id": 7169}
{"snippet": "mimetypes.knownfiles", "intent": "List of type map file names commonly installed.", "question_id": 5951}
{"snippet": "sys.getrecursionlimit()", "intent": "Return the current value of the recursion limit , the maximum depth of the Python interpreter stack .", "question_id": 9801}
{"snippet": "mock._get_child_mock(**kw)", "intent": "Create the child mocks for attributes and return value . With arguments `**kw`.", "question_id": 11587}
{"snippet": "concurrent.futures.ProcessPoolExecutor()", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes .", "question_id": 1457}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "stream_writer.wait_closed()", "intent": "Wait until the stream is closed .", "question_id": 522}
{"snippet": "math.inf", "intent": "A floating-point positive infinity.", "question_id": 5937}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "pool.close()", "intent": "Prevents any more tasks from being submitted to the pool .", "question_id": 6356}
{"snippet": "queue_listener.createLock()", "intent": "Initializes a thread lock which can be used to serialize access to underlying I/O functionality which may not be threadsafe .", "question_id": 5596}
{"snippet": "asyncio.gather(*aws)", "intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`.", "question_id": 599}
{"snippet": "sys.base_exec_prefix", "intent": "Set during Python startup, before site.py is run, to the same value as exec_prefix.", "question_id": 9768}
{"snippet": "sqlite3.register_adapter(type, callable)", "intent": "Registers a `callable` to convert the custom Python `type` type into one of SQLite \u2019 s supported types .", "question_id": 8800}
{"snippet": "mime_types.read(filename)", "intent": "Load MIME information from a file named `filename` .", "question_id": 5970}
{"snippet": "xml.etree.ElementTree.TreeBuilder(element_factory=None)", "intent": "Generic element structure builder . `element_factory` , when given , must be a callable accepting two positional arguments : a tag and a dict of attributes .", "question_id": 12540}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "Cmd.misc_header", "intent": "The header to issue if the help output has a section for miscellaneous  help topics (that is, there are help_*() methods without corresponding do_*() methods).", "question_id": 1151}
{"snippet": "FTP.dir()", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output .", "question_id": 3958}
{"snippet": "json.dump(obj, fp, **kw, allow_nan=True)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `allow_nan` is false ( default : True ) , then it will be a ValueError to serialize out of range float values ( nan , inf , -inf ) in strict compliance of the JSON specification . With arguments `**kw`.", "question_id": 5274}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "doctest.set_unittest_reportflags(flags)", "intent": "Set the doctest reporting `flags` to use .", "question_id": 2816}
{"snippet": "@dataclasses.dataclass()", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below .", "question_id": 2157}
{"snippet": "HTMLParser.handle_decl(decl)", "intent": "This method is called to handle an HTML doctype declaration ( e.g . The `decl` parameter will be the entire contents of the declaration inside the < ! ... > markup ( e.g .", "question_id": 4363}
{"snippet": "headers.add_header(name, value, **_params)", "intent": "Add a ( possibly multi-valued ) header , with optional MIME parameters specified via keyword arguments . `name` is the header field to add . If the parameter `value` is a string , it is added to the header value parameters in the form name= '' value '' . With arguments `**_params`.", "question_id": 12222}
{"snippet": "os.defpath", "intent": "The default search path used by exec*p* and spawn*p* if the environment doesn\u2019t have a 'PATH' key.", "question_id": 7127}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}
{"snippet": "cmath.log10(x)", "intent": "Return the base-10 logarithm of `x` .", "question_id": 1099}
{"snippet": "watched_file_handler.emit(record)", "intent": "Outputs the `record` to the file , but first calls reopenIfNeeded ( ) to reopen the file if it has changed .", "question_id": 5449}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}
{"snippet": "turtle.ondrag(fun, btn=1)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`.", "question_id": 11028}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "doc_test_parser.parse(string)", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings .", "question_id": 2859}
{"snippet": "curses.cbreak()", "intent": "Enter cbreak mode .", "question_id": 1923}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "platform.python_version_tuple()", "intent": "Returns the Python version as tuple ( major , minor , patchlevel ) of strings .", "question_id": 7479}
{"snippet": "urllib.request.URLopener(**x509)", "intent": "Base class for opening and reading URLs . With arguments `**x509`.", "question_id": 11890}
{"snippet": "ImportError", "intent": "Raised when the import statement has troubles trying to load a module.", "question_id": 3640}
{"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}
{"snippet": "Cookie.expires", "intent": "Integer expiry date in seconds since epoch, or None.", "question_id": 4563}
{"snippet": "inspect.isbuiltin(object)", "intent": "Return true if the `object` is a built-in function or a bound built-in method .", "question_id": 4962}
{"snippet": "i_pv4_network.with_netmask", "intent": "A string representation of the network, with the mask in net mask notation.", "question_id": 5201}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "typing.Any", "intent": "Special type indicating an unconstrained type.", "question_id": 11331}
{"snippet": "aifc.getcompname()", "intent": "Return a bytes array convertible to a human-readable description of the type of compression used in the audio file .", "question_id": 16}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 452}
{"snippet": "enum.unique()", "intent": "Enum class decorator that ensures only one name is bound to any one value .", "question_id": 3503}
{"snippet": "queue.get_nowait()", "intent": "Equivalent to get ( False ) .", "question_id": 6207}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "@abc.abstractclassmethod", "intent": "A subclass of the built-in classmethod(), indicating an abstract classmethod.", "question_id": 5}
{"snippet": "joinable_queue.poll()", "intent": "Return whether there is any data available to be read .", "question_id": 6235}
{"snippet": "asyncio.gather(*aws, return_exceptions=False)", "intent": "Run awaitable objects in the aws sequence concurrently . If `return_exceptions` is False ( default ) , the first raised exception is immediately propagated to the task that awaits on gather ( ) . With arguments `*aws`.", "question_id": 601}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201}
{"snippet": "random.random()", "intent": "Return the next random floating point number in the range [ 0.0 , 1.0 ) .", "question_id": 7906}
{"snippet": "window.getbegyx()", "intent": "Return a tuple ( y , x ) of co-ordinates of upper-left corner .", "question_id": 2049}
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106}
{"snippet": "formatter.check_unused_args(used_args, args, kwargs)", "intent": "Implement checking for unused arguments if desired . The arguments to this function is the set of all argument keys that were actually referred to in the format string ( integers for positional arguments , and strings for named arguments ) , and a reference to the `args` and `kwargs` that was passed to vformat . With arguments `used_args`.", "question_id": 9522}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}
{"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201}
{"snippet": "executor.map(func, *iterables)", "intent": "Similar to map ( `func` , `*iterables` ) except :", "question_id": 1441}
{"snippet": "sqlite3.DatabaseError", "intent": "Exception raised for errors that are related to the database.", "question_id": 8858}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}
{"snippet": "html_calendar.cssclasses_weekday_head", "intent": "A list of CSS classes used for weekday names in the header row.", "question_id": 972}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2805}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "HTTPResponse.debuglevel", "intent": "A debugging hook.", "question_id": 4466}
{"snippet": "ArgumentParser.add_subparsers()", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit .", "question_id": 84}
{"snippet": "heapq.nsmallest(n, iterable)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` .", "question_id": 4327}
{"snippet": "sys.copyright", "intent": "A string containing the copyright pertaining to the Python interpreter.", "question_id": 9773}
{"snippet": "xmlparser.DefaultHandlerExpand(data)", "intent": "This is the same as the DefaultHandler ( ) , but doesn \u2019 t inhibit expansion of internal entities . With arguments `data`.", "question_id": 7773}
{"snippet": "SubprocessTransport.close()", "intent": "Kill the subprocess by calling the kill ( ) method .", "question_id": 425}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "ipaddress.v4_int_to_packed(address)", "intent": "Represent an `address` as 4 packed bytes in network ( big-endian ) order .", "question_id": 5232}
{"snippet": "platform.python_implementation()", "intent": "Returns a string identifying the Python implementation .", "question_id": 7476}
{"snippet": "tkinter.tix.OptionMenu", "intent": "The OptionMenu creates a menu button of options.", "question_id": 10559}
{"snippet": "cursor.execute(sql, parameters)", "intent": "Executes an SQL statement . With arguments `sql`, `parameters`.", "question_id": 8840}
{"snippet": "os.abort()", "intent": "Generate a SIGABRT signal to the current process .", "question_id": 7008}
{"snippet": "mock.call_args_list", "intent": "This is a list of all the calls made to the mock object in sequence (so the length of the list is the number of times it has been called).", "question_id": 11593}
{"snippet": "xdrlib.Packer", "intent": "Packer is the class for packing data into XDR representation.", "question_id": 12271}
{"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425}
{"snippet": "asyncio.LifoQueue", "intent": "A variant of Queue that retrieves most recently added entries first (last in, first out).", "question_id": 460}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}
{"snippet": "os.path.supports_unicode_filenames", "intent": "True if arbitrary Unicode strings can be used as file names (within limitations imposed by the file system).", "question_id": 7172}
{"snippet": "urllib.request.HTTPBasicAuthHandler()", "intent": "Handle authentication with the remote host .", "question_id": 11791}
{"snippet": "json.load(fp, **kw, parse_constant=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_constant` , if specified , will be called with one of the following strings : '-Infinity ' , 'Infinity ' , 'NaN ' . With arguments `**kw`.", "question_id": 5295}
{"snippet": "resource.getpagesize()", "intent": "Returns the number of bytes in a system page .", "question_id": 8096}
{"snippet": "XMLReader.parse(source)", "intent": "Process an input `source` , producing SAX events .", "question_id": 12613}
{"snippet": "logging.handlers.HTTPHandler(host, url, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5544}
{"snippet": "aifc.readframes(nframes)", "intent": "Read and return the next `nframes` frames from the audio file .", "question_id": 20}
{"snippet": "xml.etree.ElementTree.ParseError", "intent": "XML parse error, raised by the various parsing methods in this module when parsing fails.", "question_id": 12561}
{"snippet": "counter.subtract(iterable-or-mapping)", "intent": "Elements are subtracted from an iterable or from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1345}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460}
{"snippet": "email.utils.localtime()", "intent": "Return local time as an aware datetime object .", "question_id": 3452}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679}
{"snippet": "turtle.end_fill()", "intent": "Fill the shape drawn after the last call to begin_fill ( ) .", "question_id": 10966}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211}
{"snippet": "str.strip()", "intent": "Return a copy of the string with the leading and trailing characters removed .", "question_id": 9251}
{"snippet": "zipfile.ZipFile", "intent": "The class for reading and writing ZIP files.", "question_id": 12781}
{"snippet": "decimal.as_tuple()", "intent": "Return a named tuple representation of the number : DecimalTuple ( sign , digits , exponent ) .", "question_id": 2397}
{"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162}
{"snippet": "date.resolution", "intent": "The smallest possible difference between non-equal date objects, timedelta(days=1).", "question_id": 2225}
{"snippet": "selectors.DefaultSelector", "intent": "The default selector class, using the most efficient implementation available on the current platform.", "question_id": 8225}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196}
{"snippet": "statistics.pvariance(data, mu=None)", "intent": "Return the population variance of `data` , a non-empty iterable of real-valued numbers . If the optional second argument `mu` is given , it should be the mean of data .", "question_id": 9136}
{"snippet": "_thread.interrupt_main()", "intent": "Simulate the effect of a signal.SIGINT signal arriving in the main thread .", "question_id": 12945}
{"snippet": "SMTP.sendmail(from_addr, to_addrs, msg, mail_options=())", "intent": "Send mail . If SMTPUTF8 is included in mail_options , and the server supports it , `from_addr` and `to_addrs` may contain non-ASCII characters . `msg` may be a string containing characters in the ASCII range , or a byte string . The caller may pass a list of ESMTP options ( such as 8bitmime ) to be used in MAIL FROM commands as `mail_options` .", "question_id": 8535}
{"snippet": "context.scaleb(x, y)", "intent": "Returns the first operand after adding the second value its exp . With arguments `x`, `y`.", "question_id": 2569}
{"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040}
{"snippet": "set |= other | ...", "intent": "Update the set, adding elements from all others.", "question_id": 9455}
{"snippet": "site.ENABLE_USER_SITE", "intent": "Flag showing the status of the user site-packages directory.", "question_id": 8403}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "test_loader.suiteClass", "intent": "Callable object that constructs a test suite from a list of tests.", "question_id": 11505}
{"snippet": "TarInfo.tobuf()", "intent": "Create a string buffer from a TarInfo object .", "question_id": 9973}
{"snippet": "math.factorial(x)", "intent": "Return `x` factorial as an integer .", "question_id": 5888}
{"snippet": "subprocess.TimeoutExpired", "intent": "Subclass of SubprocessError, raised when a timeout expires while waiting for a child process.", "question_id": 9587}
{"snippet": "shlex.escapedquotes", "intent": "Characters in quotes that will interpret escape characters defined in escape.", "question_id": 8299}
{"snippet": "gettext.install(domain, names=None)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) . For the `names` parameter , please see the description of the translation object \u2019 s install ( ) method .", "question_id": 4242}
{"snippet": "SMTP.sendmail(from_addr, to_addrs, msg, mail_options=())", "intent": "Send mail . If SMTPUTF8 is included in mail_options , and the server supports it , `from_addr` and `to_addrs` may contain non-ASCII characters . `msg` may be a string containing characters in the ASCII range , or a byte string . The caller may pass a list of ESMTP options ( such as 8bitmime ) to be used in MAIL FROM commands as `mail_options` .", "question_id": 8535}
{"snippet": "os.startfile(path, operation)", "intent": "Start a file with its associated application . The `path` parameter is relative to the current directory . When `operation` is not specified or 'open ' , this acts like double-clicking the file in Windows Explorer , or giving the file name as an argument to the start command from the interactive command shell : the file is opened with whatever application ( if any ) its extension is associated .", "question_id": 7066}
{"snippet": "SSLContext.wrap_socket(sock, server_hostname=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . On client connections , the optional parameter `server_hostname` specifies the hostname of the service which we are connecting to .", "question_id": 9026}
{"snippet": "msilib.Binary(filename)", "intent": "Represents entries in the Binary table ; inserting such an object using add_data ( ) reads the file named `filename` into the table .", "question_id": 6064}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, domain: int=None)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `domain: int`.", "question_id": 10859}
{"snippet": "base_server.RequestHandlerClass", "intent": "The user-provided request handler class; an instance of this class is created for each request.", "question_id": 8768}
{"snippet": "symbol_table.get_identifiers()", "intent": "Return a list of names of symbols in this table .", "question_id": 9742}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4505}
{"snippet": "locale.delocalize(string)", "intent": "Converts a `string` into a normalized number string , following the LC_NUMERIC settings .", "question_id": 5401}
{"snippet": "tkinter.tix.Form", "intent": "The Form geometry manager based on attachment rules for all Tk widgets.", "question_id": 10578}
{"snippet": "calendar.monthdatescalendar(year, month)", "intent": "Return a list of the weeks in the `month` month of the `year` as full weeks .", "question_id": 917}
{"snippet": "msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)", "intent": "Return a new Dialog object . An entry in the Dialog table is made , with the specified coordinates , dialog attributes , `title` , `name` of the `first` , `default` , and `cancel` controls . With arguments `db`, `x`, `y`, `w`, `h`, `attr`.", "question_id": 6135}
{"snippet": "argparse.Namespace", "intent": "Simple class used by default by parse_args() to create an object holding attributes and return it.", "question_id": 73}
{"snippet": "ipaddress.get_mixed_type_key(obj)", "intent": "Return a key suitable for sorting between networks and addresses . `obj` is either a network or address object .", "question_id": 5236}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "context.normalize(x)", "intent": "Reduces `x` to its simplest form .", "question_id": 2558}
{"snippet": "template.substitute(mapping, **kwds)", "intent": "Performs the template substitution , returning a new string . `mapping` is any dictionary-like object with keys that match the placeholders in the template . With arguments `**kwds`.", "question_id": 9526}
{"snippet": "subprocess.Popen(args, stdin=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9602}
{"snippet": "xml.etree.ElementTree.ElementTree()", "intent": "ElementTree wrapper class .", "question_id": 12507}
{"snippet": "signal.SIG_BLOCK", "intent": "A possible value for the how parameter to pthread_sigmask() indicating that signals are to be blocked.", "question_id": 8382}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "Option.const", "intent": "For actions that store a constant value, the constant value to store.", "question_id": 6631}
{"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}
{"snippet": "somenamedtuple._fields", "intent": "Tuple of strings listing the field names.", "question_id": 1387}
{"snippet": "calendar.monthrange(year, month)", "intent": "Returns weekday of first day of the `month` and number of days in month , for the specified `year` and month .", "question_id": 991}
{"snippet": "subprocess.DETACHED_PROCESS", "intent": "A Popen creationflags parameter to specify that a new process will not inherit its parent\u2019s console.", "question_id": 9656}
{"snippet": "loop.call_exception_handler(context)", "intent": "Call the current event loop exception handler . `context` is a dict object containing the following keys ( new keys may be introduced in future Python versions ) :", "question_id": 310}
{"snippet": "widget.yview(*args)", "intent": "Query or modify vertical position of the treeview . With arguments `*args`.", "question_id": 10671}
{"snippet": "base_http_request_handler.sys_version", "intent": "Contains the Python system version, in a form usable by the version_string method and the server_version class variable.", "question_id": 4628}
{"snippet": "window.syncup()", "intent": "Touch all locations in ancestors of the window that have been changed in the window .", "question_id": 2123}
{"snippet": "tkinter.tix.StdButtonBox", "intent": "The StdButtonBox widget is a group of standard buttons for Motif-like dialog boxes.", "question_id": 10562}
{"snippet": "NNTP.quit()", "intent": "Send a QUIT command and close the connection .", "question_id": 6448}
{"snippet": "tkinter.tix.StdButtonBox", "intent": "The StdButtonBox widget is a group of standard buttons for Motif-like dialog boxes.", "question_id": 10562}
{"snippet": "sunau.open(file, mode)", "intent": "If `file` is a string , open the file by that name , otherwise treat it as a seekable file-like object . `mode` can be any of", "question_id": 9691}
{"snippet": "Match.lastindex", "intent": "The integer index of the last matched capturing group, or None if no group was matched at all.", "question_id": 8011}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136}
{"snippet": "context.plus(x)", "intent": "Plus corresponds to the unary prefix plus operator in Python . With arguments `x`.", "question_id": 2560}
{"snippet": "errno.EL3HLT", "intent": "Level 3 halted", "question_id": 3551}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826}
{"snippet": "typing.TYPE_CHECKING", "intent": "A special constant that is assumed to be True by 3rd party static type checkers.", "question_id": 11339}
{"snippet": "ssl.OP_NO_RENEGOTIATION", "intent": "Disable all renegotiation in TLSv1.2 and earlier.", "question_id": 8937}
{"snippet": "base_http_request_handler.log_date_time_string()", "intent": "Returns the current date and time , formatted for logging .", "question_id": 4657}
{"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}
{"snippet": "base_handler.log_exception(exc_info)", "intent": "Log the `exc_info` tuple in the server log .", "question_id": 12260}
{"snippet": "stat.UF_OPAQUE", "intent": "The directory is opaque when viewed through a union stack.", "question_id": 9116}
{"snippet": "xml.etree.ElementTree.TreeBuilder()", "intent": "Generic element structure builder .", "question_id": 12539}
{"snippet": "urllib.request.Request(url, data=None, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11777}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "mailbox.ExternalClashError", "intent": "Raised when some mailbox-related condition beyond the control of the program causes it to be unable to proceed, such as when failing to acquire a lock that another program already holds a lock, or when a uniquely-generated file name already exists.", "question_id": 5859}
{"snippet": "sequence_matcher.ratio()", "intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "question_id": 2687}
{"snippet": "os.pardir", "intent": "The constant string used by the operating system to refer to the parent directory.", "question_id": 7122}
{"snippet": "inspect.getsourcelines(object)", "intent": "Return a list of source lines and starting line number for an `object` .", "question_id": 4974}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "nntplib.decode_header(header_str)", "intent": "Decode a header value , un-escaping any escaped non-ASCII characters . `header_str` must be a str object .", "question_id": 6502}
{"snippet": "DatagramProtocol.error_received(exc)", "intent": "Called when a previous send or receive operation raises an OSError . `exc` is the OSError instance .", "question_id": 441}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "robot_file_parser.unknown", "intent": "The platform does not provide information on whether the UUID was generated safely or not.", "question_id": 11936}
{"snippet": "style.theme_create(themename)", "intent": "Create a new theme . It is an error if `themename` already exists .", "question_id": 10686}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "termios.tcsetattr(fd, when, attributes)", "intent": "Set the tty `attributes` for file descriptor `fd` from the attributes , which is a list like the one returned by tcgetattr ( ) . The `when` argument determines when the attributes are changed : TCSANOW to change immediately , TCSADRAIN to change after transmitting all queued output , or TCSAFLUSH to change after transmitting all queued output and discarding all queued input .", "question_id": 10103}
{"snippet": "nis.match(key, mapname)", "intent": "Return the match for `key` in map `mapname` , or raise an error ( nis.error ) if there is none .", "question_id": 6391}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458}
{"snippet": "gc.set_threshold(threshold0, threshold1)", "intent": "Set the garbage collection thresholds ( the collection frequency ) . Setting `threshold0` to zero disables collection . If generation 0 has been examined more than `threshold1` times since generation 1 has been examined , then generation 1 is examined as well .", "question_id": 4177}
{"snippet": "os.sync()", "intent": "Force write of everything to disk .", "question_id": 6955}
{"snippet": "winsound.SND_NOSTOP", "intent": "Do not interrupt sounds currently playing.", "question_id": 12203}
{"snippet": "POP3.noop()", "intent": "Do nothing .", "question_id": 7614}
{"snippet": "json.JSONDecoder(parse_float=None)", "intent": "Simple JSON decoder . `parse_float` , if specified , will be called with the string of every JSON float to be decoded .", "question_id": 5312}
{"snippet": "base_server.handle_timeout()", "intent": "This function is called when the timeout attribute has been set to a value other than None and the timeout period has passed with no requests being received .", "question_id": 8778}
{"snippet": "PurePath.joinpath(*other)", "intent": "Calling this method is equivalent to combining the path with each of the other arguments in turn : With arguments `*other`.", "question_id": 7257}
{"snippet": "completed_process.stdout", "intent": "Captured stdout from the child process.", "question_id": 9580}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "zlib.crc32(data, value)", "intent": "Computes a CRC ( Cyclic Redundancy Check ) checksum of `data` . If `value` is present , it is used as the starting value of the checksum ; otherwise , a default value of 0 is used .", "question_id": 12917}
{"snippet": "sys._getframe()", "intent": "Return a frame object from the call stack .", "question_id": 9806}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "codecs.open(filename)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "question_id": 1225}
{"snippet": "FTPHandler.ftp_open(req)", "intent": "Open the FTP file indicated by `req` .", "question_id": 11875}
{"snippet": "winsound.SND_FILENAME", "intent": "The sound parameter is the name of a WAV file.", "question_id": 12196}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503}
{"snippet": "property(fdel=None)", "intent": "Return a property attribute . `fdel` is a function for deleting an attribute value .", "question_id": 4088}
{"snippet": "_thread.interrupt_main()", "intent": "Simulate the effect of a signal.SIGINT signal arriving in the main thread .", "question_id": 12945}
{"snippet": "lzma_decompressor.check", "intent": "The ID of the integrity check used by the input stream.", "question_id": 5700}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "style.layout(style, layoutspec=None)", "intent": "Define the widget layout for given `style` . If `layoutspec` is omitted , return the layout specification for given style .", "question_id": 10682}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929}
{"snippet": "completed_process.args", "intent": "The arguments used to launch the process.", "question_id": 9578}
{"snippet": "message.del_param(param)", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3009}
{"snippet": "xml.parsers.expat.XMLParserType", "intent": "The type of the return values from the ParserCreate() function.", "question_id": 7726}
{"snippet": "loop.call_soon_threadsafe(callback, *args)", "intent": "A thread-safe variant of call_soon ( ) . With arguments `callback`, `*args`.", "question_id": 191}
{"snippet": "text_io_base.newlines", "intent": "A string, a tuple of strings, or None, indicating the newlines translated so far.", "question_id": 5135}
{"snippet": "socket.fileno()", "intent": "Return the socket \u2019 s file descriptor ( a small integer ) , or -1 on failure .", "question_id": 8680}
{"snippet": "Record.GetFieldCount()", "intent": "Return the number of fields of the record , through MsiRecordGetFieldCount ( ) .", "question_id": 6081}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543}
{"snippet": "time.strftime(format)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument .", "question_id": 10454}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "winsound.SND_FILENAME", "intent": "The sound parameter is the name of a WAV file.", "question_id": 12196}
{"snippet": "warnings.warn(message, category=None, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12003}
{"snippet": "shutil.make_archive(base_name, format)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) .", "question_id": 8357}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417}
{"snippet": "time.timezone", "intent": "The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK).", "question_id": 10474}
{"snippet": "uuid.NAMESPACE_X500", "intent": "When this namespace is specified, the name string is an X.500 DN in DER or a text output format.", "question_id": 11967}
{"snippet": "xml.parsers.expat.ParserCreate(namespace_separator=None)", "intent": "Creates and returns a new xmlparser object . Expat can optionally do XML namespace processing for you , enabled by providing a value for `namespace_separator` .", "question_id": 7730}
{"snippet": "dbm.dumb.open(filename)", "intent": "Open a dumbdbm database and return a dumbdbm object . The `filename` argument is the basename of the database file ( without any specific extensions ) .", "question_id": 2388}
{"snippet": "sys.settrace(tracefunc)", "intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "question_id": 9839}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}
{"snippet": "importlib.util.spec_from_file_location(name, location, loader=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . Missing information will be filled in on the spec by making use of `loader` APIs and by the implication that the module will be file-based . With arguments `name`, `location`.", "question_id": 4939}
{"snippet": "env_builder.setup_python(context)", "intent": "Creates a copy or symlink to the Python executable in the environment . With arguments `context`.", "question_id": 11985}
{"snippet": "test.support.optim_args_from_interpreter_flags()", "intent": "Return a list of command line arguments reproducing the current optimization settings in sys.flags .", "question_id": 10172}
{"snippet": "context.minus(x)", "intent": "Minus corresponds to the unary prefix minus operator in Python . With arguments `x`.", "question_id": 2553}
{"snippet": "text_wrapper.fix_sentence_endings", "intent": "(default: False) If true, TextWrapper attempts to detect sentence endings and ensure that sentences are always separated by exactly two spaces.", "question_id": 10334}
{"snippet": "base_server.shutdown()", "intent": "Tell the serve_forever ( ) loop to stop and wait until it does .", "question_id": 8765}
{"snippet": "time.timezone", "intent": "The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK).", "question_id": 10474}
{"snippet": "feature.set_current()", "intent": "Make this feature the current feature of msilib .", "question_id": 6124}
{"snippet": "test.support.check_free_after_iterating(test, iter, cls)", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.", "question_id": 10271}
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133}
{"snippet": "logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info)", "intent": "Contains all the information pertinent to the event being logged . The primary information is passed in `msg` and `args` , which are combined using msg % args to create the message field of the record . With arguments `name`, `level`, `pathname`, `lineno`, `exc_info`.", "question_id": 5626}
{"snippet": "enum.auto", "intent": "Instances are replaced with an appropriate value for Enum members.", "question_id": 3504}
{"snippet": "cgi.print_environ_usage()", "intent": "Print a list of useful ( used by CGI ) environment variables in HTML .", "question_id": 1056}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "msilib.Control(dlg, name)", "intent": "Base class of the dialog controls . `dlg` is the dialog object the control belongs to , and `name` is the control \u2019 s name .", "question_id": 6125}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "test_case.assertWarnsRegex(warning, regex, msg=None)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` . With arguments `msg`.", "question_id": 11410}
{"snippet": "writer.new_styles(styles)", "intent": "Set additional `styles` .", "question_id": 3846}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358}
{"snippet": "os.statvfs(path)", "intent": "Perform a statvfs ( ) system call on the given `path` .", "question_id": 6946}
{"snippet": "connection.backup(target, pages=0)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time .", "question_id": 8830}
{"snippet": "null_translations._parse(fp)", "intent": "No-op in the base class , this method takes file object `fp` , and reads the data from the file , initializing its message catalog .", "question_id": 4249}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "decimal.adjusted()", "intent": "Return the adjusted exponent after shifting out the coefficient \u2019 s rightmost digits until only the lead digit remains : Decimal ( '321e+5 ' ) .adjusted ( ) returns seven .", "question_id": 2395}
{"snippet": "ast.literal_eval(node_or_string)", "intent": "Safely evaluate an expression node or a string containing a Python literal or container display . With arguments `node_or_string`.", "question_id": 149}
{"snippet": "http_handler.emit(record)", "intent": "Sends the `record` to the Web server as a URL-encoded dictionary .", "question_id": 5552}
{"snippet": "inspect.getmembers(object, predicate)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name . If the optional `predicate` argument is supplied , only members for which the predicate returns a true value are included .", "question_id": 4945}
{"snippet": "base_http_request_handler.sys_version", "intent": "Contains the Python system version, in a form usable by the version_string method and the server_version class variable.", "question_id": 4628}
{"snippet": "Dialect.doublequote", "intent": "Controls how instances of quotechar appearing inside a field should themselves be quoted.", "question_id": 1724}
{"snippet": "operator.countOf(a, b)", "intent": "Return the number of occurrences of `b` in `a` .", "question_id": 6572}
{"snippet": "context.compare_total_mag(x, y)", "intent": "Compares two operands using their abstract representation , ignoring sign . With arguments `x`, `y`.", "question_id": 2523}
{"snippet": "context.quantize(x, y)", "intent": "Returns a value equal to `x` ( rounded ) , having the exponent of `y` .", "question_id": 2563}
{"snippet": "time.CLOCK_MONOTONIC", "intent": "Clock that cannot be set and represents monotonic time since some unspecified starting point.", "question_id": 10465}
{"snippet": "test_case.assertAlmostEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11419}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "concurrent.futures.thread.BrokenThreadPool", "intent": "Derived from BrokenExecutor, this exception class is raised when one of the workers of a ThreadPoolExecutor has failed initializing.", "question_id": 1489}
{"snippet": "auto.end", "intent": "The index after the last invalid data in object.", "question_id": 3678}
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333}
{"snippet": "__debug__", "intent": "This constant is true if Python was not started with an -O option.", "question_id": 1607}
{"snippet": "getpass.getuser()", "intent": "Return the \u201c login name \u201d of the user .", "question_id": 4209}
{"snippet": "loop.call_soon_threadsafe(callback, *args)", "intent": "A thread-safe variant of call_soon ( ) . With arguments `callback`, `*args`.", "question_id": 191}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}
{"snippet": "gettext.install(domain, names=None)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) . For the `names` parameter , please see the description of the translation object \u2019 s install ( ) method .", "question_id": 4242}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "test_loader.errors", "intent": "A list of the non-fatal errors encountered while loading tests.", "question_id": 11490}
{"snippet": "_c_data._b_base_", "intent": "Sometimes ctypes data instances do not own the memory block they contain, instead they share part of the memory block of a base object.", "question_id": 1850}
{"snippet": "window.refresh(pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol)", "intent": "Update the display immediately ( sync actual screen with previous drawing/deleting methods ) . `pminrow` and `pmincol` specify the upper left-hand corner of the rectangle to be displayed in the pad . `sminrow` , `smincol` , `smaxrow` , and `smaxcol` specify the edges of the rectangle to be displayed on the screen .", "question_id": 2106}
{"snippet": "json.JSONEncoder(sort_keys=False)", "intent": "Extensible JSON encoder for Python data structures . If `sort_keys` is true ( default : False ) , then the output of dictionaries will be sorted by key ; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis .", "question_id": 5327}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}
{"snippet": "definition.__name__", "intent": "The name of the class, function, method, descriptor, or generator instance.", "question_id": 9502}
{"snippet": "subprocess.Popen(args)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string .", "question_id": 9599}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982}
{"snippet": "NNTP.quit()", "intent": "Send a QUIT command and close the connection .", "question_id": 6448}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}
{"snippet": "doctest.DocFileSuite(*paths, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2798}
{"snippet": "turtle.filling()", "intent": "Return fillstate ( True if filling , False else ) .", "question_id": 10964}
{"snippet": "tkinter.tix.Meter", "intent": "The Meter widget can be used to show the progress of a background job which may take a long time to execute.", "question_id": 10558}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}
{"snippet": "tkinter.tix.Meter", "intent": "The Meter widget can be used to show the progress of a background job which may take a long time to execute.", "question_id": 10558}
{"snippet": "contextlib.ContextDecorator", "intent": "A base class that enables a context manager to also be used as a decorator.", "question_id": 1625}
{"snippet": "@test.support.skip_unless_bind_unix_socket", "intent": "A decorator for running tests that require a functional bind() for Unix sockets.", "question_id": 10207}
{"snippet": "filter.domain", "intent": "Address space of a memory block (int or None).", "question_id": 10862}
{"snippet": "formatter.format(record)", "intent": "The `record` \u2019 s attribute dictionary is used as the operand to a string formatting operation .", "question_id": 5618}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}
{"snippet": "Document.documentElement", "intent": "The one and only root element of the document.", "question_id": 12344}
{"snippet": "test.support.TESTFN_UNENCODABLE", "intent": "Set to a filename (str type) that should not be able to be encoded by file system encoding in strict mode.", "question_id": 10118}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "decimal.Decimal(context=None)", "intent": "Construct a new Decimal object based from `value` . The `context` precision does not affect how many digits are stored .", "question_id": 2393}
{"snippet": "test.support.PIPE_MAX_SIZE", "intent": "A constant that is likely larger than the underlying OS pipe buffer size, to make writes blocking.", "question_id": 10124}
{"snippet": "sysconfig.get_python_version()", "intent": "Return the MAJOR.MINOR Python version number as a string .", "question_id": 9870}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832}
{"snippet": "hashlib.algorithms_available", "intent": "A set containing the names of the hash algorithms that are available in the running Python interpreter.", "question_id": 4300}
{"snippet": "sysconfig.get_python_version()", "intent": "Return the MAJOR.MINOR Python version number as a string .", "question_id": 9870}
{"snippet": "DefaultCookiePolicy.strict_ns_set_path", "intent": "Don\u2019t allow setting cookies whose path doesn\u2019t path-match request URI.", "question_id": 4551}
{"snippet": "oss_audio_device.mode", "intent": "The I/O mode for the file, either \"r\", \"rw\", or \"w\".", "question_id": 7200}
{"snippet": "ctypes.sizeof(obj_or_type)", "intent": "Returns the size in bytes of a ctypes type or instance memory buffer . With arguments `obj_or_type`.", "question_id": 1833}
{"snippet": "stats.add(*filenames)", "intent": "This method of the Stats class accumulates additional profiling information into the current profiling object . With arguments `*filenames`.", "question_id": 7691}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "inspect.isclass(object)", "intent": "Return true if the `object` is a class , whether built-in or created in Python code .", "question_id": 4949}
{"snippet": "os.register_at_fork(after_in_parent=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . With arguments `after_in_parent`.", "question_id": 7047}
{"snippet": "asyncio.ProactorEventLoop", "intent": "An event loop for Windows that uses \u201cI/O Completion Ports\u201d (IOCP).", "question_id": 343}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723}
{"snippet": "queue_listener.emit(record)", "intent": "Do whatever it takes to actually log the specified logging `record` .", "question_id": 5609}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417}
{"snippet": "HTTPResponse.status", "intent": "Status code returned by server.", "question_id": 4464}
{"snippet": "inspect.stack()", "intent": "Return a list of frame records for the caller \u2019 s stack .", "question_id": 5030}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "str.join(iterable)", "intent": "Return a string which is the concatenation of the strings in `iterable` .", "question_id": 9214}
{"snippet": "OptionParser.print_version()", "intent": "Print the version message for the current program ( self.version ) to `file` ( default stdout ) .", "question_id": 6619}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "uuid.UUID(is_safe=SafeUUID.unknown)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . With arguments `is_safe`.", "question_id": 11944}
{"snippet": "errno.EADDRNOTAVAIL", "intent": "Cannot assign requested address", "question_id": 3604}
{"snippet": "FileCookieJar.load(filename=None)", "intent": "Load cookies from a file . With arguments `filename`.", "question_id": 4507}
{"snippet": "mh_message.set_sequences(sequences)", "intent": "Set the list of `sequences` that include this message .", "question_id": 5835}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : With arguments `*paths`.", "question_id": 2797}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}
{"snippet": "test.support.get_attribute(obj, name)", "intent": "Get an attribute , raising unittest.SkipTest if AttributeError is raised . With arguments `obj`, `name`.", "question_id": 10257}
{"snippet": "context.same_quantum(x, y)", "intent": "Returns True if the two operands have the same exponent . With arguments `x`, `y`.", "question_id": 2568}
{"snippet": "float.is_integer()", "intent": "Return True if the float instance is finite with integral value , and False otherwise :", "question_id": 9148}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288}
{"snippet": "ZipInfo.from_file(filename)", "intent": "Construct a ZipInfo instance for a file on the filesystem , in preparation for adding it to a zip file . `filename` should be the path to a file or directory on the filesystem .", "question_id": 12860}
{"snippet": "audioop.cross(fragment, width)", "intent": "Return the number of zero crossings in the `fragment` passed as an argument . With arguments `width`.", "question_id": 687}
{"snippet": "test.support.import_fresh_module(name)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10242}
{"snippet": "errno.EREMOTEIO", "intent": "Remote I/O error", "question_id": 3626}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}
{"snippet": "sys.intern(string)", "intent": "Enter `string` in the table of \u201c interned \u201d strings and return the interned string \u2013 which is string itself or a copy .", "question_id": 9818}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "unittest.main(testRunner=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "question_id": 11549}
{"snippet": "locale.LC_MESSAGES", "intent": "Locale category for message display.", "question_id": 5408}
{"snippet": "Match.group(group1)", "intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "question_id": 7996}
{"snippet": "asyncio.Task(coro, loop=None)", "intent": "A Future-like object that runs a Python coroutine . Event loops use cooperative scheduling : an event `loop` runs one Task at a time . With arguments `coro`.", "question_id": 625}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}
{"snippet": "DataHandler.data_open(req)", "intent": "Read a data URL . With arguments `req`.", "question_id": 11874}
{"snippet": "os.GRND_NONBLOCK", "intent": "By  default, when reading from /dev/random, getrandom() blocks if no random bytes are available, and when reading from /dev/urandom, it blocks if the entropy pool has not yet been initialized.", "question_id": 7140}
{"snippet": "io_base.truncate()", "intent": "Resize the stream to the given `size` in bytes ( or the current position if size is not specified ) .", "question_id": 5078}
{"snippet": "decimal.normalize(context=None)", "intent": "Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal ( ' 0 ' ) to Decimal ( '0e0 ' ) . With arguments `context`.", "question_id": 2458}
{"snippet": "SSLContext.verify_flags", "intent": "The flags for certificate verification operations.", "question_id": 9050}
{"snippet": "test.support.check__all__(test_case, module, name_of_module=None, blacklist=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `name_of_module` argument can specify ( as a string or tuple thereof ) what module ( s ) an API could be defined in order to be detected as a public API . The `blacklist` argument can be a set of names that must not be treated as part of the public API even though their names indicate otherwise . With arguments `test_case`.", "question_id": 10282}
{"snippet": "tkinter.tix.FileEntry", "intent": "The FileEntry widget can be used to input a filename.", "question_id": 10569}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711}
{"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "mh.close()", "intent": "MH instances do not keep any open files , so this method is equivalent to unlock ( ) .", "question_id": 5793}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "shlex.shlex(punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8277}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705}
{"snippet": "bytes.split(maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given and non-negative , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9365}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_OPT", "intent": "The model is optional: it can appear once or not at all, as for A?.", "question_id": 7784}
{"snippet": "HTTPConnection.close()", "intent": "Close the connection to the server .", "question_id": 4442}
{"snippet": "base_handler.os_environ", "intent": "The default environment variables to be included in every request\u2019s WSGI environment.", "question_id": 12256}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357}
{"snippet": "tree_builder.data(data)", "intent": "Adds text to the current element . `data` is a string .", "question_id": 12542}
{"snippet": "context.to_sci_string(x)", "intent": "Converts a number to a string using scientific notation . With arguments `x`.", "question_id": 2575}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "tempfile.mkstemp(text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10075}
{"snippet": "zlib.error", "intent": "Exception raised on compression and decompression errors.", "question_id": 12892}
{"snippet": "socket.has_ipv6", "intent": "This constant contains a boolean value which indicates if IPv6 is supported on this platform.", "question_id": 8607}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "test.support.open_urlresource(url, *args, **kw)", "intent": "Open `url` . With arguments `*args`, `**kw`.", "question_id": 10239}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "question_id": 1299}
{"snippet": "turtle.pen(**pendict)", "intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "question_id": 10958}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}
{"snippet": "ctypes.py_object", "intent": "Represents the C PyObject * datatype.", "question_id": 1885}
{"snippet": "epoll.modify(fd, eventmask)", "intent": "Modify a registered file descriptor . With arguments `fd`, `eventmask`.", "question_id": 8185}
{"snippet": "warnings.formatwarning(message, category, filename, lineno)", "intent": "Format a warning the standard way . `line` is a line of source code to be included in the warning `message` ; if line is not supplied , formatwarning ( ) will try to read the line specified by `filename` and `lineno` . With arguments `category`.", "question_id": 12021}
{"snippet": "base_handler.error_output(environ, start_response)", "intent": "This method is a WSGI application to generate an error page for the user . This method can access the current error information using sys.exc_info ( ) , and should pass that information to `start_response` when calling it ( as described in the \u201c Error Handling \u201d section of PEP 3333 ) . With arguments `environ`.", "question_id": 12262}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855}
{"snippet": "Node.unlink()", "intent": "Break internal references within the DOM so that it will be garbage collected on versions of Python without cyclic GC .", "question_id": 12402}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070}
{"snippet": "queue_handler.emit(record)", "intent": "Enqueues the result of preparing the LogRecord . This can result in the `record` silently being dropped ( if logging.raiseExceptions is False ) or a message printed to sys.stderr ( if logging.raiseExceptions is True ) .", "question_id": 5554}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}
{"snippet": "sequence_matcher.set_seqs(a, b)", "intent": "Set the two sequences to be compared . With arguments `a`, `b`.", "question_id": 2679}
{"snippet": "DefaultCookiePolicy.strict_ns_domain", "intent": "Flags indicating how strict to be with domain-matching rules for Netscape cookies.", "question_id": 4549}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "shelve.Shelf(dict, writeback=False, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8250}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "msilib.Directory(database, cab, basedir, physical, logical, default, componentflags)", "intent": "Create a new directory in the Directory table . Files are added into the current component , and into the `cab` file . To create a directory , a base directory object needs to be specified ( can be None ) , the path to the `physical` directory , and a `logical` directory name . `default` specifies the DefaultDir slot in the directory table . `componentflags` specifies the default flags that new components get . With arguments `database`, `basedir`.", "question_id": 6091}
{"snippet": "ipaddress.get_mixed_type_key(obj)", "intent": "Return a key suitable for sorting between networks and addresses . `obj` is either a network or address object .", "question_id": 5236}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992}
{"snippet": "window.clrtoeol()", "intent": "Erase from cursor to the end of the line .", "question_id": 2037}
{"snippet": "kqueue.fromfd(fd)", "intent": "Create a kqueue object from a given file descriptor . With arguments `fd`.", "question_id": 8200}
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244}
{"snippet": "typing.FrozenSet(frozenset)", "intent": "A generic version of builtins.frozenset . With arguments `frozenset`.", "question_id": 11275}
{"snippet": "header_registry.__getitem__(name)", "intent": "Construct and return a class to handle creating a `name` header .", "question_id": 3184}
{"snippet": "errno.ENAMETOOLONG", "intent": "File name too long", "question_id": 3541}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}
{"snippet": "os.path.splitdrive(path)", "intent": "Split the pathname `path` into a pair ( drive , tail ) where drive is either a mount point or the empty string .", "question_id": 7170}
{"snippet": "unicodedata.digit(chr)", "intent": "Returns the digit value assigned to the character `chr` as integer .", "question_id": 11346}
{"snippet": "test_case.tearDownClass()", "intent": "A class method called after tests in an individual class have run .", "question_id": 11368}
{"snippet": "sax2_dom.getEvent()", "intent": "Return a tuple containing event and the current node as xml.dom.minidom.Document if event equals START_DOCUMENT , xml.dom.minidom.Element if event equals START_ELEMENT or END_ELEMENT or xml.dom.minidom.Text if event equals CHARACTERS .", "question_id": 12432}
{"snippet": "mailbox.clear()", "intent": "Delete all messages from the mailbox .", "question_id": 5745}
{"snippet": "doctest.COMPARISON_FLAGS", "intent": "A bitmask or\u2019ing together all the comparison flags above.", "question_id": 2758}
{"snippet": "sqlite3.register_adapter(type, callable)", "intent": "Registers a `callable` to convert the custom Python `type` type into one of SQLite \u2019 s supported types .", "question_id": 8800}
{"snippet": "IMAP4.namespace()", "intent": "Returns IMAP namespaces as defined in RFC 2342 .", "question_id": 4717}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "json.JSONEncoder(sort_keys=False)", "intent": "Extensible JSON encoder for Python data structures . If `sort_keys` is true ( default : False ) , then the output of dictionaries will be sorted by key ; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis .", "question_id": 5327}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "time.timezone", "intent": "The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK).", "question_id": 10474}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711}
{"snippet": "curses.color_content(color_number)", "intent": "Return the intensity of the red , green , and blue ( RGB ) components in the color `color_number` , which must be between 0 and COLORS .", "question_id": 1924}
{"snippet": "maildir_message.add_flag(flag)", "intent": "Set the `flag` ( s ) specified by flag without changing other flags .", "question_id": 5817}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "multiprocessing.freeze_support()", "intent": "Add support for when a program which uses multiprocessing has been frozen to produce a Windows executable .", "question_id": 6222}
{"snippet": "wsgiref.handlers.read_environ()", "intent": "Transcode CGI variables from os.environ to PEP 3333 \u201c bytes in unicode \u201d strings , returning a new dictionary .", "question_id": 12270}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296}
{"snippet": "smtp_channel.mailfrom", "intent": "Holds a string containing the address identified in the \u201cMAIL FROM:\u201d line from the client.", "question_id": 8443}
{"snippet": "resource.RLIMIT_MEMLOCK", "intent": "The maximum address space which may be locked in memory.", "question_id": 8084}
{"snippet": "sys_log_handler.mapPriority(levelname)", "intent": "Maps a logging level name to a syslog priority name . With arguments `levelname`.", "question_id": 5505}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "statistics.variance(data)", "intent": "Return the sample variance of `data` , an iterable of at least two real-valued numbers .", "question_id": 9139}
{"snippet": "socket.if_nametoindex(if_name)", "intent": "Return a network interface index number corresponding to an interface name . With arguments `if_name`.", "question_id": 8671}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "Option.callback_args", "intent": "Additional positional and keyword arguments to pass to callback after the four standard callback arguments.", "question_id": 6634}
{"snippet": "bytes(source, encoding)", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) .", "question_id": 9258}
{"snippet": "locale.LC_MESSAGES", "intent": "Locale category for message display.", "question_id": 5408}
{"snippet": "dataclasses.replace(instance, **changes)", "intent": "Creates a new object of the same type of `instance` , replacing fields with values from changes . With arguments `**changes`.", "question_id": 2193}
{"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}
{"snippet": "dialog.checkbox(name, x, y, width, height, attributes, property, text, next_control)", "intent": "Add and return a CheckBox control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `property`, `text`, `next_control`.", "question_id": 6142}
{"snippet": "inspect.isgeneratorfunction(object)", "intent": "Return true if the `object` is a Python generator function .", "question_id": 4952}
{"snippet": "context.divide_int(x, y)", "intent": "Return `x` divided by `y` , truncated to an integer .", "question_id": 2528}
{"snippet": "base_server.allow_reuse_address", "intent": "Whether the server will allow the reuse of an address.", "question_id": 8771}
{"snippet": "textwrap.indent(text, prefix)", "intent": "Add `prefix` to the beginning of selected lines in `text` .", "question_id": 10324}
{"snippet": "shlex.shlex(punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8277}
{"snippet": "locale.NOEXPR", "intent": "Get a regular expression that can be used with the regex(3) function to recognize a negative response to a yes/no question.", "question_id": 5366}
{"snippet": "ordered_dict.popitem()", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair .", "question_id": 1391}
{"snippet": "future.add_done_callback(callback, context=None)", "intent": "Add a `callback` to be run when the Future is done . An optional keyword-only `context` argument allows specifying a custom contextvars.Context for the callback to run in .", "question_id": 367}
{"snippet": "FTP_TLS.prot_c()", "intent": "Set up clear text data connection .", "question_id": 3972}
{"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283}
{"snippet": "str.center(width)", "intent": "Return centered in a string of length `width` .", "question_id": 9181}
{"snippet": "startupinfo.lpAttributeList", "intent": "A dictionary of additional attributes for process creation as given in STARTUPINFOEX, see UpdateProcThreadAttribute.", "question_id": 9640}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636}
{"snippet": "pickle.dump(obj, file, protocol=None, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7366}
{"snippet": "datetime.utctimetuple()", "intent": "If datetime instance d is naive , this is the same as d.timetuple ( ) except that tm_isdst is forced to 0 regardless of what d.dst ( ) returns .", "question_id": 2300}
{"snippet": "cursor.lastrowid", "intent": "This read-only attribute provides the rowid of the last modified row.", "question_id": 8850}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "turtle.title(titlestring)", "intent": "Set title of turtle window to `titlestring` .", "question_id": 11157}
{"snippet": "socketserver.ForkingTCPServer", "intent": "These classes are pre-defined using the mix-in classes.", "question_id": 8755}
{"snippet": "mailbox.close()", "intent": "Flush the mailbox , unlock it if necessary , and close any open files .", "question_id": 5753}
{"snippet": "Option.const", "intent": "For actions that store a constant value, the constant value to store.", "question_id": 6631}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "sys.exit()", "intent": "Exit from Python .", "question_id": 9789}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "msilib.schema", "intent": "This is the standard MSI schema for MSI 2.0, with the tables variable providing a list of table definitions, and _Validation_records providing the data for MSI validation.", "question_id": 6143}
{"snippet": "unittest.mock.MagicMock(*args, **kw)", "intent": "MagicMock is a subclass of Mock with default implementations of most of the magic methods . With arguments `*args`, `**kw`.", "question_id": 11643}
{"snippet": "io.TextIOWrapper(buffer, encoding=None, errors=None)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` . `encoding` gives the name of the encoding that the stream will be decoded or encoded with . `errors` is an optional string that specifies how encoding and decoding errors are to be handled .", "question_id": 5152}
{"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}
{"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}
{"snippet": "memory_bio.read()", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9056}
{"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730}
{"snippet": "enum.IntFlag", "intent": "Base class for creating enumerated constants that can be combined using the bitwise operators without losing their IntFlag membership.", "question_id": 3501}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "winreg.HKEY_PERFORMANCE_DATA", "intent": "Registry entries subordinate to this key allow you to access performance data.", "question_id": 12159}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020}
{"snippet": "@staticmethod", "intent": "Transform a method into a static method.", "question_id": 4112}
{"snippet": "dataclasses.Field", "intent": "Field objects describe each defined field.", "question_id": 2177}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122}
{"snippet": "audioop.mul(fragment, width, factor)", "intent": "Return a `fragment` that has all samples in the original fragment multiplied by the floating-point value `factor` . With arguments `width`.", "question_id": 699}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "copy.deepcopy(x)", "intent": "Return a deep copy of `x` .", "question_id": 1663}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491}
{"snippet": "multiprocessing.get_logger()", "intent": "Returns the logger used by multiprocessing .", "question_id": 6382}
{"snippet": "View.Close()", "intent": "Close the view , through MsiViewClose ( ) .", "question_id": 6076}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427}
{"snippet": "symbol_table.lookup(name)", "intent": "Lookup `name` in the table and return a Symbol instance .", "question_id": 9743}
{"snippet": "ssl.MemoryBIO", "intent": "A memory buffer that can be used to pass data between Python and an SSL protocol instance.", "question_id": 9053}
{"snippet": "config_parser.optionxform(option)", "intent": "Transforms the `option` name option as found in an input file or as passed in by client code to the form that should be used in the internal structures .", "question_id": 1565}
{"snippet": "fnmatch.fnmatch(filename, pattern)", "intent": "Test whether the `filename` string matches the `pattern` string , returning True or False .", "question_id": 3813}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "pkgutil.get_data(package, resource)", "intent": "Get a `resource` from a `package` .", "question_id": 7457}
{"snippet": "calendar.HTMLCalendar(firstweekday=0)", "intent": "This class can be used to generate HTML calendars . With arguments `firstweekday`.", "question_id": 957}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "tkinter.tix.OptionMenu", "intent": "The OptionMenu creates a menu button of options.", "question_id": 10559}
{"snippet": "readline.get_line_buffer()", "intent": "Return the current contents of the line buffer ( rl_line_buffer in the underlying library ) .", "question_id": 8018}
{"snippet": "joinable_queue.recv_bytes()", "intent": "Return a complete message of byte data sent from the other end of the connection as a string .", "question_id": 6240}
{"snippet": "statistics.median_low(data)", "intent": "Return the low median of numeric `data` .", "question_id": 9128}
{"snippet": "FileCookieJar.save()", "intent": "Save cookies to a file .", "question_id": 4498}
{"snippet": "test.support.import_fresh_module(name)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10242}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971}
{"snippet": "doctest.testfile(filename, verbose=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `verbose` prints lots of stuff if true , and prints only failures if false ; by default , or if None , it \u2019 s true if and only if '-v ' is in sys.argv .", "question_id": 2771}
{"snippet": "InteractiveInterpreter.runsource(source)", "intent": "Compile and run some `source` in the interpreter .", "question_id": 1175}
{"snippet": "collections.deque(iterable)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` .", "question_id": 1351}
{"snippet": "asyncio.Lock(loop=None)", "intent": "Implements a mutex lock for asyncio tasks . With arguments `loop`.", "question_id": 559}
{"snippet": "wsgiref.handlers.BaseHandler", "intent": "This is an abstract base class for running WSGI applications.", "question_id": 12246}
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695}
{"snippet": "test_case.debug()", "intent": "Run the test without collecting the result .", "question_id": 11374}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "trace.results()", "intent": "Return a CoverageResults object that contains the cumulative results of all previous calls to run , runctx and runfunc for the given Trace instance .", "question_id": 10722}
{"snippet": "cursor.execute(sql)", "intent": "Executes an SQL statement . With arguments `sql`.", "question_id": 8841}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "fraction.__round__(ndigits)", "intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "question_id": 3876}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}
{"snippet": "winsound.SND_NOSTOP", "intent": "Do not interrupt sounds currently playing.", "question_id": 12203}
{"snippet": "audioop.maxpp(fragment, width)", "intent": "Return the maximum peak-peak value in the sound `fragment` . With arguments `width`.", "question_id": 697}
{"snippet": "ftplib.FTP_TLS(host='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `host`.", "question_id": 3889}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "tkinter.tix.tixCommand", "intent": "The tix commands provide access to miscellaneous elements of Tix\u2019s internal state and the Tix application context.", "question_id": 10579}
{"snippet": "Cookie.name", "intent": "Cookie name (a string).", "question_id": 4558}
{"snippet": "SSLContext.get_ca_certs()", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates .", "question_id": 9011}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "Match.group(group1)", "intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "question_id": 7996}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX", "intent": "An undeclared prefix was found when namespace processing was enabled.", "question_id": 7810}
{"snippet": "winreg.HKEY_USERS", "intent": "Registry entries subordinate to this key define the default user configuration for new users on the local computer and the user configuration for the current user.", "question_id": 12158}
{"snippet": "datetime.now()", "intent": "Return the current local date and time .", "question_id": 2258}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "PurePath.suffixes", "intent": "A list of the path\u2019s file extensions:", "question_id": 7251}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `stdin`.", "question_id": 524}
{"snippet": "@reprlib.recursive_repr()", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread .", "question_id": 8053}
{"snippet": "test_result.wasSuccessful()", "intent": "Return True if all tests run so far have passed , otherwise returns False .", "question_id": 11518}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "uuid.getnode()", "intent": "Get the hardware address as a 48-bit positive integer .", "question_id": 11956}
{"snippet": "resource.RLIMIT_NPROC", "intent": "The maximum number of processes the current process may create.", "question_id": 8081}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243}
{"snippet": "gettext.install(domain)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) .", "question_id": 4239}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "subprocess.SubprocessError", "intent": "Base class for all other exceptions from this module.", "question_id": 9586}
{"snippet": "wsgiref.simple_server.demo_app(environ, start_response)", "intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "question_id": 12227}
{"snippet": "Panel.set_userptr(obj)", "intent": "Set the panel \u2019 s user pointer to `obj` .", "question_id": 2152}
{"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}
{"snippet": "ssl.create_default_context()", "intent": "Return a new SSLContext object with default settings for the given `purpose` .", "question_id": 8863}
{"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982}
{"snippet": "sequence_matcher.quick_ratio()", "intent": "Return an upper bound on ratio ( ) relatively quickly .", "question_id": 2688}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "set ^= other", "intent": "Update the set, keeping only elements found in either set, but not in both.", "question_id": 9461}
{"snippet": "async_result.ready()", "intent": "Return whether the call has completed .", "question_id": 6364}
{"snippet": "i_pv4_network.subnets()", "intent": "The subnets that join to make the current network definition , depending on the argument values .", "question_id": 5208}
{"snippet": "policy.header_source_parse(sourcelines)", "intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "question_id": 3423}
{"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288}
{"snippet": "parser.parse(fp, headersonly=False)", "intent": "Read all the data from the text-mode file-like object `fp` , parse the resulting text , and return the root message object . With arguments `headersonly`.", "question_id": 3389}
{"snippet": "curses.flash()", "intent": "Flash the screen .", "question_id": 1935}
{"snippet": "SMTP.sendmail(from_addr, to_addrs, msg, mail_options=())", "intent": "Send mail . If SMTPUTF8 is included in mail_options , and the server supports it , `from_addr` and `to_addrs` may contain non-ASCII characters . `msg` may be a string containing characters in the ASCII range , or a byte string . The caller may pass a list of ESMTP options ( such as 8bitmime ) to be used in MAIL FROM commands as `mail_options` .", "question_id": 8535}
{"snippet": "statistics.harmonic_mean(data)", "intent": "Return the harmonic mean of `data` , a sequence or iterator of real-valued numbers .", "question_id": 9126}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 452}
{"snippet": "Pattern.split(string)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`.", "question_id": 7979}
{"snippet": "asyncio.current_task()", "intent": "Return the currently running Task instance , or None if no task is running .", "question_id": 620}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392}
{"snippet": "test_case.id()", "intent": "Return a string identifying the specific test case .", "question_id": 11469}
{"snippet": "datetime.datetime", "intent": "A combination of a date and a time.", "question_id": 2200}
{"snippet": "xml.sax.handler.EntityResolver", "intent": "Basic interface for resolving entities.", "question_id": 12566}
{"snippet": "xml.etree.ElementTree.ElementTree()", "intent": "ElementTree wrapper class .", "question_id": 12507}
{"snippet": "window.insdelln(nlines)", "intent": "Insert `nlines` lines into the specified window above the current line .", "question_id": 2075}
{"snippet": "os.posix_fadvise(fd, offset, len, advice)", "intent": "Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations . The `advice` applies to the region of the file specified by `fd` starting at `offset` and continuing for `len` bytes .", "question_id": 6776}
{"snippet": "unittest.removeHandler()", "intent": "When called without arguments this `function` removes the control-c handler if it has been installed .", "question_id": 11558}
{"snippet": "loop.call_exception_handler(context)", "intent": "Call the current event loop exception handler . `context` is a dict object containing the following keys ( new keys may be introduced in future Python versions ) :", "question_id": 310}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "sys.getsizeof(object, default)", "intent": "Return the size of an `object` in bytes . If given , `default` will be returned if the object does not provide means to retrieve the size .", "question_id": 9802}
{"snippet": "syslog.syslog(message)", "intent": "Send the string `message` to the system logger .", "question_id": 9877}
{"snippet": "os.makedirs(name)", "intent": "Recursive directory creation function . With arguments `name`.", "question_id": 6866}
{"snippet": "turtle.getscreen()", "intent": "Return the TurtleScreen object the turtle is drawing on .", "question_id": 11037}
{"snippet": "deque.append(x)", "intent": "Add `x` to the right side of the deque .", "question_id": 1353}
{"snippet": "imghdr.tests", "intent": "A list of functions performing the individual tests.", "question_id": 4759}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "audioop.max(fragment, width)", "intent": "Return the maximum of the absolute value of all samples in a `fragment` . With arguments `width`.", "question_id": 696}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "UUID.int", "intent": "The UUID as a 128-bit integer.", "question_id": 11951}
{"snippet": "gdbm.firstkey()", "intent": "It \u2019 s possible to loop over every key in the database using this method and the nextkey ( ) method .", "question_id": 2374}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "mailbox.NoSuchMailboxError", "intent": "Raised when a mailbox is expected but is not found, such as when instantiating a Mailbox subclass with a path that does not exist (and with the create parameter set to False), or when opening a folder that does not exist.", "question_id": 5857}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "curses.meta(flag)", "intent": "If `flag` is True , allow 8-bit characters to be input .", "question_id": 1953}
{"snippet": "shlex.escapedquotes", "intent": "Characters in quotes that will interpret escape characters defined in escape.", "question_id": 8299}
{"snippet": "traceback.extract_stack()", "intent": "Extract the raw traceback from the current stack frame .", "question_id": 10771}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "aifc.getnchannels()", "intent": "Return the number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 11}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122}
{"snippet": "xmlrpc.client.dumps(params, encoding=None)", "intent": "Convert `params` into an XML-RPC request . If methodresponse is true , only a single value can be returned , meaning that params must be of length 1. `encoding` , if supplied , is the encoding to use in the generated XML ; the default is UTF-8 .", "question_id": 12701}
{"snippet": "xmlparser.ErrorCode", "intent": "Numeric code specifying the problem.", "question_id": 7749}
{"snippet": "socket.inet_pton(address_family, ip_string)", "intent": "Convert an IP address from its family-specific string format to a packed , binary format . Supported values for `address_family` are currently AF_INET and AF_INET6 . If the IP address string `ip_string` is invalid , OSError will be raised .", "question_id": 8663}
{"snippet": "email.headerregistry.MIMEVersionHeader", "intent": "There is really only one valid value for the MIME-Version header, and that is 1.0.", "question_id": 3163}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "HTTPConnection.send(data)", "intent": "Send `data` to the server .", "question_id": 4454}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426}
{"snippet": "TIPC_*", "intent": "TIPC related constants, matching the ones exported by the C socket API.", "question_id": 8598}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992}
{"snippet": "xml.sax.saxutils.unescape(data)", "intent": "Unescape ' & amp ; ' , ' & lt ; ' , and ' & gt ; ' in a string of `data` .", "question_id": 12654}
{"snippet": "stat.S_IREAD", "intent": "Unix V7 synonym for S_IRUSR.", "question_id": 9110}
{"snippet": "readline.write_history_file()", "intent": "Save the history list to a readline history file , overwriting any existing file .", "question_id": 8024}
{"snippet": "mh.get_sequences()", "intent": "Return a dictionary of sequence names mapped to key lists .", "question_id": 5783}
{"snippet": "widget.identify_region(x, y)", "intent": "Returns one of : With arguments `x`, `y`.", "question_id": 10637}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "FileCookieJar.save(ignore_discard=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4500}
{"snippet": "trace.size", "intent": "Size of the memory block in bytes (int).", "question_id": 10892}
{"snippet": "os.chown(path, uid, gid)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` .", "question_id": 6839}
{"snippet": "os.nice(increment)", "intent": "Add `increment` to the process \u2019 s \u201c niceness \u201d .", "question_id": 7039}
{"snippet": "decimal.normalize(context=None)", "intent": "Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal ( ' 0 ' ) to Decimal ( '0e0 ' ) . With arguments `context`.", "question_id": 2458}
{"snippet": "charset.input_charset", "intent": "The initial character set specified.", "question_id": 2912}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "bytes_feed_parser.close()", "intent": "Complete the parsing of all previously fed data and return the root message object .", "question_id": 3367}
{"snippet": "FTP.dir()", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output .", "question_id": 3958}
{"snippet": "connection.backup(target, pages=0, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8834}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_ABORTED", "intent": "This should not be reported to Python applications.", "question_id": 7818}
{"snippet": "winreg.KEY_QUERY_VALUE", "intent": "Required to query the values of a registry key.", "question_id": 12166}
{"snippet": "json.JSONEncoder(skipkeys=False)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None .", "question_id": 5323}
{"snippet": "pprint.pformat(object, indent=1)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7634}
{"snippet": "set ^= other", "intent": "Update the set, keeping only elements found in either set, but not in both.", "question_id": 9461}
{"snippet": "cmath.log10(x)", "intent": "Return the base-10 logarithm of `x` .", "question_id": 1099}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "dir_entry.path", "intent": "The entry\u2019s full path name: equivalent to os.path.join(scandir_path, entry.name) where scandir_path is the scandir() path argument.", "question_id": 6908}
{"snippet": "html_calendar.cssclasses_weekday_head", "intent": "A list of CSS classes used for weekday names in the header row.", "question_id": 972}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "readline.clear_history()", "intent": "Clear the current history .", "question_id": 8029}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929}
{"snippet": "email.encoders.encode_noop(msg)", "intent": "This does nothing ; it doesn \u2019 t even set the Content-Transfer-Encoding header . With arguments `msg`.", "question_id": 3072}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}
{"snippet": "text_calendar.prmonth(theyear, themonth, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 934}
{"snippet": "text_wrapper.drop_whitespace", "intent": "(default: True) If true, whitespace at the beginning and ending of every line (after wrapping but before indenting) is dropped.", "question_id": 10331}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "quopri.decodestring(s)", "intent": "Like decode ( ) , except that it accepts a source bytes and returns the corresponding decoded bytes . With arguments `s`.", "question_id": 7877}
{"snippet": "re.escape(pattern)", "intent": "Escape special characters in `pattern` .", "question_id": 7959}
{"snippet": "importlib.import_module(name)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g .", "question_id": 4793}
{"snippet": "Unpacker.unpack_string()", "intent": "Unpacks and returns a variable length string .", "question_id": 12294}
{"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}
{"snippet": "system_random.pattern", "intent": "The regular expression pattern.", "question_id": 7966}
{"snippet": "test_result.unexpectedSuccesses", "intent": "A list containing TestCase instances that were marked as expected failures, but succeeded.", "question_id": 11512}
{"snippet": "Path.touch(exist_ok=True)", "intent": "Create a file at this given path . If the file already exists , the function succeeds if `exist_ok` is true ( and its modification time is updated to the current time ) , otherwise FileExistsError is raised .", "question_id": 7319}
{"snippet": "test_case.longMessage", "intent": "This class attribute determines what happens when a custom failure message is passed as the msg argument to an assertXYY call that fails.", "question_id": 11465}
{"snippet": "base_http_request_handler.log_date_time_string()", "intent": "Returns the current date and time , formatted for logging .", "question_id": 4657}
{"snippet": "Wave_write.close()", "intent": "Make sure nframes is correct , and close the file if it was opened by wave .", "question_id": 12064}
{"snippet": "logging.addLevelName(level, levelName)", "intent": "Associates `level` level with text `levelName` in an internal dictionary , which is used to map numeric levels to a textual representation , for example when a Formatter formats a message .", "question_id": 5646}
{"snippet": "NNTP.getcapabilities()", "intent": "Return the RFC 3977 capabilities advertised by the server , as a dict instance mapping capability names to ( possibly empty ) lists of values .", "question_id": 6450}
{"snippet": "Panel.show()", "intent": "Display the panel ( which might have been hidden ) .", "question_id": 2153}
{"snippet": "io_base.writable()", "intent": "Return True if the stream supports writing .", "question_id": 5080}
{"snippet": "BaseCookie.load(rawdata)", "intent": "If `rawdata` is a string , parse it as an HTTP_COOKIE and add the values found there as Morsels .", "question_id": 4594}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348}
{"snippet": "address.addr_spec", "intent": "The username@domain portion of the address, correctly quoted for use as a bare address (the second form shown above).", "question_id": 3199}
{"snippet": "audioop.alaw2lin(fragment, width)", "intent": "Convert sound fragments in a-LAW encoding to linearly encoded sound fragments . a-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .", "question_id": 682}
{"snippet": "calendar.TextCalendar()", "intent": "This class can be used to generate plain text calendars .", "question_id": 926}
{"snippet": "ctypes.c_ubyte", "intent": "Represents the C unsigned char datatype, it interprets the value as small integer.", "question_id": 1871}
{"snippet": "email.message_from_binary_file(fp)", "intent": "Return a message object structure tree from an open binary file object . This is equivalent to BytesParser ( ) .parse ( `fp` ) .", "question_id": 3400}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}
{"snippet": "AU_read.getframerate()", "intent": "Returns sampling frequency .", "question_id": 9710}
{"snippet": "decimal.exp()", "intent": "Return the value of the ( natural ) exponential function e**x at the given number .", "question_id": 2412}
{"snippet": "dir_entry.path", "intent": "The entry\u2019s full path name: equivalent to os.path.join(scandir_path, entry.name) where scandir_path is the scandir() path argument.", "question_id": 6908}
{"snippet": "unittest.SkipTest(reason)", "intent": "This exception is raised to skip a test . With arguments `reason`.", "question_id": 11362}
{"snippet": "urllib.parse.parse_qs(qs, encoding='utf-8')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional `encoding` and errors parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method . With arguments `qs`.", "question_id": 11672}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "DefaultCookiePolicy.DomainStrictNonDomain", "intent": "Cookies that did not explicitly specify a domain cookie-attribute can only be returned to a domain equal to the domain that set the cookie (eg.", "question_id": 4553}
{"snippet": "window.insch(ch, attr)", "intent": "Paint character `ch` at ( y , x ) with attributes `attr` , moving the line from position x right by one character .", "question_id": 2071}
{"snippet": "mimetypes.guess_extension(type)", "intent": "Guess the extension for a file based on its MIME `type` , given by type .", "question_id": 5943}
{"snippet": "str.expandtabs()", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size .", "question_id": 9192}
{"snippet": "uuid.uuid1()", "intent": "Generate a UUID from a host ID , sequence number , and the current time .", "question_id": 11957}
{"snippet": "FTP.login()", "intent": "Log in as the given `user` .", "question_id": 3915}
{"snippet": "unittest.mock.sentinel", "intent": "The sentinel object provides a convenient way of providing unique objects for your tests.", "question_id": 11645}
{"snippet": "loop.time()", "intent": "Return the current time , as a float value , according to the event loop \u2019 s internal monotonic clock .", "question_id": 197}
{"snippet": "curses.endwin()", "intent": "De-initialize the library , and return terminal to normal status .", "question_id": 1932}
{"snippet": "completed_process.stdout", "intent": "Captured stdout from the child process.", "question_id": 9580}
{"snippet": "curses.use_default_colors()", "intent": "Allow use of default values for colors on terminals supporting this feature .", "question_id": 1998}
{"snippet": "os.remove(path)", "intent": "Remove ( delete ) the file `path` .", "question_id": 6889}
{"snippet": "i_pv4_address.is_unspecified", "intent": "True if the address is unspecified.", "question_id": 5183}
{"snippet": "template.substitute(mapping, **kwds)", "intent": "Performs the template substitution , returning a new string . `mapping` is any dictionary-like object with keys that match the placeholders in the template . With arguments `**kwds`.", "question_id": 9526}
{"snippet": "mailbox.lock()", "intent": "Acquire an exclusive advisory lock on the mailbox so that other processes know not to modify it .", "question_id": 5751}
{"snippet": "turtle.onrelease(fun)", "intent": "Bind `fun` to mouse-button-release events on this turtle .", "question_id": 11023}
{"snippet": "test_suite.addTests(tests)", "intent": "Add all the `tests` from an iterable of TestCase and TestSuite instances to this test suite .", "question_id": 11484}
{"snippet": "ReadTransport.resume_reading()", "intent": "Resume the receiving end .", "question_id": 404}
{"snippet": "tixCommand.tix_filedialog()", "intent": "Returns the file selection dialog that may be shared among different calls from this application .", "question_id": 10586}
{"snippet": "inspect.CO_NOFREE", "intent": "The flag is set if there are no free or cell variables.", "question_id": 5046}
{"snippet": "str.strip()", "intent": "Return a copy of the string with the leading and trailing characters removed .", "question_id": 9251}
{"snippet": "gettext.dgettext(domain, message)", "intent": "Like gettext ( ) , but look the `message` up in the specified `domain` .", "question_id": 4217}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992}
{"snippet": "os.path.split(path)", "intent": "Split the pathname `path` into a pair , ( head , tail ) where tail is the last pathname component and head is everything leading up to that .", "question_id": 7169}
{"snippet": "traceback_exception.extract(frame_gen, capture_locals=False)", "intent": "Construct a StackSummary object from a frame generator ( such as is returned by walk_stack ( ) or walk_tb ( ) ) . If `limit` is supplied , only this many frames are taken from `frame_gen` . If `capture_locals` is True the local variables in each FrameSummary are captured as object representations .", "question_id": 10826}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}
{"snippet": "sysconfig.get_python_version()", "intent": "Return the MAJOR.MINOR Python version number as a string .", "question_id": 9870}
{"snippet": "patch.multiple(target, **kwargs, create=False)", "intent": "Perform multiple patches in a single call . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11634}
{"snippet": "base_http_request_handler.headers", "intent": "Holds an instance of the class specified by the MessageClass class variable.", "question_id": 4624}
{"snippet": "str.splitlines(keepends)", "intent": "Return a list of the lines in the string , breaking at line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9245}
{"snippet": "winreg.LoadKey(key, sub_key, file_name)", "intent": "Creates a subkey under the specified `key` and stores registration information from a specified file into that subkey . `sub_key` is a string that identifies the subkey to load . `file_name` is the name of the file to load registry data from .", "question_id": 12137}
{"snippet": "base64.b64decode(s, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 712}
{"snippet": "msilib.add_tables(database, module)", "intent": "Add all table content from `module` to `database` .", "question_id": 6065}
{"snippet": "oss_audio_device.setparameters(format, nchannels, samplerate)", "intent": "Set the key audio sampling parameters\u2014sample `format` , number of channels , and sampling rate\u2014in one method call . format , `nchannels` , and `samplerate` should be as specified in the setfmt ( ) , channels ( ) , and speed ( ) methods .", "question_id": 7191}
{"snippet": "asyncio.Condition()", "intent": "A Condition object .", "question_id": 569}
{"snippet": "datetime.utctimetuple()", "intent": "If datetime instance d is naive , this is the same as d.timetuple ( ) except that tm_isdst is forced to 0 regardless of what d.dst ( ) returns .", "question_id": 2300}
{"snippet": "Element.setAttributeNode(newAttr)", "intent": "Add a new attribute node to the element , replacing an existing attribute if necessary if the name attribute matches . If `newAttr` is already in use , InuseAttributeErr will be raised .", "question_id": 12367}
{"snippet": "FileCookieJar.filename", "intent": "Filename of default file in which to keep cookies.", "question_id": 4522}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "asyncio.BaseProtocol", "intent": "Base protocol with methods that all protocols share.", "question_id": 426}
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956}
{"snippet": "WindowsError", "intent": "Only available on Windows.", "question_id": 3684}
{"snippet": "process.daemon", "intent": "The process\u2019s daemon flag, a Boolean value.", "question_id": 6181}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499}
{"snippet": "gettext.install(domain)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) .", "question_id": 4239}
{"snippet": "style.layout(style, layoutspec=None)", "intent": "Define the widget layout for given `style` . If `layoutspec` is omitted , return the layout specification for given style .", "question_id": 10682}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "i_pv4_address.exploded", "intent": "The string representation in dotted decimal notation.", "question_id": 5177}
{"snippet": "logger_adapter.process(msg, kwargs)", "intent": "Modifies the message and/or keyword arguments passed to a logging call in order to insert contextual information . The return value is a ( `msg` , kwargs ) tuple which has the ( possibly modified ) versions of the arguments passed in . This implementation takes the object passed as extra to the constructor and adds it to `kwargs` using key \u2018 extra \u2019 .", "question_id": 5632}
{"snippet": "json.dump(obj, fp, **kw, check_circular=True)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `check_circular` is false ( default : True ) , then the circular reference check for container types will be skipped and a circular reference will result in an OverflowError ( or worse ) . With arguments `**kw`.", "question_id": 5273}
{"snippet": "threading.main_thread()", "intent": "Return the main Thread object .", "question_id": 10345}
{"snippet": "os.getloadavg()", "intent": "Return the number of processes in the system run queue averaged over the last 1 , 5 , and 15 minutes or raises OSError if the load average was unobtainable .", "question_id": 7118}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "str.splitlines(keepends)", "intent": "Return a list of the lines in the string , breaking at line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9245}
{"snippet": "profile.runcall(func, *args, **kwargs)", "intent": "Profile `func` ( `*args` , `**kwargs` )", "question_id": 7687}
{"snippet": "TarFile.add(name, recursive=True)", "intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False .", "question_id": 9951}
{"snippet": "test_case.assertIn(first, second)", "intent": "Test that `first` is ( or is not ) in `second` .", "question_id": 11391}
{"snippet": "XMLReader.getProperty(propertyname)", "intent": "Return the current setting for property `propertyname` .", "question_id": 12625}
{"snippet": "window.insch(ch, attr)", "intent": "Paint character `ch` at ( y , x ) with attributes `attr` , moving the line from position x right by one character .", "question_id": 2071}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "sys.setcheckinterval(interval)", "intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "question_id": 9834}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "__import__(name, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4138}
{"snippet": "set.difference(*others)", "intent": "Return a new set with elements in the set that are not in the others . With arguments `*others`.", "question_id": 9449}
{"snippet": "license", "intent": "Object that when printed, prints the message \u201cType license() to see the full license text\u201d, and when called, displays the full license text in a pager-like fashion (one screen at a time).", "question_id": 1614}
{"snippet": "PurePath.drive", "intent": "A string representing the drive letter or name, if any:", "question_id": 7244}
{"snippet": "set.difference(*others)", "intent": "Return a new set with elements in the set that are not in the others . With arguments `*others`.", "question_id": 9449}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}
{"snippet": "ctypes.HRESULT", "intent": "Windows only: Represents a HRESULT value, which contains success or error information for a function or method call.", "question_id": 1884}
{"snippet": "contextlib.AbstractContextManager", "intent": "An abstract base class for classes that implement object.__enter__() and object.__exit__().", "question_id": 1615}
{"snippet": "py_compile.compile(file, dfile=None)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . If `dfile` is specified , it is used as the name of the source file in error messages when instead of file .", "question_id": 7823}
{"snippet": "extension_file_loader.is_package(fullname)", "intent": "Returns True if the file path points to a package \u2019 s __init__ module based on EXTENSION_SUFFIXES . With arguments `fullname`.", "question_id": 4908}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "typing.SupportsInt", "intent": "An ABC with one abstract method __int__.", "question_id": 11239}
{"snippet": "test.support.wait_threads_exit(timeout=60.0)", "intent": "Context manager to wait until all threads created in the with statement exit . With arguments `timeout`.", "question_id": 10197}
{"snippet": "coverage_results.write_results(show_missing=True)", "intent": "Write coverage results . Set `show_missing` to show lines that had no hits .", "question_id": 10726}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "mh.pack()", "intent": "Rename messages in the mailbox as necessary to eliminate gaps in numbering .", "question_id": 5785}
{"snippet": "widget.tab(tab_id, **kw)", "intent": "Query or modify the options of the specific `tab_id` . With arguments `**kw`.", "question_id": 10611}
{"snippet": "cursor.execute(sql)", "intent": "Executes an SQL statement . With arguments `sql`.", "question_id": 8841}
{"snippet": "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name)", "intent": "Create zip file at `zip_dir` and `zip_basename` with extension zip which contains the files in `script_name` .", "question_id": 10310}
{"snippet": "errno.ESTALE", "intent": "Stale NFS file handle", "question_id": 3621}
{"snippet": "pdb.Pdb(readrc=True)", "intent": "Pdb is the debugger class . The `readrc` argument defaults to true and controls whether Pdb will load .pdbrc files from the filesystem .", "question_id": 7347}
{"snippet": "non_callable_magic_mock.headers", "intent": "The HTTP response headers for the HTTP request that caused the HTTPError.", "question_id": 11663}
{"snippet": "example.want", "intent": "The expected output from running the example\u2019s source code (either from stdout, or a traceback in case of exception).", "question_id": 2835}
{"snippet": "null_translations.install()", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ .", "question_id": 4258}
{"snippet": "buffering_handler.flush()", "intent": "You can override this to implement custom flushing behavior .", "question_id": 5527}
{"snippet": "itertools.starmap(function, iterable)", "intent": "Make an iterator that computes the `function` using arguments obtained from the `iterable` .", "question_id": 5264}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}
{"snippet": "tracemalloc.StatisticDiff", "intent": "Statistic difference on memory allocations between an old and a new Snapshot instance.", "question_id": 10884}
{"snippet": "FutureWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python.", "question_id": 3707}
{"snippet": "IMAP4.status(mailbox, names)", "intent": "Request named status conditions for `mailbox` . With arguments `names`.", "question_id": 4744}
{"snippet": "decimal.sqrt()", "intent": "Return the square root of the argument to full precision .", "question_id": 2476}
{"snippet": "shelve.DbfilenameShelf(filename, flag='c')", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object . The optional `flag` parameter has the same interpretation as for the open ( ) function .", "question_id": 8261}
{"snippet": "loop.call_exception_handler(context)", "intent": "Call the current event loop exception handler . `context` is a dict object containing the following keys ( new keys may be introduced in future Python versions ) :", "question_id": 310}
{"snippet": "hashlib.algorithms_available", "intent": "A set containing the names of the hash algorithms that are available in the running Python interpreter.", "question_id": 4300}
{"snippet": "queue_listener.flush()", "intent": "Ensure all logging output has been flushed .", "question_id": 5604}
{"snippet": "functools.reduce(function, iterable)", "intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . With arguments `iterable`.", "question_id": 4154}
{"snippet": "BufferedProtocol.get_buffer(sizehint)", "intent": "Called to allocate a new receive buffer . `sizehint` is the recommended minimum size for the returned buffer .", "question_id": 437}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490}
{"snippet": "json_decoder.decode(s)", "intent": "Return the Python representation of `s` ( a str instance containing a JSON document ) .", "question_id": 5320}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "statistics.median_low(data)", "intent": "Return the low median of numeric `data` .", "question_id": 9128}
{"snippet": "str.isalpha()", "intent": "Return true if all characters in the string are alphabetic and there is at least one character , false otherwise .", "question_id": 9203}
{"snippet": "difflib.Differ", "intent": "This is a class for comparing sequences of lines of text, and producing human-readable differences or deltas.", "question_id": 2596}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT", "intent": "Something other than whitespace occurred after the document element.", "question_id": 7794}
{"snippet": "widget.next(item)", "intent": "Returns the identifier of `item` \u2019 s next sibling , or \u2018 \u2019 if item is the last child of its parent .", "question_id": 10645}
{"snippet": "collections.abc.AsyncGenerator", "intent": "ABC for asynchronous generator classes that implement the protocol defined in PEP 525 and PEP 492.", "question_id": 1334}
{"snippet": "warnings.catch_warnings()", "intent": "A context manager that copies and , upon exit , restores the warnings filter and the showwarning ( ) function .", "question_id": 12042}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "os.writev(fd, buffers)", "intent": "Write the contents of `buffers` to file descriptor `fd` .", "question_id": 6810}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370}
{"snippet": "sync_manager.Array(typecode, sequence)", "intent": "Create an array and return a proxy for it . With arguments `typecode`, `sequence`.", "question_id": 6311}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426}
{"snippet": "email.utils.localtime(dt=None)", "intent": "Return local time as an aware datetime object . Otherwise `dt` argument should be a datetime instance , and it is converted to the local time zone according to the system time zone database .", "question_id": 3453}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427}
{"snippet": "signal.SIG_BLOCK", "intent": "A possible value for the how parameter to pthread_sigmask() indicating that signals are to be blocked.", "question_id": 8382}
{"snippet": "set - other - ...", "intent": "Return a new set with elements in the set that are not in the others.", "question_id": 9450}
{"snippet": "signal.SIG_BLOCK", "intent": "A possible value for the how parameter to pthread_sigmask() indicating that signals are to be blocked.", "question_id": 8382}
{"snippet": "locale.LC_MONETARY", "intent": "Locale category for formatting of monetary values.", "question_id": 5407}
{"snippet": "queue.full()", "intent": "Return True if there are maxsize items in the queue .", "question_id": 451}
{"snippet": "tree_builder.data(data)", "intent": "Adds text to the current element . `data` is a string .", "question_id": 12542}
{"snippet": "tkinter.tix.ListNoteBook", "intent": "The ListNoteBook widget is very similar to the TixNoteBook widget: it can be used to display many windows in a limited space using a notebook metaphor.", "question_id": 10575}
{"snippet": "Panel.hidden()", "intent": "Returns True if the panel is hidden ( not visible ) , False otherwise .", "question_id": 2148}
{"snippet": "date.fromisoformat(date_string)", "intent": "Return a date corresponding to a `date_string` in the format emitted by date.isoformat ( ) .", "question_id": 2222}
{"snippet": "errno.ETXTBSY", "intent": "Text file busy", "question_id": 3531}
{"snippet": "Cmd.ruler", "intent": "The character used to draw separator lines under the help-message headers.", "question_id": 1153}
{"snippet": "sys._getframe()", "intent": "Return a frame object from the call stack .", "question_id": 9806}
{"snippet": "formatter.add_line_break()", "intent": "Add a hard line break if one does not already exist .", "question_id": 3820}
{"snippet": "simple_http_request_handler.do_HEAD()", "intent": "This method serves the 'HEAD ' request type : it sends the headers it would send for the equivalent GET request .", "question_id": 4664}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "os.write(fd, str)", "intent": "Write the bytestring in `str` to file descriptor `fd` .", "question_id": 6809}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "ArgumentParser.add_mutually_exclusive_group()", "intent": "Create a mutually exclusive group .", "question_id": 99}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "loop.sock_sendfile(sock, file)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket .", "question_id": 281}
{"snippet": "formatter.end_paragraph(blanklines)", "intent": "Close any open paragraphs and insert at least `blanklines` before the next paragraph .", "question_id": 3819}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}
{"snippet": "json_decoder.raw_decode(s)", "intent": "Decode a JSON document from `s` ( a str beginning with a JSON document ) and return a 2-tuple of the Python representation and the index in s where the document ended .", "question_id": 5321}
{"snippet": "array.buffer_info()", "intent": "Return a tuple ( address , length ) giving the current memory address and the length in elements of the buffer used to hold array \u2019 s contents .", "question_id": 121}
{"snippet": "pickle.dump(obj, file, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7365}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201}
{"snippet": "pdb.Pdb()", "intent": "Pdb is the debugger class .", "question_id": 7341}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "AU_read.rewind()", "intent": "Rewind the file pointer to the beginning of the audio stream .", "question_id": 9716}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "errno.EOVERFLOW", "intent": "Value too large for defined data type", "question_id": 3580}
{"snippet": "os.getpgid(pid)", "intent": "Return the process group id of the process with process id `pid` .", "question_id": 6680}
{"snippet": "random.randrange(stop)", "intent": "Return a randomly selected element from range ( start , `stop` , step ) .", "question_id": 7890}
{"snippet": "Template.prepend(cmd, kind)", "intent": "Add a new action at the beginning . With arguments `cmd`, `kind`.", "question_id": 7432}
{"snippet": "sys.getsizeof(object)", "intent": "Return the size of an `object` in bytes .", "question_id": 9803}
{"snippet": "SMTP.verify(address)", "intent": "Check the validity of an `address` on this server using SMTP VRFY .", "question_id": 8521}
{"snippet": "CookieJar.clear()", "intent": "Clear some cookies .", "question_id": 4496}
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493}
{"snippet": "sqlite3.ProgrammingError", "intent": "Exception raised for programming errors, e.g.", "question_id": 8860}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "somenamedtuple._asdict()", "intent": "Return a new dict which maps field names to their corresponding values :", "question_id": 1385}
{"snippet": "keyword.iskeyword(s)", "intent": "Return true if `s` is a Python keyword .", "question_id": 5341}
{"snippet": "email.message_from_string(s)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) .", "question_id": 3404}
{"snippet": "Record.SetString(field, value)", "intent": "Set `field` to `value` through MsiRecordSetString ( ) .", "question_id": 6084}
{"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678}
{"snippet": "bdb.Bdb()", "intent": "The Bdb class acts as a generic Python debugger base class .", "question_id": 768}
{"snippet": "stringprep.in_table_c21_c22(code)", "intent": "Determine whether `code` is in tableC.2 ( Control characters , union of C.2.1 and C.2.2 ) .", "question_id": 9540}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "nis.cat(mapname, domain=default_domain)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value . The `domain` argument allows overriding the NIS domain used for the lookup .", "question_id": 6394}
{"snippet": "babyl.get_labels()", "intent": "Return a list of the names of all user-defined labels used in the mailbox .", "question_id": 5798}
{"snippet": "socket.create_connection(address)", "intent": "Connect to a TCP service listening on the Internet `address` ( a 2-tuple ( host , port ) ) , and return the socket object .", "question_id": 8629}
{"snippet": "terminal_size.columns", "intent": "Width of the terminal window in characters.", "question_id": 6814}
{"snippet": "array.itemsize", "intent": "The length in bytes of one array item in the internal representation.", "question_id": 119}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919}
{"snippet": "email.message_from_string(s)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) .", "question_id": 3404}
{"snippet": "readline.insert_text(string)", "intent": "Insert text into the line buffer at the cursor position . With arguments `string`.", "question_id": 8019}
{"snippet": "aifc.setnchannels(nchannels)", "intent": "Specify the number of channels in the audio file . With arguments `nchannels`.", "question_id": 27}
{"snippet": "resource.RLIMIT_CPU", "intent": "The maximum amount of processor time (in seconds) that a process can use.", "question_id": 8076}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}
{"snippet": "multiprocessing.Semaphore()", "intent": "A semaphore object : a close analog of threading.Semaphore .", "question_id": 6264}
{"snippet": "curses.color_content(color_number)", "intent": "Return the intensity of the red , green , and blue ( RGB ) components in the color `color_number` , which must be between 0 and COLORS .", "question_id": 1924}
{"snippet": "symbol.is_imported()", "intent": "Return True if the symbol is created from an import statement .", "question_id": 9756}
{"snippet": "mime_version_header.version", "intent": "The version number as a string, with any whitespace and/or comments removed.", "question_id": 3164}
{"snippet": "binhex.Error", "intent": "Exception raised when something can\u2019t be encoded using the binhex format (for example, a filename is too long to fit in the filename field), or when input is not properly encoded binhex data.", "question_id": 851}
{"snippet": "configparser.ExtendedInterpolation", "intent": "An alternative handler for interpolation which implements a more advanced syntax, used for instance in zc.buildout.", "question_id": 1492}
{"snippet": "Dialect.doublequote", "intent": "Controls how instances of quotechar appearing inside a field should themselves be quoted.", "question_id": 1724}
{"snippet": "urllib.request.urlcleanup()", "intent": "Cleans up temporary files that may have been left behind by previous calls to urlretrieve ( ) .", "question_id": 11889}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "Telnet.read_lazy()", "intent": "Process and return data already in the queues ( lazy ) .", "question_id": 10015}
{"snippet": "Request.method", "intent": "The HTTP request method to use.", "question_id": 11823}
{"snippet": "abc.ABCMeta", "intent": "Metaclass for defining Abstract Base Classes (ABCs).", "question_id": 1}
{"snippet": "zipfile.ZipFile(file, mode='r')", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file .", "question_id": 12793}
{"snippet": "decimal.Decimal(context=None)", "intent": "Construct a new Decimal object based from `value` . The `context` precision does not affect how many digits are stored .", "question_id": 2393}
{"snippet": "FileExistsError", "intent": "Raised when trying to create a file or directory which already exists.", "question_id": 3693}
{"snippet": "calendar.monthdatescalendar(year, month)", "intent": "Return a list of the weeks in the `month` month of the `year` as full weeks .", "question_id": 917}
{"snippet": "statistics.variance(data)", "intent": "Return the sample variance of `data` , an iterable of at least two real-valued numbers .", "question_id": 9139}
{"snippet": "unittest.main(defaultTest=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11547}
{"snippet": "turtle.clearstamps()", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10931}
{"snippet": "tracemalloc.stop()", "intent": "Stop tracing Python memory allocations : uninstall hooks on Python memory allocators .", "question_id": 10849}
{"snippet": "ssl.match_hostname(cert, hostname)", "intent": "Verify that `cert` ( in decoded format as returned by SSLSocket.getpeercert ( ) ) matches the given `hostname` .", "question_id": 8890}
{"snippet": "test.support.check_syntax_error(testcase, statement, lineno=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `lineno` is not None , compares to the line of the SyntaxError .", "question_id": 10233}
{"snippet": "turtle.clearstamps()", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10931}
{"snippet": "HTTPConnection.blocksize", "intent": "Buffer size in bytes for sending a file-like message body.", "question_id": 4443}
{"snippet": "curses.ascii.ispunct(c)", "intent": "Checks for any printable ASCII character which is not a space or an alphanumeric character . With arguments `c`.", "question_id": 1908}
{"snippet": "DefaultCookiePolicy.strict_ns_domain", "intent": "Flags indicating how strict to be with domain-matching rules for Netscape cookies.", "question_id": 4549}
{"snippet": "shlex.debug", "intent": "If this attribute is numeric and 1 or more, a shlex instance will print verbose progress output on its behavior.", "question_id": 8304}
{"snippet": "TarInfo.gid", "intent": "Group ID of the user who originally stored this member.", "question_id": 9988}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124}
{"snippet": "UUID.int", "intent": "The UUID as a 128-bit integer.", "question_id": 11951}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}
{"snippet": "locale.format_string(format, val, grouping=False, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5387}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "queue_listener.emit(record)", "intent": "Do whatever it takes to actually log the specified logging `record` .", "question_id": 5609}
{"snippet": "os.rmdir(path)", "intent": "Remove ( delete ) the directory `path` .", "question_id": 6901}
{"snippet": "FutureWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python.", "question_id": 3707}
{"snippet": "ast.dump(node, annotate_fields=True)", "intent": "Return a formatted dump of the tree in `node` . If `annotate_fields` is true ( by default ) , the returned string will show the names and the values for fields .", "question_id": 164}
{"snippet": "DAY_1 ... DAY_7", "intent": "Get the name of the n-th day of the week.", "question_id": 5359}
{"snippet": "i_pv4_address.exploded", "intent": "The string representation in dotted decimal notation.", "question_id": 5177}
{"snippet": "crypt.METHOD_BLOWFISH", "intent": "Another Modular Crypt Format method with 22 character salt and 31 character hash based on the Blowfish cipher.", "question_id": 1670}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "difflib.SequenceMatcher", "intent": "This is a flexible class for comparing pairs of sequences of any type, so long as the sequence elements are hashable.", "question_id": 2595}
{"snippet": "_func_ptr.errcheck", "intent": "Assign a Python function or another callable to this attribute.", "question_id": 1789}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "FileCookieJar.filename", "intent": "Filename of default file in which to keep cookies.", "question_id": 4522}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "Telnet.open(host)", "intent": "Connect to a `host` .", "question_id": 10020}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221}
{"snippet": "turtle.shearfactor(shear=None)", "intent": "Set or return the current shearfactor . Shear the turtleshape according to the given shearfactor `shear` , which is the tangent of the shear angle .", "question_id": 11003}
{"snippet": "inspect.Signature(parameters=None)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection .", "question_id": 4980}
{"snippet": "POP3.noop()", "intent": "Do nothing .", "question_id": 7614}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929}
{"snippet": "curses.termattrs()", "intent": "Return a logical OR of all video attributes supported by the terminal .", "question_id": 1984}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480}
{"snippet": "SSLSocket.verify_client_post_handshake()", "intent": "Requests post-handshake authentication ( PHA ) from a TLS 1.3 client .", "question_id": 8987}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "resource.RLIMIT_RTTIME", "intent": "The time limit (in microseconds) on CPU time that a process can spend under real-time scheduling without making a blocking syscall.", "question_id": 8090}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "multiprocessing.managers.Namespace", "intent": "A type that can register with SyncManager.", "question_id": 6318}
{"snippet": "DefaultCookiePolicy.strict_ns_domain", "intent": "Flags indicating how strict to be with domain-matching rules for Netscape cookies.", "question_id": 4549}
{"snippet": "pickle.dump(obj, file, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7365}
{"snippet": "py_compile.compile(file, dfile=None)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . If `dfile` is specified , it is used as the name of the source file in error messages when instead of file .", "question_id": 7823}
{"snippet": "xml.dom.getDOMImplementation()", "intent": "Return a suitable DOM implementation .", "question_id": 12303}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328}
{"snippet": "string.ascii_uppercase", "intent": "The uppercase letters 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "question_id": 9509}
{"snippet": "cgi.print_environ_usage()", "intent": "Print a list of useful ( used by CGI ) environment variables in HTML .", "question_id": 1056}
{"snippet": "decimal.FloatOperation", "intent": "Enable stricter semantics for mixing floats and Decimals.", "question_id": 2594}
{"snippet": "formatter.end_paragraph(blanklines)", "intent": "Close any open paragraphs and insert at least `blanklines` before the next paragraph .", "question_id": 3819}
{"snippet": "test.support.check_free_after_iterating(test, iter, cls)", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.", "question_id": 10271}
{"snippet": "env_builder.setup_python(context)", "intent": "Creates a copy or symlink to the Python executable in the environment . With arguments `context`.", "question_id": 11985}
{"snippet": "winreg.ExpandEnvironmentStrings(str)", "intent": "Expands environment variable placeholders % NAME % in strings like REG_EXPAND_SZ : With arguments `str`.", "question_id": 12135}
{"snippet": "Function.children", "intent": "A dictionary mapping names to descriptors for nested functions and classes.", "question_id": 7715}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL", "intent": "There was an error parsing a text declaration in an external entity.", "question_id": 7814}
{"snippet": "FTP.rename(fromname, toname)", "intent": "Rename file `fromname` on the server to `toname` .", "question_id": 3959}
{"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042}
{"snippet": "bytes.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9262}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "Path.iterdir()", "intent": "When the path points to a directory , yield path objects of the directory contents :", "question_id": 7281}
{"snippet": "numbers.Integral", "intent": "Subtypes Rational and adds a conversion to int.", "question_id": 6512}
{"snippet": "turtle.title(titlestring)", "intent": "Set title of turtle window to `titlestring` .", "question_id": 11157}
{"snippet": "copy.deepcopy(x)", "intent": "Return a deep copy of `x` .", "question_id": 1663}
{"snippet": "errno.ENOTUNIQ", "intent": "Name not unique on network", "question_id": 3581}
{"snippet": "test.support.EnvironmentVarGuard", "intent": "Class used to temporarily set or unset environment variables.", "question_id": 10286}
{"snippet": "errno.EBADSLT", "intent": "Invalid slot", "question_id": 3562}
{"snippet": "os.utime(path)", "intent": "Set the access and modified `times` of the file specified by `path` .", "question_id": 6967}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370}
{"snippet": "os.EX_DATAERR", "intent": "Exit code that means the input data was incorrect.", "question_id": 7020}
{"snippet": "AU_write.setframerate(n)", "intent": "Set the frame rate . With arguments `n`.", "question_id": 9723}
{"snippet": "loader.exec_module(module)", "intent": "An abstract method that executes the `module` in its own namespace when a module is imported or reloaded .", "question_id": 4815}
{"snippet": "gettext.ngettext(singular, plural, n)", "intent": "Like gettext ( ) , but consider `plural` forms . If no translation is found , return `singular` if n is 1 ; return plural otherwise . If a translation is found , apply the plural formula to `n` , and return the resulting message ( some languages have more than two plural forms ) .", "question_id": 4218}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194}
{"snippet": "IMAP4.authenticate(mechanism, authobject)", "intent": "Authenticate command \u2014 requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :", "question_id": 4692}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "ordered_dict.popitem()", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair .", "question_id": 1391}
{"snippet": "test.support.get_attribute(obj, name)", "intent": "Get an attribute , raising unittest.SkipTest if AttributeError is raised . With arguments `obj`, `name`.", "question_id": 10257}
{"snippet": "mock.reset_mock()", "intent": "The reset_mock method resets all the call attributes on a mock object :", "question_id": 11578}
{"snippet": "audioop.maxpp(fragment, width)", "intent": "Return the maximum peak-peak value in the sound `fragment` . With arguments `width`.", "question_id": 697}
{"snippet": "incremental_encoder.getstate()", "intent": "Return the current state of the encoder which must be an integer .", "question_id": 1270}
{"snippet": "CGIXMLRPCRequestHandler.handle_request(request_text=None)", "intent": "Handle an XML-RPC request . If `request_text` is given , it should be the POST data provided by the HTTP server , otherwise the contents of stdin will be used .", "question_id": 12748}
{"snippet": "ArgumentParser.add_argument_group()", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages .", "question_id": 95}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745}
{"snippet": "sysconfig.get_python_version()", "intent": "Return the MAJOR.MINOR Python version number as a string .", "question_id": 9870}
{"snippet": "errno.EBADE", "intent": "Invalid exchange", "question_id": 3557}
{"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734}
{"snippet": "ssl.OP_NO_COMPRESSION", "intent": "Disable compression on the SSL channel.", "question_id": 8942}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "readline.redisplay()", "intent": "Change what \u2019 s displayed on the screen to reflect the current contents of the line buffer .", "question_id": 8020}
{"snippet": "protocol_error.url", "intent": "The URI or URL that triggered the error.", "question_id": 12693}
{"snippet": "timedelta.min", "intent": "The most negative timedelta object, timedelta(-999999999).", "question_id": 2214}
{"snippet": "resource.RLIMIT_MEMLOCK", "intent": "The maximum address space which may be locked in memory.", "question_id": 8084}
{"snippet": "asyncio.SubprocessTransport(BaseTransport)", "intent": "An abstraction to represent a connection between a parent and its child OS process . With arguments `BaseTransport`.", "question_id": 395}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194}
{"snippet": "locale.NOEXPR", "intent": "Get a regular expression that can be used with the regex(3) function to recognize a negative response to a yes/no question.", "question_id": 5366}
{"snippet": "mimetypes.knownfiles", "intent": "List of type map file names commonly installed.", "question_id": 5951}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "@abc.abstractclassmethod", "intent": "A subclass of the built-in classmethod(), indicating an abstract classmethod.", "question_id": 5}
{"snippet": "msvcrt.putwch(unicode_char)", "intent": "Wide char variant of putch ( ) , accepting a Unicode value . With arguments `unicode_char`.", "question_id": 6161}
{"snippet": "XMLReader.parse(source)", "intent": "Process an input `source` , producing SAX events .", "question_id": 12613}
{"snippet": "email.utils.format_datetime(dt, usegmt=False)", "intent": "Like formatdate , but the input is a datetime instance . If it is an aware timezone with offset zero , then `usegmt` may be set to True , in which case the string GMT is used instead of the numeric timezone offset . With arguments `dt`.", "question_id": 3477}
{"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}
{"snippet": "trace.Trace()", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10706}
{"snippet": "codeop.compile_command(source, symbol=\"single\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . The `symbol` argument determines whether source is compiled as a statement ( 'single ' , the default ) or as an expression ( 'eval ' ) .", "question_id": 1306}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "nis.maps()", "intent": "Return a list of all valid maps .", "question_id": 6395}
{"snippet": "json.loads(s, **kw)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5300}
{"snippet": "signal.CTRL_C_EVENT", "intent": "The signal corresponding to the Ctrl+C keystroke event.", "question_id": 8376}
{"snippet": "mailbox.Error", "intent": "The based class for all other module-specific exceptions.", "question_id": 5856}
{"snippet": "mailbox.NoSuchMailboxError", "intent": "Raised when a mailbox is expected but is not found, such as when instantiating a Mailbox subclass with a path that does not exist (and with the create parameter set to False), or when opening a folder that does not exist.", "question_id": 5857}
{"snippet": "doctest.IGNORE_EXCEPTION_DETAIL", "intent": "When specified, an example that expects an exception passes if an exception of the expected type is raised, even if the exception detail does not match.", "question_id": 2756}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026}
{"snippet": "Pattern.groupindex", "intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "question_id": 7993}
{"snippet": "barrier.abort()", "intent": "Put the barrier into a broken state .", "question_id": 10424}
{"snippet": "stat.UF_HIDDEN", "intent": "The file should not be displayed in a GUI (Mac OS X 10.5+).", "question_id": 9119}
{"snippet": "doctest.DocFileSuite(*paths, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2798}
{"snippet": "async_exit_stack.aclose()", "intent": "Similar to close ( ) but properly handles awaitables .", "question_id": 1636}
{"snippet": "curses.meta(flag)", "intent": "If `flag` is True , allow 8-bit characters to be input .", "question_id": 1953}
{"snippet": "dataclasses.field()", "intent": "For common and simple use cases , no other functionality is required .", "question_id": 2167}
{"snippet": "robot_file_parser.set_url(url)", "intent": "Sets the URL referring to a robots.txt file . With arguments `url`.", "question_id": 11909}
{"snippet": "statistics.variance(data)", "intent": "Return the sample variance of `data` , an iterable of at least two real-valued numbers .", "question_id": 9139}
{"snippet": "str.center(width, fillchar)", "intent": "Return centered in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "question_id": 9180}
{"snippet": "gdbm.sync()", "intent": "When the database has been opened in fast mode , this method forces any unwritten data to be written to the disk .", "question_id": 2377}
{"snippet": "sqlite3.register_adapter(type, callable)", "intent": "Registers a `callable` to convert the custom Python `type` type into one of SQLite \u2019 s supported types .", "question_id": 8800}
{"snippet": "zlib.compressobj()", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once .", "question_id": 12907}
{"snippet": "window.mvderwin(y, x)", "intent": "Move the window inside its parent window . With arguments `y`, `x`.", "question_id": 2094}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "multiprocessing.set_executable()", "intent": "Sets the path of the Python interpreter to use when starting a child process .", "question_id": 6228}
{"snippet": "importlib.abc.MetaPathFinder", "intent": "An abstract base class representing a meta path finder.", "question_id": 4802}
{"snippet": "sndhdr.whathdr(filename)", "intent": "Determines the type of sound data stored in a file based on the file header . The name of the file is given by `filename` .", "question_id": 8550}
{"snippet": "contextlib.AbstractContextManager", "intent": "An abstract base class for classes that implement object.__enter__() and object.__exit__().", "question_id": 1615}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499}
{"snippet": "SSLContext.load_verify_locations()", "intent": "Load a set of \u201c certification authority \u201d ( CA ) certificates used to validate other peers \u2019 certificates when verify_mode is other than CERT_NONE .", "question_id": 9003}
{"snippet": "site.ENABLE_USER_SITE", "intent": "Flag showing the status of the user site-packages directory.", "question_id": 8403}
{"snippet": "locale.LC_ALL", "intent": "Combination of all locale settings.", "question_id": 5410}
{"snippet": "connection.cursor()", "intent": "The cursor method accepts a single optional parameter `factory` .", "question_id": 8806}
{"snippet": "xmlparser.XmlDeclHandler(version, encoding, standalone)", "intent": "Called when the XML declaration is parsed . The XML declaration is the ( optional ) declaration of the applicable `version` of the XML recommendation , the `encoding` of the document text , and an optional \u201c `standalone` \u201d declaration .", "question_id": 7755}
{"snippet": "stringprep.in_table_c3(code)", "intent": "Determine whether `code` is in tableC.3 ( Private use ) .", "question_id": 9541}
{"snippet": "inspect.getcallargs(func, *args, **kwds)", "intent": "Bind the args and kwds to the argument names of the Python function or method `func` , as if it was called with them . whenever func ( `*args` , `**kwds` ) would raise an exception because of incompatible signature , an exception of the same type and the same or similar message is raised .", "question_id": 5019}
{"snippet": "telnetlib.Telnet()", "intent": "Telnet represents a connection to a Telnet server .", "question_id": 10005}
{"snippet": "os.removedirs(name)", "intent": "Remove directories recursively . With arguments `name`.", "question_id": 6891}
{"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}
{"snippet": "os.fdatasync(fd)", "intent": "Force write of file with filedescriptor `fd` to disk .", "question_id": 6721}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "i_pv4_address.is_multicast", "intent": "True if the address is reserved for multicast use.", "question_id": 5180}
{"snippet": "aifc.readframes(nframes)", "intent": "Read and return the next `nframes` frames from the audio file .", "question_id": 20}
{"snippet": "multiprocessing.managers.Namespace", "intent": "A type that can register with SyncManager.", "question_id": 6318}
{"snippet": "watched_file_handler.reopenIfNeeded()", "intent": "Checks to see if the file has changed .", "question_id": 5448}
{"snippet": "imaplib.IMAP4_SSL(port=IMAP4_SSL_PORT)", "intent": "This is a subclass derived from IMAP4 that connects over an SSL encrypted socket ( to use this class you need a socket module that was compiled with SSL support ) . If `port` is omitted , the standard IMAP4-over-SSL port ( 993 ) is used .", "question_id": 4678}
{"snippet": "turtle.back(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10905}
{"snippet": "readline.append_history_file(nelements)", "intent": "Append the last `nelements` items of history to a file .", "question_id": 8026}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122}
{"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919}
{"snippet": "datetime.datetime(year, month, day, hour=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`.", "question_id": 2248}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271}
{"snippet": "collections.abc.Awaitable", "intent": "ABC for awaitable objects, which can be used in await expressions.", "question_id": 1330}
{"snippet": "test_case.assertSetEqual(first, second)", "intent": "Tests that two sets are equal . Fails if either of `first` or `second` does not have a set.difference ( ) method .", "question_id": 11458}
{"snippet": "gc.DEBUG_UNCOLLECTABLE", "intent": "Print information of uncollectable objects found (objects which are not reachable but cannot be freed by the collector).", "question_id": 4191}
{"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}
{"snippet": "os.geteuid()", "intent": "Return the current process \u2019 s effective user id .", "question_id": 6675}
{"snippet": "test.support.check_free_after_iterating(test, iter, cls)", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.", "question_id": 10271}
{"snippet": "connection.load_extension(path)", "intent": "This routine loads a SQLite extension from a shared library . With arguments `path`.", "question_id": 8824}
{"snippet": "date.isoformat()", "intent": "Return a string representing the date in ISO 8601 format , \u2018 YYYY-MM-DD \u2019 .", "question_id": 2242}
{"snippet": "errno.EOVERFLOW", "intent": "Value too large for defined data type", "question_id": 3580}
{"snippet": "doctest.DocTestRunner(verbose=None, optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `verbose` controls the DocTestRunner \u2019 s verbosity . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2867}
{"snippet": "widget.start()", "intent": "Begin autoincrement mode : schedules a recurring timer event that calls Progressbar.step ( ) every `interval` milliseconds .", "question_id": 10615}
{"snippet": "TabError", "intent": "Raised when indentation contains an inconsistent use of tabs and spaces.", "question_id": 3667}
{"snippet": "email.headerregistry.HeaderRegistry(base_class=BaseHeader)", "intent": "This is the factory used by EmailPolicy by default . HeaderRegistry builds the class used to create a header instance dynamically , using `base_class` and a specialized class retrieved from a registry that it holds .", "question_id": 3176}
{"snippet": "FTP.connect(source_address=None)", "intent": "Connect to the given `host` and `port` . `source_address` is a 2-tuple ( host , port ) for the socket to bind to as its source address before connecting .", "question_id": 3908}
{"snippet": "FTP_TLS.prot_c()", "intent": "Set up clear text data connection .", "question_id": 3972}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "turtle.getshapes()", "intent": "Return a list of names of all currently available turtle shapes .", "question_id": 11097}
{"snippet": "Morsel.OutputString()", "intent": "Return a string representing the Morsel , without any surrounding HTTP or JavaScript .", "question_id": 4607}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}
{"snippet": "InteractiveInterpreter.showsyntaxerror()", "intent": "Display the syntax error that just occurred .", "question_id": 1180}
{"snippet": "xmlrpc.client.dumps(params, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12702}
{"snippet": "os.sched_get_priority_min(policy)", "intent": "Get the minimum priority value for `policy` .", "question_id": 7105}
{"snippet": "BaseCookie.load(rawdata)", "intent": "If `rawdata` is a string , parse it as an HTTP_COOKIE and add the values found there as Morsels .", "question_id": 4594}
{"snippet": "email.message.EmailMessage()", "intent": "If `policy` is specified use the rules it specifies to update and serialize the representation of the message .", "question_id": 3222}
{"snippet": "auto.start", "intent": "The first index of invalid data in object.", "question_id": 3677}
{"snippet": "xmlparser.ParseFile(file)", "intent": "Parse XML data reading from the object `file` .", "question_id": 7734}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE", "intent": "The parser determined that the document was not \u201cstandalone\u201d though it declared itself to be in the XML declaration, and the NotStandaloneHandler was set and returned 0.", "question_id": 7807}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846}
{"snippet": "multiprocessing.AuthenticationError", "intent": "Raised when there is an authentication error.", "question_id": 6191}
{"snippet": "context.remainder(x, y)", "intent": "Returns the remainder from integer division . With arguments `x`, `y`.", "question_id": 2565}
{"snippet": "i_pv4_network.hosts()", "intent": "Returns an iterator over the usable hosts in the network .", "question_id": 5205}
{"snippet": "inspect.isgeneratorfunction(object)", "intent": "Return true if the `object` is a Python generator function .", "question_id": 4952}
{"snippet": "json.dump(obj, fp, **kw, allow_nan=True)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `allow_nan` is false ( default : True ) , then it will be a ValueError to serialize out of range float values ( nan , inf , -inf ) in strict compliance of the JSON specification . With arguments `**kw`.", "question_id": 5274}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "base_handler.setup_environ()", "intent": "Set the environ attribute to a fully-populated WSGI environment .", "question_id": 12259}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "Option.callback_args", "intent": "Additional positional and keyword arguments to pass to callback after the four standard callback arguments.", "question_id": 6634}
{"snippet": "calendar.isleap(year)", "intent": "Returns True if `year` is a leap year , otherwise False .", "question_id": 987}
{"snippet": "mimetypes.knownfiles", "intent": "List of type map file names commonly installed.", "question_id": 5951}
{"snippet": "loop.call_soon(callback, *args)", "intent": "Schedule a `callback` to be called with args arguments at the next iteration of the event loop . With arguments `*args`.", "question_id": 189}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489}
{"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931}
{"snippet": "context.same_quantum(x, y)", "intent": "Returns True if the two operands have the same exponent . With arguments `x`, `y`.", "question_id": 2568}
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106}
{"snippet": "mailbox.clear()", "intent": "Delete all messages from the mailbox .", "question_id": 5745}
{"snippet": "stringprep.in_table_c6(code)", "intent": "Determine whether `code` is in tableC.6 ( Inappropriate for plain text ) .", "question_id": 9544}
{"snippet": "gdbm.reorganize()", "intent": "If you have carried out a lot of deletions and would like to shrink the space used by the gdbm file , this routine will reorganize the database .", "question_id": 2376}
{"snippet": "test.support.temp_cwd(name='tempcwd')", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory .", "question_id": 10183}
{"snippet": "set < other", "intent": "Test whether the set is a proper subset of other, that is, set <= other and set != other.", "question_id": 9441}
{"snippet": "asyncio.Future(loop=None)", "intent": "A Future represents an eventual result of an asynchronous operation . This way alternative event `loop` implementations can inject their own optimized implementations of a Future object .", "question_id": 360}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "email.generator.Generator(outfp, mangle_from_=None)", "intent": "Return a Generator object that will write any message provided to the flatten ( ) method , or any text provided to the write ( ) method , to the file-like object `outfp` . If optional `mangle_from_` is True , put a > character in front of any line in the body that starts with the exact string `` From `` , that is From followed by a space at the beginning of a line .", "question_id": 3093}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "Telnet.read_lazy()", "intent": "Process and return data already in the queues ( lazy ) .", "question_id": 10015}
{"snippet": "inspect.isasyncgen(object)", "intent": "Return true if the `object` is an asynchronous generator iterator created by an asynchronous generator function .", "question_id": 4958}
{"snippet": "asyncio.current_task()", "intent": "Return the currently running Task instance , or None if no task is running .", "question_id": 620}
{"snippet": "Class.methods", "intent": "A dictionary mapping method names to line numbers.", "question_id": 7723}
{"snippet": "inspect_loader.exec_module(module)", "intent": "Implementation of Loader.exec_module ( ) . With arguments `module`.", "question_id": 4831}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "winsound.SND_ALIAS", "intent": "The sound parameter is a sound association name from the registry.", "question_id": 12197}
{"snippet": "window.clrtoeol()", "intent": "Erase from cursor to the end of the line .", "question_id": 2037}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "Repr.repr_TYPE(obj, level)", "intent": "Formatting methods for specific types are implemented as methods with a name based on the type name . In the method name , TYPE is replaced by ' _'.join ( type ( `obj` ) .__name__.split ( ) ) . Type-specific methods which need to recursively format a value should call self.repr1 ( subobj , `level` - 1 ) .", "question_id": 8068}
{"snippet": "tkinter.tix.Meter", "intent": "The Meter widget can be used to show the progress of a background job which may take a long time to execute.", "question_id": 10558}
{"snippet": "errno.errorcode", "intent": "Dictionary providing a mapping from the errno value to the string name in the underlying system.", "question_id": 3505}
{"snippet": "turtle.shapetransform(t11=None, t22=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 . The determinant t11 * `t22` - t12 * t21 must not be zero , otherwise an error is raised .", "question_id": 11015}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}
{"snippet": "oss_audio_device.post()", "intent": "Tell the driver that there is likely to be a pause in the output , making it possible for the device to handle the pause more intelligently .", "question_id": 7190}
{"snippet": "sys.float_repr_style", "intent": "A string indicating how the repr() function behaves for floats.", "question_id": 9792}
{"snippet": "lzma.compress(data, format=FORMAT_XZ)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5705}
{"snippet": "multiprocessing.set_executable()", "intent": "Sets the path of the Python interpreter to use when starting a child process .", "question_id": 6228}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "stream_reader.readline()", "intent": "Read one line from the input stream and return the decoded data .", "question_id": 1292}
{"snippet": "xmlrpc.client.dumps(params, methodname=None, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` . With arguments `methodname`.", "question_id": 12705}
{"snippet": "@test.support.bigmemtest(size, memuse)", "intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it .", "question_id": 10227}
{"snippet": "stat_result.st_gen", "intent": "File generation number.", "question_id": 6939}
{"snippet": "urllib.request.URLopener(**x509)", "intent": "Base class for opening and reading URLs . With arguments `**x509`.", "question_id": 11890}
{"snippet": "test_suite.__iter__()", "intent": "Tests grouped by a TestSuite are always accessed by iteration .", "question_id": 11488}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "ssl.CertificateError", "intent": "An alias for SSLCertVerificationError.", "question_id": 8884}
{"snippet": "ssl.PROTOCOL_SSLv3", "intent": "Selects SSL version 3 as the channel encryption protocol.", "question_id": 8926}
{"snippet": "FTP_TLS.ccc()", "intent": "Revert control channel back to plaintext .", "question_id": 3970}
{"snippet": "pickle.Pickler(file)", "intent": "This takes a binary `file` for writing a pickle data stream .", "question_id": 7390}
{"snippet": "errno.EOVERFLOW", "intent": "Value too large for defined data type", "question_id": 3580}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "code.interact()", "intent": "Convenience function to run a read-eval-print loop .", "question_id": 1161}
{"snippet": "cmath.nan", "intent": "A floating-point \u201cnot a number\u201d (NaN) value.", "question_id": 1125}
{"snippet": "subprocess.CREATE_NEW_CONSOLE", "intent": "The new process has a new console, instead of inheriting its parent\u2019s console (the default).", "question_id": 9647}
{"snippet": "@functools.lru_cache(typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4148}
{"snippet": "os.removedirs(name)", "intent": "Remove directories recursively . With arguments `name`.", "question_id": 6891}
{"snippet": "tkinter.ttk.Style", "intent": "This class is used to manipulate the style database.", "question_id": 10672}
{"snippet": "subprocess.check_call(args, stdin=None)", "intent": "Run command with arguments . With arguments `args`, `stdin`.", "question_id": 9670}
{"snippet": "time.thread_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current thread .", "question_id": 10459}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "turtle.pen(**pendict)", "intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "question_id": 10958}
{"snippet": "thread.daemon", "intent": "A boolean value indicating whether this thread is a daemon thread (True) or not (False).", "question_id": 10371}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "netrc.hosts", "intent": "Dictionary mapping host names to (login, account, password) tuples.", "question_id": 6389}
{"snippet": "os.read(fd, n)", "intent": "Read at most `n` bytes from file descriptor `fd` .", "question_id": 6793}
{"snippet": "readline.read_init_file()", "intent": "Execute a readline initialization file .", "question_id": 8017}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "OptionParser.set_defaults()", "intent": "Set default values for several option destinations at once .", "question_id": 6647}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617}
{"snippet": "abstract_event_loop_policy.get_event_loop()", "intent": "Get the event loop for the current context .", "question_id": 375}
{"snippet": "Cookie.expires", "intent": "Integer expiry date in seconds since epoch, or None.", "question_id": 4563}
{"snippet": "loader.load_module(fullname)", "intent": "A legacy method for loading a module . With arguments `fullname`.", "question_id": 4816}
{"snippet": "pdb.Pdb(nosigint=False)", "intent": "Pdb is the debugger class . If you want Pdb not to touch the SIGINT handler , set `nosigint` to true .", "question_id": 7346}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "calendar.prmonth(theyear, themonth)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`.", "question_id": 993}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "asyncio.FastChildWatcher", "intent": "This implementation reaps every terminated processes by calling os.waitpid(-1) directly, possibly breaking other code spawning processes and waiting for their termination.", "question_id": 389}
{"snippet": "traceback_exception.from_exception(exc)", "intent": "Capture an exception for later rendering . With arguments `exc`.", "question_id": 10812}
{"snippet": "re.escape(pattern)", "intent": "Escape special characters in `pattern` .", "question_id": 7959}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, charset='utf-8'                     cte=None)", "intent": "Add `headers` and payload to `msg` : If `charset` is provided ( which is valid only for str ) , encode the string to bytes using the specified character set . With arguments `<'str'>`.", "question_id": 3041}
{"snippet": "socket.listen()", "intent": "Enable a server to accept connections .", "question_id": 8690}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "email.errors.MultipartConversionError", "intent": "Raised when a payload is added to a Message object using add_payload(), but the payload is already a scalar and the message\u2019s Content-Type main type is not either multipart or missing.", "question_id": 3077}
{"snippet": "os.posix_fadvise(fd, offset, len, advice)", "intent": "Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations . The `advice` applies to the region of the file specified by `fd` starting at `offset` and continuing for `len` bytes .", "question_id": 6776}
{"snippet": "lzma.LZMACompressor(check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5680}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "partial.args", "intent": "The leftmost positional arguments that will be prepended to the positional arguments provided to a partial object call.", "question_id": 4165}
{"snippet": "bytes.lower()", "intent": "Return a copy of the sequence with all the uppercase ASCII characters converted to their corresponding lowercase counterpart .", "question_id": 9397}
{"snippet": "date.day", "intent": "Between 1 and the number of days in the given month of the given year.", "question_id": 2228}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "set |= other | ...", "intent": "Update the set, adding elements from all others.", "question_id": 9455}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}
{"snippet": "tempfile.mkstemp(text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10075}
{"snippet": "Cmd.ruler", "intent": "The character used to draw separator lines under the help-message headers.", "question_id": 1153}
{"snippet": "doctest.DocTestSuite(extraglobs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `extraglobs` specifies an extra set of global variables , which is merged into globs .", "question_id": 2809}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "Packer.pack_array(list, pack_item)", "intent": "Packs a variable length `list` of homogeneous items . With arguments `pack_item`.", "question_id": 12284}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081}
{"snippet": "curses.def_prog_mode()", "intent": "Save the current terminal mode as the \u201c program \u201d mode , the mode when the running program is using curses .", "question_id": 1927}
{"snippet": "email.charset.add_charset(charset)", "intent": "Add character properties to the global registry . `charset` is the input character set , and must be the canonical name of a character set .", "question_id": 2926}
{"snippet": "pprint.PrettyPrinter(indent=1, depth=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7630}
{"snippet": "curses.color_content(color_number)", "intent": "Return the intensity of the red , green , and blue ( RGB ) components in the color `color_number` , which must be between 0 and COLORS .", "question_id": 1924}
{"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429}
{"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425}
{"snippet": "Node.childNodes", "intent": "A list of nodes contained within this node.", "question_id": 12319}
{"snippet": "socket.sendmsg(buffers)", "intent": "Send normal and ancillary data to the socket , gathering the non-ancillary data from a series of `buffers` and concatenating it into a single message .", "question_id": 8726}
{"snippet": "doctest.DocFileSuite(*paths, parser=DocTestParser())", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `parser` specifies a DocTestParser ( or subclass ) that should be used to extract tests from the files . With arguments `*paths`.", "question_id": 2803}
{"snippet": "oss_audio_device.read(size)", "intent": "Read `size` bytes from the audio input and return them as a Python string .", "question_id": 7180}
{"snippet": "secrets.SystemRandom", "intent": "A class for generating random numbers using the highest-quality sources provided by the operating system.", "question_id": 8131}
{"snippet": "stat_result.st_blksize", "intent": "\u201cPreferred\u201d blocksize for efficient file system I/O.", "question_id": 6936}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "mimetypes.knownfiles", "intent": "List of type map file names commonly installed.", "question_id": 5951}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "pickle.HIGHEST_PROTOCOL", "intent": "An integer, the highest protocol version available.", "question_id": 7361}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543}
{"snippet": "writer.send_hor_rule(*args, **kw)", "intent": "Display a horizontal rule on the output device . With arguments `*args`, `**kw`.", "question_id": 3849}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "asyncio.as_completed(aws, loop=None)", "intent": "Run awaitable objects in the `aws` set concurrently . With arguments `loop`.", "question_id": 616}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "platform.python_implementation()", "intent": "Returns a string identifying the Python implementation .", "question_id": 7476}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636}
{"snippet": "config_parser.getboolean(section, option, fallback)", "intent": "A convenience method which coerces the `option` in the specified `section` to a Boolean value . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "question_id": 1544}
{"snippet": "parser.parse(fp)", "intent": "Read all the data from the text-mode file-like object `fp` , parse the resulting text , and return the root message object .", "question_id": 3388}
{"snippet": "@typing.overload", "intent": "The @overload decorator allows describing functions and methods that support multiple different combinations of argument types.", "question_id": 11327}
{"snippet": "Option.callback_args", "intent": "Additional positional and keyword arguments to pass to callback after the four standard callback arguments.", "question_id": 6634}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}
{"snippet": "shelve.Shelf(dict, writeback=False, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8250}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "multiprocessing.Condition()", "intent": "A condition variable : an alias for threading.Condition .", "question_id": 6249}
{"snippet": "trace.size", "intent": "Size of the memory block in bytes (int).", "question_id": 10892}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "secrets.SystemRandom", "intent": "A class for generating random numbers using the highest-quality sources provided by the operating system.", "question_id": 8131}
{"snippet": "test.support.temp_cwd(name='tempcwd')", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory .", "question_id": 10183}
{"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382}
{"snippet": "turtle.begin_poly()", "intent": "Start recording the vertices of a polygon .", "question_id": 11031}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417}
{"snippet": "SSLSocket.verify_client_post_handshake()", "intent": "Requests post-handshake authentication ( PHA ) from a TLS 1.3 client .", "question_id": 8987}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}
{"snippet": "SyntaxError", "intent": "Raised when the parser encounters a syntax error.", "question_id": 3665}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "nt_event_log_handler.close()", "intent": "At this point , you can remove the application name from the registry as a source of event log entries .", "question_id": 5510}
{"snippet": "locale.format_string(format, val, grouping=False, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5387}
{"snippet": "timeit.Timer(setup='pass')", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10499}
{"snippet": "TarFile.add(name)", "intent": "Add the file `name` to the archive .", "question_id": 9949}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}
{"snippet": "turtle.begin_poly()", "intent": "Start recording the vertices of a polygon .", "question_id": 11031}
{"snippet": "Option.TYPE_CHECKER", "intent": "A dictionary mapping type names to type-checking functions.", "question_id": 6650}
{"snippet": "Node.writexml(writer, newl=\"\")", "intent": "Write XML to the `writer` object . The `newl` parameter specifies the string to use to terminate newlines .", "question_id": 12406}
{"snippet": "context.canonical(x)", "intent": "Returns the same Decimal object `x` .", "question_id": 2519}
{"snippet": "set ^= other", "intent": "Update the set, keeping only elements found in either set, but not in both.", "question_id": 9461}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636}
{"snippet": "audioop.mul(fragment, width, factor)", "intent": "Return a `fragment` that has all samples in the original fragment multiplied by the floating-point value `factor` . With arguments `width`.", "question_id": 699}
{"snippet": "test_case.assertCountEqual(first, second)", "intent": "Test that sequence `first` contains the same elements as `second` , regardless of their order .", "question_id": 11445}
{"snippet": "SMTP.docmd(cmd, args='')", "intent": "Send a command `cmd` to the server . The optional argument `args` is simply concatenated to the command , separated by a space .", "question_id": 8510}
{"snippet": "@abc.abstractproperty", "intent": "A subclass of the built-in property(), indicating an abstract property.", "question_id": 7}
{"snippet": "inspect.getmodulename(path)", "intent": "Return the name of the module named by the file `path` , without including the names of enclosing packages .", "question_id": 4947}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "TarFile.add(name)", "intent": "Add the file `name` to the archive .", "question_id": 9949}
{"snippet": "shlex.shlex(punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8277}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "unittest.TestCase()", "intent": "Instances of the TestCase class represent the logical test units in the unittest universe .", "question_id": 11363}
{"snippet": "maildir_message.add_flag(flag)", "intent": "Set the `flag` ( s ) specified by flag without changing other flags .", "question_id": 5817}
{"snippet": "@importlib.util.module_for_loader", "intent": "A decorator for importlib.abc.Loader.load_module() to handle selecting the proper module object to load with.", "question_id": 4931}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "random.choices(population, weights=None, cum_weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7899}
{"snippet": "syslog.syslog(message)", "intent": "Send the string `message` to the system logger .", "question_id": 9877}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417}
{"snippet": "ctypes.WinError(code=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `code` is not specified , GetLastError is called to determine the error code .", "question_id": 1837}
{"snippet": "formatter.format(record)", "intent": "The `record` \u2019 s attribute dictionary is used as the operand to a string formatting operation .", "question_id": 5618}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "str.splitlines(keepends)", "intent": "Return a list of the lines in the string , breaking at line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9245}
{"snippet": "mh.set_sequences(sequences)", "intent": "Re-define the `sequences` that exist in the mailbox based upon sequences , a dictionary of names mapped to key lists , like returned by get_sequences ( ) .", "question_id": 5784}
{"snippet": "pdb.Pdb()", "intent": "Pdb is the debugger class .", "question_id": 7341}
{"snippet": "xml_pull_parser.read_events()", "intent": "Return an iterator over the events which have been encountered in the data fed to the parser .", "question_id": 12560}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164}
{"snippet": "turtle.exitonclick()", "intent": "Bind bye ( ) method to mouse clicks on the Screen .", "question_id": 11106}
{"snippet": "inspect.getframeinfo(frame)", "intent": "Get information about a `frame` or traceback object .", "question_id": 5023}
{"snippet": "date_header.datetime", "intent": "If the header value can be recognized as a valid date of one form or another, this attribute will contain a datetime instance representing that date.", "question_id": 3157}
{"snippet": "asyncio.ProactorEventLoop", "intent": "An event loop for Windows that uses \u201cI/O Completion Ports\u201d (IOCP).", "question_id": 343}
{"snippet": "aifc.setsampwidth(width)", "intent": "Specify the size in bytes of audio samples . With arguments `width`.", "question_id": 28}
{"snippet": "pool.map(func, iterable, chunksize)", "intent": "A parallel equivalent of the map ( ) built-in function ( it supports only one `iterable` argument though ) . The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer . With arguments `func`.", "question_id": 6340}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992}
{"snippet": "tracemalloc.Traceback", "intent": "Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "question_id": 10894}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}
{"snippet": "inspect.getsourcefile(object)", "intent": "Return the name of the Python source file in which an `object` was defined .", "question_id": 4973}
{"snippet": "email.header.Header()", "intent": "Create a MIME-compliant header that can contain strings in different character sets .", "question_id": 3116}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "curses.def_prog_mode()", "intent": "Save the current terminal mode as the \u201c program \u201d mode , the mode when the running program is using curses .", "question_id": 1927}
{"snippet": "curses.ascii.isspace(c)", "intent": "Checks for ASCII white-space characters ; space , line feed , carriage return , form feed , horizontal tab , vertical tab . With arguments `c`.", "question_id": 1909}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "subprocess.call(args, stdout=None)", "intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead :", "question_id": 9661}
{"snippet": "PurePath.as_posix()", "intent": "Return a string representation of the path with forward slashes ( / ) :", "question_id": 7253}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508}
{"snippet": "string.ascii_lowercase", "intent": "The lowercase letters 'abcdefghijklmnopqrstuvwxyz'.", "question_id": 9508}
{"snippet": "test.support.temp_cwd(name='tempcwd')", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory .", "question_id": 10183}
{"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162}
{"snippet": "cursor.executescript(sql_script)", "intent": "This is a nonstandard convenience method for executing multiple SQL statements at once . `sql_script` can be an instance of str .", "question_id": 8843}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "cmath.sqrt(x)", "intent": "Return the square root of `x` .", "question_id": 1100}
{"snippet": "widget.selection_add(*items)", "intent": "Add items to the selection . With arguments `*items`.", "question_id": 10655}
{"snippet": "json.load(fp, **kw, cls=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . With arguments `**kw`.", "question_id": 5291}
{"snippet": "NNTP.newnews(group, date, file=None)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) . With arguments `file`.", "question_id": 6464}
{"snippet": "json_decoder.raw_decode(s)", "intent": "Decode a JSON document from `s` ( a str beginning with a JSON document ) and return a 2-tuple of the Python representation and the index in s where the document ended .", "question_id": 5321}
{"snippet": "concurrent.futures.thread.BrokenThreadPool", "intent": "Derived from BrokenExecutor, this exception class is raised when one of the workers of a ThreadPoolExecutor has failed initializing.", "question_id": 1489}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247}
{"snippet": "xml.dom.pulldom.parseString(string, parser=None)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` . With arguments `parser`.", "question_id": 12430}
{"snippet": "os.mknod(path)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6874}
{"snippet": "mock.method_calls", "intent": "As well as tracking calls to themselves, mocks also track calls to methods and attributes, and their methods and attributes:", "question_id": 11594}
{"snippet": "curses.flash()", "intent": "Flash the screen .", "question_id": 1935}
{"snippet": "unicodedata.decomposition(chr)", "intent": "Returns the character decomposition mapping assigned to the character `chr` as string .", "question_id": 11354}
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133}
{"snippet": "tkinter.tix.DirList", "intent": "The DirList widget displays a list view of a directory, its previous directories and its sub-directories.", "question_id": 10563}
{"snippet": "io.TextIOWrapper(buffer, encoding=None, newline=None)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` . `encoding` gives the name of the encoding that the stream will be decoded or encoded with . `newline` controls how line endings are handled .", "question_id": 5153}
{"snippet": "traceback.extract_stack()", "intent": "Extract the raw traceback from the current stack frame .", "question_id": 10771}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "resource.RUSAGE_THREAD", "intent": "Pass to getrusage() to request resources consumed by the current thread.", "question_id": 8100}
{"snippet": "Template.append(cmd, kind)", "intent": "Append a new action at the end . The `cmd` variable must be a valid bourne shell command . The `kind` variable consists of two letters .", "question_id": 7431}
{"snippet": "scheduler.run(blocking=True)", "intent": "Run all scheduled events . If `blocking` is false executes the scheduled events due to expire soonest ( if any ) and then return the deadline of the next scheduled call in the scheduler ( if any ) .", "question_id": 8129}
{"snippet": "unittest.mock.sentinel", "intent": "The sentinel object provides a convenient way of providing unique objects for your tests.", "question_id": 11645}
{"snippet": "signal.CTRL_C_EVENT", "intent": "The signal corresponding to the Ctrl+C keystroke event.", "question_id": 8376}
{"snippet": "test_result.shouldStop", "intent": "Set to True when the execution of tests should stop by stop().", "question_id": 11513}
{"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}
{"snippet": "ssl.MemoryBIO", "intent": "A memory buffer that can be used to pass data between Python and an SSL protocol instance.", "question_id": 9053}
{"snippet": "call.call_list()", "intent": "For a call object that represents multiple calls , call_list ( ) returns a list of all the intermediate calls as well as the final call .", "question_id": 11648}
{"snippet": "ssl.HAS_NEVER_CHECK_COMMON_NAME", "intent": "Whether the OpenSSL library has built-in support not checking subject common name and SSLContext.hostname_checks_common_name is writeable.", "question_id": 8946}
{"snippet": "crypt.METHOD_SHA512", "intent": "A Modular Crypt Format method with 16 character salt and 86 character hash based on the SHA-512 hash function.", "question_id": 1668}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892}
{"snippet": "HMAC.update(msg)", "intent": "Update the hmac object with `msg` .", "question_id": 4334}
{"snippet": "asyncio.sleep(delay, loop=None)", "intent": "Block for `delay` seconds . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 597}
{"snippet": "test.support.temp_cwd(name='tempcwd')", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . The context manager creates a temporary directory in the current directory with `name` name before temporarily changing the current working directory .", "question_id": 10183}
{"snippet": "FileCookieJar.revert(filename=None)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `filename`.", "question_id": 4515}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122}
{"snippet": "json.JSONEncoder(sort_keys=False)", "intent": "Extensible JSON encoder for Python data structures . If `sort_keys` is true ( default : False ) , then the output of dictionaries will be sorted by key ; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis .", "question_id": 5327}
{"snippet": "ctypes.PYFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the Python calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1800}
{"snippet": "asyncio.Future(loop=None)", "intent": "A Future represents an eventual result of an asynchronous operation . This way alternative event `loop` implementations can inject their own optimized implementations of a Future object .", "question_id": 360}
{"snippet": "Option.TYPES", "intent": "A tuple of type names; in your subclass, simply define a new tuple TYPES that builds on the standard one.", "question_id": 6649}
{"snippet": "context.logical_invert(x)", "intent": "Invert all the digits in `x` .", "question_id": 2546}
{"snippet": "queue_listener.emit(record)", "intent": "Do whatever it takes to actually log the specified logging `record` .", "question_id": 5609}
{"snippet": "asyncio.ProactorEventLoop", "intent": "An event loop for Windows that uses \u201cI/O Completion Ports\u201d (IOCP).", "question_id": 343}
{"snippet": "turtle.shapetransform(t11=None, t22=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 . The determinant t11 * `t22` - t12 * t21 must not be zero , otherwise an error is raised .", "question_id": 11015}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "operator.xor(a, b)", "intent": "Return the bitwise exclusive or of `a` and `b` .", "question_id": 6566}
{"snippet": "io.TextIOWrapper(buffer, encoding=None, newline=None)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` . `encoding` gives the name of the encoding that the stream will be decoded or encoded with . `newline` controls how line endings are handled .", "question_id": 5153}
{"snippet": "memoryview.__eq__(exporter)", "intent": "A memoryview and a PEP 3118 `exporter` are equal if their shapes are equivalent and if all corresponding values are equal when the operands \u2019 respective format codes are interpreted using struct syntax .", "question_id": 9412}
{"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "_c_data._b_base_", "intent": "Sometimes ctypes data instances do not own the memory block they contain, instead they share part of the memory block of a base object.", "question_id": 1850}
{"snippet": "differ.compare(a, b)", "intent": "Compare two sequences of lines , and generate the delta ( `a` sequence of lines ) . With arguments `b`.", "question_id": 2694}
{"snippet": "os.RWF_HIPRI", "intent": "High priority read/write.", "question_id": 6787}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "ssl.OP_ENABLE_MIDDLEBOX_COMPAT", "intent": "Send dummy Change Cipher Spec (CCS) messages in TLS 1.3 handshake to make a TLS 1.3 connection look more like a TLS 1.2 connection.", "question_id": 8941}
{"snippet": "auto.errno", "intent": "A numeric error code from the C variable errno.", "question_id": 3654}
{"snippet": "simple_http_request_handler.do_HEAD()", "intent": "This method serves the 'HEAD ' request type : it sends the headers it would send for the equivalent GET request .", "question_id": 4664}
{"snippet": "imp.acquire_lock()", "intent": "Acquire the interpreter \u2019 s global import lock for the current thread .", "question_id": 4772}
{"snippet": "SMTP.connect()", "intent": "Connect to a `host` on a given `port` .", "question_id": 8511}
{"snippet": "dialog.checkbox(name, x, y, width, height, attributes, property, text, next_control)", "intent": "Add and return a CheckBox control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `property`, `text`, `next_control`.", "question_id": 6142}
{"snippet": "ssl.OP_ALL", "intent": "Enables workarounds for various bugs present in other SSL implementations.", "question_id": 8930}
{"snippet": "curses.killchar()", "intent": "Return the user \u2019 s current line kill character as a one-byte bytes object .", "question_id": 1951}
{"snippet": "window.getstr(y, x)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`.", "question_id": 2061}
{"snippet": "breakpoint.bpprint()", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 766}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}
{"snippet": "logging.handlers.BufferingHandler(capacity)", "intent": "Initializes the handler with a buffer of the specified `capacity` .", "question_id": 5525}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "random.choices(population, weights=None, cum_weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7899}
{"snippet": "kevent.filter", "intent": "Name of the kernel filter.", "question_id": 8204}
{"snippet": "platform.python_build()", "intent": "Returns a tuple ( buildno , builddate ) stating the Python build number and date as strings .", "question_id": 7473}
{"snippet": "os.ctermid()", "intent": "Return the filename corresponding to the controlling terminal of the process .", "question_id": 6657}
{"snippet": "SimpleXMLRPCServer.register_function()", "intent": "Register a `function` that can respond to XML-RPC requests .", "question_id": 12731}
{"snippet": "str.join(iterable)", "intent": "Return a string which is the concatenation of the strings in `iterable` .", "question_id": 9214}
{"snippet": "file_loader.load_module(fullname)", "intent": "Calls super \u2019 s load_module ( ) . With arguments `fullname`.", "question_id": 4838}
{"snippet": "xml.sax.saxutils.escape(data)", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` .", "question_id": 12652}
{"snippet": "shutil.unregister_archive_format(name)", "intent": "Remove the archive format `name` from the list of supported formats .", "question_id": 8362}
{"snippet": "collections.ChainMap(*maps)", "intent": "A ChainMap groups multiple dicts or other mappings together to create a single , updateable view . With arguments `*maps`.", "question_id": 1335}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}
{"snippet": "math.fmod(x, y)", "intent": "Return fmod ( `x` , `y` ) , as defined by the platform C library .", "question_id": 5890}
{"snippet": "PurePath.parts", "intent": "A tuple giving access to the path\u2019s various components:", "question_id": 7243}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "Dialect.doublequote", "intent": "Controls how instances of quotechar appearing inside a field should themselves be quoted.", "question_id": 1724}
{"snippet": "email.message_from_file(fp)", "intent": "Return a message object structure tree from an open file object . This is equivalent to Parser ( ) .parse ( `fp` ) .", "question_id": 3408}
{"snippet": "InteractiveInterpreter.runsource(source)", "intent": "Compile and run some `source` in the interpreter .", "question_id": 1175}
{"snippet": "socket.sendmsg(buffers)", "intent": "Send normal and ancillary data to the socket , gathering the non-ancillary data from a series of `buffers` and concatenating it into a single message .", "question_id": 8726}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "msilib.Directory(database, cab, basedir, physical, logical, default)", "intent": "Create a new directory in the Directory table . Files are added into the current component , and into the `cab` file . To create a directory , a base directory object needs to be specified ( can be None ) , the path to the `physical` directory , and a `logical` directory name . `default` specifies the DefaultDir slot in the directory table . With arguments `database`, `basedir`.", "question_id": 6092}
{"snippet": "task.cancel()", "intent": "Request the Task to be cancelled .", "question_id": 626}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}
{"snippet": "curses.can_change_color()", "intent": "Return True or False , depending on whether the programmer can change the colors displayed by the terminal .", "question_id": 1922}
{"snippet": "decimal.sqrt(context=None)", "intent": "Return the square root of the argument to full precision . With arguments `context`.", "question_id": 2477}
{"snippet": "xmlparser.ErrorColumnNumber", "intent": "Column number at which an error occurred.", "question_id": 7750}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "DefaultCookiePolicy.DomainLiberal", "intent": "Equivalent to 0 (ie.", "question_id": 4555}
{"snippet": "cmath.pi", "intent": "The mathematical constant \u03c0, as a float.", "question_id": 1120}
{"snippet": "site.USER_SITE", "intent": "Path to the user site-packages for the running Python.", "question_id": 8404}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "set &= other & ...", "intent": "Update the set, keeping only elements found in it and all others.", "question_id": 9457}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "time.CLOCK_REALTIME", "intent": "System-wide real-time clock.", "question_id": 10471}
{"snippet": "queue_listener.flush()", "intent": "Ensure all logging output has been flushed .", "question_id": 5604}
{"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773}
{"snippet": "loop.get_task_factory()", "intent": "Return a task factory or None if the default one is in use .", "question_id": 201}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922}
{"snippet": "msilib.UuidCreate()", "intent": "Return the string representation of a new unique identifier .", "question_id": 6059}
{"snippet": "nntplib.NNTP(host, timeout)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection .", "question_id": 6399}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "urllib.parse.parse_qs(qs, encoding='utf-8')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional `encoding` and errors parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method . With arguments `qs`.", "question_id": 11672}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "base_server.handle_timeout()", "intent": "This function is called when the timeout attribute has been set to a value other than None and the timeout period has passed with no requests being received .", "question_id": 8778}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615}
{"snippet": "bdb.set_return(frame)", "intent": "Stop when returning from the given `frame` .", "question_id": 787}
{"snippet": "mh_message.set_sequences(sequences)", "intent": "Set the list of `sequences` that include this message .", "question_id": 5835}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "test.support.check__all__(test_case, module, blacklist=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `blacklist` argument can be a set of names that must not be treated as part of the public API even though their names indicate otherwise . With arguments `test_case`.", "question_id": 10280}
{"snippet": "breakpoint.bpprint()", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 766}
{"snippet": "traceback.extract_tb(tb)", "intent": "Return a StackSummary object representing a list of \u201c pre-processed \u201d stack trace entries extracted from the traceback object `tb` .", "question_id": 10769}
{"snippet": "xml.sax.saxutils.unescape(data, entities={})", "intent": "Unescape ' & amp ; ' , ' & lt ; ' , and ' & gt ; ' in a string of `data` . You can unescape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12655}
{"snippet": "terminal_size.columns", "intent": "Width of the terminal window in characters.", "question_id": 6814}
{"snippet": "socket.AF_LINK", "intent": "Availability: BSD, OSX.", "question_id": 8606}
{"snippet": "statistic.size", "intent": "Total size of memory blocks in bytes (int).", "question_id": 10882}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer, lock=True)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed . If `lock` is True ( the default ) then a new lock object is created to synchronize access to the value .", "question_id": 6268}
{"snippet": "readline.read_history_file()", "intent": "Load a readline history file , and append it to the history list .", "question_id": 8022}
{"snippet": "shlex.shlex(instream=None, punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8280}
{"snippet": "i_pv4_network.with_netmask", "intent": "A string representation of the network, with the mask in net mask notation.", "question_id": 5201}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679}
{"snippet": "HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)", "intent": "Return a Request or None in response to a redirect . If a redirection should take place , return a new Request to allow http_error_30* ( ) to perform the redirect to `newurl` . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11850}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "csv.QUOTE_MINIMAL", "intent": "Instructs writer objects to only quote those fields which contain special characters such as delimiter, quotechar or any of the characters in lineterminator.", "question_id": 1719}
{"snippet": "resource.RLIMIT_NPROC", "intent": "The maximum number of processes the current process may create.", "question_id": 8081}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136}
{"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218}
{"snippet": "policy.header_source_parse(sourcelines)", "intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "question_id": 3423}
{"snippet": "asyncio.Future(loop=None)", "intent": "A Future represents an eventual result of an asynchronous operation . This way alternative event `loop` implementations can inject their own optimized implementations of a Future object .", "question_id": 360}
{"snippet": "multiprocessing.get_logger()", "intent": "Returns the logger used by multiprocessing .", "question_id": 6382}
{"snippet": "termios.tcflow(fd, action)", "intent": "Suspend or resume input or output on file descriptor `fd` . The `action` argument can be TCOOFF to suspend output , TCOON to restart output , TCIOFF to suspend input , or TCION to restart input .", "question_id": 10107}
{"snippet": "finder.find_module(fullname)", "intent": "An abstract method for finding a loader for the specified module . With arguments `fullname`.", "question_id": 4800}
{"snippet": "test.support.TestHandler(logging.handlers.BufferingHandler)", "intent": "Class for logging support . With arguments `logging.handlers.BufferingHandler`.", "question_id": 10297}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271}
{"snippet": "widget.parent(item)", "intent": "Returns the ID of the parent of `item` , or \u2018 \u2019 if item is at the top level of the hierarchy .", "question_id": 10646}
{"snippet": "formatter.add_hor_rule(*args, **kw)", "intent": "Insert a horizontal rule in the output . With arguments `*args`, `**kw`.", "question_id": 3821}
{"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}
{"snippet": "sequence_matcher.quick_ratio()", "intent": "Return an upper bound on ratio ( ) relatively quickly .", "question_id": 2688}
{"snippet": "compileall.compile_file(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "intent": "Compile the file with path `fullname` . `invalidation_mode` should be a member of the py_compile.PycInvalidationMode enum and controls how the generated pycs are invalidated at runtime .", "question_id": 1426}
{"snippet": "InputSource.setEncoding(encoding)", "intent": "Sets the character `encoding` of this InputSource .", "question_id": 12638}
{"snippet": "test_result.addSkip(test, reason)", "intent": "Called when the `test` case test is skipped . `reason` is the reason the test gave for skipping .", "question_id": 11527}
{"snippet": "bytes.count(sub, start, end)", "intent": "Return the number of non-overlapping occurrences of subsequence `sub` in the range [ `start` , `end` ] .", "question_id": 9269}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802}
{"snippet": "ssl.SSLCertVerificationError", "intent": "A subclass of SSLError raised when certificate validation has failed.", "question_id": 8881}
{"snippet": "cmath.exp(x)", "intent": "Return e raised to the power `x` , where e is the base of natural logarithms .", "question_id": 1096}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "email_message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3260}
{"snippet": "stat.S_IMODE(mode)", "intent": "Return the portion of the file \u2019 s `mode` that can be set by os.chmod ( ) \u2014that is , the file \u2019 s permission bits , plus the sticky bit , set-group-id , and set-user-id bits ( on systems that support them ) .", "question_id": 9071}
{"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157}
{"snippet": "writer.send_line_break()", "intent": "Break the current line .", "question_id": 3847}
{"snippet": "json.dump(obj, fp, **kw)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . With arguments `**kw`.", "question_id": 5270}
{"snippet": "codecs.lookup(encoding)", "intent": "Looks up the codec info in the Python codec registry and returns a CodecInfo object as defined below . With arguments `encoding`.", "question_id": 1200}
{"snippet": "curses.resetty()", "intent": "Restore the state of the terminal modes to what it was at the last call to savetty ( ) .", "question_id": 1974}
{"snippet": "PrettyPrinter.pprint(object)", "intent": "Print the formatted representation of `object` on the configured stream , followed by a newline .", "question_id": 7657}
{"snippet": "asyncio.Task(coro, loop=None)", "intent": "A Future-like object that runs a Python coroutine . Event loops use cooperative scheduling : an event `loop` runs one Task at a time . With arguments `coro`.", "question_id": 625}
{"snippet": "Option.const", "intent": "For actions that store a constant value, the constant value to store.", "question_id": 6631}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997}
{"snippet": "mock.call_count", "intent": "An integer telling you how many times the mock object has been called:", "question_id": 11589}
{"snippet": "shutil.make_archive(base_name, format)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) .", "question_id": 8357}
{"snippet": "i_pv6_address.teredo", "intent": "For addresses that appear to be Teredo addresses (starting with 2001::/32) as defined by RFC 4380, this property will report the embedded (server, client) IP address pair.", "question_id": 5191}
{"snippet": "ast.dump(node, annotate_fields=True)", "intent": "Return a formatted dump of the tree in `node` . If `annotate_fields` is true ( by default ) , the returned string will show the names and the values for fields .", "question_id": 164}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2805}
{"snippet": "sysconfig.get_makefile_filename()", "intent": "Return the path of Makefile .", "question_id": 9876}
{"snippet": "SSLContext.set_ecdh_curve(curve_name)", "intent": "Set the curve name for Elliptic Curve-based Diffie-Hellman ( ECDH ) key exchange . The `curve_name` parameter should be a string describing a well-known elliptic curve , for example prime256v1 for a widely supported curve .", "question_id": 9021}
{"snippet": "ctypes.c_byte", "intent": "Represents the C signed char datatype, and interprets the value as small integer.", "question_id": 1855}
{"snippet": "tixCommand.tix_getbitmap(name)", "intent": "Locates a bitmap file of the `name` name.xpm or name in one of the bitmap directories ( see the tix_addbitmapdir ( ) method ) .", "question_id": 10583}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}
{"snippet": "IMAP4.authenticate(mechanism, authobject)", "intent": "Authenticate command \u2014 requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :", "question_id": 4692}
{"snippet": "asyncio.Queue(maxsize=0, loop=None)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite . With arguments `loop`.", "question_id": 448}
{"snippet": "task.result()", "intent": "Return the result of the Task .", "question_id": 629}
{"snippet": "pool.map(func, iterable, chunksize)", "intent": "A parallel equivalent of the map ( ) built-in function ( it supports only one `iterable` argument though ) . The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer . With arguments `func`.", "question_id": 6340}
{"snippet": "SMTP.sendmail(from_addr, to_addrs, msg)", "intent": "Send mail . If SMTPUTF8 is included in mail_options , and the server supports it , `from_addr` and `to_addrs` may contain non-ASCII characters . `msg` may be a string containing characters in the ASCII range , or a byte string .", "question_id": 8534}
{"snippet": "@typing.type_check_only", "intent": "Decorator to mark a class or function to be unavailable at runtime.", "question_id": 11330}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370}
{"snippet": "async_exit_stack.enter_async_context(cm)", "intent": "Similar to enter_context ( ) but expects an asynchronous context manager . With arguments `cm`.", "question_id": 1633}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "parser.st2list(st, col_info=False)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree . With arguments `col_info`.", "question_id": 7216}
{"snippet": "calendar.Calendar(firstweekday=0)", "intent": "Creates a Calendar object . `firstweekday` is an integer specifying the first day of the week .", "question_id": 910}
{"snippet": "element.tag", "intent": "A string identifying what kind of data this element represents (the element type, in other words).", "question_id": 12479}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "turtle.position()", "intent": "Return the turtle \u2019 s current location ( x , y ) ( as a Vec2D vector ) .", "question_id": 10936}
{"snippet": "os.access(path, mode, effective_ids=False)", "intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions . If `effective_ids` is True , access ( ) will perform its access checks using the effective uid/gid instead of the real uid/gid .", "question_id": 6822}
{"snippet": "tkinter.tix.LabelFrame", "intent": "The LabelFrame widget packages a frame widget and a label into one mega widget.", "question_id": 10557}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}
{"snippet": "timedelta.resolution", "intent": "The smallest possible difference between non-equal timedelta objects, timedelta(microseconds=1).", "question_id": 2216}
{"snippet": "mh_message.remove_sequence(sequence)", "intent": "Remove `sequence` from the list of sequences that include this message .", "question_id": 5837}
{"snippet": "sys.setswitchinterval(interval)", "intent": "Set the interpreter \u2019 s thread switch `interval` ( in seconds ) .", "question_id": 9838}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "test.support.check_syntax_error(testcase, statement, errtext='', lineno=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . `errtext` is the text of the error raised by SyntaxError . If `lineno` is not None , compares to the line of the SyntaxError .", "question_id": 10235}
{"snippet": "email_policy.content_manager", "intent": "An object with at least two methods: get_content and set_content.", "question_id": 3432}
{"snippet": "dis.haslocal", "intent": "Sequence of bytecodes that access a local variable.", "question_id": 2750}
{"snippet": "signal.SIG_BLOCK", "intent": "A possible value for the how parameter to pthread_sigmask() indicating that signals are to be blocked.", "question_id": 8382}
{"snippet": "cmath.polar(x)", "intent": "Return the representation of `x` in polar coordinates .", "question_id": 1094}
{"snippet": "date_time.decode(string)", "intent": "Accept a `string` as the instance \u2019 s new time value .", "question_id": 12683}
{"snippet": "aifc.getmarkers()", "intent": "Return a list of markers in the audio file .", "question_id": 18}
{"snippet": "xml.etree.ElementTree.ProcessingInstruction(target)", "intent": "PI element factory . `target` is a string containing the PI target .", "question_id": 12448}
{"snippet": "os.sched_getaffinity(pid)", "intent": "Return the set of CPUs the process with PID `pid` ( or the current process if zero ) is restricted to .", "question_id": 7114}
{"snippet": "multiprocessing.Process()", "intent": "Process objects represent activity that is run in a separate process .", "question_id": 6165}
{"snippet": "test.support.SaveSignals", "intent": "Class to save and restore signal handlers registered by the Python signal handler.", "question_id": 10292}
{"snippet": "dis.Bytecode(x)", "intent": "Analyse the bytecode corresponding to a function , generator , asynchronous generator , coroutine , method , string of source code , or a code object ( as returned by compile ( ) ) . With arguments `x`.", "question_id": 2695}
{"snippet": "socketserver.ForkingTCPServer", "intent": "These classes are pre-defined using the mix-in classes.", "question_id": 8755}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357}
{"snippet": "Template.open(file, mode)", "intent": "Return a file-like object , open to `file` , but read from or written to by the pipeline . With arguments `mode`.", "question_id": 7433}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4505}
{"snippet": "cursor.arraysize", "intent": "Read/write attribute that controls the number of rows returned by fetchmany().", "question_id": 8851}
{"snippet": "time.tzname", "intent": "A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone.", "question_id": 10475}
{"snippet": "os.sched_yield()", "intent": "Voluntarily relinquish the CPU .", "question_id": 7112}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "mailbox.iteritems()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5734}
{"snippet": "aifc.tell()", "intent": "Return the current write position in the output file .", "question_id": 34}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "formatter.push_margin(margin)", "intent": "Increase the number of left `margin` indentations by one , associating the logical tag margin with the new indentation .", "question_id": 3830}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "xmlrpc.server.SimpleXMLRPCRequestHandler", "intent": "Create a new request handler instance.", "question_id": 12730}
{"snippet": "str.splitlines(keepends)", "intent": "Return a list of the lines in the string , breaking at line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9245}
{"snippet": "SimpleXMLRPCRequestHandler.rpc_paths", "intent": "An attribute value that must be a tuple listing valid path portions of the URL for receiving XML-RPC requests.", "question_id": 12739}
{"snippet": "os.unsetenv(key)", "intent": "Unset ( delete ) the environment variable named `key` .", "question_id": 6711}
{"snippet": "doctest.SKIP", "intent": "When specified, do not run the example at all.", "question_id": 2757}
{"snippet": "resource.RLIMIT_CPU", "intent": "The maximum amount of processor time (in seconds) that a process can use.", "question_id": 8076}
{"snippet": "test.support.temp_cwd(quiet=False)", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . If `quiet` is False and it is not possible to create or change the CWD , an error is raised .", "question_id": 10184}
{"snippet": "configparser.InterpolationSyntaxError", "intent": "Exception raised when the source text into which substitutions are made does not conform to the required syntax.", "question_id": 1599}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757}
{"snippet": "imp.get_magic()", "intent": "Return the magic string value used to recognize byte-compiled code files ( .pyc files ) .", "question_id": 4760}
{"snippet": "shlex.wordchars", "intent": "The string of characters that will accumulate into multi-character tokens.", "question_id": 8295}
{"snippet": "window.getyx()", "intent": "Return a tuple ( y , x ) of current cursor position relative to the window \u2019 s upper-left corner .", "question_id": 2063}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}
{"snippet": "os.pwritev(fd, buffers, offset)", "intent": "Write the `buffers` contents to file descriptor `fd` at a `offset` offset , leaving the file offset unchanged .", "question_id": 6789}
{"snippet": "sys.settrace(tracefunc)", "intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "question_id": 9839}
{"snippet": "turtle.reset()", "intent": "Delete the turtle \u2019 s drawings from the screen , re-center the turtle and set variables to the default values .", "question_id": 10967}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922}
{"snippet": "statistic_diff.size_diff", "intent": "Difference of total size of memory blocks in bytes between the old and the new snapshots (int): 0 if the memory blocks have been allocated in the new snapshot.", "question_id": 10888}
{"snippet": "unicodedata.digit(chr)", "intent": "Returns the digit value assigned to the character `chr` as integer .", "question_id": 11346}
{"snippet": "unicodedata.combining(chr)", "intent": "Returns the canonical combining class assigned to the character `chr` as integer .", "question_id": 11351}
{"snippet": "importlib.machinery.SourcelessFileLoader(fullname, path)", "intent": "A concrete implementation of importlib.abc.FileLoader which can import bytecode files ( i.e . With arguments `fullname`, `path`.", "question_id": 4897}
{"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757}
{"snippet": "asyncio.Task(coro, loop=None)", "intent": "A Future-like object that runs a Python coroutine . Event loops use cooperative scheduling : an event `loop` runs one Task at a time . With arguments `coro`.", "question_id": 625}
{"snippet": "turtle.listen()", "intent": "Set focus on TurtleScreen ( in order to collect key-events ) .", "question_id": 11063}
{"snippet": "pickle.HIGHEST_PROTOCOL", "intent": "An integer, the highest protocol version available.", "question_id": 7361}
{"snippet": "pool.terminate()", "intent": "Stops the worker processes immediately without completing outstanding work .", "question_id": 6357}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "test_case.assertMultiLineEqual(first, second)", "intent": "Test that the multiline string `first` is equal to the string `second` .", "question_id": 11448}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}
{"snippet": "policy.mangle_from_", "intent": "If True, lines starting with \u201cFrom \u201c in the body are escaped by putting a > in front of them.", "question_id": 3417}
{"snippet": "importlib.import_module(name, package=None)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g . If the name is specified in relative terms , then the `package` argument must be set to the name of the package which is to act as the anchor for resolving the package name ( e.g .", "question_id": 4794}
{"snippet": "bound_arguments.kwargs", "intent": "A dict of keyword arguments values.", "question_id": 5005}
{"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "NNTP.ihave(message_id, data)", "intent": "Send an IHAVE command . `message_id` is the id of the message to send to the server ( enclosed in ' < ' and ' > ' ) . The `data` parameter and the return value are the same as for post ( ) .", "question_id": 6493}
{"snippet": "html_calendar.formatyearpage(theyear, width=3)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 963}
{"snippet": "email_policy.utf8", "intent": "If False, follow RFC 5322, supporting non-ASCII characters in headers by encoding them as \u201cencoded words\u201d.", "question_id": 3429}
{"snippet": "csvreader.dialect", "intent": "A read-only description of the dialect in use by the parser.", "question_id": 1732}
{"snippet": "curses.def_prog_mode()", "intent": "Save the current terminal mode as the \u201c program \u201d mode , the mode when the running program is using curses .", "question_id": 1927}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247}
{"snippet": "queue_listener.flush()", "intent": "Ensure all logging output has been flushed .", "question_id": 5604}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211}
{"snippet": "coverage_results.write_results(coverdir=None)", "intent": "Write coverage results . `coverdir` specifies the directory into which the coverage result files will be output .", "question_id": 10728}
{"snippet": "fileinput.isfirstline()", "intent": "Returns true if the line just read is the first line of its file , otherwise returns false .", "question_id": 3796}
{"snippet": "turtle.listen()", "intent": "Set focus on TurtleScreen ( in order to collect key-events ) .", "question_id": 11063}
{"snippet": "email.headerregistry.HeaderRegistry(base_class=BaseHeader, use_default_map=True)", "intent": "This is the factory used by EmailPolicy by default . HeaderRegistry builds the class used to create a header instance dynamically , using `base_class` and a specialized class retrieved from a registry that it holds . When `use_default_map` is True ( the default ) , the standard mapping of header names to classes is copied in to the registry during initialization .", "question_id": 3180}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}
{"snippet": "datetime.isoformat()", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS", "question_id": 2306}
{"snippet": "locale.LC_ALL", "intent": "Combination of all locale settings.", "question_id": 5410}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}
{"snippet": "gnu_translations.ngettext(singular, plural, n)", "intent": "Do a plural-forms lookup of a message id . `singular` is used as the message id for purposes of lookup in the catalog , while `n` is used to determine which `plural` form to use .", "question_id": 4262}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968}
{"snippet": "window.insdelln(nlines)", "intent": "Insert `nlines` lines into the specified window above the current line .", "question_id": 2075}
{"snippet": "formatter.end_paragraph(blanklines)", "intent": "Close any open paragraphs and insert at least `blanklines` before the next paragraph .", "question_id": 3819}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "xml.sax.xmlreader.IncrementalParser", "intent": "In some cases, it is desirable not to parse an input source at once, but to feed chunks of the document as they get available.", "question_id": 12607}
{"snippet": "turtle.shapetransform()", "intent": "Set or return the current transformation matrix of the turtle shape .", "question_id": 11008}
{"snippet": "str.rfind(sub, start, end)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9226}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "dialog.text(name, x, y, width, height, attributes, text)", "intent": "Add and return a Text control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `text`.", "question_id": 6137}
{"snippet": "calendar.HTMLCalendar()", "intent": "This class can be used to generate HTML calendars .", "question_id": 956}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "gdbm.close()", "intent": "Close the gdbm database .", "question_id": 2378}
{"snippet": "str.startswith(prefix, start, end)", "intent": "Return True if string starts with the `prefix` , otherwise return False . With optional `start` , test string beginning at that position . With optional `end` , stop comparing string at that position .", "question_id": 9247}
{"snippet": "queue_listener.createLock()", "intent": "Initializes a thread lock which can be used to serialize access to underlying I/O functionality which may not be threadsafe .", "question_id": 5596}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "winreg.DisableReflectionKey(key)", "intent": "Disables registry reflection for 32-bit processes running on a 64-bit operating system . `key` is an already open key , or one of the predefined HKEY_* constants .", "question_id": 12152}
{"snippet": "os.GRND_RANDOM", "intent": "If  this  bit  is  set,  then  random bytes are drawn from the /dev/random pool instead of the /dev/urandom pool.", "question_id": 7141}
{"snippet": "base_http_request_handler.handle_expect_100()", "intent": "When a HTTP/1.1 compliant server receives an Expect : 100-continue request header it responds back with a 100 Continue followed by 200 OK headers .", "question_id": 4636}
{"snippet": "socket.sendfile(file, count=None)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 8734}
{"snippet": "stat_result.st_ctime", "intent": "Platform dependent:", "question_id": 6931}
{"snippet": "pickle.Unpickler(file, fix_imports=True)", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7399}
{"snippet": "POP3.rset()", "intent": "Remove any deletion marks for the mailbox .", "question_id": 7613}
{"snippet": "completed_process.stderr", "intent": "Captured stderr from the child process.", "question_id": 9581}
{"snippet": "InteractiveInterpreter.showsyntaxerror(filename=None)", "intent": "Display the syntax error that just occurred . If `filename` is given , it is stuffed into the exception instead of the default filename provided by Python \u2019 s parser , because it always uses ' < string > ' when reading from a string .", "question_id": 1181}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617}
{"snippet": "config_parser.sections()", "intent": "Return a list of the sections available ; the default section is not included in the list .", "question_id": 1507}
{"snippet": "FileCookieJar.save(ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4504}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484}
{"snippet": "message.get_all(name, failobj=None)", "intent": "Return a list of all the values for the field named `name` . If there are no such named headers in the message , `failobj` is returned ( defaults to None ) .", "question_id": 2975}
{"snippet": "test_suite.__iter__()", "intent": "Tests grouped by a TestSuite are always accessed by iteration .", "question_id": 11488}
{"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "turtle.filling()", "intent": "Return fillstate ( True if filling , False else ) .", "question_id": 10964}
{"snippet": "decimal.Decimal(context=None)", "intent": "Construct a new Decimal object based from `value` . The `context` precision does not affect how many digits are stored .", "question_id": 2393}
{"snippet": "ssl.OP_NO_TICKET", "intent": "Prevent client side from requesting a session ticket.", "question_id": 8944}
{"snippet": "decimal.normalize()", "intent": "Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal ( ' 0 ' ) to Decimal ( '0e0 ' ) .", "question_id": 2457}
{"snippet": "test_result.addSuccess(test)", "intent": "Called when the `test` case test succeeds .", "question_id": 11526}
{"snippet": "os.getgroups()", "intent": "Return list of supplemental group ids associated with the current process .", "question_id": 6678}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket .", "question_id": 9023}
{"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}
{"snippet": "time.asctime()", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' .", "question_id": 10430}
{"snippet": "turtle.circle(radius, extent=None, steps=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10926}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201}
{"snippet": "types.ClassMethodDescriptorType", "intent": "The type of unbound class methods of some built-in data types such as dict.__dict__['fromkeys'].", "question_id": 11195}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}
{"snippet": "tokenize.open(filename)", "intent": "Open a file in read only mode using the encoding detected by detect_encoding ( ) . With arguments `filename`.", "question_id": 10704}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "ast.NodeVisitor", "intent": "A node visitor base class that walks the abstract syntax tree and calls a visitor function for every node found.", "question_id": 159}
{"snippet": "Unpacker.unpack_float()", "intent": "Unpacks a single-precision floating point number .", "question_id": 12290}
{"snippet": "_func_ptr.errcheck", "intent": "Assign a Python function or another callable to this attribute.", "question_id": 1789}
{"snippet": "html.entities.html5", "intent": "A dictionary that maps HTML5 named character references 1 to the equivalent Unicode character(s), e.g.", "question_id": 4342}
{"snippet": "readline.parse_and_bind(string)", "intent": "Execute the init line provided in the `string` argument .", "question_id": 8015}
{"snippet": "str.isdigit()", "intent": "Return true if all characters in the string are digits and there is at least one character , false otherwise .", "question_id": 9206}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427}
{"snippet": "HTMLParser.handle_pi(data)", "intent": "Method called when a processing instruction is encountered . The `data` parameter will contain the entire processing instruction .", "question_id": 4364}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "SSLContext.load_verify_locations()", "intent": "Load a set of \u201c certification authority \u201d ( CA ) certificates used to validate other peers \u2019 certificates when verify_mode is other than CERT_NONE .", "question_id": 9003}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "SimpleQueue.put_nowait(item)", "intent": "Equivalent to put ( `item` ) , provided for compatibility with Queue.put_nowait ( ) .", "question_id": 7867}
{"snippet": "formatter.NullWriter", "intent": "A writer which only provides the interface definition; no actions are taken on any methods.", "question_id": 3853}
{"snippet": "epoll.fromfd(fd)", "intent": "Create an epoll object from a given file descriptor . With arguments `fd`.", "question_id": 8182}
{"snippet": "stream_writer.drain()", "intent": "Wait until it is appropriate to resume writing to the stream .", "question_id": 519}
{"snippet": "oss_audio_device.read(size)", "intent": "Read `size` bytes from the audio input and return them as a Python string .", "question_id": 7180}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}
{"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661}
{"snippet": "loader.exec_module(module)", "intent": "An abstract method that executes the `module` in its own namespace when a module is imported or reloaded .", "question_id": 4815}
{"snippet": "template.substitute(mapping, **kwds)", "intent": "Performs the template substitution , returning a new string . `mapping` is any dictionary-like object with keys that match the placeholders in the template . With arguments `**kwds`.", "question_id": 9526}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}
{"snippet": "simple_http_request_handler.directory", "intent": "If not specified, the directory to serve is the current working directory.", "question_id": 4663}
{"snippet": "DefaultCookiePolicy.DomainStrictNonDomain", "intent": "Cookies that did not explicitly specify a domain cookie-attribute can only be returned to a domain equal to the domain that set the cookie (eg.", "question_id": 4553}
{"snippet": "py_compile.compile(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . `invalidation_mode` should be a member of the PycInvalidationMode enum and controls how the generated bytecode cache is invalidated at runtime .", "question_id": 7826}
{"snippet": "os.RTLD_LAZY", "intent": "Flags for use with the setdlopenflags() and getdlopenflags() functions.", "question_id": 7130}
{"snippet": "test.support.import_fresh_module(name)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10242}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484}
{"snippet": "test.support.PIPE_MAX_SIZE", "intent": "A constant that is likely larger than the underlying OS pipe buffer size, to make writes blocking.", "question_id": 10124}
{"snippet": "csv.reader(csvfile, **fmtparams, dialect='excel')", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . 1 An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1681}
{"snippet": "dialog.line(name, x, y, width, height)", "intent": "Add and return a Line control . With arguments `name`, `x`, `y`, `width`, `height`.", "question_id": 6139}
{"snippet": "template.substitute(mapping, **kwds)", "intent": "Performs the template substitution , returning a new string . `mapping` is any dictionary-like object with keys that match the placeholders in the template . With arguments `**kwds`.", "question_id": 9526}
{"snippet": "trace.Trace(countcallers=0)", "intent": "Create an object to `trace` execution of a single statement or expression . `countcallers` enables call relationship tracking .", "question_id": 10710}
{"snippet": "platform.platform(aliased=0, terse=0)", "intent": "Returns a single string identifying the underlying platform with as much useful information as possible . If `aliased` is true , the function will use aliases for various platforms that report system names which differ from their common names , for example SunOS will be reported as Solaris . Setting `terse` to true causes the function to return only the absolute minimum information needed to identify the platform .", "question_id": 7471}
{"snippet": "memoryview.tobytes()", "intent": "Return the data in the buffer as a bytestring .", "question_id": 9413}
{"snippet": "time.ctime()", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time .", "question_id": 10439}
{"snippet": "resource.RUSAGE_SELF", "intent": "Pass to getrusage() to request resources consumed by the calling process, which is the sum of resources used by all threads in the process.", "question_id": 8097}
{"snippet": "statistics.variance(data)", "intent": "Return the sample variance of `data` , an iterable of at least two real-valued numbers .", "question_id": 9139}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235}
{"snippet": "ArgumentParser.parse_args(args=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 70}
{"snippet": "turtle.pen(**pendict)", "intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "question_id": 10958}
{"snippet": "os.forkpty()", "intent": "Fork a child process , using a new pseudo-terminal as the child \u2019 s controlling terminal .", "question_id": 7036}
{"snippet": "traceback.format(limit=None)", "intent": "Format the traceback as a list of lines with newlines . If `limit` is set , format the limit most recent frames if limit is positive .", "question_id": 10896}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "@typing.overload", "intent": "The @overload decorator allows describing functions and methods that support multiple different combinations of argument types.", "question_id": 11327}
{"snippet": "instance.__class__", "intent": "The class to which a class instance belongs.", "question_id": 9500}
{"snippet": "xml.sax.parse(filename_or_stream, handler)", "intent": "Create a SAX parser and use it to parse a document . The document , passed in as `filename_or_stream` , can be a filename or a file object . The `handler` parameter needs to be a SAX ContentHandler instance .", "question_id": 12593}
{"snippet": "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name)", "intent": "Create zip file at `zip_dir` and `zip_basename` with extension zip which contains the files in `script_name` .", "question_id": 10310}
{"snippet": "executor.map(func, *iterables)", "intent": "Similar to map ( `func` , `*iterables` ) except :", "question_id": 1441}
{"snippet": "inspect.getsourcefile(object)", "intent": "Return the name of the Python source file in which an `object` was defined .", "question_id": 4973}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499}
{"snippet": "HTTPConnection.connect()", "intent": "Connect to the server specified when the object was created .", "question_id": 4441}
{"snippet": "urllib.request.CacheFTPHandler", "intent": "Open FTP URLs, keeping a cache of open FTP connections to minimize delays.", "question_id": 11813}
{"snippet": "json.loads(s, **kw)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5300}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "pickler.persistent_id(obj)", "intent": "Do nothing by default . If persistent_id ( ) returns None , `obj` is pickled as usual .", "question_id": 7395}
{"snippet": "itertools.permutations(iterable)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5258}
{"snippet": "Cmd.completedefault(text, line, begidx, endidx)", "intent": "Method called to complete an input `line` when no command-specific complete_* ( ) method is available . With arguments `text`, `begidx`, `endidx`.", "question_id": 1140}
{"snippet": "os.pardir", "intent": "The constant string used by the operating system to refer to the parent directory.", "question_id": 7122}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "Repr.maxdict", "intent": "Limits on the number of entries represented for the named object type.", "question_id": 8056}
{"snippet": "xml.dom.NamespaceErr", "intent": "If an attempt is made to change any object in a way that is not permitted with regard to the Namespaces in XML recommendation, this exception is raised.", "question_id": 12389}
{"snippet": "datetime.strptime(date_string, format)", "intent": "Return a datetime corresponding to `date_string` , parsed according to `format` .", "question_id": 2268}
{"snippet": "simple_http_request_handler.do_HEAD()", "intent": "This method serves the 'HEAD ' request type : it sends the headers it would send for the equivalent GET request .", "question_id": 4664}
{"snippet": "parser.parse(fp)", "intent": "Read all the data from the text-mode file-like object `fp` , parse the resulting text , and return the root message object .", "question_id": 3388}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}
{"snippet": "queue.join_thread()", "intent": "Join the background thread .", "question_id": 6209}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "imp.C_EXTENSION", "intent": "The module was found as dynamically loadable shared library.", "question_id": 4776}
{"snippet": "set & other & ...", "intent": "Return a new set with elements common to the set and all others.", "question_id": 9448}
{"snippet": "unittest.TextTestRunner()", "intent": "A basic test runner implementation that outputs results to a `stream` .", "question_id": 11533}
{"snippet": "tempfile.mkstemp(suffix=None)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix .", "question_id": 10072}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "FileCookieJar.save()", "intent": "Save cookies to a file .", "question_id": 4498}
{"snippet": "NNTP.xhdr(hdr, str)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search .", "question_id": 6497}
{"snippet": "ur_lopener.retrieve(url, reporthook=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . If `reporthook` is given , it must be a function accepting three numeric parameters : A chunk number , the maximum size chunks are read in and the total size of the download ( -1 if unknown ) .", "question_id": 11898}
{"snippet": "py_compile.compile(file, dfile=None)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . If `dfile` is specified , it is used as the name of the source file in error messages when instead of file .", "question_id": 7823}
{"snippet": "imp.NullImporter(path_string)", "intent": "The NullImporter type is a PEP 302 import hook that handles non-directory path strings by failing to find any modules . With arguments `path_string`.", "question_id": 4780}
{"snippet": "contextvars.Context", "intent": "A mapping of ContextVars to their values.", "question_id": 1649}
{"snippet": "async_exit_stack.aclose()", "intent": "Similar to close ( ) but properly handles awaitables .", "question_id": 1636}
{"snippet": "maildir_message.add_flag(flag)", "intent": "Set the `flag` ( s ) specified by flag without changing other flags .", "question_id": 5817}
{"snippet": "sync_manager.list(sequence)", "intent": "Create a shared list object and return a proxy for it . With arguments `sequence`.", "question_id": 6317}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466}
{"snippet": "divmod(a, b)", "intent": "Take two ( non complex ) numbers as arguments and return `a` pair of numbers consisting of their quotient and remainder when using integer division . For integers , the result is the same as ( a // `b` , a % b ) .", "question_id": 4009}
{"snippet": "winsound.SND_PURGE", "intent": "Stop playing all instances of the specified sound.", "question_id": 12200}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971}
{"snippet": "urllib.request.urlcleanup()", "intent": "Cleans up temporary files that may have been left behind by previous calls to urlretrieve ( ) .", "question_id": 11889}
{"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}
{"snippet": "errno.EREMOTEIO", "intent": "Remote I/O error", "question_id": 3626}
{"snippet": "time.ctime(secs)", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10438}
{"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}
{"snippet": "turtle.stamp()", "intent": "Stamp a copy of the turtle shape onto the canvas at the current turtle position .", "question_id": 10929}
{"snippet": "loop.remove_signal_handler(sig)", "intent": "Remove the handler for the `sig` signal .", "question_id": 304}
{"snippet": "writer.send_label_data(data)", "intent": "Set `data` to the left of the current left margin , if possible .", "question_id": 3852}
{"snippet": "os.path.commonprefix(list)", "intent": "Return the longest path prefix ( taken character-by-character ) that is a prefix of all paths in `list` .", "question_id": 7145}
{"snippet": "json.JSONEncoder(sort_keys=False)", "intent": "Extensible JSON encoder for Python data structures . If `sort_keys` is true ( default : False ) , then the output of dictionaries will be sorted by key ; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis .", "question_id": 5327}
{"snippet": "html_calendar.formatyear(theyear, width=3)", "intent": "Return a year \u2019 s calendar as an HTML table . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 961}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "locale.NOEXPR", "intent": "Get a regular expression that can be used with the regex(3) function to recognize a negative response to a yes/no question.", "question_id": 5366}
{"snippet": "bdb.checkfuncname(b, frame)", "intent": "Check whether we should break here , depending on the way the breakpoint `b` was set . If it was set via line number , it checks if b.line is the same as the one in the `frame` also passed as argument .", "question_id": 817}
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949}
{"snippet": "parser.compilest(st)", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7222}
{"snippet": "loop.sendfile(transport, file)", "intent": "Send a `file` over a `transport` .", "question_id": 256}
{"snippet": "pool.apply(func, args, kwds)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6332}
{"snippet": "tkinter.tix.ExFileSelectBox", "intent": "The ExFileSelectBox widget is usually embedded in a tixExFileSelectDialog widget.", "question_id": 10567}
{"snippet": "sys._getframe()", "intent": "Return a frame object from the call stack .", "question_id": 9806}
{"snippet": "json_encoder.msg", "intent": "The unformatted error message.", "question_id": 5336}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 452}
{"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}
{"snippet": "cursor.connection", "intent": "This read-only attribute provides the SQLite database Connection used by the Cursor object.", "question_id": 8853}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347}
{"snippet": "html_calendar.formatyearpage(theyear, width=3)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 963}
{"snippet": "ctypes.c_longdouble", "intent": "Represents the C long double datatype.", "question_id": 1859}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543}
{"snippet": "SSLContext.wrap_socket(sock)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) .", "question_id": 9022}
{"snippet": "scheduler.run()", "intent": "Run all scheduled events .", "question_id": 8128}
{"snippet": "datetime.utctimetuple()", "intent": "If datetime instance d is naive , this is the same as d.timetuple ( ) except that tm_isdst is forced to 0 regardless of what d.dst ( ) returns .", "question_id": 2300}
{"snippet": "statistics.pvariance(data)", "intent": "Return the population variance of `data` , a non-empty iterable of real-valued numbers .", "question_id": 9135}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175}
{"snippet": "queue.join_thread()", "intent": "Join the background thread .", "question_id": 6209}
{"snippet": "test.support.check_syntax_error(testcase, statement, lineno=None, offset=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `lineno` is not None , compares to the line of the SyntaxError . If `offset` is not None , compares to the offset of the SyntaxError .", "question_id": 10237}
{"snippet": "scheduler.enter(delay, priority, action)", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`.", "question_id": 8122}
{"snippet": "stringprep.in_table_c5(code)", "intent": "Determine whether `code` is in tableC.5 ( Surrogate codes ) .", "question_id": 9543}
{"snippet": "turtle.pensize()", "intent": "Set the line thickness to `width` or return it .", "question_id": 10954}
{"snippet": "xml.parsers.expat.ParserCreate(namespace_separator=None)", "intent": "Creates and returns a new xmlparser object . Expat can optionally do XML namespace processing for you , enabled by providing a value for `namespace_separator` .", "question_id": 7730}
{"snippet": "startupinfo.dwFlags", "intent": "A bit field that determines whether certain STARTUPINFO attributes are used when the process creates a window.", "question_id": 9635}
{"snippet": "file_finder.find_spec(fullname)", "intent": "Attempt to find the spec to handle `fullname` within path .", "question_id": 4884}
{"snippet": "zlib.compressobj()", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once .", "question_id": 12907}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "base_http_request_handler.rfile", "intent": "An io.BufferedIOBase input stream, ready to read from the start of the optional input data.", "question_id": 4625}
{"snippet": "ssl.SSLCertVerificationError", "intent": "A subclass of SSLError raised when certificate validation has failed.", "question_id": 8881}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508}
{"snippet": "mh_message.set_sequences(sequences)", "intent": "Set the list of `sequences` that include this message .", "question_id": 5835}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711}
{"snippet": "os.setpgid(pid, pgrp)", "intent": "Call the system call setpgid ( ) to set the process group id of the process with id `pid` to the process group with id `pgrp` .", "question_id": 6698}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "xml.sax.parse(filename_or_stream, handler)", "intent": "Create a SAX parser and use it to parse a document . The document , passed in as `filename_or_stream` , can be a filename or a file object . The `handler` parameter needs to be a SAX ContentHandler instance .", "question_id": 12593}
{"snippet": "gettext.GNUTranslations", "intent": "The following methods are overridden from the base class implementation:", "question_id": 4260}
{"snippet": "ZipInfo.from_file(filename)", "intent": "Construct a ZipInfo instance for a file on the filesystem , in preparation for adding it to a zip file . `filename` should be the path to a file or directory on the filesystem .", "question_id": 12860}
{"snippet": "turtle.Vec2D(x, y)", "intent": "A two-dimensional vector class , used as a helper class for implementing turtle graphics . With arguments `x`, `y`.", "question_id": 11167}
{"snippet": "test_result.tb_locals", "intent": "If set to true then local variables will be shown in tracebacks.", "question_id": 11517}
{"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}
{"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529}
{"snippet": "decimal.ROUND_HALF_EVEN", "intent": "Round to nearest with ties going to nearest even integer.", "question_id": 2581}
{"snippet": "importlib.machinery.WindowsRegistryFinder", "intent": "Finder for modules declared in the Windows registry.", "question_id": 4873}
{"snippet": "curses.error", "intent": "Exception raised when a curses library function returns an error.", "question_id": 1919}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370}
{"snippet": "sequence_matcher.quick_ratio()", "intent": "Return an upper bound on ratio ( ) relatively quickly .", "question_id": 2688}
{"snippet": "fileinput.filelineno()", "intent": "Return the line number in the current file .", "question_id": 3795}
{"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}
{"snippet": "errno.ENOTUNIQ", "intent": "Name not unique on network", "question_id": 3581}
{"snippet": "SubprocessTransport.kill()", "intent": "Kill the subprocess .", "question_id": 422}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122}
{"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363}
{"snippet": "os.getgid()", "intent": "Return the real group id of the current process .", "question_id": 6676}
{"snippet": "shlex.escapedquotes", "intent": "Characters in quotes that will interpret escape characters defined in escape.", "question_id": 8299}
{"snippet": "Telnet.open(host)", "intent": "Connect to a `host` .", "question_id": 10020}
{"snippet": "ssl.OP_NO_COMPRESSION", "intent": "Disable compression on the SSL channel.", "question_id": 8942}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779}
{"snippet": "tixCommand.tix_getbitmap(name)", "intent": "Locates a bitmap file of the `name` name.xpm or name in one of the bitmap directories ( see the tix_addbitmapdir ( ) method ) .", "question_id": 10583}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800}
{"snippet": "system_random.pattern", "intent": "The regular expression pattern.", "question_id": 7966}
{"snippet": "email.utils.localtime(dt=None)", "intent": "Return local time as an aware datetime object . Otherwise `dt` argument should be a datetime instance , and it is converted to the local time zone according to the system time zone database .", "question_id": 3453}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730}
{"snippet": "asyncio.Queue()", "intent": "A first in , first out ( FIFO ) queue .", "question_id": 445}
{"snippet": "resource.getrlimit(resource)", "intent": "Returns a tuple ( soft , hard ) with the current soft and hard limits of `resource` .", "question_id": 8071}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201}
{"snippet": "html.entities.codepoint2name", "intent": "A dictionary that maps Unicode code points to HTML entity names.", "question_id": 4345}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this turtle .", "question_id": 11019}
{"snippet": "SSLSocket.compression()", "intent": "Return the compression algorithm being used as a string , or None if the connection isn \u2019 t compressed .", "question_id": 8981}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "zlib.adler32(data)", "intent": "Computes an Adler-32 checksum of `data` .", "question_id": 12894}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "compileall.compile_dir(dir, legacy=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1415}
{"snippet": "tkinter.tix.TList", "intent": "The TList widget can be used to display data in a tabular format.", "question_id": 10573}
{"snippet": "Template.reset()", "intent": "Restore a pipeline template to its initial state .", "question_id": 7428}
{"snippet": "json.load(fp, **kw, parse_float=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_float` , if specified , will be called with the string of every JSON float to be decoded . With arguments `**kw`.", "question_id": 5293}
{"snippet": "stat.UF_HIDDEN", "intent": "The file should not be displayed in a GUI (Mac OS X 10.5+).", "question_id": 9119}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081}
{"snippet": "errno.ELIBMAX", "intent": "Attempting to link in too many shared libraries", "question_id": 3587}
{"snippet": "collections.Counter()", "intent": "A Counter is a dict subclass for counting hashable objects .", "question_id": 1341}
{"snippet": "sqlite3.register_converter(typename, callable)", "intent": "Registers a `callable` to convert a bytestring from the database into a custom Python type . The callable will be invoked for all database values that are of the type `typename` .", "question_id": 8799}
{"snippet": "asyncio.BoundedSemaphore()", "intent": "A bounded semaphore object .", "question_id": 588}
{"snippet": "statistics.median(data)", "intent": "Return the median ( middle value ) of numeric `data` , using the common \u201c mean of middle two \u201d method .", "question_id": 9127}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892}
{"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971}
{"snippet": "errno.EALREADY", "intent": "Operation already in progress", "question_id": 3619}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "Unpacker.unpack_double()", "intent": "Unpacks a double-precision floating point number , similarly to unpack_float ( ) .", "question_id": 12291}
{"snippet": "zipfile.ZipFile(file, mode='r')", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file .", "question_id": 12793}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "tracemalloc.get_traceback_limit()", "intent": "Get the maximum number of frames stored in the traceback of a trace .", "question_id": 10843}
{"snippet": "statistics.median(data)", "intent": "Return the median ( middle value ) of numeric `data` , using the common \u201c mean of middle two \u201d method .", "question_id": 9127}
{"snippet": "threading.Condition()", "intent": "This class implements condition variable objects .", "question_id": 10386}
{"snippet": "os.makedirs(name)", "intent": "Recursive directory creation function . With arguments `name`.", "question_id": 6866}
{"snippet": "loop.shutdown_asyncgens()", "intent": "Schedule all currently open asynchronous generator objects to close with an aclose ( ) call .", "question_id": 188}
{"snippet": "crypt.METHOD_MD5", "intent": "Another Modular Crypt Format method with 8 character salt and 22 character hash based on the MD5 hash function.", "question_id": 1671}
{"snippet": "os.chroot(path)", "intent": "Change the root directory of the current process to `path` .", "question_id": 6843}
{"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287}
{"snippet": "stat.S_IRWXG", "intent": "Mask for group permissions.", "question_id": 9101}
{"snippet": "urllib.parse.quote_plus(string, encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `encoding`.", "question_id": 11715}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "Repr.maxstring", "intent": "Limit on the number of characters in the representation of the string.", "question_id": 8064}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "compileall.compile_path(optimize=-1)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `optimize`.", "question_id": 1435}
{"snippet": "email.charset.add_charset(charset, output_charset=None)", "intent": "Add character properties to the global registry . `charset` is the input character set , and must be the canonical name of a character set . Optional `output_charset` is the character set that the output should be in .", "question_id": 2929}
{"snippet": "socket.getsockname()", "intent": "Return the socket \u2019 s own address .", "question_id": 8683}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}
{"snippet": "chunk.read()", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1090}
{"snippet": "os.sched_getaffinity(pid)", "intent": "Return the set of CPUs the process with PID `pid` ( or the current process if zero ) is restricted to .", "question_id": 7114}
{"snippet": "pickle.Pickler(file, protocol=None, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . The optional `protocol` argument , an integer , tells the pickler to use the given protocol ; supported protocols are 0 to HIGHEST_PROTOCOL . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7393}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745}
{"snippet": "hash.hexdigest()", "intent": "Like digest ( ) except the digest is returned as a string object of double length , containing only hexadecimal digits .", "question_id": 4306}
{"snippet": "smtplib.SMTP(source_address=None)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `source_address` parameter allows binding to some specific source address in a machine with multiple network interfaces , and/or to some specific source TCP port .", "question_id": 8462}
{"snippet": "multiprocessing.current_process()", "intent": "Return the Process object corresponding to the current process .", "question_id": 6221}
{"snippet": "curses.isendwin()", "intent": "Return True if endwin ( ) has been called ( that is , the curses library has been deinitialized ) .", "question_id": 1949}
{"snippet": "ctypes.pythonapi", "intent": "An instance of PyDLL that exposes Python C API functions as attributes.", "question_id": 1785}
{"snippet": "email_message.get_charsets(failobj=None)", "intent": "Return a list containing the character set names in the message . If the subpart has no Content-Type header , no charset parameter , or is not of the text main MIME type , then that item in the returned list will be `failobj` .", "question_id": 3282}
{"snippet": "base_handler.traceback_limit", "intent": "The maximum number of frames to include in tracebacks output by the default log_exception() method.", "question_id": 12261}
{"snippet": "module_type.__package__", "intent": "Which package a module belongs to.", "question_id": 11201}
{"snippet": "definition.__name__", "intent": "The name of the class, function, method, descriptor, or generator instance.", "question_id": 9502}
{"snippet": "audioop.minmax(fragment, width)", "intent": "Return a tuple consisting of the minimum and maximum values of all samples in the sound `fragment` . With arguments `width`.", "question_id": 698}
{"snippet": "style.theme_create(themename)", "intent": "Create a new theme . It is an error if `themename` already exists .", "question_id": 10686}
{"snippet": "context.minus(x)", "intent": "Minus corresponds to the unary prefix minus operator in Python . With arguments `x`.", "question_id": 2553}
{"snippet": "HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)", "intent": "Return a Request or None in response to a redirect . If a redirection should take place , return a new Request to allow http_error_30* ( ) to perform the redirect to `newurl` . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11850}
{"snippet": "gdbm.firstkey()", "intent": "It \u2019 s possible to loop over every key in the database using this method and the nextkey ( ) method .", "question_id": 2374}
{"snippet": "window.cursyncup()", "intent": "Update the current cursor position of all the ancestors of the window to reflect the current cursor position of the window .", "question_id": 2038}
{"snippet": "datetime.replace(day=self.day)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2287}
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221}
{"snippet": "window.standend()", "intent": "Turn off the standout attribute .", "question_id": 2115}
{"snippet": "window.getparyx()", "intent": "Return the beginning coordinates of this window relative to its parent window as a tuple ( y , x ) .", "question_id": 2058}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "itertools.product(*iterables)", "intent": "Cartesian product of input iterables . With arguments `*iterables`.", "question_id": 5260}
{"snippet": "types.ClassMethodDescriptorType", "intent": "The type of unbound class methods of some built-in data types such as dict.__dict__['fromkeys'].", "question_id": 11195}
{"snippet": "tracemalloc.start()", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators .", "question_id": 10847}
{"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103}
{"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157}
{"snippet": "unittest.TestSuite()", "intent": "This class represents an aggregation of individual test cases and test suites .", "question_id": 11481}
{"snippet": "class.mro()", "intent": "This method can be overridden by a metaclass to customize the method resolution order for its instances .", "question_id": 9505}
{"snippet": "address_header.groups", "intent": "A tuple of Group objects encoding the addresses and groups found in the header value.", "question_id": 3159}
{"snippet": "context.subtract(x, y)", "intent": "Return the difference between `x` and `y` .", "question_id": 2572}
{"snippet": "Template.clone()", "intent": "Return a new , equivalent , pipeline template .", "question_id": 7429}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716}
{"snippet": "curses.start_color()", "intent": "Must be called if the programmer wants to use colors , and before any other color manipulation routine is called .", "question_id": 1983}
{"snippet": "threading.main_thread()", "intent": "Return the main Thread object .", "question_id": 10345}
{"snippet": "window.hline(ch, n)", "intent": "Display a horizontal line starting at ( y , x ) with length `n` consisting of the character `ch` .", "question_id": 2064}
{"snippet": "ArgumentParser.print_usage(file=None)", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line . If `file` is None , sys.stdout is assumed .", "question_id": 104}
{"snippet": "dis.haslocal", "intent": "Sequence of bytecodes that access a local variable.", "question_id": 2750}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}
{"snippet": "doctest.DocTestRunner(checker=None, optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `checker` specifies the OutputChecker object ( or drop-in replacement ) that should be used to compare the expected outputs to the actual outputs of doctest examples . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2866}
{"snippet": "errno.EROFS", "intent": "Read-only file system", "question_id": 3535}
{"snippet": "test.support.check_syntax_error(testcase, statement)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "question_id": 10231}
{"snippet": "connection.set_progress_handler(handler, n)", "intent": "This routine registers a callback . If you want to clear any previously installed progress `handler` , call the method with None for handler . The callback is invoked for every `n` instructions of the SQLite virtual machine .", "question_id": 8821}
{"snippet": "netrc.hosts", "intent": "Dictionary mapping host names to (login, account, password) tuples.", "question_id": 6389}
{"snippet": "symbol.is_imported()", "intent": "Return True if the symbol is created from an import statement .", "question_id": 9756}
{"snippet": "decimal.Decimal(context=None)", "intent": "Construct a new Decimal object based from `value` . The `context` precision does not affect how many digits are stored .", "question_id": 2393}
{"snippet": "base_handler.log_exception(exc_info)", "intent": "Log the `exc_info` tuple in the server log .", "question_id": 12260}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "zlib.crc32(data)", "intent": "Computes a CRC ( Cyclic Redundancy Check ) checksum of `data` .", "question_id": 12918}
{"snippet": "concurrent.futures.BrokenExecutor", "intent": "Derived from RuntimeError, this exception class is raised when an executor is broken for some reason, and cannot be used to submit or execute new tasks.", "question_id": 1488}
{"snippet": "urllib.parse.SplitResult(scheme, netloc, path, query, fragment)", "intent": "Concrete class for urlsplit ( ) results containing str data . With arguments `scheme`, `netloc`, `path`, `query`, `fragment`.", "question_id": 11701}
{"snippet": "loop.time()", "intent": "Return the current time , as a float value , according to the event loop \u2019 s internal monotonic clock .", "question_id": 197}
{"snippet": "curses.def_shell_mode()", "intent": "Save the current terminal mode as the \u201c shell \u201d mode , the mode when the running program is not using curses .", "question_id": 1928}
{"snippet": "multiprocessing.Process()", "intent": "Process objects represent activity that is run in a separate process .", "question_id": 6165}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds)", "intent": "Run the `cmd` shell command . With arguments `**kwds`.", "question_id": 533}
{"snippet": "faulthandler.enable(file=sys.stderr)", "intent": "Enable the fault handler : install handlers for the SIGSEGV , SIGFPE , SIGABRT , SIGBUS and SIGILL signals to dump the Python traceback . The `file` must be kept open until the fault handler is disabled : see issue with file descriptors .", "question_id": 3717}
{"snippet": "binascii.crc32(data, value)", "intent": "Compute CRC-32 , the 32-bit checksum of `data` , starting with an initial CRC of `value` .", "question_id": 841}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "argparse.Namespace", "intent": "Simple class used by default by parse_args() to create an object holding attributes and return it.", "question_id": 73}
{"snippet": "NNTP.ihave(message_id, data)", "intent": "Send an IHAVE command . `message_id` is the id of the message to send to the server ( enclosed in ' < ' and ' > ' ) . The `data` parameter and the return value are the same as for post ( ) .", "question_id": 6493}
{"snippet": "FTP.ntransfercmd(cmd)", "intent": "Like transfercmd ( ) , but returns a tuple of the data connection and the expected size of the data . `cmd` and `rest` means the same thing as in transfercmd ( ) .", "question_id": 3945}
{"snippet": "zipfile.LargeZipFile", "intent": "The error raised when a ZIP file would require ZIP64 functionality but that has not been enabled.", "question_id": 12780}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773}
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "Popen.send_signal(signal)", "intent": "Sends the `signal` signal to the child .", "question_id": 9616}
{"snippet": "ZipInfo.compress_size", "intent": "Size of the compressed data.", "question_id": 12878}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "incremental_encoder.getstate()", "intent": "Return the current state of the encoder which must be an integer .", "question_id": 1270}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140}
{"snippet": "re.fullmatch(pattern, string, flags=0)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7942}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "env_builder.create(env_dir)", "intent": "Create a virtual environment by specifying the target directory ( absolute or relative to the current directory ) which is to contain the virtual environment . With arguments `env_dir`.", "question_id": 11982}
{"snippet": "asyncio.as_completed(aws)", "intent": "Run awaitable objects in the `aws` set concurrently .", "question_id": 615}
{"snippet": "decimal.Decimal(context=None)", "intent": "Construct a new Decimal object based from `value` . The `context` precision does not affect how many digits are stored .", "question_id": 2393}
{"snippet": "mimetypes.encodings_map", "intent": "Dictionary mapping filename extensions to encoding types.", "question_id": 5953}
{"snippet": "calendar.TextCalendar()", "intent": "This class can be used to generate plain text calendars .", "question_id": 926}
{"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}
{"snippet": "pickle.Pickler(file)", "intent": "This takes a binary `file` for writing a pickle data stream .", "question_id": 7390}
{"snippet": "struct.unpack(buffer)", "intent": "Identical to the unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must equal size .", "question_id": 9561}
{"snippet": "turtle.Screen", "intent": "Subclass of TurtleScreen, with four methods added.", "question_id": 11162}
{"snippet": "audioop.minmax(fragment, width)", "intent": "Return a tuple consisting of the minimum and maximum values of all samples in the sound `fragment` . With arguments `width`.", "question_id": 698}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "difflib.restore(sequence, which)", "intent": "Return one of the two sequences that generated a delta . Given a `sequence` produced by Differ.compare ( ) or ndiff ( ) , extract lines originating from file 1 or 2 ( parameter `which` ) , stripping off line prefixes .", "question_id": 2646}
{"snippet": "statistics.mean(data)", "intent": "Return the sample arithmetic mean of `data` which can be a sequence or iterator .", "question_id": 9125}
{"snippet": "xmlrpc.client.loads(data, use_datetime=False)", "intent": "Convert an XML-RPC request or response into Python objects , a ( params , methodname ) . The `use_builtin_types` flag can be used to cause date/time values to be presented as datetime.datetime objects and binary `data` to be presented as bytes objects ; this flag is false by default . The obsolete `use_datetime` flag is similar to use_builtin_types but it applies only to date/time values .", "question_id": 12709}
{"snippet": "inspect.Signature(parameters=None)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection .", "question_id": 4980}
{"snippet": "cgi.print_environ_usage()", "intent": "Print a list of useful ( used by CGI ) environment variables in HTML .", "question_id": 1056}
{"snippet": "urllib.parse.parse_qs(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11669}
{"snippet": "datetime.date()", "intent": "Return date object with same year , month and day .", "question_id": 2281}
{"snippet": "lzma.LZMADecompressor(format=FORMAT_AUTO, memlimit=None)", "intent": "Create a decompressor object , which can be used to decompress data incrementally . The `format` argument specifies the container format that should be used . The `memlimit` argument specifies a limit ( in bytes ) on the amount of memory that the decompressor can use .", "question_id": 5694}
{"snippet": "subprocess.DETACHED_PROCESS", "intent": "A Popen creationflags parameter to specify that a new process will not inherit its parent\u2019s console.", "question_id": 9656}
{"snippet": "email.headerregistry.AddressHeader", "intent": "Address headers are one of the most complex structured header types.", "question_id": 3158}
{"snippet": "http.server.ThreadingHTTPServer(server_address, RequestHandlerClass)", "intent": "This class is identical to HTTPServer but uses threads to handle requests by using the ThreadingMixIn . With arguments `server_address`, `RequestHandlerClass`.", "question_id": 4615}
{"snippet": "connection.execute(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8811}
{"snippet": "InteractiveConsole.interact(banner=None)", "intent": "Closely emulate the interactive Python console . The optional `banner` argument specify the banner to print before the first interaction ; by default it prints a banner similar to the one printed by the standard Python interpreter , followed by the class name of the console object in parentheses ( so as not to confuse this with the real interpreter \u2013 since it \u2019 s so close !", "question_id": 1185}
{"snippet": "tkinter.tix.LabelEntry", "intent": "The LabelEntry widget packages an entry widget and a label into one mega widget.", "question_id": 10556}
{"snippet": "socket.AF_VSOCK", "intent": "Constants for Linux host/guest communication.", "question_id": 8602}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "errno.ENAMETOOLONG", "intent": "File name too long", "question_id": 3541}
{"snippet": "winsound.SND_MEMORY", "intent": "The sound parameter to PlaySound() is a memory image of a WAV file, as a bytes-like object.", "question_id": 12199}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800}
{"snippet": "charset.__eq__(other)", "intent": "This method allows you to compare two Charset instances for equality . With arguments `other`.", "question_id": 2924}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "ctypes.CDLL(name)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`.", "question_id": 1740}
{"snippet": "stringprep.in_table_c4(code)", "intent": "Determine whether `code` is in tableC.4 ( Non-character code points ) .", "question_id": 9542}
{"snippet": "base_server.socket", "intent": "The socket object on which the server will listen for incoming requests.", "question_id": 8770}
{"snippet": "locale.LC_NUMERIC", "intent": "Locale category for formatting numbers.", "question_id": 5409}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711}
{"snippet": "os.path.relpath(path)", "intent": "Return a relative filepath to `path` either from the current directory or from an optional `start` directory .", "question_id": 7164}
{"snippet": "formatter.check_unused_args(used_args, args, kwargs)", "intent": "Implement checking for unused arguments if desired . The arguments to this function is the set of all argument keys that were actually referred to in the format string ( integers for positional arguments , and strings for named arguments ) , and a reference to the `args` and `kwargs` that was passed to vformat . With arguments `used_args`.", "question_id": 9522}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "timedelta.min", "intent": "The most negative timedelta object, timedelta(-999999999).", "question_id": 2214}
{"snippet": "str.expandtabs()", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size .", "question_id": 9192}
{"snippet": "Path.is_dir()", "intent": "Return True if the path points to a directory ( or a symbolic link pointing to a directory ) , False if it points to another kind of file .", "question_id": 7273}
{"snippet": "turtle.colormode()", "intent": "Return the colormode or set it to 1.0 or 255 .", "question_id": 11094}
{"snippet": "window.instr(n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at y , x if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2085}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}
{"snippet": "tkinter.tix.Form", "intent": "The Form geometry manager based on attachment rules for all Tk widgets.", "question_id": 10578}
{"snippet": "Node.hasChildNodes()", "intent": "Returns true if the node has any child nodes .", "question_id": 12328}
{"snippet": "statistics.mean(data)", "intent": "Return the sample arithmetic mean of `data` which can be a sequence or iterator .", "question_id": 9125}
{"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103}
{"snippet": "email.message_from_string(s)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) .", "question_id": 3404}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779}
{"snippet": "types.MethodDescriptorType", "intent": "The type of methods of some built-in data types such as str.join().", "question_id": 11194}
{"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}
{"snippet": "asyncio.run_coroutine_threadsafe(coro, loop)", "intent": "Submit a coroutine to the given event `loop` . With arguments `coro`.", "question_id": 619}
{"snippet": "calendar.LocaleTextCalendar()", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 977}
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760}
{"snippet": "shutil.get_unpack_formats()", "intent": "Return a list of all registered formats for unpacking .", "question_id": 8370}
{"snippet": "window.insch(ch, attr)", "intent": "Paint character `ch` at ( y , x ) with attributes `attr` , moving the line from position x right by one character .", "question_id": 2071}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831}
{"snippet": "uuid.UUID(is_safe=SafeUUID.unknown)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . With arguments `is_safe`.", "question_id": 11944}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "SSLContext.set_ecdh_curve(curve_name)", "intent": "Set the curve name for Elliptic Curve-based Diffie-Hellman ( ECDH ) key exchange . The `curve_name` parameter should be a string describing a well-known elliptic curve , for example prime256v1 for a widely supported curve .", "question_id": 9021}
{"snippet": "xmlrpc.client.dumps(params, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12702}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "i_pv4_network.compare_networks(other)", "intent": "Compare this network to `other` .", "question_id": 5218}
{"snippet": "curses.resetty()", "intent": "Restore the state of the terminal modes to what it was at the last call to savetty ( ) .", "question_id": 1974}
{"snippet": "readline.read_init_file()", "intent": "Execute a readline initialization file .", "question_id": 8017}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "output_checker.check_output(want, got, optionflags)", "intent": "Return True iff the actual output from an example ( `got` ) matches the expected output ( `want` ) . With arguments `optionflags`.", "question_id": 2884}
{"snippet": "tracemalloc.take_snapshot()", "intent": "Take a snapshot of traces of memory blocks allocated by Python .", "question_id": 10850}
{"snippet": "urllib.request.HTTPErrorProcessor", "intent": "Process HTTP error responses.", "question_id": 11815}
{"snippet": "window.immedok(flag)", "intent": "If `flag` is True , any change in the window image automatically causes the window to be refreshed ; you no longer have to call refresh ( ) yourself .", "question_id": 2068}
{"snippet": "chain_map.parents", "intent": "Property returning a new ChainMap containing all of the maps in the current instance except the first one.", "question_id": 1339}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "statistics.stdev(data)", "intent": "Return the sample standard deviation ( the square root of the sample variance ) . With arguments `data`.", "question_id": 9137}
{"snippet": "unittest.main(verbosity=1)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . You can run tests with more detailed information by passing in the `verbosity` argument :", "question_id": 11552}
{"snippet": "stream_reader.readline(size, keepends)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method . If `keepends` is false line-endings will be stripped from the lines returned .", "question_id": 1290}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "random.expovariate(lambd)", "intent": "Exponential distribution . `lambd` is 1.0 divided by the desired mean .", "question_id": 7910}
{"snippet": "ctypes.create_string_buffer(init_or_size)", "intent": "This function creates a mutable character buffer . `init_or_size` must be an integer which specifies the `size` of the array , or a bytes object which will be used to initialize the array items .", "question_id": 1813}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}
{"snippet": "importlib.abc.MetaPathFinder", "intent": "An abstract base class representing a meta path finder.", "question_id": 4802}
{"snippet": "signal.CTRL_C_EVENT", "intent": "The signal corresponding to the Ctrl+C keystroke event.", "question_id": 8376}
{"snippet": "tempfile.gettempprefix()", "intent": "Return the filename prefix used to create temporary files .", "question_id": 10091}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "time.ctime()", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time .", "question_id": 10439}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196}
{"snippet": "binascii.a2b_hqx(string)", "intent": "Convert binhex4 formatted ASCII data to binary , without doing RLE-decompression . The `string` should contain a complete number of binary bytes , or ( in case of the last portion of the binhex4 data ) have the remaining bits zero .", "question_id": 836}
{"snippet": "base_request_handler.handle()", "intent": "This function must do all the work required to service a request .", "question_id": 8785}
{"snippet": "zipfile.ZIP_BZIP2", "intent": "The numeric constant for the BZIP2 compression method.", "question_id": 12790}
{"snippet": "test.support.SaveSignals", "intent": "Class to save and restore signal handlers registered by the Python signal handler.", "question_id": 10292}
{"snippet": "hmac.new(key)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key .", "question_id": 4329}
{"snippet": "html_calendar.cssclasses_weekday_head", "intent": "A list of CSS classes used for weekday names in the header row.", "question_id": 972}
{"snippet": "asyncio.new_event_loop()", "intent": "Create a new event loop object .", "question_id": 181}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826}
{"snippet": "process.authkey", "intent": "The process\u2019s authentication key (a byte string).", "question_id": 6184}
{"snippet": "file_finder.path", "intent": "The path the finder will search in.", "question_id": 4883}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "abstract_event_loop_policy.get_child_watcher()", "intent": "Get a child process watcher object .", "question_id": 378}
{"snippet": "base_request_handler.finish()", "intent": "Called after the handle ( ) method to perform any clean-up actions required .", "question_id": 8786}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "importlib.abc.MetaPathFinder", "intent": "An abstract base class representing a meta path finder.", "question_id": 4802}
{"snippet": "os.rmdir(path)", "intent": "Remove ( delete ) the directory `path` .", "question_id": 6901}
{"snippet": "ftplib.error_reply", "intent": "Exception raised when an unexpected reply is received from the server.", "question_id": 3898}
{"snippet": "linecache.getline(filename, lineno, module_globals=None)", "intent": "Get line `lineno` from file named `filename` . If a file named filename is not found , the function will look for it in the module search path , sys.path , after first checking for a PEP 302 __loader__ in `module_globals` , in case the module was imported from a zipfile or other non-filesystem import source .", "question_id": 5344}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "question_id": 1299}
{"snippet": "logging.getLevelName(level)", "intent": "Returns the textual representation of logging `level` level .", "question_id": 5647}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "socket.sendmsg(buffers)", "intent": "Send normal and ancillary data to the socket , gathering the non-ancillary data from a series of `buffers` and concatenating it into a single message .", "question_id": 8726}
{"snippet": "select.select(rlist, wlist, xlist, timeout)", "intent": "This is a straightforward interface to the Unix select ( ) system call . The optional `timeout` argument specifies a time-out as a floating point number in seconds . With arguments `rlist`, `wlist`, `xlist`.", "question_id": 8166}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "pickle.dump(obj, file, protocol=None, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7366}
{"snippet": "stats.print_callers(*restrictions)", "intent": "This method for the Stats class prints a list of all functions that called each function in the profiled database . With arguments `*restrictions`.", "question_id": 7696}
{"snippet": "threading.Condition()", "intent": "This class implements condition variable objects .", "question_id": 10386}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "timer.print_exc()", "intent": "Helper to print a traceback from the timed code .", "question_id": 10515}
{"snippet": "Template.append(cmd, kind)", "intent": "Append a new action at the end . The `cmd` variable must be a valid bourne shell command . The `kind` variable consists of two letters .", "question_id": 7431}
{"snippet": "Match.groups()", "intent": "Return a tuple containing all the subgroups of the match , from 1 up to however many groups are in the pattern .", "question_id": 7999}
{"snippet": "turtle.pen(**pendict)", "intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "question_id": 10958}
{"snippet": "context.logical_invert(x)", "intent": "Invert all the digits in `x` .", "question_id": 2546}
{"snippet": "configparser.MAX_INTERPOLATION_DEPTH", "intent": "The maximum depth for recursive interpolation for get() when the raw parameter is false.", "question_id": 1568}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "email_message.clear_content()", "intent": "Remove the payload and all of the Content- headers , leaving all other headers intact and in their original order .", "question_id": 3307}
{"snippet": "select.kevent(ident, filter=KQ_FILTER_READ)", "intent": "( Only supported on BSD . ) With arguments `ident`, `filter`.", "question_id": 8157}
{"snippet": "asyncio.DatagramTransport(BaseTransport)", "intent": "A transport for datagram ( UDP ) connections . With arguments `BaseTransport`.", "question_id": 394}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "shlex.escapedquotes", "intent": "Characters in quotes that will interpret escape characters defined in escape.", "question_id": 8299}
{"snippet": "email.utils.localtime(dt=None)", "intent": "Return local time as an aware datetime object . Otherwise `dt` argument should be a datetime instance , and it is converted to the local time zone according to the system time zone database .", "question_id": 3453}
{"snippet": "time.altzone", "intent": "The offset of the local DST timezone, in seconds west of UTC, if one is defined.", "question_id": 10472}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "os.chown(path, uid, gid)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` .", "question_id": 6839}
{"snippet": "queue_listener.prepare(record)", "intent": "Prepare a `record` for handling .", "question_id": 5560}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670}
{"snippet": "pool.apply(func, args, kwds)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6332}
{"snippet": "Packer.pack_array(list, pack_item)", "intent": "Packs a variable length `list` of homogeneous items . With arguments `pack_item`.", "question_id": 12284}
{"snippet": "socket.has_ipv6", "intent": "This constant contains a boolean value which indicates if IPv6 is supported on this platform.", "question_id": 8607}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "threading.Event", "intent": "Class implementing event objects.", "question_id": 10406}
{"snippet": "curses.color_pair(color_number)", "intent": "Return the attribute value for displaying text in the specified color . With arguments `color_number`.", "question_id": 1925}
{"snippet": "executor.map(func, *iterables, chunksize=1)", "intent": "Similar to map ( `func` , `*iterables` ) except : The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer .", "question_id": 1443}
{"snippet": "test.support.start_threads(threads)", "intent": "Context manager to start `threads` .", "question_id": 10198}
{"snippet": "ssl.OP_SINGLE_DH_USE", "intent": "Prevents re-use of the same DH key for distinct SSL sessions.", "question_id": 8939}
{"snippet": "xml.sax.saxutils.XMLGenerator()", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document .", "question_id": 12658}
{"snippet": "system_random.pattern", "intent": "The regular expression pattern.", "question_id": 7966}
{"snippet": "_thread.interrupt_main()", "intent": "Simulate the effect of a signal.SIGINT signal arriving in the main thread .", "question_id": 12945}
{"snippet": "calendar.monthrange(year, month)", "intent": "Returns weekday of first day of the `month` and number of days in month , for the specified `year` and month .", "question_id": 991}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "concurrent.futures.ProcessPoolExecutor(mp_context=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `mp_context` can be a multiprocessing context or None .", "question_id": 1459}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "json.load(fp, **kw, cls=None, object_hook=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . `object_hook` is an optional function that will be called with the result of any object literal decoded ( a dict ) . With arguments `**kw`.", "question_id": 5297}
{"snippet": "HTTPResponse.msg", "intent": "A http.client.HTTPMessage instance containing the response headers.", "question_id": 4462}
{"snippet": "completed_process.args", "intent": "The arguments used to launch the process.", "question_id": 9578}
{"snippet": "sys.byteorder", "intent": "An indicator of the native byte order.", "question_id": 9770}
{"snippet": "csv.excel_tab", "intent": "The excel_tab class defines the usual properties of an Excel-generated TAB-delimited file.", "question_id": 1712}
{"snippet": "ssl.OP_CIPHER_SERVER_PREFERENCE", "intent": "Use the server\u2019s cipher ordering preference, rather than the client\u2019s.", "question_id": 8938}
{"snippet": "random.lognormvariate(mu, sigma)", "intent": "Log normal distribution . If you take the natural logarithm of this distribution , you \u2019 ll get a normal distribution with mean `mu` and standard deviation `sigma` .", "question_id": 7913}
{"snippet": "SMTP.login(user, password, initial_response_ok=True)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . `initial_response_ok` is passed through to auth ( ) . With arguments `user`.", "question_id": 8523}
{"snippet": "unittest.installHandler()", "intent": "Install the control-c handler .", "question_id": 11555}
{"snippet": "turtle.onrelease(fun)", "intent": "Bind `fun` to mouse-button-release events on this turtle .", "question_id": 11023}
{"snippet": "maildir_message.get_date()", "intent": "Return the delivery date of the message as a floating-point number representing seconds since the epoch .", "question_id": 5819}
{"snippet": "turtle.bgcolor(*args)", "intent": "Set or return background color of the TurtleScreen . With arguments `*args`.", "question_id": 11040}
{"snippet": "socket.getnameinfo(sockaddr, flags)", "intent": "Translate a socket address `sockaddr` into a 2-tuple ( host , port ) . Depending on the settings of `flags` , the result can contain a fully-qualified domain name or numeric address representation in host .", "question_id": 8651}
{"snippet": "HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)", "intent": "Redirect to the Location : or URI : URL . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11851}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : With arguments `*paths`.", "question_id": 2797}
{"snippet": "time.CLOCK_MONOTONIC", "intent": "Clock that cannot be set and represents monotonic time since some unspecified starting point.", "question_id": 10465}
{"snippet": "Path.write_text(data)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file :", "question_id": 7323}
{"snippet": "html.entities.entitydefs", "intent": "A dictionary mapping XHTML 1.0 entity definitions to their replacement text in ISO Latin-1.", "question_id": 4343}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762}
{"snippet": "curses.error", "intent": "Exception raised when a curses library function returns an error.", "question_id": 1919}
{"snippet": "curses.termattrs()", "intent": "Return a logical OR of all video attributes supported by the terminal .", "question_id": 1984}
{"snippet": "loop.call_exception_handler(context)", "intent": "Call the current event loop exception handler . `context` is a dict object containing the following keys ( new keys may be introduced in future Python versions ) :", "question_id": 310}
{"snippet": "maildir_message.get_subdir()", "intent": "Return either \u201c new \u201d ( if the message should be stored in the new subdirectory ) or \u201c cur \u201d ( if the message should be stored in the cur subdirectory ) .", "question_id": 5813}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "locale.CODESET", "intent": "Get a string with the name of the character encoding used in the selected locale.", "question_id": 5354}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832}
{"snippet": "urllib.request.ProxyHandler()", "intent": "Cause requests to go through a proxy .", "question_id": 11784}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302}
{"snippet": "decimal.ROUND_CEILING", "intent": "Round towards Infinity.", "question_id": 2577}
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333}
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931}
{"snippet": "loop.call_soon_threadsafe(callback, *args)", "intent": "A thread-safe variant of call_soon ( ) . With arguments `callback`, `*args`.", "question_id": 191}
{"snippet": "gdbm.firstkey()", "intent": "It \u2019 s possible to loop over every key in the database using this method and the nextkey ( ) method .", "question_id": 2374}
{"snippet": "json.dump(obj, fp, **kw, sort_keys=False)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `sort_keys` is true ( default : False ) , then the output of dictionaries will be sorted by key . With arguments `**kw`.", "question_id": 5279}
{"snippet": "ctypes.c_double", "intent": "Represents the C double datatype.", "question_id": 1858}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "dis.opname", "intent": "Sequence of operation names, indexable using the bytecode.", "question_id": 2742}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846}
{"snippet": "os.error", "intent": "An alias for the built-in OSError exception.", "question_id": 6655}
{"snippet": "cgihttp_request_handler.cgi_directories", "intent": "This defaults to ['/cgi-bin', '/htbin'] and describes directories to treat as containing CGI scripts.", "question_id": 4667}
{"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}
{"snippet": "tarfile.TarFile(mode='r')", "intent": "All following arguments are optional and can be accessed as instance attributes as well . `mode` is either ' r ' to read from an existing archive , ' a ' to append data to an existing file , ' w ' to create a new file overwriting an existing one , or ' x ' to create a new file only if it does not already exist .", "question_id": 9915}
{"snippet": "abstract_event_loop_policy.get_child_watcher()", "intent": "Get a child process watcher object .", "question_id": 378}
{"snippet": "patch.multiple(target, **kwargs, spec=None, create=False)", "intent": "Perform multiple patches in a single call . The arguments `spec` , `spec_set` , create , `autospec` and `new_callable` have the same meaning as for patch ( ) . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11638}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "Packer.pack_array(list, pack_item)", "intent": "Packs a variable length `list` of homogeneous items . With arguments `pack_item`.", "question_id": 12284}
{"snippet": "errno.ENETRESET", "intent": "Network dropped connection because of reset", "question_id": 3607}
{"snippet": "calendar.month_name", "intent": "An array that represents the months of the year in the current locale.", "question_id": 1024}
{"snippet": "xmlparser.ParseFile(file)", "intent": "Parse XML data reading from the object `file` .", "question_id": 7734}
{"snippet": "html_calendar.cssclass_noday", "intent": "The CSS class for a weekday occurring in the previous or coming month.", "question_id": 971}
{"snippet": "plistlib.load(fp)", "intent": "Read a plist file . `fp` should be a readable and binary file object .", "question_id": 7547}
{"snippet": "context.divmod(x, y)", "intent": "Divides two numbers and returns the integer part of the result . With arguments `x`, `y`.", "question_id": 2529}
{"snippet": "ftplib.FTP(host='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made .", "question_id": 3879}
{"snippet": "xmlparser.ordered_attributes", "intent": "Setting this attribute to a non-zero integer causes the attributes to be reported as a list rather than a dictionary.", "question_id": 7746}
{"snippet": "window.standend()", "intent": "Turn off the standout attribute .", "question_id": 2115}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}
{"snippet": "ZipFile.extractall(path=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12819}
{"snippet": "errno.EACCES", "intent": "Permission denied", "question_id": 3518}
{"snippet": "ImportWarning", "intent": "Base class for warnings about probable mistakes in module imports.", "question_id": 3708}
{"snippet": "mbox_message.set_from(from_)", "intent": "Set the \u201c From \u201d line to `from_` , which should be specified without a leading \u201c From \u201d or trailing newline .", "question_id": 5826}
{"snippet": "winreg.REG_QWORD_LITTLE_ENDIAN", "intent": "A 64-bit number in little-endian format.", "question_id": 12183}
{"snippet": "auto.end", "intent": "The index after the last invalid data in object.", "question_id": 3678}
{"snippet": "DefaultCookiePolicy.strict_rfc2965_unverifiable", "intent": "Follow RFC 2965 rules on unverifiable transactions (usually, an unverifiable transaction is one resulting from a redirect or a request for an image hosted on another site).", "question_id": 4547}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "pickle.dumps(obj)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file .", "question_id": 7367}
{"snippet": "FTP.abort()", "intent": "Abort a file transfer that is in progress .", "question_id": 3923}
{"snippet": "json.dump(obj, fp, **kw)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . With arguments `**kw`.", "question_id": 5270}
{"snippet": "xml.sax.parse(filename_or_stream, handler)", "intent": "Create a SAX parser and use it to parse a document . The document , passed in as `filename_or_stream` , can be a filename or a file object . The `handler` parameter needs to be a SAX ContentHandler instance .", "question_id": 12593}
{"snippet": "devpoll.closed", "intent": "True if the polling object is closed.", "question_id": 8170}
{"snippet": "SSLContext.load_cert_chain(certfile, keyfile=None, password=None)", "intent": "Load a private key and the corresponding certificate . The `certfile` string must be the path to a single file in PEM format containing the certificate as well as any number of CA certificates needed to establish the certificate \u2019 s authenticity . The `keyfile` string , if present , must point to a file containing the private key in . The `password` argument may be a function to call to get the password for decrypting the private key .", "question_id": 9000}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}
{"snippet": "simple_http_request_handler.do_HEAD()", "intent": "This method serves the 'HEAD ' request type : it sends the headers it would send for the equivalent GET request .", "question_id": 4664}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458}
{"snippet": "dis.haslocal", "intent": "Sequence of bytecodes that access a local variable.", "question_id": 2750}
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "DTDHandler.notationDecl(name, publicId, systemId)", "intent": "Handle a notation declaration event . With arguments `name`, `publicId`, `systemId`.", "question_id": 12583}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "inspect.iscoroutinefunction(object)", "intent": "Return true if the `object` is a coroutine function ( a function defined with an async def syntax ) .", "question_id": 4954}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "zipfile.PyZipFile(file)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`.", "question_id": 12846}
{"snippet": "locale.LC_MONETARY", "intent": "Locale category for formatting of monetary values.", "question_id": 5407}
{"snippet": "writer.flush()", "intent": "Flush any buffered output or device control events .", "question_id": 3841}
{"snippet": "sys.setswitchinterval(interval)", "intent": "Set the interpreter \u2019 s thread switch `interval` ( in seconds ) .", "question_id": 9838}
{"snippet": "types.MethodType", "intent": "The type of methods of user-defined class instances.", "question_id": 11189}
{"snippet": "FTP.retrlines(cmd)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "question_id": 3930}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "SSLContext.wrap_socket(sock)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) .", "question_id": 9022}
{"snippet": "@unittest.skipIf(condition, reason)", "intent": "Skip the decorated test if `condition` is true . With arguments `reason`.", "question_id": 11359}
{"snippet": "signal.ITIMER_REAL", "intent": "Decrements interval timer in real time, and delivers SIGALRM upon expiration.", "question_id": 8379}
{"snippet": "Node.writexml(writer, newl=\"\")", "intent": "Write XML to the `writer` object . The `newl` parameter specifies the string to use to terminate newlines .", "question_id": 12406}
{"snippet": "test_result.stopTest(test)", "intent": "Called after the `test` case test has been executed , regardless of the outcome .", "question_id": 11521}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797}
{"snippet": "ast.iter_fields(node)", "intent": "Yield a tuple of ( fieldname , value ) for each field in node._fields that is present on `node` .", "question_id": 156}
{"snippet": "locale.format_string(format, val, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5386}
{"snippet": "unicodedata.lookup(name)", "intent": "Look up character by `name` .", "question_id": 11340}
{"snippet": "os.path.commonpath(paths)", "intent": "Return the longest common sub-path of each pathname in the sequence `paths` .", "question_id": 7144}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136}
{"snippet": "ipaddress.v4_int_to_packed(address)", "intent": "Represent an `address` as 4 packed bytes in network ( big-endian ) order .", "question_id": 5232}
{"snippet": "connection.backup(target, pages=0)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time .", "question_id": 8830}
{"snippet": "socket.ntohl(x)", "intent": "Convert 32-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8657}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "doctest.DocFileSuite(*paths, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2798}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "smtpd.DebuggingServer(localaddr, remoteaddr)", "intent": "Create a new debugging server . With arguments `localaddr`, `remoteaddr`.", "question_id": 8424}
{"snippet": "os.stat(path)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` .", "question_id": 6917}
{"snippet": "io.StringIO(newline='\\n')", "intent": "An in-memory stream for text I/O . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "question_id": 5166}
{"snippet": "gettext.textdomain()", "intent": "Change or query the current global `domain` .", "question_id": 4214}
{"snippet": "subprocess.CREATE_NO_WINDOW", "intent": "A Popen creationflags parameter to specify that a new process will not create a window.", "question_id": 9655}
{"snippet": "Panel.above()", "intent": "Returns the panel above the current panel .", "question_id": 2145}
{"snippet": "text_wrapper.expand_tabs", "intent": "(default: True) If true, then all tab characters in text will be expanded to spaces using the expandtabs() method of text.", "question_id": 10328}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745}
{"snippet": "NNTP.list()", "intent": "Send a LIST or LIST ACTIVE command .", "question_id": 6465}
{"snippet": "queue_listener.start()", "intent": "Starts the listener .", "question_id": 5562}
{"snippet": "FTP.transfercmd(cmd)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection .", "question_id": 3943}
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106}
{"snippet": "zlib.error", "intent": "Exception raised on compression and decompression errors.", "question_id": 12892}
{"snippet": "email.message.MIMEPart(policy=default)", "intent": "This class represents a subpart of a MIME message . With arguments `policy`.", "question_id": 3312}
{"snippet": "keyword.iskeyword(s)", "intent": "Return true if `s` is a Python keyword .", "question_id": 5341}
{"snippet": "dispatcher.listen(backlog)", "intent": "Listen for connections made to the socket . The `backlog` argument specifies the maximum number of queued connections and should be at least 1 ; the maximum value is system-dependent ( usually 5 ) .", "question_id": 670}
{"snippet": "configparser.ExtendedInterpolation", "intent": "An alternative handler for interpolation which implements a more advanced syntax, used for instance in zc.buildout.", "question_id": 1492}
{"snippet": "ossaudiodev.OSSAudioError", "intent": "This exception is raised on certain errors.", "question_id": 7173}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947}
{"snippet": "os.RWF_HIPRI", "intent": "High priority read/write.", "question_id": 6787}
{"snippet": "socket.recvfrom_into(buffer)", "intent": "Receive data from the socket , writing it into `buffer` instead of creating a new bytestring .", "question_id": 8713}
{"snippet": "pathlib.PureWindowsPath(*pathsegments)", "intent": "A subclass of PurePath , this path flavour represents Windows filesystem paths : With arguments `*pathsegments`.", "question_id": 7242}
{"snippet": "loop.connect_write_pipe(protocol_factory, pipe)", "intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 302}
{"snippet": "sync_manager.BoundedSemaphore()", "intent": "Create a shared threading.BoundedSemaphore object and return a proxy for it .", "question_id": 6300}
{"snippet": "configparser.ExtendedInterpolation", "intent": "An alternative handler for interpolation which implements a more advanced syntax, used for instance in zc.buildout.", "question_id": 1492}
{"snippet": "somenamedtuple._make(iterable)", "intent": "Class method that makes a new instance from an existing sequence or `iterable` .", "question_id": 1384}
{"snippet": "errno.EUNATCH", "intent": "Protocol driver not attached", "question_id": 3554}
{"snippet": "gzip_file.peek(n)", "intent": "Read `n` uncompressed bytes without advancing the file position .", "question_id": 4292}
{"snippet": "widget.tag_bind(tagname)", "intent": "Bind a `callback` for the given event `sequence` to the tag `tagname` .", "question_id": 10662}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "resource.RLIMIT_CPU", "intent": "The maximum amount of processor time (in seconds) that a process can use.", "question_id": 8076}
{"snippet": "signal.SIG_SETMASK", "intent": "A possible value for the how parameter to pthread_sigmask() indicating that the signal mask is to be replaced.", "question_id": 8384}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "connection.iterdump()", "intent": "Returns an iterator to dump the database in an SQL text format .", "question_id": 8828}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}
{"snippet": "audioop.cross(fragment, width)", "intent": "Return the number of zero crossings in the `fragment` passed as an argument . With arguments `width`.", "question_id": 687}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "mime_version_header.minor", "intent": "The minor version number as an integer", "question_id": 3166}
{"snippet": "dis.hasfree", "intent": "Sequence of bytecodes that access a free variable (note that \u2018free\u2019 in this context refers to names in the current scope that are referenced by inner scopes or names in outer scopes that are referenced from this scope.", "question_id": 2746}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "doctest.IGNORE_EXCEPTION_DETAIL", "intent": "When specified, an example that expects an exception passes if an exception of the expected type is raised, even if the exception detail does not match.", "question_id": 2756}
{"snippet": "FileCookieJar.load()", "intent": "Load cookies from a file .", "question_id": 4506}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "Cmd.misc_header", "intent": "The header to issue if the help output has a section for miscellaneous  help topics (that is, there are help_*() methods without corresponding do_*() methods).", "question_id": 1151}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "zipfile.PyZipFile(file, optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `optimize`.", "question_id": 12850}
{"snippet": "context.logical_invert(x)", "intent": "Invert all the digits in `x` .", "question_id": 2546}
{"snippet": "tkinter.tix.ComboBox", "intent": "The ComboBox widget is similar to the combo box control in MS Windows.", "question_id": 10554}
{"snippet": "symbol_table.get_identifiers()", "intent": "Return a list of names of symbols in this table .", "question_id": 9742}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "dircmp.report_partial_closure()", "intent": "Print a comparison between a and b and common immediate subdirectories .", "question_id": 3765}
{"snippet": "subprocess.check_output(args, stdin=None)", "intent": "Run command with arguments and return its output . With arguments `args`, `stdin`.", "question_id": 9680}
{"snippet": "xmlparser.DefaultHandlerExpand(data)", "intent": "This is the same as the DefaultHandler ( ) , but doesn \u2019 t inhibit expansion of internal entities . With arguments `data`.", "question_id": 7773}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "context.compare_total(x, y)", "intent": "Compares two operands using their abstract representation . With arguments `x`, `y`.", "question_id": 2522}
{"snippet": "pyclbr.readmodule_ex(module)", "intent": "Return a dictionary-based tree containing a function or class descriptors for each function and class defined in the `module` with a def or class statement .", "question_id": 7708}
{"snippet": "tkinter.tix.Tree", "intent": "The Tree widget can be used to display hierarchical data in a tree form.", "question_id": 10572}
{"snippet": "re.finditer(pattern, string, flags=0)", "intent": "Return an iterator yielding match objects over all non-overlapping matches for the RE `pattern` in `string` . With arguments `flags`.", "question_id": 7950}
{"snippet": "asyncio.as_completed(aws, loop=None)", "intent": "Run awaitable objects in the `aws` set concurrently . With arguments `loop`.", "question_id": 616}
{"snippet": "xmlparser.ErrorCode", "intent": "Numeric code specifying the problem.", "question_id": 7749}
{"snippet": "Path.home()", "intent": "Return a new path object representing the user \u2019 s home directory ( as returned by os.path.expanduser ( ) with ~ construct ) :", "question_id": 7266}
{"snippet": "snapshot.statistics(key_type: str)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`.", "question_id": 10876}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415}
{"snippet": "cmath.polar(x)", "intent": "Return the representation of `x` in polar coordinates .", "question_id": 1094}
{"snippet": "abc_meta.__subclasshook__(subclass)", "intent": "( Must be defined as a class method . ) Check whether `subclass` is considered a subclass of this ABC .", "question_id": 3}
{"snippet": "mock.reset_mock(return_value=False)", "intent": "The reset_mock method resets all the call attributes on a mock object : In case you want to reset `return_value` or side_effect , then pass the corresponding parameter as True .", "question_id": 11579}
{"snippet": "test_case.assertAlmostEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11419}
{"snippet": "trace.Trace(infile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `infile` is the name of the file from which to read stored count information .", "question_id": 10713}
{"snippet": "Path.write_text(data)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file :", "question_id": 7323}
{"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}
{"snippet": "widget.selection_toggle(*items)", "intent": "Toggle the selection state of each item in items . With arguments `*items`.", "question_id": 10657}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "curses.ascii.isspace(c)", "intent": "Checks for ASCII white-space characters ; space , line feed , carriage return , form feed , horizontal tab , vertical tab . With arguments `c`.", "question_id": 1909}
{"snippet": "header.__str__()", "intent": "Returns an approximation of the Header as a string , using an unlimited line length .", "question_id": 3138}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "message.set_boundary(boundary)", "intent": "Set the `boundary` parameter of the Content-Type header to boundary .", "question_id": 3021}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "curses.has_il()", "intent": "Return True if the terminal has insert- and delete-line capabilities , or can simulate them using scrolling regions .", "question_id": 1942}
{"snippet": "netrc.macros", "intent": "Dictionary mapping macro names to string lists.", "question_id": 6390}
{"snippet": "loop.call_at(when, callback, *args)", "intent": "Schedule `callback` to be called at the given absolute timestamp `when` ( an int or a float ) , using the same time reference as loop.time ( ) . With arguments `*args`.", "question_id": 195}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "ModuleNotFoundError", "intent": "A subclass of ImportError which is raised by import when a module could not be located.", "question_id": 3641}
{"snippet": "deque.append(x)", "intent": "Add `x` to the right side of the deque .", "question_id": 1353}
{"snippet": "unicodedata.decomposition(chr)", "intent": "Returns the character decomposition mapping assigned to the character `chr` as string .", "question_id": 11354}
{"snippet": "asyncio.BoundedSemaphore()", "intent": "A bounded semaphore object .", "question_id": 588}
{"snippet": "warnings.resetwarnings()", "intent": "Reset the warnings filter .", "question_id": 12041}
{"snippet": "socket.getnameinfo(sockaddr, flags)", "intent": "Translate a socket address `sockaddr` into a 2-tuple ( host , port ) . Depending on the settings of `flags` , the result can contain a fully-qualified domain name or numeric address representation in host .", "question_id": 8651}
{"snippet": "tracemalloc.start()", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators .", "question_id": 10847}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "@reprlib.recursive_repr()", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread .", "question_id": 8053}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "os.WIFSIGNALED(status)", "intent": "Return True if the process exited due to a signal , otherwise return False . With arguments `status`.", "question_id": 7091}
{"snippet": "NNTP.login(usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6454}
{"snippet": "pkgutil.get_data(package, resource)", "intent": "Get a `resource` from a `package` .", "question_id": 7457}
{"snippet": "curses.error", "intent": "Exception raised when a curses library function returns an error.", "question_id": 1919}
{"snippet": "base_http_request_handler.sys_version", "intent": "Contains the Python system version, in a form usable by the version_string method and the server_version class variable.", "question_id": 4628}
{"snippet": "ctypes.resize(obj, size)", "intent": "This function resizes the internal memory buffer of `obj` , which must be an instance of a ctypes type . It is not possible to make the buffer smaller than the native `size` of the objects type , as given by sizeof ( type ( obj ) ) , but it is possible to enlarge the buffer .", "question_id": 1830}
{"snippet": "doctest.DocTestSuite(extraglobs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `extraglobs` specifies an extra set of global variables , which is merged into globs .", "question_id": 2809}
{"snippet": "decimal.exp()", "intent": "Return the value of the ( natural ) exponential function e**x at the given number .", "question_id": 2412}
{"snippet": "site.USER_SITE", "intent": "Path to the user site-packages for the running Python.", "question_id": 8404}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "extension_file_loader.get_code(fullname)", "intent": "Returns None as extension modules lack a code object . With arguments `fullname`.", "question_id": 4909}
{"snippet": "text_wrapper.tabsize", "intent": "(default: 8) If expand_tabs is true, then all tab characters in text will be expanded to zero or more spaces, depending on the current column and the given tab size.", "question_id": 10329}
{"snippet": "set.update(*others)", "intent": "Update the set , adding elements from all others . With arguments `*others`.", "question_id": 9454}
{"snippet": "sys.version", "intent": "A string containing the version number of the Python interpreter plus additional information on the build number and compiler used.", "question_id": 9852}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE", "intent": "An attribute was used more than once in a start tag.", "question_id": 7792}
{"snippet": "tkinter.tix.DirSelectBox", "intent": "The DirSelectBox is similar to the standard Motif(TM) directory-selection box.", "question_id": 10566}
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924}
{"snippet": "xml.sax.handler.EntityResolver", "intent": "Basic interface for resolving entities.", "question_id": 12566}
{"snippet": "compileall.compile_dir(dir, legacy=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1415}
{"snippet": "IsADirectoryError", "intent": "Raised when a file operation (such as os.remove()) is requested on a directory.", "question_id": 3696}
{"snippet": "symbol.sym_name", "intent": "Dictionary mapping the numeric values of the constants defined in this module back to name strings, allowing more human-readable representation of parse trees to be generated.", "question_id": 9731}
{"snippet": "Cmd.cmdloop()", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument .", "question_id": 1135}
{"snippet": "example.indent", "intent": "The example\u2019s indentation in the containing string, i.e., the number of space characters that precede the example\u2019s first prompt.", "question_id": 2838}
{"snippet": "time.perf_counter()", "intent": "Return the value ( in fractional seconds ) of a performance counter , i.e .", "question_id": 10448}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271}
{"snippet": "crypt.METHOD_CRYPT", "intent": "The traditional method with a 2 character salt and 13 characters of hash.", "question_id": 1672}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "curses.color_pair(color_number)", "intent": "Return the attribute value for displaying text in the specified color . With arguments `color_number`.", "question_id": 1925}
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673}
{"snippet": "collections.Counter()", "intent": "A Counter is a dict subclass for counting hashable objects .", "question_id": 1341}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "@test.support.requires_zlib", "intent": "Decorator for skipping tests if zlib doesn\u2019t exist.", "question_id": 10215}
{"snippet": "i_pv4_address.is_unspecified", "intent": "True if the address is unspecified.", "question_id": 5183}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "Node.firstChild", "intent": "The first child of the node, if there are any, or None.", "question_id": 12320}
{"snippet": "DefaultCookiePolicy.strict_domain", "intent": "Don\u2019t allow sites to set two-component domains with country-code top-level domains like .co.uk, .gov.uk, .co.nz.etc.", "question_id": 4546}
{"snippet": "ssl.PROTOCOL_TLS", "intent": "Selects the highest protocol version that both the client and server support.", "question_id": 8921}
{"snippet": "parser.st2list(st, line_info=False)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree . If `line_info` is true , line number information will be included for all terminal tokens as a third element of the list representing the token .", "question_id": 7215}
{"snippet": "traceback_exception.extract(frame_gen, capture_locals=False)", "intent": "Construct a StackSummary object from a frame generator ( such as is returned by walk_stack ( ) or walk_tb ( ) ) . If `limit` is supplied , only this many frames are taken from `frame_gen` . If `capture_locals` is True the local variables in each FrameSummary are captured as object representations .", "question_id": 10826}
{"snippet": "os.RWF_HIPRI", "intent": "High priority read/write.", "question_id": 6787}
{"snippet": "turtle.pensize()", "intent": "Set the line thickness to `width` or return it .", "question_id": 10954}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934}
{"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592}
{"snippet": "tkinter.tix.NoteBook", "intent": "The NoteBook widget can be used to display many windows in a limited space using a notebook metaphor.", "question_id": 10576}
{"snippet": "xmlparser.ErrorCode", "intent": "Numeric code specifying the problem.", "question_id": 7749}
{"snippet": "message.set_type(type)", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3013}
{"snippet": "coverage_results.write_results(show_missing=True)", "intent": "Write coverage results . Set `show_missing` to show lines that had no hits .", "question_id": 10726}
{"snippet": "tracemalloc.start()", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators .", "question_id": 10847}
{"snippet": "collections.abc.MappingView", "intent": "ABCs for mapping, items, keys, and values views.", "question_id": 1326}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "os.getrandom(size)", "intent": "Get up to `size` random bytes .", "question_id": 7137}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529}
{"snippet": "itertools.tee(iterable)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5266}
{"snippet": "ac_out_buffer_size", "intent": "The asynchronous output buffer size (default 4096).", "question_id": 169}
{"snippet": "POP3.rset()", "intent": "Remove any deletion marks for the mailbox .", "question_id": 7613}
{"snippet": "gettext.dgettext(domain, message)", "intent": "Like gettext ( ) , but look the `message` up in the specified `domain` .", "question_id": 4217}
{"snippet": "queue_listener.close()", "intent": "Tidy up any resources used by the handler .", "question_id": 5605}
{"snippet": "urllib.parse.parse_qs(qs, encoding='utf-8')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional `encoding` and errors parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method . With arguments `qs`.", "question_id": 11672}
{"snippet": "multiprocessing.Process()", "intent": "Process objects represent activity that is run in a separate process .", "question_id": 6165}
{"snippet": "set.update(*others)", "intent": "Update the set , adding elements from all others . With arguments `*others`.", "question_id": 9454}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948}
{"snippet": "context.sqrt(x)", "intent": "Square root of a non-negative number to context precision . With arguments `x`.", "question_id": 2571}
{"snippet": "shutil.copyfile(src, dst, follow_symlinks=True)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst . If `follow_symlinks` is false and src is a symbolic link , a new symbolic link will be created instead of copying the file src points to .", "question_id": 8312}
{"snippet": "importlib.resources.open_text(package, resource)", "intent": "Open for text reading the `resource` within `package` .", "question_id": 4853}
{"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "window.encoding", "intent": "Encoding used to encode method arguments (Unicode strings and characters).", "question_id": 2047}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "zipfile.ZipFile(file, mode='r')", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file .", "question_id": 12793}
{"snippet": "i_pv4_address.exploded", "intent": "The string representation in dotted decimal notation.", "question_id": 5177}
{"snippet": "@test.support.anticipate_failure(condition)", "intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "question_id": 10208}
{"snippet": "shlex.shlex(instream=None, punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8280}
{"snippet": "non_callable_magic_mock.code", "intent": "An HTTP status code as defined in RFC 2616.", "question_id": 11661}
{"snippet": "cmath.sqrt(x)", "intent": "Return the square root of `x` .", "question_id": 1100}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "dir_entry.is_symlink()", "intent": "Return True if this entry is a symbolic link ( even if broken ) ; return False if the entry points to a directory or any kind of file , or if it doesn \u2019 t exist anymore .", "question_id": 6914}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "tkinter.tix.Tree", "intent": "The Tree widget can be used to display hierarchical data in a tree form.", "question_id": 10572}
{"snippet": "shutil.move(src, dst)", "intent": "Recursively move a file or directory ( `src` ) to another location ( `dst` ) and return the destination .", "question_id": 8338}
{"snippet": "dict(mapping, **kwarg)", "intent": "Create a new dictionary . With arguments `mapping`, `**kwarg`.", "question_id": 4005}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962}
{"snippet": "urllib.parse.urlencode(query, doseq=False, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11741}
{"snippet": "secrets.compare_digest(a, b)", "intent": "Return True if strings `a` and `b` are equal , otherwise False , in such a way as to reduce the risk of timing attacks .", "question_id": 8147}
{"snippet": "socket.recv_into(buffer, nbytes)", "intent": "Receive up to `nbytes` bytes from the socket , storing the data into a `buffer` rather than creating a new bytestring .", "question_id": 8715}
{"snippet": "calendar.TextCalendar(firstweekday=0)", "intent": "This class can be used to generate plain text calendars . With arguments `firstweekday`.", "question_id": 927}
{"snippet": "multiprocessing.JoinableQueue()", "intent": "JoinableQueue , a Queue subclass , is a queue which additionally has task_done ( ) and join ( ) methods .", "question_id": 6216}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716}
{"snippet": "pool.apply_async(func)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`.", "question_id": 6339}
{"snippet": "window.mvderwin(y, x)", "intent": "Move the window inside its parent window . With arguments `y`, `x`.", "question_id": 2094}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "trace.results()", "intent": "Return a CoverageResults object that contains the cumulative results of all previous calls to run , runctx and runfunc for the given Trace instance .", "question_id": 10722}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "code.InteractiveConsole()", "intent": "Closely emulate the behavior of the interactive Python interpreter .", "question_id": 1157}
{"snippet": "memory_bio.eof", "intent": "A boolean indicating whether the memory BIO is current at the end-of-file position.", "question_id": 9055}
{"snippet": "sys.meta_path", "intent": "A list of meta path finder objects that have their find_spec() methods called to see if one of the objects can find the module to be imported.", "question_id": 9825}
{"snippet": "zipfile.PyZipFile(file)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`.", "question_id": 12846}
{"snippet": "faulthandler.disable()", "intent": "Disable the fault handler : uninstall the signal handlers installed by enable ( ) .", "question_id": 3720}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271}
{"snippet": "platform.libc_ver(chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7541}
{"snippet": "dispatcher.create_socket()", "intent": "This is identical to the creation of a normal socket , and will use the same options for creation .", "question_id": 663}
{"snippet": "socket.create_connection(address, timeout)", "intent": "Connect to a TCP service listening on the Internet `address` ( a 2-tuple ( host , port ) ) , and return the socket object . Passing the optional `timeout` parameter will set the timeout on the socket instance before attempting to connect .", "question_id": 8628}
{"snippet": "mime_types.read(filename)", "intent": "Load MIME information from a file named `filename` .", "question_id": 5970}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371}
{"snippet": "struct.Struct(format)", "intent": "Return a new Struct object which writes and reads binary data according to the `format` string format .", "question_id": 9558}
{"snippet": "writer.send_paragraph(blankline)", "intent": "Produce a paragraph separation of at least `blankline` blank lines , or the equivalent .", "question_id": 3848}
{"snippet": "pyclbr.readmodule_ex(module)", "intent": "Return a dictionary-based tree containing a function or class descriptors for each function and class defined in the `module` with a def or class statement .", "question_id": 7708}
{"snippet": "site.USER_SITE", "intent": "Path to the user site-packages for the running Python.", "question_id": 8404}
{"snippet": "subprocess.ABOVE_NORMAL_PRIORITY_CLASS", "intent": "A Popen creationflags parameter to specify that a new process will have an above average priority.", "question_id": 9649}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347}
{"snippet": "pool.close()", "intent": "Prevents any more tasks from being submitted to the pool .", "question_id": 6356}
{"snippet": "concurrent.futures.ProcessPoolExecutor(mp_context=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `mp_context` can be a multiprocessing context or None .", "question_id": 1459}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "Class.methods", "intent": "A dictionary mapping method names to line numbers.", "question_id": 7723}
{"snippet": "getpass.GetPassWarning", "intent": "A UserWarning subclass issued when password input may be echoed.", "question_id": 4208}
{"snippet": "string.printable", "intent": "String of ASCII characters which are considered printable.", "question_id": 9514}
{"snippet": "base_server.process_request(request, client_address)", "intent": "Calls finish_request ( ) to create an instance of the RequestHandlerClass . If desired , this function can create a new process or thread to handle the `request` ; the ForkingMixIn and ThreadingMixIn classes do this . With arguments `client_address`.", "question_id": 8779}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "statistics.pvariance(data)", "intent": "Return the population variance of `data` , a non-empty iterable of real-valued numbers .", "question_id": 9135}
{"snippet": "base_selector.register(fileobj, events)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor .", "question_id": 8215}
{"snippet": "urllib.parse.quote_plus(string, safe='', encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`.", "question_id": 11717}
{"snippet": "Path.symlink_to(target, target_is_directory=False)", "intent": "Make this path a symbolic link to `target` . Under Windows , `target_is_directory` must be true ( default False ) if the link \u2019 s target is a directory .", "question_id": 7316}
{"snippet": "concurrent.futures.thread.BrokenThreadPool", "intent": "Derived from BrokenExecutor, this exception class is raised when one of the workers of a ThreadPoolExecutor has failed initializing.", "question_id": 1489}
{"snippet": "asyncio.ProactorEventLoop", "intent": "An event loop for Windows that uses \u201cI/O Completion Ports\u201d (IOCP).", "question_id": 343}
{"snippet": "HTMLParser.get_starttag_text()", "intent": "Return the text of the most recently opened start tag .", "question_id": 4355}
{"snippet": "errno.ELIBBAD", "intent": "Accessing a corrupted shared library", "question_id": 3585}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "warnings.warn(message, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12001}
{"snippet": "ReadTransport.is_reading()", "intent": "Return True if the transport is receiving new data .", "question_id": 402}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711}
{"snippet": "ArgumentParser.parse_args()", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 69}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194}
{"snippet": "stringprep.in_table_c8(code)", "intent": "Determine whether `code` is in tableC.8 ( Change display properties or are deprecated ) .", "question_id": 9546}
{"snippet": "asyncore.dispatcher_with_send", "intent": "A dispatcher subclass which adds simple buffered output capability, useful for simple clients.", "question_id": 674}
{"snippet": "json_decoder.decode(s)", "intent": "Return the Python representation of `s` ( a str instance containing a JSON document ) .", "question_id": 5320}
{"snippet": "context.remainder_near(x, y)", "intent": "Returns `x` - `y` * n , where n is the integer nearest the exact value of x / y ( if the result is 0 then its sign will be the sign of x ) .", "question_id": 2566}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372}
{"snippet": "IMAP4.thread(threading_algorithm, charset, search_criterion)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4747}
{"snippet": "class.mro()", "intent": "This method can be overridden by a metaclass to customize the method resolution order for its instances .", "question_id": 9505}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "sndhdr.whathdr(filename)", "intent": "Determines the type of sound data stored in a file based on the file header . The name of the file is given by `filename` .", "question_id": 8550}
{"snippet": "DefaultCookiePolicy.DomainStrictNoDots", "intent": "When setting cookies, the \u2018host prefix\u2019 must not contain a dot (eg.", "question_id": 4552}
{"snippet": "writer.new_margin(margin, level)", "intent": "Set the `margin` `level` to the integer level and the logical tag to margin .", "question_id": 3844}
{"snippet": "message.set_boundary(boundary)", "intent": "Set the `boundary` parameter of the Content-Type header to boundary .", "question_id": 3021}
{"snippet": "decimal.Clamped", "intent": "Altered an exponent to fit representation constraints.", "question_id": 2585}
{"snippet": "example.options", "intent": "A dictionary mapping from option flags to True or False, which is used to override default options for this example.", "question_id": 2839}
{"snippet": "winreg.HKEY_USERS", "intent": "Registry entries subordinate to this key define the default user configuration for new users on the local computer and the user configuration for the current user.", "question_id": 12158}
{"snippet": "sys.exit()", "intent": "Exit from Python .", "question_id": 9789}
{"snippet": "html_calendar.formatyear(theyear)", "intent": "Return a year \u2019 s calendar as an HTML table . With arguments `theyear`.", "question_id": 960}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "shutil.copyfileobj(fsrc, fdst, length)", "intent": "Copy the contents of the file-like object `fsrc` to the file-like object `fdst` . The integer `length` , if given , is the buffer size .", "question_id": 8309}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "NNTP.getcapabilities()", "intent": "Return the RFC 3977 capabilities advertised by the server , as a dict instance mapping capability names to ( possibly empty ) lists of values .", "question_id": 6450}
{"snippet": "example.options", "intent": "A dictionary mapping from option flags to True or False, which is used to override default options for this example.", "question_id": 2839}
{"snippet": "test_case.assertMultiLineEqual(first, second, msg=None)", "intent": "Test that the multiline string `first` is equal to the string `second` . With arguments `msg`.", "question_id": 11449}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "json.JSONEncoder(sort_keys=False)", "intent": "Extensible JSON encoder for Python data structures . If `sort_keys` is true ( default : False ) , then the output of dictionaries will be sorted by key ; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis .", "question_id": 5327}
{"snippet": "condition.notify()", "intent": "By default , wake up one thread waiting on this condition , if any .", "question_id": 10394}
{"snippet": "subprocess.Popen(args, stdin=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9602}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "prototype(func_spec)", "intent": "Returns a foreign function exported by a shared library . `func_spec` must be a 2-tuple ( name_or_ordinal , library ) .", "question_id": 1804}
{"snippet": "context.normalize(x)", "intent": "Reduces `x` to its simplest form .", "question_id": 2558}
{"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429}
{"snippet": "mock.call_count", "intent": "An integer telling you how many times the mock object has been called:", "question_id": 11589}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "wave.open(file)", "intent": "If `file` is a string , open the file by that name , otherwise treat it as a file-like object .", "question_id": 12046}
{"snippet": "mock.mock_add_spec(spec)", "intent": "Add a `spec` to a mock .", "question_id": 11582}
{"snippet": "cgitb.handler()", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) .", "question_id": 1073}
{"snippet": "pdb.pm()", "intent": "Enter post-mortem debugging of the traceback found in sys.last_traceback .", "question_id": 7340}
{"snippet": "mailbox.clear()", "intent": "Delete all messages from the mailbox .", "question_id": 5745}
{"snippet": "mime_types.guess_extension(type)", "intent": "Similar to the guess_extension ( ) function , using the tables stored as part of the object . With arguments `type`.", "question_id": 5964}
{"snippet": "datetime.utcnow()", "intent": "Return the current UTC date and time , with tzinfo None .", "question_id": 2260}
{"snippet": "xml.sax.saxutils.XMLGenerator()", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document .", "question_id": 12658}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "windows_proactor_event_loop_policy.attach_loop(loop)", "intent": "Attach the watcher to an event `loop` .", "question_id": 386}
{"snippet": "logging.config.fileConfig(fname, defaults=None)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "question_id": 5413}
{"snippet": "errno.ELIBBAD", "intent": "Accessing a corrupted shared library", "question_id": 3585}
{"snippet": "pickle.Pickler(file, protocol=None, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . The optional `protocol` argument , an integer , tells the pickler to use the given protocol ; supported protocols are 0 to HIGHEST_PROTOCOL . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7393}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025}
{"snippet": "doctest.SKIP", "intent": "When specified, do not run the example at all.", "question_id": 2757}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}
{"snippet": "shutil.copymode(src, dst)", "intent": "Copy the permission bits from `src` to `dst` .", "question_id": 8314}
{"snippet": "tkinter.tix.Tree", "intent": "The Tree widget can be used to display hierarchical data in a tree form.", "question_id": 10572}
{"snippet": "winreg.HKEY_DYN_DATA", "intent": "This key is not used in versions of Windows after 98.", "question_id": 12161}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "socketserver.ForkingMixIn", "intent": "Forking and threading versions of each type of server can be created using these mix-in classes.", "question_id": 8753}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}
{"snippet": "ur_lopener.retrieve(url, reporthook=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . If `reporthook` is given , it must be a function accepting three numeric parameters : A chunk number , the maximum size chunks are read in and the total size of the download ( -1 if unknown ) .", "question_id": 11898}
{"snippet": "test_case.assertCountEqual(first, second)", "intent": "Test that sequence `first` contains the same elements as `second` , regardless of their order .", "question_id": 11445}
{"snippet": "os.name", "intent": "The name of the operating system dependent module imported.", "question_id": 6656}
{"snippet": "shelve.DbfilenameShelf(filename, flag='c')", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object . The optional `flag` parameter has the same interpretation as for the open ( ) function .", "question_id": 8261}
{"snippet": "errno.EUCLEAN", "intent": "Structure needs cleaning", "question_id": 3622}
{"snippet": "email.header.Header()", "intent": "Create a MIME-compliant header that can contain strings in different character sets .", "question_id": 3116}
{"snippet": "sys_log_handler.mapPriority(levelname)", "intent": "Maps a logging level name to a syslog priority name . With arguments `levelname`.", "question_id": 5505}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "loop.call_soon_threadsafe(callback, *args)", "intent": "A thread-safe variant of call_soon ( ) . With arguments `callback`, `*args`.", "question_id": 191}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194}
{"snippet": "gettext.textdomain()", "intent": "Change or query the current global `domain` .", "question_id": 4214}
{"snippet": "task.get_stack()", "intent": "Return the list of stack frames for this Task .", "question_id": 634}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "os.chflags(path, flags)", "intent": "Set the `flags` of `path` to the numeric flags .", "question_id": 6833}
{"snippet": "msilib.add_tables(database, module)", "intent": "Add all table content from `module` to `database` .", "question_id": 6065}
{"snippet": "socket.recvmsg_into(buffers)", "intent": "Receive normal data and ancillary data from the socket , behaving as recvmsg ( ) would , but scatter the non-ancillary data into a series of `buffers` instead of returning a new bytes object .", "question_id": 8710}
{"snippet": "UUID.version", "intent": "The UUID version number (1 through 5, meaningful only when the variant is RFC_4122).", "question_id": 11954}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "decimal.radix()", "intent": "Return Decimal ( 10 ) , the radix ( base ) in which the Decimal class does all its arithmetic .", "question_id": 2465}
{"snippet": "widget.heading(column, **kw, option=None)", "intent": "Query or modify the heading options for the specified `column` . If kw is not given , returns a dict of the heading `option` values . With arguments `**kw`.", "question_id": 10633}
{"snippet": "i_pv4_address.is_unspecified", "intent": "True if the address is unspecified.", "question_id": 5183}
{"snippet": "mock.configure_mock(**kwargs)", "intent": "Set attributes on the mock through keyword arguments . With arguments `**kwargs`.", "question_id": 11585}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175}
{"snippet": "NamedNodeMap.length", "intent": "The length of the attribute list.", "question_id": 12374}
{"snippet": "os.getenv(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6668}
{"snippet": "unittest.mock.PropertyMock(*args, **kwargs)", "intent": "A mock intended to be used as a property , or other descriptor , on a class . With arguments `*args`, `**kwargs`.", "question_id": 11607}
{"snippet": "socketserver.BaseServer(server_address, RequestHandlerClass)", "intent": "This is the superclass of all Server objects in the module . The two parameters are stored in the respective `server_address` and `RequestHandlerClass` attributes .", "question_id": 8759}
{"snippet": "email.utils.formatdate(localtime=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account .", "question_id": 3470}
{"snippet": "aifc.setframerate(rate)", "intent": "Specify the sampling frequency in frames per second . With arguments `rate`.", "question_id": 29}
{"snippet": "token.ISTERMINAL(x)", "intent": "Return true for terminal token values . With arguments `x`.", "question_id": 10695}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319}
{"snippet": "tkinter.tix.LabelFrame", "intent": "The LabelFrame widget packages a frame widget and a label into one mega widget.", "question_id": 10557}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "resource.RLIMIT_RTTIME", "intent": "The time limit (in microseconds) on CPU time that a process can spend under real-time scheduling without making a blocking syscall.", "question_id": 8090}
{"snippet": "xml.dom.NoModificationAllowedErr", "intent": "Raised on attempts to modify an object where modifications are not allowed (such as for read-only nodes).", "question_id": 12393}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}
{"snippet": "DefaultCookiePolicy.strict_ns_unverifiable", "intent": "Apply RFC 2965 rules on unverifiable transactions even to Netscape cookies.", "question_id": 4548}
{"snippet": "InputSource.getPublicId()", "intent": "Returns the public identifier of this InputSource .", "question_id": 12635}
{"snippet": "TarFile.add(name)", "intent": "Add the file `name` to the archive .", "question_id": 9949}
{"snippet": "ctypes.create_unicode_buffer(init_or_size)", "intent": "This function creates a mutable unicode character buffer . `init_or_size` must be an integer which specifies the `size` of the array , or a string which will be used to initialize the array items .", "question_id": 1815}
{"snippet": "ReferenceError", "intent": "This exception is raised when a weak reference proxy, created by the weakref.proxy() function, is used to access an attribute of the referent after it has been garbage collected.", "question_id": 3661}
{"snippet": "context.keys()", "intent": "Return a list of all variables in the context object .", "question_id": 1658}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800}
{"snippet": "json_encoder.lineno", "intent": "The line corresponding to pos.", "question_id": 5339}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "formatter.vformat(format_string, args, kwargs)", "intent": "This function does the actual work of formatting . With arguments `format_string`, `args`, `kwargs`.", "question_id": 9518}
{"snippet": "lzma.LZMAFile(check=-1)", "intent": "Open an LZMA-compressed file in binary `mode` . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5670}
{"snippet": "TarFile.getnames()", "intent": "Return the members as a list of their names .", "question_id": 9926}
{"snippet": "statistics.pstdev(data)", "intent": "Return the population standard deviation ( the square root of the population variance ) . With arguments `data`.", "question_id": 9133}
{"snippet": "SSLContext.verify_mode", "intent": "Whether to try to verify other peers\u2019 certificates and how to behave if verification fails.", "question_id": 9051}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "netrc.hosts", "intent": "Dictionary mapping host names to (login, account, password) tuples.", "question_id": 6389}
{"snippet": "parameter.kind", "intent": "Describes how argument values are bound to the parameter.", "question_id": 5001}
{"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}
{"snippet": "lzma.LZMAFile(check=-1)", "intent": "Open an LZMA-compressed file in binary `mode` . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5670}
{"snippet": "partial.args", "intent": "The leftmost positional arguments that will be prepended to the positional arguments provided to a partial object call.", "question_id": 4165}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "set |= other | ...", "intent": "Update the set, adding elements from all others.", "question_id": 9455}
{"snippet": "OpenerDirector.open(url)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11837}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}
{"snippet": "asyncio.SubprocessProtocol(BaseProtocol)", "intent": "The base class for implementing protocols communicating with child processes ( unidirectional pipes ) . With arguments `BaseProtocol`.", "question_id": 430}
{"snippet": "curses.has_colors()", "intent": "Return True if the terminal can display colors ; otherwise , return False .", "question_id": 1940}
{"snippet": "PermissionError", "intent": "Raised when trying to run an operation without the adequate access rights - for example filesystem permissions.", "question_id": 3698}
{"snippet": "POP3.noop()", "intent": "Do nothing .", "question_id": 7614}
{"snippet": "turtle.turtles()", "intent": "Return the list of turtles on the screen .", "question_id": 11102}
{"snippet": "compileall.compile_dir(dir, legacy=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1415}
{"snippet": "types.FunctionType", "intent": "The type of user-defined functions and functions created by lambda  expressions.", "question_id": 11183}
{"snippet": "winreg.SetValue(key, sub_key, type, value)", "intent": "Associates a `value` with a specified `key` . `sub_key` is a string that names the subkey with which the value is associated . `type` is an integer that specifies the type of the data .", "question_id": 12150}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_SEQ", "intent": "Models which represent a series of models which follow one after the other are indicated with this model type.", "question_id": 7782}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827}
{"snippet": "env_builder.setup_scripts(context)", "intent": "Installs activation scripts appropriate to the platform into the virtual environment . With arguments `context`.", "question_id": 11986}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}
{"snippet": "test.support.optim_args_from_interpreter_flags()", "intent": "Return a list of command line arguments reproducing the current optimization settings in sys.flags .", "question_id": 10172}
{"snippet": "importlib.util.spec_from_loader(name, loader)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`.", "question_id": 4934}
{"snippet": "shutil.make_archive(base_name, format, root_dir)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive .", "question_id": 8356}
{"snippet": "window.mvderwin(y, x)", "intent": "Move the window inside its parent window . With arguments `y`, `x`.", "question_id": 2094}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499}
{"snippet": "readline.add_history(line)", "intent": "Append `line` to the history buffer , as if it was the last line typed .", "question_id": 8034}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, cte=None, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `cte` is set , encode the payload using the specified content transfer encoding , and set the Content-Transfer-Encoding header to that value . If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'EmailMessage'>`.", "question_id": 3066}
{"snippet": "json.dump(obj, fp, **kw, check_circular=True)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `check_circular` is false ( default : True ) , then the circular reference check for container types will be skipped and a circular reference will result in an OverflowError ( or worse ) . With arguments `**kw`.", "question_id": 5273}
{"snippet": "test.support.EnvironmentVarGuard", "intent": "Class used to temporarily set or unset environment variables.", "question_id": 10286}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "xml.etree.ElementTree.XMLID(text)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data .", "question_id": 12471}
{"snippet": "Dialect.doublequote", "intent": "Controls how instances of quotechar appearing inside a field should themselves be quoted.", "question_id": 1724}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}
{"snippet": "@abc.abstractclassmethod", "intent": "A subclass of the built-in classmethod(), indicating an abstract classmethod.", "question_id": 5}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}
{"snippet": "PurePath.anchor", "intent": "The concatenation of the drive and root:", "question_id": 7246}
{"snippet": "cursor.execute(sql)", "intent": "Executes an SQL statement . With arguments `sql`.", "question_id": 8841}
{"snippet": "ZipInfo.date_time", "intent": "The time and date of the last modification to the archive member.", "question_id": 12864}
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917}
{"snippet": "address_header.groups", "intent": "A tuple of Group objects encoding the addresses and groups found in the header value.", "question_id": 3159}
{"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138}
{"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}
{"snippet": "context.divide_int(x, y)", "intent": "Return `x` divided by `y` , truncated to an integer .", "question_id": 2528}
{"snippet": "audioop.findmax(fragment, length)", "intent": "Search `fragment` for a slice of `length` length samples ( not bytes ! )", "question_id": 690}
{"snippet": "re.error(msg)", "intent": "Exception raised when a string passed to one of the functions here is not a valid regular expression ( for example , it might contain unmatched parentheses ) or when some other error occurs during compilation or matching . With arguments `msg`.", "question_id": 7961}
{"snippet": "widget.identify(x, y)", "intent": "Returns the name of the element at position `x` `y` , or the empty string if the point does not lie within any element .", "question_id": 10592}
{"snippet": "dis.findlinestarts(code)", "intent": "This generator function uses the co_firstlineno and co_lnotab attributes of the `code` object code to find the offsets which are starts of lines in the source code .", "question_id": 2729}
{"snippet": "OptionParser.print_usage()", "intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "question_id": 6644}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "Element.getElementsByTagName(tagName)", "intent": "Same as equivalent method in the Document class . With arguments `tagName`.", "question_id": 12355}
{"snippet": "_c_data._objects", "intent": "This member is either None or a dictionary containing Python objects that need to be kept alive so that the memory block contents is kept valid.", "question_id": 1852}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}
{"snippet": "getopt.error", "intent": "Alias for GetoptError; for backward compatibility.", "question_id": 4203}
{"snippet": "file_finder.find_spec(fullname)", "intent": "Attempt to find the spec to handle `fullname` within path .", "question_id": 4884}
{"snippet": "structure._pack_", "intent": "An optional small integer that allows overriding the alignment of structure fields in the instance.", "question_id": 1891}
{"snippet": "PurePath.as_posix()", "intent": "Return a string representation of the path with forward slashes ( / ) :", "question_id": 7253}
{"snippet": "calendar.prmonth(theyear, themonth)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`.", "question_id": 993}
{"snippet": "dis.hasname", "intent": "Sequence of bytecodes that access an attribute by name.", "question_id": 2747}
{"snippet": "asyncio.Task(coro, loop=None)", "intent": "A Future-like object that runs a Python coroutine . Event loops use cooperative scheduling : an event `loop` runs one Task at a time . With arguments `coro`.", "question_id": 625}
{"snippet": "email.headerregistry.DateHeader", "intent": "RFC 5322 specifies a very specific format for dates within email headers.", "question_id": 3156}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}
{"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300}
{"snippet": "nt_event_log_handler.close()", "intent": "At this point , you can remove the application name from the registry as a source of event log entries .", "question_id": 5510}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "Option.choices", "intent": "For options of type \"choice\", the list of strings the user may choose from.", "question_id": 6632}
{"snippet": "xmlrpc.client.dumps(params, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12702}
{"snippet": "base_selector.modify(fileobj, events)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8218}
{"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660}
{"snippet": "tarfile.GNU_FORMAT", "intent": "GNU tar format.", "question_id": 9910}
{"snippet": "DefaultCookiePolicy.strict_ns_unverifiable", "intent": "Apply RFC 2965 rules on unverifiable transactions even to Netscape cookies.", "question_id": 4548}
{"snippet": "shelve.Shelf(dict, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8247}
{"snippet": "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)", "intent": "Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , \u2026 `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .", "question_id": 7759}
{"snippet": "test_case.tearDown()", "intent": "Method called immediately after the test method has been called and the result recorded .", "question_id": 11366}
{"snippet": "decimal.remainder_near(other)", "intent": "Return the remainder from dividing self by `other` .", "question_id": 2466}
{"snippet": "inspect.trace()", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in .", "question_id": 5032}
{"snippet": "BaseHandler.http_error_<nnn>(req, fp, code, msg, hdrs)", "intent": "nnn should be a three-digit HTTP error `code` . With arguments `req`, `fp`, `msg`, `hdrs`.", "question_id": 11847}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "runpy.run_module(mod_name, init_globals=None)", "intent": "Execute the code of the specified module and return the resulting module globals dictionary . The `mod_name` argument should be an absolute module name . The optional dictionary argument `init_globals` may be used to pre-populate the module \u2019 s globals dictionary before the code is executed .", "question_id": 8103}
{"snippet": "Path.write_bytes(data)", "intent": "Open the file pointed to in bytes mode , write `data` to it , and close the file :", "question_id": 7322}
{"snippet": "pickle.Pickler(file, protocol=None, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . The optional `protocol` argument , an integer , tells the pickler to use the given protocol ; supported protocols are 0 to HIGHEST_PROTOCOL . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7393}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038}
{"snippet": "Path.exists()", "intent": "Whether the path points to an existing file or directory :", "question_id": 7269}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164}
{"snippet": "Node.normalize()", "intent": "Join adjacent text nodes so that all stretches of text are stored as single Text instances .", "question_id": 12334}
{"snippet": "turtle.turtles()", "intent": "Return the list of turtles on the screen .", "question_id": 11102}
{"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287}
{"snippet": "Dialect.lineterminator", "intent": "The string used to terminate lines produced by the writer.", "question_id": 1726}
{"snippet": "queue_listener.createLock()", "intent": "Initializes a thread lock which can be used to serialize access to underlying I/O functionality which may not be threadsafe .", "question_id": 5596}
{"snippet": "test.support.import_fresh_module(name, blocked=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . With arguments `name`.", "question_id": 10244}
{"snippet": "text_calendar.formatmonth(theyear, themonth)", "intent": "Return a month \u2019 s calendar in a multi-line string . With arguments `theyear`, `themonth`.", "question_id": 928}
{"snippet": "asyncio.SelectorEventLoop", "intent": "An event loop based on the selectors module.", "question_id": 342}
{"snippet": "null_translations.install()", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ .", "question_id": 4258}
{"snippet": "os.sync()", "intent": "Force write of everything to disk .", "question_id": 6955}
{"snippet": "curses.flash()", "intent": "Flash the screen .", "question_id": 1935}
{"snippet": "csv.excel_tab", "intent": "The excel_tab class defines the usual properties of an Excel-generated TAB-delimited file.", "question_id": 1712}
{"snippet": "socket.fileno()", "intent": "Return the socket \u2019 s file descriptor ( a small integer ) , or -1 on failure .", "question_id": 8680}
{"snippet": "os.ctermid()", "intent": "Return the filename corresponding to the controlling terminal of the process .", "question_id": 6657}
{"snippet": "loop.call_later(delay, callback, *args)", "intent": "Schedule `callback` to be called after the given `delay` number of seconds ( can be either an int or a float ) . With arguments `*args`.", "question_id": 193}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "Packer.reset()", "intent": "Resets the pack buffer to the empty string .", "question_id": 12274}
{"snippet": "os.path.expandvars(path)", "intent": "Return the argument with environment variables expanded . With arguments `path`.", "question_id": 7150}
{"snippet": "property(fget=None, doc=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value . And `doc` creates a docstring for the attribute .", "question_id": 4092}
{"snippet": "errno.ENOTTY", "intent": "Not a typewriter", "question_id": 3530}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484}
{"snippet": "errno.EINPROGRESS", "intent": "Operation now in progress", "question_id": 3620}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}
{"snippet": "Option.ALWAYS_TYPED_ACTIONS", "intent": "Actions that always take a type (i.e.", "question_id": 6654}
{"snippet": "aifc.tell()", "intent": "Return the current write position in the output file .", "question_id": 34}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`.", "question_id": 11728}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831}
{"snippet": "errno.EADDRINUSE", "intent": "Address already in use", "question_id": 3603}
{"snippet": "gettext.translation(domain)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "question_id": 4229}
{"snippet": "ssl.create_default_context()", "intent": "Return a new SSLContext object with default settings for the given `purpose` .", "question_id": 8863}
{"snippet": "readline.read_init_file(filename)", "intent": "Execute a readline initialization file . The default `filename` is the last filename used .", "question_id": 8016}
{"snippet": "calendar.isleap(year)", "intent": "Returns True if `year` is a leap year , otherwise False .", "question_id": 987}
{"snippet": "asyncio.sleep(delay)", "intent": "Block for `delay` seconds .", "question_id": 595}
{"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "mailbox.Error", "intent": "The based class for all other module-specific exceptions.", "question_id": 5856}
{"snippet": "fileinput.filelineno()", "intent": "Return the line number in the current file .", "question_id": 3795}
{"snippet": "cgitb.handler()", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) .", "question_id": 1073}
{"snippet": "xml.etree.ElementTree.iterparse(source, parser=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .", "question_id": 12444}
{"snippet": "Path.is_file()", "intent": "Return True if the path points to a regular file ( or a symbolic link pointing to a regular file ) , False if it points to another kind of file .", "question_id": 7274}
{"snippet": "test.support.check__all__(test_case, module, blacklist=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `blacklist` argument can be a set of names that must not be treated as part of the public API even though their names indicate otherwise . With arguments `test_case`.", "question_id": 10280}
{"snippet": "xml.etree.ElementTree.ProcessingInstruction(target)", "intent": "PI element factory . `target` is a string containing the PI target .", "question_id": 12448}
{"snippet": "auto.reason", "intent": "A string describing the specific codec error.", "question_id": 3675}
{"snippet": "DefaultCookiePolicy.DomainStrictNonDomain", "intent": "Cookies that did not explicitly specify a domain cookie-attribute can only be returned to a domain equal to the domain that set the cookie (eg.", "question_id": 4553}
{"snippet": "NNTP.quit()", "intent": "Send a QUIT command and close the connection .", "question_id": 6448}
{"snippet": "importlib.abc.Finder", "intent": "An abstract base class representing a finder.", "question_id": 4799}
{"snippet": "io.BytesIO()", "intent": "A stream implementation using an in-memory bytes buffer .", "question_id": 5110}
{"snippet": "mime_types.guess_extension(type)", "intent": "Similar to the guess_extension ( ) function , using the tables stored as part of the object . With arguments `type`.", "question_id": 5964}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "math.modf(x)", "intent": "Return the fractional and integer parts of `x` .", "question_id": 5902}
{"snippet": "sequence_matcher.get_grouped_opcodes()", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2685}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_SEQ", "intent": "Models which represent a series of models which follow one after the other are indicated with this model type.", "question_id": 7782}
{"snippet": "email.message.MIMEPart(policy=default)", "intent": "This class represents a subpart of a MIME message . With arguments `policy`.", "question_id": 3312}
{"snippet": "mock.mock_add_spec(spec)", "intent": "Add a `spec` to a mock .", "question_id": 11582}
{"snippet": "Wave_write.setsampwidth(n)", "intent": "Set the sample width to `n` bytes .", "question_id": 12066}
{"snippet": "queue_listener.prepare(record)", "intent": "Prepare a `record` for handling .", "question_id": 5560}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454}
{"snippet": "Dialect.doublequote", "intent": "Controls how instances of quotechar appearing inside a field should themselves be quoted.", "question_id": 1724}
{"snippet": "env_builder.setup_python(context)", "intent": "Creates a copy or symlink to the Python executable in the environment . With arguments `context`.", "question_id": 11985}
{"snippet": "widget.identify_region(x, y)", "intent": "Returns one of : With arguments `x`, `y`.", "question_id": 10637}
{"snippet": "@unittest.skip(reason)", "intent": "Unconditionally skip the decorated test . `reason` should describe why the test is being skipped .", "question_id": 11358}
{"snippet": "site.ENABLE_USER_SITE", "intent": "Flag showing the status of the user site-packages directory.", "question_id": 8403}
{"snippet": "abc.ABCMeta", "intent": "Metaclass for defining Abstract Base Classes (ABCs).", "question_id": 1}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "config_parser.read_string(string)", "intent": "Parse configuration data from a `string` .", "question_id": 1516}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "os.sched_get_priority_min(policy)", "intent": "Get the minimum priority value for `policy` .", "question_id": 7105}
{"snippet": "itertools.combinations_with_replacement(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` allowing individual elements to be repeated more than once .", "question_id": 5244}
{"snippet": "datetime.tzinfo", "intent": "The object passed as the tzinfo argument to the datetime constructor, or None if none was passed.", "question_id": 2279}
{"snippet": "epoll.poll(timeout=-1)", "intent": "Wait for events . `timeout` in seconds ( float )", "question_id": 8188}
{"snippet": "text_wrapper.expand_tabs", "intent": "(default: True) If true, then all tab characters in text will be expanded to spaces using the expandtabs() method of text.", "question_id": 10328}
{"snippet": "email.headerregistry.HeaderRegistry(base_class=BaseHeader)", "intent": "This is the factory used by EmailPolicy by default . HeaderRegistry builds the class used to create a header instance dynamically , using `base_class` and a specialized class retrieved from a registry that it holds .", "question_id": 3176}
{"snippet": "mh.pack()", "intent": "Rename messages in the mailbox as necessary to eliminate gaps in numbering .", "question_id": 5785}
{"snippet": "Repr.maxdict", "intent": "Limits on the number of entries represented for the named object type.", "question_id": 8056}
{"snippet": "errno.EXDEV", "intent": "Cross-device link", "question_id": 3523}
{"snippet": "test.support.TESTFN_UNENCODABLE", "intent": "Set to a filename (str type) that should not be able to be encoded by file system encoding in strict mode.", "question_id": 10118}
{"snippet": "datetime.utcnow()", "intent": "Return the current UTC date and time , with tzinfo None .", "question_id": 2260}
{"snippet": "profile.Profile(timer=None)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument .", "question_id": 7670}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "tracemalloc.clear_traces()", "intent": "Clear traces of memory blocks allocated by Python .", "question_id": 10841}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488}
{"snippet": "abstract_event_loop_policy.get_event_loop()", "intent": "Get the event loop for the current context .", "question_id": 375}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232}
{"snippet": "tracemalloc.Traceback", "intent": "Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "question_id": 10894}
{"snippet": "completed_process.args", "intent": "The arguments used to launch the process.", "question_id": 9578}
{"snippet": "loop.sock_sendfile(sock, file, offset=0)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket . `offset` tells from where to start reading the file .", "question_id": 282}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "pickle.Pickler(file, protocol=None, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . The optional `protocol` argument , an integer , tells the pickler to use the given protocol ; supported protocols are 0 to HIGHEST_PROTOCOL . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7393}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "xml.sax.handler.all_properties", "intent": "List of all known property names.", "question_id": 12569}
{"snippet": "pyc_invalidation_mode.CHECKED_HASH", "intent": "The .pyc file includes a hash of the source file content, which Python will compare against the source at runtime to determine if the .pyc file needs to be regenerated.", "question_id": 7833}
{"snippet": "errno.EBADR", "intent": "Invalid request descriptor", "question_id": 3558}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "calendar.HTMLCalendar()", "intent": "This class can be used to generate HTML calendars .", "question_id": 956}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084}
{"snippet": "re.sub(pattern, repl, string)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` .", "question_id": 7951}
{"snippet": "traceback.format_list(extracted_list)", "intent": "Given a list of tuples or FrameSummary objects as returned by extract_tb ( ) or extract_stack ( ) , return a list of strings ready for printing . With arguments `extracted_list`.", "question_id": 10775}
{"snippet": "struct.Struct(format)", "intent": "Return a new Struct object which writes and reads binary data according to the `format` string format .", "question_id": 9558}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136}
{"snippet": "asyncio.Task(coro)", "intent": "A Future-like object that runs a Python coroutine . With arguments `coro`.", "question_id": 624}
{"snippet": "errno.EPIPE", "intent": "Broken pipe", "question_id": 3537}
{"snippet": "errno.EALREADY", "intent": "Operation already in progress", "question_id": 3619}
{"snippet": "DefaultCookiePolicy.strict_rfc2965_unverifiable", "intent": "Follow RFC 2965 rules on unverifiable transactions (usually, an unverifiable transaction is one resulting from a redirect or a request for an image hosted on another site).", "question_id": 4547}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543}
{"snippet": "unicodedata.lookup(name)", "intent": "Look up character by `name` .", "question_id": 11340}
{"snippet": "errno.EROFS", "intent": "Read-only file system", "question_id": 3535}
{"snippet": "shutil.copystat(src, dst)", "intent": "Copy the permission bits , last access time , last modification time , and flags from `src` to `dst` .", "question_id": 8316}
{"snippet": "secrets.token_bytes()", "intent": "Return a random byte string containing `nbytes` number of bytes .", "question_id": 8135}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952}
{"snippet": "wsgiref.util.request_uri(environ, include_query=True)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . If `include_query` is false , the query string is not included in the resulting URI . With arguments `environ`.", "question_id": 12212}
{"snippet": "traceback.format_exc()", "intent": "This is like print_exc ( `limit` ) but returns a string instead of printing to a file .", "question_id": 10781}
{"snippet": "subprocess.PIPE", "intent": "Special value that can be used as the stdin, stdout or stderr argument to Popen and indicates that a pipe to the standard stream should be opened.", "question_id": 9584}
{"snippet": "queue.SimpleQueue", "intent": "Constructor for an unbounded FIFO queue.", "question_id": 7843}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009}
{"snippet": "bound_arguments.apply_defaults()", "intent": "Set default values for missing arguments .", "question_id": 5007}
{"snippet": "traceback.print_tb(tb, file=None)", "intent": "Print up to `limit` stack trace entries from traceback object `tb` ( starting from the caller \u2019 s frame ) if limit is positive . If `file` is omitted or None , the output goes to sys.stderr ; otherwise it should be an open file or file-like object to receive the output .", "question_id": 10735}
{"snippet": "Match.group(group1)", "intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "question_id": 7996}
{"snippet": "dircmp.report_partial_closure()", "intent": "Print a comparison between a and b and common immediate subdirectories .", "question_id": 3765}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "test.support.TestHandler(logging.handlers.BufferingHandler)", "intent": "Class for logging support . With arguments `logging.handlers.BufferingHandler`.", "question_id": 10297}
{"snippet": "tkinter.tix.LabelEntry", "intent": "The LabelEntry widget packages an entry widget and a label into one mega widget.", "question_id": 10556}
{"snippet": "turtle.shape()", "intent": "Set turtle shape to shape with given `name` or , if name is not given , return name of current shape .", "question_id": 10982}
{"snippet": "finder.find_module(fullname)", "intent": "An abstract method for finding a loader for the specified module . With arguments `fullname`.", "question_id": 4800}
{"snippet": "cmath.acosh(x)", "intent": "Return the inverse hyperbolic cosine of `x` .", "question_id": 1107}
{"snippet": "fraction.numerator", "intent": "Numerator of the Fraction in lowest term.", "question_id": 3867}
{"snippet": "resource.RLIMIT_VMEM", "intent": "The largest area of mapped memory which the process may occupy.", "question_id": 8085}
{"snippet": "window.timeout(delay)", "intent": "Set blocking or non-blocking read behavior for the window . If `delay` is negative , blocking read is used ( which will wait indefinitely for input ) .", "question_id": 2124}
{"snippet": "nntplib.NNTP(host)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port .", "question_id": 6409}
{"snippet": "inspect.Parameter(name, kind, annotation=Parameter.empty)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`, `annotation`.", "question_id": 4995}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868}
{"snippet": "group.addresses", "intent": "A possibly empty tuple of Address objects representing the addresses in the group.", "question_id": 3206}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "cgitb.handler()", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) .", "question_id": 1073}
{"snippet": "test.support.script_helper.run_python_until_end(*args, **env_vars)", "intent": "Set up the environment based on env_vars for running the interpreter in a subprocess . With arguments `*args`, `**env_vars`.", "question_id": 10300}
{"snippet": "curses.endwin()", "intent": "De-initialize the library , and return terminal to normal status .", "question_id": 1932}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}
{"snippet": "window.touchwin()", "intent": "Pretend the whole window has been changed , for purposes of drawing optimizations .", "question_id": 2127}
{"snippet": "plistlib.FMT_XML", "intent": "The XML format for plist files.", "question_id": 7584}
{"snippet": "tree_builder.start(tag, attrs)", "intent": "Opens a new element . `tag` is the element name . `attrs` is a dictionary containing element attributes .", "question_id": 12544}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}
{"snippet": "sndhdr.what(filename)", "intent": "Determines the type of sound data stored in the file `filename` using whathdr ( ) .", "question_id": 8549}
{"snippet": "os.strerror(code)", "intent": "Return the error message corresponding to the error `code` in code .", "question_id": 6707}
{"snippet": "email.headerregistry.AddressHeader", "intent": "Address headers are one of the most complex structured header types.", "question_id": 3158}
{"snippet": "mailcap.getcaps()", "intent": "Returns a dictionary mapping MIME types to a list of mailcap file entries .", "question_id": 5877}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435}
{"snippet": "collections.abc.MappingView", "intent": "ABCs for mapping, items, keys, and values views.", "question_id": 1326}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081}
{"snippet": "csvreader.line_num", "intent": "The number of lines read from the source iterator.", "question_id": 1733}
{"snippet": "ArgumentParser.format_usage()", "intent": "Return a string containing a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 107}
{"snippet": "Panel.move(y, x)", "intent": "Move the panel to the screen coordinates ( `y` , `x` ) .", "question_id": 2150}
{"snippet": "traceback_exception.format_exception_only()", "intent": "Format the exception part of the traceback .", "question_id": 10822}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "window.echochar(ch, attr)", "intent": "Add character `ch` with attribute `attr` , and immediately call refresh ( ) on the window .", "question_id": 2044}
{"snippet": "chunk.getname()", "intent": "Returns the name ( ID ) of the chunk .", "question_id": 1083}
{"snippet": "tracemalloc.clear_traces()", "intent": "Clear traces of memory blocks allocated by Python .", "question_id": 10841}
{"snippet": "email.mime.audio.MIMEAudio(_audiodata, **_params, _subtype=None)", "intent": "Module : email.mime.audio `_audiodata` is a string containing the raw audio data . Otherwise you can explicitly specify the audio subtype via the `_subtype` argument . With arguments `**_params`.", "question_id": 3335}
{"snippet": "NodeList.length", "intent": "The number of nodes in the sequence.", "question_id": 12337}
{"snippet": "zipimporter.load_module(fullname)", "intent": "Load the module specified by `fullname` .", "question_id": 12889}
{"snippet": "@test.support.bigmemtest(size, memuse)", "intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it .", "question_id": 10227}
{"snippet": "multiprocessing.active_children()", "intent": "Return list of all live children of the current process .", "question_id": 6219}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "task.get_stack(limit=None)", "intent": "Return the list of stack frames for this Task . The optional `limit` argument sets the maximum number of frames to return ; by default all available frames are returned .", "question_id": 635}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2805}
{"snippet": "re.sub(pattern, repl, string, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . With arguments `flags`.", "question_id": 7953}
{"snippet": "decimal.normalize(context=None)", "intent": "Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal ( ' 0 ' ) to Decimal ( '0e0 ' ) . With arguments `context`.", "question_id": 2458}
{"snippet": "test_case.assertMultiLineEqual(first, second, msg=None)", "intent": "Test that the multiline string `first` is equal to the string `second` . With arguments `msg`.", "question_id": 11449}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956}
{"snippet": "context.copy()", "intent": "Return a duplicate of the context .", "question_id": 2511}
{"snippet": "HTTPConnection.getresponse()", "intent": "Should be called after a request is sent to get the response from the server .", "question_id": 4435}
{"snippet": "mock.call_count", "intent": "An integer telling you how many times the mock object has been called:", "question_id": 11589}
{"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}
{"snippet": "os.makedirs(name, mode=0o777, exist_ok=False)", "intent": "Recursive directory creation function . The `mode` parameter is passed to mkdir ( ) for creating the leaf directory ; see the mkdir ( ) description for how it is interpreted . If `exist_ok` is False ( the default ) , an FileExistsError is raised if the target directory already exists . With arguments `name`.", "question_id": 6869}
{"snippet": "window.insdelln(nlines)", "intent": "Insert `nlines` lines into the specified window above the current line .", "question_id": 2075}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}
{"snippet": "oss_audio_device.nonblock()", "intent": "Put the device into non-blocking mode .", "question_id": 7183}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "symbol_table.has_children()", "intent": "Return True if the block has nested namespaces within it .", "question_id": 9740}
{"snippet": "io.BlockingIOError", "intent": "This is a compatibility alias for the builtin BlockingIOError exception.", "question_id": 5061}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}
{"snippet": "array.typecode", "intent": "The typecode character used to create the array.", "question_id": 118}
{"snippet": "gettext.install(domain, names=None)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) . For the `names` parameter , please see the description of the translation object \u2019 s install ( ) method .", "question_id": 4242}
{"snippet": "test.support.TESTFN_UNENCODABLE", "intent": "Set to a filename (str type) that should not be able to be encoded by file system encoding in strict mode.", "question_id": 10118}
{"snippet": "site.USER_SITE", "intent": "Path to the user site-packages for the running Python.", "question_id": 8404}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "task.add_done_callback(callback, context=None)", "intent": "Add a `callback` to be run when the Task is done . With arguments `context`.", "question_id": 632}
{"snippet": "window.insch(ch, attr)", "intent": "Paint character `ch` at ( y , x ) with attributes `attr` , moving the line from position x right by one character .", "question_id": 2071}
{"snippet": "test.support.set_memlimit(limit)", "intent": "Set the values for max_memuse and real_max_memuse for big memory tests . With arguments `limit`.", "question_id": 10167}
{"snippet": "tixCommand.tix_filedialog()", "intent": "Returns the file selection dialog that may be shared among different calls from this application .", "question_id": 10586}
{"snippet": "socket.inet_pton(address_family, ip_string)", "intent": "Convert an IP address from its family-specific string format to a packed , binary format . Supported values for `address_family` are currently AF_INET and AF_INET6 . If the IP address string `ip_string` is invalid , OSError will be raised .", "question_id": 8663}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458}
{"snippet": "xml.etree.ElementTree.XMLID(text)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data .", "question_id": 12471}
{"snippet": "element.tag", "intent": "A string identifying what kind of data this element represents (the element type, in other words).", "question_id": 12479}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "ur_lopener.open(fullurl)", "intent": "Open `fullurl` using the appropriate protocol .", "question_id": 11892}
{"snippet": "platform.python_implementation()", "intent": "Returns a string identifying the Python implementation .", "question_id": 7476}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "InteractiveConsole.interact(exitmsg=None)", "intent": "Closely emulate the interactive Python console . The optional `exitmsg` argument specifies an exit message printed when exiting .", "question_id": 1186}
{"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra, attrib={})", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12452}
{"snippet": "simple_http_request_handler.do_HEAD()", "intent": "This method serves the 'HEAD ' request type : it sends the headers it would send for the equivalent GET request .", "question_id": 4664}
{"snippet": "logging.getLevelName(level)", "intent": "Returns the textual representation of logging `level` level .", "question_id": 5647}
{"snippet": "typing.Any", "intent": "Special type indicating an unconstrained type.", "question_id": 11331}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "memory_handler.flush()", "intent": "For a MemoryHandler , flushing means just sending the buffered records to the target , if there is one .", "question_id": 5538}
{"snippet": "socket.getfqdn(name)", "intent": "Return a fully qualified domain `name` for name .", "question_id": 8645}
{"snippet": "string.ascii_uppercase", "intent": "The uppercase letters 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "question_id": 9509}
{"snippet": "xml.sax.handler.all_features", "intent": "List of all features.", "question_id": 12568}
{"snippet": "copyreg.pickle(type, function)", "intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type .", "question_id": 1666}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435}
{"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919}
{"snippet": "str.capitalize()", "intent": "Return a copy of the string with its first character capitalized and the rest lowercased .", "question_id": 9178}
{"snippet": "shelve.Shelf(dict, writeback=False, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8250}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}
{"snippet": "message.get_content_type()", "intent": "Return the message \u2019 s content type .", "question_id": 2978}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}
{"snippet": "sys.get_coroutine_origin_tracking_depth()", "intent": "Get the current coroutine origin tracking depth , as set by set_coroutine_origin_tracking_depth ( ) .", "question_id": 9811}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009}
{"snippet": "xml.dom.getDOMImplementation()", "intent": "Return a suitable DOM implementation .", "question_id": 12303}
{"snippet": "curses.has_il()", "intent": "Return True if the terminal has insert- and delete-line capabilities , or can simulate them using scrolling regions .", "question_id": 1942}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "message.get_all(name)", "intent": "Return a list of all the values for the field named `name` .", "question_id": 2974}
{"snippet": "os.fstat(fd)", "intent": "Get the status of the file descriptor `fd` .", "question_id": 6723}
{"snippet": "Path.touch()", "intent": "Create a file at this given path .", "question_id": 7317}
{"snippet": "numbers.Real", "intent": "To Complex, Real adds the operations that work on real numbers.", "question_id": 6508}
{"snippet": "formatter.DumbWriter(maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3857}
{"snippet": "str.join(iterable)", "intent": "Return a string which is the concatenation of the strings in `iterable` .", "question_id": 9214}
{"snippet": "writer.send_flowing_data(data)", "intent": "Output character `data` which may be word-wrapped and re-flowed as needed .", "question_id": 3850}
{"snippet": "stringprep.in_table_c6(code)", "intent": "Determine whether `code` is in tableC.6 ( Inappropriate for plain text ) .", "question_id": 9544}
{"snippet": "multiprocessing.sharedctypes.copy(obj)", "intent": "Return a ctypes object allocated from shared memory which is a copy of the ctypes object `obj` .", "question_id": 6275}
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564}
{"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}
{"snippet": "shutil.unregister_archive_format(name)", "intent": "Remove the archive format `name` from the list of supported formats .", "question_id": 8362}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "importlib.import_module(name, package=None)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g . If the name is specified in relative terms , then the `package` argument must be set to the name of the package which is to act as the anchor for resolving the package name ( e.g .", "question_id": 4794}
{"snippet": "hashlib.algorithms_available", "intent": "A set containing the names of the hash algorithms that are available in the running Python interpreter.", "question_id": 4300}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466}
{"snippet": "cgitb.handler()", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) .", "question_id": 1073}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892}
{"snippet": "sysconfig.is_python_build()", "intent": "Return True if the running Python interpreter was built from source and is being run from its built location , and not from a location resulting from e.g .", "question_id": 9872}
{"snippet": "non_callable_magic_mock.code", "intent": "An HTTP status code as defined in RFC 2616.", "question_id": 11661}
{"snippet": "chunk.read()", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1090}
{"snippet": "ctypes.c_int32", "intent": "Represents the C 32-bit signed int datatype.", "question_id": 1864}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139}
{"snippet": "logging.Formatter(fmt=None, style='%')", "intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5615}
{"snippet": "email.message_from_string(s)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) .", "question_id": 3404}
{"snippet": "turtle.showturtle()", "intent": "Make the turtle visible .", "question_id": 10979}
{"snippet": "asyncio.ensure_future(obj)", "intent": "Return : If `obj` is neither of the above a TypeError is raised .", "question_id": 355}
{"snippet": "modulefinder.ModuleFinder(excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6028}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164}
{"snippet": "bound_arguments.apply_defaults()", "intent": "Set default values for missing arguments .", "question_id": 5007}
{"snippet": "mock.call_count", "intent": "An integer telling you how many times the mock object has been called:", "question_id": 11589}
{"snippet": "queue_listener.format(record)", "intent": "Do formatting for a `record` - if a formatter is set , use it .", "question_id": 5608}
{"snippet": "asyncio.current_task()", "intent": "Return the currently running Task instance , or None if no task is running .", "question_id": 620}
{"snippet": "signal.NSIG", "intent": "One more than the number of the highest signal number.", "question_id": 8378}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "asyncio.BufferedProtocol(BaseProtocol)", "intent": "A base class for implementing streaming protocols with manual control of the receive buffer . With arguments `BaseProtocol`.", "question_id": 428}
{"snippet": "tracemalloc.take_snapshot()", "intent": "Take a snapshot of traces of memory blocks allocated by Python .", "question_id": 10850}
{"snippet": "shutil.which(cmd, mode=os.F_OK | os.X_OK)", "intent": "Return the `path` to an executable which would be run if the given `cmd` was called . `mode` is a permission mask passed to os.access ( ) , by default determining if the file exists and executable .", "question_id": 8346}
{"snippet": "urllib.request.DataHandler", "intent": "Open data URLs.", "question_id": 11811}
{"snippet": "math.acos(x)", "intent": "Return the arc cosine of `x` , in radians .", "question_id": 5914}
{"snippet": "Document.createAttribute(name)", "intent": "Create and return an attribute node . With arguments `name`.", "question_id": 12350}
{"snippet": "test.support.wait_threads_exit()", "intent": "Context manager to wait until all threads created in the with statement exit .", "question_id": 10196}
{"snippet": "socket.getnameinfo(sockaddr, flags)", "intent": "Translate a socket address `sockaddr` into a 2-tuple ( host , port ) . Depending on the settings of `flags` , the result can contain a fully-qualified domain name or numeric address representation in host .", "question_id": 8651}
{"snippet": "bytes.lower()", "intent": "Return a copy of the sequence with all the uppercase ASCII characters converted to their corresponding lowercase counterpart .", "question_id": 9397}
{"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "connection.isolation_level", "intent": "Get or set the current default isolation level.", "question_id": 8804}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}
{"snippet": "path_finder.find_spec(fullname)", "intent": "Class method that attempts to find a spec for the module specified by `fullname` on sys.path or , if defined , on `path` .", "question_id": 4875}
{"snippet": "shlex.wordchars", "intent": "The string of characters that will accumulate into multi-character tokens.", "question_id": 8295}
{"snippet": "xml.dom.XML_NAMESPACE", "intent": "The namespace URI associated with the reserved prefix xml, as defined by Namespaces in XML (section 4).", "question_id": 12308}
{"snippet": "DefaultCookiePolicy.strict_rfc2965_unverifiable", "intent": "Follow RFC 2965 rules on unverifiable transactions (usually, an unverifiable transaction is one resulting from a redirect or a request for an image hosted on another site).", "question_id": 4547}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478}
{"snippet": "future.add_done_callback(callback, context=None)", "intent": "Add a `callback` to be run when the Future is done . An optional keyword-only `context` argument allows specifying a custom contextvars.Context for the callback to run in .", "question_id": 367}
{"snippet": "turtle.tiltangle(angle=None)", "intent": "Set or return the current tilt-angle . If `angle` is given , rotate the turtleshape to point in the direction specified by angle , regardless of its current tilt-angle .", "question_id": 11007}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "typing.get_type_hints(obj)", "intent": "Return a dictionary containing type hints for a function , method , module or class object . With arguments `obj`.", "question_id": 11326}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827}
{"snippet": "symbol_table.is_optimized()", "intent": "Return True if the locals in this table can be optimized .", "question_id": 9738}
{"snippet": "decimal.Decimal(context=None)", "intent": "Construct a new Decimal object based from `value` . The `context` precision does not affect how many digits are stored .", "question_id": 2393}
{"snippet": "doctest.REPORT_UDIFF", "intent": "When specified, failures that involve multi-line expected and actual outputs are displayed using a unified diff.", "question_id": 2759}
{"snippet": "time.CLOCK_THREAD_CPUTIME_ID", "intent": "Thread-specific CPU-time clock.", "question_id": 10469}
{"snippet": "doctest.REPORT_UDIFF", "intent": "When specified, failures that involve multi-line expected and actual outputs are displayed using a unified diff.", "question_id": 2759}
{"snippet": "tkinter.ttk.Style", "intent": "This class is used to manipulate the style database.", "question_id": 10672}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}
{"snippet": "gc.set_threshold(threshold0)", "intent": "Set the garbage collection thresholds ( the collection frequency ) . Setting `threshold0` to zero disables collection .", "question_id": 4178}
{"snippet": "socket.fileno()", "intent": "Return the socket \u2019 s file descriptor ( a small integer ) , or -1 on failure .", "question_id": 8680}
{"snippet": "typing.Collection(Sized)", "intent": "A generic version of collections.abc.Collection With arguments `Sized`.", "question_id": 11251}
{"snippet": "cmd.Cmd(completekey='tab')", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab .", "question_id": 1128}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493}
{"snippet": "configparser.ConfigParser(':'), ';'), dict_type=collections.OrderedDict)", "intent": "The main configuration parser . When `dict_type` is given , it will be used to create the dictionary objects for the list of sections , for the options within a section , and for the default values . With arguments `':')`, `';')`.", "question_id": 1498}
{"snippet": "asyncio.sleep(delay, loop=None)", "intent": "Block for `delay` seconds . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 597}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136}
{"snippet": "ssl.SSLObject", "intent": "A reduced-scope variant of SSLSocket representing an SSL protocol instance that does not contain any network IO methods.", "question_id": 9052}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "modulefinder.ReplacePackage(oldname, newname)", "intent": "Allows specifying that the module named `oldname` is in fact the package named `newname` .", "question_id": 6024}
{"snippet": "os.path.split(path)", "intent": "Split the pathname `path` into a pair , ( head , tail ) where tail is the last pathname component and head is everything leading up to that .", "question_id": 7169}
{"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}
{"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "math.pi", "intent": "The mathematical constant \u03c0 = 3.141592\u2026, to available precision.", "question_id": 5934}
{"snippet": "locale.NOEXPR", "intent": "Get a regular expression that can be used with the regex(3) function to recognize a negative response to a yes/no question.", "question_id": 5366}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}
{"snippet": "errno.errorcode", "intent": "Dictionary providing a mapping from the errno value to the string name in the underlying system.", "question_id": 3505}
{"snippet": "TarInfo.tobuf()", "intent": "Create a string buffer from a TarInfo object .", "question_id": 9973}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "calendar.itermonthdays(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 913}
{"snippet": "test.support.script_helper.run_python_until_end(*args, **env_vars)", "intent": "Set up the environment based on env_vars for running the interpreter in a subprocess . With arguments `*args`, `**env_vars`.", "question_id": 10300}
{"snippet": "widget.see(item)", "intent": "Ensure that `item` is visible .", "question_id": 10649}
{"snippet": "turtle.clear()", "intent": "Delete all drawings and all turtles from the TurtleScreen .", "question_id": 11043}
{"snippet": "smtp_channel.mailfrom", "intent": "Holds a string containing the address identified in the \u201cMAIL FROM:\u201d line from the client.", "question_id": 8443}
{"snippet": "@typing.type_check_only", "intent": "Decorator to mark a class or function to be unavailable at runtime.", "question_id": 11330}
{"snippet": "curses.has_colors()", "intent": "Return True if the terminal can display colors ; otherwise , return False .", "question_id": 1940}
{"snippet": "multiprocessing.SimpleQueue", "intent": "It is a simplified Queue type, very close to a locked Pipe.", "question_id": 6211}
{"snippet": "Path.iterdir()", "intent": "When the path points to a directory , yield path objects of the directory contents :", "question_id": 7281}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221}
{"snippet": "stat_result.st_birthtime", "intent": "Time of file creation.", "question_id": 6940}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "Request.data", "intent": "The entity body for the request, or None if not specified.", "question_id": 11821}
{"snippet": "sys.call_tracing(func, args)", "intent": "Call `func` ( *args ) , while tracing is enabled . With arguments `args`.", "question_id": 9772}
{"snippet": "sys_log_handler.mapPriority(levelname)", "intent": "Maps a logging level name to a syslog priority name . With arguments `levelname`.", "question_id": 5505}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "date.isoformat()", "intent": "Return a string representing the date in ISO 8601 format , \u2018 YYYY-MM-DD \u2019 .", "question_id": 2242}
{"snippet": "itertools.product(*iterables)", "intent": "Cartesian product of input iterables . With arguments `*iterables`.", "question_id": 5260}
{"snippet": "readline.get_line_buffer()", "intent": "Return the current contents of the line buffer ( rl_line_buffer in the underlying library ) .", "question_id": 8018}
{"snippet": "Packer.pack_opaque(data)", "intent": "Packs a variable length opaque `data` string , similarly to pack_string ( ) .", "question_id": 12280}
{"snippet": "stat_result.st_blksize", "intent": "\u201cPreferred\u201d blocksize for efficient file system I/O.", "question_id": 6936}
{"snippet": "lzma.is_check_supported(check)", "intent": "Returns true if the given integrity `check` is supported on this system .", "question_id": 5722}
{"snippet": "concurrent.futures.ProcessPoolExecutor()", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes .", "question_id": 1457}
{"snippet": "mock.reset_mock()", "intent": "The reset_mock method resets all the call attributes on a mock object :", "question_id": 11578}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "trace.run(cmd)", "intent": "Execute the command and gather statistics from the execution with the current tracing parameters . `cmd` must be a string or code object , suitable for passing into exec ( ) .", "question_id": 10716}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}
{"snippet": "Document.getElementsByTagName(tagName)", "intent": "Search for all descendants ( direct children , children \u2019 s children , etc . ) With arguments `tagName`.", "question_id": 12352}
{"snippet": "inspect.getmembers(object)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name .", "question_id": 4946}
{"snippet": "mh.get_file(key)", "intent": "Depending upon the host platform , it may not be possible to remove the underlying message while the returned file remains open . With arguments `key`.", "question_id": 5791}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "platform.libc_ver(chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7541}
{"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511}
{"snippet": "sunau.AUDIO_FILE_MAGIC", "intent": "An integer every valid Sun AU file begins with, stored in big-endian form.", "question_id": 9694}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458}
{"snippet": "zipfile.ZipFile(file, mode='r', compresslevel=None)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "question_id": 12799}
{"snippet": "oss_audio_device.setparameters(format, nchannels, samplerate)", "intent": "Set the key audio sampling parameters\u2014sample `format` , number of channels , and sampling rate\u2014in one method call . format , `nchannels` , and `samplerate` should be as specified in the setfmt ( ) , channels ( ) , and speed ( ) methods .", "question_id": 7191}
{"snippet": "NNTP.help()", "intent": "Send a HELP command .", "question_id": 6474}
{"snippet": "window.border()", "intent": "Draw a border around the edges of the window .", "question_id": 2027}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271}
{"snippet": "mh.get_sequences()", "intent": "Return a dictionary of sequence names mapped to key lists .", "question_id": 5783}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "xmlparser.EndCdataSectionHandler()", "intent": "Called at the end of a CDATA section .", "question_id": 7771}
{"snippet": "SO_*", "intent": "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module.", "question_id": 8565}
{"snippet": "turtle.shapetransform(t11=None, t22=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 . The determinant t11 * `t22` - t12 * t21 must not be zero , otherwise an error is raised .", "question_id": 11015}
{"snippet": "auto.start", "intent": "The first index of invalid data in object.", "question_id": 3677}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020}
{"snippet": "Function.children", "intent": "A dictionary mapping names to descriptors for nested functions and classes.", "question_id": 7715}
{"snippet": "socket.socketpair(family, type)", "intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "question_id": 8624}
{"snippet": "typing.TypeVar", "intent": "Type variable.", "question_id": 11229}
{"snippet": "base_http_request_handler.responses", "intent": "This attribute contains a mapping of error code integers to two-element tuples containing a short and long message.", "question_id": 4633}
{"snippet": "fraction.__round__()", "intent": "The first version returns the nearest int to self , rounding half to even .", "question_id": 3875}
{"snippet": "tkinter.ttk.Style", "intent": "This class is used to manipulate the style database.", "question_id": 10672}
{"snippet": "aifc.getmarkers()", "intent": "Return a list of markers in the audio file .", "question_id": 18}
{"snippet": "Node.childNodes", "intent": "A list of nodes contained within this node.", "question_id": 12319}
{"snippet": "socket.create_connection(address, timeout)", "intent": "Connect to a TCP service listening on the Internet `address` ( a 2-tuple ( host , port ) ) , and return the socket object . Passing the optional `timeout` parameter will set the timeout on the socket instance before attempting to connect .", "question_id": 8628}
{"snippet": "simple_http_request_handler.directory", "intent": "If not specified, the directory to serve is the current working directory.", "question_id": 4663}
{"snippet": "doctest.DocTestSuite(globs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "question_id": 2808}
{"snippet": "signal.CTRL_C_EVENT", "intent": "The signal corresponding to the Ctrl+C keystroke event.", "question_id": 8376}
{"snippet": "date.fromisoformat(date_string)", "intent": "Return a date corresponding to a `date_string` in the format emitted by date.isoformat ( ) .", "question_id": 2222}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "stringprep.in_table_c3(code)", "intent": "Determine whether `code` is in tableC.3 ( Private use ) .", "question_id": 9541}
{"snippet": "socket.SocketType", "intent": "This is a Python type object that represents the socket object type.", "question_id": 8633}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513}
{"snippet": "auto.winerror", "intent": "Under Windows, this gives you the native Windows error code.", "question_id": 3655}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "io.RawIOBase", "intent": "Base class for raw binary I/O.", "question_id": 5083}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}
{"snippet": "re.L", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7929}
{"snippet": "policy.header_store_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` provided by the application program when the application program is modifying a Message programmatically ( as opposed to a Message created by a parser ) .", "question_id": 3424}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983}
{"snippet": "readline.redisplay()", "intent": "Change what \u2019 s displayed on the screen to reflect the current contents of the line buffer .", "question_id": 8020}
{"snippet": "queue_listener.debug(msg, *args, **kwargs)", "intent": "Logs a message with level DEBUG on this logger . The `msg` is the message format string , and the args are the arguments which are merged into msg using the string formatting operator . With arguments `*args`, `**kwargs`.", "question_id": 5570}
{"snippet": "Cookie.discard", "intent": "True if this is a session cookie.", "question_id": 4564}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING", "intent": "A behavioral change was requested after parsing started that can only be changed before parsing has started.", "question_id": 7809}
{"snippet": "cursor.fetchone()", "intent": "Fetches the next row of a query result set , returning a single sequence , or None when no more data is available .", "question_id": 8844}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "winreg.REG_DWORD_LITTLE_ENDIAN", "intent": "A 32-bit number in little-endian format.", "question_id": 12176}
{"snippet": "sys.getrecursionlimit()", "intent": "Return the current value of the recursion limit , the maximum depth of the Python interpreter stack .", "question_id": 9801}
{"snippet": "DocTestFailure.test", "intent": "The DocTest object that was being run when the example failed.", "question_id": 2903}
{"snippet": "tkinter.tix.LabelFrame", "intent": "The LabelFrame widget packages a frame widget and a label into one mega widget.", "question_id": 10557}
{"snippet": "xml.sax.saxutils.XMLGenerator(short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12661}
{"snippet": "contextvars.ContextVar(name)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes .", "question_id": 1638}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "urllib.parse.parse_qs(qs, keep_blank_values=False, encoding='utf-8')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . The optional `encoding` and errors parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method . With arguments `qs`.", "question_id": 11676}
{"snippet": "base_request_handler.handle()", "intent": "This function must do all the work required to service a request .", "question_id": 8785}
{"snippet": "context.divmod(x, y)", "intent": "Divides two numbers and returns the integer part of the result . With arguments `x`, `y`.", "question_id": 2529}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "time.thread_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current thread .", "question_id": 10459}
{"snippet": "locale.LC_NUMERIC", "intent": "Locale category for formatting numbers.", "question_id": 5409}
{"snippet": "time.CLOCK_UPTIME", "intent": "Time whose absolute value is the time the system has been running and not suspended, providing accurate uptime measurement, both absolute and interval.", "question_id": 10470}
{"snippet": "window.leaveok(flag)", "intent": "If `flag` is True , cursor is left where it is on update , instead of being at \u201c cursor position. \u201d This reduces cursor movement where possible .", "question_id": 2092}
{"snippet": "locale.getpreferredencoding()", "intent": "Return the encoding used for text data , according to user preferences .", "question_id": 5377}
{"snippet": "async_exit_stack.aclose()", "intent": "Similar to close ( ) but properly handles awaitables .", "question_id": 1636}
{"snippet": "logging.config.stopListening()", "intent": "Stops the listening server which was created with a call to listen ( ) .", "question_id": 5420}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038}
{"snippet": "site.USER_SITE", "intent": "Path to the user site-packages for the running Python.", "question_id": 8404}
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910}
{"snippet": "divmod(a, b)", "intent": "Take two ( non complex ) numbers as arguments and return `a` pair of numbers consisting of their quotient and remainder when using integer division . For integers , the result is the same as ( a // `b` , a % b ) .", "question_id": 4009}
{"snippet": "HTTPConnection.request(method, url, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4430}
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763}
{"snippet": "Popen.poll()", "intent": "Check if child process has terminated .", "question_id": 9609}
{"snippet": "AU_read.getframerate()", "intent": "Returns sampling frequency .", "question_id": 9710}
{"snippet": "xmlparser.ParseFile(file)", "intent": "Parse XML data reading from the object `file` .", "question_id": 7734}
{"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}
{"snippet": "errno.EMFILE", "intent": "Too many open files", "question_id": 3529}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}
{"snippet": "unittest.removeHandler()", "intent": "When called without arguments this `function` removes the control-c handler if it has been installed .", "question_id": 11558}
{"snippet": "socketserver.ForkingTCPServer", "intent": "These classes are pre-defined using the mix-in classes.", "question_id": 8755}
{"snippet": "i_pv4_address.packed", "intent": "The binary representation of this address - a bytes object of the appropriate length (most significant octet first).", "question_id": 5178}
{"snippet": "test_case.assertMultiLineEqual(first, second)", "intent": "Test that the multiline string `first` is equal to the string `second` .", "question_id": 11448}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "socket.getnameinfo(sockaddr, flags)", "intent": "Translate a socket address `sockaddr` into a 2-tuple ( host , port ) . Depending on the settings of `flags` , the result can contain a fully-qualified domain name or numeric address representation in host .", "question_id": 8651}
{"snippet": "queue.join()", "intent": "Block until all items in the queue have been received and processed .", "question_id": 454}
{"snippet": "os.RWF_HIPRI", "intent": "High priority read/write.", "question_id": 6787}
{"snippet": "zipfile.BadZipfile", "intent": "Alias of BadZipFile, for compatibility with older Python versions.", "question_id": 12779}
{"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}
{"snippet": "test.support.check__all__(test_case, module, name_of_module=None, blacklist=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `name_of_module` argument can specify ( as a string or tuple thereof ) what module ( s ) an API could be defined in order to be detected as a public API . The `blacklist` argument can be a set of names that must not be treated as part of the public API even though their names indicate otherwise . With arguments `test_case`.", "question_id": 10282}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}
{"snippet": "curses.color_content(color_number)", "intent": "Return the intensity of the red , green , and blue ( RGB ) components in the color `color_number` , which must be between 0 and COLORS .", "question_id": 1924}
{"snippet": "curses.ascii.isspace(c)", "intent": "Checks for ASCII white-space characters ; space , line feed , carriage return , form feed , horizontal tab , vertical tab . With arguments `c`.", "question_id": 1909}
{"snippet": "date.fromisoformat(date_string)", "intent": "Return a date corresponding to a `date_string` in the format emitted by date.isoformat ( ) .", "question_id": 2222}
{"snippet": "logging.info(msg, *args, **kwargs)", "intent": "Logs a message with level INFO on the root logger . With arguments `msg`, `*args`, `**kwargs`.", "question_id": 5638}
{"snippet": "context.minus(x)", "intent": "Minus corresponds to the unary prefix minus operator in Python . With arguments `x`.", "question_id": 2553}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}
{"snippet": "time.thread_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current thread .", "question_id": 10459}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "errno.ESHUTDOWN", "intent": "Cannot send after transport endpoint shutdown", "question_id": 3613}
{"snippet": "SMTP.starttls(keyfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8531}
{"snippet": "chain.from_iterable(iterable)", "intent": "Alternate constructor for chain ( ) . Gets chained inputs from a single `iterable` argument that is evaluated lazily .", "question_id": 5242}
{"snippet": "pdb.runeval(expression, globals=None)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control . With arguments `globals`.", "question_id": 7332}
{"snippet": "window.encoding", "intent": "Encoding used to encode method arguments (Unicode strings and characters).", "question_id": 2047}
{"snippet": "loader.create_module(spec)", "intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "question_id": 4814}
{"snippet": "UUID.hex", "intent": "The UUID as a 32-character hexadecimal string.", "question_id": 11950}
{"snippet": "urllib.request.ProxyHandler()", "intent": "Cause requests to go through a proxy .", "question_id": 11784}
{"snippet": "readline.add_history(line)", "intent": "Append `line` to the history buffer , as if it was the last line typed .", "question_id": 8034}
{"snippet": "turtle.isvisible()", "intent": "Return True if the Turtle is shown , False if it \u2019 s hidden .", "question_id": 10981}
{"snippet": "BaseHandler.http_error_<nnn>(req, fp, code, msg, hdrs)", "intent": "nnn should be a three-digit HTTP error `code` . With arguments `req`, `fp`, `msg`, `hdrs`.", "question_id": 11847}
{"snippet": "Token.MISSING", "intent": "A marker object used by Token.old_value.", "question_id": 1647}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}
{"snippet": "sys.getrecursionlimit()", "intent": "Return the current value of the recursion limit , the maximum depth of the Python interpreter stack .", "question_id": 9801}
{"snippet": "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None)", "intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Otherwise you can explicitly specify the image subtype via the `_subtype` argument . With arguments `**_params`.", "question_id": 3343}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706}
{"snippet": "test.support.WarningsRecorder", "intent": "Class used to record warnings for unit tests.", "question_id": 10295}
{"snippet": "str.swapcase()", "intent": "Return a copy of the string with uppercase characters converted to lowercase and vice versa .", "question_id": 9252}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271}
{"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}
{"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}
{"snippet": "Cookie.rfc2109", "intent": "True if this cookie was received as an RFC 2109 cookie (ie.", "question_id": 4567}
{"snippet": "json.JSONEncoder(sort_keys=False)", "intent": "Extensible JSON encoder for Python data structures . If `sort_keys` is true ( default : False ) , then the output of dictionaries will be sorted by key ; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis .", "question_id": 5327}
{"snippet": "profile.run(cmd)", "intent": "Profile the `cmd` via exec ( ) .", "question_id": 7685}
{"snippet": "memoryview.itemsize", "intent": "The size in bytes of each element of the memoryview:", "question_id": 9423}
{"snippet": "resource.RLIMIT_CORE", "intent": "The maximum size (in bytes) of a core file that the current process can create.", "question_id": 8075}
{"snippet": "audioop.lin2alaw(fragment, width)", "intent": "Convert samples in the audio `fragment` to a-LAW encoding and return this as a bytes object . With arguments `width`.", "question_id": 693}
{"snippet": "Cmd.cmdloop()", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument .", "question_id": 1135}
{"snippet": "json.dump(obj, fp, **kw, sort_keys=False)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `sort_keys` is true ( default : False ) , then the output of dictionaries will be sorted by key . With arguments `**kw`.", "question_id": 5279}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "SSLContext.wrap_socket(sock, do_handshake_on_connect=True)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `do_handshake_on_connect` specifies whether to do the SSL handshake automatically after doing a socket.connect ( ) , or whether the application program will call it explicitly , by invoking the SSLSocket.do_handshake ( ) method .", "question_id": 9024}
{"snippet": "env_builder.setup_python(context)", "intent": "Creates a copy or symlink to the Python executable in the environment . With arguments `context`.", "question_id": 11985}
{"snippet": "socket.getnameinfo(sockaddr, flags)", "intent": "Translate a socket address `sockaddr` into a 2-tuple ( host , port ) . Depending on the settings of `flags` , the result can contain a fully-qualified domain name or numeric address representation in host .", "question_id": 8651}
{"snippet": "shutil.copy2(src, dst)", "intent": "Identical to copy ( ) except that copy2 ( ) also attempts to preserve file metadata . When `follow_symlinks` is false , and `src` is a symbolic link , copy2 ( ) attempts to copy all metadata from the src symbolic link to the newly-created `dst` symbolic link .", "question_id": 8320}
{"snippet": "tkinter.tix.ListNoteBook", "intent": "The ListNoteBook widget is very similar to the TixNoteBook widget: it can be used to display many windows in a limited space using a notebook metaphor.", "question_id": 10575}
{"snippet": "InteractiveConsole.resetbuffer()", "intent": "Remove any unhandled source text from the input buffer .", "question_id": 1189}
{"snippet": "getpass.getuser()", "intent": "Return the \u201c login name \u201d of the user .", "question_id": 4209}
{"snippet": "email.header.Header(charset=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `charset` serves two purposes : it has the same meaning as the charset argument to the append ( ) method .", "question_id": 3118}
{"snippet": "signal.signal(signalnum, handler)", "intent": "Set the `handler` for signal `signalnum` to the function handler .", "question_id": 8397}
{"snippet": "sys.maxsize", "intent": "An integer giving the maximum value a variable of type Py_ssize_t can take.", "question_id": 9823}
{"snippet": "traceback.print_tb(tb)", "intent": "Print up to `limit` stack trace entries from traceback object `tb` ( starting from the caller \u2019 s frame ) if limit is positive .", "question_id": 10733}
{"snippet": "datetime.min", "intent": "The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None).", "question_id": 2269}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "email.utils.encode_rfc2231(s)", "intent": "Encode the string `s` according to RFC 2231 .", "question_id": 3479}
{"snippet": "socket.getfqdn(name)", "intent": "Return a fully qualified domain `name` for name .", "question_id": 8645}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this turtle .", "question_id": 11019}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "os.tcsetpgrp(fd, pg)", "intent": "Set the process group associated with the terminal given by `fd` ( an open file descriptor as returned by os.open ( ) ) to `pg` .", "question_id": 6807}
{"snippet": "http_handler.emit(record)", "intent": "Sends the `record` to the Web server as a URL-encoded dictionary .", "question_id": 5552}
{"snippet": "AU_write.setframerate(n)", "intent": "Set the frame rate . With arguments `n`.", "question_id": 9723}
{"snippet": "timedelta.total_seconds()", "intent": "Return the total number of seconds contained in the duration .", "question_id": 2217}
{"snippet": "errno.ENONET", "intent": "Machine is not on the network", "question_id": 3569}
{"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}
{"snippet": "dis.hasfree", "intent": "Sequence of bytecodes that access a free variable (note that \u2018free\u2019 in this context refers to names in the current scope that are referenced by inner scopes or names in outer scopes that are referenced from this scope.", "question_id": 2746}
{"snippet": "connection.row_factory", "intent": "You can change this attribute to a callable that accepts the cursor and the original row as a tuple and will return the real result row.", "question_id": 8825}
{"snippet": "async_result.get()", "intent": "Return the result when it arrives .", "question_id": 6361}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}
{"snippet": "differ.compare(a, b)", "intent": "Compare two sequences of lines , and generate the delta ( `a` sequence of lines ) . With arguments `b`.", "question_id": 2694}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "Class.methods", "intent": "A dictionary mapping method names to line numbers.", "question_id": 7723}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626}
{"snippet": "ssl.SSLCertVerificationError", "intent": "A subclass of SSLError raised when certificate validation has failed.", "question_id": 8881}
{"snippet": "configparser.InterpolationMissingOptionError", "intent": "Exception raised when an option referenced from a value does not exist.", "question_id": 1598}
{"snippet": "imp.get_tag()", "intent": "Return the PEP 3147 magic tag string matching this version of Python \u2019 s magic number , as returned by get_magic ( ) .", "question_id": 4770}
{"snippet": "tarfile.TarFile(encoding=ENCODING)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . The `encoding` and errors arguments define the character encoding to be used for reading or writing the archive and how conversion errors are going to be handled .", "question_id": 9921}
{"snippet": "FileCookieJar.revert()", "intent": "Clear all cookies and reload cookies from a saved file .", "question_id": 4514}
{"snippet": "email.utils.format_datetime(dt, usegmt=False)", "intent": "Like formatdate , but the input is a datetime instance . If it is an aware timezone with offset zero , then `usegmt` may be set to True , in which case the string GMT is used instead of the numeric timezone offset . With arguments `dt`.", "question_id": 3477}
{"snippet": "str.startswith(prefix)", "intent": "Return True if string starts with the `prefix` , otherwise return False .", "question_id": 9249}
{"snippet": "winsound.SND_MEMORY", "intent": "The sound parameter to PlaySound() is a memory image of a WAV file, as a bytes-like object.", "question_id": 12199}
{"snippet": "DefaultCookiePolicy.strict_ns_unverifiable", "intent": "Apply RFC 2965 rules on unverifiable transactions even to Netscape cookies.", "question_id": 4548}
{"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}
{"snippet": "sys._getframe()", "intent": "Return a frame object from the call stack .", "question_id": 9806}
{"snippet": "html.entities.codepoint2name", "intent": "A dictionary that maps Unicode code points to HTML entity names.", "question_id": 4345}
{"snippet": "time.CLOCK_HIGHRES", "intent": "The Solaris OS has a CLOCK_HIGHRES timer that attempts to use an optimal hardware source, and may give close to nanosecond resolution.", "question_id": 10464}
{"snippet": "FTP.dir()", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output .", "question_id": 3958}
{"snippet": "fileinput.input()", "intent": "Create an instance of the FileInput class .", "question_id": 3782}
{"snippet": "socket.recv(bufsize)", "intent": "Receive data from the socket . The maximum amount of data to be received at once is specified by `bufsize` .", "question_id": 8702}
{"snippet": "mock.assert_called_once()", "intent": "Assert that the mock was called exactly once .", "question_id": 11571}
{"snippet": "plistlib.loads(data)", "intent": "Load a plist from a bytes object . With arguments `data`.", "question_id": 7555}
{"snippet": "symtable.Class", "intent": "A namespace of a class.", "question_id": 9751}
{"snippet": "widget.set(item)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` .", "question_id": 10658}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "csv.QUOTE_MINIMAL", "intent": "Instructs writer objects to only quote those fields which contain special characters such as delimiter, quotechar or any of the characters in lineterminator.", "question_id": 1719}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}
{"snippet": "json.load(fp, **kw, cls=None, object_hook=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . `object_hook` is an optional function that will be called with the result of any object literal decoded ( a dict ) . With arguments `**kw`.", "question_id": 5297}
{"snippet": "secrets.token_bytes()", "intent": "Return a random byte string containing `nbytes` number of bytes .", "question_id": 8135}
{"snippet": "InteractiveInterpreter.write(data)", "intent": "Write a string to the standard error stream ( sys.stderr ) . With arguments `data`.", "question_id": 1183}
{"snippet": "socket.CMSG_LEN(length)", "intent": "Return the total `length` , without trailing padding , of an ancillary data item with associated data of the given length .", "question_id": 8665}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358}
{"snippet": "mailcap.getcaps()", "intent": "Returns a dictionary mapping MIME types to a list of mailcap file entries .", "question_id": 5877}
{"snippet": "os.defpath", "intent": "The default search path used by exec*p* and spawn*p* if the environment doesn\u2019t have a 'PATH' key.", "question_id": 7127}
{"snippet": "datetime.replace(minute=self.minute)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `minute`.", "question_id": 2289}
{"snippet": "cursor.fetchone()", "intent": "Fetches the next row of a query result set , returning a single sequence , or None when no more data is available .", "question_id": 8844}
{"snippet": "@test.support.requires_mac_version(*min_version)", "intent": "Decorator for the minimum version when running test on Mac OS X . With arguments `*min_version`.", "question_id": 10213}
{"snippet": "os.removedirs(name)", "intent": "Remove directories recursively . With arguments `name`.", "question_id": 6891}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}
{"snippet": "scheduler.enter(delay, priority, action)", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`.", "question_id": 8122}
{"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636}
{"snippet": "csv.writer(csvfile, **fmtparams)", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . With arguments `**fmtparams`.", "question_id": 1682}
{"snippet": "differ.compare(a, b)", "intent": "Compare two sequences of lines , and generate the delta ( `a` sequence of lines ) . With arguments `b`.", "question_id": 2694}
{"snippet": "dbm.gnu.error", "intent": "Raised on dbm.gnu-specific errors, such as I/O errors.", "question_id": 2370}
{"snippet": "base64.urlsafe_b64encode(s)", "intent": "Encode bytes-like object `s` using the URL- and filesystem-safe alphabet , which substitutes - instead of + and _ instead of / in the standard Base64 alphabet , and return the encoded bytes .", "question_id": 716}
{"snippet": "Telnet.read_lazy()", "intent": "Process and return data already in the queues ( lazy ) .", "question_id": 10015}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}
{"snippet": "xml.dom.InvalidStateErr", "intent": "Raised when an attempt is made to use an object that is not defined or is no longer usable.", "question_id": 12388}
{"snippet": "sys.copyright", "intent": "A string containing the copyright pertaining to the Python interpreter.", "question_id": 9773}
{"snippet": "configparser.InterpolationSyntaxError", "intent": "Exception raised when the source text into which substitutions are made does not conform to the required syntax.", "question_id": 1599}
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289}
{"snippet": "context.scaleb(x, y)", "intent": "Returns the first operand after adding the second value its exp . With arguments `x`, `y`.", "question_id": 2569}
{"snippet": "cmd.Cmd()", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework .", "question_id": 1127}
{"snippet": "json.JSONEncoder(sort_keys=False)", "intent": "Extensible JSON encoder for Python data structures . If `sort_keys` is true ( default : False ) , then the output of dictionaries will be sorted by key ; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis .", "question_id": 5327}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, init=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2186}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "NNTP.newnews(group, date)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "question_id": 6463}
{"snippet": "base_server.process_request(request, client_address)", "intent": "Calls finish_request ( ) to create an instance of the RequestHandlerClass . If desired , this function can create a new process or thread to handle the `request` ; the ForkingMixIn and ThreadingMixIn classes do this . With arguments `client_address`.", "question_id": 8779}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "loop.close()", "intent": "Close the event loop .", "question_id": 187}
{"snippet": "platform.libc_ver(chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7541}
{"snippet": "connection.isolation_level", "intent": "Get or set the current default isolation level.", "question_id": 8804}
{"snippet": "selector_key.data", "intent": "Optional opaque data associated to this file object: for example, this could be used to store a per-client session ID.", "question_id": 8213}
{"snippet": "NNTP.head(message_spec=None, file=None)", "intent": "Same as article ( ) , but sends a HEAD command . The lines returned ( or written to `file` ) will only contain the message headers , not the body . With arguments `message_spec`.", "question_id": 6487}
{"snippet": "locale.LC_MESSAGES", "intent": "Locale category for message display.", "question_id": 5408}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982}
{"snippet": "address.username", "intent": "The username portion of the address, with all quoting removed.", "question_id": 3197}
{"snippet": "@abc.abstractclassmethod", "intent": "A subclass of the built-in classmethod(), indicating an abstract classmethod.", "question_id": 5}
{"snippet": "datetime.now()", "intent": "Return the current local date and time .", "question_id": 2258}
{"snippet": "importlib.machinery.BuiltinImporter", "intent": "An importer for built-in modules.", "question_id": 4871}
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "cursor.fetchmany()", "intent": "Fetches the next set of rows of a query result , returning a list .", "question_id": 8845}
{"snippet": "test.support.check_warnings(*filters, quiet=True)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . If one or more filters are provided , or if the optional keyword argument `quiet` is False , it checks to make sure the warnings are as expected : each specified filter must match at least one of the warnings raised by the enclosed code or the test fails , and if any warnings are raised that do not match any of the specified filters the test fails . With arguments `*filters`.", "question_id": 10165}
{"snippet": "xmlparser.XmlDeclHandler(version, encoding, standalone)", "intent": "Called when the XML declaration is parsed . The XML declaration is the ( optional ) declaration of the applicable `version` of the XML recommendation , the `encoding` of the document text , and an optional \u201c `standalone` \u201d declaration .", "question_id": 7755}
{"snippet": "pprint.pformat(object, indent=1)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7634}
{"snippet": "ctypes._Pointer", "intent": "Private, abstract base class for pointers.", "question_id": 1896}
{"snippet": "IMAP4.xatom()", "intent": "Allow simple extension commands notified by server in CAPABILITY response .", "question_id": 4753}
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309}
{"snippet": "FileCookieJar.load()", "intent": "Load cookies from a file .", "question_id": 4506}
{"snippet": "HTMLParser.handle_decl(decl)", "intent": "This method is called to handle an HTML doctype declaration ( e.g . The `decl` parameter will be the entire contents of the declaration inside the < ! ... > markup ( e.g .", "question_id": 4363}
{"snippet": "decimal.compare_signal(other)", "intent": "This operation is identical to the compare ( ) method , except that all NaNs signal . With arguments `other`.", "question_id": 2401}
{"snippet": "asyncio.SafeChildWatcher", "intent": "This implementation avoids disrupting other code spawning processes by polling every process explicitly on a SIGCHLD signal.", "question_id": 388}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH", "intent": "An end tag did not match the innermost open start tag.", "question_id": 7802}
{"snippet": "message.__delitem__(name)", "intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "question_id": 2968}
{"snippet": "operator.indexOf(a, b)", "intent": "Return the index of the first of occurrence of `b` in `a` .", "question_id": 6577}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "config_parser.optionxform(option)", "intent": "Transforms the `option` name option as found in an input file or as passed in by client code to the form that should be used in the internal structures .", "question_id": 1565}
{"snippet": "kevent.data", "intent": "Filter specific data.", "question_id": 8207}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "tracemalloc.get_traceback_limit()", "intent": "Get the maximum number of frames stored in the traceback of a trace .", "question_id": 10843}
{"snippet": "DefaultCookiePolicy.strict_ns_domain", "intent": "Flags indicating how strict to be with domain-matching rules for Netscape cookies.", "question_id": 4549}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "@dataclasses.dataclass()", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below .", "question_id": 2157}
{"snippet": "abstract_event_loop_policy.get_event_loop()", "intent": "Get the event loop for the current context .", "question_id": 375}
{"snippet": "date.weekday()", "intent": "Return the day of the week as an integer , where Monday is 0 and Sunday is 6 .", "question_id": 2239}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363}
{"snippet": "statistics.median_high(data)", "intent": "Return the high median of `data` .", "question_id": 9129}
{"snippet": "PermissionError", "intent": "Raised when trying to run an operation without the adequate access rights - for example filesystem permissions.", "question_id": 3698}
{"snippet": "mailbox.iterkeys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5729}
{"snippet": "Document.getElementsByTagName(tagName)", "intent": "Search for all descendants ( direct children , children \u2019 s children , etc . ) With arguments `tagName`.", "question_id": 12352}
{"snippet": "property(fget=None, fset=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value . `fset` is a function for setting an attribute value .", "question_id": 4090}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "test.support.SuppressCrashReport", "intent": "A context manager used to try to prevent crash dialog popups on tests that are expected to crash a subprocess.", "question_id": 10289}
{"snippet": "mock.call_count", "intent": "An integer telling you how many times the mock object has been called:", "question_id": 11589}
{"snippet": "ast.literal_eval(node_or_string)", "intent": "Safely evaluate an expression node or a string containing a Python literal or container display . With arguments `node_or_string`.", "question_id": 149}
{"snippet": "test_case.subTest(**params)", "intent": "Return a context manager which executes the enclosed code block as a subtest . With arguments `**params`.", "question_id": 11372}
{"snippet": "policy.max_line_length", "intent": "The maximum length of any line in the serialized output, not counting the end of line character(s).", "question_id": 3413}
{"snippet": "stat.S_IRWXU", "intent": "Mask for file owner permissions.", "question_id": 9097}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "Queue.get(block=True)", "intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 7855}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "cursor.executemany(sql, seq_of_parameters)", "intent": "Executes an SQL command against all parameter sequences or mappings found in the sequence `seq_of_parameters` . With arguments `sql`.", "question_id": 8842}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723}
{"snippet": "Node.cloneNode(deep)", "intent": "Clone this node . Setting `deep` means to clone all child nodes as well .", "question_id": 12335}
{"snippet": "test_suite.addTests(tests)", "intent": "Add all the `tests` from an iterable of TestCase and TestSuite instances to this test suite .", "question_id": 11484}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340}
{"snippet": "policy.header_store_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` provided by the application program when the application program is modifying a Message programmatically ( as opposed to a Message created by a parser ) .", "question_id": 3424}
{"snippet": "logging.setLoggerClass(klass)", "intent": "Tells the logging system to use the class `klass` when instantiating a logger .", "question_id": 5651}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "statistics.harmonic_mean(data)", "intent": "Return the harmonic mean of `data` , a sequence or iterator of real-valued numbers .", "question_id": 9126}
{"snippet": "counter.update()", "intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) .", "question_id": 1349}
{"snippet": "multiprocessing.connection.wait(object_list)", "intent": "Wait till an object in `object_list` is ready .", "question_id": 6380}
{"snippet": "sequence_matcher.get_grouped_opcodes()", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2685}
{"snippet": "@typing.type_check_only", "intent": "Decorator to mark a class or function to be unavailable at runtime.", "question_id": 11330}
{"snippet": "CGIXMLRPCRequestHandler.handle_request()", "intent": "Handle an XML-RPC request .", "question_id": 12747}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "patch.multiple(target, **kwargs, create=False)", "intent": "Perform multiple patches in a single call . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11634}
{"snippet": "curses.ascii.ascii(c)", "intent": "Return the ASCII value corresponding to the low 7 bits of `c` .", "question_id": 1914}
{"snippet": "winsound.SND_LOOP", "intent": "Play the sound repeatedly.", "question_id": 12198}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}
{"snippet": "AbstractDigestAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "`authreq` should be the name of the header where the information about the realm is included in the request , `host` should be the host to authenticate to , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11868}
{"snippet": "Protocol.data_received(data)", "intent": "Called when some `data` is received .", "question_id": 435}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "dircmp.left_list", "intent": "Files and subdirectories in a, filtered by hide and ignore.", "question_id": 3769}
{"snippet": "curses.can_change_color()", "intent": "Return True or False , depending on whether the programmer can change the colors displayed by the terminal .", "question_id": 1922}
{"snippet": "importlib.machinery.FileFinder(path, *loader_details)", "intent": "A concrete implementation of importlib.abc.PathEntryFinder which caches results from the file system . The `path` argument is the directory for which the finder is in charge of searching . With arguments `*loader_details`.", "question_id": 4882}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "float.fromhex(s)", "intent": "Class method to return the float represented by a hexadecimal string s. The string `s` may have leading and trailing whitespace .", "question_id": 9150}
{"snippet": "decimal.copy_negate()", "intent": "Return the negation of the argument .", "question_id": 2409}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716}
{"snippet": "message.get_content_type()", "intent": "Return the message \u2019 s content type .", "question_id": 2978}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "template.substitute(mapping, **kwds)", "intent": "Performs the template substitution , returning a new string . `mapping` is any dictionary-like object with keys that match the placeholders in the template . With arguments `**kwds`.", "question_id": 9526}
{"snippet": "turtle.end_fill()", "intent": "Fill the shape drawn after the last call to begin_fill ( ) .", "question_id": 10966}
{"snippet": "locale.format_string(format, val, grouping=False, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5387}
{"snippet": "xml.etree.ElementTree.ProcessingInstruction(target)", "intent": "PI element factory . `target` is a string containing the PI target .", "question_id": 12448}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "timer.print_exc()", "intent": "Helper to print a traceback from the timed code .", "question_id": 10515}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415}
{"snippet": "shlex.shlex(punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8277}
{"snippet": "webbrowser.open(url)", "intent": "Display `url` using the default browser .", "question_id": 12102}
{"snippet": "errno.EADDRNOTAVAIL", "intent": "Cannot assign requested address", "question_id": 3604}
{"snippet": "set - other - ...", "intent": "Return a new set with elements in the set that are not in the others.", "question_id": 9450}
{"snippet": "cursor.execute(sql)", "intent": "Executes an SQL statement . With arguments `sql`.", "question_id": 8841}
{"snippet": "gettext.install(domain, names=None)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) . For the `names` parameter , please see the description of the translation object \u2019 s install ( ) method .", "question_id": 4242}
{"snippet": "cmath.tan(x)", "intent": "Return the tangent of `x` .", "question_id": 1106}
{"snippet": "subprocess.Popen(args, executable=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9601}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}
{"snippet": "set & other & ...", "intent": "Return a new set with elements common to the set and all others.", "question_id": 9448}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING", "intent": "A behavioral change was requested after parsing started that can only be changed before parsing has started.", "question_id": 7809}
{"snippet": "socket.gethostname()", "intent": "Return a string containing the hostname of the machine where the Python interpreter is currently executing .", "question_id": 8649}
{"snippet": "SMTP.starttls(keyfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8531}
{"snippet": "test.support.temp_cwd(quiet=False)", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . If `quiet` is False and it is not possible to create or change the CWD , an error is raised .", "question_id": 10184}
{"snippet": "modulefinder.AddPackagePath(pkg_name, path)", "intent": "Record that the package named `pkg_name` can be found in the specified `path` .", "question_id": 6023}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "symbol_table.get_identifiers()", "intent": "Return a list of names of symbols in this table .", "question_id": 9742}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370}
{"snippet": "dict(mapping, **kwarg)", "intent": "Create a new dictionary . With arguments `mapping`, `**kwarg`.", "question_id": 4005}
{"snippet": "profile.Profile(timer=None)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument .", "question_id": 7670}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466}
{"snippet": "stringprep.in_table_c6(code)", "intent": "Determine whether `code` is in tableC.6 ( Inappropriate for plain text ) .", "question_id": 9544}
{"snippet": "sys.executable", "intent": "A string giving the absolute path of the executable binary for the Python interpreter, on systems where this makes sense.", "question_id": 9787}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_NONE", "intent": "No modifier is given, so it can appear exactly once, as for A.", "question_id": 7783}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "asyncio.BaseProtocol", "intent": "Base protocol with methods that all protocols share.", "question_id": 426}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "queue_listener.createLock()", "intent": "Initializes a thread lock which can be used to serialize access to underlying I/O functionality which may not be threadsafe .", "question_id": 5596}
{"snippet": "pprint.pformat(object, indent=1)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7634}
{"snippet": "winreg.HKEY_CLASSES_ROOT", "intent": "Registry entries subordinate to this key define types (or classes) of documents and the properties associated with those types.", "question_id": 12155}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139}
{"snippet": "parameter.kind", "intent": "Describes how argument values are bound to the parameter.", "question_id": 5001}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164}
{"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919}
{"snippet": "math.degrees(x)", "intent": "Convert angle `x` from radians to degrees .", "question_id": 5922}
{"snippet": "errno.EPERM", "intent": "Operation not permitted", "question_id": 3506}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484}
{"snippet": "auto.end", "intent": "The index after the last invalid data in object.", "question_id": 3678}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "itertools.cycle(iterable)", "intent": "Make an iterator returning elements from the `iterable` and saving a copy of each .", "question_id": 5250}
{"snippet": "joinable_queue.recv_bytes()", "intent": "Return a complete message of byte data sent from the other end of the connection as a string .", "question_id": 6240}
{"snippet": "context.rotate(x, y)", "intent": "Returns a rotated copy of `x` , `y` times .", "question_id": 2567}
{"snippet": "os.WEXITED", "intent": "Flags that can be used in options in waitid() that specify what child signal to wait for.", "question_id": 7075}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543}
{"snippet": "io.StringIO(newline='\\n')", "intent": "An in-memory stream for text I/O . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "question_id": 5166}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025}
{"snippet": "cursor.fetchone()", "intent": "Fetches the next row of a query result set , returning a single sequence , or None when no more data is available .", "question_id": 8844}
{"snippet": "ossaudiodev.OSSAudioError", "intent": "This exception is raised on certain errors.", "question_id": 7173}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951}
{"snippet": "pool.join()", "intent": "Wait for the worker processes to exit .", "question_id": 6358}
{"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}
{"snippet": "OptionParser.print_usage()", "intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "question_id": 6644}
{"snippet": "ssl.OP_NO_COMPRESSION", "intent": "Disable compression on the SSL channel.", "question_id": 8942}
{"snippet": "pdb.Pdb()", "intent": "Pdb is the debugger class .", "question_id": 7341}
{"snippet": "readline.get_begidx()", "intent": "Get the beginning or ending index of the completion scope .", "question_id": 8044}
{"snippet": "json.JSONEncoder(default=None)", "intent": "Extensible JSON encoder for Python data structures . Supports the following objects and types by `default` :", "question_id": 5330}
{"snippet": "email.headerregistry.DateHeader", "intent": "RFC 5322 specifies a very specific format for dates within email headers.", "question_id": 3156}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761}
{"snippet": "io.UnsupportedOperation", "intent": "An exception inheriting OSError and ValueError that is raised when an unsupported operation is called on a stream.", "question_id": 5062}
{"snippet": "Telnet.read_very_lazy()", "intent": "Return any data available in the cooked queue ( very lazy ) .", "question_id": 10016}
{"snippet": "hashlib.algorithms_available", "intent": "A set containing the names of the hash algorithms that are available in the running Python interpreter.", "question_id": 4300}
{"snippet": "resource.prlimit(pid, resource, limits)", "intent": "Combines setrlimit ( ) and getrlimit ( ) in one function and supports to get and set the resources `limits` of an arbitrary process . If `pid` is 0 , then the call applies to the current process . `resource` and limits have the same meaning as in setrlimit ( ) , except that limits is optional .", "question_id": 8073}
{"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103}
{"snippet": "urllib.parse.parse_qs(qs, strict_parsing=False)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11671}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "Node.childNodes", "intent": "A list of nodes contained within this node.", "question_id": 12319}
{"snippet": "tracemalloc.take_snapshot()", "intent": "Take a snapshot of traces of memory blocks allocated by Python .", "question_id": 10850}
{"snippet": "text_wrapper.fix_sentence_endings", "intent": "(default: False) If true, TextWrapper attempts to detect sentence endings and ensure that sentences are always separated by exactly two spaces.", "question_id": 10334}
{"snippet": "os.lstat(path, dir_fd=None)", "intent": "Perform the equivalent of an lstat ( ) system call on the given `path` . With arguments `dir_fd`.", "question_id": 6861}
{"snippet": "executor.map(func, *iterables)", "intent": "Similar to map ( `func` , `*iterables` ) except :", "question_id": 1441}
{"snippet": "ssl.PROTOCOL_SSLv2", "intent": "Selects SSL version 2 as the channel encryption protocol.", "question_id": 8925}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "text_wrapper.expand_tabs", "intent": "(default: True) If true, then all tab characters in text will be expanded to spaces using the expandtabs() method of text.", "question_id": 10328}
{"snippet": "tkinter.tix.LabelFrame", "intent": "The LabelFrame widget packages a frame widget and a label into one mega widget.", "question_id": 10557}
{"snippet": "json.dump(obj, fp, **kw, check_circular=True)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `check_circular` is false ( default : True ) , then the circular reference check for container types will be skipped and a circular reference will result in an OverflowError ( or worse ) . With arguments `**kw`.", "question_id": 5273}
{"snippet": "stream_writer.is_closing()", "intent": "Return True if the stream is closed or in the process of being closed .", "question_id": 521}
{"snippet": "stream_reader.read()", "intent": "Read up to `n` bytes .", "question_id": 504}
{"snippet": "r_lock.release()", "intent": "Release a lock , decrementing the recursion level .", "question_id": 6262}
{"snippet": "socketserver.ForkingTCPServer", "intent": "These classes are pre-defined using the mix-in classes.", "question_id": 8755}
{"snippet": "urllib.request.BaseHandler", "intent": "This is the base class for all registered handlers \u2014 and handles only the simple mechanics of registration.", "question_id": 11779}
{"snippet": "csvreader.fieldnames", "intent": "If not passed as a parameter when creating the object, this attribute is initialized upon first access or when the first record is read from the file.", "question_id": 1734}
{"snippet": "sys.is_finalizing()", "intent": "Return True if the Python interpreter is shutting down , False otherwise .", "question_id": 9819}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "subprocess.TimeoutExpired", "intent": "Subclass of SubprocessError, raised when a timeout expires while waiting for a child process.", "question_id": 9587}
{"snippet": "ContentHandler.startElement(name, attrs)", "intent": "Signals the start of an element in non-namespace mode . The `name` parameter contains the raw XML 1.0 name of the element type as a string and the `attrs` parameter holds an object of the Attributes interface ( see The Attributes Interface ) containing the attributes of the element .", "question_id": 12575}
{"snippet": "message.defects", "intent": "The defects attribute contains a list of all the problems found when parsing this message.", "question_id": 3030}
{"snippet": "curses.has_colors()", "intent": "Return True if the terminal can display colors ; otherwise , return False .", "question_id": 1940}
{"snippet": "writer.flush()", "intent": "Flush any buffered output or device control events .", "question_id": 3841}
{"snippet": "aifc.tell()", "intent": "Return the current write position in the output file .", "question_id": 34}
{"snippet": "TarInfo.tobuf()", "intent": "Create a string buffer from a TarInfo object .", "question_id": 9973}
{"snippet": "Popen.wait()", "intent": "Wait for child process to terminate .", "question_id": 9610}
{"snippet": "sourceless_file_loader.path", "intent": "The path to the bytecode file.", "question_id": 4899}
{"snippet": "charset.header_encode_lines(string, maxlengths)", "intent": "Header-encode a `string` by converting it first to bytes . This is similar to header_encode ( ) except that the string is fit into maximum line lengths as given by the argument `maxlengths` , which must be an iterator : each element returned from this iterator will provide the next maximum line length .", "question_id": 2921}
{"snippet": "config_parser.read_dict(dictionary, source='<dict>')", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order . Optional argument `source` specifies a context-specific name of the dictionary passed .", "question_id": 1519}
{"snippet": "xmlparser.buffer_text", "intent": "Setting this to true causes the xmlparser object to buffer textual content returned by Expat to avoid multiple calls to the CharacterDataHandler() callback whenever possible.", "question_id": 7744}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832}
{"snippet": "PurePath.anchor", "intent": "The concatenation of the drive and root:", "question_id": 7246}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "policy.max_line_length", "intent": "The maximum length of any line in the serialized output, not counting the end of line character(s).", "question_id": 3413}
{"snippet": "turtle.stamp()", "intent": "Stamp a copy of the turtle shape onto the canvas at the current turtle position .", "question_id": 10929}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885}
{"snippet": "i_pv4_address.is_multicast", "intent": "True if the address is reserved for multicast use.", "question_id": 5180}
{"snippet": "window.insnstr(str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "question_id": 2078}
{"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508}
{"snippet": "traceback.format(limit=None)", "intent": "Format the traceback as a list of lines with newlines . If `limit` is set , format the limit most recent frames if limit is positive .", "question_id": 10896}
{"snippet": "asyncio.SubprocessTransport(BaseTransport)", "intent": "An abstraction to represent a connection between a parent and its child OS process . With arguments `BaseTransport`.", "question_id": 395}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "gdbm.reorganize()", "intent": "If you have carried out a lot of deletions and would like to shrink the space used by the gdbm file , this routine will reorganize the database .", "question_id": 2376}
{"snippet": "coverage_results.update(other)", "intent": "Merge in data from another CoverageResults object . With arguments `other`.", "question_id": 10724}
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221}
{"snippet": "socket.recvmsg_into(buffers)", "intent": "Receive normal data and ancillary data from the socket , behaving as recvmsg ( ) would , but scatter the non-ancillary data into a series of `buffers` instead of returning a new bytes object .", "question_id": 8710}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "XMLReader.parse(source)", "intent": "Process an input `source` , producing SAX events .", "question_id": 12613}
{"snippet": "timeit.timeit()", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10476}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "ArgumentParser.convert_arg_line_to_args(arg_line)", "intent": "Arguments that are read from a file ( see the fromfile_prefix_chars keyword argument to the ArgumentParser constructor ) are read one argument per line . This method takes a single argument `arg_line` which is a string read from the argument file .", "question_id": 109}
{"snippet": "curses.flash()", "intent": "Flash the screen .", "question_id": 1935}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "socket.connect(address)", "intent": "Connect to a remote socket at `address` .", "question_id": 8676}
{"snippet": "HTMLParser.handle_decl(decl)", "intent": "This method is called to handle an HTML doctype declaration ( e.g . The `decl` parameter will be the entire contents of the declaration inside the < ! ... > markup ( e.g .", "question_id": 4363}
{"snippet": "statistics.median(data)", "intent": "Return the median ( middle value ) of numeric `data` , using the common \u201c mean of middle two \u201d method .", "question_id": 9127}
{"snippet": "doctest.testfile(filename, module_relative=True)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `module_relative` specifies how the filename should be interpreted :", "question_id": 2767}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "unittest.mock.PropertyMock(*args, **kwargs)", "intent": "A mock intended to be used as a property , or other descriptor , on a class . With arguments `*args`, `**kwargs`.", "question_id": 11607}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426}
{"snippet": "sys.api_version", "intent": "The C API version for this interpreter.", "question_id": 9853}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "sys.dllhandle", "intent": "Integer specifying the handle of the Python DLL.", "question_id": 9778}
{"snippet": "lzma.LZMACompressor(check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5680}
{"snippet": "errno.EEXIST", "intent": "File exists", "question_id": 3522}
{"snippet": "errno.EPIPE", "intent": "Broken pipe", "question_id": 3537}
{"snippet": "async_result.successful()", "intent": "Return whether the call completed without raising an exception .", "question_id": 6365}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "unittest.SkipTest(reason)", "intent": "This exception is raised to skip a test . With arguments `reason`.", "question_id": 11362}
{"snippet": "text_wrapper.break_long_words", "intent": "(default: True) If true, then words longer than width will be broken in order to ensure that no lines are longer than width.", "question_id": 10335}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}
{"snippet": "time.tzname", "intent": "A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone.", "question_id": 10475}
{"snippet": "faulthandler.dump_traceback()", "intent": "Dump the tracebacks of all threads into `file` .", "question_id": 3712}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934}
{"snippet": "collections.abc.AsyncGenerator", "intent": "ABC for asynchronous generator classes that implement the protocol defined in PEP 525 and PEP 492.", "question_id": 1334}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "Template.reset()", "intent": "Restore a pipeline template to its initial state .", "question_id": 7428}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992}
{"snippet": "widget.prev(item)", "intent": "Returns the identifier of `item` \u2019 s previous sibling , or \u2018 \u2019 if item is the first child of its parent .", "question_id": 10647}
{"snippet": "io.IOBase", "intent": "The abstract base class for all I/O classes, acting on streams of bytes.", "question_id": 5063}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802}
{"snippet": "class.mro()", "intent": "This method can be overridden by a metaclass to customize the method resolution order for its instances .", "question_id": 9505}
{"snippet": "process.daemon", "intent": "The process\u2019s daemon flag, a Boolean value.", "question_id": 6181}
{"snippet": "threading.Event", "intent": "Class implementing event objects.", "question_id": 10406}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "iter(proxy)", "intent": "Return an iterator over the keys of the underlying mapping . With arguments `proxy`.", "question_id": 11209}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235}
{"snippet": "datetime.isoformat()", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS", "question_id": 2306}
{"snippet": "shutil.copymode(src, dst)", "intent": "Copy the permission bits from `src` to `dst` .", "question_id": 8314}
{"snippet": "wsgiref.simple_server.demo_app(environ, start_response)", "intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "question_id": 12227}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855}
{"snippet": "inspect.getsourcelines(object)", "intent": "Return a list of source lines and starting line number for an `object` .", "question_id": 4974}
{"snippet": "doc_test_runner.summarize(verbose=None)", "intent": "Print a summary of all the test cases that have been run by this DocTestRunner , and return a named tuple TestResults ( failed , attempted ) . The optional `verbose` argument controls how detailed the summary is .", "question_id": 2882}
{"snippet": "@abc.abstractstaticmethod", "intent": "A subclass of the built-in staticmethod(), indicating an abstract staticmethod.", "question_id": 6}
{"snippet": "base_handler.sendfile()", "intent": "Override to implement platform-specific file transmission .", "question_id": 12267}
{"snippet": "decimal.is_infinite()", "intent": "Return True if the argument is either positive or negative infinity and False otherwise .", "question_id": 2419}
{"snippet": "email.mime.image.MIMEImage(_imagedata, **_params)", "intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . With arguments `**_params`.", "question_id": 3342}
{"snippet": "executor.map(func, *iterables, timeout=None)", "intent": "Similar to map ( `func` , `*iterables` ) except : The returned iterator raises a concurrent.futures.TimeoutError if __next__ ( ) is called and the result isn \u2019 t available after `timeout` seconds from the original call to Executor.map ( ) .", "question_id": 1442}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}
{"snippet": "turtle.shape()", "intent": "Set turtle shape to shape with given `name` or , if name is not given , return name of current shape .", "question_id": 10982}
{"snippet": "tixCommand.tix_filedialog()", "intent": "Returns the file selection dialog that may be shared among different calls from this application .", "question_id": 10586}
{"snippet": "asyncio.BufferedProtocol(BaseProtocol)", "intent": "A base class for implementing streaming protocols with manual control of the receive buffer . With arguments `BaseProtocol`.", "question_id": 428}
{"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957}
{"snippet": "importlib.util.spec_from_loader(name, loader)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`.", "question_id": 4934}
{"snippet": "profile.Profile(timer=None, subcalls=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument . With arguments `subcalls`.", "question_id": 7675}
{"snippet": "_func_ptr.errcheck", "intent": "Assign a Python function or another callable to this attribute.", "question_id": 1789}
{"snippet": "winsound.SND_LOOP", "intent": "Play the sound repeatedly.", "question_id": 12198}
{"snippet": "statistics.median(data)", "intent": "Return the median ( middle value ) of numeric `data` , using the common \u201c mean of middle two \u201d method .", "question_id": 9127}
{"snippet": "pathlib.PureWindowsPath(*pathsegments)", "intent": "A subclass of PurePath , this path flavour represents Windows filesystem paths : With arguments `*pathsegments`.", "question_id": 7242}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "calendar.month_name", "intent": "An array that represents the months of the year in the current locale.", "question_id": 1024}
{"snippet": "test_result.stopTest(test)", "intent": "Called after the `test` case test has been executed , regardless of the outcome .", "question_id": 11521}
{"snippet": "patch.stopall()", "intent": "Stop all active patches .", "question_id": 11642}
{"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "winreg.HKEY_PERFORMANCE_DATA", "intent": "Registry entries subordinate to this key allow you to access performance data.", "question_id": 12159}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997}
{"snippet": "ProcessingInstruction.target", "intent": "The content of the processing instruction up to the first whitespace character.", "question_id": 12378}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "gettext.translation(domain, class_=None)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths . The actual class instantiated is `class_` if provided , otherwise GNUTranslations .", "question_id": 4232}
{"snippet": "unittest.TestSuite()", "intent": "This class represents an aggregation of individual test cases and test suites .", "question_id": 11481}
{"snippet": "email.headerregistry.MIMEVersionHeader", "intent": "There is really only one valid value for the MIME-Version header, and that is 1.0.", "question_id": 3163}
{"snippet": "platform.libc_ver()", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7537}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}
{"snippet": "io.BlockingIOError", "intent": "This is a compatibility alias for the builtin BlockingIOError exception.", "question_id": 5061}
{"snippet": "profile.Profile(timer=None)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument .", "question_id": 7670}
{"snippet": "TarFile.gettarinfo()", "intent": "Create a TarInfo object from the result of os.stat ( ) or equivalent on an existing file .", "question_id": 9959}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "errno.ELIBBAD", "intent": "Accessing a corrupted shared library", "question_id": 3585}
{"snippet": "shutil.get_unpack_formats()", "intent": "Return a list of all registered formats for unpacking .", "question_id": 8370}
{"snippet": "platform.python_implementation()", "intent": "Returns a string identifying the Python implementation .", "question_id": 7476}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508}
{"snippet": "winsound.SND_LOOP", "intent": "Play the sound repeatedly.", "question_id": 12198}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026}
{"snippet": "Node.childNodes", "intent": "A list of nodes contained within this node.", "question_id": 12319}
{"snippet": "InputSource.setEncoding(encoding)", "intent": "Sets the character `encoding` of this InputSource .", "question_id": 12638}
{"snippet": "Match.groups(default=None)", "intent": "Return a tuple containing all the subgroups of the match , from 1 up to however many groups are in the pattern . The `default` argument is used for groups that did not participate in the match ; it defaults to None .", "question_id": 8000}
{"snippet": "@abc.abstractclassmethod", "intent": "A subclass of the built-in classmethod(), indicating an abstract classmethod.", "question_id": 5}
{"snippet": "cmath.polar(x)", "intent": "Return the representation of `x` in polar coordinates .", "question_id": 1094}
{"snippet": "FieldStorage.getfirst(name, default=None)", "intent": "This method always returns only one value associated with form field `name` . 1 If no such form field or value exists then the method returns the value specified by the optional parameter `default` .", "question_id": 1027}
{"snippet": "http.server.SimpleHTTPRequestHandler(request, client_address, server)", "intent": "This class serves files from the current `directory` and below , directly mapping the directory structure to HTTP requests . A lot of the work , such as parsing the `request` , is done by the base class BaseHTTPRequestHandler . With arguments `client_address`, `server`.", "question_id": 4659}
{"snippet": "ssl.OP_NO_SSLv3", "intent": "Prevents an SSLv3 connection.", "question_id": 8932}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}
{"snippet": "config_parser.read_string(string)", "intent": "Parse configuration data from a `string` .", "question_id": 1516}
{"snippet": "window.immedok(flag)", "intent": "If `flag` is True , any change in the window image automatically causes the window to be refreshed ; you no longer have to call refresh ( ) yourself .", "question_id": 2068}
{"snippet": "resource.RLIMIT_SBSIZE", "intent": "The maximum size (in bytes) of socket buffer usage for this user.", "question_id": 8092}
{"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957}
{"snippet": "errno.errorcode", "intent": "Dictionary providing a mapping from the errno value to the string name in the underlying system.", "question_id": 3505}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832}
{"snippet": "message.get_all(name, failobj=None)", "intent": "Return a list of all the values for the field named `name` . If there are no such named headers in the message , `failobj` is returned ( defaults to None ) .", "question_id": 2975}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "html.entities.html5", "intent": "A dictionary that maps HTML5 named character references 1 to the equivalent Unicode character(s), e.g.", "question_id": 4342}
{"snippet": "non_callable_magic_mock.code", "intent": "An HTTP status code as defined in RFC 2616.", "question_id": 11661}
{"snippet": "sys.exec_prefix", "intent": "A string giving the site-specific directory prefix where the platform-dependent Python files are installed; by default, this is also '/usr/local'.", "question_id": 9786}
{"snippet": "ZipFile.debug", "intent": "The level of debug output to use.", "question_id": 12844}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "SSLSocket.verify_client_post_handshake()", "intent": "Requests post-handshake authentication ( PHA ) from a TLS 1.3 client .", "question_id": 8987}
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060}
{"snippet": "codecs.xmlcharrefreplace_errors(exception)", "intent": "Implements the 'xmlcharrefreplace ' error handling ( for encoding with text encodings only ) : the unencodable character is replaced by an appropriate XML character reference . With arguments `exception`.", "question_id": 1258}
{"snippet": "symbol_table.lookup(name)", "intent": "Lookup `name` in the table and return a Symbol instance .", "question_id": 9743}
{"snippet": "InteractiveInterpreter.showsyntaxerror(filename=None)", "intent": "Display the syntax error that just occurred . If `filename` is given , it is stuffed into the exception instead of the default filename provided by Python \u2019 s parser , because it always uses ' < string > ' when reading from a string .", "question_id": 1181}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348}
{"snippet": "widget.enable_traversal()", "intent": "Enable keyboard traversal for a toplevel window containing this notebook .", "question_id": 10614}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "unittest.mock.create_autospec(spec, **kwargs, spec_set=False)", "intent": "Create a mock object using another object as a `spec` . If `spec_set` is True then attempting to set attributes that don \u2019 t exist on the spec object will raise an AttributeError . With arguments `**kwargs`.", "question_id": 11650}
{"snippet": "code.compile_command(source)", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1171}
{"snippet": "smtplib.SMTPConnectError", "intent": "Error occurred during establishment of a connection  with the server.", "question_id": 8504}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752}
{"snippet": "math.log1p(x)", "intent": "Return the natural logarithm of 1+x ( base e ) . The result is calculated in a way which is accurate for `x` near zero .", "question_id": 5909}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "mailbox.iterkeys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5729}
{"snippet": "curses.resetty()", "intent": "Restore the state of the terminal modes to what it was at the last call to savetty ( ) .", "question_id": 1974}
{"snippet": "xmlparser.ParseFile(file)", "intent": "Parse XML data reading from the object `file` .", "question_id": 7734}
{"snippet": "pool.starmap_async(func, iterable)", "intent": "A combination of starmap ( ) and map_async ( ) that iterates over `iterable` of iterables and calls `func` with the iterables unpacked .", "question_id": 6355}
{"snippet": "sys.version_info", "intent": "A tuple containing the five components of the version number: major, minor, micro, releaselevel, and serial.", "question_id": 9854}
{"snippet": "mimetypes.knownfiles", "intent": "List of type map file names commonly installed.", "question_id": 5951}
{"snippet": "cursor.rowcount", "intent": "Although the Cursor class of the sqlite3 module implements this attribute, the database engine\u2019s own support for the determination of \u201crows affected\u201d/\u201drows selected\u201d is quirky.", "question_id": 8849}
{"snippet": "Match.pos", "intent": "The value of pos which was passed to the search() or match() method of a regex object.", "question_id": 8009}
{"snippet": "deque.reverse()", "intent": "Reverse the elements of the deque in-place and then return None .", "question_id": 1367}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "Option.ALWAYS_TYPED_ACTIONS", "intent": "Actions that always take a type (i.e.", "question_id": 6654}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "time.time()", "intent": "Return the time in seconds since the epoch as a floating point number .", "question_id": 10458}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826}
{"snippet": "stringprep.in_table_c6(code)", "intent": "Determine whether `code` is in tableC.6 ( Inappropriate for plain text ) .", "question_id": 9544}
{"snippet": "bdb.checkfuncname(b, frame)", "intent": "Check whether we should break here , depending on the way the breakpoint `b` was set . If it was set via line number , it checks if b.line is the same as the one in the `frame` also passed as argument .", "question_id": 817}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this turtle .", "question_id": 11019}
{"snippet": "Unpacker.unpack_string()", "intent": "Unpacks and returns a variable length string .", "question_id": 12294}
{"snippet": "xmlparser.ErrorColumnNumber", "intent": "Column number at which an error occurred.", "question_id": 7750}
{"snippet": "test.support.check_syntax_error(testcase, statement)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "question_id": 10231}
{"snippet": "traceback.format_list(extracted_list)", "intent": "Given a list of tuples or FrameSummary objects as returned by extract_tb ( ) or extract_stack ( ) , return a list of strings ready for printing . With arguments `extracted_list`.", "question_id": 10775}
{"snippet": "asyncio.wait(aws, loop=None)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 608}
{"snippet": "Match.groups()", "intent": "Return a tuple containing all the subgroups of the match , from 1 up to however many groups are in the pattern .", "question_id": 7999}
{"snippet": "codeop.compile_command(source, filename=\"<input>\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . In that case , the `filename` attribute of the code object will be filename , which defaults to ' < input > ' .", "question_id": 1305}
{"snippet": "i_pv4_address.reverse_pointer", "intent": "The name of the reverse DNS PTR record for the IP address, e.g.", "question_id": 5179}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "doctest.DocTestRunner()", "intent": "A processing class used to execute and verify the interactive examples in a DocTest .", "question_id": 2861}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "HTTPResponse.reason", "intent": "Reason phrase returned by server.", "question_id": 4465}
{"snippet": "IncrementalParser.feed(data)", "intent": "Process a chunk of `data` .", "question_id": 12627}
{"snippet": "html.entities.html5", "intent": "A dictionary that maps HTML5 named character references 1 to the equivalent Unicode character(s), e.g.", "question_id": 4342}
{"snippet": "errno.ELIBBAD", "intent": "Accessing a corrupted shared library", "question_id": 3585}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617}
{"snippet": "os.nice(increment)", "intent": "Add `increment` to the process \u2019 s \u201c niceness \u201d .", "question_id": 7039}
{"snippet": "ctypes.pythonapi", "intent": "An instance of PyDLL that exposes Python C API functions as attributes.", "question_id": 1785}
{"snippet": "errno.EALREADY", "intent": "Operation already in progress", "question_id": 3619}
{"snippet": "set.pop()", "intent": "Remove and return an arbitrary element from the set .", "question_id": 9465}
{"snippet": "gc.get_objects()", "intent": "Returns a list of all objects tracked by the collector , excluding the list returned .", "question_id": 4174}
{"snippet": "struct.format", "intent": "The format string used to construct this Struct object.", "question_id": 9565}
{"snippet": "@functools.singledispatch", "intent": "Transform a function into a single-dispatch generic function.", "question_id": 4155}
{"snippet": "@typing.type_check_only", "intent": "Decorator to mark a class or function to be unavailable at runtime.", "question_id": 11330}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "stats.add(*filenames)", "intent": "This method of the Stats class accumulates additional profiling information into the current profiling object . With arguments `*filenames`.", "question_id": 7691}
{"snippet": "threading.stack_size(size)", "intent": "Return the thread stack `size` used when creating new threads .", "question_id": 10348}
{"snippet": "curses.ascii.isspace(c)", "intent": "Checks for ASCII white-space characters ; space , line feed , carriage return , form feed , horizontal tab , vertical tab . With arguments `c`.", "question_id": 1909}
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223}
{"snippet": "base_http_request_handler.rfile", "intent": "An io.BufferedIOBase input stream, ready to read from the start of the optional input data.", "question_id": 4625}
{"snippet": "decimal.to_integral_value()", "intent": "Round to the nearest integer without signaling Inexact or Rounded .", "question_id": 2488}
{"snippet": "doctest.DocTestSuite(test_finder=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `test_finder` is the DocTestFinder object ( or a drop-in replacement ) that is used to extract doctests from the module .", "question_id": 2810}
{"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358}
{"snippet": "test_result.tb_locals", "intent": "If set to true then local variables will be shown in tracebacks.", "question_id": 11517}
{"snippet": "asyncio.Queue(maxsize=0, loop=None)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite . With arguments `loop`.", "question_id": 448}
{"snippet": "uuid.RFC_4122", "intent": "Specifies the UUID layout given in RFC 4122.", "question_id": 11969}
{"snippet": "__import__(name, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4138}
{"snippet": "logging.getLogger()", "intent": "Return a logger with the specified `name` or , if name is None , return a logger which is the root logger of the hierarchy .", "question_id": 5633}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "configparser.InterpolationDepthError", "intent": "Exception raised when string interpolation cannot be completed because the number of iterations exceeds MAX_INTERPOLATION_DEPTH.", "question_id": 1597}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "shlex.split(s, posix=True)", "intent": "Split the string `s` using shell-like syntax . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8270}
{"snippet": "Cookie.secure", "intent": "True if cookie should only be returned over a secure connection.", "question_id": 4562}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : With arguments `*paths`.", "question_id": 2797}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "Path.write_bytes(data)", "intent": "Open the file pointed to in bytes mode , write `data` to it , and close the file :", "question_id": 7322}
{"snippet": "i_pv4_interface.ip", "intent": "The address (IPv4Address) without network information.", "question_id": 5225}
{"snippet": "subprocess.CompletedProcess", "intent": "The return value from run(), representing a process that has finished.", "question_id": 9577}
{"snippet": "decimal.ROUND_05UP", "intent": "Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero.", "question_id": 2584}
{"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}
{"snippet": "cgi.test()", "intent": "Robust test CGI script , usable as main program .", "question_id": 1052}
{"snippet": "os.get_terminal_size()", "intent": "Return the size of the terminal window as ( columns , lines ) , tuple of type terminal_size .", "question_id": 6811}
{"snippet": "traceback.print_tb(tb)", "intent": "Print up to `limit` stack trace entries from traceback object `tb` ( starting from the caller \u2019 s frame ) if limit is positive .", "question_id": 10733}
{"snippet": "FTP.transfercmd(cmd)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection .", "question_id": 3943}
{"snippet": "Database.Close()", "intent": "Close the database object , through MsiCloseHandle ( ) .", "question_id": 6071}
{"snippet": "os.closerange(fd_low, fd_high)", "intent": "Close all file descriptors from `fd_low` ( inclusive ) to `fd_high` ( exclusive ) , ignoring errors .", "question_id": 6714}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "xmlrpc.server.SimpleXMLRPCRequestHandler", "intent": "Create a new request handler instance.", "question_id": 12730}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951}
{"snippet": "compileall.compile_path(skip_curdir=True)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search .", "question_id": 1430}
{"snippet": "token.COMMENT", "intent": "Token value used to indicate a comment.", "question_id": 10698}
{"snippet": "cmath.nanj", "intent": "Complex number with zero real part and NaN imaginary part.", "question_id": 1126}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "DocTestFailure.test", "intent": "The DocTest object that was being run when the example failed.", "question_id": 2903}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929}
{"snippet": "webbrowser.open(url)", "intent": "Display `url` using the default browser .", "question_id": 12102}
{"snippet": "FTP.retrlines(cmd)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "question_id": 3930}
{"snippet": "test_loader.loadTestsFromModule(module)", "intent": "Return a suite of all test cases contained in the given `module` .", "question_id": 11492}
{"snippet": "lzma.compress(data, format=FORMAT_XZ)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5705}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "decimal.logical_and(other)", "intent": "logical_and ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2435}
{"snippet": "cursor.execute(sql, parameters)", "intent": "Executes an SQL statement . With arguments `sql`, `parameters`.", "question_id": 8840}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "Popen.stdin", "intent": "If the stdin argument was PIPE, this attribute is a writeable stream object as returned by open().", "question_id": 9620}
{"snippet": "xmlparser.CurrentByteIndex", "intent": "Current byte index in the parser input.", "question_id": 7752}
{"snippet": "json.JSONEncoder(skipkeys=False)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None .", "question_id": 5323}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "FTP.dir(argument)", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3957}
{"snippet": "html_calendar.cssclasses_weekday_head", "intent": "A list of CSS classes used for weekday names in the header row.", "question_id": 972}
{"snippet": "path_entry_finder.find_loader(fullname)", "intent": "A legacy method for finding a loader for the specified module . With arguments `fullname`.", "question_id": 4810}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827}
{"snippet": "inspect.getmembers(object, predicate)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name . If the optional `predicate` argument is supplied , only members for which the predicate returns a true value are included .", "question_id": 4945}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739}
{"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832}
{"snippet": "platform.platform(aliased=0, terse=0)", "intent": "Returns a single string identifying the underlying platform with as much useful information as possible . If `aliased` is true , the function will use aliases for various platforms that report system names which differ from their common names , for example SunOS will be reported as Solaris . Setting `terse` to true causes the function to return only the absolute minimum information needed to identify the platform .", "question_id": 7471}
{"snippet": "random.shuffle(x)", "intent": "Shuffle the sequence `x` in place .", "question_id": 7904}
{"snippet": "directory.remove_pyc()", "intent": "Remove .pyc files on uninstall .", "question_id": 6113}
{"snippet": "loader.exec_module(module)", "intent": "An abstract method that executes the `module` in its own namespace when a module is imported or reloaded .", "question_id": 4815}
{"snippet": "io.RawIOBase", "intent": "Base class for raw binary I/O.", "question_id": 5083}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826}
{"snippet": "HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)", "intent": "Return a Request or None in response to a redirect . If a redirection should take place , return a new Request to allow http_error_30* ( ) to perform the redirect to `newurl` . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11850}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "signature.replace()", "intent": "Create a new Signature instance based on the instance replace was invoked on .", "question_id": 4990}
{"snippet": "math.isinf(x)", "intent": "Return True if `x` is a positive or negative infinity , and False otherwise .", "question_id": 5899}
{"snippet": "str.splitlines()", "intent": "Return a list of the lines in the string , breaking at line boundaries .", "question_id": 9246}
{"snippet": "importlib.machinery.BYTECODE_SUFFIXES", "intent": "A list of strings representing the recognized file suffixes for bytecode modules (including the leading dot).", "question_id": 4868}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "gzip.open(filename)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4272}
{"snippet": "errno.EOVERFLOW", "intent": "Value too large for defined data type", "question_id": 3580}
{"snippet": "simple_http_request_handler.extensions_map", "intent": "A dictionary mapping suffixes into MIME types.", "question_id": 4662}
{"snippet": "xmlparser.NotStandaloneHandler()", "intent": "Called if the XML document hasn \u2019 t been declared as being a standalone document .", "question_id": 7774}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124}
{"snippet": "cmath.sqrt(x)", "intent": "Return the square root of `x` .", "question_id": 1100}
{"snippet": "Cmd.doc_header", "intent": "The header to issue if the help output has a section for documented commands.", "question_id": 1150}
{"snippet": "linecache.lazycache(filename, module_globals)", "intent": "Capture enough detail about a non-file-based module to permit getting its lines later via getline ( ) even if `module_globals` is None in the later call . With arguments `filename`.", "question_id": 5348}
{"snippet": "stat.UF_HIDDEN", "intent": "The file should not be displayed in a GUI (Mac OS X 10.5+).", "question_id": 9119}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}
{"snippet": "socket.recvfrom_into(buffer)", "intent": "Receive data from the socket , writing it into `buffer` instead of creating a new bytestring .", "question_id": 8713}
{"snippet": "@typing.no_type_check_decorator", "intent": "Decorator to give another decorator the no_type_check() effect.", "question_id": 11329}
{"snippet": "env_builder.setup_python(context)", "intent": "Creates a copy or symlink to the Python executable in the environment . With arguments `context`.", "question_id": 11985}
{"snippet": "tkinter.tix.OptionMenu", "intent": "The OptionMenu creates a menu button of options.", "question_id": 10559}
{"snippet": "env_builder.install_scripts(context, path)", "intent": "`path` is the path to a directory that should contain subdirectories \u201c common \u201d , \u201c posix \u201d , \u201c nt \u201d , each containing scripts destined for the bin directory in the environment . With arguments `context`.", "question_id": 11988}
{"snippet": "tarfile.ENCODING", "intent": "The default character encoding: 'utf-8' on Windows, the value returned by sys.getfilesystemencoding() otherwise.", "question_id": 9908}
{"snippet": "file_loader.load_module(fullname)", "intent": "Calls super \u2019 s load_module ( ) . With arguments `fullname`.", "question_id": 4838}
{"snippet": "SubprocessTransport.kill()", "intent": "Kill the subprocess .", "question_id": 422}
{"snippet": "decimal.ROUND_HALF_EVEN", "intent": "Round to nearest with ties going to nearest even integer.", "question_id": 2581}
{"snippet": "mh.pack()", "intent": "Rename messages in the mailbox as necessary to eliminate gaps in numbering .", "question_id": 5785}
{"snippet": "errno.EFBIG", "intent": "File too large", "question_id": 3532}
{"snippet": "calendar.HTMLCalendar()", "intent": "This class can be used to generate HTML calendars .", "question_id": 956}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "pkgutil.ImpImporter()", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm .", "question_id": 7437}
{"snippet": "locale.getdefaultlocale(envvars)", "intent": "Tries to determine the default locale settings and returns them as a tuple of the form ( language code , encoding ) . To maintain compatibility with other platforms , not only the LANG variable is tested , but a list of variables given as `envvars` parameter .", "question_id": 5373}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934}
{"snippet": "re.sub(pattern, repl, string, count=0, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "question_id": 7954}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "tarfile.TarFile(mode='r')", "intent": "All following arguments are optional and can be accessed as instance attributes as well . `mode` is either ' r ' to read from an existing archive , ' a ' to append data to an existing file , ' w ' to create a new file overwriting an existing one , or ' x ' to create a new file only if it does not already exist .", "question_id": 9915}
{"snippet": "decimal.as_integer_ratio()", "intent": "Return a pair ( n , d ) of integers that represent the given Decimal instance as a fraction , in lowest terms and with a positive denominator :", "question_id": 2396}
{"snippet": "ref.__callback__", "intent": "This read-only attribute returns the callback currently associated to the weakref.", "question_id": 12076}
{"snippet": "sqlite3.enable_callback_tracebacks(flag)", "intent": "By default you will not get any tracebacks in user-defined functions , aggregates , converters , authorizer callbacks etc . If you want to debug them , you can call this function with `flag` set to True .", "question_id": 8802}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "secrets.compare_digest(a, b)", "intent": "Return True if strings `a` and `b` are equal , otherwise False , in such a way as to reduce the risk of timing attacks .", "question_id": 8147}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "os.mknod(path)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6874}
{"snippet": "random.random()", "intent": "Return the next random floating point number in the range [ 0.0 , 1.0 ) .", "question_id": 7906}
{"snippet": "itertools.compress(data, selectors)", "intent": "Make an iterator that filters elements from `data` returning only those that have a corresponding element in `selectors` that evaluates to True .", "question_id": 5245}
{"snippet": "NotImplemented", "intent": "Special value which should be returned by the binary special methods (e.g.", "question_id": 1605}
{"snippet": "decimal.is_zero()", "intent": "Return True if the argument is a ( positive or negative ) zero and False otherwise .", "question_id": 2428}
{"snippet": "DocumentType.internalSubset", "intent": "A string giving the complete internal subset from the document.", "question_id": 12340}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "os.GRND_NONBLOCK", "intent": "By  default, when reading from /dev/random, getrandom() blocks if no random bytes are available, and when reading from /dev/urandom, it blocks if the entropy pool has not yet been initialized.", "question_id": 7140}
{"snippet": "mailbox.lock()", "intent": "Acquire an exclusive advisory lock on the mailbox so that other processes know not to modify it .", "question_id": 5751}
{"snippet": "errno.errorcode", "intent": "Dictionary providing a mapping from the errno value to the string name in the underlying system.", "question_id": 3505}
{"snippet": "configparser.InterpolationMissingOptionError", "intent": "Exception raised when an option referenced from a value does not exist.", "question_id": 1598}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}
{"snippet": "shutil.which(cmd, mode=os.F_OK | os.X_OK)", "intent": "Return the `path` to an executable which would be run if the given `cmd` was called . `mode` is a permission mask passed to os.access ( ) , by default determining if the file exists and executable .", "question_id": 8346}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "ctypes.util.find_msvcrt()", "intent": "Windows only : return the filename of the VC runtime library used by Python , and by the extension modules .", "question_id": 1820}
{"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}
{"snippet": "raw_io_base.readall()", "intent": "Read and return all the bytes from the stream until EOF , using multiple calls to the stream if necessary .", "question_id": 5086}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "decimal.Overflow", "intent": "Numerical overflow.", "question_id": 2590}
{"snippet": "Option.dest", "intent": "(default: derived from option strings)", "question_id": 6628}
{"snippet": "errno.ERANGE", "intent": "Math result not representable", "question_id": 3539}
{"snippet": "async_exit_stack.aclose()", "intent": "Similar to close ( ) but properly handles awaitables .", "question_id": 1636}
{"snippet": "turtle.textinput(title, prompt)", "intent": "Pop up a dialog window for input of a string . Parameter `title` is the title of the dialog window , `prompt` is a text mostly describing what information to input .", "question_id": 11083}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543}
{"snippet": "UUID.bytes_le", "intent": "The UUID as a 16-byte string (with time_low, time_mid, and time_hi_version in little-endian byte order).", "question_id": 11948}
{"snippet": "CookiePolicy.hide_cookie2", "intent": "Don\u2019t add Cookie2 header to requests (the presence of this header indicates to the server that we understand RFC 2965 cookies).", "question_id": 4538}
{"snippet": "sys.getrecursionlimit()", "intent": "Return the current value of the recursion limit , the maximum depth of the Python interpreter stack .", "question_id": 9801}
{"snippet": "re.finditer(pattern, string)", "intent": "Return an iterator yielding match objects over all non-overlapping matches for the RE `pattern` in `string` .", "question_id": 7949}
{"snippet": "email.mime.audio.MIMEAudio(_audiodata, **_params, _subtype=None)", "intent": "Module : email.mime.audio `_audiodata` is a string containing the raw audio data . Otherwise you can explicitly specify the audio subtype via the `_subtype` argument . With arguments `**_params`.", "question_id": 3335}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "http.server.ThreadingHTTPServer(server_address, RequestHandlerClass)", "intent": "This class is identical to HTTPServer but uses threads to handle requests by using the ThreadingMixIn . With arguments `server_address`, `RequestHandlerClass`.", "question_id": 4615}
{"snippet": "importlib.abc.SourceLoader", "intent": "An abstract base class for implementing source (and optionally bytecode) file loading.", "question_id": 4841}
{"snippet": "selectors.DefaultSelector", "intent": "The default selector class, using the most efficient implementation available on the current platform.", "question_id": 8225}
{"snippet": "configparser.RawConfigParser(':'), ';'))", "intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`.", "question_id": 1579}
{"snippet": "formatter.format(format_string, *args, **kwargs)", "intent": "The primary API method . With arguments `format_string`, `*args`, `**kwargs`.", "question_id": 9517}
{"snippet": "msvcrt.putwch(unicode_char)", "intent": "Wide char variant of putch ( ) , accepting a Unicode value . With arguments `unicode_char`.", "question_id": 6161}
{"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}
{"snippet": "cgi.print_environ_usage()", "intent": "Print a list of useful ( used by CGI ) environment variables in HTML .", "question_id": 1056}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922}
{"snippet": "base_http_request_handler.sys_version", "intent": "Contains the Python system version, in a form usable by the version_string method and the server_version class variable.", "question_id": 4628}
{"snippet": "multiprocessing.pool.Pool(processes, initializer)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts .", "question_id": 6329}
{"snippet": "stat.S_IFLNK", "intent": "Symbolic link.", "question_id": 9085}
{"snippet": "raw_io_base.readall()", "intent": "Read and return all the bytes from the stream until EOF , using multiple calls to the stream if necessary .", "question_id": 5086}
{"snippet": "errno.ENOTUNIQ", "intent": "Name not unique on network", "question_id": 3581}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "asyncio.AbstractEventLoop", "intent": "Abstract base class for asyncio-compliant event loops.", "question_id": 344}
{"snippet": "hash.digest_size", "intent": "The size of the resulting hash in bytes.", "question_id": 4301}
{"snippet": "curses.has_il()", "intent": "Return True if the terminal has insert- and delete-line capabilities , or can simulate them using scrolling regions .", "question_id": 1942}
{"snippet": "xml.dom.NamespaceErr", "intent": "If an attempt is made to change any object in a way that is not permitted with regard to the Namespaces in XML recommendation, this exception is raised.", "question_id": 12389}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}
{"snippet": "unittest.main()", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable .", "question_id": 11545}
{"snippet": "chain.from_iterable(iterable)", "intent": "Alternate constructor for chain ( ) . Gets chained inputs from a single `iterable` argument that is evaluated lazily .", "question_id": 5242}
{"snippet": "widget.bbox(item)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) .", "question_id": 10620}
{"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617}
{"snippet": "bdb.set_return(frame)", "intent": "Stop when returning from the given `frame` .", "question_id": 787}
{"snippet": "path_entry_finder.find_loader(fullname)", "intent": "A legacy method for finding a loader for the specified module . With arguments `fullname`.", "question_id": 4810}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427}
{"snippet": "@typing.no_type_check", "intent": "Decorator to indicate that annotations are not type hints.", "question_id": 11328}
{"snippet": "pool.imap(func, iterable, chunksize)", "intent": "A lazier version of map ( ) . The `chunksize` argument is the same as the one used by the map ( ) method . With arguments `func`, `iterable`.", "question_id": 6346}
{"snippet": "test_result.shouldStop", "intent": "Set to True when the execution of tests should stop by stop().", "question_id": 11513}
{"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}
{"snippet": "resource.RLIMIT_CORE", "intent": "The maximum size (in bytes) of a core file that the current process can create.", "question_id": 8075}
{"snippet": "NNTP.help()", "intent": "Send a HELP command .", "question_id": 6474}
{"snippet": "subprocess.CREATE_NEW_CONSOLE", "intent": "The new process has a new console, instead of inheriting its parent\u2019s console (the default).", "question_id": 9647}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "charset.__str__()", "intent": "Returns input_charset as a string coerced to lower case .", "question_id": 2923}
{"snippet": "xml.etree.ElementTree.iterparse(source)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data .", "question_id": 12442}
{"snippet": "pdb.pm()", "intent": "Enter post-mortem debugging of the traceback found in sys.last_traceback .", "question_id": 7340}
{"snippet": "stat.ST_ATIME", "intent": "Time of last access.", "question_id": 9081}
{"snippet": "Telnet.mt_interact()", "intent": "Multithreaded version of interact ( ) .", "question_id": 10029}
{"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145}
{"snippet": "Cookie.expires", "intent": "Integer expiry date in seconds since epoch, or None.", "question_id": 4563}
{"snippet": "locale.currency(val, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5395}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271}
{"snippet": "syslog.setlogmask(maskpri)", "intent": "Set the priority mask to `maskpri` and return the previous mask value .", "question_id": 9884}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372}
{"snippet": "resource.RLIMIT_MEMLOCK", "intent": "The maximum address space which may be locked in memory.", "question_id": 8084}
{"snippet": "time.CLOCK_REALTIME", "intent": "System-wide real-time clock.", "question_id": 10471}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943}
{"snippet": "Path.is_dir()", "intent": "Return True if the path points to a directory ( or a symbolic link pointing to a directory ) , False if it points to another kind of file .", "question_id": 7273}
{"snippet": "aifc.setparams(nchannels, sampwidth, framerate, comptype, compname)", "intent": "Set all the above parameters at once . With arguments `nchannels`, `sampwidth`, `framerate`, `comptype`, `compname`.", "question_id": 32}
{"snippet": "test_loader.loadTestsFromTestCase(testCaseClass)", "intent": "Return a suite of all test cases contained in the TestCase-derived `testCaseClass` .", "question_id": 11491}
{"snippet": "test.support.CleanImport(*module_names)", "intent": "A context manager to force import to return a new module reference . With arguments `*module_names`.", "question_id": 10290}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}
{"snippet": "Telnet.mt_interact()", "intent": "Multithreaded version of interact ( ) .", "question_id": 10029}
{"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}
{"snippet": "mime_types.types_map_inv", "intent": "Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types.", "question_id": 5963}
{"snippet": "curses.use_default_colors()", "intent": "Allow use of default values for colors on terminals supporting this feature .", "question_id": 1998}
{"snippet": "stat_result.st_atime", "intent": "Time of most recent access expressed in seconds.", "question_id": 6929}
{"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}
{"snippet": "pickle.Pickler(file)", "intent": "This takes a binary `file` for writing a pickle data stream .", "question_id": 7390}
{"snippet": "turtle.register_shape(name)", "intent": "There are three different ways to call this function : With arguments `name`.", "question_id": 11098}
{"snippet": "dis.hasname", "intent": "Sequence of bytecodes that access an attribute by name.", "question_id": 2747}
{"snippet": "statistics.median_high(data)", "intent": "Return the high median of `data` .", "question_id": 9129}
{"snippet": "signal.NSIG", "intent": "One more than the number of the highest signal number.", "question_id": 8378}
{"snippet": "email.generator.Generator(outfp, mangle_from_=None)", "intent": "Return a Generator object that will write any message provided to the flatten ( ) method , or any text provided to the write ( ) method , to the file-like object `outfp` . If optional `mangle_from_` is True , put a > character in front of any line in the body that starts with the exact string `` From `` , that is From followed by a space at the beginning of a line .", "question_id": 3093}
{"snippet": "syslog.syslog(priority, message)", "intent": "Send the string `message` to the system logger . Each message is tagged with a `priority` composed of a facility and a level .", "question_id": 9878}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "formatter.vformat(format_string, args, kwargs)", "intent": "This function does the actual work of formatting . With arguments `format_string`, `args`, `kwargs`.", "question_id": 9518}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "mailbox.iteritems()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5734}
{"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "winreg.REG_BINARY", "intent": "Binary data in any form.", "question_id": 12174}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802}
{"snippet": "webbrowser.register(name, constructor)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12110}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122}
{"snippet": "sync_manager.BoundedSemaphore()", "intent": "Create a shared threading.BoundedSemaphore object and return a proxy for it .", "question_id": 6300}
{"snippet": "datetime.min", "intent": "The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None).", "question_id": 2269}
{"snippet": "codec_info.encode", "intent": "The stateless encoding and decoding functions.", "question_id": 1212}
{"snippet": "errno.EFBIG", "intent": "File too large", "question_id": 3532}
{"snippet": "socket.SocketType", "intent": "This is a Python type object that represents the socket object type.", "question_id": 8633}
{"snippet": "urllib.parse.urlencode(query, doseq=False, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11738}
{"snippet": "mime_types.guess_extension(type)", "intent": "Similar to the guess_extension ( ) function , using the tables stored as part of the object . With arguments `type`.", "question_id": 5964}
{"snippet": "semaphore.acquire(blocking=True)", "intent": "Acquire a semaphore . When invoked with `blocking` set to false , do not block .", "question_id": 10400}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_ABORTED", "intent": "This should not be reported to Python applications.", "question_id": 7818}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "base_server.handle_timeout()", "intent": "This function is called when the timeout attribute has been set to a value other than None and the timeout period has passed with no requests being received .", "question_id": 8778}
{"snippet": "inspect.signature(callable)", "intent": "Return a Signature object for the given `callable` :", "question_id": 4977}
{"snippet": "somenamedtuple._replace(**kwargs)", "intent": "Return a new instance of the named tuple replacing specified fields with new values : With arguments `**kwargs`.", "question_id": 1386}
{"snippet": "wsgiref.handlers.read_environ()", "intent": "Transcode CGI variables from os.environ to PEP 3333 \u201c bytes in unicode \u201d strings , returning a new dictionary .", "question_id": 12270}
{"snippet": "connection.set_authorizer(authorizer_callback)", "intent": "This routine registers a callback . With arguments `authorizer_callback`.", "question_id": 8820}
{"snippet": "os.makedirs(name, mode=0o777)", "intent": "Recursive directory creation function . The `mode` parameter is passed to mkdir ( ) for creating the leaf directory ; see the mkdir ( ) description for how it is interpreted . With arguments `name`.", "question_id": 6867}
{"snippet": "stringprep.in_table_c11_c12(code)", "intent": "Determine whether `code` is in tableC.1 ( Space characters , union of C.1.1 and C.1.2 ) .", "question_id": 9537}
{"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300}
{"snippet": "asyncio.open_unix_connection(ssl=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `ssl`.", "question_id": 487}
{"snippet": "env_builder.create(env_dir)", "intent": "Create a virtual environment by specifying the target directory ( absolute or relative to the current directory ) which is to contain the virtual environment . With arguments `env_dir`.", "question_id": 11982}
{"snippet": "loop.close()", "intent": "Close the event loop .", "question_id": 187}
{"snippet": "connection.execute(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8811}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}
{"snippet": "threading.Condition()", "intent": "This class implements condition variable objects .", "question_id": 10386}
{"snippet": "shlex.source", "intent": "This attribute is None by default.", "question_id": 8303}
{"snippet": "gnu_translations.gettext(message)", "intent": "Look up the `message` id in the catalog and return the corresponding message string , as a Unicode string .", "question_id": 4261}
{"snippet": "pkgutil.get_data(package, resource)", "intent": "Get a `resource` from a `package` .", "question_id": 7457}
{"snippet": "executor.map(func, *iterables, timeout=None)", "intent": "Similar to map ( `func` , `*iterables` ) except : The returned iterator raises a concurrent.futures.TimeoutError if __next__ ( ) is called and the result isn \u2019 t available after `timeout` seconds from the original call to Executor.map ( ) .", "question_id": 1442}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "test.support.import_fresh_module(name)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10242}
{"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "smtp_server.channel_class", "intent": "Override this in subclasses to use a custom SMTPChannel for managing SMTP clients.", "question_id": 8423}
{"snippet": "winreg.DisableReflectionKey(key)", "intent": "Disables registry reflection for 32-bit processes running on a 64-bit operating system . `key` is an already open key , or one of the predefined HKEY_* constants .", "question_id": 12152}
{"snippet": "IMAP4.namespace()", "intent": "Returns IMAP namespaces as defined in RFC 2342 .", "question_id": 4717}
{"snippet": "loop.call_exception_handler(context)", "intent": "Call the current event loop exception handler . `context` is a dict object containing the following keys ( new keys may be introduced in future Python versions ) :", "question_id": 310}
{"snippet": "BaseCookie.js_output(attrs=None)", "intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP headers was sent . The meaning for `attrs` is the same as in output ( ) .", "question_id": 4593}
{"snippet": "test_loader.sortTestMethodsUsing", "intent": "Function to be used to compare method names when sorting them in getTestCaseNames() and all the loadTestsFrom*() methods.", "question_id": 11504}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "patch.multiple(target, **kwargs, create=False)", "intent": "Perform multiple patches in a single call . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11634}
{"snippet": "bdb.set_return(frame)", "intent": "Stop when returning from the given `frame` .", "question_id": 787}
{"snippet": "inspect.getmodulename(path)", "intent": "Return the name of the module named by the file `path` , without including the names of enclosing packages .", "question_id": 4947}
{"snippet": "task.add_done_callback(callback, context=None)", "intent": "Add a `callback` to be run when the Task is done . With arguments `context`.", "question_id": 632}
{"snippet": "OptionParser.set_defaults(dest=value)", "intent": "Set default values for several option destinations at once . With arguments `dest`.", "question_id": 6648}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "readline.write_history_file(filename)", "intent": "Save the history list to a readline history file , overwriting any existing file . The default `filename` is ~/.history .", "question_id": 8023}
{"snippet": "ctypes.c_ubyte", "intent": "Represents the C unsigned char datatype, it interprets the value as small integer.", "question_id": 1871}
{"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047}
{"snippet": "Node.toxml(encoding=None)", "intent": "Return a string or byte string containing the XML represented by the DOM node . With an explicit `encoding` 1 argument , the result is a byte string in the specified encoding .", "question_id": 12412}
{"snippet": "str.isnumeric()", "intent": "Return true if all characters in the string are numeric characters , and there is at least one character , false otherwise .", "question_id": 9209}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "subprocess.CompletedProcess", "intent": "The return value from run(), representing a process that has finished.", "question_id": 9577}
{"snippet": "memoryview.format", "intent": "A string containing the format (in struct module style) for each element in the view.", "question_id": 9422}
{"snippet": "turtle.clearstamp(stampid)", "intent": "Delete stamp with given `stampid` .", "question_id": 10930}
{"snippet": "module_finder.report()", "intent": "Print a report to standard output that lists the modules imported by the script and their paths , as well as modules that are missing or seem to be missing .", "question_id": 6055}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "subprocess.CREATE_NEW_CONSOLE", "intent": "The new process has a new console, instead of inheriting its parent\u2019s console (the default).", "question_id": 9647}
{"snippet": "template.substitute(mapping, **kwds)", "intent": "Performs the template substitution , returning a new string . `mapping` is any dictionary-like object with keys that match the placeholders in the template . With arguments `**kwds`.", "question_id": 9526}
{"snippet": "test.support.check_syntax_error(testcase, statement, lineno=None, offset=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `lineno` is not None , compares to the line of the SyntaxError . If `offset` is not None , compares to the offset of the SyntaxError .", "question_id": 10237}
{"snippet": "_c_data._b_base_", "intent": "Sometimes ctypes data instances do not own the memory block they contain, instead they share part of the memory block of a base object.", "question_id": 1850}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "FTP.ntransfercmd(cmd)", "intent": "Like transfercmd ( ) , but returns a tuple of the data connection and the expected size of the data . `cmd` and `rest` means the same thing as in transfercmd ( ) .", "question_id": 3945}
{"snippet": "io.DEFAULT_BUFFER_SIZE", "intent": "An int containing the default buffer size used by the module\u2019s buffered I/O classes.", "question_id": 5050}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "sys.displayhook(value)", "intent": "If `value` is not None , this function prints repr ( value ) to sys.stdout , and saves value in builtins._ .", "question_id": 9779}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "xml.etree.ElementTree.TreeBuilder(element_factory=None)", "intent": "Generic element structure builder . `element_factory` , when given , must be a callable accepting two positional arguments : a tag and a dict of attributes .", "question_id": 12540}
{"snippet": "doctest.DONT_ACCEPT_BLANKLINE", "intent": "By default, if an expected output block contains a line containing only the string <BLANKLINE>, then that line will match a blank line in the actual output.", "question_id": 2753}
{"snippet": "file_finder.find_spec(fullname)", "intent": "Attempt to find the spec to handle `fullname` within path .", "question_id": 4884}
{"snippet": "doctest.DocFileSuite(*paths, encoding=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `encoding` specifies an encoding that should be used to convert the file to unicode . With arguments `*paths`.", "question_id": 2804}
{"snippet": "async_result.get()", "intent": "Return the result when it arrives .", "question_id": 6361}
{"snippet": "base_server.handle_timeout()", "intent": "This function is called when the timeout attribute has been set to a value other than None and the timeout period has passed with no requests being received .", "question_id": 8778}
{"snippet": "io.DEFAULT_BUFFER_SIZE", "intent": "An int containing the default buffer size used by the module\u2019s buffered I/O classes.", "question_id": 5050}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}
{"snippet": "test.support.start_threads(threads)", "intent": "Context manager to start `threads` .", "question_id": 10198}
{"snippet": "types.prepare_class(name, bases=(), kwds=None)", "intent": "Calculates the appropriate metaclass and creates the class namespace . The arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) and the keyword arguments ( such as metaclass ) . The return value is a 3-tuple : metaclass , namespace , `kwds` With arguments `bases`.", "question_id": 11181}
{"snippet": "urllib.parse.urlunsplit(parts)", "intent": "Combine the elements of a tuple as returned by urlsplit ( ) into a complete URL as a string . The `parts` argument can be any five-item iterable .", "question_id": 11694}
{"snippet": "shutil.which(cmd, mode=os.F_OK | os.X_OK)", "intent": "Return the `path` to an executable which would be run if the given `cmd` was called . `mode` is a permission mask passed to os.access ( ) , by default determining if the file exists and executable .", "question_id": 8346}
{"snippet": "dispatcher.recv(buffer_size)", "intent": "Read at most `buffer_size` bytes from the socket \u2019 s remote end-point .", "question_id": 669}
{"snippet": "@functools.singledispatch", "intent": "Transform a function into a single-dispatch generic function.", "question_id": 4155}
{"snippet": "errno.ENOSYS", "intent": "Function not implemented", "question_id": 3543}
{"snippet": "asyncio.Future(loop=None)", "intent": "A Future represents an eventual result of an asynchronous operation . This way alternative event `loop` implementations can inject their own optimized implementations of a Future object .", "question_id": 360}
{"snippet": "weakref.ProxyType", "intent": "The type object for proxies of objects which are not callable.", "question_id": 12097}
{"snippet": "email.generator.Generator(outfp, mangle_from_=None)", "intent": "Return a Generator object that will write any message provided to the flatten ( ) method , or any text provided to the write ( ) method , to the file-like object `outfp` . If optional `mangle_from_` is True , put a > character in front of any line in the body that starts with the exact string `` From `` , that is From followed by a space at the beginning of a line .", "question_id": 3093}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_OPT", "intent": "The model is optional: it can appear once or not at all, as for A?.", "question_id": 7784}
{"snippet": "base_handler.sendfile()", "intent": "Override to implement platform-specific file transmission .", "question_id": 12267}
{"snippet": "sequence_matcher.quick_ratio()", "intent": "Return an upper bound on ratio ( ) relatively quickly .", "question_id": 2688}
{"snippet": "re.finditer(pattern, string)", "intent": "Return an iterator yielding match objects over all non-overlapping matches for the RE `pattern` in `string` .", "question_id": 7949}
{"snippet": "simple_http_request_handler.directory", "intent": "If not specified, the directory to serve is the current working directory.", "question_id": 4663}
{"snippet": "window.syncok(flag)", "intent": "If `flag` is True , then syncup ( ) is called automatically whenever there is a change in the window .", "question_id": 2122}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "re.subn(pattern, repl, string)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`.", "question_id": 7955}
{"snippet": "msilib.Binary(filename)", "intent": "Represents entries in the Binary table ; inserting such an object using add_data ( ) reads the file named `filename` into the table .", "question_id": 6064}
{"snippet": "doctest.UnexpectedException(test, example, exc_info)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` raised an unexpected exception . With arguments `test`, `exc_info`.", "question_id": 2906}
{"snippet": "platform.libc_ver()", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7537}
{"snippet": "ssl.MemoryBIO", "intent": "A memory buffer that can be used to pass data between Python and an SSL protocol instance.", "question_id": 9053}
{"snippet": "test_result.tb_locals", "intent": "If set to true then local variables will be shown in tracebacks.", "question_id": 11517}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "curses.resetty()", "intent": "Restore the state of the terminal modes to what it was at the last call to savetty ( ) .", "question_id": 1974}
{"snippet": "Cookie.port_specified", "intent": "True if a port or set of ports was explicitly specified by the server (in the Set-Cookie / Set-Cookie2 header).", "question_id": 4568}
{"snippet": "modulefinder.ModuleFinder(excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6028}
{"snippet": "multiprocessing.set_executable()", "intent": "Sets the path of the Python interpreter to use when starting a child process .", "question_id": 6228}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}
{"snippet": "FTP.delete(filename)", "intent": "Remove the file named `filename` from the server .", "question_id": 3960}
{"snippet": "timedelta.min", "intent": "The most negative timedelta object, timedelta(-999999999).", "question_id": 2214}
{"snippet": "curses.ascii.isupper(c)", "intent": "Checks for an ASCII uppercase letter . With arguments `c`.", "question_id": 1910}
{"snippet": "Option.choices", "intent": "For options of type \"choice\", the list of strings the user may choose from.", "question_id": 6632}
{"snippet": "io.BytesIO()", "intent": "A stream implementation using an in-memory bytes buffer .", "question_id": 5110}
{"snippet": "simple_http_request_handler.directory", "intent": "If not specified, the directory to serve is the current working directory.", "question_id": 4663}
{"snippet": "mailbox.__len__()", "intent": "Return a count of messages in the mailbox .", "question_id": 5744}
{"snippet": "test_loader.errors", "intent": "A list of the non-fatal errors encountered while loading tests.", "question_id": 11490}
{"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}
{"snippet": "xml.dom.pulldom.parseString(string)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` .", "question_id": 12429}
{"snippet": "sysconfig.get_config_var(name)", "intent": "Return the value of a single variable `name` .", "question_id": 9859}
{"snippet": "email.header.Header(charset=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `charset` serves two purposes : it has the same meaning as the charset argument to the append ( ) method .", "question_id": 3118}
{"snippet": "memory_handler.flush()", "intent": "For a MemoryHandler , flushing means just sending the buffered records to the target , if there is one .", "question_id": 5538}
{"snippet": "datagram_handler.makeSocket()", "intent": "The factory method of SocketHandler is here overridden to create a UDP socket ( socket.SOCK_DGRAM ) .", "question_id": 5492}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717}
{"snippet": "numbers.Real", "intent": "To Complex, Real adds the operations that work on real numbers.", "question_id": 6508}
{"snippet": "sndhdr.whathdr(filename)", "intent": "Determines the type of sound data stored in a file based on the file header . The name of the file is given by `filename` .", "question_id": 8550}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket .", "question_id": 9023}
{"snippet": "str.isspace()", "intent": "Return true if there are only whitespace characters in the string and there is at least one character , false otherwise .", "question_id": 9211}
{"snippet": "json.JSONEncoder(check_circular=True)", "intent": "Extensible JSON encoder for Python data structures . If `check_circular` is true ( the default ) , then lists , dicts , and custom encoded objects will be checked for circular references during encoding to prevent an infinite recursion ( which would cause an OverflowError ) .", "question_id": 5325}
{"snippet": "decimal.DivisionByZero", "intent": "Signals the division of a non-infinite number by zero.", "question_id": 2587}
{"snippet": "modulefinder.ModuleFinder(excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6028}
{"snippet": "weakref.WeakValueDictionary(dict)", "intent": "Mapping class that references values weakly . With arguments `dict`.", "question_id": 12084}
{"snippet": "queue_listener.flush()", "intent": "Ensure all logging output has been flushed .", "question_id": 5604}
{"snippet": "bytes.isalnum()", "intent": "Return true if all bytes in the sequence are alphabetical ASCII characters or ASCII decimal digits and the sequence is not empty , false otherwise .", "question_id": 9381}
{"snippet": "profile.Profile(subcalls=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . With arguments `subcalls`.", "question_id": 7672}
{"snippet": "turtle.begin_poly()", "intent": "Start recording the vertices of a polygon .", "question_id": 11031}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)", "intent": "Return a Request or None in response to a redirect . If a redirection should take place , return a new Request to allow http_error_30* ( ) to perform the redirect to `newurl` . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11850}
{"snippet": "Option.help", "intent": "Help text to print for this option when listing all available options after the user supplies a help option (such as --help).", "question_id": 6636}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "i_pv4_network.network_address", "intent": "The network address for the network.", "question_id": 5196}
{"snippet": "sequence_matcher.ratio()", "intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "question_id": 2687}
{"snippet": "curses.def_prog_mode()", "intent": "Save the current terminal mode as the \u201c program \u201d mode , the mode when the running program is using curses .", "question_id": 1927}
{"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040}
{"snippet": "exit_stack.pop_all()", "intent": "Transfers the callback stack to a fresh ExitStack instance and returns it .", "question_id": 1630}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480}
{"snippet": "sysconfig.get_python_version()", "intent": "Return the MAJOR.MINOR Python version number as a string .", "question_id": 9870}
{"snippet": "bound_arguments.kwargs", "intent": "A dict of keyword arguments values.", "question_id": 5005}
{"snippet": "connection.close()", "intent": "This closes the database connection .", "question_id": 8810}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357}
{"snippet": "set.pop()", "intent": "Remove and return an arbitrary element from the set .", "question_id": 9465}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "sys.is_finalizing()", "intent": "Return True if the Python interpreter is shutting down , False otherwise .", "question_id": 9819}
{"snippet": "i_pv4_address.is_multicast", "intent": "True if the address is reserved for multicast use.", "question_id": 5180}
{"snippet": "NNTP.list(group_pattern=None, file=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` . With arguments `file`.", "question_id": 6468}
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200}
{"snippet": "multiprocessing.active_children()", "intent": "Return list of all live children of the current process .", "question_id": 6219}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "mailbox.iterkeys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5729}
{"snippet": "telnetlib.Telnet()", "intent": "Telnet represents a connection to a Telnet server .", "question_id": 10005}
{"snippet": "struct.size", "intent": "The calculated size of the struct (and hence of the bytes object produced by the pack() method) corresponding to format.", "question_id": 9566}
{"snippet": "sys.exit(arg)", "intent": "Exit from Python . The optional argument `arg` can be an integer giving the exit status ( defaulting to zero ) , or another type of object .", "question_id": 9788}
{"snippet": "window.hline(ch, n)", "intent": "Display a horizontal line starting at ( y , x ) with length `n` consisting of the character `ch` .", "question_id": 2064}
{"snippet": "test_case.debug()", "intent": "Run the test without collecting the result .", "question_id": 11374}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992}
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333}
{"snippet": "formatter.pop_style()", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3833}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "urllib.parse.quote_plus(string)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL .", "question_id": 11713}
{"snippet": "turtle.shape()", "intent": "Set turtle shape to shape with given `name` or , if name is not given , return name of current shape .", "question_id": 10982}
{"snippet": "shlex.shlex(punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8277}
{"snippet": "auto.errno", "intent": "A numeric error code from the C variable errno.", "question_id": 3654}
{"snippet": "instance.__class__", "intent": "The class to which a class instance belongs.", "question_id": 9500}
{"snippet": "turtle.circle(radius, extent=None, steps=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10926}
{"snippet": "ossaudiodev.OSSAudioError", "intent": "This exception is raised on certain errors.", "question_id": 7173}
{"snippet": "inspect.iscoroutinefunction(object)", "intent": "Return true if the `object` is a coroutine function ( a function defined with an async def syntax ) .", "question_id": 4954}
{"snippet": "profile.runctx(command, globals, locals)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string .", "question_id": 7665}
{"snippet": "sys.settrace(tracefunc)", "intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "question_id": 9839}
{"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325}
{"snippet": "sys.byteorder", "intent": "An indicator of the native byte order.", "question_id": 9770}
{"snippet": "asyncio.Queue(maxsize=0)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .", "question_id": 446}
{"snippet": "queue_listener.addHandler(hdlr)", "intent": "Adds the specified handler `hdlr` to this logger .", "question_id": 5580}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "symbol_table.lookup(name)", "intent": "Lookup `name` in the table and return a Symbol instance .", "question_id": 9743}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723}
{"snippet": "configparser.InterpolationSyntaxError", "intent": "Exception raised when the source text into which substitutions are made does not conform to the required syntax.", "question_id": 1599}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "xml.dom.InvalidStateErr", "intent": "Raised when an attempt is made to use an object that is not defined or is no longer usable.", "question_id": 12388}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "importlib.util.cache_from_source(path, optimization=None)", "intent": "Return the PEP 3147/PEP 488 `path` to the byte-compiled file associated with the source path . The `optimization` parameter is used to specify the optimization level of the bytecode file .", "question_id": 4923}
{"snippet": "int.to_bytes(length, byteorder)", "intent": "Return an array of bytes representing an integer . The integer is represented using `length` bytes . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9143}
{"snippet": "csv.register_dialect(name, dialect, **fmtparams)", "intent": "Associate `dialect` with `name` . With arguments `**fmtparams`.", "question_id": 1684}
{"snippet": "mh_message.remove_sequence(sequence)", "intent": "Remove `sequence` from the list of sequences that include this message .", "question_id": 5837}
{"snippet": "sqlite3.sqlite_version", "intent": "The version number of the run-time SQLite library, as a string.", "question_id": 8793}
{"snippet": "pickle.load(file)", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein .", "question_id": 7371}
{"snippet": "sys.builtin_module_names", "intent": "A tuple of strings giving the names of all modules that are compiled into this Python interpreter.", "question_id": 9771}
{"snippet": "process.authkey", "intent": "The process\u2019s authentication key (a byte string).", "question_id": 6184}
{"snippet": "configparser.InterpolationSyntaxError", "intent": "Exception raised when the source text into which substitutions are made does not conform to the required syntax.", "question_id": 1599}
{"snippet": "robot_file_parser.unsafe", "intent": "The UUID was not generated in a multiprocessing-safe way.", "question_id": 11935}
{"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508}
{"snippet": "test.support.rmtree(path)", "intent": "Call shutil.rmtree ( ) on `path` or call os.lstat ( ) and os.rmdir ( ) to remove a path and its contents .", "question_id": 10142}
{"snippet": "module_finder.report()", "intent": "Print a report to standard output that lists the modules imported by the script and their paths , as well as modules that are missing or seem to be missing .", "question_id": 6055}
{"snippet": "test.support.modules_cleanup(oldmodules)", "intent": "Remove modules except for `oldmodules` and encodings in order to preserve internal cache .", "question_id": 10251}
{"snippet": "datetime.timestamp()", "intent": "Return POSIX timestamp corresponding to the datetime instance .", "question_id": 2302}
{"snippet": "math.floor(x)", "intent": "Return the floor of `x` , the largest integer less than or equal to x .", "question_id": 5889}
{"snippet": "xmlparser.StartCdataSectionHandler()", "intent": "Called at the start of a CDATA section .", "question_id": 7770}
{"snippet": "config_parser.get(section, option)", "intent": "Get an `option` value for the named `section` .", "question_id": 1524}
{"snippet": "smtplib.SMTPSenderRefused", "intent": "Sender address refused.", "question_id": 8501}
{"snippet": "urllib.request.urlretrieve(url, filename=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11882}
{"snippet": "test_case.output", "intent": "A list of str objects with the formatted output of matching messages.", "question_id": 11416}
{"snippet": "FileCookieJar.save(filename=None, ignore_discard=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4502}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "Unpacker.unpack_double()", "intent": "Unpacks a double-precision floating point number , similarly to unpack_float ( ) .", "question_id": 12291}
{"snippet": "multiprocessing.get_context()", "intent": "Return a context object which has the same attributes as the multiprocessing module .", "question_id": 6224}
{"snippet": "datetime.utcnow()", "intent": "Return the current UTC date and time , with tzinfo None .", "question_id": 2260}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "patch.multiple(target, **kwargs, spec=None)", "intent": "Perform multiple patches in a single call . The arguments `spec` , `spec_set` , create , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `target`, `**kwargs`.", "question_id": 11633}
{"snippet": "robot_file_parser.unknown", "intent": "The platform does not provide information on whether the UUID was generated safely or not.", "question_id": 11936}
{"snippet": "xml.sax.handler.EntityResolver", "intent": "Basic interface for resolving entities.", "question_id": 12566}
{"snippet": "shutil.unregister_unpack_format(name)", "intent": "Unregister an unpack format . `name` is the name of the format .", "question_id": 8369}
{"snippet": "i_pv4_address.reverse_pointer", "intent": "The name of the reverse DNS PTR record for the IP address, e.g.", "question_id": 5179}
{"snippet": "inspect_loader.exec_module(module)", "intent": "Implementation of Loader.exec_module ( ) . With arguments `module`.", "question_id": 4831}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "ctypes.PyDLL(name)", "intent": "Instances of this class behave like CDLL instances , except that the Python GIL is not released during the function call , and after the function execution the Python error flag is checked . With arguments `name`.", "question_id": 1770}
{"snippet": "extension_file_loader.is_package(fullname)", "intent": "Returns True if the file path points to a package \u2019 s __init__ module based on EXTENSION_SUFFIXES . With arguments `fullname`.", "question_id": 4908}
{"snippet": "socket.timeout", "intent": "A subclass of OSError, this exception is raised when a timeout occurs on a socket which has had timeouts enabled via a prior call to settimeout() (or implicitly through setdefaulttimeout()).", "question_id": 8554}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}
{"snippet": "policy.mangle_from_", "intent": "If True, lines starting with \u201cFrom \u201c in the body are escaped by putting a > in front of them.", "question_id": 3417}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "context.to_eng_string(x)", "intent": "Convert to a string , using engineering notation if an exponent is needed . With arguments `x`.", "question_id": 2573}
{"snippet": "policy.mangle_from_", "intent": "If True, lines starting with \u201cFrom \u201c in the body are escaped by putting a > in front of them.", "question_id": 3417}
{"snippet": "loader.create_module(spec)", "intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "question_id": 4814}
{"snippet": "platform.python_version_tuple()", "intent": "Returns the Python version as tuple ( major , minor , patchlevel ) of strings .", "question_id": 7479}
{"snippet": "epoll.poll(timeout=-1)", "intent": "Wait for events . `timeout` in seconds ( float )", "question_id": 8188}
{"snippet": "sys.ps1", "intent": "Strings specifying the primary and secondary prompt of the interpreter.", "question_id": 9832}
{"snippet": "dbm.gnu.error", "intent": "Raised on dbm.gnu-specific errors, such as I/O errors.", "question_id": 2370}
{"snippet": "tokenize.untokenize(iterable)", "intent": "Converts tokens back into Python source code . The `iterable` must return sequences with at least two elements , the token type and the token string .", "question_id": 10702}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823}
{"snippet": "context.to_sci_string(x)", "intent": "Converts a number to a string using scientific notation . With arguments `x`.", "question_id": 2575}
{"snippet": "curses.panel.bottom_panel()", "intent": "Returns the bottom panel in the panel stack .", "question_id": 2141}
{"snippet": "HTTPResponse.msg", "intent": "A http.client.HTTPMessage instance containing the response headers.", "question_id": 4462}
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "typing.FrozenSet(frozenset)", "intent": "A generic version of builtins.frozenset . With arguments `frozenset`.", "question_id": 11275}
{"snippet": "doctest.IGNORE_EXCEPTION_DETAIL", "intent": "When specified, an example that expects an exception passes if an exception of the expected type is raised, even if the exception detail does not match.", "question_id": 2756}
{"snippet": "warnings.warn(message, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12001}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "Path.is_dir()", "intent": "Return True if the path points to a directory ( or a symbolic link pointing to a directory ) , False if it points to another kind of file .", "question_id": 7273}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393}
{"snippet": "base_http_request_handler.date_time_string()", "intent": "Returns the date and time given by `timestamp` ( which must be None or in the format returned by time.time ( ) ) , formatted for a message header .", "question_id": 4655}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201}
{"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}
{"snippet": "decimal.max_mag(other)", "intent": "Similar to the max ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`.", "question_id": 2445}
{"snippet": "cursor.rowcount", "intent": "Although the Cursor class of the sqlite3 module implements this attribute, the database engine\u2019s own support for the determination of \u201crows affected\u201d/\u201drows selected\u201d is quirky.", "question_id": 8849}
{"snippet": "turtle.reset()", "intent": "Delete the turtle \u2019 s drawings from the screen , re-center the turtle and set variables to the default values .", "question_id": 10967}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "breakpoint.bpprint()", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 766}
{"snippet": "text_wrapper.break_on_hyphens", "intent": "(default: True) If true, wrapping will occur preferably on whitespaces and right after hyphens in compound words, as it is customary in English.", "question_id": 10336}
{"snippet": "queue.cancel_join_thread()", "intent": "Prevent join_thread ( ) from blocking .", "question_id": 6210}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "config_parser.getboolean(section, option, fallback)", "intent": "A convenience method which coerces the `option` in the specified `section` to a Boolean value . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "question_id": 1544}
{"snippet": "collections.OrderedDict()", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order .", "question_id": 1390}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847}
{"snippet": "asyncio.as_completed(aws, loop=None)", "intent": "Run awaitable objects in the `aws` set concurrently . With arguments `loop`.", "question_id": 616}
{"snippet": "os.execl(path, arg0, arg1)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . With arguments `arg0`, `arg1`.", "question_id": 7009}
{"snippet": "DefaultCookiePolicy.is_blocked(domain)", "intent": "Return whether `domain` is on the blacklist for setting or receiving cookies .", "question_id": 4541}
{"snippet": "connection.interrupt()", "intent": "You can call this method from a different thread to abort any queries that might be executing on the connection .", "question_id": 8819}
{"snippet": "json.JSONEncoder(sort_keys=False)", "intent": "Extensible JSON encoder for Python data structures . If `sort_keys` is true ( default : False ) , then the output of dictionaries will be sorted by key ; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis .", "question_id": 5327}
{"snippet": "platform.popen(cmd)", "intent": "Portable popen ( ) interface . With arguments `cmd`.", "question_id": 7505}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003}
{"snippet": "winsound.SND_FILENAME", "intent": "The sound parameter is the name of a WAV file.", "question_id": 12196}
{"snippet": "datetime.resolution", "intent": "The smallest possible difference between non-equal datetime objects, timedelta(microseconds=1).", "question_id": 2271}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "queue_handler.enqueue(record)", "intent": "Enqueues the `record` on the queue using put_nowait ( ) ; you may want to override this if you want to use blocking behaviour , or a timeout , or a customized queue implementation .", "question_id": 5556}
{"snippet": "system_random.pattern", "intent": "The regular expression pattern.", "question_id": 7966}
{"snippet": "doctest.DocFileSuite(*paths, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2798}
{"snippet": "xml.etree.ElementTree.ElementTree()", "intent": "ElementTree wrapper class .", "question_id": 12507}
{"snippet": "robot_file_parser.unsafe", "intent": "The UUID was not generated in a multiprocessing-safe way.", "question_id": 11935}
{"snippet": "logging.addLevelName(level, levelName)", "intent": "Associates `level` level with text `levelName` in an internal dictionary , which is used to map numeric levels to a textual representation , for example when a Formatter formats a message .", "question_id": 5646}
{"snippet": "cmath.acosh(x)", "intent": "Return the inverse hyperbolic cosine of `x` .", "question_id": 1107}
{"snippet": "doctest.DocTestSuite(globs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "question_id": 2808}
{"snippet": "SMTP.sendmail(from_addr, to_addrs, msg)", "intent": "Send mail . If SMTPUTF8 is included in mail_options , and the server supports it , `from_addr` and `to_addrs` may contain non-ASCII characters . `msg` may be a string containing characters in the ASCII range , or a byte string .", "question_id": 8534}
{"snippet": "config_parser.get(section, option, fallback, vars=None)", "intent": "Get an `option` value for the named `section` . If the key is not found and `fallback` is provided , it is used as a fallback value . If `vars` is provided , it must be a dictionary .", "question_id": 1522}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "weakref.WeakMethod(method)", "intent": "A custom ref subclass which simulates a weak reference to a bound `method` ( i.e. , a method defined on a class and looked up on an instance ) .", "question_id": 12089}
{"snippet": "Element.removeAttributeNode(oldAttr)", "intent": "Remove and return `oldAttr` from the attribute list , if present .", "question_id": 12364}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025}
{"snippet": "bdb.set_step()", "intent": "Stop after one line of code .", "question_id": 785}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466}
{"snippet": "SMTP.helo()", "intent": "Identify yourself to the SMTP server using HELO .", "question_id": 8515}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "somenamedtuple._replace(**kwargs)", "intent": "Return a new instance of the named tuple replacing specified fields with new values : With arguments `**kwargs`.", "question_id": 1386}
{"snippet": "profile.enable()", "intent": "Start collecting profiling data .", "question_id": 7679}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "zlib.crc32(data)", "intent": "Computes a CRC ( Cyclic Redundancy Check ) checksum of `data` .", "question_id": 12918}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "secrets.token_urlsafe()", "intent": "Return a random URL-safe text string , containing `nbytes` random bytes .", "question_id": 8143}
{"snippet": "timer.repeat(repeat=5, number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.", "question_id": 10514}
{"snippet": "DefaultCookiePolicy.strict_rfc2965_unverifiable", "intent": "Follow RFC 2965 rules on unverifiable transactions (usually, an unverifiable transaction is one resulting from a redirect or a request for an image hosted on another site).", "question_id": 4547}
{"snippet": "SSLContext.set_ciphers(ciphers)", "intent": "Set the available `ciphers` for sockets created with this context .", "question_id": 9015}
{"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}
{"snippet": "struct.unpack(buffer)", "intent": "Identical to the unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must equal size .", "question_id": 9561}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "xml.etree.ElementTree.ElementTree(file=None)", "intent": "ElementTree wrapper class . The tree is initialized with the contents of the XML `file` if given .", "question_id": 12509}
{"snippet": "weakref.getweakrefs(object)", "intent": "Return a list of all weak reference and proxy objects which refer to `object` .", "question_id": 12080}
{"snippet": "locale.YESEXPR", "intent": "Get a regular expression that can be used with the regex function to recognize a positive response to a yes/no question.", "question_id": 5365}
{"snippet": "profile.runcall(func, *args, **kwargs)", "intent": "Profile `func` ( `*args` , `**kwargs` )", "question_id": 7687}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460}
{"snippet": "bz2_compressor.flush()", "intent": "Finish the compression process .", "question_id": 899}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "nntplib.decode_header(header_str)", "intent": "Decode a header value , un-escaping any escaped non-ASCII characters . `header_str` must be a str object .", "question_id": 6502}
{"snippet": "imaplib.IMAP4_SSL(port=IMAP4_SSL_PORT)", "intent": "This is a subclass derived from IMAP4 that connects over an SSL encrypted socket ( to use this class you need a socket module that was compiled with SSL support ) . If `port` is omitted , the standard IMAP4-over-SSL port ( 993 ) is used .", "question_id": 4678}
{"snippet": "formatter.NullWriter", "intent": "A writer which only provides the interface definition; no actions are taken on any methods.", "question_id": 3853}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175}
{"snippet": "os.getlogin()", "intent": "Return the name of the user logged in on the controlling terminal of the process .", "question_id": 6679}
{"snippet": "formatter.vformat(format_string, args, kwargs)", "intent": "This function does the actual work of formatting . With arguments `format_string`, `args`, `kwargs`.", "question_id": 9518}
{"snippet": "context.compare_total(x, y)", "intent": "Compares two operands using their abstract representation . With arguments `x`, `y`.", "question_id": 2522}
{"snippet": "ReadTransport.is_reading()", "intent": "Return True if the transport is receiving new data .", "question_id": 402}
{"snippet": "email_message.clear_content()", "intent": "Remove the payload and all of the Content- headers , leaving all other headers intact and in their original order .", "question_id": 3307}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}
{"snippet": "module_finder.run_script(pathname)", "intent": "Analyze the contents of the `pathname` file , which must contain Python code .", "question_id": 6056}
{"snippet": "int.to_bytes(length, byteorder)", "intent": "Return an array of bytes representing an integer . The integer is represented using `length` bytes . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9143}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "winreg.HKEY_PERFORMANCE_DATA", "intent": "Registry entries subordinate to this key allow you to access performance data.", "question_id": 12159}
{"snippet": "Node.childNodes", "intent": "A list of nodes contained within this node.", "question_id": 12319}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "mailbox.__len__()", "intent": "Return a count of messages in the mailbox .", "question_id": 5744}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343}
{"snippet": "ZipFile.open(name, force_zip64=False)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . With arguments `force_zip64`.", "question_id": 12809}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}
{"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042}
{"snippet": "kevent.data", "intent": "Filter specific data.", "question_id": 8207}
{"snippet": "oss_audio_device.mode", "intent": "The I/O mode for the file, either \"r\", \"rw\", or \"w\".", "question_id": 7200}
{"snippet": "token.ISTERMINAL(x)", "intent": "Return true for terminal token values . With arguments `x`.", "question_id": 10695}
{"snippet": "SSLContext.verify_mode", "intent": "Whether to try to verify other peers\u2019 certificates and how to behave if verification fails.", "question_id": 9051}
{"snippet": "message.__str__()", "intent": "Equivalent to as_string ( ) .", "question_id": 2946}
{"snippet": "queue_listener.createLock()", "intent": "Initializes a thread lock which can be used to serialize access to underlying I/O functionality which may not be threadsafe .", "question_id": 5596}
{"snippet": "ctypes.sizeof(obj_or_type)", "intent": "Returns the size in bytes of a ctypes type or instance memory buffer . With arguments `obj_or_type`.", "question_id": 1833}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298}
{"snippet": "Node.unlink()", "intent": "Break internal references within the DOM so that it will be garbage collected on versions of Python without cyclic GC .", "question_id": 12402}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "contextlib.redirect_stdout(new_target)", "intent": "Context manager for temporarily redirecting sys.stdout to another file or file-like object . With arguments `new_target`.", "question_id": 1623}
{"snippet": "text_wrapper.initial_indent", "intent": "(default: '') String that will be prepended to the first line of wrapped output.", "question_id": 10332}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "resource.RLIMIT_DATA", "intent": "The maximum size (in bytes) of the process\u2019s heap.", "question_id": 8078}
{"snippet": "os.path.normpath(path)", "intent": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a `path` that contains symbolic links .", "question_id": 7162}
{"snippet": "os.unsetenv(key)", "intent": "Unset ( delete ) the environment variable named `key` .", "question_id": 6711}
{"snippet": "dircmp.subdirs", "intent": "A dictionary mapping names in common_dirs to dircmp objects.", "question_id": 3780}
{"snippet": "gnu_translations.ngettext(singular, plural, n)", "intent": "Do a plural-forms lookup of a message id . `singular` is used as the message id for purposes of lookup in the catalog , while `n` is used to determine which `plural` form to use .", "question_id": 4262}
{"snippet": "decimal.setcontext(c)", "intent": "Set the current context for the active thread to `c` .", "question_id": 2493}
{"snippet": "cursor.fetchmany()", "intent": "Fetches the next set of rows of a query result , returning a list .", "question_id": 8845}
{"snippet": "writer.new_styles(styles)", "intent": "Set additional `styles` .", "question_id": 3846}
{"snippet": "aifc.close()", "intent": "Close the AIFF file .", "question_id": 24}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415}
{"snippet": "contextlib.AbstractContextManager", "intent": "An abstract base class for classes that implement object.__enter__() and object.__exit__().", "question_id": 1615}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "types.prepare_class(name, kwds=None)", "intent": "Calculates the appropriate metaclass and creates the class namespace . The arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) and the keyword arguments ( such as metaclass ) . The return value is a 3-tuple : metaclass , namespace , `kwds`", "question_id": 11180}
{"snippet": "FTP.delete(filename)", "intent": "Remove the file named `filename` from the server .", "question_id": 3960}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289}
{"snippet": "datetime.datetime", "intent": "A combination of a date and a time.", "question_id": 2200}
{"snippet": "email.parser.Parser(_class=None)", "intent": "This class is parallel to BytesParser , but handles string input . With arguments `_class`.", "question_id": 3385}
{"snippet": "PurePath.anchor", "intent": "The concatenation of the drive and root:", "question_id": 7246}
{"snippet": "test.support.check_syntax_error(testcase, statement, errtext='')", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . `errtext` is the text of the error raised by SyntaxError .", "question_id": 10232}
{"snippet": "symbol.get_namespaces()", "intent": "Return a list of namespaces bound to this name .", "question_id": 9764}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020}
{"snippet": "BaseCookie.js_output()", "intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP headers was sent .", "question_id": 4592}
{"snippet": "tabnanny.check(file_or_dir)", "intent": "If `file_or_dir` is a directory and not a symbolic link , then recursively descend the directory tree named by file_or_dir , checking all .py files along the way .", "question_id": 9885}
{"snippet": "test.support.check_syntax_error(testcase, statement, lineno=None, offset=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `lineno` is not None , compares to the line of the SyntaxError . If `offset` is not None , compares to the offset of the SyntaxError .", "question_id": 10237}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "@importlib.util.module_for_loader", "intent": "A decorator for importlib.abc.Loader.load_module() to handle selecting the proper module object to load with.", "question_id": 4931}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466}
{"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "email.headerregistry.DateHeader", "intent": "RFC 5322 specifies a very specific format for dates within email headers.", "question_id": 3156}
{"snippet": "loop.create_server(protocol_factory, ssl=None)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `ssl`.", "question_id": 239}
{"snippet": "simple_http_request_handler.directory", "intent": "If not specified, the directory to serve is the current working directory.", "question_id": 4663}
{"snippet": "tarfile.GNU_FORMAT", "intent": "GNU tar format.", "question_id": 9910}
{"snippet": "itertools.groupby(iterable)", "intent": "Make an iterator that returns consecutive keys and groups from the `iterable` .", "question_id": 5253}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}
{"snippet": "decimal.Decimal(context=None)", "intent": "Construct a new Decimal object based from `value` . The `context` precision does not affect how many digits are stored .", "question_id": 2393}
{"snippet": "kevent.data", "intent": "Filter specific data.", "question_id": 8207}
{"snippet": "FTP_TLS.prot_c()", "intent": "Set up clear text data connection .", "question_id": 3972}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "email.encoders.encode_noop(msg)", "intent": "This does nothing ; it doesn \u2019 t even set the Content-Transfer-Encoding header . With arguments `msg`.", "question_id": 3072}
{"snippet": "doc_test_runner.run(test, compileflags=None)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . `compileflags` gives the set of flags that should be used by the Python compiler when running the examples .", "question_id": 2874}
{"snippet": "json_encoder.lineno", "intent": "The line corresponding to pos.", "question_id": 5339}
{"snippet": "platform.popen(cmd)", "intent": "Portable popen ( ) interface . With arguments `cmd`.", "question_id": 7505}
{"snippet": "@dataclasses.dataclass()", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below .", "question_id": 2157}
{"snippet": "collections.deque(iterable, maxlen)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` . If `maxlen` is not specified or is None , deques may grow to an arbitrary length .", "question_id": 1350}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2805}
{"snippet": "somenamedtuple._asdict()", "intent": "Return a new dict which maps field names to their corresponding values :", "question_id": 1385}
{"snippet": "html_calendar.cssclasses_weekday_head", "intent": "A list of CSS classes used for weekday names in the header row.", "question_id": 972}
{"snippet": "calendar.firstweekday()", "intent": "Returns the current setting for the weekday to start each week .", "question_id": 986}
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106}
{"snippet": "queue.PriorityQueue()", "intent": "Constructor for a priority queue .", "question_id": 7841}
{"snippet": "NotADirectoryError", "intent": "Raised when a directory operation (such as os.listdir()) is requested on something which is not a directory.", "question_id": 3697}
{"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}
{"snippet": "json.load(fp, **kw, parse_constant=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_constant` , if specified , will be called with one of the following strings : '-Infinity ' , 'Infinity ' , 'NaN ' . With arguments `**kw`.", "question_id": 5295}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679}
{"snippet": "urllib.request.urlretrieve(url)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11881}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499}
{"snippet": "time.CLOCK_UPTIME", "intent": "Time whose absolute value is the time the system has been running and not suspended, providing accurate uptime measurement, both absolute and interval.", "question_id": 10470}
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258}
{"snippet": "turtle.end_fill()", "intent": "Fill the shape drawn after the last call to begin_fill ( ) .", "question_id": 10966}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "locale.currency(val, grouping=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `grouping` is true ( which is not the default ) , grouping is done with the value .", "question_id": 5394}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "xml.etree.ElementTree.ParseError", "intent": "XML parse error, raised by the various parsing methods in this module when parsing fails.", "question_id": 12561}
{"snippet": "base_selector.modify(fileobj, events)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8218}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "dataclasses.replace(instance, **changes)", "intent": "Creates a new object of the same type of `instance` , replacing fields with values from changes . With arguments `**changes`.", "question_id": 2193}
{"snippet": "babyl_message.update_visible()", "intent": "When a BabylMessage instance \u2019 s original headers are modified , the visible headers are not automatically modified to correspond .", "question_id": 5846}
{"snippet": "decimal.max_mag(other)", "intent": "Similar to the max ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`.", "question_id": 2445}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : With arguments `*paths`.", "question_id": 2797}
{"snippet": "datetime.replace(month=self.month)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `month`.", "question_id": 2286}
{"snippet": "mock.mock_add_spec(spec, spec_set=False)", "intent": "Add a `spec` to a mock . If `spec_set` is true then only attributes on the spec can be set .", "question_id": 11583}
{"snippet": "profile.Profile()", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides .", "question_id": 7669}
{"snippet": "config_parser.sections()", "intent": "Return a list of the sections available ; the default section is not included in the list .", "question_id": 1507}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529}
{"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347}
{"snippet": "calendar.HTMLCalendar()", "intent": "This class can be used to generate HTML calendars .", "question_id": 956}
{"snippet": "turtle.onrelease(fun, btn=1)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`.", "question_id": 11024}
{"snippet": "mailbox.mbox(path, factory=None)", "intent": "A subclass of Mailbox for mailboxes in mbox format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . With arguments `path`.", "question_id": 5769}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "UUID.bytes", "intent": "The UUID as a 16-byte string (containing the six integer fields in big-endian byte order).", "question_id": 11947}
{"snippet": "stat.S_ISCHR(mode)", "intent": "Return non-zero if the `mode` is from a character special device file .", "question_id": 9062}
{"snippet": "syslog.syslog(message)", "intent": "Send the string `message` to the system logger .", "question_id": 9877}
{"snippet": "AU_read.getframerate()", "intent": "Returns sampling frequency .", "question_id": 9710}
{"snippet": "errno.ENAMETOOLONG", "intent": "File name too long", "question_id": 3541}
{"snippet": "json.load(fp, **kw, parse_float=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_float` , if specified , will be called with the string of every JSON float to be decoded . With arguments `**kw`.", "question_id": 5293}
{"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773}
{"snippet": "Cookie.rfc2109", "intent": "True if this cookie was received as an RFC 2109 cookie (ie.", "question_id": 4567}
{"snippet": "json.dumps(obj, **kw)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "question_id": 5280}
{"snippet": "tkinter.tix.TList", "intent": "The TList widget can be used to display data in a tabular format.", "question_id": 10573}
{"snippet": "audioop.rms(fragment, width)", "intent": "Return the root-mean-square of the `fragment` , i.e . With arguments `width`.", "question_id": 704}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745}
{"snippet": "math.log(x, base)", "intent": "With one argument , return the natural logarithm of `x` ( to `base` e ) .", "question_id": 5907}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "concurrent.futures.Executor", "intent": "An abstract class that provides methods to execute calls asynchronously.", "question_id": 1439}
{"snippet": "sys.path_importer_cache", "intent": "A dictionary acting as a cache for finder objects.", "question_id": 9829}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "tkinter.tix.OptionMenu", "intent": "The OptionMenu creates a menu button of options.", "question_id": 10559}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "structure._anonymous_", "intent": "An optional sequence that lists the names of unnamed (anonymous) fields.", "question_id": 1892}
{"snippet": "ctypes.c_double", "intent": "Represents the C double datatype.", "question_id": 1858}
{"snippet": "os.ctermid()", "intent": "Return the filename corresponding to the controlling terminal of the process .", "question_id": 6657}
{"snippet": "zlib.compressobj()", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once .", "question_id": 12907}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "subprocess.PIPE", "intent": "Special value that can be used as the stdin, stdout or stderr argument to Popen and indicates that a pipe to the standard stream should be opened.", "question_id": 9584}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802}
{"snippet": "tracemalloc.Traceback", "intent": "Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "question_id": 10894}
{"snippet": "json.JSONEncoder(default=None)", "intent": "Extensible JSON encoder for Python data structures . Supports the following objects and types by `default` :", "question_id": 5330}
{"snippet": "ensurepip.version()", "intent": "Returns a string specifying the bundled version of pip that will be installed when bootstrapping an environment .", "question_id": 3488}
{"snippet": "errno.EFBIG", "intent": "File too large", "question_id": 3532}
{"snippet": "ast.NodeVisitor", "intent": "A node visitor base class that walks the abstract syntax tree and calls a visitor function for every node found.", "question_id": 159}
{"snippet": "widget.item(item, **kw, option=None)", "intent": "Query or modify the options for the specified `item` . If `option` is specified then the value for that option is returned . With arguments `**kw`.", "question_id": 10643}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "queue.get()", "intent": "Remove and return an item from the queue .", "question_id": 452}
{"snippet": "warnings.formatwarning(message, category, filename, lineno)", "intent": "Format a warning the standard way . `line` is a line of source code to be included in the warning `message` ; if line is not supplied , formatwarning ( ) will try to read the line specified by `filename` and `lineno` . With arguments `category`.", "question_id": 12021}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "symbol_table.get_identifiers()", "intent": "Return a list of names of symbols in this table .", "question_id": 9742}
{"snippet": "connection.executescript(sql_script)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executescript ( ) method with the given `sql_script` , and returns the cursor .", "question_id": 8815}
{"snippet": "babyl.get_labels()", "intent": "Return a list of the names of all user-defined labels used in the mailbox .", "question_id": 5798}
{"snippet": "IMAP4.readonly", "intent": "This exception is raised when a writable mailbox has its status changed by the server.", "question_id": 4675}
{"snippet": "multiprocessing.Barrier(parties)", "intent": "A barrier object : a clone of threading.Barrier . With arguments `parties`.", "question_id": 6245}
{"snippet": "socketserver.BaseServer(server_address, RequestHandlerClass)", "intent": "This is the superclass of all Server objects in the module . The two parameters are stored in the respective `server_address` and `RequestHandlerClass` attributes .", "question_id": 8759}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458}
{"snippet": "asyncio.run_coroutine_threadsafe(coro, loop)", "intent": "Submit a coroutine to the given event `loop` . With arguments `coro`.", "question_id": 619}
{"snippet": "decimal.as_integer_ratio()", "intent": "Return a pair ( n , d ) of integers that represent the given Decimal instance as a fraction , in lowest terms and with a positive denominator :", "question_id": 2396}
{"snippet": "asyncio.BaseProtocol", "intent": "Base protocol with methods that all protocols share.", "question_id": 426}
{"snippet": "numbers.Complex", "intent": "Subclasses of this type describe complex numbers and include the operations that work on the built-in complex type.", "question_id": 6504}
{"snippet": "turtle.position()", "intent": "Return the turtle \u2019 s current location ( x , y ) ( as a Vec2D vector ) .", "question_id": 10936}
{"snippet": "errno.ENETUNREACH", "intent": "Network is unreachable", "question_id": 3606}
{"snippet": "POP3.dele(which)", "intent": "Flag message number `which` for deletion .", "question_id": 7612}
{"snippet": "operator.indexOf(a, b)", "intent": "Return the index of the first of occurrence of `b` in `a` .", "question_id": 6577}
{"snippet": "configparser.InterpolationError", "intent": "Base class for exceptions raised when problems occur performing string interpolation.", "question_id": 1596}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "signal.sigtimedwait(sigset, timeout)", "intent": "Like sigwaitinfo ( ) , but takes an additional `timeout` argument specifying a timeout . With arguments `sigset`.", "question_id": 8401}
{"snippet": "sequence_matcher.get_matching_blocks()", "intent": "Return list of triples describing non-overlapping matching subsequences .", "question_id": 2683}
{"snippet": "collections.ChainMap(*maps)", "intent": "A ChainMap groups multiple dicts or other mappings together to create a single , updateable view . With arguments `*maps`.", "question_id": 1335}
{"snippet": "asyncio.current_task(loop=None)", "intent": "Return the currently running Task instance , or None if no task is running . If `loop` is None get_running_loop ( ) is used to get the current loop .", "question_id": 621}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948}
{"snippet": "binascii.b2a_uu(data)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char .", "question_id": 821}
{"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103}
{"snippet": "Match.group(group1)", "intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "question_id": 7996}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358}
{"snippet": "sys.getrecursionlimit()", "intent": "Return the current value of the recursion limit , the maximum depth of the Python interpreter stack .", "question_id": 9801}
{"snippet": "window.refresh(pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol)", "intent": "Update the display immediately ( sync actual screen with previous drawing/deleting methods ) . `pminrow` and `pmincol` specify the upper left-hand corner of the rectangle to be displayed in the pad . `sminrow` , `smincol` , `smaxrow` , and `smaxcol` specify the edges of the rectangle to be displayed on the screen .", "question_id": 2106}
{"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}
{"snippet": "subprocess.getoutput(cmd)", "intent": "Return output ( stdout and stderr ) of executing `cmd` in a shell .", "question_id": 9690}
{"snippet": "SSLContext.verify_mode", "intent": "Whether to try to verify other peers\u2019 certificates and how to behave if verification fails.", "question_id": 9051}
{"snippet": "shlex.infile", "intent": "The name of the current input file, as initially set at class instantiation time or stacked by later source requests.", "question_id": 8301}
{"snippet": "turtle.onkeypress(fun)", "intent": "Bind `fun` to key-press event of `key` if key is given , or to any key-press-event if no key is given .", "question_id": 11069}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983}
{"snippet": "test_result.startTest(test)", "intent": "Called when the `test` case test is about to be run .", "question_id": 11520}
{"snippet": "oss_audio_device.mode", "intent": "The I/O mode for the file, either \"r\", \"rw\", or \"w\".", "question_id": 7200}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "os.EX_IOERR", "intent": "Exit code that means that an error occurred while doing I/O on some file.", "question_id": 7029}
{"snippet": "unittest.mock.NonCallableMock(**kwargs)", "intent": "A non-callable version of Mock . With arguments `**kwargs`.", "question_id": 11597}
{"snippet": "json_decoder.raw_decode(s)", "intent": "Decode a JSON document from `s` ( a str beginning with a JSON document ) and return a 2-tuple of the Python representation and the index in s where the document ended .", "question_id": 5321}
{"snippet": "DAY_1 ... DAY_7", "intent": "Get the name of the n-th day of the week.", "question_id": 5359}
{"snippet": "PurePath.as_posix()", "intent": "Return a string representation of the path with forward slashes ( / ) :", "question_id": 7253}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929}
{"snippet": "charset.__str__()", "intent": "Returns input_charset as a string coerced to lower case .", "question_id": 2923}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216}
{"snippet": "curses.has_il()", "intent": "Return True if the terminal has insert- and delete-line capabilities , or can simulate them using scrolling regions .", "question_id": 1942}
{"snippet": "json.load(fp, **kw)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5290}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "os.EX_IOERR", "intent": "Exit code that means that an error occurred while doing I/O on some file.", "question_id": 7029}
{"snippet": "curses.flash()", "intent": "Flash the screen .", "question_id": 1935}
{"snippet": "i_pv4_network.max_prefixlen", "intent": "Refer to the corresponding attribute documentation in IPv4Address.", "question_id": 5194}
{"snippet": "SMTP.docmd(cmd, args='')", "intent": "Send a command `cmd` to the server . The optional argument `args` is simply concatenated to the command , separated by a space .", "question_id": 8510}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630}
{"snippet": "ssl.SSLContext(protocol=PROTOCOL_TLS)", "intent": "Create a new SSL context . You may pass `protocol` which must be one of the PROTOCOL_* constants defined in this module .", "question_id": 8995}
{"snippet": "dataclasses.fields(class_or_instance)", "intent": "Returns a tuple of Field objects that define the fields for this dataclass . With arguments `class_or_instance`.", "question_id": 2178}
{"snippet": "coverage_results.write_results(show_missing=True)", "intent": "Write coverage results . Set `show_missing` to show lines that had no hits .", "question_id": 10726}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "plistlib.loads(data)", "intent": "Load a plist from a bytes object . With arguments `data`.", "question_id": 7555}
{"snippet": "simple_http_request_handler.extensions_map", "intent": "A dictionary mapping suffixes into MIME types.", "question_id": 4662}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "xdrlib.Packer", "intent": "Packer is the class for packing data into XDR representation.", "question_id": 12271}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "errno.ELIBACC", "intent": "Can not access a needed shared library", "question_id": 3584}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}
{"snippet": "venv.EnvBuilder()", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation :", "question_id": 11972}
{"snippet": "xml.etree.ElementTree.ProcessingInstruction(target, text=None)", "intent": "PI element factory . `target` is a string containing the PI target . `text` is a string containing the PI contents , if given .", "question_id": 12449}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739}
{"snippet": "decimal.compare_signal(other)", "intent": "This operation is identical to the compare ( ) method , except that all NaNs signal . With arguments `other`.", "question_id": 2401}
{"snippet": "stat_result.st_gen", "intent": "File generation number.", "question_id": 6939}
{"snippet": "time.time()", "intent": "Return the time in seconds since the epoch as a floating point number .", "question_id": 10458}
{"snippet": "stream_reader.read(size, chars)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding . The `chars` argument indicates the number of decoded code points or bytes to return .", "question_id": 1287}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "joinable_queue.poll()", "intent": "Return whether there is any data available to be read .", "question_id": 6235}
{"snippet": "textwrap.fill(text, **kwargs)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`.", "question_id": 10320}
{"snippet": "sysconfig.get_path(name, scheme, vars, expand)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) . get_path ( ) will use the variables returned by get_config_vars ( ) to `expand` the path .", "question_id": 9862}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}
{"snippet": "pickle.Unpickler(file)", "intent": "This takes a binary `file` for reading a pickle data stream .", "question_id": 7398}
{"snippet": "OptionParser.get_version()", "intent": "Same as print_version ( ) but returns the version string instead of printing it .", "question_id": 6621}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "Popen.wait(timeout=None)", "intent": "Wait for child process to terminate . If the process does not terminate after `timeout` seconds , raise a TimeoutExpired exception .", "question_id": 9611}
{"snippet": "ast.dump(node, annotate_fields=True)", "intent": "Return a formatted dump of the tree in `node` . If `annotate_fields` is true ( by default ) , the returned string will show the names and the values for fields .", "question_id": 164}
{"snippet": "POP3.capa()", "intent": "Query the server \u2019 s capabilities as specified in RFC 2449 .", "question_id": 7603}
{"snippet": "time.localtime()", "intent": "Like gmtime ( ) but converts to local time .", "question_id": 10444}
{"snippet": "@typing.no_type_check", "intent": "Decorator to indicate that annotations are not type hints.", "question_id": 11328}
{"snippet": "test_loader.sortTestMethodsUsing", "intent": "Function to be used to compare method names when sorting them in getTestCaseNames() and all the loadTestsFrom*() methods.", "question_id": 11504}
{"snippet": "urllib.parse.quote_plus(string, safe='', encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`.", "question_id": 11717}
{"snippet": "random.SystemRandom()", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system .", "question_id": 7921}
{"snippet": "shutil.copyfile(src, dst, follow_symlinks=True)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst . If `follow_symlinks` is false and src is a symbolic link , a new symbolic link will be created instead of copying the file src points to .", "question_id": 8312}
{"snippet": "winsound.SND_ALIAS", "intent": "The sound parameter is a sound association name from the registry.", "question_id": 12197}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}
{"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515}
{"snippet": "str.center(width, fillchar)", "intent": "Return centered in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "question_id": 9180}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "extension_file_loader.is_package(fullname)", "intent": "Returns True if the file path points to a package \u2019 s __init__ module based on EXTENSION_SUFFIXES . With arguments `fullname`.", "question_id": 4908}
{"snippet": "widget.set(value)", "intent": "Sets the `value` of the combobox to value .", "question_id": 10600}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "concurrent.futures.thread.BrokenThreadPool", "intent": "Derived from BrokenExecutor, this exception class is raised when one of the workers of a ThreadPoolExecutor has failed initializing.", "question_id": 1489}
{"snippet": "socket.recvmsg(bufsize)", "intent": "Receive normal data ( up to `bufsize` bytes ) and ancillary data from the socket .", "question_id": 8707}
{"snippet": "widget.heading(column, **kw, option=None)", "intent": "Query or modify the heading options for the specified `column` . If kw is not given , returns a dict of the heading `option` values . With arguments `**kw`.", "question_id": 10633}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393}
{"snippet": "lock.acquire()", "intent": "Acquire a lock , blocking or non-blocking .", "question_id": 6252}
{"snippet": "os.makedirs(name, mode=0o777, exist_ok=False)", "intent": "Recursive directory creation function . The `mode` parameter is passed to mkdir ( ) for creating the leaf directory ; see the mkdir ( ) description for how it is interpreted . If `exist_ok` is False ( the default ) , an FileExistsError is raised if the target directory already exists . With arguments `name`.", "question_id": 6869}
{"snippet": "memoryview(obj)", "intent": "Create a memoryview that references `obj` .", "question_id": 9411}
{"snippet": "ssl.MemoryBIO", "intent": "A memory buffer that can be used to pass data between Python and an SSL protocol instance.", "question_id": 9053}
{"snippet": "i_pv4_interface.network", "intent": "The network (IPv4Network) this interface belongs to.", "question_id": 5226}
{"snippet": "urllib.parse.parse_qs(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11669}
{"snippet": "gc.DEBUG_STATS", "intent": "Print statistics during collection.", "question_id": 4189}
{"snippet": "html_calendar.formatyearpage(theyear, width=3)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 963}
{"snippet": "str.count(sub, start, end)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9182}
{"snippet": "decimal.adjusted()", "intent": "Return the adjusted exponent after shifting out the coefficient \u2019 s rightmost digits until only the lead digit remains : Decimal ( '321e+5 ' ) .adjusted ( ) returns seven .", "question_id": 2395}
{"snippet": "base_handler.os_environ", "intent": "The default environment variables to be included in every request\u2019s WSGI environment.", "question_id": 12256}
{"snippet": "asyncore.loop(timeout, use_poll)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) .", "question_id": 649}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659}
{"snippet": "Repr.repr_TYPE(obj, level)", "intent": "Formatting methods for specific types are implemented as methods with a name based on the type name . In the method name , TYPE is replaced by ' _'.join ( type ( `obj` ) .__name__.split ( ) ) . Type-specific methods which need to recursively format a value should call self.repr1 ( subobj , `level` - 1 ) .", "question_id": 8068}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}
{"snippet": "queue_listener.format(record)", "intent": "Do formatting for a `record` - if a formatter is set , use it .", "question_id": 5608}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "email_policy.content_manager", "intent": "An object with at least two methods: get_content and set_content.", "question_id": 3432}
{"snippet": "platform.popen(cmd)", "intent": "Portable popen ( ) interface . With arguments `cmd`.", "question_id": 7505}
{"snippet": "set.isdisjoint(other)", "intent": "Return True if the set has no elements in common with `other` .", "question_id": 9438}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}
{"snippet": "os.getenv(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6668}
{"snippet": "Repr.repr_TYPE(obj, level)", "intent": "Formatting methods for specific types are implemented as methods with a name based on the type name . In the method name , TYPE is replaced by ' _'.join ( type ( `obj` ) .__name__.split ( ) ) . Type-specific methods which need to recursively format a value should call self.repr1 ( subobj , `level` - 1 ) .", "question_id": 8068}
{"snippet": "sys.warnoptions", "intent": "This is an implementation detail of the warnings framework; do not modify this value.", "question_id": 9855}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "uuid.UUID()", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11937}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003}
{"snippet": "itertools.combinations_with_replacement(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` allowing individual elements to be repeated more than once .", "question_id": 5244}
{"snippet": "shutil.make_archive(base_name, format)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) .", "question_id": 8357}
{"snippet": "os.sched_getaffinity(pid)", "intent": "Return the set of CPUs the process with PID `pid` ( or the current process if zero ) is restricted to .", "question_id": 7114}
{"snippet": "mailbox.iterkeys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5729}
{"snippet": "winsound.SND_ASYNC", "intent": "Return immediately, allowing sounds to play asynchronously.", "question_id": 12201}
{"snippet": "doctest.debug_src(src)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "question_id": 2890}
{"snippet": "test.support.get_attribute(obj, name)", "intent": "Get an attribute , raising unittest.SkipTest if AttributeError is raised . With arguments `obj`, `name`.", "question_id": 10257}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}
{"snippet": "bytes.count(sub, start, end)", "intent": "Return the number of non-overlapping occurrences of subsequence `sub` in the range [ `start` , `end` ] .", "question_id": 9269}
{"snippet": "sys.base_exec_prefix", "intent": "Set during Python startup, before site.py is run, to the same value as exec_prefix.", "question_id": 9768}
{"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}
{"snippet": "task.get_stack(limit=None)", "intent": "Return the list of stack frames for this Task . The optional `limit` argument sets the maximum number of frames to return ; by default all available frames are returned .", "question_id": 635}
{"snippet": "itertools.groupby(iterable)", "intent": "Make an iterator that returns consecutive keys and groups from the `iterable` .", "question_id": 5253}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "locale.LC_ALL", "intent": "Combination of all locale settings.", "question_id": 5410}
{"snippet": "set -= other | ...", "intent": "Update the set, removing elements found in others.", "question_id": 9459}
{"snippet": "importlib.import_module(name, package=None)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g . If the name is specified in relative terms , then the `package` argument must be set to the name of the package which is to act as the anchor for resolving the package name ( e.g .", "question_id": 4794}
{"snippet": "csv.register_dialect(name, dialect, **fmtparams)", "intent": "Associate `dialect` with `name` . With arguments `**fmtparams`.", "question_id": 1684}
{"snippet": "set -= other | ...", "intent": "Update the set, removing elements found in others.", "question_id": 9459}
{"snippet": "pickle.dump(obj, file, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7365}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX", "intent": "The document attempted to remove the namespace declaration associated with a prefix.", "question_id": 7811}
{"snippet": "connection.interrupt()", "intent": "You can call this method from a different thread to abort any queries that might be executing on the connection .", "question_id": 8819}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "mock.call_count", "intent": "An integer telling you how many times the mock object has been called:", "question_id": 11589}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194}
{"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326}
{"snippet": "io.BytesIO()", "intent": "A stream implementation using an in-memory bytes buffer .", "question_id": 5110}
{"snippet": "platform.win32_ver()", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7495}
{"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "counter.update(iterable-or-mapping)", "intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1348}
{"snippet": "Packer.pack_list(list, pack_item)", "intent": "Packs a `list` of homogeneous items . `pack_item` is the function that is called to pack the individual item .", "question_id": 12282}
{"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131}
{"snippet": "Panel.show()", "intent": "Display the panel ( which might have been hidden ) .", "question_id": 2153}
{"snippet": "Pattern.search(string)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object .", "question_id": 7972}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX", "intent": "The document attempted to remove the namespace declaration associated with a prefix.", "question_id": 7811}
{"snippet": "ssl.SSLCertVerificationError", "intent": "A subclass of SSLError raised when certificate validation has failed.", "question_id": 8881}
{"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}
{"snippet": "csv.unix_dialect", "intent": "The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "question_id": 1713}
{"snippet": "window.refresh(pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol)", "intent": "Update the display immediately ( sync actual screen with previous drawing/deleting methods ) . `pminrow` and `pmincol` specify the upper left-hand corner of the rectangle to be displayed in the pad . `sminrow` , `smincol` , `smaxrow` , and `smaxcol` specify the edges of the rectangle to be displayed on the screen .", "question_id": 2106}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2658}
{"snippet": "process.close()", "intent": "Close the Process object , releasing all resources associated with it .", "question_id": 6188}
{"snippet": "typing.get_type_hints(obj)", "intent": "Return a dictionary containing type hints for a function , method , module or class object . With arguments `obj`.", "question_id": 11326}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503}
{"snippet": "logging.config.fileConfig(fname, defaults=None)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "question_id": 5413}
{"snippet": "Option.help", "intent": "Help text to print for this option when listing all available options after the user supplies a help option (such as --help).", "question_id": 6636}
{"snippet": "turtle.tiltangle(angle=None)", "intent": "Set or return the current tilt-angle . If `angle` is given , rotate the turtleshape to point in the direction specified by angle , regardless of its current tilt-angle .", "question_id": 11007}
{"snippet": "unittest.installHandler()", "intent": "Install the control-c handler .", "question_id": 11555}
{"snippet": "resource.RLIMIT_STACK", "intent": "The maximum size (in bytes) of the call stack for the current process.", "question_id": 8079}
{"snippet": "FileCookieJar.load()", "intent": "Load cookies from a file .", "question_id": 4506}
{"snippet": "module_finder.run_script(pathname)", "intent": "Analyze the contents of the `pathname` file , which must contain Python code .", "question_id": 6056}
{"snippet": "context.is_signed(x)", "intent": "Returns True if `x` is negative ; otherwise returns False .", "question_id": 2538}
{"snippet": "os.lseek(fd, pos, how)", "intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "question_id": 6734}
{"snippet": "doctest.DONT_ACCEPT_BLANKLINE", "intent": "By default, if an expected output block contains a line containing only the string <BLANKLINE>, then that line will match a blank line in the actual output.", "question_id": 2753}
{"snippet": "shlex.shlex(punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8277}
{"snippet": "InputSource.getPublicId()", "intent": "Returns the public identifier of this InputSource .", "question_id": 12635}
{"snippet": "collections.abc.Coroutine", "intent": "ABC for coroutine compatible classes.", "question_id": 1331}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "fileinput.filename()", "intent": "Return the name of the file currently being read .", "question_id": 3792}
{"snippet": "completed_process.stdout", "intent": "Captured stdout from the child process.", "question_id": 9580}
{"snippet": "config_parser.items()", "intent": "When section is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT .", "question_id": 1552}
{"snippet": "charset.__str__()", "intent": "Returns input_charset as a string coerced to lower case .", "question_id": 2923}
{"snippet": "errno.ENOMEM", "intent": "Out of memory", "question_id": 3517}
{"snippet": "widget.enable_traversal()", "intent": "Enable keyboard traversal for a toplevel window containing this notebook .", "question_id": 10614}
{"snippet": "numbers.Integral", "intent": "Subtypes Rational and adds a conversion to int.", "question_id": 6512}
{"snippet": "non_callable_magic_mock.reason", "intent": "This is usually a string explaining the reason for this error.", "question_id": 11662}
{"snippet": "code.InteractiveConsole()", "intent": "Closely emulate the behavior of the interactive Python interpreter .", "question_id": 1157}
{"snippet": "loop.sock_sendfile(sock, file, offset=0)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket . `offset` tells from where to start reading the file .", "question_id": 282}
{"snippet": "sys.executable", "intent": "A string giving the absolute path of the executable binary for the Python interpreter, on systems where this makes sense.", "question_id": 9787}
{"snippet": "errno.ENOTUNIQ", "intent": "Name not unique on network", "question_id": 3581}
{"snippet": "window.clearok(flag)", "intent": "If `flag` is True , the next call to refresh ( ) will clear the window completely .", "question_id": 2035}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "window.noutrefresh()", "intent": "Mark for refresh but wait .", "question_id": 2098}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`.", "question_id": 3042}
{"snippet": "asyncore.loop(timeout, use_poll)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) .", "question_id": 649}
{"snippet": "test.support.EnvironmentVarGuard", "intent": "Class used to temporarily set or unset environment variables.", "question_id": 10286}
{"snippet": "UnboundLocalError", "intent": "Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.", "question_id": 3672}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}
{"snippet": "multiprocessing.Manager()", "intent": "Returns a started SyncManager object which can be used for sharing objects between processes .", "question_id": 6278}
{"snippet": "dis.hasjrel", "intent": "Sequence of bytecodes that have a relative jump target.", "question_id": 2748}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "sync_manager.Value(typecode, value)", "intent": "Create an object with a writable `value` attribute and return a proxy for it . With arguments `typecode`.", "question_id": 6312}
{"snippet": "zipfile.PyZipFile(file)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`.", "question_id": 12846}
{"snippet": "context.to_sci_string(x)", "intent": "Converts a number to a string using scientific notation . With arguments `x`.", "question_id": 2575}
{"snippet": "sys.settrace(tracefunc)", "intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "question_id": 9839}
{"snippet": "imp.NullImporter(path_string)", "intent": "The NullImporter type is a PEP 302 import hook that handles non-directory path strings by failing to find any modules . With arguments `path_string`.", "question_id": 4780}
{"snippet": "importlib.machinery.BYTECODE_SUFFIXES", "intent": "A list of strings representing the recognized file suffixes for bytecode modules (including the leading dot).", "question_id": 4868}
{"snippet": "base64.encodebytes(s)", "intent": "Encode the bytes-like object `s` , which can contain arbitrary binary data , and return bytes containing the base64-encoded data , with newlines ( b'\\n ' ) inserted after every 76 bytes of output , and ensuring that there is a trailing newline , as per RFC 2045 ( MIME ) .", "question_id": 751}
{"snippet": "str.maketrans(x, y)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` .", "question_id": 9221}
{"snippet": "pprint.PrettyPrinter(indent=1, depth=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7630}
{"snippet": "scheduler.enter(delay, priority, action)", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`.", "question_id": 8122}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "bytes.decode(errors=\"strict\")", "intent": "Return a string decoded from the given bytes . `errors` may be given to set a different error handling scheme .", "question_id": 9277}
{"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415}
{"snippet": "FileCookieJar.revert(filename=None)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `filename`.", "question_id": 4515}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124}
{"snippet": "ZipFile.extractall(pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "question_id": 12821}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427}
{"snippet": "sys_log_handler.close()", "intent": "Closes the socket to the remote host .", "question_id": 5502}
{"snippet": "datetime.MAXYEAR", "intent": "The largest year number allowed in a date or datetime object.", "question_id": 2197}
{"snippet": "turtle.degrees(fullcircle=360.0)", "intent": "Set angle measurement units , i.e . With arguments `fullcircle`.", "question_id": 10946}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "doctest.debug_src(src)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "question_id": 2890}
{"snippet": "decimal.Context(rounding=None)", "intent": "Creates a new context . The `rounding` option is one of the constants listed in the section Rounding Modes .", "question_id": 2501}
{"snippet": "context.logical_invert(x)", "intent": "Invert all the digits in `x` .", "question_id": 2546}
{"snippet": "curses.ascii.isgraph(c)", "intent": "Checks for ASCII any printable character except space . With arguments `c`.", "question_id": 1905}
{"snippet": "__debug__", "intent": "This constant is true if Python was not started with an -O option.", "question_id": 1607}
{"snippet": "window.clearok(flag)", "intent": "If `flag` is True , the next call to refresh ( ) will clear the window completely .", "question_id": 2035}
{"snippet": "test_case.id()", "intent": "Return a string identifying the specific test case .", "question_id": 11469}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "window.insstr(str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`.", "question_id": 2082}
{"snippet": "coverage_results.write_results(show_missing=True)", "intent": "Write coverage results . Set `show_missing` to show lines that had no hits .", "question_id": 10726}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "errno.ELIBSCN", "intent": ".lib section in a.out corrupted", "question_id": 3586}
{"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}
{"snippet": "faulthandler.dump_traceback()", "intent": "Dump the tracebacks of all threads into `file` .", "question_id": 3712}
{"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162}
{"snippet": "window.clear()", "intent": "Like erase ( ) , but also cause the whole window to be repainted upon next call to refresh ( ) .", "question_id": 2034}
{"snippet": "inspect.getsourcelines(object)", "intent": "Return a list of source lines and starting line number for an `object` .", "question_id": 4974}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS", "intent": "The document contains no elements (XML requires all documents to contain exactly one top-level element)..", "question_id": 7796}
{"snippet": "errno.EL3HLT", "intent": "Level 3 halted", "question_id": 3551}
{"snippet": "urllib.parse.urlencode(query, doseq=False, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11738}
{"snippet": "difflib.Differ", "intent": "This is a class for comparing sequences of lines of text, and producing human-readable differences or deltas.", "question_id": 2596}
{"snippet": "epoll.modify(fd, eventmask)", "intent": "Modify a registered file descriptor . With arguments `fd`, `eventmask`.", "question_id": 8185}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028}
{"snippet": "process.communicate()", "intent": "Interact with process :", "question_id": 548}
{"snippet": "Popen.stdin", "intent": "If the stdin argument was PIPE, this attribute is a writeable stream object as returned by open().", "question_id": 9620}
{"snippet": "cmath.polar(x)", "intent": "Return the representation of `x` in polar coordinates .", "question_id": 1094}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "test.support.WarningsRecorder", "intent": "Class used to record warnings for unit tests.", "question_id": 10295}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513}
{"snippet": "widget.state()", "intent": "Modify or inquire widget state .", "question_id": 10595}
{"snippet": "io.BlockingIOError", "intent": "This is a compatibility alias for the builtin BlockingIOError exception.", "question_id": 5061}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "IMAP4.xatom(name)", "intent": "Allow simple extension commands notified by server in CAPABILITY response . With arguments `name`.", "question_id": 4752}
{"snippet": "turtle.listen()", "intent": "Set focus on TurtleScreen ( in order to collect key-events ) .", "question_id": 11063}
{"snippet": "tkinter.tix.tixCommand", "intent": "The tix commands provide access to miscellaneous elements of Tix\u2019s internal state and the Tix application context.", "question_id": 10579}
{"snippet": "subprocess.Popen(args, executable=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9601}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "queue.get_nowait()", "intent": "Return an item if one is immediately available , else raise QueueEmpty .", "question_id": 453}
{"snippet": "Node.hasChildNodes()", "intent": "Returns true if the node has any child nodes .", "question_id": 12328}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "errno.EINVAL", "intent": "Invalid argument", "question_id": 3527}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "test_case.assertAlmostEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11419}
{"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "platform.python_implementation()", "intent": "Returns a string identifying the Python implementation .", "question_id": 7476}
{"snippet": "TarInfo.ischr()", "intent": "Return True if it is a character device .", "question_id": 9997}
{"snippet": "socketserver.UDPServer(server_address, RequestHandlerClass)", "intent": "This uses datagrams , which are discrete packets of information that may arrive out of order or be lost while in transit . With arguments `server_address`, `RequestHandlerClass`.", "question_id": 8747}
{"snippet": "queue_handler.enqueue(record)", "intent": "Enqueues the `record` on the queue using put_nowait ( ) ; you may want to override this if you want to use blocking behaviour , or a timeout , or a customized queue implementation .", "question_id": 5556}
{"snippet": "multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer)", "intent": "The same as RawArray ( ) except that depending on the value of `lock` a process-safe synchronization wrapper may be returned instead of a raw ctypes array . With arguments `typecode_or_type`, `size_or_initializer`.", "question_id": 6271}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "shlex.source", "intent": "This attribute is None by default.", "question_id": 8303}
{"snippet": "queue.join_thread()", "intent": "Join the background thread .", "question_id": 6209}
{"snippet": "test_case.assertCountEqual(first, second)", "intent": "Test that sequence `first` contains the same elements as `second` , regardless of their order .", "question_id": 11445}
{"snippet": "queue.join_thread()", "intent": "Join the background thread .", "question_id": 6209}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "zipimporter.load_module(fullname)", "intent": "Load the module specified by `fullname` .", "question_id": 12889}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802}
{"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}
{"snippet": "multiprocessing.set_executable()", "intent": "Sets the path of the Python interpreter to use when starting a child process .", "question_id": 6228}
{"snippet": "tixCommand.tix_configure(**kw)", "intent": "Query or modify the configuration options of the Tix application context . With arguments `**kw`.", "question_id": 10580}
{"snippet": "email.message_from_string(s)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) .", "question_id": 3404}
{"snippet": "ur_lopener.version", "intent": "Variable that specifies the user agent of the opener object.", "question_id": 11904}
{"snippet": "POP3.dele(which)", "intent": "Flag message number `which` for deletion .", "question_id": 7612}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}
{"snippet": "reprlib.Repr", "intent": "Class which provides formatting services useful in implementing functions similar to the built-in repr(); size limits for  different object types are added to avoid the generation of representations which are excessively long.", "question_id": 8050}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "async_result.get()", "intent": "Return the result when it arrives .", "question_id": 6361}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "IMAP4.authenticate(mechanism, authobject)", "intent": "Authenticate command \u2014 requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :", "question_id": 4692}
{"snippet": "urllib.request.HTTPHandler", "intent": "A class to handle opening of HTTP URLs.", "question_id": 11801}
{"snippet": "os.fstat(fd)", "intent": "Get the status of the file descriptor `fd` .", "question_id": 6723}
{"snippet": "connection.text_factory", "intent": "Using this attribute you can control what objects are returned for the TEXT data type.", "question_id": 8826}
{"snippet": "PurePath.as_posix()", "intent": "Return a string representation of the path with forward slashes ( / ) :", "question_id": 7253}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429}
{"snippet": "math.log1p(x)", "intent": "Return the natural logarithm of 1+x ( base e ) . The result is calculated in a way which is accurate for `x` near zero .", "question_id": 5909}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466}
{"snippet": "style.element_create(elementname, etype, *args, **kw)", "intent": "Create a new element in the current theme , of the given `etype` which is expected to be either \u201c image \u201d , \u201c from \u201d or \u201c vsapi \u201d . With arguments `elementname`, `*args`, `**kw`.", "question_id": 10683}
{"snippet": "widget.selection_remove(*items)", "intent": "Remove items from the selection . With arguments `*items`.", "question_id": 10656}
{"snippet": "errno.ENOPKG", "intent": "Package not installed", "question_id": 3570}
{"snippet": "random.randrange(stop)", "intent": "Return a randomly selected element from range ( start , `stop` , step ) .", "question_id": 7890}
{"snippet": "stat_result.st_rsize", "intent": "Real size of the file.", "question_id": 6942}
{"snippet": "connection.create_aggregate(name, num_params, aggregate_class)", "intent": "Creates a user-defined aggregate function . The aggregate class must implement a step method , which accepts the number of parameters `num_params` ( if num_params is -1 , the function may take any number of arguments ) , and a finalize method which will return the final result of the aggregate . With arguments `name`, `aggregate_class`.", "question_id": 8817}
{"snippet": "email_message.clear_content()", "intent": "Remove the payload and all of the Content- headers , leaving all other headers intact and in their original order .", "question_id": 3307}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826}
{"snippet": "sys.getdefaultencoding()", "intent": "Return the name of the current default string encoding used by the Unicode implementation .", "question_id": 9796}
{"snippet": "TarFile.open()", "intent": "Alternative constructor .", "question_id": 9923}
{"snippet": "test_result.skipped", "intent": "A list containing 2-tuples of TestCase instances and strings holding the reason for skipping the test.", "question_id": 11510}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670}
{"snippet": "log_record.getMessage()", "intent": "Returns the message for this LogRecord instance after merging any user-supplied arguments with the message .", "question_id": 5630}
{"snippet": "CGIXMLRPCRequestHandler.handle_request()", "intent": "Handle an XML-RPC request .", "question_id": 12747}
{"snippet": "tempfile.TemporaryDirectory(dir=None)", "intent": "This function securely creates a temporary directory using the same rules as mkdtemp ( ) . With arguments `dir`.", "question_id": 10066}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "codeop.compile_command(source, symbol=\"single\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . The `symbol` argument determines whether source is compiled as a statement ( 'single ' , the default ) or as an expression ( 'eval ' ) .", "question_id": 1306}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}
{"snippet": "Request.origin_req_host", "intent": "The original host for the request, without port.", "question_id": 11819}
{"snippet": "mimetypes.knownfiles", "intent": "List of type map file names commonly installed.", "question_id": 5951}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "ssl.enum_certificates(store_name)", "intent": "Retrieve certificates from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8899}
{"snippet": "turtle.onrelease(fun)", "intent": "Bind `fun` to mouse-button-release events on this turtle .", "question_id": 11023}
{"snippet": "turtle.shapetransform()", "intent": "Set or return the current transformation matrix of the turtle shape .", "question_id": 11008}
{"snippet": "test_loader.getTestCaseNames(testCaseClass)", "intent": "Return a sorted sequence of method names found within `testCaseClass` ; this should be a subclass of TestCase .", "question_id": 11498}
{"snippet": "context.is_infinite(x)", "intent": "Returns True if `x` is infinite ; otherwise returns False .", "question_id": 2534}
{"snippet": "xml.sax.xmlreader.IncrementalParser", "intent": "In some cases, it is desirable not to parse an input source at once, but to feed chunks of the document as they get available.", "question_id": 12607}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "decimal.Inexact", "intent": "Indicates that rounding occurred and the result is not exact.", "question_id": 2588}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}
{"snippet": "loop.sock_sendfile(sock, file, offset=0)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket . `offset` tells from where to start reading the file .", "question_id": 282}
{"snippet": "FTP.abort()", "intent": "Abort a file transfer that is in progress .", "question_id": 3923}
{"snippet": "reprlib.Repr", "intent": "Class which provides formatting services useful in implementing functions similar to the built-in repr(); size limits for  different object types are added to avoid the generation of representations which are excessively long.", "question_id": 8050}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "asyncio.gather(*aws, return_exceptions=False)", "intent": "Run awaitable objects in the aws sequence concurrently . If `return_exceptions` is False ( default ) , the first raised exception is immediately propagated to the task that awaits on gather ( ) . With arguments `*aws`.", "question_id": 601}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "path_finder.find_module(fullname)", "intent": "A legacy wrapper around find_spec ( ) . With arguments `fullname`.", "question_id": 4879}
{"snippet": "statistics.variance(data)", "intent": "Return the sample variance of `data` , an iterable of at least two real-valued numbers .", "question_id": 9139}
{"snippet": "math.isinf(x)", "intent": "Return True if `x` is a positive or negative infinity , and False otherwise .", "question_id": 5899}
{"snippet": "turtle.position()", "intent": "Return the turtle \u2019 s current location ( x , y ) ( as a Vec2D vector ) .", "question_id": 10936}
{"snippet": "urllib.request.CacheFTPHandler", "intent": "Open FTP URLs, keeping a cache of open FTP connections to minimize delays.", "question_id": 11813}
{"snippet": "unittest.mock.Mock(**kwargs, unsafe=False)", "intent": "Create a new Mock object . With arguments `**kwargs`, `unsafe`.", "question_id": 11567}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140}
{"snippet": "context.compare_signal(x, y)", "intent": "Compares the values of the two operands numerically . With arguments `x`, `y`.", "question_id": 2521}
{"snippet": "Pattern.match(string)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object .", "question_id": 7975}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "ensurepip.bootstrap()", "intent": "Bootstraps pip into the current or designated environment .", "question_id": 3489}
{"snippet": "smtp_channel.mailfrom", "intent": "Holds a string containing the address identified in the \u201cMAIL FROM:\u201d line from the client.", "question_id": 8443}
{"snippet": "task.cancel()", "intent": "Request the Task to be cancelled .", "question_id": 626}
{"snippet": "context.normalize(x)", "intent": "Reduces `x` to its simplest form .", "question_id": 2558}
{"snippet": "context.keys()", "intent": "Return a list of all variables in the context object .", "question_id": 1658}
{"snippet": "TarFile.open()", "intent": "Alternative constructor .", "question_id": 9923}
{"snippet": "loop.getnameinfo(sockaddr)", "intent": "Asynchronous version of socket.getnameinfo ( ) . With arguments `sockaddr`.", "question_id": 299}
{"snippet": "asyncore.dispatcher_with_send", "intent": "A dispatcher subclass which adds simple buffered output capability, useful for simple clients.", "question_id": 674}
{"snippet": "doctest.REPORT_UDIFF", "intent": "When specified, failures that involve multi-line expected and actual outputs are displayed using a unified diff.", "question_id": 2759}
{"snippet": "style.theme_names()", "intent": "Returns a list of all known themes .", "question_id": 10691}
{"snippet": "zlib.adler32(data)", "intent": "Computes an Adler-32 checksum of `data` .", "question_id": 12894}
{"snippet": "zipimport.zipimporter(archivepath)", "intent": "Create a new zipimporter instance . `archivepath` must be a path to a ZIP file , or to a specific path within a ZIP file .", "question_id": 12881}
{"snippet": "socket.fileno()", "intent": "Return the socket \u2019 s file descriptor ( a small integer ) , or -1 on failure .", "question_id": 8680}
{"snippet": "breakpoint(*args, **kws)", "intent": "This function drops you into the debugger at the call site . With arguments `*args`, `**kws`.", "question_id": 3980}
{"snippet": "pickle.dump(obj, file, protocol=None, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7366}
{"snippet": "profile.run(cmd)", "intent": "Profile the `cmd` via exec ( ) .", "question_id": 7685}
{"snippet": "json.JSONEncoder(check_circular=True)", "intent": "Extensible JSON encoder for Python data structures . If `check_circular` is true ( the default ) , then lists , dicts , and custom encoded objects will be checked for circular references during encoding to prevent an infinite recursion ( which would cause an OverflowError ) .", "question_id": 5325}
{"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919}
{"snippet": "inspect.CO_ITERABLE_COROUTINE", "intent": "The flag is used to transform generators into generator-based coroutines.", "question_id": 5048}
{"snippet": "ArgumentParser.add_argument_group()", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages .", "question_id": 95}
{"snippet": "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None)", "intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Otherwise you can explicitly specify the image subtype via the `_subtype` argument . With arguments `**_params`.", "question_id": 3343}
{"snippet": "os.RWF_DSYNC", "intent": "Provide a per-write equivalent of the O_DSYNC open(2) flag.", "question_id": 6791}
{"snippet": "email.mime.message.MIMEMessage(_msg, policy=compat32)", "intent": "Module : email.mime.message `_msg` is used as the payload , and must be an instance of class Message ( or a subclass thereof ) , otherwise a TypeError is raised . Optional `policy` argument defaults to compat32 .", "question_id": 3352}
{"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478}
{"snippet": "charset.output_charset", "intent": "Some character sets must be converted before they can be used in email headers or bodies.", "question_id": 2915}
{"snippet": "tokenize.untokenize(iterable)", "intent": "Converts tokens back into Python source code . The `iterable` must return sequences with at least two elements , the token type and the token string .", "question_id": 10702}
{"snippet": "Telnet.expect(list)", "intent": "Read until one from a `list` of a regular expressions matches .", "question_id": 10030}
{"snippet": "StopIteration", "intent": "Raised by built-in function next() and an iterator\u2019s __next__() method to signal that there are no further items produced by the iterator.", "question_id": 3663}
{"snippet": "getpass.getuser()", "intent": "Return the \u201c login name \u201d of the user .", "question_id": 4209}
{"snippet": "Repr.maxstring", "intent": "Limit on the number of characters in the representation of the string.", "question_id": 8064}
{"snippet": "signal.CTRL_C_EVENT", "intent": "The signal corresponding to the Ctrl+C keystroke event.", "question_id": 8376}
{"snippet": "email.header.Header()", "intent": "Create a MIME-compliant header that can contain strings in different character sets .", "question_id": 3116}
{"snippet": "xmlparser.XmlDeclHandler(version, encoding, standalone)", "intent": "Called when the XML declaration is parsed . The XML declaration is the ( optional ) declaration of the applicable `version` of the XML recommendation , the `encoding` of the document text , and an optional \u201c `standalone` \u201d declaration .", "question_id": 7755}
{"snippet": "mock.reset_mock()", "intent": "The reset_mock method resets all the call attributes on a mock object :", "question_id": 11578}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484}
{"snippet": "email.mime.message.MIMEMessage(_msg, policy=compat32)", "intent": "Module : email.mime.message `_msg` is used as the payload , and must be an instance of class Message ( or a subclass thereof ) , otherwise a TypeError is raised . Optional `policy` argument defaults to compat32 .", "question_id": 3352}
{"snippet": "tree_builder.start(tag, attrs)", "intent": "Opens a new element . `tag` is the element name . `attrs` is a dictionary containing element attributes .", "question_id": 12544}
{"snippet": "difflib.Differ", "intent": "This is a class for comparing sequences of lines of text, and producing human-readable differences or deltas.", "question_id": 2596}
{"snippet": "env_builder.install_scripts(context, path)", "intent": "`path` is the path to a directory that should contain subdirectories \u201c common \u201d , \u201c posix \u201d , \u201c nt \u201d , each containing scripts destined for the bin directory in the environment . With arguments `context`.", "question_id": 11988}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "warnings.formatwarning(message, category, filename, lineno)", "intent": "Format a warning the standard way . `line` is a line of source code to be included in the warning `message` ; if line is not supplied , formatwarning ( ) will try to read the line specified by `filename` and `lineno` . With arguments `category`.", "question_id": 12021}
{"snippet": "errno.ENOTUNIQ", "intent": "Name not unique on network", "question_id": 3581}
{"snippet": "element.findtext(match, default=None, namespaces=None)", "intent": "Finds text for the first subelement matching `match` . Returns the text content of the first matching element , or `default` if no element was found . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12498}
{"snippet": "dict(iterable, **kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . Otherwise , the positional argument must be an `iterable` object . With arguments `**kwarg`.", "question_id": 9469}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009}
{"snippet": "base64.standard_b64encode(s)", "intent": "Encode bytes-like object `s` using the standard Base64 alphabet and return the encoded bytes .", "question_id": 714}
{"snippet": "urllib.request.HTTPCookieProcessor()", "intent": "A class to handle HTTP Cookies .", "question_id": 11782}
{"snippet": "multiprocessing.set_executable()", "intent": "Sets the path of the Python interpreter to use when starting a child process .", "question_id": 6228}
{"snippet": "row.reason", "intent": "A string mnemonic designating the reason this error occurred, for example CERTIFICATE_VERIFY_FAILED.", "question_id": 8875}
{"snippet": "dircmp.left_list", "intent": "Files and subdirectories in a, filtered by hide and ignore.", "question_id": 3769}
{"snippet": "SSLContext.maximum_version", "intent": "A TLSVersion enum member representing the highest supported TLS version.", "question_id": 9044}
{"snippet": "test.support.PGO", "intent": "Set when tests can be skipped when they are not useful for PGO.", "question_id": 10123}
{"snippet": "devpoll.register(fd)", "intent": "Register a file descriptor with the polling object . `fd` can be either an integer , or an object with a fileno ( ) method that returns an integer .", "question_id": 8173}
{"snippet": "queue_listener.handle(record)", "intent": "Conditionally emits the specified logging `record` , depending on filters which may have been added to the handler .", "question_id": 5606}
{"snippet": "Pattern.groupindex", "intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "question_id": 7993}
{"snippet": "os.path.expandvars(path)", "intent": "Return the argument with environment variables expanded . With arguments `path`.", "question_id": 7150}
{"snippet": "cmath.log10(x)", "intent": "Return the base-10 logarithm of `x` .", "question_id": 1099}
{"snippet": "importlib.import_module(name)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g .", "question_id": 4793}
{"snippet": "template.substitute(mapping, **kwds)", "intent": "Performs the template substitution , returning a new string . `mapping` is any dictionary-like object with keys that match the placeholders in the template . With arguments `**kwds`.", "question_id": 9526}
{"snippet": "test.support.EnvironmentVarGuard", "intent": "Class used to temporarily set or unset environment variables.", "question_id": 10286}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "socket.recvmsg_into(buffers, ancbufsize, flags)", "intent": "Receive normal data and ancillary data from the socket , behaving as recvmsg ( ) would , but scatter the non-ancillary data into a series of `buffers` instead of returning a new bytes object . The `ancbufsize` and `flags` arguments have the same meaning as for recvmsg ( ) .", "question_id": 8708}
{"snippet": "asyncio.wrap_future(future)", "intent": "Wrap a concurrent.futures.Future object in a asyncio.Future object . With arguments `future`.", "question_id": 357}
{"snippet": "gettext.textdomain()", "intent": "Change or query the current global `domain` .", "question_id": 4214}
{"snippet": "plistlib.load(fp)", "intent": "Read a plist file . `fp` should be a readable and binary file object .", "question_id": 7547}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "html_diff.make_table(fromlines, tolines)", "intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML table showing line by line differences with inter-line and intra-line changes highlighted .", "question_id": 2618}
{"snippet": "sys.exec_prefix", "intent": "A string giving the site-specific directory prefix where the platform-dependent Python files are installed; by default, this is also '/usr/local'.", "question_id": 9786}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "charset.__ne__(other)", "intent": "This method allows you to compare two Charset instances for inequality . With arguments `other`.", "question_id": 2925}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466}
{"snippet": "turtle.end_fill()", "intent": "Fill the shape drawn after the last call to begin_fill ( ) .", "question_id": 10966}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}
{"snippet": "errno.errorcode", "intent": "Dictionary providing a mapping from the errno value to the string name in the underlying system.", "question_id": 3505}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "context.copy()", "intent": "Return a duplicate of the context .", "question_id": 2511}
{"snippet": "SSLContext.set_ecdh_curve(curve_name)", "intent": "Set the curve name for Elliptic Curve-based Diffie-Hellman ( ECDH ) key exchange . The `curve_name` parameter should be a string describing a well-known elliptic curve , for example prime256v1 for a widely supported curve .", "question_id": 9021}
{"snippet": "Dialect.doublequote", "intent": "Controls how instances of quotechar appearing inside a field should themselves be quoted.", "question_id": 1724}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "turtle.textinput(title, prompt)", "intent": "Pop up a dialog window for input of a string . Parameter `title` is the title of the dialog window , `prompt` is a text mostly describing what information to input .", "question_id": 11083}
{"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "test_case.setUpClass()", "intent": "A class method called before tests in an individual class are run .", "question_id": 11367}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "codeop.compile_command(source, symbol=\"single\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . The `symbol` argument determines whether source is compiled as a statement ( 'single ' , the default ) or as an expression ( 'eval ' ) .", "question_id": 1306}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480}
{"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012}
{"snippet": "multiprocessing.get_logger()", "intent": "Returns the logger used by multiprocessing .", "question_id": 6382}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "platform.python_version_tuple()", "intent": "Returns the Python version as tuple ( major , minor , patchlevel ) of strings .", "question_id": 7479}
{"snippet": "csv.writer(csvfile, **fmtparams, dialect='excel')", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1683}
{"snippet": "decimal.Overflow", "intent": "Numerical overflow.", "question_id": 2590}
{"snippet": "readline.insert_text(string)", "intent": "Insert text into the line buffer at the cursor position . With arguments `string`.", "question_id": 8019}
{"snippet": "sys.hash_info", "intent": "A named tuple giving parameters of the numeric hash implementation.", "question_id": 9813}
{"snippet": "style.theme_use()", "intent": "If `themename` is not given , returns the theme in use .", "question_id": 10692}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "@importlib.util.module_for_loader", "intent": "A decorator for importlib.abc.Loader.load_module() to handle selecting the proper module object to load with.", "question_id": 4931}
{"snippet": "traceback.extract_tb(tb)", "intent": "Return a StackSummary object representing a list of \u201c pre-processed \u201d stack trace entries extracted from the traceback object `tb` .", "question_id": 10769}
{"snippet": "oss_audio_device.setfmt(format)", "intent": "Try to set the current audio `format` to format\u2014see getfmts ( ) for a list .", "question_id": 7185}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "stat.S_IWOTH", "intent": "Others have write permission.", "question_id": 9107}
{"snippet": "tracemalloc.clear_traces()", "intent": "Clear traces of memory blocks allocated by Python .", "question_id": 10841}
{"snippet": "curses.def_shell_mode()", "intent": "Save the current terminal mode as the \u201c shell \u201d mode , the mode when the running program is not using curses .", "question_id": 1928}
{"snippet": "Document.createProcessingInstruction(target, data)", "intent": "Create and return a processing instruction node containing the `target` and `data` passed as parameters .", "question_id": 12349}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "textbox.do_command(ch)", "intent": "Process a single command keystroke . With arguments `ch`.", "question_id": 2138}
{"snippet": "tarfile.TarFile(mode='r')", "intent": "All following arguments are optional and can be accessed as instance attributes as well . `mode` is either ' r ' to read from an existing archive , ' a ' to append data to an existing file , ' w ' to create a new file overwriting an existing one , or ' x ' to create a new file only if it does not already exist .", "question_id": 9915}
{"snippet": "time.CLOCK_MONOTONIC_RAW", "intent": "Similar to CLOCK_MONOTONIC, but provides access to a raw hardware-based time that is not subject to NTP adjustments.", "question_id": 10466}
{"snippet": "str.join(iterable)", "intent": "Return a string which is the concatenation of the strings in `iterable` .", "question_id": 9214}
{"snippet": "urllib.parse.parse_qs(qs, encoding='utf-8')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional `encoding` and errors parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method . With arguments `qs`.", "question_id": 11672}
{"snippet": "urllib.request.DataHandler", "intent": "Open data URLs.", "question_id": 11811}
{"snippet": "NotImplemented", "intent": "Special value which should be returned by the binary special methods (e.g.", "question_id": 1605}
{"snippet": "TarInfo.size", "intent": "Size in bytes.", "question_id": 9982}
{"snippet": "zipfile.PyZipFile(file)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`.", "question_id": 12846}
{"snippet": "tracemalloc.start()", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators .", "question_id": 10847}
{"snippet": "module_finder.run_script(pathname)", "intent": "Analyze the contents of the `pathname` file , which must contain Python code .", "question_id": 6056}
{"snippet": "inspect.Signature()", "intent": "A Signature object represents the call signature of a function and its return annotation .", "question_id": 4979}
{"snippet": "element_tree.write(file, short_empty_elements=True)", "intent": "Writes the element tree to a `file` , as XML . The keyword-only `short_empty_elements` parameter controls the formatting of elements that contain no content .", "question_id": 12532}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "shlex.commenters", "intent": "The string of characters that are recognized as comment beginners.", "question_id": 8294}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "contextlib.redirect_stdout(new_target)", "intent": "Context manager for temporarily redirecting sys.stdout to another file or file-like object . With arguments `new_target`.", "question_id": 1623}
{"snippet": "tkinter.tix.ButtonBox", "intent": "The ButtonBox widget creates a box of buttons, such as is commonly used for Ok Cancel.", "question_id": 10553}
{"snippet": "imp.new_module(name)", "intent": "Return a new empty module object called `name` .", "question_id": 4765}
{"snippet": "_thread.start_new_thread(function, args)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "question_id": 12944}
{"snippet": "os.pwritev(fd, buffers, offset)", "intent": "Write the `buffers` contents to file descriptor `fd` at a `offset` offset , leaving the file offset unchanged .", "question_id": 6789}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679}
{"snippet": "TarInfo.ischr()", "intent": "Return True if it is a character device .", "question_id": 9997}
{"snippet": "test.support.import_fresh_module(name)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10242}
{"snippet": "socket.setdefaulttimeout(timeout)", "intent": "Set the default `timeout` in seconds ( float ) for new socket objects .", "question_id": 8668}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885}
{"snippet": "os.makedirs(name)", "intent": "Recursive directory creation function . With arguments `name`.", "question_id": 6866}
{"snippet": "decimal.Overflow", "intent": "Numerical overflow.", "question_id": 2590}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "re.escape(pattern)", "intent": "Escape special characters in `pattern` .", "question_id": 7959}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "decimal.Context(rounding=None)", "intent": "Creates a new context . The `rounding` option is one of the constants listed in the section Rounding Modes .", "question_id": 2501}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "array.itemsize", "intent": "The length in bytes of one array item in the internal representation.", "question_id": 119}
{"snippet": "widget.yview(*args)", "intent": "Query or modify vertical position of the treeview . With arguments `*args`.", "question_id": 10671}
{"snippet": "ast.NodeVisitor", "intent": "A node visitor base class that walks the abstract syntax tree and calls a visitor function for every node found.", "question_id": 159}
{"snippet": "mmap.move(dest, src, count)", "intent": "Copy the `count` bytes starting at offset `src` to the destination index `dest` .", "question_id": 6008}
{"snippet": "email.headerregistry.DateHeader", "intent": "RFC 5322 specifies a very specific format for dates within email headers.", "question_id": 3156}
{"snippet": "condition.wait_for(predicate, timeout=None)", "intent": "Wait until a condition evaluates to true . `predicate` should be a callable which result will be interpreted as a boolean value . A `timeout` may be provided giving the maximum time to wait .", "question_id": 10393}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723}
{"snippet": "Unpacker.unpack_bytes()", "intent": "Unpacks and returns a variable length byte stream , similarly to unpack_string ( ) .", "question_id": 12296}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466}
{"snippet": "pickle.PickleError", "intent": "Common base class for the other pickling exceptions.", "question_id": 7387}
{"snippet": "select.epoll()", "intent": "( Only supported on Linux 2.5.44 and newer . )", "question_id": 8150}
{"snippet": "@unittest.skip(reason)", "intent": "Unconditionally skip the decorated test . `reason` should describe why the test is being skipped .", "question_id": 11358}
{"snippet": "SummaryInformation.Persist()", "intent": "Write the modified properties to the summary information stream , using MsiSummaryInfoPersist ( ) .", "question_id": 6080}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "dis.hasname", "intent": "Sequence of bytecodes that access an attribute by name.", "question_id": 2747}
{"snippet": "address_header.groups", "intent": "A tuple of Group objects encoding the addresses and groups found in the header value.", "question_id": 3159}
{"snippet": "xml.dom.InvalidModificationErr", "intent": "Raised when an attempt is made to modify the type of a node.", "question_id": 12387}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "random.choices(population, weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7896}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617}
{"snippet": "errno.ENOSR", "intent": "Out of streams resources", "question_id": 3568}
{"snippet": "subprocess.BELOW_NORMAL_PRIORITY_CLASS", "intent": "A Popen creationflags parameter to specify that a new process will have a below average priority.", "question_id": 9650}
{"snippet": "style.element_create(elementname, etype, *args, **kw)", "intent": "Create a new element in the current theme , of the given `etype` which is expected to be either \u201c image \u201d , \u201c from \u201d or \u201c vsapi \u201d . With arguments `elementname`, `*args`, `**kw`.", "question_id": 10683}
{"snippet": "syslog.setlogmask(maskpri)", "intent": "Set the priority mask to `maskpri` and return the previous mask value .", "question_id": 9884}
{"snippet": "auto.object", "intent": "The object the codec was attempting to encode or decode.", "question_id": 3676}
{"snippet": "json.loads(s, **kw)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5300}
{"snippet": "unittest.mock.create_autospec(spec, **kwargs)", "intent": "Create a mock object using another object as a `spec` . With arguments `**kwargs`.", "question_id": 11649}
{"snippet": "ssl.SSLContext(protocol=PROTOCOL_TLS)", "intent": "Create a new SSL context . You may pass `protocol` which must be one of the PROTOCOL_* constants defined in this module .", "question_id": 8995}
{"snippet": "multiprocessing.get_logger()", "intent": "Returns the logger used by multiprocessing .", "question_id": 6382}
{"snippet": "subprocess.STARTUPINFO()", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation .", "question_id": 9625}
{"snippet": "os.pardir", "intent": "The constant string used by the operating system to refer to the parent directory.", "question_id": 7122}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}
{"snippet": "reprlib.repr(obj)", "intent": "This is the repr ( ) method of aRepr . With arguments `obj`.", "question_id": 8052}
{"snippet": "parser.parse(fp)", "intent": "Read all the data from the text-mode file-like object `fp` , parse the resulting text , and return the root message object .", "question_id": 3388}
{"snippet": "socketserver.ForkingTCPServer", "intent": "These classes are pre-defined using the mix-in classes.", "question_id": 8755}
{"snippet": "curses.nocbreak()", "intent": "Leave cbreak mode .", "question_id": 1961}
{"snippet": "oss_audio_device.read(size)", "intent": "Read `size` bytes from the audio input and return them as a Python string .", "question_id": 7180}
{"snippet": "curses.def_shell_mode()", "intent": "Save the current terminal mode as the \u201c shell \u201d mode , the mode when the running program is not using curses .", "question_id": 1928}
{"snippet": "task.cancel()", "intent": "Request the Task to be cancelled .", "question_id": 626}
{"snippet": "time.localtime()", "intent": "Like gmtime ( ) but converts to local time .", "question_id": 10444}
{"snippet": "dis.hasfree", "intent": "Sequence of bytecodes that access a free variable (note that \u2018free\u2019 in this context refers to names in the current scope that are referenced by inner scopes or names in outer scopes that are referenced from this scope.", "question_id": 2746}
{"snippet": "stat_result.st_atime_ns", "intent": "Time of most recent access expressed in nanoseconds as an integer.", "question_id": 6932}
{"snippet": "gnu_translations.ngettext(singular, plural, n)", "intent": "Do a plural-forms lookup of a message id . `singular` is used as the message id for purposes of lookup in the catalog , while `n` is used to determine which `plural` form to use .", "question_id": 4262}
{"snippet": "mock.configure_mock(**kwargs)", "intent": "Set attributes on the mock through keyword arguments . With arguments `**kwargs`.", "question_id": 11585}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "shelve.open(filename, writeback=False)", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . If the optional `writeback` parameter is set to True , all entries accessed are also cached in memory , and written back on sync ( ) and close ( ) ; this can make it handier to mutate mutable entries in the persistent dictionary , but , if many entries are accessed , it can consume vast amounts of memory for the cache , and it can make the close operation very slow since all accessed entries are written back ( there is no way to determine which accessed entries are mutable , nor which ones were actually mutated ) .", "question_id": 8237}
{"snippet": "hashlib.algorithms_available", "intent": "A set containing the names of the hash algorithms that are available in the running Python interpreter.", "question_id": 4300}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020}
{"snippet": "sys.dllhandle", "intent": "Integer specifying the handle of the Python DLL.", "question_id": 9778}
{"snippet": "reprlib.repr(obj)", "intent": "This is the repr ( ) method of aRepr . With arguments `obj`.", "question_id": 8052}
{"snippet": "itertools.chain(*iterables)", "intent": "Make an iterator that returns elements from the first iterable until it is exhausted , then proceeds to the next iterable , until all of the iterables are exhausted . With arguments `*iterables`.", "question_id": 5241}
{"snippet": "UUID.is_safe", "intent": "An enumeration of SafeUUID which indicates whether the platform generated the UUID in a multiprocessing-safe way.", "question_id": 11955}
{"snippet": "window.inch(y, x)", "intent": "Return the character at the given position in the window . With arguments `y`, `x`.", "question_id": 2069}
{"snippet": "SummaryInformation.Persist()", "intent": "Write the modified properties to the summary information stream , using MsiSummaryInfoPersist ( ) .", "question_id": 6080}
{"snippet": "_c_data._b_base_", "intent": "Sometimes ctypes data instances do not own the memory block they contain, instead they share part of the memory block of a base object.", "question_id": 1850}
{"snippet": "shutil.copymode(src, dst)", "intent": "Copy the permission bits from `src` to `dst` .", "question_id": 8314}
{"snippet": "loop.get_exception_handler()", "intent": "Return the current exception handler , or None if no custom exception handler was set .", "question_id": 308}
{"snippet": "xmlparser.XmlDeclHandler(version, encoding, standalone)", "intent": "Called when the XML declaration is parsed . The XML declaration is the ( optional ) declaration of the applicable `version` of the XML recommendation , the `encoding` of the document text , and an optional \u201c `standalone` \u201d declaration .", "question_id": 7755}
{"snippet": "socket.create_connection(address)", "intent": "Connect to a TCP service listening on the Internet `address` ( a 2-tuple ( host , port ) ) , and return the socket object .", "question_id": 8629}
{"snippet": "NNTP.over(message_spec)", "intent": "Send an OVER command , or an XOVER command on legacy servers . `message_spec` can be either a string representing a message id , or a ( first , last ) tuple of numbers indicating a range of articles in the current group , or a ( first , None ) tuple indicating a range of articles starting from first to the last article in the current group , or None to select the current article in the current group .", "question_id": 6472}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "json.JSONEncoder(default=None)", "intent": "Extensible JSON encoder for Python data structures . Supports the following objects and types by `default` :", "question_id": 5330}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "FileCookieJar.filename", "intent": "Filename of default file in which to keep cookies.", "question_id": 4522}
{"snippet": "cgitb.enable()", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook .", "question_id": 1059}
{"snippet": "SSLContext.wrap_socket(sock, suppress_ragged_eofs=True)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `suppress_ragged_eofs` specifies how the SSLSocket.recv ( ) method should signal unexpected EOF from the other end of the connection .", "question_id": 9025}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140}
{"snippet": "Popen.wait()", "intent": "Wait for child process to terminate .", "question_id": 9610}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "tkinter.tix.Form", "intent": "The Form geometry manager based on attachment rules for all Tk widgets.", "question_id": 10578}
{"snippet": "NNTP.over(message_spec)", "intent": "Send an OVER command , or an XOVER command on legacy servers . `message_spec` can be either a string representing a message id , or a ( first , last ) tuple of numbers indicating a range of articles in the current group , or a ( first , None ) tuple indicating a range of articles starting from first to the last article in the current group , or None to select the current article in the current group .", "question_id": 6472}
{"snippet": "winreg.HKEY_CLASSES_ROOT", "intent": "Registry entries subordinate to this key define types (or classes) of documents and the properties associated with those types.", "question_id": 12155}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "errno.EBADSLT", "intent": "Invalid slot", "question_id": 3562}
{"snippet": "bytes.center(width)", "intent": "Return a copy of the object centered in a sequence of length `width` .", "question_id": 9336}
{"snippet": "connection.create_collation(name, callable)", "intent": "Creates a collation with the specified `name` and `callable` .", "question_id": 8818}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819}
{"snippet": "select.epoll()", "intent": "( Only supported on Linux 2.5.44 and newer . )", "question_id": 8150}
{"snippet": "fraction.__floor__()", "intent": "Returns the greatest int < = self .", "question_id": 3873}
{"snippet": "struct.error", "intent": "Exception raised on various occasions; argument is a string describing what is wrong.", "question_id": 9550}
{"snippet": "UUID.bytes_le", "intent": "The UUID as a 16-byte string (with time_low, time_mid, and time_hi_version in little-endian byte order).", "question_id": 11948}
{"snippet": "condition.wait_for(predicate, timeout=None)", "intent": "Wait until a condition evaluates to true . `predicate` should be a callable which result will be interpreted as a boolean value . A `timeout` may be provided giving the maximum time to wait .", "question_id": 10393}
{"snippet": "winreg.HKEY_PERFORMANCE_DATA", "intent": "Registry entries subordinate to this key allow you to access performance data.", "question_id": 12159}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "extension_file_loader.get_code(fullname)", "intent": "Returns None as extension modules lack a code object . With arguments `fullname`.", "question_id": 4909}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "tkinter.tix.Meter", "intent": "The Meter widget can be used to show the progress of a background job which may take a long time to execute.", "question_id": 10558}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "ctypes.PYFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the Python calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1800}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "POP3.rpop(user)", "intent": "Use RPOP authentication ( similar to UNIX r-commands ) to log into POP3 server . With arguments `user`.", "question_id": 7607}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "socket.getfqdn(name)", "intent": "Return a fully qualified domain `name` for name .", "question_id": 8645}
{"snippet": "html_calendar.cssclass_month_head", "intent": "The month\u2019s head CSS class (used by formatmonthname()).", "question_id": 973}
{"snippet": "AU_write.writeframes(data)", "intent": "Write audio frames and make sure nframes is correct . With arguments `data`.", "question_id": 9729}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE", "intent": "An attribute was used more than once in a start tag.", "question_id": 7792}
{"snippet": "Dialect.delimiter", "intent": "A one-character string used to separate fields.", "question_id": 1723}
{"snippet": "stat.UF_HIDDEN", "intent": "The file should not be displayed in a GUI (Mac OS X 10.5+).", "question_id": 9119}
{"snippet": "ZipFile.open(name, pwd=None)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . `pwd` is the password used to decrypt encrypted ZIP files .", "question_id": 12808}
{"snippet": "loader.create_module(spec)", "intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "question_id": 4814}
{"snippet": "stats.dump_stats(filename)", "intent": "Save the data loaded into the Stats object to a file named `filename` .", "question_id": 7692}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "audioop.max(fragment, width)", "intent": "Return the maximum of the absolute value of all samples in a `fragment` . With arguments `width`.", "question_id": 696}
{"snippet": "socket.close(fd)", "intent": "Close a socket file descriptor . With arguments `fd`.", "question_id": 8634}
{"snippet": "sqlite3.IntegrityError", "intent": "Exception raised when the relational integrity of the database is affected, e.g.", "question_id": 8859}
{"snippet": "traceback_exception.from_exception(exc)", "intent": "Capture an exception for later rendering . With arguments `exc`.", "question_id": 10812}
{"snippet": "os.sync()", "intent": "Force write of everything to disk .", "question_id": 6955}
{"snippet": "HTTPConnection.getresponse()", "intent": "Should be called after a request is sent to get the response from the server .", "question_id": 4435}
{"snippet": "test.support.check__all__(test_case, module)", "intent": "Assert that the __all__ variable of `module` contains all public names . With arguments `test_case`.", "question_id": 10277}
{"snippet": "zlib.error", "intent": "Exception raised on compression and decompression errors.", "question_id": 12892}
{"snippet": "test.support.fd_count()", "intent": "Count the number of open file descriptors .", "question_id": 10154}
{"snippet": "time.monotonic_ns()", "intent": "Similar to monotonic ( ) , but return time as nanoseconds .", "question_id": 10447}
{"snippet": "profile.Profile(timer=None)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument .", "question_id": 7670}
{"snippet": "weakref.WeakValueDictionary(dict)", "intent": "Mapping class that references values weakly . With arguments `dict`.", "question_id": 12084}
{"snippet": "ArgumentParser.format_usage()", "intent": "Return a string containing a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 107}
{"snippet": "Cmd.ruler", "intent": "The character used to draw separator lines under the help-message headers.", "question_id": 1153}
{"snippet": "mh.get_sequences()", "intent": "Return a dictionary of sequence names mapped to key lists .", "question_id": 5783}
{"snippet": "Dialect.quotechar", "intent": "A one-character string used to quote fields containing special characters, such as the delimiter or quotechar, or which contain new-line characters.", "question_id": 1727}
{"snippet": "Popen.poll()", "intent": "Check if child process has terminated .", "question_id": 9609}
{"snippet": "queue_listener.addHandler(hdlr)", "intent": "Adds the specified handler `hdlr` to this logger .", "question_id": 5580}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617}
{"snippet": "timedelta.total_seconds()", "intent": "Return the total number of seconds contained in the duration .", "question_id": 2217}
{"snippet": "bound_arguments.apply_defaults()", "intent": "Set default values for missing arguments .", "question_id": 5007}
{"snippet": "turtle.stamp()", "intent": "Stamp a copy of the turtle shape onto the canvas at the current turtle position .", "question_id": 10929}
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333}
{"snippet": "maildir.close()", "intent": "Maildir instances do not keep any open files and the underlying mailboxes do not support locking , so this method does nothing .", "question_id": 5766}
{"snippet": "stat_result.st_blksize", "intent": "\u201cPreferred\u201d blocksize for efficient file system I/O.", "question_id": 6936}
{"snippet": "float.is_integer()", "intent": "Return True if the float instance is finite with integral value , and False otherwise :", "question_id": 9148}
{"snippet": "Cookie.secure", "intent": "True if cookie should only be returned over a secure connection.", "question_id": 4562}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "header_registry.__getitem__(name)", "intent": "Construct and return a class to handle creating a `name` header .", "question_id": 3184}
{"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}
{"snippet": "modulefinder.ModuleFinder(excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6028}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "compileall.compile_file(fullname, optimize=-1)", "intent": "Compile the file with path `fullname` . `optimize` specifies the optimization level for the compiler .", "question_id": 1425}
{"snippet": "ZipFile.extractall(path=None, pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "question_id": 12823}
{"snippet": "OpenerDirector.open(url)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11837}
{"snippet": "asyncio.Semaphore(loop=None)", "intent": "A Semaphore object . With arguments `loop`.", "question_id": 583}
{"snippet": "xml.dom.WrongDocumentErr", "intent": "Raised when a node is inserted in a different document than it currently belongs to, and the implementation does not support migrating the node from one document to the other.", "question_id": 12395}
{"snippet": "pickle.dump(obj, file, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7365}
{"snippet": "asyncio.Queue(loop=None)", "intent": "A first in , first out ( FIFO ) queue . With arguments `loop`.", "question_id": 447}
{"snippet": "robot_file_parser.unsafe", "intent": "The UUID was not generated in a multiprocessing-safe way.", "question_id": 11935}
{"snippet": "doc_test_parser.parse(string)", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings .", "question_id": 2859}
{"snippet": "sys.dont_write_bytecode", "intent": "If this is true, Python won\u2019t try to write .pyc files on the import of source modules.", "question_id": 9780}
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824}
{"snippet": "mailcap.getcaps()", "intent": "Returns a dictionary mapping MIME types to a list of mailcap file entries .", "question_id": 5877}
{"snippet": "functools.reduce(function, iterable)", "intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . With arguments `iterable`.", "question_id": 4154}
{"snippet": "os.RWF_NOWAIT", "intent": "Do not wait for data which is not immediately available.", "question_id": 6786}
{"snippet": "multiprocessing.set_executable()", "intent": "Sets the path of the Python interpreter to use when starting a child process .", "question_id": 6228}
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763}
{"snippet": "test.support.TESTFN_UNICODE", "intent": "Set to a non-ASCII name for a temporary file.", "question_id": 10116}
{"snippet": "turtle.tracer(n=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11059}
{"snippet": "asyncio.StreamWriter", "intent": "Represents a writer object that provides APIs to write data to the IO stream.", "question_id": 511}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235}
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956}
{"snippet": "base_server.process_request(request, client_address)", "intent": "Calls finish_request ( ) to create an instance of the RequestHandlerClass . If desired , this function can create a new process or thread to handle the `request` ; the ForkingMixIn and ThreadingMixIn classes do this . With arguments `client_address`.", "question_id": 8779}
{"snippet": "locale.getdefaultlocale(envvars)", "intent": "Tries to determine the default locale settings and returns them as a tuple of the form ( language code , encoding ) . To maintain compatibility with other platforms , not only the LANG variable is tested , but a list of variables given as `envvars` parameter .", "question_id": 5373}
{"snippet": "asyncio.BaseProtocol", "intent": "Base protocol with methods that all protocols share.", "question_id": 426}
{"snippet": "ssl.HAS_NEVER_CHECK_COMMON_NAME", "intent": "Whether the OpenSSL library has built-in support not checking subject common name and SSLContext.hostname_checks_common_name is writeable.", "question_id": 8946}
{"snippet": "stringprep.in_table_c5(code)", "intent": "Determine whether `code` is in tableC.5 ( Surrogate codes ) .", "question_id": 9543}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "random.vonmisesvariate(mu, kappa)", "intent": "`mu` is the mean angle , expressed in radians between 0 and 2*pi , and `kappa` is the concentration parameter , which must be greater than or equal to zero .", "question_id": 7915}
{"snippet": "cursor.execute(sql)", "intent": "Executes an SQL statement . With arguments `sql`.", "question_id": 8841}
{"snippet": "curses.start_color()", "intent": "Must be called if the programmer wants to use colors , and before any other color manipulation routine is called .", "question_id": 1983}
{"snippet": "header_registry.__getitem__(name)", "intent": "Construct and return a class to handle creating a `name` header .", "question_id": 3184}
{"snippet": "message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If `replace` is False ( the default ) the header is moved to the end of the list of headers . With arguments `param`.", "question_id": 3004}
{"snippet": "dataclasses.fields(class_or_instance)", "intent": "Returns a tuple of Field objects that define the fields for this dataclass . With arguments `class_or_instance`.", "question_id": 2178}
{"snippet": "base_handler.setup_environ()", "intent": "Set the environ attribute to a fully-populated WSGI environment .", "question_id": 12259}
{"snippet": "Path.symlink_to(target, target_is_directory=False)", "intent": "Make this path a symbolic link to `target` . Under Windows , `target_is_directory` must be true ( default False ) if the link \u2019 s target is a directory .", "question_id": 7316}
{"snippet": "babyl.get_labels()", "intent": "Return a list of the names of all user-defined labels used in the mailbox .", "question_id": 5798}
{"snippet": "timeit.Timer()", "intent": "Class for timing execution speed of small code snippets .", "question_id": 10497}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "mime_version_header.minor", "intent": "The minor version number as an integer", "question_id": 3166}
{"snippet": "test.support.import_fresh_module(name)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10242}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931}
{"snippet": "tracemalloc.start()", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators .", "question_id": 10847}
{"snippet": "test_loader.errors", "intent": "A list of the non-fatal errors encountered while loading tests.", "question_id": 11490}
{"snippet": "socket.connect(address)", "intent": "Connect to a remote socket at `address` .", "question_id": 8676}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "html_diff.__init__(linejunk=None)", "intent": "Initializes instance of HtmlDiff . `linejunk` and `charjunk` are optional keyword arguments passed into ndiff ( ) ( used by HtmlDiff to generate the side by side HTML differences ) .", "question_id": 2601}
{"snippet": "ctypes.byref(obj, offset)", "intent": "Returns a light-weight pointer to `obj` , which must be an instance of a ctypes type . `offset` defaults to zero , and must be an integer that will be added to the internal pointer value .", "question_id": 1810}
{"snippet": "errno.ELIBMAX", "intent": "Attempting to link in too many shared libraries", "question_id": 3587}
{"snippet": "HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)", "intent": "Redirect to the Location : or URI : URL . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11851}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "auto.filename", "intent": "For exceptions that involve a file system path (such as open() or os.unlink()), filename is the file name passed to the function.", "question_id": 3657}
{"snippet": "timedelta.resolution", "intent": "The smallest possible difference between non-equal timedelta objects, timedelta(microseconds=1).", "question_id": 2216}
{"snippet": "socket.SocketType", "intent": "This is a Python type object that represents the socket object type.", "question_id": 8633}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}
{"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}
{"snippet": "tixCommand.tix_getbitmap(name)", "intent": "Locates a bitmap file of the `name` name.xpm or name in one of the bitmap directories ( see the tix_addbitmapdir ( ) method ) .", "question_id": 10583}
{"snippet": "executor.map(func, *iterables, timeout=None)", "intent": "Similar to map ( `func` , `*iterables` ) except : The returned iterator raises a concurrent.futures.TimeoutError if __next__ ( ) is called and the result isn \u2019 t available after `timeout` seconds from the original call to Executor.map ( ) .", "question_id": 1442}
{"snippet": "itertools.starmap(function, iterable)", "intent": "Make an iterator that computes the `function` using arguments obtained from the `iterable` .", "question_id": 5264}
{"snippet": "smtp_server.channel_class", "intent": "Override this in subclasses to use a custom SMTPChannel for managing SMTP clients.", "question_id": 8423}
{"snippet": "mh.get_sequences()", "intent": "Return a dictionary of sequence names mapped to key lists .", "question_id": 5783}
{"snippet": "audioop.ulaw2lin(fragment, width)", "intent": "Convert sound fragments in u-LAW encoding to linearly encoded sound fragments . u-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .", "question_id": 707}
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244}
{"snippet": "subprocess.check_output(args, shell=False)", "intent": "Run command with arguments and return its output . With arguments `args`, `shell`.", "question_id": 9682}
{"snippet": "base_http_request_handler.end_headers()", "intent": "Adds a blank line ( indicating the end of the HTTP headers in the response ) to the headers buffer and calls flush_headers ( ) .", "question_id": 4646}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "property(fdel=None)", "intent": "Return a property attribute . `fdel` is a function for deleting an attribute value .", "question_id": 4088}
{"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}
{"snippet": "NNTP.xhdr(hdr, str, file=None)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search . If the `file` parameter is supplied , then the output of the XHDR command is stored in a file .", "question_id": 6498}
{"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}
{"snippet": "timedelta.resolution", "intent": "The smallest possible difference between non-equal timedelta objects, timedelta(microseconds=1).", "question_id": 2216}
{"snippet": "json.JSONEncoder(allow_nan=True)", "intent": "Extensible JSON encoder for Python data structures . If `allow_nan` is true ( the default ) , then NaN , Infinity , and -Infinity will be encoded as such .", "question_id": 5326}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "completed_process.stdout", "intent": "Captured stdout from the child process.", "question_id": 9580}
{"snippet": "decimal.ROUND_UP", "intent": "Round away from zero.", "question_id": 2583}
{"snippet": "turtle.position()", "intent": "Return the turtle \u2019 s current location ( x , y ) ( as a Vec2D vector ) .", "question_id": 10936}
{"snippet": "completed_process.cmd", "intent": "Command that was used to spawn the child process.", "question_id": 9588}
{"snippet": "winreg.REG_BINARY", "intent": "Binary data in any form.", "question_id": 12174}
{"snippet": "turtle.onrelease(fun, btn=1)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`.", "question_id": 11024}
{"snippet": "TarFile.open()", "intent": "Alternative constructor .", "question_id": 9923}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "ZipFile.namelist()", "intent": "Return a list of archive members by name .", "question_id": 12805}
{"snippet": "cgi.print_environ()", "intent": "Format the shell environment in HTML .", "question_id": 1053}
{"snippet": "turtle.Vec2D(x, y)", "intent": "A two-dimensional vector class , used as a helper class for implementing turtle graphics . With arguments `x`, `y`.", "question_id": 11167}
{"snippet": "window.insdelln(nlines)", "intent": "Insert `nlines` lines into the specified window above the current line .", "question_id": 2075}
{"snippet": "profile.print_stats()", "intent": "Create a Stats object based on the current profile and print the results to stdout .", "question_id": 7682}
{"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "compileall.compile_file(fullname, legacy=False)", "intent": "Compile the file with path `fullname` . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1424}
{"snippet": "set.issubset(other)", "intent": "Test whether every element in the set is in `other` .", "question_id": 9439}
{"snippet": "json_decoder.raw_decode(s)", "intent": "Decode a JSON document from `s` ( a str beginning with a JSON document ) and return a 2-tuple of the Python representation and the index in s where the document ended .", "question_id": 5321}
{"snippet": "queue.get_nowait()", "intent": "Equivalent to get ( False ) .", "question_id": 6207}
{"snippet": "io.TextIOWrapper(buffer, newline=None)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` . `newline` controls how line endings are handled .", "question_id": 5149}
{"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847}
{"snippet": "test_case.setUpClass()", "intent": "A class method called before tests in an individual class are run .", "question_id": 11367}
{"snippet": "http.client.HTTP_PORT", "intent": "The default port for the HTTP protocol (always 80).", "question_id": 4424}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}
{"snippet": "window.syncdown()", "intent": "Touch each location in the window that has been touched in any of its ancestor windows .", "question_id": 2121}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}
{"snippet": "signal.SIG_BLOCK", "intent": "A possible value for the how parameter to pthread_sigmask() indicating that signals are to be blocked.", "question_id": 8382}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "dis.opname", "intent": "Sequence of operation names, indexable using the bytecode.", "question_id": 2742}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "asyncio.SafeChildWatcher", "intent": "This implementation avoids disrupting other code spawning processes by polling every process explicitly on a SIGCHLD signal.", "question_id": 388}
{"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}
{"snippet": "mime_types.types_map_inv", "intent": "Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types.", "question_id": 5963}
{"snippet": "mock.method_calls", "intent": "As well as tracking calls to themselves, mocks also track calls to methods and attributes, and their methods and attributes:", "question_id": 11594}
{"snippet": "socket_handler.close()", "intent": "Closes the socket .", "question_id": 5483}
{"snippet": "errno.EOVERFLOW", "intent": "Value too large for defined data type", "question_id": 3580}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009}
{"snippet": "PurePath.anchor", "intent": "The concatenation of the drive and root:", "question_id": 7246}
{"snippet": "memoryview.f_contiguous", "intent": "A bool indicating whether the memory is Fortran contiguous.", "question_id": 9429}
{"snippet": "crypt.methods", "intent": "A list of available password hashing algorithms, as crypt.METHOD_* objects.", "question_id": 1673}
{"snippet": "gettext.ngettext(singular, plural, n)", "intent": "Like gettext ( ) , but consider `plural` forms . If no translation is found , return `singular` if n is 1 ; return plural otherwise . If a translation is found , apply the plural formula to `n` , and return the resulting message ( some languages have more than two plural forms ) .", "question_id": 4218}
{"snippet": "stat.UF_NODUMP", "intent": "Do not dump the file.", "question_id": 9113}
{"snippet": "os.setgid(gid)", "intent": "Set the current process \u2019 group id . With arguments `gid`.", "question_id": 6695}
{"snippet": "config_parser.sections()", "intent": "Return a list of the sections available ; the default section is not included in the list .", "question_id": 1507}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "Match.groups()", "intent": "Return a tuple containing all the subgroups of the match , from 1 up to however many groups are in the pattern .", "question_id": 7999}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "uuid.uuid1(clock_seq=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `clock_seq` is given , it is used as the sequence number ; otherwise a random 14-bit sequence number is chosen .", "question_id": 11959}
{"snippet": "test_case.assertIn(first, second)", "intent": "Test that `first` is ( or is not ) in `second` .", "question_id": 11391}
{"snippet": "sqlite3.version_info", "intent": "The version number of this module, as a tuple of integers.", "question_id": 8792}
{"snippet": "shutil.which(cmd, mode=os.F_OK | os.X_OK)", "intent": "Return the `path` to an executable which would be run if the given `cmd` was called . `mode` is a permission mask passed to os.access ( ) , by default determining if the file exists and executable .", "question_id": 8346}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "decimal.Rounded", "intent": "Rounding occurred though possibly no information was lost.", "question_id": 2591}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}
{"snippet": "curses.start_color()", "intent": "Must be called if the programmer wants to use colors , and before any other color manipulation routine is called .", "question_id": 1983}
{"snippet": "errno.ENETUNREACH", "intent": "Network is unreachable", "question_id": 3606}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "tracemalloc.get_tracemalloc_memory()", "intent": "Get the memory usage in bytes of the tracemalloc module used to store traces of memory blocks .", "question_id": 10845}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499}
{"snippet": "fraction.__round__()", "intent": "The first version returns the nearest int to self , rounding half to even .", "question_id": 3875}
{"snippet": "email.policy.SMTP", "intent": "Suitable for serializing messages in conformance with the email RFCs.", "question_id": 3440}
{"snippet": "io.open(file)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`.", "question_id": 5051}
{"snippet": "shlex.shlex(punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8277}
{"snippet": "queue_listener.__init__()", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5594}
{"snippet": "context.minus(x)", "intent": "Minus corresponds to the unary prefix minus operator in Python . With arguments `x`.", "question_id": 2553}
{"snippet": "queue_listener.setLevel(level)", "intent": "Sets the threshold for this logger to `level` .", "question_id": 5566}
{"snippet": "profile.Profile(timer=None, subcalls=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument . With arguments `subcalls`.", "question_id": 7675}
{"snippet": "platform.python_version()", "intent": "Returns the Python version as string 'major.minor.patchlevel ' .", "question_id": 7478}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "set &= other & ...", "intent": "Update the set, keeping only elements found in it and all others.", "question_id": 9457}
{"snippet": "itertools.product(*iterables)", "intent": "Cartesian product of input iterables . With arguments `*iterables`.", "question_id": 5260}
{"snippet": "platform.libc_ver(chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7541}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}
{"snippet": "socketserver.ForkingTCPServer", "intent": "These classes are pre-defined using the mix-in classes.", "question_id": 8755}
{"snippet": "decimal.Decimal()", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2391}
{"snippet": "bytes.isalnum()", "intent": "Return true if all bytes in the sequence are alphabetical ASCII characters or ASCII decimal digits and the sequence is not empty , false otherwise .", "question_id": 9381}
{"snippet": "zipfile.PyZipFile(file)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`.", "question_id": 12846}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "smtplib.SMTPAuthenticationError", "intent": "SMTP authentication went wrong.", "question_id": 8507}
{"snippet": "loop.get_task_factory()", "intent": "Return a task factory or None if the default one is in use .", "question_id": 201}
{"snippet": "turtle.onkey(fun, key)", "intent": "Bind `fun` to key-release event of `key` .", "question_id": 11067}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615}
{"snippet": "SMTP.auth(mechanism, authobject)", "intent": "Issue an SMTP AUTH command for the specified authentication `mechanism` , and handle the challenge response via `authobject` .", "question_id": 8524}
{"snippet": "DefaultCookiePolicy.strict_rfc2965_unverifiable", "intent": "Follow RFC 2965 rules on unverifiable transactions (usually, an unverifiable transaction is one resulting from a redirect or a request for an image hosted on another site).", "question_id": 4547}
{"snippet": "header.encode(\\t', splitchars=';, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3135}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "Unpacker.unpack_float()", "intent": "Unpacks a single-precision floating point number .", "question_id": 12290}
{"snippet": "i_pv4_interface.ip", "intent": "The address (IPv4Address) without network information.", "question_id": 5225}
{"snippet": "xml.sax.xmlreader.AttributesImpl(attrs)", "intent": "This is an implementation of the Attributes interface ( see section The Attributes Interface ) . Objects of this class should be instantiated by readers ; `attrs` must be a dictionary-like object containing a mapping from attribute names to attribute values .", "question_id": 12611}
{"snippet": "controller.open(url, new=0, autoraise=True)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible . With arguments `autoraise`.", "question_id": 12117}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "xmlparser.ParseFile(file)", "intent": "Parse XML data reading from the object `file` .", "question_id": 7734}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}
{"snippet": "os.RWF_HIPRI", "intent": "High priority read/write.", "question_id": 6787}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "profile.Profile(timer=None)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument .", "question_id": 7670}
{"snippet": "parameter.kind", "intent": "Describes how argument values are bound to the parameter.", "question_id": 5001}
{"snippet": "@staticmethod", "intent": "Transform a method into a static method.", "question_id": 4112}
{"snippet": "timezone.utc", "intent": "The UTC timezone, timezone(timedelta(0)).", "question_id": 2363}
{"snippet": "xmlparser.ParseFile(file)", "intent": "Parse XML data reading from the object `file` .", "question_id": 7734}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466}
{"snippet": "base_selector.modify(fileobj, events)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8218}
{"snippet": "@importlib.util.module_for_loader", "intent": "A decorator for importlib.abc.Loader.load_module() to handle selecting the proper module object to load with.", "question_id": 4931}
{"snippet": "locale.D_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent a date in a locale-specific way.", "question_id": 5356}
{"snippet": "wave.open(file, mode=None)", "intent": "If `file` is a string , open the file by that name , otherwise treat it as a file-like object . `mode` can be :", "question_id": 12047}
{"snippet": "ssl.match_hostname(cert, hostname)", "intent": "Verify that `cert` ( in decoded format as returned by SSLSocket.getpeercert ( ) ) matches the given `hostname` .", "question_id": 8890}
{"snippet": "sys.is_finalizing()", "intent": "Return True if the Python interpreter is shutting down , False otherwise .", "question_id": 9819}
{"snippet": "Match.group()", "intent": "Returns one or more subgroups of the match .", "question_id": 7997}
{"snippet": "ctypes.wstring_at(address)", "intent": "This function returns the wide character string starting at memory `address` address as a string .", "question_id": 1840}
{"snippet": "watched_file_handler.reopenIfNeeded()", "intent": "Checks to see if the file has changed .", "question_id": 5448}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "shlex.escapedquotes", "intent": "Characters in quotes that will interpret escape characters defined in escape.", "question_id": 8299}
{"snippet": "mailbox.clear()", "intent": "Delete all messages from the mailbox .", "question_id": 5745}
{"snippet": "DefaultCookiePolicy.DomainStrictNonDomain", "intent": "Cookies that did not explicitly specify a domain cookie-attribute can only be returned to a domain equal to the domain that set the cookie (eg.", "question_id": 4553}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670}
{"snippet": "writer.send_line_break()", "intent": "Break the current line .", "question_id": 3847}
{"snippet": "cgi.test()", "intent": "Robust test CGI script , usable as main program .", "question_id": 1052}
{"snippet": "bytes_io.getbuffer()", "intent": "Return a readable and writable view over the contents of the buffer without copying them .", "question_id": 5111}
{"snippet": "timer.repeat(number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) .", "question_id": 10513}
{"snippet": "AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "Handle an authentication request by getting a user/password pair , and re-trying the request . `authreq` should be the name of the header where the information about the realm is included in the request , `host` specifies the URL and path to authenticate for , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11865}
{"snippet": "FileCookieJar.load()", "intent": "Load cookies from a file .", "question_id": 4506}
{"snippet": "shlex.shlex(punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8277}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "InteractiveConsole.interact(banner=None, exitmsg=None)", "intent": "Closely emulate the interactive Python console . The optional `banner` argument specify the banner to print before the first interaction ; by default it prints a banner similar to the one printed by the standard Python interpreter , followed by the class name of the console object in parentheses ( so as not to confuse this with the real interpreter \u2013 since it \u2019 s so close ! The optional `exitmsg` argument specifies an exit message printed when exiting .", "question_id": 1187}
{"snippet": "FileExistsError", "intent": "Raised when trying to create a file or directory which already exists.", "question_id": 3693}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "statistics.mean(data)", "intent": "Return the sample arithmetic mean of `data` which can be a sequence or iterator .", "question_id": 9125}
{"snippet": "sys.getrecursionlimit()", "intent": "Return the current value of the recursion limit , the maximum depth of the Python interpreter stack .", "question_id": 9801}
{"snippet": "dumbdbm.sync()", "intent": "Synchronize the on-disk directory and data files .", "question_id": 2389}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "tkinter.tix.DirList", "intent": "The DirList widget displays a list view of a directory, its previous directories and its sub-directories.", "question_id": 10563}
{"snippet": "parameter.kind", "intent": "Describes how argument values are bound to the parameter.", "question_id": 5001}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136}
{"snippet": "queue_handler.emit(record)", "intent": "Enqueues the result of preparing the LogRecord . This can result in the `record` silently being dropped ( if logging.raiseExceptions is False ) or a message printed to sys.stderr ( if logging.raiseExceptions is True ) .", "question_id": 5554}
{"snippet": "reprlib.Repr", "intent": "Class which provides formatting services useful in implementing functions similar to the built-in repr(); size limits for  different object types are added to avoid the generation of representations which are excessively long.", "question_id": 8050}
{"snippet": "modulefinder.ModuleFinder(path=None)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used .", "question_id": 6026}
{"snippet": "dispatcher.handle_connect()", "intent": "Called when the active opener \u2019 s socket actually makes a connection .", "question_id": 656}
{"snippet": "statistics.StatisticsError", "intent": "Subclass of ValueError for statistics-related exceptions.", "question_id": 9141}
{"snippet": "decimal.Subnormal", "intent": "Exponent was lower than Emin prior to rounding.", "question_id": 2592}
{"snippet": "symbol_table.get_identifiers()", "intent": "Return a list of names of symbols in this table .", "question_id": 9742}
{"snippet": "ScrolledText.frame", "intent": "The frame which surrounds the text and scroll bar widgets.", "question_id": 10542}
{"snippet": "str.rfind(sub, start, end)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9226}
{"snippet": "locale.atoi(string)", "intent": "Converts a `string` to an integer , following the LC_NUMERIC conventions .", "question_id": 5403}
{"snippet": "kevent.data", "intent": "Filter specific data.", "question_id": 8207}
{"snippet": "RuntimeWarning", "intent": "Base class for warnings about dubious runtime behavior.", "question_id": 3706}
{"snippet": "queue.SimpleQueue", "intent": "Constructor for an unbounded FIFO queue.", "question_id": 7843}
{"snippet": "TarInfo.tobuf()", "intent": "Create a string buffer from a TarInfo object .", "question_id": 9973}
{"snippet": "tarfile.ENCODING", "intent": "The default character encoding: 'utf-8' on Windows, the value returned by sys.getfilesystemencoding() otherwise.", "question_id": 9908}
{"snippet": "env_builder.setup_scripts(context)", "intent": "Installs activation scripts appropriate to the platform into the virtual environment . With arguments `context`.", "question_id": 11986}
{"snippet": "asyncio.SubprocessTransport(BaseTransport)", "intent": "An abstraction to represent a connection between a parent and its child OS process . With arguments `BaseTransport`.", "question_id": 395}
{"snippet": "ssl.OP_SINGLE_DH_USE", "intent": "Prevents re-use of the same DH key for distinct SSL sessions.", "question_id": 8939}
{"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757}
{"snippet": "decimal.as_tuple()", "intent": "Return a named tuple representation of the number : DecimalTuple ( sign , digits , exponent ) .", "question_id": 2397}
{"snippet": "startupinfo.dwFlags", "intent": "A bit field that determines whether certain STARTUPINFO attributes are used when the process creates a window.", "question_id": 9635}
{"snippet": "msilib.add_tables(database, module)", "intent": "Add all table content from `module` to `database` .", "question_id": 6065}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351}
{"snippet": "decimal.logical_and(other)", "intent": "logical_and ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2435}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319}
{"snippet": "test_loader.sortTestMethodsUsing", "intent": "Function to be used to compare method names when sorting them in getTestCaseNames() and all the loadTestsFrom*() methods.", "question_id": 11504}
{"snippet": "window.refresh(pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol)", "intent": "Update the display immediately ( sync actual screen with previous drawing/deleting methods ) . `pminrow` and `pmincol` specify the upper left-hand corner of the rectangle to be displayed in the pad . `sminrow` , `smincol` , `smaxrow` , and `smaxcol` specify the edges of the rectangle to be displayed on the screen .", "question_id": 2106}
{"snippet": "turtle.shapetransform()", "intent": "Set or return the current transformation matrix of the turtle shape .", "question_id": 11008}
{"snippet": "ssl.enum_certificates(store_name)", "intent": "Retrieve certificates from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8899}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_REP", "intent": "The model must occur zero or more times, as for A*.", "question_id": 7786}
{"snippet": "mock.reset_mock(side_effect=False)", "intent": "The reset_mock method resets all the call attributes on a mock object : Note that reset_mock ( ) doesn \u2019 t clear the return value , `side_effect` or any child attributes you have set using normal assignment by default .", "question_id": 11580}
{"snippet": "xml.parsers.expat.errors.codes", "intent": "A dictionary mapping numeric error codes to their string descriptions.", "question_id": 7787}
{"snippet": "decimal.as_integer_ratio()", "intent": "Return a pair ( n , d ) of integers that represent the given Decimal instance as a fraction , in lowest terms and with a positive denominator :", "question_id": 2396}
{"snippet": "coverage_results.update(other)", "intent": "Merge in data from another CoverageResults object . With arguments `other`.", "question_id": 10724}
{"snippet": "enum.unique()", "intent": "Enum class decorator that ensures only one name is bound to any one value .", "question_id": 3503}
{"snippet": "asyncio.BoundedSemaphore()", "intent": "A bounded semaphore object .", "question_id": 588}
{"snippet": "ctypes.Union(*args, **kw)", "intent": "Abstract base class for unions in native byte order . With arguments `*args`, `**kw`.", "question_id": 1886}
{"snippet": "fraction.__floor__()", "intent": "Returns the greatest int < = self .", "question_id": 3873}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "widget.state()", "intent": "Modify or inquire widget state .", "question_id": 10595}
{"snippet": "inspect.getcallargs(func, *args, **kwds)", "intent": "Bind the args and kwds to the argument names of the Python function or method `func` , as if it was called with them . whenever func ( `*args` , `**kwds` ) would raise an exception because of incompatible signature , an exception of the same type and the same or similar message is raised .", "question_id": 5019}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}
{"snippet": "SIG*", "intent": "All the signal numbers are defined symbolically.", "question_id": 8375}
{"snippet": "getpass.getuser()", "intent": "Return the \u201c login name \u201d of the user .", "question_id": 4209}
{"snippet": "gc.DEBUG_UNCOLLECTABLE", "intent": "Print information of uncollectable objects found (objects which are not reachable but cannot be freed by the collector).", "question_id": 4191}
{"snippet": "sys.getrecursionlimit()", "intent": "Return the current value of the recursion limit , the maximum depth of the Python interpreter stack .", "question_id": 9801}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196}
{"snippet": "structure._fields_", "intent": "A sequence defining the structure fields.", "question_id": 1890}
{"snippet": "tkinter.tix.LabelEntry", "intent": "The LabelEntry widget packages an entry widget and a label into one mega widget.", "question_id": 10556}
{"snippet": "base_handler.os_environ", "intent": "The default environment variables to be included in every request\u2019s WSGI environment.", "question_id": 12256}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this turtle .", "question_id": 11019}
{"snippet": "set.difference(*others)", "intent": "Return a new set with elements in the set that are not in the others . With arguments `*others`.", "question_id": 9449}
{"snippet": "stat.S_IMODE(mode)", "intent": "Return the portion of the file \u2019 s `mode` that can be set by os.chmod ( ) \u2014that is , the file \u2019 s permission bits , plus the sticky bit , set-group-id , and set-user-id bits ( on systems that support them ) .", "question_id": 9071}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}
{"snippet": "Decompress.decompress(data)", "intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string .", "question_id": 12934}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "logging.getLevelName(level)", "intent": "Returns the textual representation of logging `level` level .", "question_id": 5647}
{"snippet": "ssl.PROTOCOL_TLS", "intent": "Selects the highest protocol version that both the client and server support.", "question_id": 8921}
{"snippet": "errno.EMLINK", "intent": "Too many links", "question_id": 3536}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "CookieJar.clear_session_cookies()", "intent": "Discard all session cookies .", "question_id": 4497}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "finder.find_module(fullname)", "intent": "An abstract method for finding a loader for the specified module . With arguments `fullname`.", "question_id": 4800}
{"snippet": "resource_reader.resource_path(resource)", "intent": "Returns the file system path to the `resource` .", "question_id": 4820}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "test.support.check__all__(test_case, module, blacklist=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `blacklist` argument can be a set of names that must not be treated as part of the public API even though their names indicate otherwise . With arguments `test_case`.", "question_id": 10280}
{"snippet": "os.major(device)", "intent": "Extract the `device` major number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6882}
{"snippet": "message.get_params()", "intent": "Return the message \u2019 s Content-Type parameters , as a list .", "question_id": 2983}
{"snippet": "gettext.ngettext(singular, plural, n)", "intent": "Like gettext ( ) , but consider `plural` forms . If no translation is found , return `singular` if n is 1 ; return plural otherwise . If a translation is found , apply the plural formula to `n` , and return the resulting message ( some languages have more than two plural forms ) .", "question_id": 4218}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466}
{"snippet": "_func_ptr.errcheck", "intent": "Assign a Python function or another callable to this attribute.", "question_id": 1789}
{"snippet": "json.JSONDecoder()", "intent": "Simple JSON decoder .", "question_id": 5310}
{"snippet": "tkinter.tix.PanedWindow", "intent": "The PanedWindow widget allows the user to interactively manipulate the sizes of several panes.", "question_id": 10574}
{"snippet": "enum.auto", "intent": "Instances are replaced with an appropriate value for Enum members.", "question_id": 3504}
{"snippet": "Path.touch()", "intent": "Create a file at this given path .", "question_id": 7317}
{"snippet": "smtp_channel.conn", "intent": "Holds the socket object connecting to the client.", "question_id": 8438}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "venv.EnvBuilder()", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation :", "question_id": 11972}
{"snippet": "io_base.readline()", "intent": "Read and return one line from the stream .", "question_id": 5070}
{"snippet": "cgi.test()", "intent": "Robust test CGI script , usable as main program .", "question_id": 1052}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415}
{"snippet": "counter.elements()", "intent": "Return an iterator over elements repeating each as many times as its count .", "question_id": 1342}
{"snippet": "json_decoder.raw_decode(s)", "intent": "Decode a JSON document from `s` ( a str beginning with a JSON document ) and return a 2-tuple of the Python representation and the index in s where the document ended .", "question_id": 5321}
{"snippet": "asyncio.BaseProtocol", "intent": "Base protocol with methods that all protocols share.", "question_id": 426}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "email_policy.fold(name, value)", "intent": "Header folding is controlled by the refold_source policy setting . A `value` is considered to be a \u2018 source value \u2019 if and only if it does not have a `name` attribute ( having a name attribute means it is a header object of some sort ) .", "question_id": 3437}
{"snippet": "copy.deepcopy(x)", "intent": "Return a deep copy of `x` .", "question_id": 1663}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "env_builder.setup_python(context)", "intent": "Creates a copy or symlink to the Python executable in the environment . With arguments `context`.", "question_id": 11985}
{"snippet": "window.notimeout(flag)", "intent": "If `flag` is True , escape sequences will not be timed out .", "question_id": 2097}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "Unpacker.unpack_fstring(n)", "intent": "Unpacks and returns a fixed length string . `n` is the number of characters expected .", "question_id": 12292}
{"snippet": "ctypes.pythonapi", "intent": "An instance of PyDLL that exposes Python C API functions as attributes.", "question_id": 1785}
{"snippet": "itertools.cycle(iterable)", "intent": "Make an iterator returning elements from the `iterable` and saving a copy of each .", "question_id": 5250}
{"snippet": "simple_http_request_handler.directory", "intent": "If not specified, the directory to serve is the current working directory.", "question_id": 4663}
{"snippet": "turtle.ontimer(fun)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11079}
{"snippet": "struct.error", "intent": "Exception raised on various occasions; argument is a string describing what is wrong.", "question_id": 9550}
{"snippet": "glob.escape(pathname)", "intent": "Escape all special characters ( ' ? With arguments `pathname`.", "question_id": 4268}
{"snippet": "wave.open(file)", "intent": "If `file` is a string , open the file by that name , otherwise treat it as a file-like object .", "question_id": 12046}
{"snippet": "textwrap.indent(text, prefix)", "intent": "Add `prefix` to the beginning of selected lines in `text` .", "question_id": 10324}
{"snippet": "message.get_boundary()", "intent": "Return the value of the boundary parameter of the Content-Type header of the message , or `failobj` if either the header is missing , or has no boundary parameter .", "question_id": 3019}
{"snippet": "counter.elements()", "intent": "Return an iterator over elements repeating each as many times as its count .", "question_id": 1342}
{"snippet": "queue.cancel_join_thread()", "intent": "Prevent join_thread ( ) from blocking .", "question_id": 6210}
{"snippet": "asyncio.PriorityQueue", "intent": "A variant of Queue; retrieves entries in priority order (lowest first).", "question_id": 459}
{"snippet": "symbol_table.get_id()", "intent": "Return the table \u2019 s identifier .", "question_id": 9735}
{"snippet": "decimal.compare_signal(other)", "intent": "This operation is identical to the compare ( ) method , except that all NaNs signal . With arguments `other`.", "question_id": 2401}
{"snippet": "timedelta.total_seconds()", "intent": "Return the total number of seconds contained in the duration .", "question_id": 2217}
{"snippet": "window.standend()", "intent": "Turn off the standout attribute .", "question_id": 2115}
{"snippet": "netrc.hosts", "intent": "Dictionary mapping host names to (login, account, password) tuples.", "question_id": 6389}
{"snippet": "SSLSocket.server_side", "intent": "A boolean which is True for server-side sockets and False for client-side sockets.", "question_id": 8991}
{"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042}
{"snippet": "errno.EFBIG", "intent": "File too large", "question_id": 3532}
{"snippet": "cmath.nanj", "intent": "Complex number with zero real part and NaN imaginary part.", "question_id": 1126}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "itertools.takewhile(predicate, iterable)", "intent": "Make an iterator that returns elements from the `iterable` as long as the `predicate` is true .", "question_id": 5265}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "SSLContext.sni_callback", "intent": "Register a callback function that will be called after the TLS Client Hello handshake message has been received by the SSL/TLS server when the TLS client specifies a server name indication.", "question_id": 9018}
{"snippet": "queue_listener.emit(record)", "intent": "Do whatever it takes to actually log the specified logging `record` .", "question_id": 5609}
{"snippet": "null_handler.createLock()", "intent": "This method returns None for the lock , since there is no underlying I/O to which access needs to be serialized .", "question_id": 5439}
{"snippet": "os.spawnle(mode, path, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7054}
{"snippet": "datetime.astimezone()", "intent": "Return a datetime object with new tzinfo attribute `tz` , adjusting the date and time data so the result is the same UTC time as self , but in tz \u2019 s local time .", "question_id": 2294}
{"snippet": "weakref.ref(object)", "intent": "Return a weak reference to `object` .", "question_id": 12075}
{"snippet": "i_pv4_network.with_netmask", "intent": "A string representation of the network, with the mask in net mask notation.", "question_id": 5201}
{"snippet": "winreg.HKEY_PERFORMANCE_DATA", "intent": "Registry entries subordinate to this key allow you to access performance data.", "question_id": 12159}
{"snippet": "typing.AsyncGenerator(AsyncIteratorT_co)", "intent": "An async generator can be annotated by the generic type AsyncGenerator [ YieldType , SendType ] . With arguments `AsyncIteratorT_co`.", "question_id": 11313}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "random.choices(population, weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7896}
{"snippet": "Telnet.expect(list)", "intent": "Read until one from a `list` of a regular expressions matches .", "question_id": 10030}
{"snippet": "xmlrpc.client.dumps(params, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12702}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "os.readv(fd, buffers)", "intent": "Read from a file descriptor `fd` into a number of mutable bytes-like objects `buffers` .", "question_id": 6805}
{"snippet": "fileinput.lineno()", "intent": "Return the cumulative line number of the line that has just been read .", "question_id": 3794}
{"snippet": "Morsel.setdefault(key)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) .", "question_id": 4611}
{"snippet": "termios.tcsetattr(fd, when, attributes)", "intent": "Set the tty `attributes` for file descriptor `fd` from the attributes , which is a list like the one returned by tcgetattr ( ) . The `when` argument determines when the attributes are changed : TCSANOW to change immediately , TCSADRAIN to change after transmitting all queued output , or TCSAFLUSH to change after transmitting all queued output and discarding all queued input .", "question_id": 10103}
{"snippet": "zlib.compressobj()", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once .", "question_id": 12907}
{"snippet": "Panel.move(y, x)", "intent": "Move the panel to the screen coordinates ( `y` , `x` ) .", "question_id": 2150}
{"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`.", "question_id": 64}
{"snippet": "base_handler.sendfile()", "intent": "Override to implement platform-specific file transmission .", "question_id": 12267}
{"snippet": "SIG*", "intent": "All the signal numbers are defined symbolically.", "question_id": 8375}
{"snippet": "poplib.error_proto", "intent": "Exception raised on any errors from this module (errors from socket module are not caught).", "question_id": 7600}
{"snippet": "sys._getframe()", "intent": "Return a frame object from the call stack .", "question_id": 9806}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "logging.getLogger()", "intent": "Return a logger with the specified `name` or , if name is None , return a logger which is the root logger of the hierarchy .", "question_id": 5633}
{"snippet": "platform.python_compiler()", "intent": "Returns a string identifying the compiler used for compiling Python .", "question_id": 7474}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "set ^= other", "intent": "Update the set, keeping only elements found in either set, but not in both.", "question_id": 9461}
{"snippet": "numbers.Integral", "intent": "Subtypes Rational and adds a conversion to int.", "question_id": 6512}
{"snippet": "ZipFile.extractall(pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "question_id": 12821}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "context.divmod(x, y)", "intent": "Divides two numbers and returns the integer part of the result . With arguments `x`, `y`.", "question_id": 2529}
{"snippet": "executor.map(func, *iterables)", "intent": "Similar to map ( `func` , `*iterables` ) except :", "question_id": 1441}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "modulefinder.ReplacePackage(oldname, newname)", "intent": "Allows specifying that the module named `oldname` is in fact the package named `newname` .", "question_id": 6024}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra)", "intent": "Element class . `tag` is the element name . With arguments `**extra`.", "question_id": 12477}
{"snippet": "date.isocalendar()", "intent": "Return a 3-tuple , ( ISO year , ISO week number , ISO weekday ) .", "question_id": 2241}
{"snippet": "math.ceil(x)", "intent": "Return the ceiling of `x` , the smallest integer greater than or equal to x .", "question_id": 5885}
{"snippet": "Dialect.quotechar", "intent": "A one-character string used to quote fields containing special characters, such as the delimiter or quotechar, or which contain new-line characters.", "question_id": 1727}
{"snippet": "difflib.SequenceMatcher", "intent": "This is a flexible class for comparing pairs of sequences of any type, so long as the sequence elements are hashable.", "question_id": 2595}
{"snippet": "date.day", "intent": "Between 1 and the number of days in the given month of the given year.", "question_id": 2228}
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "BaseCookie.js_output(attrs=None)", "intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP headers was sent . The meaning for `attrs` is the same as in output ( ) .", "question_id": 4593}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "subprocess.CalledProcessError", "intent": "Subclass of SubprocessError, raised when a process run by check_call() or check_output() returns a non-zero exit status.", "question_id": 9593}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "tabnanny.verbose", "intent": "Flag indicating whether to print verbose messages.", "question_id": 9886}
{"snippet": "async_result.successful()", "intent": "Return whether the call completed without raising an exception .", "question_id": 6365}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "kevent.udata", "intent": "User defined value.", "question_id": 8208}
{"snippet": "protocol_error.url", "intent": "The URI or URL that triggered the error.", "question_id": 12693}
{"snippet": "RuntimeError", "intent": "Raised when an error is detected that doesn\u2019t fall in any of the other categories.", "question_id": 3662}
{"snippet": "concurrent.futures.wait(fs, timeout=None)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `timeout` can be used to control the maximum number of seconds to wait before returning .", "question_id": 1481}
{"snippet": "turtle.begin_poly()", "intent": "Start recording the vertices of a polygon .", "question_id": 11031}
{"snippet": "cursor.rowcount", "intent": "Although the Cursor class of the sqlite3 module implements this attribute, the database engine\u2019s own support for the determination of \u201crows affected\u201d/\u201drows selected\u201d is quirky.", "question_id": 8849}
{"snippet": "itertools.cycle(iterable)", "intent": "Make an iterator returning elements from the `iterable` and saving a copy of each .", "question_id": 5250}
{"snippet": "os.chown(path, uid, gid)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` .", "question_id": 6839}
{"snippet": "mailbox.get_string(key)", "intent": "Return a string representation of the message corresponding to `key` , or raise a KeyError exception if no such message exists .", "question_id": 5741}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "base_selector.modify(fileobj, events)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8218}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "queue.cancel_join_thread()", "intent": "Prevent join_thread ( ) from blocking .", "question_id": 6210}
{"snippet": "window.clrtoeol()", "intent": "Erase from cursor to the end of the line .", "question_id": 2037}
{"snippet": "formatter.vformat(format_string, args, kwargs)", "intent": "This function does the actual work of formatting . With arguments `format_string`, `args`, `kwargs`.", "question_id": 9518}
{"snippet": "base_request_handler.handle()", "intent": "This function must do all the work required to service a request .", "question_id": 8785}
{"snippet": "test.support.patch(test_instance, object_to_patch, attr_name, new_value)", "intent": "Override object_to_patch.attr_name with `new_value` . Also add cleanup procedure to `test_instance` to restore `object_to_patch` for `attr_name` .", "question_id": 10269}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "cmd.Cmd()", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework .", "question_id": 1127}
{"snippet": "test.support.script_helper.run_python_until_end(*args, **env_vars)", "intent": "Set up the environment based on env_vars for running the interpreter in a subprocess . With arguments `*args`, `**env_vars`.", "question_id": 10300}
{"snippet": "ast.NodeVisitor", "intent": "A node visitor base class that walks the abstract syntax tree and calls a visitor function for every node found.", "question_id": 159}
{"snippet": "typing.IO", "intent": "Generic type IO[AnyStr] and its subclasses TextIO(IO[str]) and BinaryIO(IO[bytes]) represent the types of I/O streams such as returned by open().", "question_id": 11315}
{"snippet": "turtle.shapetransform()", "intent": "Set or return the current transformation matrix of the turtle shape .", "question_id": 11008}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730}
{"snippet": "xmlparser.ErrorColumnNumber", "intent": "Column number at which an error occurred.", "question_id": 7750}
{"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204}
{"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343}
{"snippet": "asyncio.Semaphore(value=1, loop=None)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) . With arguments `loop`.", "question_id": 584}
{"snippet": "message.walk()", "intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "question_id": 3027}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328}
{"snippet": "formatter.format(format_string, *args, **kwargs)", "intent": "The primary API method . With arguments `format_string`, `*args`, `**kwargs`.", "question_id": 9517}
{"snippet": "fraction.numerator", "intent": "Numerator of the Fraction in lowest term.", "question_id": 3867}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201}
{"snippet": "test.support.TEST_HTTP_URL", "intent": "Define the URL of a dedicated HTTP server for the network tests.", "question_id": 10134}
{"snippet": "xml.sax.handler.EntityResolver", "intent": "Basic interface for resolving entities.", "question_id": 12566}
{"snippet": "tkinter.tix.Tree", "intent": "The Tree widget can be used to display hierarchical data in a tree form.", "question_id": 10572}
{"snippet": "sqlite3.register_adapter(type, callable)", "intent": "Registers a `callable` to convert the custom Python `type` type into one of SQLite \u2019 s supported types .", "question_id": 8800}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "ftplib.FTP_TLS(host='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `host`.", "question_id": 3889}
{"snippet": "context.minus(x)", "intent": "Minus corresponds to the unary prefix minus operator in Python . With arguments `x`.", "question_id": 2553}
{"snippet": "shlex.shlex(infile=None, punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The second optional argument is a filename string , which sets the initial value of the `infile` attribute . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8282}
{"snippet": "headers.get_all(name)", "intent": "Return a list of all the values for the named header . If no fields exist with the given `name` , returns an empty list .", "question_id": 12221}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "ctypes.c_longdouble", "intent": "Represents the C long double datatype.", "question_id": 1859}
{"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "test.support.SaveSignals", "intent": "Class to save and restore signal handlers registered by the Python signal handler.", "question_id": 10292}
{"snippet": "mmap.move(dest, src, count)", "intent": "Copy the `count` bytes starting at offset `src` to the destination index `dest` .", "question_id": 6008}
{"snippet": "calendar.monthrange(year, month)", "intent": "Returns weekday of first day of the `month` and number of days in month , for the specified `year` and month .", "question_id": 991}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "platform.linux_distribution('debian', 'redhat', 'mandrake', ...), supported_dists=('SuSE')", "intent": "Tries to determine the name of the Linux OS distribution name . `supported_dists` may be given to define the set of Linux distributions to look for . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`.", "question_id": 7531}
{"snippet": "context.subtract(x, y)", "intent": "Return the difference between `x` and `y` .", "question_id": 2572}
{"snippet": "SMTP.verify(address)", "intent": "Check the validity of an `address` on this server using SMTP VRFY .", "question_id": 8521}
{"snippet": "imp.C_EXTENSION", "intent": "The module was found as dynamically loadable shared library.", "question_id": 4776}
{"snippet": "fileinput.input()", "intent": "Create an instance of the FileInput class .", "question_id": 3782}
{"snippet": "site.USER_SITE", "intent": "Path to the user site-packages for the running Python.", "question_id": 8404}
{"snippet": "xml.etree.ElementTree.ProcessingInstruction(target, text=None)", "intent": "PI element factory . `target` is a string containing the PI target . `text` is a string containing the PI contents , if given .", "question_id": 12449}
{"snippet": "file_loader.load_module(fullname)", "intent": "Calls super \u2019 s load_module ( ) . With arguments `fullname`.", "question_id": 4838}
{"snippet": "snapshot.filter_traces(filters)", "intent": "Create a new Snapshot instance with a filtered traces sequence , `filters` is a list of DomainFilter and Filter instances .", "question_id": 10874}
{"snippet": "signal.SIG_SETMASK", "intent": "A possible value for the how parameter to pthread_sigmask() indicating that the signal mask is to be replaced.", "question_id": 8384}
{"snippet": "msilib.UuidCreate()", "intent": "Return the string representation of a new unique identifier .", "question_id": 6059}
{"snippet": "operator.indexOf(a, b)", "intent": "Return the index of the first of occurrence of `b` in `a` .", "question_id": 6577}
{"snippet": "POP3.top(which, howmuch)", "intent": "Retrieves the message header plus `howmuch` lines of the message after the header of message number `which` .", "question_id": 7616}
{"snippet": "InteractiveConsole.resetbuffer()", "intent": "Remove any unhandled source text from the input buffer .", "question_id": 1189}
{"snippet": "async_chat.push_with_producer(producer)", "intent": "Takes a `producer` object and adds it to the producer queue associated with the channel .", "question_id": 176}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "time.CLOCK_HIGHRES", "intent": "The Solaris OS has a CLOCK_HIGHRES timer that attempts to use an optimal hardware source, and may give close to nanosecond resolution.", "question_id": 10464}
{"snippet": "asyncio.SelectorEventLoop", "intent": "An event loop based on the selectors module.", "question_id": 342}
{"snippet": "memoryview(obj)", "intent": "Create a memoryview that references `obj` .", "question_id": 9411}
{"snippet": "signal.sigtimedwait(sigset, timeout)", "intent": "Like sigwaitinfo ( ) , but takes an additional `timeout` argument specifying a timeout . With arguments `sigset`.", "question_id": 8401}
{"snippet": "email_policy.fold(name, value)", "intent": "Header folding is controlled by the refold_source policy setting . A `value` is considered to be a \u2018 source value \u2019 if and only if it does not have a `name` attribute ( having a name attribute means it is a header object of some sort ) .", "question_id": 3437}
{"snippet": "inspect.CO_OPTIMIZED", "intent": "The code object is optimized, using fast locals.", "question_id": 5040}
{"snippet": "counter.subtract(iterable-or-mapping)", "intent": "Elements are subtracted from an iterable or from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1345}
{"snippet": "stat.ST_SIZE", "intent": "Size in bytes of a plain file; amount of data waiting on some special files.", "question_id": 9080}
{"snippet": "sys.implementation", "intent": "An object containing information about the implementation of the currently running Python interpreter.", "question_id": 9815}
{"snippet": "test_result.shouldStop", "intent": "Set to True when the execution of tests should stop by stop().", "question_id": 11513}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF", "intent": "An entity reference contained another reference to the same entity; possibly via a different name, and possibly indirectly.", "question_id": 7800}
{"snippet": "binhex.Error", "intent": "Exception raised when something can\u2019t be encoded using the binhex format (for example, a filename is too long to fit in the filename field), or when input is not properly encoded binhex data.", "question_id": 851}
{"snippet": "stringprep.in_table_c3(code)", "intent": "Determine whether `code` is in tableC.3 ( Private use ) .", "question_id": 9541}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370}
{"snippet": "urllib.request.ProxyHandler()", "intent": "Cause requests to go through a proxy .", "question_id": 11784}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_SEQ", "intent": "Models which represent a series of models which follow one after the other are indicated with this model type.", "question_id": 7782}
{"snippet": "struct.unpack(buffer)", "intent": "Identical to the unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must equal size .", "question_id": 9561}
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493}
{"snippet": "policy.register_defect(obj, defect)", "intent": "Register a `defect` on `obj` .", "question_id": 3421}
{"snippet": "_pointer.contents", "intent": "Returns the object to which to pointer points.", "question_id": 1898}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "Document.createTextNode(data)", "intent": "Create and return a text node containing the `data` passed as a parameter .", "question_id": 12347}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "locale.ERA_T_FMT", "intent": "Get a format string for time.strftime() to represent a time in a locale-specific era-based way.", "question_id": 5371}
{"snippet": "mimetypes.knownfiles", "intent": "List of type map file names commonly installed.", "question_id": 5951}
{"snippet": "connection.close()", "intent": "This closes the database connection .", "question_id": 8810}
{"snippet": "resource.RLIMIT_CORE", "intent": "The maximum size (in bytes) of a core file that the current process can create.", "question_id": 8075}
{"snippet": "structure._anonymous_", "intent": "An optional sequence that lists the names of unnamed (anonymous) fields.", "question_id": 1892}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761}
{"snippet": "site.USER_SITE", "intent": "Path to the user site-packages for the running Python.", "question_id": 8404}
{"snippet": "window.encoding", "intent": "Encoding used to encode method arguments (Unicode strings and characters).", "question_id": 2047}
{"snippet": "MON_1 ... MON_12", "intent": "Get the name of the n-th month.", "question_id": 5361}
{"snippet": "HTMLParser.handle_decl(decl)", "intent": "This method is called to handle an HTML doctype declaration ( e.g . The `decl` parameter will be the entire contents of the declaration inside the < ! ... > markup ( e.g .", "question_id": 4363}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706}
{"snippet": "dis.findlabels(code)", "intent": "Detect all offsets in the `code` object code which are jump targets , and return a list of these offsets .", "question_id": 2730}
{"snippet": "Codec.encode(input, errors)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "question_id": 1261}
{"snippet": "widget.state()", "intent": "Modify or inquire widget state .", "question_id": 10595}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}
{"snippet": "ArgumentParser.add_mutually_exclusive_group()", "intent": "Create a mutually exclusive group .", "question_id": 99}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "linecache.lazycache(filename, module_globals)", "intent": "Capture enough detail about a non-file-based module to permit getting its lines later via getline ( ) even if `module_globals` is None in the later call . With arguments `filename`.", "question_id": 5348}
{"snippet": "mime_types.types_map_inv", "intent": "Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types.", "question_id": 5963}
{"snippet": "wsgi_request_handler.handle()", "intent": "Process the HTTP request .", "question_id": 12234}
{"snippet": "Request.method", "intent": "The HTTP request method to use.", "question_id": 11823}
{"snippet": "decimal.compare_total_mag(other, context=None)", "intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . This operation is unaffected by `context` and is quiet : no flags are changed and no rounding is performed . With arguments `other`.", "question_id": 2406}
{"snippet": "cgi.parse()", "intent": "Parse a query in the environment or from a file ( the file defaults to sys.stdin ) .", "question_id": 1029}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "window.border()", "intent": "Draw a border around the edges of the window .", "question_id": 2027}
{"snippet": "pool.close()", "intent": "Prevents any more tasks from being submitted to the pool .", "question_id": 6356}
{"snippet": "cursor.arraysize", "intent": "Read/write attribute that controls the number of rows returned by fetchmany().", "question_id": 8851}
{"snippet": "NNTP.body(file=None)", "intent": "Same as article ( ) , but sends a BODY command . The lines returned ( or written to `file` ) will only contain the message body , not the headers .", "question_id": 6490}
{"snippet": "policy.max_line_length", "intent": "The maximum length of any line in the serialized output, not counting the end of line character(s).", "question_id": 3413}
{"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "set.isdisjoint(other)", "intent": "Return True if the set has no elements in common with `other` .", "question_id": 9438}
{"snippet": "asyncio.open_unix_connection(ssl=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `ssl`.", "question_id": 487}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761}
{"snippet": "stream_reader.readline()", "intent": "Read one line from the input stream and return the decoded data .", "question_id": 1292}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "os.lseek(fd, pos, how)", "intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "question_id": 6734}
{"snippet": "curses.start_color()", "intent": "Must be called if the programmer wants to use colors , and before any other color manipulation routine is called .", "question_id": 1983}
{"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "msilib.add_tables(database, module)", "intent": "Add all table content from `module` to `database` .", "question_id": 6065}
{"snippet": "platform.python_build()", "intent": "Returns a tuple ( buildno , builddate ) stating the Python build number and date as strings .", "question_id": 7473}
{"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}
{"snippet": "IMAP4.noop()", "intent": "Send NOOP to server .", "question_id": 4718}
{"snippet": "context.is_zero(x)", "intent": "Returns True if `x` is a zero ; otherwise returns False .", "question_id": 2541}
{"snippet": "unittest.mock.patch(target, **kwargs, spec=None)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . The `spec` and `spec_set` keyword arguments are passed to the MagicMock if patch is creating one for you . With arguments `**kwargs`.", "question_id": 11610}
{"snippet": "int.bit_length()", "intent": "Return the number of bits necessary to represent an integer in binary , excluding the sign and leading zeros :", "question_id": 9142}
{"snippet": "DataHandler.data_open(req)", "intent": "Read a data URL . With arguments `req`.", "question_id": 11874}
{"snippet": "concurrent.futures.ProcessPoolExecutor(mp_context=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `mp_context` can be a multiprocessing context or None .", "question_id": 1459}
{"snippet": "faulthandler.disable()", "intent": "Disable the fault handler : uninstall the signal handlers installed by enable ( ) .", "question_id": 3720}
{"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957}
{"snippet": "cmath.tan(x)", "intent": "Return the tangent of `x` .", "question_id": 1106}
{"snippet": "inspect.getmembers(object)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name .", "question_id": 4946}
{"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832}
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835}
{"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}
{"snippet": "dis.findlabels(code)", "intent": "Detect all offsets in the `code` object code which are jump targets , and return a list of these offsets .", "question_id": 2730}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351}
{"snippet": "tempfile.TemporaryFile()", "intent": "Return a file-like object that can be used as a temporary storage area .", "question_id": 10033}
{"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "element_tree.parse(source)", "intent": "Loads an external XML section into this element tree . `source` is a file name or file object .", "question_id": 12525}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "breakpoint.bpformat()", "intent": "Return a string with all the information about the breakpoint , nicely formatted :", "question_id": 765}
{"snippet": "text_wrapper.expand_tabs", "intent": "(default: True) If true, then all tab characters in text will be expanded to spaces using the expandtabs() method of text.", "question_id": 10328}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "decimal.as_integer_ratio()", "intent": "Return a pair ( n , d ) of integers that represent the given Decimal instance as a fraction , in lowest terms and with a positive denominator :", "question_id": 2396}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "select.epoll()", "intent": "( Only supported on Linux 2.5.44 and newer . )", "question_id": 8150}
{"snippet": "fileinput.isfirstline()", "intent": "Returns true if the line just read is the first line of its file , otherwise returns false .", "question_id": 3796}
{"snippet": "xml.sax.saxutils.quoteattr(data)", "intent": "Similar to escape ( ) , but also prepares `data` to be used as an attribute value .", "question_id": 12656}
{"snippet": "stats.dump_stats(filename)", "intent": "Save the data loaded into the Stats object to a file named `filename` .", "question_id": 7692}
{"snippet": "formatter.parse(format_string)", "intent": "Loop over the `format_string` and return an iterable of tuples ( literal_text , field_name , format_spec , conversion ) .", "question_id": 9519}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "file_finder.find_spec(fullname)", "intent": "Attempt to find the spec to handle `fullname` within path .", "question_id": 4884}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "operator.and_(a, b)", "intent": "Return the bitwise and of `a` and `b` .", "question_id": 6534}
{"snippet": "set |= other | ...", "intent": "Update the set, adding elements from all others.", "question_id": 9455}
{"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}
{"snippet": "HTTPResponse.msg", "intent": "A http.client.HTTPMessage instance containing the response headers.", "question_id": 4462}
{"snippet": "concurrent.futures.ProcessPoolExecutor(mp_context=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `mp_context` can be a multiprocessing context or None .", "question_id": 1459}
{"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2805}
{"snippet": "cgi.print_environ()", "intent": "Format the shell environment in HTML .", "question_id": 1053}
{"snippet": "multiprocessing.active_children()", "intent": "Return list of all live children of the current process .", "question_id": 6219}
{"snippet": "Cookie.port_specified", "intent": "True if a port or set of ports was explicitly specified by the server (in the Set-Cookie / Set-Cookie2 header).", "question_id": 4568}
{"snippet": "Protocol.data_received(data)", "intent": "Called when some `data` is received .", "question_id": 435}
{"snippet": "socket.ntohl(x)", "intent": "Convert 32-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8657}
{"snippet": "ctypes.pythonapi", "intent": "An instance of PyDLL that exposes Python C API functions as attributes.", "question_id": 1785}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "doc_test_parser.parse(string)", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings .", "question_id": 2859}
{"snippet": "imp.C_EXTENSION", "intent": "The module was found as dynamically loadable shared library.", "question_id": 4776}
{"snippet": "typing.Type()", "intent": "A variable annotated with C may accept a value of type C. In contrast , a variable annotated with Type [ C ] may accept values that are classes themselves \u2013 specifically , it will accept the class object of C. For example :", "question_id": 11232}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "json.load(fp, **kw)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5290}
{"snippet": "html.entities.entitydefs", "intent": "A dictionary mapping XHTML 1.0 entity definitions to their replacement text in ISO Latin-1.", "question_id": 4343}
{"snippet": "ProcessingInstruction.target", "intent": "The content of the processing instruction up to the first whitespace character.", "question_id": 12378}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480}
{"snippet": "UUID.urn", "intent": "The UUID as a URN as specified in RFC 4122.", "question_id": 11952}
{"snippet": "compileall.compile_path(optimize=-1)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `optimize`.", "question_id": 1435}
{"snippet": "xml.parsers.expat.ParserCreate(namespace_separator=None)", "intent": "Creates and returns a new xmlparser object . Expat can optionally do XML namespace processing for you , enabled by providing a value for `namespace_separator` .", "question_id": 7730}
{"snippet": "structure._fields_", "intent": "A sequence defining the structure fields.", "question_id": 1890}
{"snippet": "ctypes.CDLL(name)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`.", "question_id": 1740}
{"snippet": "window.notimeout(flag)", "intent": "If `flag` is True , escape sequences will not be timed out .", "question_id": 2097}
{"snippet": "fileinput.hook_encoded(encoding)", "intent": "Returns a hook which opens each file with open ( ) , using the given `encoding` and `errors` to read the file .", "question_id": 3811}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}
{"snippet": "ProcessingInstruction.data", "intent": "The content of the processing instruction following the first whitespace character.", "question_id": 12379}
{"snippet": "cmath.nanj", "intent": "Complex number with zero real part and NaN imaginary part.", "question_id": 1126}
{"snippet": "fraction.__round__()", "intent": "The first version returns the nearest int to self , rounding half to even .", "question_id": 3875}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "multiprocessing.Pipe()", "intent": "Returns a pair ( conn1 , conn2 ) of Connection objects representing the ends of a pipe .", "question_id": 6194}
{"snippet": "asyncio.Protocol(BaseProtocol)", "intent": "The base class for implementing streaming protocols ( TCP , Unix sockets , etc ) . With arguments `BaseProtocol`.", "question_id": 427}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415}
{"snippet": "turtle.tiltangle(angle=None)", "intent": "Set or return the current tilt-angle . If `angle` is given , rotate the turtleshape to point in the direction specified by angle , regardless of its current tilt-angle .", "question_id": 11007}
{"snippet": "test_result.stopTest(test)", "intent": "Called after the `test` case test has been executed , regardless of the outcome .", "question_id": 11521}
{"snippet": "sys.tracebacklimit", "intent": "When this variable is set to an integer value, it determines the maximum number of levels of traceback information printed when an unhandled exception occurs.", "question_id": 9851}
{"snippet": "msvcrt.getwch()", "intent": "Wide char variant of getch ( ) , returning a Unicode value .", "question_id": 6157}
{"snippet": "doctest.DONT_ACCEPT_BLANKLINE", "intent": "By default, if an expected output block contains a line containing only the string <BLANKLINE>, then that line will match a blank line in the actual output.", "question_id": 2753}
{"snippet": "test.support.check_free_after_iterating(test, iter, cls)", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.", "question_id": 10271}
{"snippet": "time.perf_counter()", "intent": "Return the value ( in fractional seconds ) of a performance counter , i.e .", "question_id": 10448}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "os.sched_yield()", "intent": "Voluntarily relinquish the CPU .", "question_id": 7112}
{"snippet": "xmlrpc.client.Fault", "intent": "A Fault object encapsulates the content of an XML-RPC fault tag.", "question_id": 12689}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "tkinter.tix.tixCommand", "intent": "The tix commands provide access to miscellaneous elements of Tix\u2019s internal state and the Tix application context.", "question_id": 10579}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "feature.set_current()", "intent": "Make this feature the current feature of msilib .", "question_id": 6124}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "Request.get_full_url()", "intent": "Return the URL given in the constructor .", "question_id": 11829}
{"snippet": "stringprep.map_table_b3(code)", "intent": "Return the mapped value for `code` according to tableB.3 ( Mapping for case-folding used with no normalization ) .", "question_id": 9534}
{"snippet": "_thread.TIMEOUT_MAX", "intent": "The maximum value allowed for the timeout parameter of Lock.acquire().", "question_id": 12951}
{"snippet": "os.link(src, dst, follow_symlinks=True)", "intent": "Create a hard link pointing to `src` named `dst` . With arguments `follow_symlinks`.", "question_id": 6853}
{"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055}
{"snippet": "csv.QUOTE_NONNUMERIC", "intent": "Instructs writer objects to quote all non-numeric fields.", "question_id": 1720}
{"snippet": "json.load(fp, **kw)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5290}
{"snippet": "__debug__", "intent": "This constant is true if Python was not started with an -O option.", "question_id": 1607}
{"snippet": "test.support.WarningsRecorder", "intent": "Class used to record warnings for unit tests.", "question_id": 10295}
{"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "mimetypes.read_mime_types(filename)", "intent": "Load the type map given in the file `filename` , if it exists .", "question_id": 5947}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951}
{"snippet": "random.lognormvariate(mu, sigma)", "intent": "Log normal distribution . If you take the natural logarithm of this distribution , you \u2019 ll get a normal distribution with mean `mu` and standard deviation `sigma` .", "question_id": 7913}
{"snippet": "Dialect.escapechar", "intent": "A one-character string used by the writer to escape the delimiter if quoting is set to QUOTE_NONE and the quotechar if doublequote is False.", "question_id": 1725}
{"snippet": "math.log1p(x)", "intent": "Return the natural logarithm of 1+x ( base e ) . The result is calculated in a way which is accurate for `x` near zero .", "question_id": 5909}
{"snippet": "cursor.execute(sql, parameters)", "intent": "Executes an SQL statement . With arguments `sql`, `parameters`.", "question_id": 8840}
{"snippet": "xmlrpc.client.dumps(params, encoding=None)", "intent": "Convert `params` into an XML-RPC request . If methodresponse is true , only a single value can be returned , meaning that params must be of length 1. `encoding` , if supplied , is the encoding to use in the generated XML ; the default is UTF-8 .", "question_id": 12701}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392}
{"snippet": "os.getppid()", "intent": "Return the parent \u2019 s process id .", "question_id": 6683}
{"snippet": "importlib.util.resolve_name(name, package)", "intent": "Resolve a relative module `name` to an absolute one . This allows for usage such as importlib.util.resolve_name ( 'sys ' , __package__ ) without doing a check to see if the `package` argument is needed .", "question_id": 4927}
{"snippet": "loader.create_module(spec)", "intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "question_id": 4814}
{"snippet": "message.get_all(name, failobj=None)", "intent": "Return a list of all the values for the field named `name` . If there are no such named headers in the message , `failobj` is returned ( defaults to None ) .", "question_id": 2975}
{"snippet": "deque.append(x)", "intent": "Add `x` to the right side of the deque .", "question_id": 1353}
{"snippet": "SSLContext.sni_callback", "intent": "Register a callback function that will be called after the TLS Client Hello handshake message has been received by the SSL/TLS server when the TLS client specifies a server name indication.", "question_id": 9018}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "sys.getwindowsversion()", "intent": "Return a named tuple describing the Windows version currently running .", "question_id": 9809}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706}
{"snippet": "context_var.name", "intent": "The name of the variable.", "question_id": 1639}
{"snippet": "oss_audio_device.setfmt(format)", "intent": "Try to set the current audio `format` to format\u2014see getfmts ( ) for a list .", "question_id": 7185}
{"snippet": "ssl.enum_certificates(store_name)", "intent": "Retrieve certificates from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8899}
{"snippet": "sysconfig.get_python_version()", "intent": "Return the MAJOR.MINOR Python version number as a string .", "question_id": 9870}
{"snippet": "context.minus(x)", "intent": "Minus corresponds to the unary prefix minus operator in Python . With arguments `x`.", "question_id": 2553}
{"snippet": "difflib.SequenceMatcher", "intent": "This is a flexible class for comparing pairs of sequences of any type, so long as the sequence elements are hashable.", "question_id": 2595}
{"snippet": "concurrent.futures.thread.BrokenThreadPool", "intent": "Derived from BrokenExecutor, this exception class is raised when one of the workers of a ThreadPoolExecutor has failed initializing.", "question_id": 1489}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "decimal.is_zero()", "intent": "Return True if the argument is a ( positive or negative ) zero and False otherwise .", "question_id": 2428}
{"snippet": "file_io.mode", "intent": "The mode as given in the constructor.", "question_id": 5107}
{"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}
{"snippet": "int.to_bytes(length, byteorder)", "intent": "Return an array of bytes representing an integer . The integer is represented using `length` bytes . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9143}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "msvcrt.getwch()", "intent": "Wide char variant of getch ( ) , returning a Unicode value .", "question_id": 6157}
{"snippet": "chain_map.maps", "intent": "A user updateable list of mappings.", "question_id": 1336}
{"snippet": "turtle.circle(radius, steps=None)", "intent": "Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10925}
{"snippet": "email.headerregistry.Address()", "intent": "The class used to represent an email address .", "question_id": 3186}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name, name_in_zip=None)", "intent": "Create zip file at `zip_dir` and `zip_basename` with extension zip which contains the files in `script_name` . `name_in_zip` is the archive name .", "question_id": 10311}
{"snippet": "lzma.LZMAFile()", "intent": "Open an LZMA-compressed file in binary `mode` .", "question_id": 5666}
{"snippet": "inspect.getsourcefile(object)", "intent": "Return the name of the Python source file in which an `object` was defined .", "question_id": 4973}
{"snippet": "urllib.parse.quote_plus(string, safe='')", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` .", "question_id": 11714}
{"snippet": "socket.inet_pton(address_family, ip_string)", "intent": "Convert an IP address from its family-specific string format to a packed , binary format . Supported values for `address_family` are currently AF_INET and AF_INET6 . If the IP address string `ip_string` is invalid , OSError will be raised .", "question_id": 8663}
{"snippet": "inspect.iscoroutinefunction(object)", "intent": "Return true if the `object` is a coroutine function ( a function defined with an async def syntax ) .", "question_id": 4954}
{"snippet": "fileinput.hook_compressed(filename, mode)", "intent": "Transparently opens files compressed with gzip and bzip2 ( recognized by the extensions '.gz ' and '.bz2 ' ) using the gzip and bz2 modules . If the `filename` extension is not '.gz ' or '.bz2 ' , the file is opened normally ( ie , using open ( ) without any decompression ) . With arguments `mode`.", "question_id": 3810}
{"snippet": "asyncio.gather(*aws, return_exceptions=False)", "intent": "Run awaitable objects in the aws sequence concurrently . If `return_exceptions` is False ( default ) , the first raised exception is immediately propagated to the task that awaits on gather ( ) . With arguments `*aws`.", "question_id": 601}
{"snippet": "test.support.SaveSignals", "intent": "Class to save and restore signal handlers registered by the Python signal handler.", "question_id": 10292}
{"snippet": "crypt.METHOD_BLOWFISH", "intent": "Another Modular Crypt Format method with 22 character salt and 31 character hash based on the Blowfish cipher.", "question_id": 1670}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488}
{"snippet": "decimal.FloatOperation", "intent": "Enable stricter semantics for mixing floats and Decimals.", "question_id": 2594}
{"snippet": "warnings.catch_warnings()", "intent": "A context manager that copies and , upon exit , restores the warnings filter and the showwarning ( ) function .", "question_id": 12042}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "loop.sock_sendfile(sock, file, offset=0)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket . `offset` tells from where to start reading the file .", "question_id": 282}
{"snippet": "multiprocessing.freeze_support()", "intent": "Add support for when a program which uses multiprocessing has been frozen to produce a Windows executable .", "question_id": 6222}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "ast.increment_lineno(node)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file .", "question_id": 153}
{"snippet": "http.cookiejar.DefaultCookiePolicy(blocked_domains=None)", "intent": "Constructor arguments should be passed as keyword arguments only . `blocked_domains` is a sequence of domain names that we never accept cookies from , nor return cookies to .", "question_id": 4477}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "dbm.gnu.error", "intent": "Raised on dbm.gnu-specific errors, such as I/O errors.", "question_id": 2370}
{"snippet": "winsound.SND_ALIAS", "intent": "The sound parameter is a sound association name from the registry.", "question_id": 12197}
{"snippet": "socket.getprotobyname(protocolname)", "intent": "Translate an Internet protocol name ( for example , 'icmp ' ) to a constant suitable for passing as the ( optional ) third argument to the socket ( ) function . With arguments `protocolname`.", "question_id": 8652}
{"snippet": "FileCookieJar.filename", "intent": "Filename of default file in which to keep cookies.", "question_id": 4522}
{"snippet": "signal.NSIG", "intent": "One more than the number of the highest signal number.", "question_id": 8378}
{"snippet": "connection.text_factory", "intent": "Using this attribute you can control what objects are returned for the TEXT data type.", "question_id": 8826}
{"snippet": "kevent.fflags", "intent": "Filter specific flags.", "question_id": 8206}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705}
{"snippet": "BrokenPipeError", "intent": "A subclass of ConnectionError, raised when trying to write on a pipe while the other end has been closed, or trying to write on a socket which has been shutdown for writing.", "question_id": 3689}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "date.toordinal()", "intent": "Return the proleptic Gregorian ordinal of the date , where January 1 of year 1 has ordinal 1 .", "question_id": 2238}
{"snippet": "stat_result.st_fstype", "intent": "String that uniquely identifies the type of the filesystem that contains the file.", "question_id": 6941}
{"snippet": "os.EX_DATAERR", "intent": "Exit code that means the input data was incorrect.", "question_id": 7020}
{"snippet": "bdb.clear_all_breaks()", "intent": "Delete all existing breakpoints .", "question_id": 798}
{"snippet": "stat_result.st_atime_ns", "intent": "Time of most recent access expressed in nanoseconds as an integer.", "question_id": 6932}
{"snippet": "queue.join_thread()", "intent": "Join the background thread .", "question_id": 6209}
{"snippet": "test_case.tearDown()", "intent": "Method called immediately after the test method has been called and the result recorded .", "question_id": 11366}
{"snippet": "Protocol.eof_received()", "intent": "Called when the other end signals it won \u2019 t send any more data ( for example by calling transport.write_eof ( ) , if the other end also uses asyncio ) .", "question_id": 436}
{"snippet": "datetime.utcnow()", "intent": "Return the current UTC date and time , with tzinfo None .", "question_id": 2260}
{"snippet": "turtle.shapetransform(t22=None)", "intent": "Set or return the current transformation matrix of the turtle shape . The determinant t11 * `t22` - t12 * t21 must not be zero , otherwise an error is raised .", "question_id": 11012}
{"snippet": "unittest.mock.PropertyMock(*args, **kwargs)", "intent": "A mock intended to be used as a property , or other descriptor , on a class . With arguments `*args`, `**kwargs`.", "question_id": 11607}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617}
{"snippet": "log_record.getMessage()", "intent": "Returns the message for this LogRecord instance after merging any user-supplied arguments with the message .", "question_id": 5630}
{"snippet": "msilib.Binary(filename)", "intent": "Represents entries in the Binary table ; inserting such an object using add_data ( ) reads the file named `filename` into the table .", "question_id": 6064}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667}
{"snippet": "os.execv(path, args)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "question_id": 7013}
{"snippet": "curses.isendwin()", "intent": "Return True if endwin ( ) has been called ( that is , the curses library has been deinitialized ) .", "question_id": 1949}
{"snippet": "timeit.Timer(stmt='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals .", "question_id": 10498}
{"snippet": "resource.RLIMIT_CORE", "intent": "The maximum size (in bytes) of a core file that the current process can create.", "question_id": 8075}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891}
{"snippet": "importlib.resources.open_text(package, resource)", "intent": "Open for text reading the `resource` within `package` .", "question_id": 4853}
{"snippet": "policy.raise_on_defect", "intent": "If True, any defects encountered will be raised as errors.", "question_id": 3416}
{"snippet": "queue.join_thread()", "intent": "Join the background thread .", "question_id": 6209}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`.", "question_id": 523}
{"snippet": "platform.python_version_tuple()", "intent": "Returns the Python version as tuple ( major , minor , patchlevel ) of strings .", "question_id": 7479}
{"snippet": "@unittest.skipIf(condition, reason)", "intent": "Skip the decorated test if `condition` is true . With arguments `reason`.", "question_id": 11359}
{"snippet": "importlib.resources.open_text(package, resource)", "intent": "Open for text reading the `resource` within `package` .", "question_id": 4853}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "traceback.format(limit=None)", "intent": "Format the traceback as a list of lines with newlines . If `limit` is set , format the limit most recent frames if limit is positive .", "question_id": 10896}
{"snippet": "readline.get_history_length()", "intent": "Set or return the desired number of lines to save in the history file .", "question_id": 8027}
{"snippet": "test_loader.errors", "intent": "A list of the non-fatal errors encountered while loading tests.", "question_id": 11490}
{"snippet": "socketserver.BaseRequestHandler", "intent": "This is the superclass of all request handler objects.", "question_id": 8783}
{"snippet": "uuid.RFC_4122", "intent": "Specifies the UUID layout given in RFC 4122.", "question_id": 11969}
{"snippet": "Class.super", "intent": "A list of Class objects which describe the immediate base classes of the class being described.", "question_id": 7722}
{"snippet": "stringprep.in_table_c5(code)", "intent": "Determine whether `code` is in tableC.5 ( Surrogate codes ) .", "question_id": 9543}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "importlib.util.cache_from_source(path, optimization=None)", "intent": "Return the PEP 3147/PEP 488 `path` to the byte-compiled file associated with the source path . The `optimization` parameter is used to specify the optimization level of the bytecode file .", "question_id": 4923}
{"snippet": "counter.fromkeys(iterable)", "intent": "This class method is not implemented for Counter objects . With arguments `iterable`.", "question_id": 1347}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679}
{"snippet": "base64.urlsafe_b64encode(s)", "intent": "Encode bytes-like object `s` using the URL- and filesystem-safe alphabet , which substitutes - instead of + and _ instead of / in the standard Base64 alphabet , and return the encoded bytes .", "question_id": 716}
{"snippet": "decimal.copy_negate()", "intent": "Return the negation of the argument .", "question_id": 2409}
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060}
{"snippet": "style.configure(style, **kw)", "intent": "Query or set the default value of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10673}
{"snippet": "random.uniform(a, b)", "intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "question_id": 7907}
{"snippet": "io.TextIOWrapper(buffer, encoding=None, errors=None)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` . `encoding` gives the name of the encoding that the stream will be decoded or encoded with . `errors` is an optional string that specifies how encoding and decoding errors are to be handled .", "question_id": 5152}
{"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}
{"snippet": "re.finditer(pattern, string)", "intent": "Return an iterator yielding match objects over all non-overlapping matches for the RE `pattern` in `string` .", "question_id": 7949}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "doctest.Example(source, want, options=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `options`.", "question_id": 2828}
{"snippet": "sys_log_handler.emit(record)", "intent": "The `record` is formatted , and then sent to the syslog server .", "question_id": 5503}
{"snippet": "@typing.type_check_only", "intent": "Decorator to mark a class or function to be unavailable at runtime.", "question_id": 11330}
{"snippet": "io_base.__del__()", "intent": "Prepare for object destruction .", "question_id": 5082}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "set.update(*others)", "intent": "Update the set , adding elements from all others . With arguments `*others`.", "question_id": 9454}
{"snippet": "datetime.max", "intent": "The latest representable datetime, datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None).", "question_id": 2270}
{"snippet": "importlib.util.module_from_spec(spec)", "intent": "Create a new module based on `spec` and spec.loader.create_module .", "question_id": 4930}
{"snippet": "i_pv6_network.compare_networks(other)", "intent": "Refer to the corresponding attribute documentation in IPv4Network . With arguments `other`.", "question_id": 5222}
{"snippet": "set.update(*others)", "intent": "Update the set , adding elements from all others . With arguments `*others`.", "question_id": 9454}
{"snippet": "style.lookup(style, option)", "intent": "Returns the value specified for `option` in `style` .", "question_id": 10677}
{"snippet": "os.pathsep", "intent": "The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows.", "question_id": 7126}
{"snippet": "lzma.LZMAFile(format=None)", "intent": "Open an LZMA-compressed file in binary `mode` . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5669}
{"snippet": "operator.neg(obj)", "intent": "Return `obj` negated ( -obj ) .", "question_id": 6552}
{"snippet": "uuid.getnode()", "intent": "Get the hardware address as a 48-bit positive integer .", "question_id": 11956}
{"snippet": "auto.start", "intent": "The first index of invalid data in object.", "question_id": 3677}
{"snippet": "xmlparser.XmlDeclHandler(version, encoding, standalone)", "intent": "Called when the XML declaration is parsed . The XML declaration is the ( optional ) declaration of the applicable `version` of the XML recommendation , the `encoding` of the document text , and an optional \u201c `standalone` \u201d declaration .", "question_id": 7755}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}
{"snippet": "asyncio.as_completed(aws, loop=None)", "intent": "Run awaitable objects in the `aws` set concurrently . With arguments `loop`.", "question_id": 616}
{"snippet": "context.to_eng_string(x)", "intent": "Convert to a string , using engineering notation if an exponent is needed . With arguments `x`.", "question_id": 2573}
{"snippet": "POP3.rpop(user)", "intent": "Use RPOP authentication ( similar to UNIX r-commands ) to log into POP3 server . With arguments `user`.", "question_id": 7607}
{"snippet": "cursor.lastrowid", "intent": "This read-only attribute provides the rowid of the last modified row.", "question_id": 8850}
{"snippet": "connection.create_collation(name, callable)", "intent": "Creates a collation with the specified `name` and `callable` .", "question_id": 8818}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "ctypes.util.find_msvcrt()", "intent": "Windows only : return the filename of the VC runtime library used by Python , and by the extension modules .", "question_id": 1820}
{"snippet": "importlib.resources.open_text(package, resource, encoding='utf-8')", "intent": "Open for text reading the `resource` within `package` . `encoding` and `errors` have the same meaning as with built-in open ( ) .", "question_id": 4854}
{"snippet": "cmath.nan", "intent": "A floating-point \u201cnot a number\u201d (NaN) value.", "question_id": 1125}
{"snippet": "unittest.TextTestRunner()", "intent": "A basic test runner implementation that outputs results to a `stream` .", "question_id": 11533}
{"snippet": "datetime.MAXYEAR", "intent": "The largest year number allowed in a date or datetime object.", "question_id": 2197}
{"snippet": "Popen.poll()", "intent": "Check if child process has terminated .", "question_id": 9609}
{"snippet": "shelve.open(filename, protocol=None)", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The version of the pickle `protocol` can be specified with the protocol parameter .", "question_id": 8236}
{"snippet": "mime_types.guess_extension(type)", "intent": "Similar to the guess_extension ( ) function , using the tables stored as part of the object . With arguments `type`.", "question_id": 5964}
{"snippet": "resource.getpagesize()", "intent": "Returns the number of bytes in a system page .", "question_id": 8096}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "sys.dllhandle", "intent": "Integer specifying the handle of the Python DLL.", "question_id": 9778}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "barrier.wait(timeout=None)", "intent": "Pass the barrier . If a `timeout` is provided , it is used in preference to any that was supplied to the class constructor .", "question_id": 10422}
{"snippet": "resource.RLIMIT_RTTIME", "intent": "The time limit (in microseconds) on CPU time that a process can spend under real-time scheduling without making a blocking syscall.", "question_id": 8090}
{"snippet": "NNTP.xhdr(hdr, str)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search .", "question_id": 6497}
{"snippet": "config_parser.read_string(string)", "intent": "Parse configuration data from a `string` .", "question_id": 1516}
{"snippet": "set.difference(*others)", "intent": "Return a new set with elements in the set that are not in the others . With arguments `*others`.", "question_id": 9449}
{"snippet": "importlib.abc.SourceLoader", "intent": "An abstract base class for implementing source (and optionally bytecode) file loading.", "question_id": 4841}
{"snippet": "Path.symlink_to(target, target_is_directory=False)", "intent": "Make this path a symbolic link to `target` . Under Windows , `target_is_directory` must be true ( default False ) if the link \u2019 s target is a directory .", "question_id": 7316}
{"snippet": "locale.YESEXPR", "intent": "Get a regular expression that can be used with the regex function to recognize a positive response to a yes/no question.", "question_id": 5365}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "async_result.get()", "intent": "Return the result when it arrives .", "question_id": 6361}
{"snippet": "fcntl.flock(fd, operation)", "intent": "Perform the lock `operation` operation on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "question_id": 3746}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "decimal.as_integer_ratio()", "intent": "Return a pair ( n , d ) of integers that represent the given Decimal instance as a fraction , in lowest terms and with a positive denominator :", "question_id": 2396}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}
{"snippet": "devpoll.register(fd, eventmask)", "intent": "Register a file descriptor with the polling object . `fd` can be either an integer , or an object with a fileno ( ) method that returns an integer . `eventmask` is an optional bitmask describing the type of events you want to check for .", "question_id": 8172}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136}
{"snippet": "IMAP4.thread(threading_algorithm, charset, search_criterion)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4747}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196}
{"snippet": "dataclasses.Field", "intent": "Field objects describe each defined field.", "question_id": 2177}
{"snippet": "AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "Handle an authentication request by getting a user/password pair , and re-trying the request . `authreq` should be the name of the header where the information about the realm is included in the request , `host` specifies the URL and path to authenticate for , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11865}
{"snippet": "errno.EOVERFLOW", "intent": "Value too large for defined data type", "question_id": 3580}
{"snippet": "os.link(src, dst, follow_symlinks=True)", "intent": "Create a hard link pointing to `src` named `dst` . With arguments `follow_symlinks`.", "question_id": 6853}
{"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020}
{"snippet": "XMLReader.getFeature(featurename)", "intent": "Return the current setting for feature `featurename` .", "question_id": 12623}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "SSLSocket.compression()", "intent": "Return the compression algorithm being used as a string , or None if the connection isn \u2019 t compressed .", "question_id": 8981}
{"snippet": "FTP.storbinary(cmd, fp)", "intent": "Store a file in binary transfer mode . `cmd` should be an appropriate STOR command : `` STOR filename '' . `fp` is a file object ( opened in binary mode ) which is read until EOF using its read ( ) method in blocks of size `blocksize` to provide the data to be stored .", "question_id": 3933}
{"snippet": "sys.ps1", "intent": "Strings specifying the primary and secondary prompt of the interpreter.", "question_id": 9832}
{"snippet": "base_http_request_handler.end_headers()", "intent": "Adds a blank line ( indicating the end of the HTTP headers in the response ) to the headers buffer and calls flush_headers ( ) .", "question_id": 4646}
{"snippet": "IMAP4.login_cram_md5(user, password)", "intent": "Force use of CRAM-MD5 authentication when identifying the client to protect the `password` . With arguments `user`.", "question_id": 4710}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "AU_read.getframerate()", "intent": "Returns sampling frequency .", "question_id": 9710}
{"snippet": "test_case.debug()", "intent": "Run the test without collecting the result .", "question_id": 11374}
{"snippet": "errno.ECONNRESET", "intent": "Connection reset by peer", "question_id": 3609}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "OpenerDirector.open(url)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11837}
{"snippet": "xml.dom.IndexSizeErr", "intent": "Raised when an index or size parameter to a method is negative or exceeds the allowed values.", "question_id": 12383}
{"snippet": "NNTP.newnews(group, date, file=None)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) . With arguments `file`.", "question_id": 6464}
{"snippet": "contextlib.AbstractContextManager", "intent": "An abstract base class for classes that implement object.__enter__() and object.__exit__().", "question_id": 1615}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "statistics.mode(data)", "intent": "Return the most common `data` point from discrete or nominal data .", "question_id": 9132}
{"snippet": "datetime.hour", "intent": "In range(24).", "question_id": 2275}
{"snippet": "policy.message_factory", "intent": "A factory function for constructing a new empty message object.", "question_id": 3418}
{"snippet": "socket.create_connection(address, timeout)", "intent": "Connect to a TCP service listening on the Internet `address` ( a 2-tuple ( host , port ) ) , and return the socket object . Passing the optional `timeout` parameter will set the timeout on the socket instance before attempting to connect .", "question_id": 8628}
{"snippet": "@abc.abstractclassmethod", "intent": "A subclass of the built-in classmethod(), indicating an abstract classmethod.", "question_id": 5}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "functools.reduce(function, iterable)", "intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . With arguments `iterable`.", "question_id": 4154}
{"snippet": "deque.pop()", "intent": "Remove and return an element from the right side of the deque .", "question_id": 1364}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "non_callable_magic_mock.reason", "intent": "This is usually a string explaining the reason for this error.", "question_id": 11662}
{"snippet": "test.support.PIPE_MAX_SIZE", "intent": "A constant that is likely larger than the underlying OS pipe buffer size, to make writes blocking.", "question_id": 10124}
{"snippet": "memory_bio.eof", "intent": "A boolean indicating whether the memory BIO is current at the end-of-file position.", "question_id": 9055}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296}
{"snippet": "sequence_matcher.get_matching_blocks()", "intent": "Return list of triples describing non-overlapping matching subsequences .", "question_id": 2683}
{"snippet": "turtle.onrelease(fun)", "intent": "Bind `fun` to mouse-button-release events on this turtle .", "question_id": 11023}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435}
{"snippet": "base_http_request_handler.sys_version", "intent": "Contains the Python system version, in a form usable by the version_string method and the server_version class variable.", "question_id": 4628}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "@functools.wraps(wrapped)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`.", "question_id": 4160}
{"snippet": "ConnectionError", "intent": "A base class for connection-related issues.", "question_id": 3688}
{"snippet": "Popen.stdin", "intent": "If the stdin argument was PIPE, this attribute is a writeable stream object as returned by open().", "question_id": 9620}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "stat_result.st_birthtime", "intent": "Time of file creation.", "question_id": 6940}
{"snippet": "i_pv4_network.hosts()", "intent": "Returns an iterator over the usable hosts in the network .", "question_id": 5205}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659}
{"snippet": "bytes_parser.parsebytes(bytes)", "intent": "Similar to the parse ( ) method , except it takes a bytes-like object instead of a file-like object . Calling this method on a bytes-like object is equivalent to wrapping `bytes` in a BytesIO instance first and calling parse ( ) .", "question_id": 3378}
{"snippet": "fileinput.filelineno()", "intent": "Return the line number in the current file .", "question_id": 3795}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "widget.enable_traversal()", "intent": "Enable keyboard traversal for a toplevel window containing this notebook .", "question_id": 10614}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "platform.python_version()", "intent": "Returns the Python version as string 'major.minor.patchlevel ' .", "question_id": 7478}
{"snippet": "socketserver.BaseServer(server_address, RequestHandlerClass)", "intent": "This is the superclass of all Server objects in the module . The two parameters are stored in the respective `server_address` and `RequestHandlerClass` attributes .", "question_id": 8759}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "text_wrapper.break_on_hyphens", "intent": "(default: True) If true, wrapping will occur preferably on whitespaces and right after hyphens in compound words, as it is customary in English.", "question_id": 10336}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "SMTP.login(user, password, initial_response_ok=True)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . `initial_response_ok` is passed through to auth ( ) . With arguments `user`.", "question_id": 8523}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466}
{"snippet": "ssl.SSLCertVerificationError", "intent": "A subclass of SSLError raised when certificate validation has failed.", "question_id": 8881}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "iterator.__next__()", "intent": "Return the next item from the container .", "question_id": 9153}
{"snippet": "OptionParser.enable_interspersed_args()", "intent": "Set parsing to not stop on the first non-option , allowing interspersing switches with command arguments .", "question_id": 6639}
{"snippet": "terminal_size.columns", "intent": "Width of the terminal window in characters.", "question_id": 6814}
{"snippet": "fraction.numerator", "intent": "Numerator of the Fraction in lowest term.", "question_id": 3867}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "Packer.pack_double(value)", "intent": "Packs the double-precision floating point number `value` .", "question_id": 12276}
{"snippet": "nis.match(key, mapname)", "intent": "Return the match for `key` in map `mapname` , or raise an error ( nis.error ) if there is none .", "question_id": 6391}
{"snippet": "Record.ClearData()", "intent": "Set all fields of the record to 0 , through MsiRecordClearData ( ) .", "question_id": 6087}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "json_decoder.raw_decode(s)", "intent": "Decode a JSON document from `s` ( a str beginning with a JSON document ) and return a 2-tuple of the Python representation and the index in s where the document ended .", "question_id": 5321}
{"snippet": "HTTPResponse.reason", "intent": "Reason phrase returned by server.", "question_id": 4465}
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223}
{"snippet": "base_handler.log_exception(exc_info)", "intent": "Log the `exc_info` tuple in the server log .", "question_id": 12260}
{"snippet": "SIG*", "intent": "All the signal numbers are defined symbolically.", "question_id": 8375}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020}
{"snippet": "statistics.median_low(data)", "intent": "Return the low median of numeric `data` .", "question_id": 9128}
{"snippet": "pkgutil.ModuleInfo(module_finder, name, ispkg)", "intent": "A namedtuple that holds a brief summary of a module \u2019 s info . With arguments `module_finder`, `name`, `ispkg`.", "question_id": 7435}
{"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425}
{"snippet": "smtp_server.channel_class", "intent": "Override this in subclasses to use a custom SMTPChannel for managing SMTP clients.", "question_id": 8423}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "SMTP.docmd(cmd, args='')", "intent": "Send a command `cmd` to the server . The optional argument `args` is simply concatenated to the command , separated by a space .", "question_id": 8510}
{"snippet": "pickle.Pickler(file, protocol=None)", "intent": "This takes a binary `file` for writing a pickle data stream . The optional `protocol` argument , an integer , tells the pickler to use the given protocol ; supported protocols are 0 to HIGHEST_PROTOCOL .", "question_id": 7391}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "widget.heading(column, **kw, option=None)", "intent": "Query or modify the heading options for the specified `column` . If kw is not given , returns a dict of the heading `option` values . With arguments `**kw`.", "question_id": 10633}
{"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711}
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372}
{"snippet": "mailbox.FormatError", "intent": "Raised when the data in a file cannot be parsed, such as when an MH instance attempts to read a corrupted .mh_sequences file.", "question_id": 5860}
{"snippet": "smtp_channel.peer", "intent": "Holds the name of the client peer as returned by conn.getpeername() where conn is conn.", "question_id": 8447}
{"snippet": "bytes_feed_parser.close()", "intent": "Complete the parsing of all previously fed data and return the root message object .", "question_id": 3367}
{"snippet": "tkinter.tix.LabelFrame", "intent": "The LabelFrame widget packages a frame widget and a label into one mega widget.", "question_id": 10557}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "stat_result.st_mtime", "intent": "Time of most recent content modification expressed in seconds.", "question_id": 6930}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}
{"snippet": "epoll.poll(timeout=-1)", "intent": "Wait for events . `timeout` in seconds ( float )", "question_id": 8188}
{"snippet": "IMAP4.xatom()", "intent": "Allow simple extension commands notified by server in CAPABILITY response .", "question_id": 4753}
{"snippet": "random.uniform(a, b)", "intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "question_id": 7907}
{"snippet": "directory.glob(pattern)", "intent": "Add a list of files to the current component as specified in the glob `pattern` .", "question_id": 6111}
{"snippet": "crypt.METHOD_CRYPT", "intent": "The traditional method with a 2 character salt and 13 characters of hash.", "question_id": 1672}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757}
{"snippet": "winreg.KEY_WOW64_64KEY", "intent": "Indicates that an application on 64-bit Windows should operate on the 64-bit registry view.", "question_id": 12172}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}
{"snippet": "ssl.PROTOCOL_TLS", "intent": "Selects the highest protocol version that both the client and server support.", "question_id": 8921}
{"snippet": "prototype(vtbl_index, name)", "intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method .", "question_id": 1807}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "Node.toprettyxml()", "intent": "Return a pretty-printed version of the document .", "question_id": 12413}
{"snippet": "inspect.getcallargs(func, *args, **kwds)", "intent": "Bind the args and kwds to the argument names of the Python function or method `func` , as if it was called with them . whenever func ( `*args` , `**kwds` ) would raise an exception because of incompatible signature , an exception of the same type and the same or similar message is raised .", "question_id": 5019}
{"snippet": "os.path.splitdrive(path)", "intent": "Split the pathname `path` into a pair ( drive , tail ) where drive is either a mount point or the empty string .", "question_id": 7170}
{"snippet": "window.redrawwin()", "intent": "Touch the entire window , causing it to be completely redrawn on the next refresh ( ) call .", "question_id": 2105}
{"snippet": "sys_log_handler.emit(record)", "intent": "The `record` is formatted , and then sent to the syslog server .", "question_id": 5503}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802}
{"snippet": "FTP.connect(source_address=None)", "intent": "Connect to the given `host` and `port` . `source_address` is a 2-tuple ( host , port ) for the socket to bind to as its source address before connecting .", "question_id": 3908}
{"snippet": "base_http_request_handler.handle_expect_100()", "intent": "When a HTTP/1.1 compliant server receives an Expect : 100-continue request header it responds back with a 100 Continue followed by 200 OK headers .", "question_id": 4636}
{"snippet": "dbm.whichdb(filename)", "intent": "This function attempts to guess which of the several simple database modules available \u2014 dbm.gnu , dbm.ndbm or dbm.dumb \u2014 should be used to open a given file . With arguments `filename`.", "question_id": 2365}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235}
{"snippet": "shelve.Shelf(dict, writeback=False, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8250}
{"snippet": "auto.filename", "intent": "For exceptions that involve a file system path (such as open() or os.unlink()), filename is the file name passed to the function.", "question_id": 3657}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}
{"snippet": "xmlrpc.client.ServerProxy(uri, context=None)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . If an HTTPS URL is provided , `context` may be ssl.SSLContext and configures the SSL settings of the underlying HTTPS connection . With arguments `uri`.", "question_id": 12676}
{"snippet": "curses.flushinp()", "intent": "Flush all input buffers .", "question_id": 1936}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "sys.hash_info", "intent": "A named tuple giving parameters of the numeric hash implementation.", "question_id": 9813}
{"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}
{"snippet": "tkinter.tix.Form", "intent": "The Form geometry manager based on attachment rules for all Tk widgets.", "question_id": 10578}
{"snippet": "asyncio.FastChildWatcher", "intent": "This implementation reaps every terminated processes by calling os.waitpid(-1) directly, possibly breaking other code spawning processes and waiting for their termination.", "question_id": 389}
{"snippet": "winreg.KEY_NOTIFY", "intent": "Required to request change notifications for a registry key or for subkeys of a registry key.", "question_id": 12170}
{"snippet": "ssl.OP_CIPHER_SERVER_PREFERENCE", "intent": "Use the server\u2019s cipher ordering preference, rather than the client\u2019s.", "question_id": 8938}
{"snippet": "hashlib.algorithms_available", "intent": "A set containing the names of the hash algorithms that are available in the running Python interpreter.", "question_id": 4300}
{"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415}
{"snippet": "queue_listener.setLevel(level)", "intent": "Sets the threshold for this logger to `level` .", "question_id": 5566}
{"snippet": "re.X", "intent": "This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments.", "question_id": 7935}
{"snippet": "errno.EIDRM", "intent": "Identifier removed", "question_id": 3548}
{"snippet": "re.S", "intent": "Make the '.'", "question_id": 7933}
{"snippet": "os.utime(path, ns)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6959}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "modulefinder.ModuleFinder(excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6028}
{"snippet": "signal.pthread_kill(thread_id, signalnum)", "intent": "Send the signal `signalnum` to the thread `thread_id` , another thread in the same process as the caller .", "question_id": 8389}
{"snippet": "os.strerror(code)", "intent": "Return the error message corresponding to the error `code` in code .", "question_id": 6707}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2641}
{"snippet": "configparser.ConfigParser(':'), ';'), dict_type=collections.OrderedDict)", "intent": "The main configuration parser . When `dict_type` is given , it will be used to create the dictionary objects for the list of sections , for the options within a section , and for the default values . With arguments `':')`, `';')`.", "question_id": 1498}
{"snippet": "cursor.description", "intent": "This read-only attribute provides the column names of the last query.", "question_id": 8852}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "turtle.setheading(to_angle)", "intent": "Set the orientation of the turtle to `to_angle` .", "question_id": 10920}
{"snippet": "traceback_exception.format_exception_only()", "intent": "Format the exception part of the traceback .", "question_id": 10822}
{"snippet": "difflib.SequenceMatcher", "intent": "This is a flexible class for comparing pairs of sequences of any type, so long as the sequence elements are hashable.", "question_id": 2595}
{"snippet": "Template.clone()", "intent": "Return a new , equivalent , pipeline template .", "question_id": 7429}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "@test.support.requires_mac_version(*min_version)", "intent": "Decorator for the minimum version when running test on Mac OS X . With arguments `*min_version`.", "question_id": 10213}
{"snippet": "plistlib.dump(value, fp, skipkeys=False)", "intent": "Write `value` to a plist file . When `skipkeys` is false ( the default ) the function raises TypeError when a key of a dictionary is not a string , otherwise such keys are skipped . With arguments `fp`.", "question_id": 7566}
{"snippet": "site.ENABLE_USER_SITE", "intent": "Flag showing the status of the user site-packages directory.", "question_id": 8403}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371}
{"snippet": "exit_stack.pop_all()", "intent": "Transfers the callback stack to a fresh ExitStack instance and returns it .", "question_id": 1630}
{"snippet": "email.charset.add_codec(charset, codecname)", "intent": "Add a codec that map characters in the given character set to and from Unicode . `charset` is the canonical name of a character set . `codecname` is the name of a Python codec , as appropriate for the second argument to the str \u2019 s encode ( ) method .", "question_id": 2935}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "Pattern.groups", "intent": "The number of capturing groups in the pattern.", "question_id": 7992}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "json.JSONEncoder(allow_nan=True)", "intent": "Extensible JSON encoder for Python data structures . If `allow_nan` is true ( the default ) , then NaN , Infinity , and -Infinity will be encoded as such .", "question_id": 5326}
{"snippet": "calendar.TextCalendar()", "intent": "This class can be used to generate plain text calendars .", "question_id": 926}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "Dialect.doublequote", "intent": "Controls how instances of quotechar appearing inside a field should themselves be quoted.", "question_id": 1724}
{"snippet": "Request.add_unredirected_header(key, header)", "intent": "Add a `header` that will not be added to a redirected request . With arguments `key`.", "question_id": 11826}
{"snippet": "json_decoder.decode(s)", "intent": "Return the Python representation of `s` ( a str instance containing a JSON document ) .", "question_id": 5320}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "ArithmeticError", "intent": "The base class for those built-in exceptions that are raised for various arithmetic errors: OverflowError, ZeroDivisionError, FloatingPointError.", "question_id": 3632}
{"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_REP", "intent": "The model must occur zero or more times, as for A*.", "question_id": 7786}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952}
{"snippet": "collections.abc.AsyncGenerator", "intent": "ABC for asynchronous generator classes that implement the protocol defined in PEP 525 and PEP 492.", "question_id": 1334}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "xml.dom.NamespaceErr", "intent": "If an attempt is made to change any object in a way that is not permitted with regard to the Namespaces in XML recommendation, this exception is raised.", "question_id": 12389}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}
{"snippet": "gzip_file.mtime", "intent": "When decompressing, the value of the last modification time field in the most recently read header may be read from this attribute, as an integer.", "question_id": 4293}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573}
{"snippet": "directory.glob(pattern)", "intent": "Add a list of files to the current component as specified in the glob `pattern` .", "question_id": 6111}
{"snippet": "element_tree.write(file, default_namespace=None)", "intent": "Writes the element tree to a `file` , as XML . `default_namespace` sets the default XML namespace ( for \u201c xmlns \u201d ) .", "question_id": 12530}
{"snippet": "widget.parent(item)", "intent": "Returns the ID of the parent of `item` , or \u2018 \u2019 if item is at the top level of the hierarchy .", "question_id": 10646}
{"snippet": "PurePath.drive", "intent": "A string representing the drive letter or name, if any:", "question_id": 7244}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "codecs.replace_errors(exception)", "intent": "Implements the 'replace ' error handling ( for text encodings only ) : substitutes ' ? ' With arguments `exception`.", "question_id": 1256}
{"snippet": "doc_test.examples", "intent": "A list of Example objects encoding the individual interactive Python examples that should be run by this test.", "question_id": 2818}
{"snippet": "glob.escape(pathname)", "intent": "Escape all special characters ( ' ? With arguments `pathname`.", "question_id": 4268}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426}
{"snippet": "context.keys()", "intent": "Return a list of all variables in the context object .", "question_id": 1658}
{"snippet": "bdb.user_call(frame, argument_list)", "intent": "This method is called from dispatch_call ( ) when there is the possibility that a break might be necessary anywhere inside the called function . With arguments `frame`, `argument_list`.", "question_id": 780}
{"snippet": "typing.TYPE_CHECKING", "intent": "A special constant that is assumed to be True by 3rd party static type checkers.", "question_id": 11339}
{"snippet": "Option.help", "intent": "Help text to print for this option when listing all available options after the user supplies a help option (such as --help).", "question_id": 6636}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "fileinput.hook_encoded(encoding)", "intent": "Returns a hook which opens each file with open ( ) , using the given `encoding` and `errors` to read the file .", "question_id": 3811}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}
{"snippet": "semaphore.acquire(blocking=True)", "intent": "Acquire a semaphore . When invoked with `blocking` set to false , do not block .", "question_id": 10400}
{"snippet": "ctypes.pythonapi", "intent": "An instance of PyDLL that exposes Python C API functions as attributes.", "question_id": 1785}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "curses.ascii.isspace(c)", "intent": "Checks for ASCII white-space characters ; space , line feed , carriage return , form feed , horizontal tab , vertical tab . With arguments `c`.", "question_id": 1909}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "msvcrt.getwch()", "intent": "Wide char variant of getch ( ) , returning a Unicode value .", "question_id": 6157}
{"snippet": "curses.panel.top_panel()", "intent": "Returns the top panel in the panel stack .", "question_id": 2143}
{"snippet": "pool.apply_async(func)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`.", "question_id": 6339}
{"snippet": "subprocess.STARTUPINFO()", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation .", "question_id": 9625}
{"snippet": "turtle.begin_fill()", "intent": "To be called just before drawing a shape to be filled .", "question_id": 10965}
{"snippet": "base_server.socket_type", "intent": "The type of socket used by the server; socket.SOCK_STREAM and socket.SOCK_DGRAM are two common values.", "question_id": 8773}
{"snippet": "email.headerregistry.ParameterizedMIMEHeader", "intent": "MIME headers all start with the prefix \u2018Content-\u2018.", "question_id": 3167}
{"snippet": "mailbox.Error", "intent": "The based class for all other module-specific exceptions.", "question_id": 5856}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956}
{"snippet": "token.NL", "intent": "Token value used to indicate a non-terminating newline.", "question_id": 10699}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}
{"snippet": "smtp_server.channel_class", "intent": "Override this in subclasses to use a custom SMTPChannel for managing SMTP clients.", "question_id": 8423}
{"snippet": "str.zfill(width)", "intent": "Return a copy of the string left filled with ASCII ' 0 ' digits to make a string of length `width` .", "question_id": 9256}
{"snippet": "window.insdelln(nlines)", "intent": "Insert `nlines` lines into the specified window above the current line .", "question_id": 2075}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328}
{"snippet": "Panel.show()", "intent": "Display the panel ( which might have been hidden ) .", "question_id": 2153}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951}
{"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}
{"snippet": "loop.sendfile(transport, file, offset=0, fallback=True)", "intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file . `fallback` set to True makes asyncio to manually read and send the file when the platform does not support the sendfile system call ( e.g .", "question_id": 261}
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513}
{"snippet": "maildir.close()", "intent": "Maildir instances do not keep any open files and the underlying mailboxes do not support locking , so this method does nothing .", "question_id": 5766}
{"snippet": "text_io_wrapper.write_through", "intent": "Whether writes are passed immediately to the underlying binary buffer.", "question_id": 5157}
{"snippet": "urllib.parse.urlencode(query, doseq=False, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11738}
{"snippet": "ctypes.util.find_msvcrt()", "intent": "Windows only : return the filename of the VC runtime library used by Python , and by the extension modules .", "question_id": 1820}
{"snippet": "asyncio.wrap_future(future)", "intent": "Wrap a concurrent.futures.Future object in a asyncio.Future object . With arguments `future`.", "question_id": 357}
{"snippet": "csvreader.__next__()", "intent": "Return the next row of the reader \u2019 s iterable object as a list ( if the object was returned from reader ( ) ) or a dict ( if it is a DictReader instance ) , parsed according to the current dialect .", "question_id": 1731}
{"snippet": "xml.etree.ElementTree.fromstring(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12438}
{"snippet": "sys.settrace(tracefunc)", "intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "question_id": 9839}
{"snippet": "socket.getsockname()", "intent": "Return the socket \u2019 s own address .", "question_id": 8683}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "select.epoll()", "intent": "( Only supported on Linux 2.5.44 and newer . )", "question_id": 8150}
{"snippet": "cgihttp_request_handler.cgi_directories", "intent": "This defaults to ['/cgi-bin', '/htbin'] and describes directories to treat as containing CGI scripts.", "question_id": 4667}
{"snippet": "multiprocessing.ProcessError", "intent": "The base class of all multiprocessing exceptions.", "question_id": 6189}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "sys.exec_prefix", "intent": "A string giving the site-specific directory prefix where the platform-dependent Python files are installed; by default, this is also '/usr/local'.", "question_id": 9786}
{"snippet": "test_loader.loadTestsFromModule(module)", "intent": "Return a suite of all test cases contained in the given `module` .", "question_id": 11492}
{"snippet": "urllib.request.getproxies()", "intent": "This helper function returns a dictionary of scheme to proxy server URL mappings .", "question_id": 11767}
{"snippet": "ssl.OP_NO_COMPRESSION", "intent": "Disable compression on the SSL channel.", "question_id": 8942}
{"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271}
{"snippet": "env_builder.install_scripts(context, path)", "intent": "`path` is the path to a directory that should contain subdirectories \u201c common \u201d , \u201c posix \u201d , \u201c nt \u201d , each containing scripts destined for the bin directory in the environment . With arguments `context`.", "question_id": 11988}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "os.waitpid(pid, options)", "intent": "The details of this function differ on Unix and Windows . On Unix : Wait for completion of a child process given by process id `pid` , and return a tuple containing its process id and exit status indication ( encoded as for wait ( ) ) . The semantics of the call are affected by the value of the integer `options` , which should be 0 for normal operation .", "question_id": 7082}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "mock.mock_add_spec(spec)", "intent": "Add a `spec` to a mock .", "question_id": 11582}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "widget.tag_has(tagname)", "intent": "If `item` is specified , returns 1 or 0 depending on whether the specified item has the given `tagname` .", "question_id": 10668}
{"snippet": "turtle.Vec2D(x, y)", "intent": "A two-dimensional vector class , used as a helper class for implementing turtle graphics . With arguments `x`, `y`.", "question_id": 11167}
{"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415}
{"snippet": "urllib.parse.parse_qs(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11669}
{"snippet": "curses.ascii.unctrl(c)", "intent": "Return a string representation of the ASCII character c. If `c` is printable , this string is the character itself .", "question_id": 1917}
{"snippet": "widget.parent(item)", "intent": "Returns the ID of the parent of `item` , or \u2018 \u2019 if item is at the top level of the hierarchy .", "question_id": 10646}
{"snippet": "email.utils.mktime_tz(tuple)", "intent": "Turn a 10-tuple as returned by parsedate_tz ( ) into a UTC timestamp ( seconds since the Epoch ) . If the timezone item in the `tuple` is None , assume local time .", "question_id": 3467}
{"snippet": "multiprocessing.Value(typecode_or_type, *args)", "intent": "Return a ctypes object allocated from shared memory . `typecode_or_type` determines the type of the returned object : it is either a ctypes type or a one character typecode of the kind used by the array module . `*args` is passed on to the constructor for the type .", "question_id": 6265}
{"snippet": "Protocol.eof_received()", "intent": "Called when the other end signals it won \u2019 t send any more data ( for example by calling transport.write_eof ( ) , if the other end also uses asyncio ) .", "question_id": 436}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL", "intent": "There was an error parsing a text declaration in an external entity.", "question_id": 7814}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480}
{"snippet": "re.S", "intent": "Make the '.'", "question_id": 7933}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "mock.reset_mock(return_value=False)", "intent": "The reset_mock method resets all the call attributes on a mock object : In case you want to reset `return_value` or side_effect , then pass the corresponding parameter as True .", "question_id": 11579}
{"snippet": "executor.shutdown()", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing .", "question_id": 1445}
{"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038}
{"snippet": "Template.open(file, mode)", "intent": "Return a file-like object , open to `file` , but read from or written to by the pipeline . With arguments `mode`.", "question_id": 7433}
{"snippet": "multiprocessing.ProcessError", "intent": "The base class of all multiprocessing exceptions.", "question_id": 6189}
{"snippet": "platform.libc_ver()", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7537}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "os.RWF_NOWAIT", "intent": "Do not wait for data which is not immediately available.", "question_id": 6786}
{"snippet": "site.main()", "intent": "Adds all the standard site-specific directories to the module search path .", "question_id": 8406}
{"snippet": "decimal.copy_negate()", "intent": "Return the negation of the argument .", "question_id": 2409}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "system_random.pattern", "intent": "The regular expression pattern.", "question_id": 7966}
{"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004}
{"snippet": "aifc.getnchannels()", "intent": "Return the number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 11}
{"snippet": "netrc.hosts", "intent": "Dictionary mapping host names to (login, account, password) tuples.", "question_id": 6389}
{"snippet": "oss_audio_device.post()", "intent": "Tell the driver that there is likely to be a pause in the output , making it possible for the device to handle the pause more intelligently .", "question_id": 7190}
{"snippet": "widget.parent(item)", "intent": "Returns the ID of the parent of `item` , or \u2018 \u2019 if item is at the top level of the hierarchy .", "question_id": 10646}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}
{"snippet": "symbol_table.get_id()", "intent": "Return the table \u2019 s identifier .", "question_id": 9735}
{"snippet": "file_loader.path", "intent": "Path to the file of the module.", "question_id": 4837}
{"snippet": "widget.index(item)", "intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "question_id": 10639}
{"snippet": "test_case.assertIs(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11383}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE", "intent": "An attribute was used more than once in a start tag.", "question_id": 7792}
{"snippet": "ast.increment_lineno(node)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file .", "question_id": 153}
{"snippet": "condition.notify()", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 574}
{"snippet": "turtle.onrelease(fun, btn=1)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`.", "question_id": 11024}
{"snippet": "Node.appendChild(newChild)", "intent": "Add a new child node to this node at the end of the list of children , returning `newChild` .", "question_id": 12330}
{"snippet": "math.pi", "intent": "The mathematical constant \u03c0 = 3.141592\u2026, to available precision.", "question_id": 5934}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "server.close()", "intent": "Stop serving : close listening sockets and set the sockets attribute to None .", "question_id": 335}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "email.policy.compat32", "intent": "An instance of Compat32, providing  backward compatibility with the behavior of the email package in Python 3.2.", "question_id": 3451}
{"snippet": "xml.parsers.expat.ParserCreate(namespace_separator=None)", "intent": "Creates and returns a new xmlparser object . Expat can optionally do XML namespace processing for you , enabled by providing a value for `namespace_separator` .", "question_id": 7730}
{"snippet": "str.center(width)", "intent": "Return centered in a string of length `width` .", "question_id": 9181}
{"snippet": "FTP.getwelcome()", "intent": "Return the welcome message sent by the server in reply to the initial connection .", "question_id": 3914}
{"snippet": "zipfile.PyZipFile", "intent": "Class for creating ZIP archives containing Python libraries.", "question_id": 12782}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "context.quantize(x, y)", "intent": "Returns a value equal to `x` ( rounded ) , having the exponent of `y` .", "question_id": 2563}
{"snippet": "FileCookieJar.save()", "intent": "Save cookies to a file .", "question_id": 4498}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}
{"snippet": "incremental_encoder.getstate()", "intent": "Return the current state of the encoder which must be an integer .", "question_id": 1270}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "turtle.tiltangle(angle=None)", "intent": "Set or return the current tilt-angle . If `angle` is given , rotate the turtleshape to point in the direction specified by angle , regardless of its current tilt-angle .", "question_id": 11007}
{"snippet": "subprocess.check_call(args, stdin=None)", "intent": "Run command with arguments . With arguments `args`, `stdin`.", "question_id": 9670}
{"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338}
{"snippet": "Function.children", "intent": "A dictionary mapping names to descriptors for nested functions and classes.", "question_id": 7715}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "symbol.is_imported()", "intent": "Return True if the symbol is created from an import statement .", "question_id": 9756}
{"snippet": "xml.sax.handler.ErrorHandler", "intent": "Interface used by the parser to present error and warning messages to the application.", "question_id": 12567}
{"snippet": "json.loads(s, **kw)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5300}
{"snippet": "importlib.util.find_spec(name)", "intent": "Find the spec for a module , optionally relative to the specified `package` `name` .", "question_id": 4928}
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445}
{"snippet": "shutil.disk_usage(path)", "intent": "Return disk usage statistics about the given `path` as a named tuple with the attributes total , used and free , which are the amount of total , used and free space , in bytes .", "question_id": 8340}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "resource_reader.contents()", "intent": "Returns an iterable of strings over the contents of the package .", "question_id": 4822}
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630}
{"snippet": "resource.RLIMIT_DATA", "intent": "The maximum size (in bytes) of the process\u2019s heap.", "question_id": 8078}
{"snippet": "frame.lineno", "intent": "Line number (int).", "question_id": 10869}
{"snippet": "enum.unique()", "intent": "Enum class decorator that ensures only one name is bound to any one value .", "question_id": 3503}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "window.insnstr(str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "question_id": 2078}
{"snippet": "urllib.request.url2pathname(path)", "intent": "Convert the `path` component path from a percent-encoded URL to the local syntax for a path .", "question_id": 11766}
{"snippet": "bytes.decode(errors=\"strict\")", "intent": "Return a string decoded from the given bytes . `errors` may be given to set a different error handling scheme .", "question_id": 9277}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "SSLSocket.get_channel_binding()", "intent": "Get channel binding data for current connection , as a bytes object .", "question_id": 8982}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "decimal.as_integer_ratio()", "intent": "Return a pair ( n , d ) of integers that represent the given Decimal instance as a fraction , in lowest terms and with a positive denominator :", "question_id": 2396}
{"snippet": "audioop.lin2adpcm(fragment, width, state)", "intent": "Convert samples to 4 bit Intel/DVI ADPCM encoding . adpcmfrag is the ADPCM coded `fragment` packed 2 4-bit values per byte . `state` is a tuple containing the state of the coder . With arguments `width`.", "question_id": 692}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}
{"snippet": "str.splitlines(keepends)", "intent": "Return a list of the lines in the string , breaking at line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9245}
{"snippet": "contextlib.redirect_stdout(new_target)", "intent": "Context manager for temporarily redirecting sys.stdout to another file or file-like object . With arguments `new_target`.", "question_id": 1623}
{"snippet": "test.support.get_attribute(obj, name)", "intent": "Get an attribute , raising unittest.SkipTest if AttributeError is raised . With arguments `obj`, `name`.", "question_id": 10257}
{"snippet": "shlex.quotes", "intent": "Characters that will be considered string quotes.", "question_id": 8298}
{"snippet": "Class.module", "intent": "The name of the module defining the class described.", "question_id": 7717}
{"snippet": "window.leaveok(flag)", "intent": "If `flag` is True , cursor is left where it is on update , instead of being at \u201c cursor position. \u201d This reduces cursor movement where possible .", "question_id": 2092}
{"snippet": "@abc.abstractclassmethod", "intent": "A subclass of the built-in classmethod(), indicating an abstract classmethod.", "question_id": 5}
{"snippet": "tempfile.mkstemp(text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10075}
{"snippet": "datetime.utcnow()", "intent": "Return the current UTC date and time , with tzinfo None .", "question_id": 2260}
{"snippet": "formatter.check_unused_args(used_args, args, kwargs)", "intent": "Implement checking for unused arguments if desired . The arguments to this function is the set of all argument keys that were actually referred to in the format string ( integers for positional arguments , and strings for named arguments ) , and a reference to the `args` and `kwargs` that was passed to vformat . With arguments `used_args`.", "question_id": 9522}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "user_dict.data", "intent": "A real dictionary used to store the contents of the UserDict class.", "question_id": 1397}
{"snippet": "stream_reader.read()", "intent": "Read up to `n` bytes .", "question_id": 504}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "future.cancel()", "intent": "Cancel the Future and schedule callbacks .", "question_id": 369}
{"snippet": "charset.header_encode(string)", "intent": "Header-encode the `string` string .", "question_id": 2920}
{"snippet": "dispatcher.handle_expt()", "intent": "Called when there is out of band ( OOB ) data for a socket connection .", "question_id": 655}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716}
{"snippet": "unittest.mock.create_autospec(spec, **kwargs)", "intent": "Create a mock object using another object as a `spec` . With arguments `**kwargs`.", "question_id": 11649}
{"snippet": "configparser.ExtendedInterpolation", "intent": "An alternative handler for interpolation which implements a more advanced syntax, used for instance in zc.buildout.", "question_id": 1492}
{"snippet": "scheduler.enter(delay, priority, action)", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`.", "question_id": 8122}
{"snippet": "errno.ESHUTDOWN", "intent": "Cannot send after transport endpoint shutdown", "question_id": 3613}
{"snippet": "base_header.max_count", "intent": "The maximum number of headers of this type that can have the same name.", "question_id": 3153}
{"snippet": "DictWriter.writeheader()", "intent": "Write a row with the field names ( as specified in the constructor ) .", "question_id": 1738}
{"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951}
{"snippet": "resource.RLIMIT_AS", "intent": "The maximum area (in bytes) of address space which may be taken by the process.", "question_id": 8086}
{"snippet": "bound_arguments.apply_defaults()", "intent": "Set default values for missing arguments .", "question_id": 5007}
{"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "smtp_server.channel_class", "intent": "Override this in subclasses to use a custom SMTPChannel for managing SMTP clients.", "question_id": 8423}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140}
{"snippet": "shutil.which(cmd, mode=os.F_OK | os.X_OK)", "intent": "Return the `path` to an executable which would be run if the given `cmd` was called . `mode` is a permission mask passed to os.access ( ) , by default determining if the file exists and executable .", "question_id": 8346}
{"snippet": "re.S", "intent": "Make the '.'", "question_id": 7933}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}
{"snippet": "html_calendar.formatyear(theyear)", "intent": "Return a year \u2019 s calendar as an HTML table . With arguments `theyear`.", "question_id": 960}
{"snippet": "winsound.SND_MEMORY", "intent": "The sound parameter to PlaySound() is a memory image of a WAV file, as a bytes-like object.", "question_id": 12199}
{"snippet": "xmlrpc.server.SimpleXMLRPCServer(addr)", "intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor .", "question_id": 12712}
{"snippet": "random.gammavariate(alpha, beta)", "intent": "Gamma distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7911}
{"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}
{"snippet": "calendar.HTMLCalendar(firstweekday=0)", "intent": "This class can be used to generate HTML calendars . With arguments `firstweekday`.", "question_id": 957}
{"snippet": "i_pv4_network.exploded", "intent": "A string representation of the network, with the mask in prefix notation.", "question_id": 5200}
{"snippet": "pool.starmap_async(func, iterable)", "intent": "A combination of starmap ( ) and map_async ( ) that iterates over `iterable` of iterables and calls `func` with the iterables unpacked .", "question_id": 6355}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}
{"snippet": "html_calendar.cssclasses_weekday_head", "intent": "A list of CSS classes used for weekday names in the header row.", "question_id": 972}
{"snippet": "curses.baudrate()", "intent": "Return the output speed of the terminal in bits per second .", "question_id": 1920}
{"snippet": "resource.RUSAGE_SELF", "intent": "Pass to getrusage() to request resources consumed by the calling process, which is the sum of resources used by all threads in the process.", "question_id": 8097}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "joinable_queue.poll()", "intent": "Return whether there is any data available to be read .", "question_id": 6235}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827}
{"snippet": "config_parser.read_string(string)", "intent": "Parse configuration data from a `string` .", "question_id": 1516}
{"snippet": "tree_builder.start(tag, attrs)", "intent": "Opens a new element . `tag` is the element name . `attrs` is a dictionary containing element attributes .", "question_id": 12544}
{"snippet": "doctest.DocFileSuite(*paths, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2798}
{"snippet": "cmath.infj", "intent": "Complex number with zero real part and positive infinity imaginary part.", "question_id": 1124}
{"snippet": "time.CLOCK_MONOTONIC_RAW", "intent": "Similar to CLOCK_MONOTONIC, but provides access to a raw hardware-based time that is not subject to NTP adjustments.", "question_id": 10466}
{"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025}
{"snippet": "readline.get_begidx()", "intent": "Get the beginning or ending index of the completion scope .", "question_id": 8044}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371}
{"snippet": "doc_test.examples", "intent": "A list of Example objects encoding the individual interactive Python examples that should be run by this test.", "question_id": 2818}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_SEQ", "intent": "Models which represent a series of models which follow one after the other are indicated with this model type.", "question_id": 7782}
{"snippet": "element.findtext(match, default=None)", "intent": "Finds text for the first subelement matching `match` . Returns the text content of the first matching element , or `default` if no element was found .", "question_id": 12496}
{"snippet": "collections.deque(iterable, maxlen)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` . If `maxlen` is not specified or is None , deques may grow to an arbitrary length .", "question_id": 1350}
{"snippet": "turtle.clear()", "intent": "Delete all drawings and all turtles from the TurtleScreen .", "question_id": 11043}
{"snippet": "re.finditer(pattern, string)", "intent": "Return an iterator yielding match objects over all non-overlapping matches for the RE `pattern` in `string` .", "question_id": 7949}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "tracemalloc.get_object_traceback(obj)", "intent": "Get the traceback where the Python object `obj` was allocated .", "question_id": 10842}
{"snippet": "sys.implementation", "intent": "An object containing information about the implementation of the currently running Python interpreter.", "question_id": 9815}
{"snippet": "turtle.ondrag(fun, btn=1)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`.", "question_id": 11028}
{"snippet": "typing.cast(typ, val)", "intent": "Cast a value to a type . With arguments `typ`, `val`.", "question_id": 11323}
{"snippet": "mailbox.clear()", "intent": "Delete all messages from the mailbox .", "question_id": 5745}
{"snippet": "weakref.getweakrefs(object)", "intent": "Return a list of all weak reference and proxy objects which refer to `object` .", "question_id": 12080}
{"snippet": "html.entities.entitydefs", "intent": "A dictionary mapping XHTML 1.0 entity definitions to their replacement text in ISO Latin-1.", "question_id": 4343}
{"snippet": "readline.read_history_file()", "intent": "Load a readline history file , and append it to the history list .", "question_id": 8022}
{"snippet": "xmlparser.StartCdataSectionHandler()", "intent": "Called at the start of a CDATA section .", "question_id": 7770}
{"snippet": "xmlrpc.client.dumps(params, methodresponse=None, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12707}
{"snippet": "tabnanny.NannyNag", "intent": "Raised by process_tokens() if detecting an ambiguous indent.", "question_id": 9888}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761}
{"snippet": "context.keys()", "intent": "Return a list of all variables in the context object .", "question_id": 1658}
{"snippet": "xmlrpc.server.CGIXMLRPCRequestHandler()", "intent": "Create a new instance to handle XML-RPC requests in a CGI environment .", "question_id": 12722}
{"snippet": "logging.getLogger()", "intent": "Return a logger with the specified `name` or , if name is None , return a logger which is the root logger of the hierarchy .", "question_id": 5633}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "os.XATTR_SIZE_MAX", "intent": "The maximum size the value of an extended attribute can be.", "question_id": 7005}
{"snippet": "parameter.empty", "intent": "A special class-level marker to specify absence of default values and annotations.", "question_id": 4997}
{"snippet": "loop.call_exception_handler(context)", "intent": "Call the current event loop exception handler . `context` is a dict object containing the following keys ( new keys may be introduced in future Python versions ) :", "question_id": 310}
{"snippet": "shlex.commenters", "intent": "The string of characters that are recognized as comment beginners.", "question_id": 8294}
{"snippet": "turtle.back(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10905}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "sax2_dom.expandNode(node)", "intent": "Expands all children of `node` into node .", "question_id": 12433}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : With arguments `*paths`.", "question_id": 2797}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "tarfile.TarFile(dereference=False)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . If `dereference` is False , add symbolic and hard links to the archive .", "question_id": 9919}
{"snippet": "SMTP.starttls(keyfile=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext .", "question_id": 8527}
{"snippet": "winreg.HKEY_PERFORMANCE_DATA", "intent": "Registry entries subordinate to this key allow you to access performance data.", "question_id": 12159}
{"snippet": "aifc.getcomptype()", "intent": "Return a bytes array of length 4 describing the type of compression used in the audio file .", "question_id": 15}
{"snippet": "hash.hexdigest()", "intent": "Like digest ( ) except the digest is returned as a string object of double length , containing only hexadecimal digits .", "question_id": 4306}
{"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE", "intent": "An attribute was used more than once in a start tag.", "question_id": 7792}
{"snippet": "csv.reader(csvfile, **fmtparams, dialect='excel')", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . 1 An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1681}
{"snippet": "queue_listener.format(record)", "intent": "Do formatting for a `record` - if a formatter is set , use it .", "question_id": 5608}
{"snippet": "charset.__str__()", "intent": "Returns input_charset as a string coerced to lower case .", "question_id": 2923}
{"snippet": "webbrowser.open(url)", "intent": "Display `url` using the default browser .", "question_id": 12102}
{"snippet": "raw_io_base.readall()", "intent": "Read and return all the bytes from the stream until EOF , using multiple calls to the stream if necessary .", "question_id": 5086}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "locale.delocalize(string)", "intent": "Converts a `string` into a normalized number string , following the LC_NUMERIC settings .", "question_id": 5401}
{"snippet": "trace.Trace(countcallers=0)", "intent": "Create an object to `trace` execution of a single statement or expression . `countcallers` enables call relationship tracking .", "question_id": 10710}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "set.issubset(other)", "intent": "Test whether every element in the set is in `other` .", "question_id": 9439}
{"snippet": "text_calendar.prmonth(theyear, themonth)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`.", "question_id": 932}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "email.message_from_binary_file(fp)", "intent": "Return a message object structure tree from an open binary file object . This is equivalent to BytesParser ( ) .parse ( `fp` ) .", "question_id": 3400}
{"snippet": "socket.sendto(bytes, address)", "intent": "Send data to the socket . Return the number of `bytes` sent . The socket should not be connected to a remote socket , since the destination socket is specified by `address` .", "question_id": 8721}
{"snippet": "gettext.translation(domain)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "question_id": 4229}
{"snippet": "message.get_all(name, failobj=None)", "intent": "Return a list of all the values for the field named `name` . If there are no such named headers in the message , `failobj` is returned ( defaults to None ) .", "question_id": 2975}
{"snippet": "os.unsetenv(key)", "intent": "Unset ( delete ) the environment variable named `key` .", "question_id": 6711}
{"snippet": "errno.EBADFD", "intent": "File descriptor in bad state", "question_id": 3582}
{"snippet": "test.support.optim_args_from_interpreter_flags()", "intent": "Return a list of command line arguments reproducing the current optimization settings in sys.flags .", "question_id": 10172}
{"snippet": "frame.lineno", "intent": "Line number (int).", "question_id": 10869}
{"snippet": "window.instr(n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at y , x if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2085}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "__debug__", "intent": "This constant is true if Python was not started with an -O option.", "question_id": 1607}
{"snippet": "os.setxattr(path, attribute, value, follow_symlinks=True)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` . With arguments `follow_symlinks`.", "question_id": 7003}
{"snippet": "oss_audio_device.read(size)", "intent": "Read `size` bytes from the audio input and return them as a Python string .", "question_id": 7180}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}
{"snippet": "decimal.sqrt()", "intent": "Return the square root of the argument to full precision .", "question_id": 2476}
{"snippet": "writer.send_line_break()", "intent": "Break the current line .", "question_id": 3847}
{"snippet": "date.resolution", "intent": "The smallest possible difference between non-equal date objects, timedelta(days=1).", "question_id": 2225}
{"snippet": "Packer.pack_double(value)", "intent": "Packs the double-precision floating point number `value` .", "question_id": 12276}
{"snippet": "fnmatch.fnmatch(filename, pattern)", "intent": "Test whether the `filename` string matches the `pattern` string , returning True or False .", "question_id": 3813}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}
{"snippet": "str.isidentifier()", "intent": "Return true if the string is a valid identifier according to the language definition , section Identifiers and keywords .", "question_id": 9207}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630}
{"snippet": "tabnanny.NannyNag", "intent": "Raised by process_tokens() if detecting an ambiguous indent.", "question_id": 9888}
{"snippet": "doc_test.examples", "intent": "A list of Example objects encoding the individual interactive Python examples that should be run by this test.", "question_id": 2818}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "context.multiply(x, y)", "intent": "Return the product of `x` and `y` .", "question_id": 2554}
{"snippet": "gzip_file.peek(n)", "intent": "Read `n` uncompressed bytes without advancing the file position .", "question_id": 4292}
{"snippet": "Token.MISSING", "intent": "A marker object used by Token.old_value.", "question_id": 1647}
{"snippet": "NNTP.body(file=None)", "intent": "Same as article ( ) , but sends a BODY command . The lines returned ( or written to `file` ) will only contain the message body , not the headers .", "question_id": 6490}
{"snippet": "tarfile.TarFile(format=DEFAULT_FORMAT)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . `format` controls the archive format .", "question_id": 9917}
{"snippet": "nntp_ssl.response", "intent": "The response of the server if available, as a str object.", "question_id": 6440}
{"snippet": "window.hline(ch, n)", "intent": "Display a horizontal line starting at ( y , x ) with length `n` consisting of the character `ch` .", "question_id": 2064}
{"snippet": "startupinfo.dwFlags", "intent": "A bit field that determines whether certain STARTUPINFO attributes are used when the process creates a window.", "question_id": 9635}
{"snippet": "ArgumentParser.exit()", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 110}
{"snippet": "json.JSONEncoder(sort_keys=False)", "intent": "Extensible JSON encoder for Python data structures . If `sort_keys` is true ( default : False ) , then the output of dictionaries will be sorted by key ; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis .", "question_id": 5327}
{"snippet": "test.support.threading_cleanup(*original_values)", "intent": "Cleanup up threads not specified in original_values . With arguments `*original_values`.", "question_id": 10253}
{"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970}
{"snippet": "deque.extendleft(iterable)", "intent": "Extend the left side of the deque by appending elements from `iterable` .", "question_id": 1359}
{"snippet": "simple_http_request_handler.directory", "intent": "If not specified, the directory to serve is the current working directory.", "question_id": 4663}
{"snippet": "xml.etree.ElementTree.ProcessingInstruction(target)", "intent": "PI element factory . `target` is a string containing the PI target .", "question_id": 12448}
{"snippet": "Cookie.value", "intent": "Cookie value (a string), or None.", "question_id": 4559}
{"snippet": "gzip_file.mtime", "intent": "When decompressing, the value of the last modification time field in the most recently read header may be read from this attribute, as an integer.", "question_id": 4293}
{"snippet": "itertools.groupby(iterable)", "intent": "Make an iterator that returns consecutive keys and groups from the `iterable` .", "question_id": 5253}
{"snippet": "SMTP.verify(address)", "intent": "Check the validity of an `address` on this server using SMTP VRFY .", "question_id": 8521}
{"snippet": "date.fromisoformat(date_string)", "intent": "Return a date corresponding to a `date_string` in the format emitted by date.isoformat ( ) .", "question_id": 2222}
{"snippet": "unittest.installHandler()", "intent": "Install the control-c handler .", "question_id": 11555}
{"snippet": "tkinter.tix.ComboBox", "intent": "The ComboBox widget is similar to the combo box control in MS Windows.", "question_id": 10554}
{"snippet": "ctypes.util.find_msvcrt()", "intent": "Windows only : return the filename of the VC runtime library used by Python , and by the extension modules .", "question_id": 1820}
{"snippet": "asyncio.Task(coro, loop=None)", "intent": "A Future-like object that runs a Python coroutine . Event loops use cooperative scheduling : an event `loop` runs one Task at a time . With arguments `coro`.", "question_id": 625}
{"snippet": "robot_file_parser.safe", "intent": "The UUID was generated by the platform in a multiprocessing-safe way.", "question_id": 11934}
{"snippet": "filter(function, iterable)", "intent": "Construct an iterator from those elements of `iterable` for which `function` returns true .", "question_id": 4018}
{"snippet": "doctest.Example(source, want, options=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `options`.", "question_id": 2828}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "Document.createProcessingInstruction(target, data)", "intent": "Create and return a processing instruction node containing the `target` and `data` passed as parameters .", "question_id": 12349}
{"snippet": "context.divide_int(x, y)", "intent": "Return `x` divided by `y` , truncated to an integer .", "question_id": 2528}
{"snippet": "PermissionError", "intent": "Raised when trying to run an operation without the adequate access rights - for example filesystem permissions.", "question_id": 3698}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "tkinter.tix.LabelEntry", "intent": "The LabelEntry widget packages an entry widget and a label into one mega widget.", "question_id": 10556}
{"snippet": "test_loader.errors", "intent": "A list of the non-fatal errors encountered while loading tests.", "question_id": 11490}
{"snippet": "base_http_request_handler.rfile", "intent": "An io.BufferedIOBase input stream, ready to read from the start of the optional input data.", "question_id": 4625}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "FTP.storbinary(cmd, fp, rest=None)", "intent": "Store a file in binary transfer mode . `cmd` should be an appropriate STOR command : `` STOR filename '' . `fp` is a file object ( opened in binary mode ) which is read until EOF using its read ( ) method in blocks of size `blocksize` to provide the data to be stored . `rest` means the same thing as in the transfercmd ( ) method .", "question_id": 3936}
{"snippet": "secrets.token_urlsafe()", "intent": "Return a random URL-safe text string , containing `nbytes` random bytes .", "question_id": 8143}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}
{"snippet": "decimal.DivisionByZero", "intent": "Signals the division of a non-infinite number by zero.", "question_id": 2587}
{"snippet": "msilib.CAB(name)", "intent": "The class CAB represents a CAB file . `name` is the name of the CAB file in the MSI file .", "question_id": 6088}
{"snippet": "errno.EMLINK", "intent": "Too many links", "question_id": 3536}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "keyword.iskeyword(s)", "intent": "Return true if `s` is a Python keyword .", "question_id": 5341}
{"snippet": "terminal_size.columns", "intent": "Width of the terminal window in characters.", "question_id": 6814}
{"snippet": "POP3.dele(which)", "intent": "Flag message number `which` for deletion .", "question_id": 7612}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224}
{"snippet": "float.is_integer()", "intent": "Return True if the float instance is finite with integral value , and False otherwise :", "question_id": 9148}
{"snippet": "extension_file_loader.get_source(fullname)", "intent": "Returns None as extension modules do not have source code . With arguments `fullname`.", "question_id": 4910}
{"snippet": "text_calendar.prmonth(theyear, themonth, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 934}
{"snippet": "sqlite3.ProgrammingError", "intent": "Exception raised for programming errors, e.g.", "question_id": 8860}
{"snippet": "doctest.DocTestSuite(globs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "question_id": 2808}
{"snippet": "text_wrapper.max_lines", "intent": "(default: None) If not None, then the output will contain at most max_lines lines, with placeholder appearing at the end of the output.", "question_id": 10337}
{"snippet": "set -= other | ...", "intent": "Update the set, removing elements found in others.", "question_id": 9459}
{"snippet": "extension_file_loader.is_package(fullname)", "intent": "Returns True if the file path points to a package \u2019 s __init__ module based on EXTENSION_SUFFIXES . With arguments `fullname`.", "question_id": 4908}
{"snippet": "test_loader.suiteClass", "intent": "Callable object that constructs a test suite from a list of tests.", "question_id": 11505}
{"snippet": "subprocess.CompletedProcess", "intent": "The return value from run(), representing a process that has finished.", "question_id": 9577}
{"snippet": "asyncio.Lock(loop=None)", "intent": "Implements a mutex lock for asyncio tasks . With arguments `loop`.", "question_id": 559}
{"snippet": "@typing.no_type_check_decorator", "intent": "Decorator to give another decorator the no_type_check() effect.", "question_id": 11329}
{"snippet": "logging.getLevelName(level)", "intent": "Returns the textual representation of logging `level` level .", "question_id": 5647}
{"snippet": "pkgutil.ImpImporter()", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm .", "question_id": 7437}
{"snippet": "completed_process.stdout", "intent": "Captured stdout from the child process.", "question_id": 9580}
{"snippet": "ensurepip.bootstrap(upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3491}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : With arguments `*paths`.", "question_id": 2797}
{"snippet": "xml.sax.handler.all_features", "intent": "List of all features.", "question_id": 12568}
{"snippet": "cursor.description", "intent": "This read-only attribute provides the column names of the last query.", "question_id": 8852}
{"snippet": "loop.get_exception_handler()", "intent": "Return the current exception handler , or None if no custom exception handler was set .", "question_id": 308}
{"snippet": "POP3.apop(user, secret)", "intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "question_id": 7606}
{"snippet": "decimal.to_integral_value(rounding=None)", "intent": "Round to the nearest integer without signaling Inexact or Rounded . If given , applies `rounding` ; otherwise , uses the rounding method in either the supplied `context` or the current context .", "question_id": 2489}
{"snippet": "queue_listener.handle(record)", "intent": "Conditionally emits the specified logging `record` , depending on filters which may have been added to the handler .", "question_id": 5606}
{"snippet": "plistlib.dump(value, fp, sort_keys=True, skipkeys=False)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . When `skipkeys` is false ( the default ) the function raises TypeError when a key of a dictionary is not a string , otherwise such keys are skipped . With arguments `fp`.", "question_id": 7569}
{"snippet": "logging.getLevelName(level)", "intent": "Returns the textual representation of logging `level` level .", "question_id": 5647}
{"snippet": "dbm.open(file)", "intent": "Open the database `file` file and return a corresponding object .", "question_id": 2366}
{"snippet": "pickle.Unpickler(file)", "intent": "This takes a binary `file` for reading a pickle data stream .", "question_id": 7398}
{"snippet": "Panel.hide()", "intent": "Hide the panel .", "question_id": 2149}
{"snippet": "str.index(sub, start, end)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`, `start`, `end`.", "question_id": 9199}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "ordered_dict.popitem()", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair .", "question_id": 1391}
{"snippet": "str.startswith(prefix)", "intent": "Return True if string starts with the `prefix` , otherwise return False .", "question_id": 9249}
{"snippet": "stat.ST_MODE", "intent": "Inode protection mode.", "question_id": 9074}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "TarFile.extract(member, path=\"\", set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9944}
{"snippet": "audioop.minmax(fragment, width)", "intent": "Return a tuple consisting of the minimum and maximum values of all samples in the sound `fragment` . With arguments `width`.", "question_id": 698}
{"snippet": "message.del_param(param)", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3009}
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164}
{"snippet": "property(fdel=None)", "intent": "Return a property attribute . `fdel` is a function for deleting an attribute value .", "question_id": 4088}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "@unittest.skipIf(condition, reason)", "intent": "Skip the decorated test if `condition` is true . With arguments `reason`.", "question_id": 11359}
{"snippet": "zipfile.ZipFile", "intent": "The class for reading and writing ZIP files.", "question_id": 12781}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "urllib.request.HTTPErrorProcessor", "intent": "Process HTTP error responses.", "question_id": 11815}
{"snippet": "winreg.EnableReflectionKey(key)", "intent": "Restores registry reflection for the specified disabled `key` .", "question_id": 12153}
{"snippet": "bytes.decode(errors=\"strict\")", "intent": "Return a string decoded from the given bytes . `errors` may be given to set a different error handling scheme .", "question_id": 9277}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "xmlrpc.client.Fault", "intent": "A Fault object encapsulates the content of an XML-RPC fault tag.", "question_id": 12689}
{"snippet": "maildir.flush()", "intent": "All changes to Maildir mailboxes are immediately applied , so this method does nothing .", "question_id": 5763}
{"snippet": "asyncio.Future(loop=None)", "intent": "A Future represents an eventual result of an asynchronous operation . This way alternative event `loop` implementations can inject their own optimized implementations of a Future object .", "question_id": 360}
{"snippet": "base_request_handler.finish()", "intent": "Called after the handle ( ) method to perform any clean-up actions required .", "question_id": 8786}
{"snippet": "joinable_queue.poll()", "intent": "Return whether there is any data available to be read .", "question_id": 6235}
{"snippet": "DefaultCookiePolicy.strict_ns_unverifiable", "intent": "Apply RFC 2965 rules on unverifiable transactions even to Netscape cookies.", "question_id": 4548}
{"snippet": "queue_listener.emit(record)", "intent": "Do whatever it takes to actually log the specified logging `record` .", "question_id": 5609}
{"snippet": "dialog.checkbox(name, x, y, width, height, attributes, property, text, next_control)", "intent": "Add and return a CheckBox control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `property`, `text`, `next_control`.", "question_id": 6142}
{"snippet": "curses.killchar()", "intent": "Return the user \u2019 s current line kill character as a one-byte bytes object .", "question_id": 1951}
{"snippet": "ZipInfo.date_time", "intent": "The time and date of the last modification to the archive member.", "question_id": 12864}
{"snippet": "symbol_table.get_id()", "intent": "Return the table \u2019 s identifier .", "question_id": 9735}
{"snippet": "str.capitalize()", "intent": "Return a copy of the string with its first character capitalized and the rest lowercased .", "question_id": 9178}
{"snippet": "Unpacker.unpack_list(unpack_item)", "intent": "Unpacks and returns a list of homogeneous items . `unpack_item` is the function that is called to unpack the items .", "question_id": 12297}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946}
{"snippet": "decimal.max_mag(other)", "intent": "Similar to the max ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`.", "question_id": 2445}
{"snippet": "SMTP.docmd(cmd, args='')", "intent": "Send a command `cmd` to the server . The optional argument `args` is simply concatenated to the command , separated by a space .", "question_id": 8510}
{"snippet": "test.support.EnvironmentVarGuard", "intent": "Class used to temporarily set or unset environment variables.", "question_id": 10286}
{"snippet": "tabnanny.NannyNag", "intent": "Raised by process_tokens() if detecting an ambiguous indent.", "question_id": 9888}
{"snippet": "platform.python_implementation()", "intent": "Returns a string identifying the Python implementation .", "question_id": 7476}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "bz2.compress(data)", "intent": "Compress `data` , a bytes-like object .", "question_id": 906}
{"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220}
{"snippet": "prototype(vtbl_index, name)", "intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method .", "question_id": 1807}
{"snippet": "json.dumps(obj, **kw, separators=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `separators`.", "question_id": 5287}
{"snippet": "compileall.compile_path(skip_curdir=True)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search .", "question_id": 1430}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "queue_listener.propagate", "intent": "If this attribute evaluates to true, events logged to this logger will be passed to the handlers of higher level (ancestor) loggers, in addition to any handlers attached to this logger.", "question_id": 5565}
{"snippet": "os.sync()", "intent": "Force write of everything to disk .", "question_id": 6955}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941}
{"snippet": "unittest.mock.sentinel", "intent": "The sentinel object provides a convenient way of providing unique objects for your tests.", "question_id": 11645}
{"snippet": "platform.python_branch()", "intent": "Returns a string identifying the Python implementation SCM branch .", "question_id": 7475}
{"snippet": "memory_bio.write_eof()", "intent": "Write an EOF marker to the memory BIO .", "question_id": 9059}
{"snippet": "cgitb.handler()", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) .", "question_id": 1073}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "module_finder.run_script(pathname)", "intent": "Analyze the contents of the `pathname` file , which must contain Python code .", "question_id": 6056}
{"snippet": "deque.reverse()", "intent": "Reverse the elements of the deque in-place and then return None .", "question_id": 1367}
{"snippet": "formatter.add_line_break()", "intent": "Add a hard line break if one does not already exist .", "question_id": 3820}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578}
{"snippet": "xmlrpc.client.dumps(params, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12702}
{"snippet": "DAY_1 ... DAY_7", "intent": "Get the name of the n-th day of the week.", "question_id": 5359}
{"snippet": "test.support.TEST_DATA_DIR", "intent": "Set to the data directory within the test package.", "question_id": 10128}
{"snippet": "logging.config.listen()", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations .", "question_id": 5416}
{"snippet": "context.next_toward(x, y)", "intent": "Returns the number closest to `x` , in direction towards `y` .", "question_id": 2557}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_SYNTAX", "intent": "Some unspecified syntax error was encountered.", "question_id": 7801}
{"snippet": "InteractiveInterpreter.showsyntaxerror()", "intent": "Display the syntax error that just occurred .", "question_id": 1180}
{"snippet": "maildir.lock()", "intent": "Maildir mailboxes do not support ( or require ) locking , so these methods do nothing .", "question_id": 5764}
{"snippet": "extension_file_loader.get_source(fullname)", "intent": "Returns None as extension modules do not have source code . With arguments `fullname`.", "question_id": 4910}
{"snippet": "sys.getrecursionlimit()", "intent": "Return the current value of the recursion limit , the maximum depth of the Python interpreter stack .", "question_id": 9801}
{"snippet": "context.scaleb(x, y)", "intent": "Returns the first operand after adding the second value its exp . With arguments `x`, `y`.", "question_id": 2569}
{"snippet": "ConfigParser.SECTCRE", "intent": "A compiled regular expression used to parse section headers.", "question_id": 1495}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX", "intent": "An undeclared prefix was found when namespace processing was enabled.", "question_id": 7810}
{"snippet": "base_server.socket_type", "intent": "The type of socket used by the server; socket.SOCK_STREAM and socket.SOCK_DGRAM are two common values.", "question_id": 8773}
{"snippet": "socket.inet_pton(address_family, ip_string)", "intent": "Convert an IP address from its family-specific string format to a packed , binary format . Supported values for `address_family` are currently AF_INET and AF_INET6 . If the IP address string `ip_string` is invalid , OSError will be raised .", "question_id": 8663}
{"snippet": "str.center(width)", "intent": "Return centered in a string of length `width` .", "question_id": 9181}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480}
{"snippet": "pkgutil.walk_packages()", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules .", "question_id": 7449}
{"snippet": "header.append(s)", "intent": "Append the string `s` to the MIME header .", "question_id": 3126}
{"snippet": "compileall.compile_path(optimize=-1)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `optimize`.", "question_id": 1435}
{"snippet": "BufferedProtocol.get_buffer(sizehint)", "intent": "Called to allocate a new receive buffer . `sizehint` is the recommended minimum size for the returned buffer .", "question_id": 437}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478}
{"snippet": "mock.reset_mock()", "intent": "The reset_mock method resets all the call attributes on a mock object :", "question_id": 11578}
{"snippet": "uuid.UUID(is_safe=SafeUUID.unknown)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . With arguments `is_safe`.", "question_id": 11944}
{"snippet": "devpoll.poll()", "intent": "Polls the set of registered file descriptors , and returns a possibly-empty list containing ( fd , event ) 2-tuples for the descriptors that have events or errors to report .", "question_id": 8178}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "shelve.Shelf(dict, writeback=False, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8250}
{"snippet": "Dialect.doublequote", "intent": "Controls how instances of quotechar appearing inside a field should themselves be quoted.", "question_id": 1724}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "IMAP4.readonly", "intent": "This exception is raised when a writable mailbox has its status changed by the server.", "question_id": 4675}
{"snippet": "policy.linesep", "intent": "The string to be used to terminate lines in serialized output.", "question_id": 3414}
{"snippet": "queue.get_nowait()", "intent": "Return an item if one is immediately available , else raise QueueEmpty .", "question_id": 453}
{"snippet": "completed_process.args", "intent": "The arguments used to launch the process.", "question_id": 9578}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892}
{"snippet": "base_http_request_handler.sys_version", "intent": "Contains the Python system version, in a form usable by the version_string method and the server_version class variable.", "question_id": 4628}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "smtp_server.channel_class", "intent": "Override this in subclasses to use a custom SMTPChannel for managing SMTP clients.", "question_id": 8423}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF", "intent": "A character reference referred to a character which is illegal in XML (for example, character 0, or \u2018&#0;\u2019).", "question_id": 7790}
{"snippet": "format(value, format_spec)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4021}
{"snippet": "env_builder.setup_scripts(context)", "intent": "Installs activation scripts appropriate to the platform into the virtual environment . With arguments `context`.", "question_id": 11986}
{"snippet": "math.log1p(x)", "intent": "Return the natural logarithm of 1+x ( base e ) . The result is calculated in a way which is accurate for `x` near zero .", "question_id": 5909}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "turtle.exitonclick()", "intent": "Bind bye ( ) method to mouse clicks on the Screen .", "question_id": 11106}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298}
{"snippet": "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)", "intent": "Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , \u2026 `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .", "question_id": 7759}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`.", "question_id": 64}
{"snippet": "test.support.check_syntax_error(testcase, statement)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "question_id": 10231}
{"snippet": "inspect.ismethod(object)", "intent": "Return true if the `object` is a bound method written in Python .", "question_id": 4950}
{"snippet": "test.support.import_fresh_module(name, deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10245}
{"snippet": "codeop.compile_command(source, symbol=\"single\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . The `symbol` argument determines whether source is compiled as a statement ( 'single ' , the default ) or as an expression ( 'eval ' ) .", "question_id": 1306}
{"snippet": "Popen.wait()", "intent": "Wait for child process to terminate .", "question_id": 9610}
{"snippet": "widget.next(item)", "intent": "Returns the identifier of `item` \u2019 s next sibling , or \u2018 \u2019 if item is the last child of its parent .", "question_id": 10645}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757}
{"snippet": "compileall.compile_path(optimize=-1)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `optimize`.", "question_id": 1435}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529}
{"snippet": "Node.cloneNode(deep)", "intent": "Clone this node . Setting `deep` means to clone all child nodes as well .", "question_id": 12335}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "DOMImplementation.hasFeature(feature, version)", "intent": "Return true if the `feature` identified by the pair of strings feature and `version` is implemented .", "question_id": 12311}
{"snippet": "event.clear()", "intent": "Clear ( unset ) the event .", "question_id": 567}
{"snippet": "queue_listener.enqueue_sentinel()", "intent": "Writes a sentinel to the queue to tell the listener to quit .", "question_id": 5564}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919}
{"snippet": "ssl.OP_SINGLE_DH_USE", "intent": "Prevents re-use of the same DH key for distinct SSL sessions.", "question_id": 8939}
{"snippet": "NNTP.list(group_pattern=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` .", "question_id": 6466}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "Telnet.open(host)", "intent": "Connect to a `host` .", "question_id": 10020}
{"snippet": "symbol_table.get_identifiers()", "intent": "Return a list of names of symbols in this table .", "question_id": 9742}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "cursor.execute(sql)", "intent": "Executes an SQL statement . With arguments `sql`.", "question_id": 8841}
{"snippet": "shelve.Shelf(dict, writeback=False, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8250}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "unicodedata.lookup(name)", "intent": "Look up character by `name` .", "question_id": 11340}
{"snippet": "typing.Type(GenericCT_co)", "intent": "A variable annotated with C may accept a value of type C. In contrast , a variable annotated with Type [ C ] may accept values that are classes themselves \u2013 specifically , it will accept the class object of C. For example : With arguments `GenericCT_co`.", "question_id": 11231}
{"snippet": "telnetlib.Telnet()", "intent": "Telnet represents a connection to a Telnet server .", "question_id": 10005}
{"snippet": "json.loads(s, **kw)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5300}
{"snippet": "platform.libc_ver(chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7541}
{"snippet": "shelve.DbfilenameShelf(filename)", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object .", "question_id": 8260}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "stringprep.in_table_c6(code)", "intent": "Determine whether `code` is in tableC.6 ( Inappropriate for plain text ) .", "question_id": 9544}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "message.get_content_type()", "intent": "Return the message \u2019 s content type .", "question_id": 2978}
{"snippet": "oss_audio_device.mode", "intent": "The I/O mode for the file, either \"r\", \"rw\", or \"w\".", "question_id": 7200}
{"snippet": "syslog.syslog(priority, message)", "intent": "Send the string `message` to the system logger . Each message is tagged with a `priority` composed of a facility and a level .", "question_id": 9878}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "xml.etree.ElementTree.ProcessingInstruction(target, text=None)", "intent": "PI element factory . `target` is a string containing the PI target . `text` is a string containing the PI contents , if given .", "question_id": 12449}
{"snippet": "condition.notify_all()", "intent": "Wake up all tasks waiting on this condition .", "question_id": 577}
{"snippet": "winreg.LoadKey(key, sub_key, file_name)", "intent": "Creates a subkey under the specified `key` and stores registration information from a specified file into that subkey . `sub_key` is a string that identifies the subkey to load . `file_name` is the name of the file to load registry data from .", "question_id": 12137}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "decimal.Context(rounding=None)", "intent": "Creates a new context . The `rounding` option is one of the constants listed in the section Rounding Modes .", "question_id": 2501}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745}
{"snippet": "sync_manager.dict()", "intent": "Create a shared dict object and return a proxy for it .", "question_id": 6313}
{"snippet": "imp.C_EXTENSION", "intent": "The module was found as dynamically loadable shared library.", "question_id": 4776}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490}
{"snippet": "mh.get_file(key)", "intent": "Depending upon the host platform , it may not be possible to remove the underlying message while the returned file remains open . With arguments `key`.", "question_id": 5791}
{"snippet": "cursor.rowcount", "intent": "Although the Cursor class of the sqlite3 module implements this attribute, the database engine\u2019s own support for the determination of \u201crows affected\u201d/\u201drows selected\u201d is quirky.", "question_id": 8849}
{"snippet": "decimal.Clamped", "intent": "Altered an exponent to fit representation constraints.", "question_id": 2585}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "secrets.compare_digest(a, b)", "intent": "Return True if strings `a` and `b` are equal , otherwise False , in such a way as to reduce the risk of timing attacks .", "question_id": 8147}
{"snippet": "extension_file_loader.path", "intent": "Path to the extension module.", "question_id": 4905}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "stringprep.in_table_c21(code)", "intent": "Determine whether `code` is in tableC.2.1 ( ASCII control characters ) .", "question_id": 9538}
{"snippet": "logging.addLevelName(level, levelName)", "intent": "Associates `level` level with text `levelName` in an internal dictionary , which is used to map numeric levels to a textual representation , for example when a Formatter formats a message .", "question_id": 5646}
{"snippet": "xml.parsers.expat.errors.messages", "intent": "A dictionary mapping string descriptions to their error codes.", "question_id": 7788}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "datetime.replace(month=self.month)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `month`.", "question_id": 2286}
{"snippet": "style.layout(style)", "intent": "Define the widget layout for given `style` .", "question_id": 10681}
{"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831}
{"snippet": "email_message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3260}
{"snippet": "gc.get_referents(*objs)", "intent": "Return a list of objects directly referred to by any of the arguments . With arguments `*objs`.", "question_id": 4182}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "sys.platform", "intent": "This string contains a platform identifier that can be used to append platform-specific components to sys.path, for instance.", "question_id": 9830}
{"snippet": "UnboundLocalError", "intent": "Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.", "question_id": 3672}
{"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}
{"snippet": "socket.getprotobyname(protocolname)", "intent": "Translate an Internet protocol name ( for example , 'icmp ' ) to a constant suitable for passing as the ( optional ) third argument to the socket ( ) function . With arguments `protocolname`.", "question_id": 8652}
{"snippet": "context.to_sci_string(x)", "intent": "Converts a number to a string using scientific notation . With arguments `x`.", "question_id": 2575}
{"snippet": "Morsel.set(key, value, coded_value)", "intent": "Set the `key` , `value` and `coded_value` attributes .", "question_id": 4599}
{"snippet": "timeit.Timer()", "intent": "Class for timing execution speed of small code snippets .", "question_id": 10497}
{"snippet": "xmlparser.ordered_attributes", "intent": "Setting this attribute to a non-zero integer causes the attributes to be reported as a list rather than a dictionary.", "question_id": 7746}
{"snippet": "stream_reader.readline()", "intent": "Read one line , where \u201c line \u201d is a sequence of bytes ending with \\n .", "question_id": 506}
{"snippet": "mailbox.NotEmptyError", "intent": "Raised when a mailbox is not empty but is expected to be, such as when deleting a folder that contains messages.", "question_id": 5858}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543}
{"snippet": "condition.wait_for(predicate, timeout=None)", "intent": "Wait until a condition evaluates to true . `predicate` should be a callable which result will be interpreted as a boolean value . A `timeout` may be provided giving the maximum time to wait .", "question_id": 10393}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112}
{"snippet": "base_handler.sendfile()", "intent": "Override to implement platform-specific file transmission .", "question_id": 12267}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "signal.CTRL_C_EVENT", "intent": "The signal corresponding to the Ctrl+C keystroke event.", "question_id": 8376}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "writer.send_label_data(data)", "intent": "Set `data` to the left of the current left margin , if possible .", "question_id": 3852}
{"snippet": "errno.EBADE", "intent": "Invalid exchange", "question_id": 3557}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "instance.__class__", "intent": "The class to which a class instance belongs.", "question_id": 9500}
{"snippet": "sys._enablelegacywindowsfsencoding()", "intent": "Changes the default filesystem encoding and errors mode to \u2018 mbcs \u2019 and \u2018 replace \u2019 respectively , for consistency with versions of Python prior to 3.6 .", "question_id": 9843}
{"snippet": "mime_types.types_map_inv", "intent": "Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types.", "question_id": 5963}
{"snippet": "Cookie.rfc2109", "intent": "True if this cookie was received as an RFC 2109 cookie (ie.", "question_id": 4567}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "subprocess.TimeoutExpired", "intent": "Subclass of SubprocessError, raised when a timeout expires while waiting for a child process.", "question_id": 9587}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "fileinput.nextfile()", "intent": "Close the current file so that the next iteration will read the first line from the next file ( if any ) ; lines not read from the file will not count towards the cumulative line count .", "question_id": 3798}
{"snippet": "config_parser.read_string(string)", "intent": "Parse configuration data from a `string` .", "question_id": 1516}
{"snippet": "errno.EXDEV", "intent": "Cross-device link", "question_id": 3523}
{"snippet": "unicodedata.decomposition(chr)", "intent": "Returns the character decomposition mapping assigned to the character `chr` as string .", "question_id": 11354}
{"snippet": "text_wrapper.subsequent_indent", "intent": "(default: '') String that will be prepended to all lines of wrapped output except the first.", "question_id": 10333}
{"snippet": "widget.identify_element(x, y)", "intent": "Returns the element at position `x` , `y` .", "question_id": 10638}
{"snippet": "pickle.Pickler(file)", "intent": "This takes a binary `file` for writing a pickle data stream .", "question_id": 7390}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392}
{"snippet": "gzip_file.mtime", "intent": "When decompressing, the value of the last modification time field in the most recently read header may be read from this attribute, as an integer.", "question_id": 4293}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "element_tree.parse(source)", "intent": "Loads an external XML section into this element tree . `source` is a file name or file object .", "question_id": 12525}
{"snippet": "dict.keys()", "intent": "Return a new view of the dictionary \u2019 s keys .", "question_id": 9485}
{"snippet": "os.sched_get_priority_max(policy)", "intent": "Get the maximum priority value for `policy` .", "question_id": 7106}
{"snippet": "CookieJar.clear()", "intent": "Clear some cookies .", "question_id": 4496}
{"snippet": "random.uniform(a, b)", "intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "question_id": 7907}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "email_message.iter_attachments()", "intent": "Return an iterator over all of the immediate sub-parts of the message that are not candidate \u201c body \u201d parts .", "question_id": 3288}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "asyncio.get_event_loop()", "intent": "Get the current event loop .", "question_id": 179}
{"snippet": "widget.state()", "intent": "Modify or inquire widget state .", "question_id": 10595}
{"snippet": "xml.dom.DomstringSizeErr", "intent": "Raised when a specified range of text does not fit into a string.", "question_id": 12381}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "errno.ELIBACC", "intent": "Can not access a needed shared library", "question_id": 3584}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "os.pathsep", "intent": "The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows.", "question_id": 7126}
{"snippet": "cursor.rowcount", "intent": "Although the Cursor class of the sqlite3 module implements this attribute, the database engine\u2019s own support for the determination of \u201crows affected\u201d/\u201drows selected\u201d is quirky.", "question_id": 8849}
{"snippet": "msilib.schema", "intent": "This is the standard MSI schema for MSI 2.0, with the tables variable providing a list of table definitions, and _Validation_records providing the data for MSI validation.", "question_id": 6143}
{"snippet": "sys.meta_path", "intent": "A list of meta path finder objects that have their find_spec() methods called to see if one of the objects can find the module to be imported.", "question_id": 9825}
{"snippet": "threading.enumerate()", "intent": "Return a list of all Thread objects currently alive .", "question_id": 10344}
{"snippet": "socketserver.ForkingMixIn", "intent": "Forking and threading versions of each type of server can be created using these mix-in classes.", "question_id": 8753}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "parameterized_mime_header.params", "intent": "A dictionary mapping parameter names to parameter values.", "question_id": 3168}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013}
{"snippet": "xml.etree.ElementTree.XMLParser()", "intent": "This class is the low-level building block of the module .", "question_id": 12546}
{"snippet": "test.support.TestHandler(logging.handlers.BufferingHandler)", "intent": "Class for logging support . With arguments `logging.handlers.BufferingHandler`.", "question_id": 10297}
{"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}
{"snippet": "fileinput.filelineno()", "intent": "Return the line number in the current file .", "question_id": 3795}
{"snippet": "pickle.Pickler(file)", "intent": "This takes a binary `file` for writing a pickle data stream .", "question_id": 7390}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175}
{"snippet": "asyncio.wait(aws, loop=None)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 608}
{"snippet": "time.daylight", "intent": "Nonzero if a DST timezone is defined.", "question_id": 10473}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311}
{"snippet": "decimal.compare_total(other, context=None)", "intent": "Compare two operands using their abstract representation rather than their numerical value . This operation is unaffected by `context` and is quiet : no flags are changed and no rounding is performed . With arguments `other`.", "question_id": 2404}
{"snippet": "termios.tcflow(fd, action)", "intent": "Suspend or resume input or output on file descriptor `fd` . The `action` argument can be TCOOFF to suspend output , TCOON to restart output , TCIOFF to suspend input , or TCION to restart input .", "question_id": 10107}
{"snippet": "widget.prev(item)", "intent": "Returns the identifier of `item` \u2019 s previous sibling , or \u2018 \u2019 if item is the first child of its parent .", "question_id": 10647}
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "io.StringIO(newline='\\n')", "intent": "An in-memory stream for text I/O . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "question_id": 5166}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "time.CLOCK_MONOTONIC", "intent": "Clock that cannot be set and represents monotonic time since some unspecified starting point.", "question_id": 10465}
{"snippet": "email.headerregistry.HeaderRegistry(base_class=BaseHeader)", "intent": "This is the factory used by EmailPolicy by default . HeaderRegistry builds the class used to create a header instance dynamically , using `base_class` and a specialized class retrieved from a registry that it holds .", "question_id": 3176}
{"snippet": "loop.stop()", "intent": "Stop the event loop .", "question_id": 184}
{"snippet": "linecache.checkcache()", "intent": "Check the cache for validity .", "question_id": 5346}
{"snippet": "imp.get_tag()", "intent": "Return the PEP 3147 magic tag string matching this version of Python \u2019 s magic number , as returned by get_magic ( ) .", "question_id": 4770}
{"snippet": "pathlib.PureWindowsPath(*pathsegments)", "intent": "A subclass of PurePath , this path flavour represents Windows filesystem paths : With arguments `*pathsegments`.", "question_id": 7242}
{"snippet": "uuid.UUID(is_safe=SafeUUID.unknown)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . With arguments `is_safe`.", "question_id": 11944}
{"snippet": "tracemalloc.Traceback", "intent": "Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "question_id": 10894}
{"snippet": "sys.__interactivehook__", "intent": "When this attribute exists, its value is automatically called (with no arguments) when the interpreter is launched in interactive mode.", "question_id": 9817}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "loader.module_repr(module)", "intent": "A legacy method which when implemented calculates and returns the given `module` \u2019 s repr , as a string .", "question_id": 4817}
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175}
{"snippet": "ctypes.WinError(code=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `code` is not specified , GetLastError is called to determine the error code .", "question_id": 1837}
{"snippet": "socket_handler.send(packet)", "intent": "Send a pickled byte-string `packet` to the socket .", "question_id": 5488}
{"snippet": "queue.put_nowait(obj)", "intent": "Equivalent to put ( `obj` , False ) .", "question_id": 6203}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508}
{"snippet": "socket.gethostname()", "intent": "Return a string containing the hostname of the machine where the Python interpreter is currently executing .", "question_id": 8649}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929}
{"snippet": "inspect_loader.exec_module(module)", "intent": "Implementation of Loader.exec_module ( ) . With arguments `module`.", "question_id": 4831}
{"snippet": "UUID.bytes", "intent": "The UUID as a 16-byte string (containing the six integer fields in big-endian byte order).", "question_id": 11947}
{"snippet": "ZipInfo.extra", "intent": "Expansion field data.", "question_id": 12867}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992}
{"snippet": "oss_audio_device.mode", "intent": "The I/O mode for the file, either \"r\", \"rw\", or \"w\".", "question_id": 7200}
{"snippet": "socket.sendall(bytes)", "intent": "Send data to the socket . Unlike send ( ) , this method continues to send data from `bytes` until either all data has been sent or an error occurs .", "question_id": 8720}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136}
{"snippet": "statistics.median(data)", "intent": "Return the median ( middle value ) of numeric `data` , using the common \u201c mean of middle two \u201d method .", "question_id": 9127}
{"snippet": "Node.normalize()", "intent": "Join adjacent text nodes so that all stretches of text are stored as single Text instances .", "question_id": 12334}
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695}
{"snippet": "oss_audio_device.read(size)", "intent": "Read `size` bytes from the audio input and return them as a Python string .", "question_id": 7180}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705}
{"snippet": "text_wrapper.subsequent_indent", "intent": "(default: '') String that will be prepended to all lines of wrapped output except the first.", "question_id": 10333}
{"snippet": "errno.EISCONN", "intent": "Transport endpoint is already connected", "question_id": 3611}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302}
{"snippet": "template.substitute(mapping, **kwds)", "intent": "Performs the template substitution , returning a new string . `mapping` is any dictionary-like object with keys that match the placeholders in the template . With arguments `**kwds`.", "question_id": 9526}
{"snippet": "socket.makefile(mode='r')", "intent": "Return a file object associated with the socket . These arguments are interpreted the same way as by the built-in open ( ) function , except the only supported `mode` values are ' r ' ( default ) , ' w ' and ' b ' .", "question_id": 8692}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319}
{"snippet": "datetime.min", "intent": "The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None).", "question_id": 2269}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "NodeList.length", "intent": "The number of nodes in the sequence.", "question_id": 12337}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "stat.ST_ATIME", "intent": "Time of last access.", "question_id": 9081}
{"snippet": "ctypes.util.find_msvcrt()", "intent": "Windows only : return the filename of the VC runtime library used by Python , and by the extension modules .", "question_id": 1820}
{"snippet": "copy.copy(x)", "intent": "Return a shallow copy of `x` .", "question_id": 1661}
{"snippet": "epoll.fromfd(fd)", "intent": "Create an epoll object from a given file descriptor . With arguments `fd`.", "question_id": 8182}
{"snippet": "multiprocessing.cpu_count()", "intent": "Return the number of CPUs in the system .", "question_id": 6220}
{"snippet": "cgitb.handler()", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) .", "question_id": 1073}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409}
{"snippet": "test_case.assertSetEqual(first, second)", "intent": "Tests that two sets are equal . Fails if either of `first` or `second` does not have a set.difference ( ) method .", "question_id": 11458}
{"snippet": "str.isdigit()", "intent": "Return true if all characters in the string are digits and there is at least one character , false otherwise .", "question_id": 9206}
{"snippet": "contextvars.Context", "intent": "A mapping of ContextVars to their values.", "question_id": 1649}
{"snippet": "curses.reset_prog_mode()", "intent": "Restore the terminal to \u201c program \u201d mode , as previously saved by def_prog_mode ( ) .", "question_id": 1972}
{"snippet": "NamedNodeMap.length", "intent": "The length of the attribute list.", "question_id": 12374}
{"snippet": "test_case.setUpClass()", "intent": "A class method called before tests in an individual class are run .", "question_id": 11367}
{"snippet": "ctypes.pythonapi", "intent": "An instance of PyDLL that exposes Python C API functions as attributes.", "question_id": 1785}
{"snippet": "logging.config.fileConfig(fname, defaults=None)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "question_id": 5413}
{"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}
{"snippet": "datetime.utctimetuple()", "intent": "If datetime instance d is naive , this is the same as d.timetuple ( ) except that tm_isdst is forced to 0 regardless of what d.dst ( ) returns .", "question_id": 2300}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "queue.maxsize", "intent": "Number of items allowed in the queue.", "question_id": 449}
{"snippet": "cmd.Cmd()", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework .", "question_id": 1127}
{"snippet": "datetime.time", "intent": "An idealized time, independent of any particular day, assuming that every day has exactly 24*60*60 seconds (there is no notion of \u201cleap seconds\u201d here).", "question_id": 2199}
{"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700}
{"snippet": "os.terminal_size", "intent": "A subclass of tuple, holding (columns, lines) of the terminal window size.", "question_id": 6813}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992}
{"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826}
{"snippet": "nntplib.NNTPTemporaryError", "intent": "Exception raised when a response code in the range 400\u2013499 is received.", "question_id": 6442}
{"snippet": "xmlparser.EndNamespaceDeclHandler(prefix)", "intent": "Called when the closing tag is reached for an element that contained a namespace declaration . With arguments `prefix`.", "question_id": 7768}
{"snippet": "json.load(fp, **kw, cls=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . With arguments `**kw`.", "question_id": 5291}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "text_calendar.formatmonth(theyear, themonth)", "intent": "Return a month \u2019 s calendar in a multi-line string . With arguments `theyear`, `themonth`.", "question_id": 928}
{"snippet": "doctest.testfile(filename, verbose=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `verbose` prints lots of stuff if true , and prints only failures if false ; by default , or if None , it \u2019 s true if and only if '-v ' is in sys.argv .", "question_id": 2771}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "socket.makefile(mode='r')", "intent": "Return a file object associated with the socket . These arguments are interpreted the same way as by the built-in open ( ) function , except the only supported `mode` values are ' r ' ( default ) , ' w ' and ' b ' .", "question_id": 8692}
{"snippet": "pickle.dumps(obj)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file .", "question_id": 7367}
{"snippet": "csvreader.line_num", "intent": "The number of lines read from the source iterator.", "question_id": 1733}
{"snippet": "date.isocalendar()", "intent": "Return a 3-tuple , ( ISO year , ISO week number , ISO weekday ) .", "question_id": 2241}
{"snippet": "configparser.InterpolationDepthError", "intent": "Exception raised when string interpolation cannot be completed because the number of iterations exceeds MAX_INTERPOLATION_DEPTH.", "question_id": 1597}
{"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}
{"snippet": "SSLContext.load_cert_chain(certfile, keyfile=None, password=None)", "intent": "Load a private key and the corresponding certificate . The `certfile` string must be the path to a single file in PEM format containing the certificate as well as any number of CA certificates needed to establish the certificate \u2019 s authenticity . The `keyfile` string , if present , must point to a file containing the private key in . The `password` argument may be a function to call to get the password for decrypting the private key .", "question_id": 9000}
{"snippet": "asyncore.loop()", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed .", "question_id": 651}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "stringprep.in_table_c6(code)", "intent": "Determine whether `code` is in tableC.6 ( Inappropriate for plain text ) .", "question_id": 9544}
{"snippet": "operator.is_not(a, b)", "intent": "Return `a` is not `b` .", "question_id": 6529}
{"snippet": "ArgumentParser.parse_args(args=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 70}
{"snippet": "HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)", "intent": "Redirect to the Location : or URI : URL . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11851}
{"snippet": "ast.iter_fields(node)", "intent": "Yield a tuple of ( fieldname , value ) for each field in node._fields that is present on `node` .", "question_id": 156}
{"snippet": "turtle.undobufferentries()", "intent": "Return number of entries in the undobuffer .", "question_id": 11039}
{"snippet": "xmlrpc.client.dumps(params, methodresponse=None)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true .", "question_id": 12700}
{"snippet": "zlib.compress(data)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data .", "question_id": 12895}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}
{"snippet": "policy.linesep", "intent": "The string to be used to terminate lines in serialized output.", "question_id": 3414}
{"snippet": "queue.qsize()", "intent": "Return the approximate size of the queue .", "question_id": 6197}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "NotImplemented", "intent": "Special value which should be returned by the binary special methods (e.g.", "question_id": 1605}
{"snippet": "task.cancel()", "intent": "Request the Task to be cancelled .", "question_id": 626}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT", "intent": "Something other than whitespace occurred after the document element.", "question_id": 7794}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}
{"snippet": "ssl.SSLZeroReturnError", "intent": "A subclass of SSLError raised when trying to read or write and the SSL connection has been closed cleanly.", "question_id": 8876}
{"snippet": "xmlrpc.client.dumps(params, methodresponse=None, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12707}
{"snippet": "fractions.gcd(a, b)", "intent": "Return the greatest common divisor of the integers `a` and `b` .", "question_id": 3877}
{"snippet": "asyncore.dispatcher_with_send", "intent": "A dispatcher subclass which adds simple buffered output capability, useful for simple clients.", "question_id": 674}
{"snippet": "stat.ST_SIZE", "intent": "Size in bytes of a plain file; amount of data waiting on some special files.", "question_id": 9080}
{"snippet": "plistlib.dump(value, fp, sort_keys=True)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . With arguments `fp`.", "question_id": 7565}
{"snippet": "TarFile.gettarinfo()", "intent": "Create a TarInfo object from the result of os.stat ( ) or equivalent on an existing file .", "question_id": 9959}
{"snippet": "charset.__eq__(other)", "intent": "This method allows you to compare two Charset instances for equality . With arguments `other`.", "question_id": 2924}
{"snippet": "cgi.test()", "intent": "Robust test CGI script , usable as main program .", "question_id": 1052}
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630}
{"snippet": "typing.Collection(Sized)", "intent": "A generic version of collections.abc.Collection With arguments `Sized`.", "question_id": 11251}
{"snippet": "compileall.compile_file(fullname, legacy=False)", "intent": "Compile the file with path `fullname` . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1424}
{"snippet": "text_calendar.prmonth(theyear, themonth)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`.", "question_id": 932}
{"snippet": "email.message_from_binary_file(fp)", "intent": "Return a message object structure tree from an open binary file object . This is equivalent to BytesParser ( ) .parse ( `fp` ) .", "question_id": 3400}
{"snippet": "calendar.Calendar(firstweekday=0)", "intent": "Creates a Calendar object . `firstweekday` is an integer specifying the first day of the week .", "question_id": 910}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "i_pv4_network.subnets()", "intent": "The subnets that join to make the current network definition , depending on the argument values .", "question_id": 5208}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "oss_audio_device.read(size)", "intent": "Read `size` bytes from the audio input and return them as a Python string .", "question_id": 7180}
{"snippet": "@test.support.skip_unless_xattr", "intent": "A decorator for running tests that require support for xattr.", "question_id": 10206}
{"snippet": "sqlite3.ProgrammingError", "intent": "Exception raised for programming errors, e.g.", "question_id": 8860}
{"snippet": "Packer.pack_double(value)", "intent": "Packs the double-precision floating point number `value` .", "question_id": 12276}
{"snippet": "asyncio.Lock(loop=None)", "intent": "Implements a mutex lock for asyncio tasks . With arguments `loop`.", "question_id": 559}
{"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}
{"snippet": "email.utils.formatdate(localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3474}
{"snippet": "errno.EACCES", "intent": "Permission denied", "question_id": 3518}
{"snippet": "curses.beep()", "intent": "Emit a short attention sound .", "question_id": 1921}
{"snippet": "itertools.count()", "intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "question_id": 5246}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "html_calendar.cssclasses_weekday_head", "intent": "A list of CSS classes used for weekday names in the header row.", "question_id": 972}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "formatter.AbstractWriter", "intent": "A writer which can be used in debugging formatters, but not much else.", "question_id": 3854}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket .", "question_id": 9023}
{"snippet": "timeit.timeit()", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10476}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "os.RWF_DSYNC", "intent": "Provide a per-write equivalent of the O_DSYNC open(2) flag.", "question_id": 6791}
{"snippet": "coverage_results.write_results(summary=False, coverdir=None)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module . `coverdir` specifies the directory into which the coverage result files will be output .", "question_id": 10731}
{"snippet": "config_parser.get(section, option, raw=False)", "intent": "Get an `option` value for the named `section` . All the ' % ' interpolations are expanded in the return values , unless the `raw` argument is true .", "question_id": 1525}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037}
{"snippet": "smtpd.PureProxy(localaddr, remoteaddr)", "intent": "Create a new pure proxy server . Everything will be relayed to `remoteaddr` . With arguments `localaddr`.", "question_id": 8425}
{"snippet": "io.RawIOBase", "intent": "Base class for raw binary I/O.", "question_id": 5083}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}
{"snippet": "doctest.debug_src(src)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "question_id": 2890}
{"snippet": "queue_handler.enqueue(record)", "intent": "Enqueues the `record` on the queue using put_nowait ( ) ; you may want to override this if you want to use blocking behaviour , or a timeout , or a customized queue implementation .", "question_id": 5556}
{"snippet": "policy.header_source_parse(sourcelines)", "intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "question_id": 3423}
{"snippet": "socket.if_nameindex()", "intent": "Return a list of network interface information ( index int , name string ) tuples .", "question_id": 8670}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL", "intent": "There was an error parsing a text declaration in an external entity.", "question_id": 7814}
{"snippet": "zipfile.BadZipfile", "intent": "Alias of BadZipFile, for compatibility with older Python versions.", "question_id": 12779}
{"snippet": "mimetypes.read_mime_types(filename)", "intent": "Load the type map given in the file `filename` , if it exists .", "question_id": 5947}
{"snippet": "datetime.datetime", "intent": "A combination of a date and a time.", "question_id": 2200}
{"snippet": "tkinter.tix.ComboBox", "intent": "The ComboBox widget is similar to the combo box control in MS Windows.", "question_id": 10554}
{"snippet": "platform.python_branch()", "intent": "Returns a string identifying the Python implementation SCM branch .", "question_id": 7475}
{"snippet": "keyword.iskeyword(s)", "intent": "Return true if `s` is a Python keyword .", "question_id": 5341}
{"snippet": "InteractiveConsole.interact(banner=None)", "intent": "Closely emulate the interactive Python console . The optional `banner` argument specify the banner to print before the first interaction ; by default it prints a banner similar to the one printed by the standard Python interpreter , followed by the class name of the console object in parentheses ( so as not to confuse this with the real interpreter \u2013 since it \u2019 s so close !", "question_id": 1185}
{"snippet": "OptionParser.set_defaults()", "intent": "Set default values for several option destinations at once .", "question_id": 6647}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "AU_write.setnframes(n)", "intent": "Set the number of frames . With arguments `n`.", "question_id": 9724}
{"snippet": "xml.sax.handler.all_properties", "intent": "List of all known property names.", "question_id": 12569}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "SSLContext.set_ecdh_curve(curve_name)", "intent": "Set the curve name for Elliptic Curve-based Diffie-Hellman ( ECDH ) key exchange . The `curve_name` parameter should be a string describing a well-known elliptic curve , for example prime256v1 for a widely supported curve .", "question_id": 9021}
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "email.headerregistry.Address()", "intent": "The class used to represent an email address .", "question_id": 3186}
{"snippet": "io.BlockingIOError", "intent": "This is a compatibility alias for the builtin BlockingIOError exception.", "question_id": 5061}
{"snippet": "Popen.wait()", "intent": "Wait for child process to terminate .", "question_id": 9610}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "cgihttp_request_handler.cgi_directories", "intent": "This defaults to ['/cgi-bin', '/htbin'] and describes directories to treat as containing CGI scripts.", "question_id": 4667}
{"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}
{"snippet": "locale.CRNCYSTR", "intent": "Get the currency symbol, preceded by \u201c-\u201d if the symbol should appear before the value, \u201c+\u201d if the symbol should appear after the value, or \u201c.\u201d if the symbol should replace the radix character.", "question_id": 5367}
{"snippet": "os.path.normpath(path)", "intent": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a `path` that contains symbolic links .", "question_id": 7162}
{"snippet": "urllib.request.ProxyHandler()", "intent": "Cause requests to go through a proxy .", "question_id": 11784}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "test_result.addSubTest(test, subtest, outcome)", "intent": "Called when a `subtest` finishes . `test` is the test case corresponding to the test method . If `outcome` is None , the subtest succeeded .", "question_id": 11530}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "base_handler.origin_server", "intent": "This attribute should be set to a true value if the handler\u2019s _write() and _flush() are being used to communicate directly to the client, rather than via a CGI-like gateway protocol that wants the HTTP status in a special Status: header.", "question_id": 12268}
{"snippet": "task.result()", "intent": "Return the result of the Task .", "question_id": 629}
{"snippet": "window.immedok(flag)", "intent": "If `flag` is True , any change in the window image automatically causes the window to be refreshed ; you no longer have to call refresh ( ) yourself .", "question_id": 2068}
{"snippet": "BufferedProtocol.get_buffer(sizehint)", "intent": "Called to allocate a new receive buffer . `sizehint` is the recommended minimum size for the returned buffer .", "question_id": 437}
{"snippet": "Cookie.discard", "intent": "True if this is a session cookie.", "question_id": 4564}
{"snippet": "curses.curs_set(visibility)", "intent": "Set the cursor state . `visibility` can be set to 0 , 1 , or 2 , for invisible , normal , or very visible .", "question_id": 1926}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934}
{"snippet": "threading.settrace(func)", "intent": "Set a trace function for all threads started from the threading module . The `func` will be passed to sys.settrace ( ) for each thread , before its run ( ) method is called .", "question_id": 10346}
{"snippet": "tkinter.tix.PanedWindow", "intent": "The PanedWindow widget allows the user to interactively manipulate the sizes of several panes.", "question_id": 10574}
{"snippet": "urllib.request.build_opener()", "intent": "Return an OpenerDirector instance , which chains the handlers in the order given .", "question_id": 11764}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this turtle .", "question_id": 11019}
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "message.__getitem__(name)", "intent": "Return the value of the named header field . `name` should not include the colon field separator .", "question_id": 2966}
{"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351}
{"snippet": "inspect.isasyncgen(object)", "intent": "Return true if the `object` is an asynchronous generator iterator created by an asynchronous generator function .", "question_id": 4958}
{"snippet": "getpass.getuser()", "intent": "Return the \u201c login name \u201d of the user .", "question_id": 4209}
{"snippet": "contextvars.Context", "intent": "A mapping of ContextVars to their values.", "question_id": 1649}
{"snippet": "context.copy()", "intent": "Return a duplicate of the context .", "question_id": 2511}
{"snippet": "xml.etree.ElementTree.fromstringlist(sequence)", "intent": "Parses an XML document from a `sequence` of string fragments .", "question_id": 12439}
{"snippet": "nntplib.decode_header(header_str)", "intent": "Decode a header value , un-escaping any escaped non-ASCII characters . `header_str` must be a str object .", "question_id": 6502}
{"snippet": "compileall.compile_dir(dir, legacy=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1415}
{"snippet": "errno.EBFONT", "intent": "Bad font file format", "question_id": 3564}
{"snippet": "turtle.position()", "intent": "Return the turtle \u2019 s current location ( x , y ) ( as a Vec2D vector ) .", "question_id": 10936}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "doctest.DocTestRunner(verbose=None, optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `verbose` controls the DocTestRunner \u2019 s verbosity . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2867}
{"snippet": "io.FileIO(name, closefd=True)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : With arguments `closefd`.", "question_id": 5101}
{"snippet": "prototype(vtbl_index, name)", "intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method .", "question_id": 1807}
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835}
{"snippet": "socket.recvmsg_into(buffers)", "intent": "Receive normal data and ancillary data from the socket , behaving as recvmsg ( ) would , but scatter the non-ancillary data into a series of `buffers` instead of returning a new bytes object .", "question_id": 8710}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}
{"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}
{"snippet": "importlib.machinery.all_suffixes()", "intent": "Returns a combined list of strings representing all file suffixes for modules recognized by the standard import machinery .", "question_id": 4870}
{"snippet": "dis.Instruction", "intent": "Details for a bytecode operation", "question_id": 2733}
{"snippet": "turtle.clear()", "intent": "Delete all drawings and all turtles from the TurtleScreen .", "question_id": 11043}
{"snippet": "importlib.abc.MetaPathFinder", "intent": "An abstract base class representing a meta path finder.", "question_id": 4802}
{"snippet": "sys.exit()", "intent": "Exit from Python .", "question_id": 9789}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "csvreader.dialect", "intent": "A read-only description of the dialect in use by the parser.", "question_id": 1732}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445}
{"snippet": "test_case.assertMultiLineEqual(first, second, msg=None)", "intent": "Test that the multiline string `first` is equal to the string `second` . With arguments `msg`.", "question_id": 11449}
{"snippet": "int.bit_length()", "intent": "Return the number of bits necessary to represent an integer in binary , excluding the sign and leading zeros :", "question_id": 9142}
{"snippet": "collections.deque(iterable)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` .", "question_id": 1351}
{"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730}
{"snippet": "zipfile.ZipFile(file, mode='r')", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file .", "question_id": 12793}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "Path.write_bytes(data)", "intent": "Open the file pointed to in bytes mode , write `data` to it , and close the file :", "question_id": 7322}
{"snippet": "dispatcher.handle_connect()", "intent": "Called when the active opener \u2019 s socket actually makes a connection .", "question_id": 656}
{"snippet": "multiprocessing.set_executable()", "intent": "Sets the path of the Python interpreter to use when starting a child process .", "question_id": 6228}
{"snippet": "types.prepare_class(name, kwds=None)", "intent": "Calculates the appropriate metaclass and creates the class namespace . The arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) and the keyword arguments ( such as metaclass ) . The return value is a 3-tuple : metaclass , namespace , `kwds`", "question_id": 11180}
{"snippet": "UnboundLocalError", "intent": "Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.", "question_id": 3672}
{"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930}
{"snippet": "gzip_file.mtime", "intent": "When decompressing, the value of the last modification time field in the most recently read header may be read from this attribute, as an integer.", "question_id": 4293}
{"snippet": "text_io_base.read()", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5138}
{"snippet": "Panel.hide()", "intent": "Hide the panel .", "question_id": 2149}
{"snippet": "winreg.HKEY_CLASSES_ROOT", "intent": "Registry entries subordinate to this key define types (or classes) of documents and the properties associated with those types.", "question_id": 12155}
{"snippet": "concurrent.futures.ProcessPoolExecutor(mp_context=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `mp_context` can be a multiprocessing context or None .", "question_id": 1459}
{"snippet": "auto.args", "intent": "The tuple of arguments given to the exception constructor.", "question_id": 3629}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "math.pi", "intent": "The mathematical constant \u03c0 = 3.141592\u2026, to available precision.", "question_id": 5934}
{"snippet": "chunk.read()", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1090}
{"snippet": "tixCommand.tix_getbitmap(name)", "intent": "Locates a bitmap file of the `name` name.xpm or name in one of the bitmap directories ( see the tix_addbitmapdir ( ) method ) .", "question_id": 10583}
{"snippet": "sndhdr.what(filename)", "intent": "Determines the type of sound data stored in the file `filename` using whathdr ( ) .", "question_id": 8549}
{"snippet": "Popen.poll()", "intent": "Check if child process has terminated .", "question_id": 9609}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}
{"snippet": "datagram_handler.send(s)", "intent": "Send a pickled byte-string to a socket . With arguments `s`.", "question_id": 5493}
{"snippet": "Popen.poll()", "intent": "Check if child process has terminated .", "question_id": 9609}
{"snippet": "formatter.format(format_string, *args, **kwargs)", "intent": "The primary API method . With arguments `format_string`, `*args`, `**kwargs`.", "question_id": 9517}
{"snippet": "OptionParser.print_usage()", "intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "question_id": 6644}
{"snippet": "set - other - ...", "intent": "Return a new set with elements in the set that are not in the others.", "question_id": 9450}
{"snippet": "turtle.clearstamps()", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10931}
{"snippet": "itertools.compress(data, selectors)", "intent": "Make an iterator that filters elements from `data` returning only those that have a corresponding element in `selectors` that evaluates to True .", "question_id": 5245}
{"snippet": "MemoryError", "intent": "Raised when an operation runs out of memory but the situation may still be rescued (by deleting some objects).", "question_id": 3645}
{"snippet": "Codec.encode(input, errors)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "question_id": 1261}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "socket.has_ipv6", "intent": "This constant contains a boolean value which indicates if IPv6 is supported on this platform.", "question_id": 8607}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491}
{"snippet": "socket.sendfile(file, count=None)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 8734}
{"snippet": "mailbox.mbox(path, factory=None)", "intent": "A subclass of Mailbox for mailboxes in mbox format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . With arguments `path`.", "question_id": 5769}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "shlex.shlex(infile=None, punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The second optional argument is a filename string , which sets the initial value of the `infile` attribute . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8282}
{"snippet": "Path.is_dir()", "intent": "Return True if the path points to a directory ( or a symbolic link pointing to a directory ) , False if it points to another kind of file .", "question_id": 7273}
{"snippet": "os.getgroups()", "intent": "Return list of supplemental group ids associated with the current process .", "question_id": 6678}
{"snippet": "doctest.DONT_ACCEPT_BLANKLINE", "intent": "By default, if an expected output block contains a line containing only the string <BLANKLINE>, then that line will match a blank line in the actual output.", "question_id": 2753}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "subprocess.PIPE", "intent": "Special value that can be used as the stdin, stdout or stderr argument to Popen and indicates that a pipe to the standard stream should be opened.", "question_id": 9584}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038}
{"snippet": "asyncio.Queue(maxsize=0, loop=None)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite . With arguments `loop`.", "question_id": 448}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779}
{"snippet": "contextlib.nullcontext()", "intent": "Return a context manager that returns `enter_result` from __enter__ , but otherwise does nothing .", "question_id": 1620}
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014}
{"snippet": "stat.S_ISFIFO(mode)", "intent": "Return non-zero if the `mode` is from a FIFO ( named pipe ) .", "question_id": 9065}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706}
{"snippet": "turtle.update()", "intent": "Perform a TurtleScreen update .", "question_id": 11062}
{"snippet": "joinable_queue.recv_bytes()", "intent": "Return a complete message of byte data sent from the other end of the connection as a string .", "question_id": 6240}
{"snippet": "code.InteractiveConsole()", "intent": "Closely emulate the behavior of the interactive Python interpreter .", "question_id": 1157}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392}
{"snippet": "breakpoint.bpprint()", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 766}
{"snippet": "lzma.LZMAFile(filename=None)", "intent": "Open an LZMA-compressed file in binary `mode` . The `filename` argument specifies either the file object to wrap , or the name of the file to open ( as a str , bytes or path-like object ) .", "question_id": 5667}
{"snippet": "random.choices(population, weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7896}
{"snippet": "test_case.assertMultiLineEqual(first, second)", "intent": "Test that the multiline string `first` is equal to the string `second` .", "question_id": 11448}
{"snippet": "importlib.import_module(name, package=None)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g . If the name is specified in relative terms , then the `package` argument must be set to the name of the package which is to act as the anchor for resolving the package name ( e.g .", "question_id": 4794}
{"snippet": "resource.RUSAGE_BOTH", "intent": "Pass to getrusage() to request resources consumed by both the current process and child processes.", "question_id": 8099}
{"snippet": "urllib.request.CacheFTPHandler", "intent": "Open FTP URLs, keeping a cache of open FTP connections to minimize delays.", "question_id": 11813}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983}
{"snippet": "types.MethodType", "intent": "The type of methods of user-defined class instances.", "question_id": 11189}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "fileinput.hook_compressed(filename, mode)", "intent": "Transparently opens files compressed with gzip and bzip2 ( recognized by the extensions '.gz ' and '.bz2 ' ) using the gzip and bz2 modules . If the `filename` extension is not '.gz ' or '.bz2 ' , the file is opened normally ( ie , using open ( ) without any decompression ) . With arguments `mode`.", "question_id": 3810}
{"snippet": "asyncio.wait(aws, loop=None)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 608}
{"snippet": "test.support.TEST_DATA_DIR", "intent": "Set to the data directory within the test package.", "question_id": 10128}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934}
{"snippet": "xml.sax.handler.ErrorHandler", "intent": "Interface used by the parser to present error and warning messages to the application.", "question_id": 12567}
{"snippet": "task.add_done_callback(callback, context=None)", "intent": "Add a `callback` to be run when the Task is done . With arguments `context`.", "question_id": 632}
{"snippet": "timezone.utc", "intent": "The UTC timezone, timezone(timedelta(0)).", "question_id": 2363}
{"snippet": "ReadTransport.is_reading()", "intent": "Return True if the transport is receiving new data .", "question_id": 402}
{"snippet": "style.theme_use()", "intent": "If `themename` is not given , returns the theme in use .", "question_id": 10692}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}
{"snippet": "SSLContext.set_ecdh_curve(curve_name)", "intent": "Set the curve name for Elliptic Curve-based Diffie-Hellman ( ECDH ) key exchange . The `curve_name` parameter should be a string describing a well-known elliptic curve , for example prime256v1 for a widely supported curve .", "question_id": 9021}
{"snippet": "subprocess.DEVNULL", "intent": "Special value that can be used as the stdin, stdout or stderr argument to Popen and indicates that the special file os.devnull will be used.", "question_id": 9583}
{"snippet": "calendar.month(theyear, themonth, w=0, l=0)", "intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 1000}
{"snippet": "types.FunctionType", "intent": "The type of user-defined functions and functions created by lambda  expressions.", "question_id": 11183}
{"snippet": "winreg.HKEY_DYN_DATA", "intent": "This key is not used in versions of Windows after 98.", "question_id": 12161}
{"snippet": "xmlparser.XmlDeclHandler(version, encoding, standalone)", "intent": "Called when the XML declaration is parsed . The XML declaration is the ( optional ) declaration of the applicable `version` of the XML recommendation , the `encoding` of the document text , and an optional \u201c `standalone` \u201d declaration .", "question_id": 7755}
{"snippet": "str.ljust(width, fillchar)", "intent": "Return the string left justified in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "question_id": 9215}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}
{"snippet": "InteractiveConsole.interact(banner=None, exitmsg=None)", "intent": "Closely emulate the interactive Python console . The optional `banner` argument specify the banner to print before the first interaction ; by default it prints a banner similar to the one printed by the standard Python interpreter , followed by the class name of the console object in parentheses ( so as not to confuse this with the real interpreter \u2013 since it \u2019 s so close ! The optional `exitmsg` argument specifies an exit message printed when exiting .", "question_id": 1187}
{"snippet": "email.message_from_string(s)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) .", "question_id": 3404}
{"snippet": "platform.python_implementation()", "intent": "Returns a string identifying the Python implementation .", "question_id": 7476}
{"snippet": "@contextlib.contextmanager", "intent": "This function is a decorator that can be used to define a factory function for with statement context managers, without needing to create a class or separate __enter__() and __exit__() methods.", "question_id": 1617}
{"snippet": "Wave_write.setframerate(n)", "intent": "Set the frame rate to `n` .", "question_id": 12067}
{"snippet": "test_result.skipped", "intent": "A list containing 2-tuples of TestCase instances and strings holding the reason for skipping the test.", "question_id": 11510}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "counter.elements()", "intent": "Return an iterator over elements repeating each as many times as its count .", "question_id": 1342}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "ssl.OP_NO_COMPRESSION", "intent": "Disable compression on the SSL channel.", "question_id": 8942}
{"snippet": "joinable_queue.recv()", "intent": "Return an object sent from the other end of the connection using send ( ) .", "question_id": 6231}
{"snippet": "formatter.end_paragraph(blanklines)", "intent": "Close any open paragraphs and insert at least `blanklines` before the next paragraph .", "question_id": 3819}
{"snippet": "mock.call_count", "intent": "An integer telling you how many times the mock object has been called:", "question_id": 11589}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "types.GeneratorType", "intent": "The type of generator-iterator objects, created by generator functions.", "question_id": 11185}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "tkinter.tix.InputOnly", "intent": "The InputOnly widgets are to accept inputs from the user, which can be done with the bind command (Unix only).", "question_id": 10577}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "py_compile.compile(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . `invalidation_mode` should be a member of the PycInvalidationMode enum and controls how the generated bytecode cache is invalidated at runtime .", "question_id": 7826}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "@typing.type_check_only", "intent": "Decorator to mark a class or function to be unavailable at runtime.", "question_id": 11330}
{"snippet": "NNTP.date()", "intent": "Return a pair ( response , date ) .", "question_id": 6494}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "dbm.gnu.error", "intent": "Raised on dbm.gnu-specific errors, such as I/O errors.", "question_id": 2370}
{"snippet": "base_server.server_close()", "intent": "Clean up the server .", "question_id": 8766}
{"snippet": "os.get_inheritable(fd)", "intent": "Get the \u201c inheritable \u201d flag of the specified file descriptor ( a boolean ) . With arguments `fd`.", "question_id": 6816}
{"snippet": "mailbox.iterkeys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5729}
{"snippet": "Node.normalize()", "intent": "Join adjacent text nodes so that all stretches of text are stored as single Text instances .", "question_id": 12334}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}
{"snippet": "enum.IntFlag", "intent": "Base class for creating enumerated constants that can be combined using the bitwise operators without losing their IntFlag membership.", "question_id": 3501}
{"snippet": "email.utils.localtime()", "intent": "Return local time as an aware datetime object .", "question_id": 3452}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "modulefinder.ModuleFinder(path=None)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used .", "question_id": 6026}
{"snippet": "email_policy.fold(name, value)", "intent": "Header folding is controlled by the refold_source policy setting . A `value` is considered to be a \u2018 source value \u2019 if and only if it does not have a `name` attribute ( having a name attribute means it is a header object of some sort ) .", "question_id": 3437}
{"snippet": "subprocess.CREATE_NEW_CONSOLE", "intent": "The new process has a new console, instead of inheriting its parent\u2019s console (the default).", "question_id": 9647}
{"snippet": "sysconfig.get_python_version()", "intent": "Return the MAJOR.MINOR Python version number as a string .", "question_id": 9870}
{"snippet": "select.devpoll()", "intent": "( Only supported on Solaris and derivatives . )", "question_id": 8149}
{"snippet": "bz2_compressor.compress(data)", "intent": "Provide `data` to the compressor object .", "question_id": 898}
{"snippet": "SSLContext.wrap_socket(sock)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) .", "question_id": 9022}
{"snippet": "decimal.exp()", "intent": "Return the value of the ( natural ) exponential function e**x at the given number .", "question_id": 2412}
{"snippet": "codeop.compile_command(source, symbol=\"single\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . The `symbol` argument determines whether source is compiled as a statement ( 'single ' , the default ) or as an expression ( 'eval ' ) .", "question_id": 1306}
{"snippet": "dis.opname", "intent": "Sequence of operation names, indexable using the bytecode.", "question_id": 2742}
{"snippet": "non_callable_magic_mock.code", "intent": "An HTTP status code as defined in RFC 2616.", "question_id": 11661}
{"snippet": "spwd.getspnam(name)", "intent": "Return the shadow password database entry for the given user `name` .", "question_id": 8789}
{"snippet": "multiprocessing.AuthenticationError", "intent": "Raised when there is an authentication error.", "question_id": 6191}
{"snippet": "weakref.getweakrefs(object)", "intent": "Return a list of all weak reference and proxy objects which refer to `object` .", "question_id": 12080}
{"snippet": "oss_audio_device.read(size)", "intent": "Read `size` bytes from the audio input and return them as a Python string .", "question_id": 7180}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626}
{"snippet": "smtp_channel.peer", "intent": "Holds the name of the client peer as returned by conn.getpeername() where conn is conn.", "question_id": 8447}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947}
{"snippet": "test_suite.addTest(test)", "intent": "Add a TestCase or TestSuite to the suite . With arguments `test`.", "question_id": 11483}
{"snippet": "context.compare_signal(x, y)", "intent": "Compares the values of the two operands numerically . With arguments `x`, `y`.", "question_id": 2521}
{"snippet": "signature.replace()", "intent": "Create a new Signature instance based on the instance replace was invoked on .", "question_id": 4990}
{"snippet": "window.refresh(pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol)", "intent": "Update the display immediately ( sync actual screen with previous drawing/deleting methods ) . `pminrow` and `pmincol` specify the upper left-hand corner of the rectangle to be displayed in the pad . `sminrow` , `smincol` , `smaxrow` , and `smaxcol` specify the edges of the rectangle to be displayed on the screen .", "question_id": 2106}
{"snippet": "simple_http_request_handler.do_HEAD()", "intent": "This method serves the 'HEAD ' request type : it sends the headers it would send for the equivalent GET request .", "question_id": 4664}
{"snippet": "thread.getName()", "intent": "Old getter/setter API for name ; use it directly as a property instead .", "question_id": 10367}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "gettext.find(domain, languages=None)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code .", "question_id": 4223}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "queue_listener.close()", "intent": "Tidy up any resources used by the handler .", "question_id": 5605}
{"snippet": "array.itemsize", "intent": "The length in bytes of one array item in the internal representation.", "question_id": 119}
{"snippet": "Pattern.groupindex", "intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "question_id": 7993}
{"snippet": "ScrolledText.vbar", "intent": "The scroll bar widget.", "question_id": 10543}
{"snippet": "FTP.mlsd()", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) .", "question_id": 3947}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "str.startswith(prefix, start, end)", "intent": "Return True if string starts with the `prefix` , otherwise return False . With optional `start` , test string beginning at that position . With optional `end` , stop comparing string at that position .", "question_id": 9247}
{"snippet": "smtp_channel.rcpttos", "intent": "Holds a list of strings containing the addresses identified in the \u201cRCPT TO:\u201d lines from the client.", "question_id": 8444}
{"snippet": "enum.Flag", "intent": "Base class for creating enumerated constants that can be combined using the bitwise operations without losing their Flag membership.", "question_id": 3502}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490}
{"snippet": "faulthandler.enable()", "intent": "Enable the fault handler : install handlers for the SIGSEGV , SIGFPE , SIGABRT , SIGBUS and SIGILL signals to dump the Python traceback .", "question_id": 3716}
{"snippet": "math.remainder(x, y)", "intent": "Return the IEEE 754-style remainder of `x` with respect to `y` .", "question_id": 5903}
{"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298}
{"snippet": "signal.NSIG", "intent": "One more than the number of the highest signal number.", "question_id": 8378}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "writer.send_flowing_data(data)", "intent": "Output character `data` which may be word-wrapped and re-flowed as needed .", "question_id": 3850}
{"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}
{"snippet": "shlex.shlex(punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8277}
{"snippet": "SMTP.verify(address)", "intent": "Check the validity of an `address` on this server using SMTP VRFY .", "question_id": 8521}
{"snippet": "os.setxattr(path, attribute, value)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` .", "question_id": 7001}
{"snippet": "sequence_matcher.get_matching_blocks()", "intent": "Return list of triples describing non-overlapping matching subsequences .", "question_id": 2683}
{"snippet": "tkinter.tix.ComboBox", "intent": "The ComboBox widget is similar to the combo box control in MS Windows.", "question_id": 10554}
{"snippet": "email.message_from_string(s)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) .", "question_id": 3404}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "cmath.nan", "intent": "A floating-point \u201cnot a number\u201d (NaN) value.", "question_id": 1125}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943}
{"snippet": "base_handler.log_exception(exc_info)", "intent": "Log the `exc_info` tuple in the server log .", "question_id": 12260}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "FileCookieJar.save(ignore_discard=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4500}
{"snippet": "curses.resize_term(nlines, ncols)", "intent": "Backend function used by resizeterm ( ) , performing most of the work ; when resizing the windows , resize_term ( ) blank-fills the areas that are extended . With arguments `nlines`, `ncols`.", "question_id": 1975}
{"snippet": "SubprocessTransport.terminate()", "intent": "Stop the subprocess .", "question_id": 424}
{"snippet": "example.exc_msg", "intent": "The exception message generated by the example, if the example is expected to generate an exception; or None if it is not expected to generate an exception.", "question_id": 2836}
{"snippet": "http_handler.emit(record)", "intent": "Sends the `record` to the Web server as a URL-encoded dictionary .", "question_id": 5552}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "errno.EAGAIN", "intent": "Try again", "question_id": 3516}
{"snippet": "decimal.sqrt()", "intent": "Return the square root of the argument to full precision .", "question_id": 2476}
{"snippet": "readline.write_history_file()", "intent": "Save the history list to a readline history file , overwriting any existing file .", "question_id": 8024}
{"snippet": "context.power(x, y)", "intent": "Return `x` to the power of `y` , reduced `modulo` modulo if given .", "question_id": 2561}
{"snippet": "urllib.parse.parse_qs(qs, encoding='utf-8')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional `encoding` and errors parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method . With arguments `qs`.", "question_id": 11672}
{"snippet": "i_pv6_address.ipv4_mapped", "intent": "For addresses that appear to be IPv4 mapped addresses (starting with ::FFFF/96), this property will report the embedded IPv4 address.", "question_id": 5189}
{"snippet": "unittest.SkipTest(reason)", "intent": "This exception is raised to skip a test . With arguments `reason`.", "question_id": 11362}
{"snippet": "smtpd.PureProxy(localaddr, remoteaddr)", "intent": "Create a new pure proxy server . Everything will be relayed to `remoteaddr` . With arguments `localaddr`.", "question_id": 8425}
{"snippet": "curses.ascii.islower(c)", "intent": "Checks for an ASCII lower-case character . With arguments `c`.", "question_id": 1906}
{"snippet": "sys.maxsize", "intent": "An integer giving the maximum value a variable of type Py_ssize_t can take.", "question_id": 9823}
{"snippet": "os.waitpid(pid, options)", "intent": "The details of this function differ on Unix and Windows . On Unix : Wait for completion of a child process given by process id `pid` , and return a tuple containing its process id and exit status indication ( encoded as for wait ( ) ) . The semantics of the call are affected by the value of the integer `options` , which should be 0 for normal operation .", "question_id": 7082}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "xml.etree.ElementTree.ParseError", "intent": "XML parse error, raised by the various parsing methods in this module when parsing fails.", "question_id": 12561}
{"snippet": "itertools.compress(data, selectors)", "intent": "Make an iterator that filters elements from `data` returning only those that have a corresponding element in `selectors` that evaluates to True .", "question_id": 5245}
{"snippet": "subprocess.IDLE_PRIORITY_CLASS", "intent": "A Popen creationflags parameter to specify that a new process will have an idle (lowest) priority.", "question_id": 9652}
{"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592}
{"snippet": "zipfile.BadZipfile", "intent": "Alias of BadZipFile, for compatibility with older Python versions.", "question_id": 12779}
{"snippet": "DefaultCookiePolicy.strict_ns_domain", "intent": "Flags indicating how strict to be with domain-matching rules for Netscape cookies.", "question_id": 4549}
{"snippet": "Path.stat()", "intent": "Return information about this path ( similarly to os.stat ( ) ) .", "question_id": 7267}
{"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705}
{"snippet": "http.cookiejar.DefaultCookiePolicy(blocked_domains=None)", "intent": "Constructor arguments should be passed as keyword arguments only . `blocked_domains` is a sequence of domain names that we never accept cookies from , nor return cookies to .", "question_id": 4477}
{"snippet": "xml.etree.ElementTree.iterparse(source, events=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `events` is a sequence of events to report back .", "question_id": 12443}
{"snippet": "xml.etree.ElementTree.ParseError", "intent": "XML parse error, raised by the various parsing methods in this module when parsing fails.", "question_id": 12561}
{"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081}
{"snippet": "TabError", "intent": "Raised when indentation contains an inconsistent use of tabs and spaces.", "question_id": 3667}
{"snippet": "_c_data._b_base_", "intent": "Sometimes ctypes data instances do not own the memory block they contain, instead they share part of the memory block of a base object.", "question_id": 1850}
{"snippet": "resource.RLIMIT_RTTIME", "intent": "The time limit (in microseconds) on CPU time that a process can spend under real-time scheduling without making a blocking syscall.", "question_id": 8090}
{"snippet": "sys.getsizeof(object)", "intent": "Return the size of an `object` in bytes .", "question_id": 9803}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460}
{"snippet": "FTP.mlsd(path=\"\", facts=)", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed . `facts` is a list of strings representing the type of information desired ( e.g .", "question_id": 3950}
{"snippet": "resource.RLIMIT_MSGQUEUE", "intent": "The number of bytes that can be allocated for POSIX message queues.", "question_id": 8087}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "os.defpath", "intent": "The default search path used by exec*p* and spawn*p* if the environment doesn\u2019t have a 'PATH' key.", "question_id": 7127}
{"snippet": "bdb.set_return(frame)", "intent": "Stop when returning from the given `frame` .", "question_id": 787}
{"snippet": "timezone.utc", "intent": "The UTC timezone, timezone(timedelta(0)).", "question_id": 2363}
{"snippet": "subprocess.STARTUPINFO()", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation .", "question_id": 9625}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892}
{"snippet": "shlex.push_source(newstream)", "intent": "Push an input source stream onto the input stack . With arguments `newstream`.", "question_id": 8287}
{"snippet": "winreg.REG_DWORD_LITTLE_ENDIAN", "intent": "A 32-bit number in little-endian format.", "question_id": 12176}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "DTDHandler.notationDecl(name, publicId, systemId)", "intent": "Handle a notation declaration event . With arguments `name`, `publicId`, `systemId`.", "question_id": 12583}
{"snippet": "tkinter.tix.DirSelectBox", "intent": "The DirSelectBox is similar to the standard Motif(TM) directory-selection box.", "question_id": 10566}
{"snippet": "completed_process.stdout", "intent": "Captured stdout from the child process.", "question_id": 9580}
{"snippet": "_func_ptr.errcheck", "intent": "Assign a Python function or another callable to this attribute.", "question_id": 1789}
{"snippet": "zipfile.ZipFile(file)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object .", "question_id": 12792}
{"snippet": "msilib.Control(dlg, name)", "intent": "Base class of the dialog controls . `dlg` is the dialog object the control belongs to , and `name` is the control \u2019 s name .", "question_id": 6125}
{"snippet": "bytes_feed_parser.close()", "intent": "Complete the parsing of all previously fed data and return the root message object .", "question_id": 3367}
{"snippet": "errno.EADDRNOTAVAIL", "intent": "Cannot assign requested address", "question_id": 3604}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "Panel.hide()", "intent": "Hide the panel .", "question_id": 2149}
{"snippet": "loop.create_future()", "intent": "Create an asyncio.Future object attached to the event loop .", "question_id": 198}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761}
{"snippet": "bytes_feed_parser.close()", "intent": "Complete the parsing of all previously fed data and return the root message object .", "question_id": 3367}
{"snippet": "ssl.SSLCertVerificationError", "intent": "A subclass of SSLError raised when certificate validation has failed.", "question_id": 8881}
{"snippet": "inspect.ismethod(object)", "intent": "Return true if the `object` is a bound method written in Python .", "question_id": 4950}
{"snippet": "tkinter.tix.ListNoteBook", "intent": "The ListNoteBook widget is very similar to the TixNoteBook widget: it can be used to display many windows in a limited space using a notebook metaphor.", "question_id": 10575}
{"snippet": "json.JSONDecoder(parse_float=None)", "intent": "Simple JSON decoder . `parse_float` , if specified , will be called with the string of every JSON float to be decoded .", "question_id": 5312}
{"snippet": "nis.cat(mapname)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value .", "question_id": 6393}
{"snippet": "somenamedtuple._make(iterable)", "intent": "Class method that makes a new instance from an existing sequence or `iterable` .", "question_id": 1384}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "str.islower()", "intent": "Return true if all cased characters 4 in the string are lowercase and there is at least one cased character , false otherwise .", "question_id": 9208}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929}
{"snippet": "timedelta.resolution", "intent": "The smallest possible difference between non-equal timedelta objects, timedelta(microseconds=1).", "question_id": 2216}
{"snippet": "configparser.ExtendedInterpolation", "intent": "An alternative handler for interpolation which implements a more advanced syntax, used for instance in zc.buildout.", "question_id": 1492}
{"snippet": "errno.EMFILE", "intent": "Too many open files", "question_id": 3529}
{"snippet": "widget.selection_toggle(*items)", "intent": "Toggle the selection state of each item in items . With arguments `*items`.", "question_id": 10657}
{"snippet": "semaphore.acquire(blocking=True, timeout=None)", "intent": "Acquire a semaphore . When invoked with `blocking` set to false , do not block . When invoked with a `timeout` other than None , it will block for at most timeout seconds .", "question_id": 10402}
{"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}
{"snippet": "tracemalloc.start()", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators .", "question_id": 10847}
{"snippet": "readline.get_begidx()", "intent": "Get the beginning or ending index of the completion scope .", "question_id": 8044}
{"snippet": "multiprocessing.set_executable()", "intent": "Sets the path of the Python interpreter to use when starting a child process .", "question_id": 6228}
{"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460}
{"snippet": "zlib.compressobj()", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once .", "question_id": 12907}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "Template.reset()", "intent": "Restore a pipeline template to its initial state .", "question_id": 7428}
{"snippet": "xml.parsers.expat.model.XML_CQUANT_OPT", "intent": "The model is optional: it can appear once or not at all, as for A?.", "question_id": 7784}
{"snippet": "numbers.Real", "intent": "To Complex, Real adds the operations that work on real numbers.", "question_id": 6508}
{"snippet": "user_dict.data", "intent": "A real dictionary used to store the contents of the UserDict class.", "question_id": 1397}
{"snippet": "ipaddress.v6_int_to_packed(address)", "intent": "Represent an `address` as 16 packed bytes in network ( big-endian ) order .", "question_id": 5233}
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser(), exclude_empty=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "question_id": 2849}
{"snippet": "formatter.add_line_break()", "intent": "Add a hard line break if one does not already exist .", "question_id": 3820}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "base_handler.os_environ", "intent": "The default environment variables to be included in every request\u2019s WSGI environment.", "question_id": 12256}
{"snippet": "str.startswith(prefix, start, end)", "intent": "Return True if string starts with the `prefix` , otherwise return False . With optional `start` , test string beginning at that position . With optional `end` , stop comparing string at that position .", "question_id": 9247}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}
{"snippet": "compileall.compile_file(fullname, legacy=False)", "intent": "Compile the file with path `fullname` . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1424}
{"snippet": "asyncio.Task(coro, loop=None)", "intent": "A Future-like object that runs a Python coroutine . Event loops use cooperative scheduling : an event `loop` runs one Task at a time . With arguments `coro`.", "question_id": 625}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360}
{"snippet": "widget.get_children()", "intent": "Returns the list of children belonging to `item` .", "question_id": 10622}
{"snippet": "@test.support.requires_freebsd_version(*min_version)", "intent": "Decorator for the minimum version when running test on FreeBSD . With arguments `*min_version`.", "question_id": 10211}
{"snippet": "null_translations.info()", "intent": "Return the \u201c protected \u201d _info variable , a dictionary containing the metadata found in the message catalog file .", "question_id": 4254}
{"snippet": "nntplib.NNTPProtocolError", "intent": "Exception raised when a reply is received from the server that does not begin with a digit in the range 1\u20135.", "question_id": 6444}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "locale.currency(val, grouping=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `grouping` is true ( which is not the default ) , grouping is done with the value .", "question_id": 5394}
{"snippet": "tkinter.tix.LabelEntry", "intent": "The LabelEntry widget packages an entry widget and a label into one mega widget.", "question_id": 10556}
{"snippet": "socket.getfqdn(name)", "intent": "Return a fully qualified domain `name` for name .", "question_id": 8645}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}
{"snippet": "smtplib.SMTPConnectError", "intent": "Error occurred during establishment of a connection  with the server.", "question_id": 8504}
{"snippet": "FTP_TLS.ccc()", "intent": "Revert control channel back to plaintext .", "question_id": 3970}
{"snippet": "writer.new_spacing(spacing)", "intent": "Set the `spacing` style to spacing .", "question_id": 3845}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503}
{"snippet": "Repr.maxdict", "intent": "Limits on the number of entries represented for the named object type.", "question_id": 8056}
{"snippet": "shutil.copystat(src, dst, follow_symlinks=True)", "intent": "Copy the permission bits , last access time , last modification time , and flags from `src` to `dst` . If `follow_symlinks` is false , and src and dst both refer to symbolic links , copystat ( ) will operate on the symbolic links themselves rather than the files the symbolic links refer to\u2014reading the information from the src symbolic link , and writing the information to the dst symbolic link .", "question_id": 8317}
{"snippet": "_func_ptr.errcheck", "intent": "Assign a Python function or another callable to this attribute.", "question_id": 1789}
{"snippet": "HTTPConnection.getresponse()", "intent": "Should be called after a request is sent to get the response from the server .", "question_id": 4435}
{"snippet": "locale.ERA_T_FMT", "intent": "Get a format string for time.strftime() to represent a time in a locale-specific era-based way.", "question_id": 5371}
{"snippet": "multiprocessing.active_children()", "intent": "Return list of all live children of the current process .", "question_id": 6219}
{"snippet": "gc.get_referrers(*objs)", "intent": "Return the list of objects that directly refer to any of objs . With arguments `*objs`.", "question_id": 4181}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "email.utils.localtime()", "intent": "Return local time as an aware datetime object .", "question_id": 3452}
{"snippet": "test.support.CleanImport(*module_names)", "intent": "A context manager to force import to return a new module reference . With arguments `*module_names`.", "question_id": 10290}
{"snippet": "email.policy.compat32", "intent": "An instance of Compat32, providing  backward compatibility with the behavior of the email package in Python 3.2.", "question_id": 3451}
{"snippet": "asyncio.Condition()", "intent": "A Condition object .", "question_id": 569}
{"snippet": "AU_write.writeframes(data)", "intent": "Write audio frames and make sure nframes is correct . With arguments `data`.", "question_id": 9729}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499}
{"snippet": "contextlib.AbstractContextManager", "intent": "An abstract base class for classes that implement object.__enter__() and object.__exit__().", "question_id": 1615}
{"snippet": "test_case.records", "intent": "A list of logging.LogRecord objects of the matching log messages.", "question_id": 11415}
{"snippet": "getopt.error", "intent": "Alias for GetoptError; for backward compatibility.", "question_id": 4203}
{"snippet": "config_parser.getboolean(section, option, fallback)", "intent": "A convenience method which coerces the `option` in the specified `section` to a Boolean value . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "question_id": 1544}
{"snippet": "widget.parent(item)", "intent": "Returns the ID of the parent of `item` , or \u2018 \u2019 if item is at the top level of the hierarchy .", "question_id": 10646}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139}
{"snippet": "glob.iglob(pathname)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`.", "question_id": 4266}
{"snippet": "datetime.timestamp()", "intent": "Return POSIX timestamp corresponding to the datetime instance .", "question_id": 2302}
{"snippet": "decimal.max_mag(other)", "intent": "Similar to the max ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`.", "question_id": 2445}
{"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139}
{"snippet": "shutil.which(cmd, mode=os.F_OK | os.X_OK)", "intent": "Return the `path` to an executable which would be run if the given `cmd` was called . `mode` is a permission mask passed to os.access ( ) , by default determining if the file exists and executable .", "question_id": 8346}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}
{"snippet": "tkinter.ttk.Style", "intent": "This class is used to manipulate the style database.", "question_id": 10672}
{"snippet": "subprocess.DEVNULL", "intent": "Special value that can be used as the stdin, stdout or stderr argument to Popen and indicates that the special file os.devnull will be used.", "question_id": 9583}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "subprocess.check_call(args, stdout=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`.", "question_id": 9671}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "urllib.parse.quote_plus(string, safe='')", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` .", "question_id": 11714}
{"snippet": "site.getsitepackages()", "intent": "Return a list containing all global site-packages directories .", "question_id": 8409}
{"snippet": "ast.dump(node)", "intent": "Return a formatted dump of the tree in `node` .", "question_id": 163}
{"snippet": "os.preadv(fd, buffers, offset)", "intent": "Read from a file descriptor `fd` at a position of `offset` into mutable bytes-like objects `buffers` , leaving the file offset unchanged .", "question_id": 6784}
{"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "i_pv4_address.packed", "intent": "The binary representation of this address - a bytes object of the appropriate length (most significant octet first).", "question_id": 5178}
{"snippet": "context.max(x, y)", "intent": "Compares two values numerically and returns the maximum . With arguments `x`, `y`.", "question_id": 2549}
{"snippet": "charset.__eq__(other)", "intent": "This method allows you to compare two Charset instances for equality . With arguments `other`.", "question_id": 2924}
{"snippet": "errno.ECONNABORTED", "intent": "Software caused connection abort", "question_id": 3608}
{"snippet": "base_http_request_handler.end_headers()", "intent": "Adds a blank line ( indicating the end of the HTTP headers in the response ) to the headers buffer and calls flush_headers ( ) .", "question_id": 4646}
{"snippet": "SMTP.starttls()", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode .", "question_id": 8526}
{"snippet": "null_translations.install(names=None)", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "question_id": 4259}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}
{"snippet": "style.lookup(style, option)", "intent": "Returns the value specified for `option` in `style` .", "question_id": 10677}
{"snippet": "turtle.tracer(n=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11059}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761}
{"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348}
{"snippet": "nntplib.decode_header(header_str)", "intent": "Decode a header value , un-escaping any escaped non-ASCII characters . `header_str` must be a str object .", "question_id": 6502}
{"snippet": "urllib.request.HTTPSHandler(context=None)", "intent": "A class to handle opening of HTTPS URLs . `context` and `check_hostname` have the same meaning as in http.client.HTTPSConnection .", "question_id": 11804}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488}
{"snippet": "xml.etree.ElementTree.Comment()", "intent": "Comment element factory .", "question_id": 12434}
{"snippet": "Repr.maxstring", "intent": "Limit on the number of characters in the representation of the string.", "question_id": 8064}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136}
{"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}
{"snippet": "html_calendar.cssclasses_weekday_head", "intent": "A list of CSS classes used for weekday names in the header row.", "question_id": 972}
{"snippet": "FTP.rename(fromname, toname)", "intent": "Rename file `fromname` on the server to `toname` .", "question_id": 3959}
{"snippet": "os.sched_get_priority_max(policy)", "intent": "Get the maximum priority value for `policy` .", "question_id": 7106}
{"snippet": "json.loads(s, **kw)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5300}
{"snippet": "unittest.main(testRunner=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "question_id": 11549}
{"snippet": "importlib.machinery.SourceFileLoader(fullname, path)", "intent": "A concrete implementation of importlib.abc.SourceLoader by subclassing importlib.abc.FileLoader and providing some concrete implementations of other methods . With arguments `fullname`, `path`.", "question_id": 4889}
{"snippet": "email.mime.audio.MIMEAudio(_audiodata, **_params, _subtype=None)", "intent": "Module : email.mime.audio `_audiodata` is a string containing the raw audio data . Otherwise you can explicitly specify the audio subtype via the `_subtype` argument . With arguments `**_params`.", "question_id": 3335}
{"snippet": "secrets.compare_digest(a, b)", "intent": "Return True if strings `a` and `b` are equal , otherwise False , in such a way as to reduce the risk of timing attacks .", "question_id": 8147}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484}
{"snippet": "Shelf.close()", "intent": "Synchronize and close the persistent dict object .", "question_id": 8243}
{"snippet": "message.__delitem__(name)", "intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "question_id": 2968}
{"snippet": "aifc.aifc()", "intent": "Create an AIFF-C file .", "question_id": 26}
{"snippet": "turtle.undobufferentries()", "intent": "Return number of entries in the undobuffer .", "question_id": 11039}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "zipimporter.load_module(fullname)", "intent": "Load the module specified by `fullname` .", "question_id": 12889}
{"snippet": "config_parser.getboolean(section, option, fallback)", "intent": "A convenience method which coerces the `option` in the specified `section` to a Boolean value . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "question_id": 1544}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "str.isalnum()", "intent": "Return true if all characters in the string are alphanumeric and there is at least one character , false otherwise .", "question_id": 9202}
{"snippet": "curses.color_pair(color_number)", "intent": "Return the attribute value for displaying text in the specified color . With arguments `color_number`.", "question_id": 1925}
{"snippet": "email.header.Header(errors='strict')", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `errors` is passed straight through to the append ( ) method .", "question_id": 3122}
{"snippet": "shutil.copytree(src, dst, ignore=None)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "question_id": 8325}
{"snippet": "parser.st2list(st, line_info=False)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree . If `line_info` is true , line number information will be included for all terminal tokens as a third element of the list representing the token .", "question_id": 7215}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}
{"snippet": "widget.enable_traversal()", "intent": "Enable keyboard traversal for a toplevel window containing this notebook .", "question_id": 10614}
{"snippet": "difflib.HtmlDiff", "intent": "This class can be used to create an HTML table (or a complete HTML file containing the table) showing a side by side, line by line comparison of text with inter-line and intra-line change highlights.", "question_id": 2597}
{"snippet": "asyncio.subprocess.PIPE", "intent": "Can be passed to the stdin, stdout or stderr parameters.", "question_id": 543}
{"snippet": "struct.unpack(buffer)", "intent": "Identical to the unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must equal size .", "question_id": 9561}
{"snippet": "tkinter.tix.Meter", "intent": "The Meter widget can be used to show the progress of a background job which may take a long time to execute.", "question_id": 10558}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "os.RWF_NOWAIT", "intent": "Do not wait for data which is not immediately available.", "question_id": 6786}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "os.register_at_fork(after_in_parent=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . With arguments `after_in_parent`.", "question_id": 7047}
{"snippet": "wsgiref.handlers.read_environ()", "intent": "Transcode CGI variables from os.environ to PEP 3333 \u201c bytes in unicode \u201d strings , returning a new dictionary .", "question_id": 12270}
{"snippet": "mailbox.lock()", "intent": "Acquire an exclusive advisory lock on the mailbox so that other processes know not to modify it .", "question_id": 5751}
{"snippet": "Pattern.pattern", "intent": "The pattern string from which the pattern object was compiled.", "question_id": 7994}
{"snippet": "smtplib.SMTPAuthenticationError", "intent": "SMTP authentication went wrong.", "question_id": 8507}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "class.mro()", "intent": "This method can be overridden by a metaclass to customize the method resolution order for its instances .", "question_id": 9505}
{"snippet": "os.ctermid()", "intent": "Return the filename corresponding to the controlling terminal of the process .", "question_id": 6657}
{"snippet": "Record.GetFieldCount()", "intent": "Return the number of fields of the record , through MsiRecordGetFieldCount ( ) .", "question_id": 6081}
{"snippet": "test.support.threading_cleanup(*original_values)", "intent": "Cleanup up threads not specified in original_values . With arguments `*original_values`.", "question_id": 10253}
{"snippet": "DefaultCookiePolicy.is_blocked(domain)", "intent": "Return whether `domain` is on the blacklist for setting or receiving cookies .", "question_id": 4541}
{"snippet": "SMTP.connect()", "intent": "Connect to a `host` on a given `port` .", "question_id": 8511}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "gettext.GNUTranslations", "intent": "The following methods are overridden from the base class implementation:", "question_id": 4260}
{"snippet": "@reprlib.recursive_repr()", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread .", "question_id": 8053}
{"snippet": "socket.sendall(bytes)", "intent": "Send data to the socket . Unlike send ( ) , this method continues to send data from `bytes` until either all data has been sent or an error occurs .", "question_id": 8720}
{"snippet": "window.idcok(flag)", "intent": "If `flag` is False , curses no longer considers using the hardware insert/delete character feature of the terminal ; if flag is True , use of character insertion and deletion is enabled .", "question_id": 2066}
{"snippet": "decimal.remainder_near(other)", "intent": "Return the remainder from dividing self by `other` .", "question_id": 2466}
{"snippet": "xmlparser.NotStandaloneHandler()", "intent": "Called if the XML document hasn \u2019 t been declared as being a standalone document .", "question_id": 7774}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201}
{"snippet": "asyncio.PriorityQueue", "intent": "A variant of Queue; retrieves entries in priority order (lowest first).", "question_id": 459}
{"snippet": "test.support.modules_cleanup(oldmodules)", "intent": "Remove modules except for `oldmodules` and encodings in order to preserve internal cache .", "question_id": 10251}
{"snippet": "module_finder.report()", "intent": "Print a report to standard output that lists the modules imported by the script and their paths , as well as modules that are missing or seem to be missing .", "question_id": 6055}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6794}
{"snippet": "socket.has_ipv6", "intent": "This constant contains a boolean value which indicates if IPv6 is supported on this platform.", "question_id": 8607}
{"snippet": "unittest.mock.sentinel", "intent": "The sentinel object provides a convenient way of providing unique objects for your tests.", "question_id": 11645}
{"snippet": "formatter.check_unused_args(used_args, args, kwargs)", "intent": "Implement checking for unused arguments if desired . The arguments to this function is the set of all argument keys that were actually referred to in the format string ( integers for positional arguments , and strings for named arguments ) , and a reference to the `args` and `kwargs` that was passed to vformat . With arguments `used_args`.", "question_id": 9522}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370}
{"snippet": "curses.beep()", "intent": "Emit a short attention sound .", "question_id": 1921}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}
{"snippet": "selectors.DefaultSelector", "intent": "The default selector class, using the most efficient implementation available on the current platform.", "question_id": 8225}
{"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302}
{"snippet": "subprocess.Popen(args, executable=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9601}
{"snippet": "executor.map(func, *iterables, chunksize=1)", "intent": "Similar to map ( `func` , `*iterables` ) except : The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer .", "question_id": 1443}
{"snippet": "SubprocessTransport.kill()", "intent": "Kill the subprocess .", "question_id": 422}
{"snippet": "context.scaleb(x, y)", "intent": "Returns the first operand after adding the second value its exp . With arguments `x`, `y`.", "question_id": 2569}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "patch.multiple(target, **kwargs, spec=None, create=False)", "intent": "Perform multiple patches in a single call . The arguments `spec` , `spec_set` , create , `autospec` and `new_callable` have the same meaning as for patch ( ) . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11638}
{"snippet": "address_header.groups", "intent": "A tuple of Group objects encoding the addresses and groups found in the header value.", "question_id": 3159}
{"snippet": "connection.execute(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8811}
{"snippet": "devpoll.register(fd)", "intent": "Register a file descriptor with the polling object . `fd` can be either an integer , or an object with a fileno ( ) method that returns an integer .", "question_id": 8173}
{"snippet": "extension_file_loader.get_code(fullname)", "intent": "Returns None as extension modules lack a code object . With arguments `fullname`.", "question_id": 4909}
{"snippet": "Dialect.delimiter", "intent": "A one-character string used to separate fields.", "question_id": 1723}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892}
{"snippet": "window.refresh(pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol)", "intent": "Update the display immediately ( sync actual screen with previous drawing/deleting methods ) . `pminrow` and `pmincol` specify the upper left-hand corner of the rectangle to be displayed in the pad . `sminrow` , `smincol` , `smaxrow` , and `smaxcol` specify the edges of the rectangle to be displayed on the screen .", "question_id": 2106}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013}
{"snippet": "loop.sock_sendall(sock, data)", "intent": "Send `data` to the `sock` socket .", "question_id": 278}
{"snippet": "SubprocessTransport.close()", "intent": "Kill the subprocess by calling the kill ( ) method .", "question_id": 425}
{"snippet": "crypt.METHOD_CRYPT", "intent": "The traditional method with a 2 character salt and 13 characters of hash.", "question_id": 1672}
{"snippet": "completed_process.stdout", "intent": "Alias for output, for symmetry with stderr.", "question_id": 9591}
{"snippet": "IMAP4.status(mailbox, names)", "intent": "Request named status conditions for `mailbox` . With arguments `names`.", "question_id": 4744}
{"snippet": "json.JSONEncoder(ensure_ascii=True)", "intent": "Extensible JSON encoder for Python data structures . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped .", "question_id": 5324}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "DeprecationWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "question_id": 3703}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "test.support.wait_threads_exit(timeout=60.0)", "intent": "Context manager to wait until all threads created in the with statement exit . With arguments `timeout`.", "question_id": 10197}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491}
{"snippet": "filter.lineno", "intent": "Line number (int) of the filter.", "question_id": 10864}
{"snippet": "io.open(file)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`.", "question_id": 5051}
{"snippet": "queue_listener.emit(record)", "intent": "Do whatever it takes to actually log the specified logging `record` .", "question_id": 5609}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "formatter.format(format_string, *args, **kwargs)", "intent": "The primary API method . With arguments `format_string`, `*args`, `**kwargs`.", "question_id": 9517}
{"snippet": "io_base.readlines()", "intent": "Read and return a list of lines from the stream .", "question_id": 5072}
{"snippet": "time.strftime(format)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument .", "question_id": 10454}
{"snippet": "queue_listener.info(msg, *args, **kwargs)", "intent": "Logs a message with level INFO on this logger . With arguments `msg`, `*args`, `**kwargs`.", "question_id": 5571}
{"snippet": "symbol_table.has_children()", "intent": "Return True if the block has nested namespaces within it .", "question_id": 9740}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "doctest.DocTestSuite(globs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "question_id": 2808}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518}
{"snippet": "base_handler.traceback_limit", "intent": "The maximum number of frames to include in tracebacks output by the default log_exception() method.", "question_id": 12261}
{"snippet": "base_http_request_handler.log_request()", "intent": "Logs an accepted ( successful ) request .", "question_id": 4648}
{"snippet": "memoryview.contiguous", "intent": "A bool indicating whether the memory is contiguous.", "question_id": 9430}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "email.utils.format_datetime(dt, usegmt=False)", "intent": "Like formatdate , but the input is a datetime instance . If it is an aware timezone with offset zero , then `usegmt` may be set to True , in which case the string GMT is used instead of the numeric timezone offset . With arguments `dt`.", "question_id": 3477}
{"snippet": "os.times()", "intent": "Returns the current global process times .", "question_id": 7069}
{"snippet": "sys_log_handler.mapPriority(levelname)", "intent": "Maps a logging level name to a syslog priority name . With arguments `levelname`.", "question_id": 5505}
{"snippet": "audioop.tomono(fragment, width, lfactor, rfactor)", "intent": "Convert a stereo `fragment` to a mono fragment . The left channel is multiplied by `lfactor` and the right channel by `rfactor` before adding the two channels to give a mono signal . With arguments `width`.", "question_id": 705}
{"snippet": "_thread.start_new_thread(function, args)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "question_id": 12944}
{"snippet": "null_handler.createLock()", "intent": "This method returns None for the lock , since there is no underlying I/O to which access needs to be serialized .", "question_id": 5439}
{"snippet": "errno.EMLINK", "intent": "Too many links", "question_id": 3536}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}
{"snippet": "errno.EADDRINUSE", "intent": "Address already in use", "question_id": 3603}
{"snippet": "oss_audio_device.read(size)", "intent": "Read `size` bytes from the audio input and return them as a Python string .", "question_id": 7180}
{"snippet": "xml.sax.saxutils.unescape(data)", "intent": "Unescape ' & amp ; ' , ' & lt ; ' , and ' & gt ; ' in a string of `data` .", "question_id": 12654}
{"snippet": "logging.config.stopListening()", "intent": "Stops the listening server which was created with a call to listen ( ) .", "question_id": 5420}
{"snippet": "curses.flushinp()", "intent": "Flush all input buffers .", "question_id": 1936}
{"snippet": "DefaultCookiePolicy.strict_ns_unverifiable", "intent": "Apply RFC 2965 rules on unverifiable transactions even to Netscape cookies.", "question_id": 4548}
{"snippet": "turtle.setup()", "intent": "Set the size and position of the main window .", "question_id": 11107}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}
{"snippet": "turtle.shapetransform()", "intent": "Set or return the current transformation matrix of the turtle shape .", "question_id": 11008}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "ssl.OPENSSL_VERSION_NUMBER", "intent": "The raw version number of the OpenSSL library, as a single integer:", "question_id": 8959}
{"snippet": "xml.sax.handler.all_features", "intent": "List of all features.", "question_id": 12568}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "test.support.check_syntax_error(testcase, statement, lineno=None, offset=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `lineno` is not None , compares to the line of the SyntaxError . If `offset` is not None , compares to the offset of the SyntaxError .", "question_id": 10237}
{"snippet": "doc_test_parser.parse(string)", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings .", "question_id": 2859}
{"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426}
{"snippet": "bdb.runeval(expr, globals=None)", "intent": "Debug an expression executed via the eval ( ) function . `globals` and `locals` have the same meaning as in run ( ) . With arguments `expr`.", "question_id": 812}
{"snippet": "ScrolledText.frame", "intent": "The frame which surrounds the text and scroll bar widgets.", "question_id": 10542}
{"snippet": "kevent.data", "intent": "Filter specific data.", "question_id": 8207}
{"snippet": "email.headerregistry.DateHeader", "intent": "RFC 5322 specifies a very specific format for dates within email headers.", "question_id": 3156}
{"snippet": "dict.keys()", "intent": "Return a new view of the dictionary \u2019 s keys .", "question_id": 9485}
{"snippet": "abstract_event_loop.expected", "intent": "The total number (int) of expected bytes.", "question_id": 350}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`.", "question_id": 10304}
{"snippet": "set &= other & ...", "intent": "Update the set, keeping only elements found in it and all others.", "question_id": 9457}
{"snippet": "msvcrt.setmode(fd, flags)", "intent": "Set the line-end translation mode for the file descriptor `fd` . To set it to text mode , `flags` should be os.O_TEXT ; for binary , it should be os.O_BINARY .", "question_id": 6152}
{"snippet": "extension_file_loader.path", "intent": "Path to the extension module.", "question_id": 4905}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "os.pathsep", "intent": "The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows.", "question_id": 7126}
{"snippet": "email.headerregistry.Address(display_name='')", "intent": "The class used to represent an email address . With arguments `display_name`.", "question_id": 3187}
{"snippet": "simple_http_request_handler.do_HEAD()", "intent": "This method serves the 'HEAD ' request type : it sends the headers it would send for the equivalent GET request .", "question_id": 4664}
{"snippet": "Path.write_text(data)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file :", "question_id": 7323}
{"snippet": "importlib.util.module_from_spec(spec)", "intent": "Create a new module based on `spec` and spec.loader.create_module .", "question_id": 4930}
{"snippet": "os.RWF_HIPRI", "intent": "High priority read/write.", "question_id": 6787}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "set ^= other", "intent": "Update the set, keeping only elements found in either set, but not in both.", "question_id": 9461}
{"snippet": "os.stat_result", "intent": "Object whose attributes correspond roughly to the members of the stat structure.", "question_id": 6921}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "inspect.getsourcefile(object)", "intent": "Return the name of the Python source file in which an `object` was defined .", "question_id": 4973}
{"snippet": "Node.appendChild(newChild)", "intent": "Add a new child node to this node at the end of the list of children , returning `newChild` .", "question_id": 12330}
{"snippet": "urllib.request.AbstractBasicAuthHandler()", "intent": "This is a mixin class that helps with HTTP authentication , both to the remote host and to a proxy .", "question_id": 11789}
{"snippet": "compileall.compile_file(fullname, legacy=False)", "intent": "Compile the file with path `fullname` . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1424}
{"snippet": "sys.modules", "intent": "This is a dictionary that maps module names to modules which have already been loaded.", "question_id": 9826}
{"snippet": "statistic_diff.count_diff", "intent": "Difference of number of memory blocks between the old and the new snapshots (int): 0 if the memory blocks have been allocated in the new snapshot.", "question_id": 10886}
{"snippet": "syslog.setlogmask(maskpri)", "intent": "Set the priority mask to `maskpri` and return the previous mask value .", "question_id": 9884}
{"snippet": "base_server.RequestHandlerClass", "intent": "The user-provided request handler class; an instance of this class is created for each request.", "question_id": 8768}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}
{"snippet": "curses.baudrate()", "intent": "Return the output speed of the terminal in bits per second .", "question_id": 1920}
{"snippet": "babyl_message.update_visible()", "intent": "When a BabylMessage instance \u2019 s original headers are modified , the visible headers are not automatically modified to correspond .", "question_id": 5846}
{"snippet": "errno.EOVERFLOW", "intent": "Value too large for defined data type", "question_id": 3580}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "NNTP.xover(start, end, file=None)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select . With arguments `file`.", "question_id": 6500}
{"snippet": "html_calendar.formatyearpage(theyear)", "intent": "Return a year \u2019 s calendar as a complete HTML page . With arguments `theyear`.", "question_id": 962}
{"snippet": "winreg.KEY_ENUMERATE_SUB_KEYS", "intent": "Required to enumerate the subkeys of a registry key.", "question_id": 12169}
{"snippet": "ctypes.pythonapi", "intent": "An instance of PyDLL that exposes Python C API functions as attributes.", "question_id": 1785}
{"snippet": "bdb.runeval(expr, globals=None)", "intent": "Debug an expression executed via the eval ( ) function . `globals` and `locals` have the same meaning as in run ( ) . With arguments `expr`.", "question_id": 812}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "FTPHandler.ftp_open(req)", "intent": "Open the FTP file indicated by `req` .", "question_id": 11875}
{"snippet": "queue_listener.flush()", "intent": "Ensure all logging output has been flushed .", "question_id": 5604}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "question_id": 1299}
{"snippet": "property(fdel=None)", "intent": "Return a property attribute . `fdel` is a function for deleting an attribute value .", "question_id": 4088}
{"snippet": "inspect.isgeneratorfunction(object)", "intent": "Return true if the `object` is a Python generator function .", "question_id": 4952}
{"snippet": "sys.exit(arg)", "intent": "Exit from Python . The optional argument `arg` can be an integer giving the exit status ( defaulting to zero ) , or another type of object .", "question_id": 9788}
{"snippet": "turtle.onkeypress(fun)", "intent": "Bind `fun` to key-press event of `key` if key is given , or to any key-press-event if no key is given .", "question_id": 11069}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : With arguments `*paths`.", "question_id": 2797}
{"snippet": "os.lockf(fd, cmd, len)", "intent": "Apply , test or remove a POSIX lock on an open file descriptor . `fd` is an open file descriptor . `cmd` specifies the command to use - one of F_LOCK , F_TLOCK , F_ULOCK or F_TEST . `len` specifies the section of the file to lock .", "question_id": 6729}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}
{"snippet": "os.lseek(fd, pos, how)", "intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "question_id": 6734}
{"snippet": "stat_result.st_ctime", "intent": "Platform dependent:", "question_id": 6931}
{"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356}
{"snippet": "Match.groups(default=None)", "intent": "Return a tuple containing all the subgroups of the match , from 1 up to however many groups are in the pattern . The `default` argument is used for groups that did not participate in the match ; it defaults to None .", "question_id": 8000}
{"snippet": "loader.module_repr(module)", "intent": "A legacy method which when implemented calculates and returns the given `module` \u2019 s repr , as a string .", "question_id": 4817}
{"snippet": "logging.setLoggerClass(klass)", "intent": "Tells the logging system to use the class `klass` when instantiating a logger .", "question_id": 5651}
{"snippet": "shelve.Shelf(dict, writeback=False, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8250}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "curses.setupterm(term=None)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used .", "question_id": 1980}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "errno.ELIBACC", "intent": "Can not access a needed shared library", "question_id": 3584}
{"snippet": "_thread.interrupt_main()", "intent": "Simulate the effect of a signal.SIGINT signal arriving in the main thread .", "question_id": 12945}
{"snippet": "readline.get_history_length()", "intent": "Set or return the desired number of lines to save in the history file .", "question_id": 8027}
{"snippet": "io.DEFAULT_BUFFER_SIZE", "intent": "An int containing the default buffer size used by the module\u2019s buffered I/O classes.", "question_id": 5050}
{"snippet": "xml.dom.pulldom.parseString(string, parser=None)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` . With arguments `parser`.", "question_id": 12430}
{"snippet": "process.communicate()", "intent": "Interact with process :", "question_id": 548}
{"snippet": "NamedNodeMap.length", "intent": "The length of the attribute list.", "question_id": 12374}
{"snippet": "subprocess.STD_OUTPUT_HANDLE", "intent": "The standard output device.", "question_id": 9642}
{"snippet": "Record.ClearData()", "intent": "Set all fields of the record to 0 , through MsiRecordClearData ( ) .", "question_id": 6087}
{"snippet": "connection.set_trace_callback(trace_callback)", "intent": "Registers `trace_callback` to be called for each SQL statement that is actually executed by the SQLite backend .", "question_id": 8822}
{"snippet": "test.support.WarningsRecorder", "intent": "Class used to record warnings for unit tests.", "question_id": 10295}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}
{"snippet": "str.endswith(suffix)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False .", "question_id": 9191}
{"snippet": "shutil.copystat(src, dst)", "intent": "Copy the permission bits , last access time , last modification time , and flags from `src` to `dst` .", "question_id": 8316}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "json.JSONDecoder(parse_float=None)", "intent": "Simple JSON decoder . `parse_float` , if specified , will be called with the string of every JSON float to be decoded .", "question_id": 5312}
{"snippet": "Cookie.port", "intent": "String representing a port or a set of ports (eg.", "question_id": 4560}
{"snippet": "venv.create(env_dir)", "intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument .", "question_id": 11989}
{"snippet": "Path.is_dir()", "intent": "Return True if the path points to a directory ( or a symbolic link pointing to a directory ) , False if it points to another kind of file .", "question_id": 7273}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511}
{"snippet": "msvcrt.kbhit()", "intent": "Return true if a keypress is waiting to be read .", "question_id": 6155}
{"snippet": "zipfile.PyZipFile(file)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`.", "question_id": 12846}
{"snippet": "errno.ENETRESET", "intent": "Network dropped connection because of reset", "question_id": 3607}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "@abc.abstractmethod", "intent": "A decorator indicating abstract methods.", "question_id": 4}
{"snippet": "PyDLL._handle", "intent": "The system handle used to access the library.", "question_id": 1777}
{"snippet": "message.get_all(name, failobj=None)", "intent": "Return a list of all the values for the field named `name` . If there are no such named headers in the message , `failobj` is returned ( defaults to None ) .", "question_id": 2975}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573}
{"snippet": "ArgumentParser.exit()", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 110}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_SEQ", "intent": "Models which represent a series of models which follow one after the other are indicated with this model type.", "question_id": 7782}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "queue_listener.createLock()", "intent": "Initializes a thread lock which can be used to serialize access to underlying I/O functionality which may not be threadsafe .", "question_id": 5596}
{"snippet": "resource.RLIMIT_VMEM", "intent": "The largest area of mapped memory which the process may occupy.", "question_id": 8085}
{"snippet": "module_finder.report()", "intent": "Print a report to standard output that lists the modules imported by the script and their paths , as well as modules that are missing or seem to be missing .", "question_id": 6055}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026}
{"snippet": "ZipFile.extractall(path=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12819}
{"snippet": "os.RWF_NOWAIT", "intent": "Do not wait for data which is not immediately available.", "question_id": 6786}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757}
{"snippet": "dispatcher.create_socket()", "intent": "This is identical to the creation of a normal socket , and will use the same options for creation .", "question_id": 663}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "stat.ST_ATIME", "intent": "Time of last access.", "question_id": 9081}
{"snippet": "ZipInfo.external_attr", "intent": "External file attributes.", "question_id": 12875}
{"snippet": "text_wrapper.max_lines", "intent": "(default: None) If not None, then the output will contain at most max_lines lines, with placeholder appearing at the end of the output.", "question_id": 10337}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "sys.settrace(tracefunc)", "intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "question_id": 9839}
{"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136}
{"snippet": "ReadTransport.is_reading()", "intent": "Return True if the transport is receiving new data .", "question_id": 402}
{"snippet": "os.path.splitext(path)", "intent": "Split the pathname `path` into a pair ( root , ext ) such that root + ext == path , and ext is empty or begins with a period and contains at most one period .", "question_id": 7171}
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723}
{"snippet": "nntplib.decode_header(header_str)", "intent": "Decode a header value , un-escaping any escaped non-ASCII characters . `header_str` must be a str object .", "question_id": 6502}
{"snippet": "time.monotonic()", "intent": "Return the value ( in fractional seconds ) of a monotonic clock , i.e .", "question_id": 10446}
{"snippet": "itertools.count()", "intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "question_id": 5246}
{"snippet": "base_server.shutdown()", "intent": "Tell the serve_forever ( ) loop to stop and wait until it does .", "question_id": 8765}
{"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136}
{"snippet": "tkinter.tix.NoteBook", "intent": "The NoteBook widget can be used to display many windows in a limited space using a notebook metaphor.", "question_id": 10576}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "sqlite3.ProgrammingError", "intent": "Exception raised for programming errors, e.g.", "question_id": 8860}
{"snippet": "PurePath.joinpath(*other)", "intent": "Calling this method is equivalent to combining the path with each of the other arguments in turn : With arguments `*other`.", "question_id": 7257}
{"snippet": "counter.subtract()", "intent": "Elements are subtracted from an iterable or from another mapping ( or counter ) .", "question_id": 1346}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "socketserver.ForkingMixIn", "intent": "Forking and threading versions of each type of server can be created using these mix-in classes.", "question_id": 8753}
{"snippet": "os.O_ASYNC", "intent": "The above constants are extensions and not present if they are not defined by the C library.", "question_id": 6763}
{"snippet": "license", "intent": "Object that when printed, prints the message \u201cType license() to see the full license text\u201d, and when called, displays the full license text in a pager-like fashion (one screen at a time).", "question_id": 1614}
{"snippet": "sys.base_exec_prefix", "intent": "Set during Python startup, before site.py is run, to the same value as exec_prefix.", "question_id": 9768}
{"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}
{"snippet": "os.path.splitext(path)", "intent": "Split the pathname `path` into a pair ( root , ext ) such that root + ext == path , and ext is empty or begins with a period and contains at most one period .", "question_id": 7171}
{"snippet": "socketserver.ForkingTCPServer", "intent": "These classes are pre-defined using the mix-in classes.", "question_id": 8755}
{"snippet": "errno.EIO", "intent": "I/O error", "question_id": 3510}
{"snippet": "csv.field_size_limit(new_limit)", "intent": "Returns the current maximum field size allowed by the parser . If `new_limit` is given , this becomes the new limit .", "question_id": 1690}
{"snippet": "sys.getrefcount(object)", "intent": "Return the reference count of the `object` .", "question_id": 9800}
{"snippet": "breakpoint.deleteMe()", "intent": "Delete the breakpoint from the list associated to a file/line .", "question_id": 762}
{"snippet": "SSLContext.get_ca_certs(binary_form=False)", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "question_id": 9012}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "os.terminal_size", "intent": "A subclass of tuple, holding (columns, lines) of the terminal window size.", "question_id": 6813}
{"snippet": "Path.resolve()", "intent": "Make the path absolute , resolving any symlinks .", "question_id": 7310}
{"snippet": "queue_listener.enqueue_sentinel()", "intent": "Writes a sentinel to the queue to tell the listener to quit .", "question_id": 5564}
{"snippet": "message.__str__()", "intent": "Equivalent to as_string ( ) .", "question_id": 2946}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427}
{"snippet": "xml.sax.saxutils.escape(data)", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` .", "question_id": 12652}
{"snippet": "SummaryInformation.GetPropertyCount()", "intent": "Return the number of summary properties , through MsiSummaryInfoGetPropertyCount ( ) .", "question_id": 6078}
{"snippet": "gc.disable()", "intent": "Disable automatic garbage collection .", "question_id": 4168}
{"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "test.support.TESTFN", "intent": "Set to a name that is safe to use as the name of a temporary file.", "question_id": 10115}
{"snippet": "widget.bbox(item)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) .", "question_id": 10620}
{"snippet": "time.monotonic()", "intent": "Return the value ( in fractional seconds ) of a monotonic clock , i.e .", "question_id": 10446}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}
{"snippet": "tracemalloc.start()", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators .", "question_id": 10847}
{"snippet": "aifc.getsampwidth()", "intent": "Return the size in bytes of individual samples .", "question_id": 12}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "winreg.ConnectRegistry(computer_name, key)", "intent": "Establishes a connection to a predefined registry handle on another computer , and returns a handle object . `computer_name` is the name of the remote computer , of the form r '' \\\\computername '' . `key` is the predefined handle to connect to .", "question_id": 12121}
{"snippet": "NotImplemented", "intent": "Special value which should be returned by the binary special methods (e.g.", "question_id": 1605}
{"snippet": "functools.reduce(function, iterable)", "intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . With arguments `iterable`.", "question_id": 4154}
{"snippet": "email.utils.format_datetime(dt, usegmt=False)", "intent": "Like formatdate , but the input is a datetime instance . If it is an aware timezone with offset zero , then `usegmt` may be set to True , in which case the string GMT is used instead of the numeric timezone offset . With arguments `dt`.", "question_id": 3477}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "View.Close()", "intent": "Close the view , through MsiViewClose ( ) .", "question_id": 6076}
{"snippet": "calendar.calendar(year)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class .", "question_id": 1011}
{"snippet": "signal.pthread_kill(thread_id, signalnum)", "intent": "Send the signal `signalnum` to the thread `thread_id` , another thread in the same process as the caller .", "question_id": 8389}
{"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "turtle.heading()", "intent": "Return the turtle \u2019 s current heading ( value depends on the turtle mode , see mode ( ) ) .", "question_id": 10942}
{"snippet": "loop.remove_signal_handler(sig)", "intent": "Remove the handler for the `sig` signal .", "question_id": 304}
{"snippet": "Telnet.expect(list)", "intent": "Read until one from a `list` of a regular expressions matches .", "question_id": 10030}
{"snippet": "completed_process.returncode", "intent": "Exit status of the child process.", "question_id": 9579}
{"snippet": "shlex.push_source(newstream)", "intent": "Push an input source stream onto the input stack . With arguments `newstream`.", "question_id": 8287}
{"snippet": "platform.python_version_tuple()", "intent": "Returns the Python version as tuple ( major , minor , patchlevel ) of strings .", "question_id": 7479}
{"snippet": "widget.set(value)", "intent": "Sets the `value` of the combobox to value .", "question_id": 10600}
{"snippet": "datetime.utcnow()", "intent": "Return the current UTC date and time , with tzinfo None .", "question_id": 2260}
{"snippet": "View.Close()", "intent": "Close the view , through MsiViewClose ( ) .", "question_id": 6076}
{"snippet": "FileCookieJar.filename", "intent": "Filename of default file in which to keep cookies.", "question_id": 4522}
{"snippet": "ssl.PROTOCOL_SSLv3", "intent": "Selects SSL version 3 as the channel encryption protocol.", "question_id": 8926}
{"snippet": "time.tzname()", "intent": "If tzinfo is None , returns None , else returns self.tzinfo.tzname ( None ) , or raises an exception if the latter doesn \u2019 t return None or a string object .", "question_id": 2351}
{"snippet": "turtle.title(titlestring)", "intent": "Set title of turtle window to `titlestring` .", "question_id": 11157}
{"snippet": "mh.get_sequences()", "intent": "Return a dictionary of sequence names mapped to key lists .", "question_id": 5783}
{"snippet": "os.getgid()", "intent": "Return the real group id of the current process .", "question_id": 6676}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}
{"snippet": "asyncio.new_event_loop()", "intent": "Create a new event loop object .", "question_id": 181}
{"snippet": "configparser.MAX_INTERPOLATION_DEPTH", "intent": "The maximum depth for recursive interpolation for get() when the raw parameter is false.", "question_id": 1568}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "gc.set_threshold(threshold0)", "intent": "Set the garbage collection thresholds ( the collection frequency ) . Setting `threshold0` to zero disables collection .", "question_id": 4178}
{"snippet": "os.sync()", "intent": "Force write of everything to disk .", "question_id": 6955}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "test.support.check_syntax_error(testcase, statement)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "question_id": 10231}
{"snippet": "config_parser.sections()", "intent": "Return a list of the sections available ; the default section is not included in the list .", "question_id": 1507}
{"snippet": "collections.ChainMap(*maps)", "intent": "A ChainMap groups multiple dicts or other mappings together to create a single , updateable view . With arguments `*maps`.", "question_id": 1335}
{"snippet": "itertools.permutations(iterable)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5258}
{"snippet": "curses.flash()", "intent": "Flash the screen .", "question_id": 1935}
{"snippet": "_func_ptr.restype", "intent": "Assign a ctypes type to specify the result type of the foreign function.", "question_id": 1787}
{"snippet": "os.closerange(fd_low, fd_high)", "intent": "Close all file descriptors from `fd_low` ( inclusive ) to `fd_high` ( exclusive ) , ignoring errors .", "question_id": 6714}
{"snippet": "selectors.DefaultSelector", "intent": "The default selector class, using the most efficient implementation available on the current platform.", "question_id": 8225}
{"snippet": "scheduler.enter(delay, priority, action)", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`.", "question_id": 8122}
{"snippet": "PurePath.anchor", "intent": "The concatenation of the drive and root:", "question_id": 7246}
{"snippet": "modulefinder.ModuleFinder(path=None)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used .", "question_id": 6026}
{"snippet": "condition.wait_for(predicate, timeout=None)", "intent": "Wait until a condition evaluates to true . `predicate` should be a callable which result will be interpreted as a boolean value . A `timeout` may be provided giving the maximum time to wait .", "question_id": 10393}
{"snippet": "loop.call_exception_handler(context)", "intent": "Call the current event loop exception handler . `context` is a dict object containing the following keys ( new keys may be introduced in future Python versions ) :", "question_id": 310}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962}
{"snippet": "shutil.SameFileError", "intent": "This exception is raised if source and destination in copyfile() are the same file.", "question_id": 8313}
{"snippet": "xmlparser.ParseFile(file)", "intent": "Parse XML data reading from the object `file` .", "question_id": 7734}
{"snippet": "gc.DEBUG_UNCOLLECTABLE", "intent": "Print information of uncollectable objects found (objects which are not reachable but cannot be freed by the collector).", "question_id": 4191}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "resource.RLIMIT_MSGQUEUE", "intent": "The number of bytes that can be allocated for POSIX message queues.", "question_id": 8087}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "typing.Any", "intent": "Special type indicating an unconstrained type.", "question_id": 11331}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "sys.getsizeof(object)", "intent": "Return the size of an `object` in bytes .", "question_id": 9803}
{"snippet": "gettext.translation(domain)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "question_id": 4229}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "mimetypes.guess_extension(type)", "intent": "Guess the extension for a file based on its MIME `type` , given by type .", "question_id": 5943}
{"snippet": "types.FunctionType", "intent": "The type of user-defined functions and functions created by lambda  expressions.", "question_id": 11183}
{"snippet": "DocXMLRPCServer.set_server_title(server_title)", "intent": "Set the title used in the generated HTML documentation . With arguments `server_title`.", "question_id": 12761}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "turtle.shapetransform(t22=None)", "intent": "Set or return the current transformation matrix of the turtle shape . The determinant t11 * `t22` - t12 * t21 must not be zero , otherwise an error is raised .", "question_id": 11012}
{"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}
{"snippet": "cursor.fetchmany(size=cursor.arraysize)", "intent": "Fetches the next set of rows of a query result , returning a list . The number of rows to fetch per call is specified by the `size` parameter .", "question_id": 8846}
{"snippet": "async_chat.found_terminator()", "intent": "Called when the incoming data stream matches the termination condition set by set_terminator ( ) .", "question_id": 173}
{"snippet": "context.normalize(x)", "intent": "Reduces `x` to its simplest form .", "question_id": 2558}
{"snippet": "email.header.Header(maxlinelen=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . The maximum line length can be specified explicitly via `maxlinelen` .", "question_id": 3119}
{"snippet": "babyl.get_labels()", "intent": "Return a list of the names of all user-defined labels used in the mailbox .", "question_id": 5798}
{"snippet": "asyncio.SafeChildWatcher", "intent": "This implementation avoids disrupting other code spawning processes by polling every process explicitly on a SIGCHLD signal.", "question_id": 388}
{"snippet": "statistics.harmonic_mean(data)", "intent": "Return the harmonic mean of `data` , a sequence or iterator of real-valued numbers .", "question_id": 9126}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "imaplib.IMAP4_SSL(port=IMAP4_SSL_PORT)", "intent": "This is a subclass derived from IMAP4 that connects over an SSL encrypted socket ( to use this class you need a socket module that was compiled with SSL support ) . If `port` is omitted , the standard IMAP4-over-SSL port ( 993 ) is used .", "question_id": 4678}
{"snippet": "dis.stack_effect(opcode, oparg)", "intent": "Compute the stack effect of `opcode` with argument `oparg` .", "question_id": 2731}
{"snippet": "json.JSONDecoder(object_hook=None)", "intent": "Simple JSON decoder . `object_hook` , if specified , will be called with the result of every JSON object decoded and its return value will be used in place of the given dict .", "question_id": 5311}
{"snippet": "os.nice(increment)", "intent": "Add `increment` to the process \u2019 s \u201c niceness \u201d .", "question_id": 7039}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "str.ljust(width)", "intent": "Return the string left justified in a string of length `width` .", "question_id": 9216}
{"snippet": "stringprep.in_table_c3(code)", "intent": "Determine whether `code` is in tableC.3 ( Private use ) .", "question_id": 9541}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h')", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5471}
{"snippet": "TarFile.pax_headers", "intent": "A dictionary containing key-value pairs of pax global headers.", "question_id": 9968}
{"snippet": "set ^= other", "intent": "Update the set, keeping only elements found in either set, but not in both.", "question_id": 9461}
{"snippet": "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None)", "intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Otherwise you can explicitly specify the image subtype via the `_subtype` argument . With arguments `**_params`.", "question_id": 3343}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "faulthandler.disable()", "intent": "Disable the fault handler : uninstall the signal handlers installed by enable ( ) .", "question_id": 3720}
{"snippet": "turtle.position()", "intent": "Return the turtle \u2019 s current location ( x , y ) ( as a Vec2D vector ) .", "question_id": 10936}
{"snippet": "BaseException", "intent": "The base class for all built-in exceptions.", "question_id": 3628}
{"snippet": "stat.ST_UID", "intent": "User id of the owner.", "question_id": 9078}
{"snippet": "tkinter.tix.OptionMenu", "intent": "The OptionMenu creates a menu button of options.", "question_id": 10559}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "inspect.isbuiltin(object)", "intent": "Return true if the `object` is a built-in function or a bound built-in method .", "question_id": 4962}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400}
{"snippet": "shutil.disk_usage(path)", "intent": "Return disk usage statistics about the given `path` as a named tuple with the attributes total , used and free , which are the amount of total , used and free space , in bytes .", "question_id": 8340}
{"snippet": "importlib.import_module(name)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g .", "question_id": 4793}
{"snippet": "set.pop()", "intent": "Remove and return an arbitrary element from the set .", "question_id": 9465}
{"snippet": "DTDHandler.notationDecl(name, publicId, systemId)", "intent": "Handle a notation declaration event . With arguments `name`, `publicId`, `systemId`.", "question_id": 12583}
{"snippet": "sys.setswitchinterval(interval)", "intent": "Set the interpreter \u2019 s thread switch `interval` ( in seconds ) .", "question_id": 9838}
{"snippet": "asyncio.as_completed(aws)", "intent": "Run awaitable objects in the `aws` set concurrently .", "question_id": 615}
{"snippet": "decimal.copy_negate()", "intent": "Return the negation of the argument .", "question_id": 2409}
{"snippet": "i_pv6_address.ipv4_mapped", "intent": "For addresses that appear to be IPv4 mapped addresses (starting with ::FFFF/96), this property will report the embedded IPv4 address.", "question_id": 5189}
{"snippet": "Match.group(group1)", "intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "question_id": 7996}
{"snippet": "unittest.mock.mock_open(read_data=None)", "intent": "A helper function to create a `mock` to replace the use of open ( ) . `read_data` is a string for the read ( ) , readline ( ) , and readlines ( ) methods of the file handle to return .", "question_id": 11655}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934}
{"snippet": "errno.EINPROGRESS", "intent": "Operation now in progress", "question_id": 3620}
{"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}
{"snippet": "fileinput.isfirstline()", "intent": "Returns true if the line just read is the first line of its file , otherwise returns false .", "question_id": 3796}
{"snippet": "buffering_handler.flush()", "intent": "You can override this to implement custom flushing behavior .", "question_id": 5527}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}
{"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}
{"snippet": "completed_process.args", "intent": "The arguments used to launch the process.", "question_id": 9578}
{"snippet": "socket.create_connection(address)", "intent": "Connect to a TCP service listening on the Internet `address` ( a 2-tuple ( host , port ) ) , and return the socket object .", "question_id": 8629}
{"snippet": "generator.write(s)", "intent": "Write `s` to the write method of the outfp passed to the Generator \u2019 s constructor .", "question_id": 3105}
{"snippet": "tkinter.tix.Tree", "intent": "The Tree widget can be used to display hierarchical data in a tree form.", "question_id": 10572}
{"snippet": "connection.create_aggregate(name, num_params, aggregate_class)", "intent": "Creates a user-defined aggregate function . The aggregate class must implement a step method , which accepts the number of parameters `num_params` ( if num_params is -1 , the function may take any number of arguments ) , and a finalize method which will return the final result of the aggregate . With arguments `name`, `aggregate_class`.", "question_id": 8817}
{"snippet": "imp.get_tag()", "intent": "Return the PEP 3147 magic tag string matching this version of Python \u2019 s magic number , as returned by get_magic ( ) .", "question_id": 4770}
{"snippet": "DataHandler.data_open(req)", "intent": "Read a data URL . With arguments `req`.", "question_id": 11874}
{"snippet": "html_calendar.formatyear(theyear, width=3)", "intent": "Return a year \u2019 s calendar as an HTML table . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 961}
{"snippet": "function.get_locals()", "intent": "Return a tuple containing names of locals in this function .", "question_id": 9748}
{"snippet": "mh.close()", "intent": "MH instances do not keep any open files , so this method is equivalent to unlock ( ) .", "question_id": 5793}
{"snippet": "OptionParser.remove_option(opt_str)", "intent": "If the OptionParser has an option corresponding to `opt_str` , that option is removed .", "question_id": 6642}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}
{"snippet": "trace.results()", "intent": "Return a CoverageResults object that contains the cumulative results of all previous calls to run , runctx and runfunc for the given Trace instance .", "question_id": 10722}
{"snippet": "ctypes.c_double", "intent": "Represents the C double datatype.", "question_id": 1858}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "curses.killchar()", "intent": "Return the user \u2019 s current line kill character as a one-byte bytes object .", "question_id": 1951}
{"snippet": "math.log(x, base)", "intent": "With one argument , return the natural logarithm of `x` ( to `base` e ) .", "question_id": 5907}
{"snippet": "time.altzone", "intent": "The offset of the local DST timezone, in seconds west of UTC, if one is defined.", "question_id": 10472}
{"snippet": "set - other - ...", "intent": "Return a new set with elements in the set that are not in the others.", "question_id": 9450}
{"snippet": "@reprlib.recursive_repr()", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread .", "question_id": 8053}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "inspect.CO_ITERABLE_COROUTINE", "intent": "The flag is used to transform generators into generator-based coroutines.", "question_id": 5048}
{"snippet": "types.DynamicClassAttribute()", "intent": "Route attribute access on a class to __getattr__ .", "question_id": 11218}
{"snippet": "decimal.as_tuple()", "intent": "Return a named tuple representation of the number : DecimalTuple ( sign , digits , exponent ) .", "question_id": 2397}
{"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827}
{"snippet": "itertools.chain(*iterables)", "intent": "Make an iterator that returns elements from the first iterable until it is exhausted , then proceeds to the next iterable , until all of the iterables are exhausted . With arguments `*iterables`.", "question_id": 5241}
{"snippet": "env_builder.setup_python(context)", "intent": "Creates a copy or symlink to the Python executable in the environment . With arguments `context`.", "question_id": 11985}
{"snippet": "joinable_queue.recv_bytes()", "intent": "Return a complete message of byte data sent from the other end of the connection as a string .", "question_id": 6240}
{"snippet": "_func_ptr.errcheck", "intent": "Assign a Python function or another callable to this attribute.", "question_id": 1789}
{"snippet": "zipfile.ZipFile(file, mode='r')", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file .", "question_id": 12793}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235}
{"snippet": "platform.architecture()", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information .", "question_id": 7458}
{"snippet": "tkinter.tix.DirSelectBox", "intent": "The DirSelectBox is similar to the standard Motif(TM) directory-selection box.", "question_id": 10566}
{"snippet": "loop.close()", "intent": "Close the event loop .", "question_id": 187}
{"snippet": "env_builder.create_configuration(context)", "intent": "Creates the pyvenv.cfg configuration file in the environment . With arguments `context`.", "question_id": 11984}
{"snippet": "BaseHandler.http_error_<nnn>(req, fp, code, msg, hdrs)", "intent": "nnn should be a three-digit HTTP error `code` . With arguments `req`, `fp`, `msg`, `hdrs`.", "question_id": 11847}
{"snippet": "connection.commit()", "intent": "This method commits the current transaction .", "question_id": 8808}
{"snippet": "date.resolution", "intent": "The smallest possible difference between non-equal date objects, timedelta(days=1).", "question_id": 2225}
{"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103}
{"snippet": "bound_arguments.kwargs", "intent": "A dict of keyword arguments values.", "question_id": 5005}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "errno.EXDEV", "intent": "Cross-device link", "question_id": 3523}
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333}
{"snippet": "asyncio.StreamWriter", "intent": "Represents a writer object that provides APIs to write data to the IO stream.", "question_id": 511}
{"snippet": "CookiePolicy.hide_cookie2", "intent": "Don\u2019t add Cookie2 header to requests (the presence of this header indicates to the server that we understand RFC 2965 cookies).", "question_id": 4538}
{"snippet": "shelve.Shelf(dict, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8247}
{"snippet": "condition.notify_all()", "intent": "Wake up all tasks waiting on this condition .", "question_id": 577}
{"snippet": "cursor.executescript(sql_script)", "intent": "This is a nonstandard convenience method for executing multiple SQL statements at once . `sql_script` can be an instance of str .", "question_id": 8843}
{"snippet": "queue_listener.filter(record)", "intent": "Applies this logger \u2019 s filters to the `record` and returns a true value if the record is to be processed .", "question_id": 5579}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997}
{"snippet": "FileCookieJar.filename", "intent": "Filename of default file in which to keep cookies.", "question_id": 4522}
{"snippet": "os.getsid(pid)", "intent": "Call the system call getsid ( ) . With arguments `pid`.", "question_id": 6704}
{"snippet": "IMAP4.unsubscribe(mailbox)", "intent": "Unsubscribe from old `mailbox` .", "question_id": 4751}
{"snippet": "concurrent.futures.as_completed(fs)", "intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) .", "question_id": 1484}
{"snippet": "parameter.empty", "intent": "A special class-level marker to specify absence of default values and annotations.", "question_id": 4997}
{"snippet": "inspect.getcallargs(func, *args, **kwds)", "intent": "Bind the args and kwds to the argument names of the Python function or method `func` , as if it was called with them . whenever func ( `*args` , `**kwds` ) would raise an exception because of incompatible signature , an exception of the same type and the same or similar message is raised .", "question_id": 5019}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "signal.ITIMER_REAL", "intent": "Decrements interval timer in real time, and delivers SIGALRM upon expiration.", "question_id": 8379}
{"snippet": "base_handler.traceback_limit", "intent": "The maximum number of frames to include in tracebacks output by the default log_exception() method.", "question_id": 12261}
{"snippet": "curses.resetty()", "intent": "Restore the state of the terminal modes to what it was at the last call to savetty ( ) .", "question_id": 1974}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470}
{"snippet": "locale.format(format, val)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`.", "question_id": 5388}
{"snippet": "py_zip_file.writepy(pathname)", "intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) .", "question_id": 12856}
{"snippet": "doc_test.examples", "intent": "A list of Example objects encoding the individual interactive Python examples that should be run by this test.", "question_id": 2818}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491}
{"snippet": "itertools.combinations_with_replacement(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` allowing individual elements to be repeated more than once .", "question_id": 5244}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "shlex.shlex(infile=None, punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The second optional argument is a filename string , which sets the initial value of the `infile` attribute . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8282}
{"snippet": "tracemalloc.clear_traces()", "intent": "Clear traces of memory blocks allocated by Python .", "question_id": 10841}
{"snippet": "@functools.singledispatch", "intent": "Transform a function into a single-dispatch generic function.", "question_id": 4155}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`.", "question_id": 3042}
{"snippet": "os.popen(cmd)", "intent": "Open a pipe to or from command `cmd` .", "question_id": 7041}
{"snippet": "itertools.filterfalse(predicate, iterable)", "intent": "Make an iterator that filters elements from `iterable` returning only those for which the `predicate` is False .", "question_id": 5252}
{"snippet": "bytes_io.getvalue()", "intent": "Return bytes containing the entire contents of the buffer .", "question_id": 5112}
{"snippet": "sys.implementation", "intent": "An object containing information about the implementation of the currently running Python interpreter.", "question_id": 9815}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "ImportError", "intent": "Raised when the import statement has troubles trying to load a module.", "question_id": 3640}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, suppress_ragged_eofs=True)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . The parameter `suppress_ragged_eofs` specifies how the SSLSocket.recv ( ) method should signal unexpected EOF from the other end of the connection .", "question_id": 9029}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "curses.baudrate()", "intent": "Return the output speed of the terminal in bits per second .", "question_id": 1920}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "ur_lopener.open(fullurl, data=None)", "intent": "Open `fullurl` using the appropriate protocol . The `data` argument has the same meaning as the data argument of urlopen ( ) .", "question_id": 11893}
{"snippet": "json.load(fp, **kw, parse_float=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_float` , if specified , will be called with the string of every JSON float to be decoded . With arguments `**kw`.", "question_id": 5293}
{"snippet": "audioop.max(fragment, width)", "intent": "Return the maximum of the absolute value of all samples in a `fragment` . With arguments `width`.", "question_id": 696}
{"snippet": "compat32.fold(name, value)", "intent": "Headers are folded using the Header folding algorithm , which preserves existing line breaks in the `value` , and wraps each resulting line to the max_line_length . With arguments `name`.", "question_id": 3449}
{"snippet": "decimal.compare_total_mag(other)", "intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . With arguments `other`.", "question_id": 2405}
{"snippet": "email.header.Header(maxlinelen=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . The maximum line length can be specified explicitly via `maxlinelen` .", "question_id": 3119}
{"snippet": "xml.parsers.expat.model.XML_CTYPE_ANY", "intent": "The element named by the model name was declared to have a content model of ANY.", "question_id": 7779}
{"snippet": "parameter.kind", "intent": "Describes how argument values are bound to the parameter.", "question_id": 5001}
{"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425}
{"snippet": "Path.symlink_to(target)", "intent": "Make this path a symbolic link to `target` .", "question_id": 7315}
{"snippet": "gettext.dgettext(domain, message)", "intent": "Like gettext ( ) , but look the `message` up in the specified `domain` .", "question_id": 4217}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947}
{"snippet": "weakref.ProxyType", "intent": "The type object for proxies of objects which are not callable.", "question_id": 12097}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "queue_listener.findCaller()", "intent": "Finds the caller \u2019 s source filename and line number .", "question_id": 5582}
{"snippet": "cmath.polar(x)", "intent": "Return the representation of `x` in polar coordinates .", "question_id": 1094}
{"snippet": "WindowsError", "intent": "Only available on Windows.", "question_id": 3684}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "errno.ECHRNG", "intent": "Channel number out of range", "question_id": 3549}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "fnmatch.fnmatchcase(filename, pattern)", "intent": "Test whether `filename` matches `pattern` , returning True or False ; the comparison is case-sensitive and does not apply os.path.normcase ( ) .", "question_id": 3814}
{"snippet": "symbol_table.get_identifiers()", "intent": "Return a list of names of symbols in this table .", "question_id": 9742}
{"snippet": "Token.var", "intent": "A read-only property.", "question_id": 1645}
{"snippet": "locale.getpreferredencoding()", "intent": "Return the encoding used for text data , according to user preferences .", "question_id": 5377}
{"snippet": "StopIteration", "intent": "Raised by built-in function next() and an iterator\u2019s __next__() method to signal that there are no further items produced by the iterator.", "question_id": 3663}
{"snippet": "errno.EEXIST", "intent": "File exists", "question_id": 3522}
{"snippet": "shutil.unregister_archive_format(name)", "intent": "Remove the archive format `name` from the list of supported formats .", "question_id": 8362}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "base_server.socket", "intent": "The socket object on which the server will listen for incoming requests.", "question_id": 8770}
{"snippet": "errno.ELIBEXEC", "intent": "Cannot exec a shared library directly", "question_id": 3588}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}
{"snippet": "loop.getnameinfo(sockaddr)", "intent": "Asynchronous version of socket.getnameinfo ( ) . With arguments `sockaddr`.", "question_id": 299}
{"snippet": "audioop.alaw2lin(fragment, width)", "intent": "Convert sound fragments in a-LAW encoding to linearly encoded sound fragments . a-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .", "question_id": 682}
{"snippet": "contextvars.ContextVar(name)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes .", "question_id": 1638}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "xml.etree.ElementTree.XMLID(text)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data .", "question_id": 12471}
{"snippet": "timedelta.total_seconds()", "intent": "Return the total number of seconds contained in the duration .", "question_id": 2217}
{"snippet": "email.message_from_string(s)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) .", "question_id": 3404}
{"snippet": "html_calendar.formatyearpage(theyear, width=3)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 963}
{"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122}
{"snippet": "queue_listener.findCaller()", "intent": "Finds the caller \u2019 s source filename and line number .", "question_id": 5582}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "webbrowser.open_new_tab(url)", "intent": "Open `url` in a new page ( \u201c tab \u201d ) of the default browser , if possible , otherwise equivalent to open_new ( ) .", "question_id": 12107}
{"snippet": "env_builder.setup_python(context)", "intent": "Creates a copy or symlink to the Python executable in the environment . With arguments `context`.", "question_id": 11985}
{"snippet": "decimal.is_infinite()", "intent": "Return True if the argument is either positive or negative infinity and False otherwise .", "question_id": 2419}
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333}
{"snippet": "math.acos(x)", "intent": "Return the arc cosine of `x` , in radians .", "question_id": 5914}
{"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}
{"snippet": "socket.getblocking()", "intent": "Return True if socket is in blocking mode , False if in non-blocking .", "question_id": 8686}
{"snippet": "resource.getpagesize()", "intent": "Returns the number of bytes in a system page .", "question_id": 8096}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003}
{"snippet": "winsound.MessageBeep()", "intent": "Call the underlying MessageBeep ( ) function from the Platform API .", "question_id": 12194}
{"snippet": "tarfile.TarFile", "intent": "Class for reading and writing tar archives.", "question_id": 9900}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "charset.__eq__(other)", "intent": "This method allows you to compare two Charset instances for equality . With arguments `other`.", "question_id": 2924}
{"snippet": "SSLContext.get_ca_certs(binary_form=False)", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "question_id": 9012}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "shlex.commenters", "intent": "The string of characters that are recognized as comment beginners.", "question_id": 8294}
{"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}
{"snippet": "set -= other | ...", "intent": "Update the set, removing elements found in others.", "question_id": 9459}
{"snippet": "Class.methods", "intent": "A dictionary mapping method names to line numbers.", "question_id": 7723}
{"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "extension_file_loader.get_source(fullname)", "intent": "Returns None as extension modules do not have source code . With arguments `fullname`.", "question_id": 4910}
{"snippet": "sys.executable", "intent": "A string giving the absolute path of the executable binary for the Python interpreter, on systems where this makes sense.", "question_id": 9787}
{"snippet": "asyncio.Lock(loop=None)", "intent": "Implements a mutex lock for asyncio tasks . With arguments `loop`.", "question_id": 559}
{"snippet": "str.splitlines(keepends)", "intent": "Return a list of the lines in the string , breaking at line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9245}
{"snippet": "policy.message_factory", "intent": "A factory function for constructing a new empty message object.", "question_id": 3418}
{"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "ctypes.c_wchar_p", "intent": "Represents the C wchar_t * datatype, which must be a pointer to a zero-terminated wide character string.", "question_id": 1882}
{"snippet": "log_record.getMessage()", "intent": "Returns the message for this LogRecord instance after merging any user-supplied arguments with the message .", "question_id": 5630}
{"snippet": "sqlite3.register_converter(typename, callable)", "intent": "Registers a `callable` to convert a bytestring from the database into a custom Python type . The callable will be invoked for all database values that are of the type `typename` .", "question_id": 8799}
{"snippet": "logging.config.listen()", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations .", "question_id": 5416}
{"snippet": "SMTP.starttls(keyfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8531}
{"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055}
{"snippet": "mime_types.guess_extension(type)", "intent": "Similar to the guess_extension ( ) function , using the tables stored as part of the object . With arguments `type`.", "question_id": 5964}
{"snippet": "inspect.ismethod(object)", "intent": "Return true if the `object` is a bound method written in Python .", "question_id": 4950}
{"snippet": "test_result.stopTest(test)", "intent": "Called after the `test` case test has been executed , regardless of the outcome .", "question_id": 11521}
{"snippet": "window.immedok(flag)", "intent": "If `flag` is True , any change in the window image automatically causes the window to be refreshed ; you no longer have to call refresh ( ) yourself .", "question_id": 2068}
{"snippet": "math.fsum(iterable)", "intent": "Return an accurate floating point sum of values in the `iterable` .", "question_id": 5892}
{"snippet": "completed_process.stdout", "intent": "Captured stdout from the child process.", "question_id": 9580}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_SYNTAX", "intent": "Some unspecified syntax error was encountered.", "question_id": 7801}
{"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392}
{"snippet": "asyncio.sleep(delay)", "intent": "Block for `delay` seconds .", "question_id": 595}
{"snippet": "ctypes.memset(dst, c, count)", "intent": "Same as the standard C memset library function : fills the memory block at address `dst` with `count` bytes of value c. dst must be an integer specifying an address , or a ctypes instance . With arguments `c`.", "question_id": 1827}
{"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235}
{"snippet": "process.exitcode", "intent": "The child\u2019s exit code.", "question_id": 6183}
{"snippet": "inspect.getsourcefile(object)", "intent": "Return the name of the Python source file in which an `object` was defined .", "question_id": 4973}
{"snippet": "inspect.CO_OPTIMIZED", "intent": "The code object is optimized, using fast locals.", "question_id": 5040}
{"snippet": "function.get_frees()", "intent": "Return a tuple containing names of free variables in this function .", "question_id": 9750}
{"snippet": "io.StringIO(initial_value='')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` .", "question_id": 5165}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070}
{"snippet": "logging.setLoggerClass(klass)", "intent": "Tells the logging system to use the class `klass` when instantiating a logger .", "question_id": 5651}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "abstract_event_loop_policy.get_child_watcher()", "intent": "Get a child process watcher object .", "question_id": 378}
{"snippet": "dis.stack_effect(opcode, oparg)", "intent": "Compute the stack effect of `opcode` with argument `oparg` .", "question_id": 2731}
{"snippet": "sqlite3.IntegrityError", "intent": "Exception raised when the relational integrity of the database is affected, e.g.", "question_id": 8859}
{"snippet": "locale.atoi(string)", "intent": "Converts a `string` to an integer , following the LC_NUMERIC conventions .", "question_id": 5403}
{"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357}
{"snippet": "msilib.Binary(filename)", "intent": "Represents entries in the Binary table ; inserting such an object using add_data ( ) reads the file named `filename` into the table .", "question_id": 6064}
{"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013}
{"snippet": "FTP.mlsd(facts=)", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . `facts` is a list of strings representing the type of information desired ( e.g .", "question_id": 3949}
{"snippet": "InteractiveInterpreter.showsyntaxerror(filename=None)", "intent": "Display the syntax error that just occurred . If `filename` is given , it is stuffed into the exception instead of the default filename provided by Python \u2019 s parser , because it always uses ' < string > ' when reading from a string .", "question_id": 1181}
{"snippet": "server.close()", "intent": "Stop serving : close listening sockets and set the sockets attribute to None .", "question_id": 335}
{"snippet": "ArgumentParser.add_subparsers()", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit .", "question_id": 84}
{"snippet": "calendar.TextCalendar()", "intent": "This class can be used to generate plain text calendars .", "question_id": 926}
{"snippet": "io_base.truncate()", "intent": "Resize the stream to the given `size` in bytes ( or the current position if size is not specified ) .", "question_id": 5078}
{"snippet": "asyncio.Queue(loop=None)", "intent": "A first in , first out ( FIFO ) queue . With arguments `loop`.", "question_id": 447}
{"snippet": "xml.dom.IndexSizeErr", "intent": "Raised when an index or size parameter to a method is negative or exceeds the allowed values.", "question_id": 12383}
{"snippet": "context.minus(x)", "intent": "Minus corresponds to the unary prefix minus operator in Python . With arguments `x`.", "question_id": 2553}
{"snippet": "itertools.takewhile(predicate, iterable)", "intent": "Make an iterator that returns elements from the `iterable` as long as the `predicate` is true .", "question_id": 5265}
{"snippet": "async_result.successful()", "intent": "Return whether the call completed without raising an exception .", "question_id": 6365}
{"snippet": "xml.etree.ElementTree.ParseError", "intent": "XML parse error, raised by the various parsing methods in this module when parsing fails.", "question_id": 12561}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "sys.exec_prefix", "intent": "A string giving the site-specific directory prefix where the platform-dependent Python files are installed; by default, this is also '/usr/local'.", "question_id": 9786}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "loop.getnameinfo(sockaddr)", "intent": "Asynchronous version of socket.getnameinfo ( ) . With arguments `sockaddr`.", "question_id": 299}
{"snippet": "tracemalloc.clear_traces()", "intent": "Clear traces of memory blocks allocated by Python .", "question_id": 10841}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "turtle.Vec2D(x, y)", "intent": "A two-dimensional vector class , used as a helper class for implementing turtle graphics . With arguments `x`, `y`.", "question_id": 11167}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "ctypes.c_byte", "intent": "Represents the C signed char datatype, and interprets the value as small integer.", "question_id": 1855}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "bz2_compressor.flush()", "intent": "Finish the compression process .", "question_id": 899}
{"snippet": "os.pread(fd, n, offset)", "intent": "Read at most `n` bytes from file descriptor `fd` at a position of `offset` , leaving the file offset unchanged .", "question_id": 6783}
{"snippet": "xml.etree.ElementTree.TreeBuilder()", "intent": "Generic element structure builder .", "question_id": 12539}
{"snippet": "audioop.tomono(fragment, width, lfactor, rfactor)", "intent": "Convert a stereo `fragment` to a mono fragment . The left channel is multiplied by `lfactor` and the right channel by `rfactor` before adding the two channels to give a mono signal . With arguments `width`.", "question_id": 705}
{"snippet": "Repr.maxstring", "intent": "Limit on the number of characters in the representation of the string.", "question_id": 8064}
{"snippet": "sys.setprofile(profilefunc)", "intent": "Set the system \u2019 s profile function , which allows you to implement a Python source code profiler in Python . With arguments `profilefunc`.", "question_id": 9836}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "test_case.run()", "intent": "Run the test , collecting the `result` into the TestResult object passed as result .", "question_id": 11369}
{"snippet": "faulthandler.is_enabled()", "intent": "Check if the fault handler is enabled .", "question_id": 3721}
{"snippet": "locale.currency(val, grouping=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `grouping` is true ( which is not the default ) , grouping is done with the value .", "question_id": 5394}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "set.clear()", "intent": "Remove all elements from the set .", "question_id": 9466}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493}
{"snippet": "tkinter.tix.ListNoteBook", "intent": "The ListNoteBook widget is very similar to the TixNoteBook widget: it can be used to display many windows in a limited space using a notebook metaphor.", "question_id": 10575}
{"snippet": "cursor.executescript(sql_script)", "intent": "This is a nonstandard convenience method for executing multiple SQL statements at once . `sql_script` can be an instance of str .", "question_id": 8843}
{"snippet": "turtle.getcanvas()", "intent": "Return the Canvas of this TurtleScreen .", "question_id": 11096}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "pickle.Pickler(file)", "intent": "This takes a binary `file` for writing a pickle data stream .", "question_id": 7390}
{"snippet": "urllib.parse.quote_from_bytes(bytes)", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding .", "question_id": 11721}
{"snippet": "ctypes.pythonapi", "intent": "An instance of PyDLL that exposes Python C API functions as attributes.", "question_id": 1785}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "xml.etree.ElementTree.ParseError", "intent": "XML parse error, raised by the various parsing methods in this module when parsing fails.", "question_id": 12561}
{"snippet": "test.support.optim_args_from_interpreter_flags()", "intent": "Return a list of command line arguments reproducing the current optimization settings in sys.flags .", "question_id": 10172}
{"snippet": "inspect.Signature(parameters=None)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection .", "question_id": 4980}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363}
{"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427}
{"snippet": "SSLContext.load_verify_locations()", "intent": "Load a set of \u201c certification authority \u201d ( CA ) certificates used to validate other peers \u2019 certificates when verify_mode is other than CERT_NONE .", "question_id": 9003}
{"snippet": "email.mime.message.MIMEMessage(_msg, policy=compat32)", "intent": "Module : email.mime.message `_msg` is used as the payload , and must be an instance of class Message ( or a subclass thereof ) , otherwise a TypeError is raised . Optional `policy` argument defaults to compat32 .", "question_id": 3352}
{"snippet": "InteractiveConsole.interact(exitmsg=None)", "intent": "Closely emulate the interactive Python console . The optional `exitmsg` argument specifies an exit message printed when exiting .", "question_id": 1186}
{"snippet": "importlib.abc.SourceLoader", "intent": "An abstract base class for implementing source (and optionally bytecode) file loading.", "question_id": 4841}
{"snippet": "set -= other | ...", "intent": "Update the set, removing elements found in others.", "question_id": 9459}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "group.addresses", "intent": "A possibly empty tuple of Address objects representing the addresses in the group.", "question_id": 3206}
{"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}
{"snippet": "SSLContext.post_handshake_auth", "intent": "Enable TLS 1.3 post-handshake client authentication.", "question_id": 9047}
{"snippet": "urllib.request.url2pathname(path)", "intent": "Convert the `path` component path from a percent-encoded URL to the local syntax for a path .", "question_id": 11766}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api)", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10267}
{"snippet": "window.cursyncup()", "intent": "Update the current cursor position of all the ancestors of the window to reflect the current cursor position of the window .", "question_id": 2038}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "xml.etree.ElementTree.tostring(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12456}
{"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "os.getloadavg()", "intent": "Return the number of processes in the system run queue averaged over the last 1 , 5 , and 15 minutes or raises OSError if the load average was unobtainable .", "question_id": 7118}
{"snippet": "i_pv6_address.ipv4_mapped", "intent": "For addresses that appear to be IPv4 mapped addresses (starting with ::FFFF/96), this property will report the embedded IPv4 address.", "question_id": 5189}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "tkinter.READABLE", "intent": "Constants used in the mask arguments.", "question_id": 10539}
{"snippet": "zipimporter.load_module(fullname)", "intent": "Load the module specified by `fullname` .", "question_id": 12889}
{"snippet": "cmath.infj", "intent": "Complex number with zero real part and positive infinity imaginary part.", "question_id": 1124}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "Function.children", "intent": "A dictionary mapping names to descriptors for nested functions and classes.", "question_id": 7715}
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891}
{"snippet": "counter.update(iterable-or-mapping)", "intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1348}
{"snippet": "system_random.pattern", "intent": "The regular expression pattern.", "question_id": 7966}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "errno.EADDRNOTAVAIL", "intent": "Cannot assign requested address", "question_id": 3604}
{"snippet": "SSLContext.verify_mode", "intent": "Whether to try to verify other peers\u2019 certificates and how to behave if verification fails.", "question_id": 9051}
{"snippet": "json.load(fp, **kw, cls=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . With arguments `**kw`.", "question_id": 5291}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "decimal.ROUND_UP", "intent": "Round away from zero.", "question_id": 2583}
{"snippet": "datetime.min", "intent": "The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None).", "question_id": 2269}
{"snippet": "shlex.source", "intent": "This attribute is None by default.", "question_id": 8303}
{"snippet": "turtle.end_fill()", "intent": "Fill the shape drawn after the last call to begin_fill ( ) .", "question_id": 10966}
{"snippet": "context.multiply(x, y)", "intent": "Return the product of `x` and `y` .", "question_id": 2554}
{"snippet": "copyreg.pickle(type, function)", "intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type .", "question_id": 1666}
{"snippet": "date.resolution", "intent": "The smallest possible difference between non-equal date objects, timedelta(days=1).", "question_id": 2225}
{"snippet": "cgi.parse_header(string)", "intent": "Parse a MIME header ( such as Content-Type ) into a main value and a dictionary of parameters . With arguments `string`.", "question_id": 1051}
{"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "POP3.dele(which)", "intent": "Flag message number `which` for deletion .", "question_id": 7612}
{"snippet": "@test.support.requires_zlib", "intent": "Decorator for skipping tests if zlib doesn\u2019t exist.", "question_id": 10215}
{"snippet": "cgi.parse()", "intent": "Parse a query in the environment or from a file ( the file defaults to sys.stdin ) .", "question_id": 1029}
{"snippet": "message.set_type(type)", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3013}
{"snippet": "Cookie.port_specified", "intent": "True if a port or set of ports was explicitly specified by the server (in the Set-Cookie / Set-Cookie2 header).", "question_id": 4568}
{"snippet": "somenamedtuple._make(iterable)", "intent": "Class method that makes a new instance from an existing sequence or `iterable` .", "question_id": 1384}
{"snippet": "test_case.addTypeEqualityFunc(typeobj, function)", "intent": "Registers a type-specific method called by assertEqual ( ) to check if two objects of exactly the same `typeobj` ( not subclasses ) compare equal . `function` must take two positional arguments and a third msg=None keyword argument just as assertEqual ( ) does .", "question_id": 11447}
{"snippet": "DefaultCookiePolicy.is_blocked(domain)", "intent": "Return whether `domain` is on the blacklist for setting or receiving cookies .", "question_id": 4541}
{"snippet": "faulthandler.disable()", "intent": "Disable the fault handler : uninstall the signal handlers installed by enable ( ) .", "question_id": 3720}
{"snippet": "maildir_message.add_flag(flag)", "intent": "Set the `flag` ( s ) specified by flag without changing other flags .", "question_id": 5817}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "queue.full()", "intent": "Return True if there are maxsize items in the queue .", "question_id": 451}
{"snippet": "getpass.getuser()", "intent": "Return the \u201c login name \u201d of the user .", "question_id": 4209}
{"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "Path.symlink_to(target)", "intent": "Make this path a symbolic link to `target` .", "question_id": 7315}
{"snippet": "POP3.noop()", "intent": "Do nothing .", "question_id": 7614}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800}
{"snippet": "xml.etree.ElementTree.TreeBuilder(element_factory=None)", "intent": "Generic element structure builder . `element_factory` , when given , must be a callable accepting two positional arguments : a tag and a dict of attributes .", "question_id": 12540}
{"snippet": "test.support.check_warnings(*filters, quiet=True)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . If one or more filters are provided , or if the optional keyword argument `quiet` is False , it checks to make sure the warnings are as expected : each specified filter must match at least one of the warnings raised by the enclosed code or the test fails , and if any warnings are raised that do not match any of the specified filters the test fails . With arguments `*filters`.", "question_id": 10165}
{"snippet": "audioop.mul(fragment, width, factor)", "intent": "Return a `fragment` that has all samples in the original fragment multiplied by the floating-point value `factor` . With arguments `width`.", "question_id": 699}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "threading.settrace(func)", "intent": "Set a trace function for all threads started from the threading module . The `func` will be passed to sys.settrace ( ) for each thread , before its run ( ) method is called .", "question_id": 10346}
{"snippet": "context.normalize(x)", "intent": "Reduces `x` to its simplest form .", "question_id": 2558}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "asyncio.as_completed(aws, loop=None)", "intent": "Run awaitable objects in the `aws` set concurrently . With arguments `loop`.", "question_id": 616}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "PurePath.joinpath(*other)", "intent": "Calling this method is equivalent to combining the path with each of the other arguments in turn : With arguments `*other`.", "question_id": 7257}
{"snippet": "smtp_server.channel_class", "intent": "Override this in subclasses to use a custom SMTPChannel for managing SMTP clients.", "question_id": 8423}
{"snippet": "Pattern.match(string)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object .", "question_id": 7975}
{"snippet": "imp.acquire_lock()", "intent": "Acquire the interpreter \u2019 s global import lock for the current thread .", "question_id": 4772}
{"snippet": "bound_arguments.arguments", "intent": "An ordered, mutable mapping (collections.OrderedDict) of parameters\u2019 names to arguments\u2019 values.", "question_id": 5003}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "decimal.ROUND_HALF_UP", "intent": "Round to nearest with ties going away from zero.", "question_id": 2582}
{"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}
{"snippet": "json.JSONEncoder(check_circular=True)", "intent": "Extensible JSON encoder for Python data structures . If `check_circular` is true ( the default ) , then lists , dicts , and custom encoded objects will be checked for circular references during encoding to prevent an infinite recursion ( which would cause an OverflowError ) .", "question_id": 5325}
{"snippet": "json.dumps(obj, **kw)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "question_id": 5280}
{"snippet": "dircmp.left_only", "intent": "Files and subdirectories only in a.", "question_id": 3772}
{"snippet": "counter.elements()", "intent": "Return an iterator over elements repeating each as many times as its count .", "question_id": 1342}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "Cmd.cmdloop()", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument .", "question_id": 1135}
{"snippet": "config_parser.sections()", "intent": "Return a list of the sections available ; the default section is not included in the list .", "question_id": 1507}
{"snippet": "timeit.Timer(globals=None)", "intent": "Class for timing execution speed of small code snippets . The statement will by default be executed within timeit \u2019 s namespace ; this behavior can be controlled by passing a namespace to `globals` .", "question_id": 10501}
{"snippet": "multiprocessing.active_children()", "intent": "Return list of all live children of the current process .", "question_id": 6219}
{"snippet": "test.support.import_fresh_module(name)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10242}
{"snippet": "html.entities.html5", "intent": "A dictionary that maps HTML5 named character references 1 to the equivalent Unicode character(s), e.g.", "question_id": 4342}
{"snippet": "errno.ELIBBAD", "intent": "Accessing a corrupted shared library", "question_id": 3585}
{"snippet": "errno.EFBIG", "intent": "File too large", "question_id": 3532}
{"snippet": "simple_http_request_handler.extensions_map", "intent": "A dictionary mapping suffixes into MIME types.", "question_id": 4662}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "quopri.decodestring(s)", "intent": "Like decode ( ) , except that it accepts a source bytes and returns the corresponding decoded bytes . With arguments `s`.", "question_id": 7877}
{"snippet": "base_handler.os_environ", "intent": "The default environment variables to be included in every request\u2019s WSGI environment.", "question_id": 12256}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}
{"snippet": "zipimporter.find_module(fullname, path)", "intent": "Search for a module specified by `fullname` . The optional `path` argument is ignored\u2014it \u2019 s there for compatibility with the importer protocol .", "question_id": 12882}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "formatter.add_hor_rule(*args, **kw)", "intent": "Insert a horizontal rule in the output . With arguments `*args`, `**kw`.", "question_id": 3821}
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484}
{"snippet": "auto.errno", "intent": "A numeric error code from the C variable errno.", "question_id": 3654}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "loop.get_task_factory()", "intent": "Return a task factory or None if the default one is in use .", "question_id": 201}
{"snippet": "window.keypad(flag)", "intent": "If `flag` is True , escape sequences generated by some keys ( keypad , function keys ) will be interpreted by curses .", "question_id": 2091}
{"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370}
{"snippet": "email.utils.format_datetime(dt, usegmt=False)", "intent": "Like formatdate , but the input is a datetime instance . If it is an aware timezone with offset zero , then `usegmt` may be set to True , in which case the string GMT is used instead of the numeric timezone offset . With arguments `dt`.", "question_id": 3477}
{"snippet": "OptionParser.print_usage()", "intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "question_id": 6644}
{"snippet": "secrets.SystemRandom", "intent": "A class for generating random numbers using the highest-quality sources provided by the operating system.", "question_id": 8131}
{"snippet": "cgihttp_request_handler.do_POST()", "intent": "This method serves the 'POST ' request type , only allowed for CGI scripts .", "question_id": 4668}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706}
{"snippet": "msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)", "intent": "Return a new Dialog object . An entry in the Dialog table is made , with the specified coordinates , dialog attributes , `title` , `name` of the `first` , `default` , and `cancel` controls . With arguments `db`, `x`, `y`, `w`, `h`, `attr`.", "question_id": 6135}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`.", "question_id": 64}
{"snippet": "test_case.assertDictEqual(first, second)", "intent": "Test that two dictionaries are equal . With arguments `first`, `second`.", "question_id": 11460}
{"snippet": "xml.parsers.expat.ParserCreate(namespace_separator=None)", "intent": "Creates and returns a new xmlparser object . Expat can optionally do XML namespace processing for you , enabled by providing a value for `namespace_separator` .", "question_id": 7730}
{"snippet": "json.load(fp, **kw, cls=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . With arguments `**kw`.", "question_id": 5291}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "text_io_base.read()", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5138}
{"snippet": "chain.from_iterable(iterable)", "intent": "Alternate constructor for chain ( ) . Gets chained inputs from a single `iterable` argument that is evaluated lazily .", "question_id": 5242}
{"snippet": "traceback_exception.extract(frame_gen, capture_locals=False)", "intent": "Construct a StackSummary object from a frame generator ( such as is returned by walk_stack ( ) or walk_tb ( ) ) . If `limit` is supplied , only this many frames are taken from `frame_gen` . If `capture_locals` is True the local variables in each FrameSummary are captured as object representations .", "question_id": 10826}
{"snippet": "os.path.relpath(path)", "intent": "Return a relative filepath to `path` either from the current directory or from an optional `start` directory .", "question_id": 7164}
{"snippet": "multiprocessing.Semaphore()", "intent": "A semaphore object : a close analog of threading.Semaphore .", "question_id": 6264}
{"snippet": "context.rotate(x, y)", "intent": "Returns a rotated copy of `x` , `y` times .", "question_id": 2567}
{"snippet": "dialog.checkbox(name, x, y, width, height, attributes, property, text, next_control)", "intent": "Add and return a CheckBox control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `property`, `text`, `next_control`.", "question_id": 6142}
{"snippet": "NNTP.newnews(group, date)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "question_id": 6463}
{"snippet": "traceback.extract_tb(tb)", "intent": "Return a StackSummary object representing a list of \u201c pre-processed \u201d stack trace entries extracted from the traceback object `tb` .", "question_id": 10769}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "Request.method", "intent": "The HTTP request method to use.", "question_id": 11823}
{"snippet": "i_pv4_address.reverse_pointer", "intent": "The name of the reverse DNS PTR record for the IP address, e.g.", "question_id": 5179}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700}
{"snippet": "socket.gethostname()", "intent": "Return a string containing the hostname of the machine where the Python interpreter is currently executing .", "question_id": 8649}
{"snippet": "terminal_size.lines", "intent": "Height of the terminal window in characters.", "question_id": 6815}
{"snippet": "TarFile.extract(member, path=\"\", set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9944}
{"snippet": "glob.iglob(pathname)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`.", "question_id": 4266}
{"snippet": "concurrent.futures.ProcessPoolExecutor(mp_context=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `mp_context` can be a multiprocessing context or None .", "question_id": 1459}
{"snippet": "connection.execute(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8811}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458}
{"snippet": "policy.raise_on_defect", "intent": "If True, any defects encountered will be raised as errors.", "question_id": 3416}
{"snippet": "oss_audio_device.read(size)", "intent": "Read `size` bytes from the audio input and return them as a Python string .", "question_id": 7180}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "inspect.CO_OPTIMIZED", "intent": "The code object is optimized, using fast locals.", "question_id": 5040}
{"snippet": "coverage_results.update(other)", "intent": "Merge in data from another CoverageResults object . With arguments `other`.", "question_id": 10724}
{"snippet": "stat.S_ISUID", "intent": "Set UID bit.", "question_id": 9094}
{"snippet": "dis.hasjrel", "intent": "Sequence of bytecodes that have a relative jump target.", "question_id": 2748}
{"snippet": "bytes_feed_parser.feed(data)", "intent": "Feed the parser some more `data` .", "question_id": 3366}
{"snippet": "element_tree.write(file, short_empty_elements=True)", "intent": "Writes the element tree to a `file` , as XML . The keyword-only `short_empty_elements` parameter controls the formatting of elements that contain no content .", "question_id": 12532}
{"snippet": "resource.RLIMIT_AS", "intent": "The maximum area (in bytes) of address space which may be taken by the process.", "question_id": 8086}
{"snippet": "subprocess.check_call(args, stdout=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`.", "question_id": 9671}
{"snippet": "threading.Event", "intent": "Class implementing event objects.", "question_id": 10406}
{"snippet": "xml.etree.ElementTree.XMLID(text)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data .", "question_id": 12471}
{"snippet": "compileall.compile_dir(dir, legacy=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1415}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN", "intent": "Some token (such as a start tag) was not closed before the end of the stream or the next token was encountered.", "question_id": 7803}
{"snippet": "base_handler.error_body", "intent": "The error response body.", "question_id": 12265}
{"snippet": "Dialect.delimiter", "intent": "A one-character string used to separate fields.", "question_id": 1723}
{"snippet": "ArgumentParser.get_default(dest)", "intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "question_id": 102}
{"snippet": "multiprocessing.get_logger()", "intent": "Returns the logger used by multiprocessing .", "question_id": 6382}
{"snippet": "inspect.getmembers(object, predicate)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name . If the optional `predicate` argument is supplied , only members for which the predicate returns a true value are included .", "question_id": 4945}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164}
{"snippet": "asyncio.ProactorEventLoop", "intent": "An event loop for Windows that uses \u201cI/O Completion Ports\u201d (IOCP).", "question_id": 343}
{"snippet": "platform.python_build()", "intent": "Returns a tuple ( buildno , builddate ) stating the Python build number and date as strings .", "question_id": 7473}
{"snippet": "style.theme_names()", "intent": "Returns a list of all known themes .", "question_id": 10691}
{"snippet": "context.remainder_near(x, y)", "intent": "Returns `x` - `y` * n , where n is the integer nearest the exact value of x / y ( if the result is 0 then its sign will be the sign of x ) .", "question_id": 2566}
{"snippet": "mailbox.mbox(path, factory=None)", "intent": "A subclass of Mailbox for mailboxes in mbox format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . With arguments `path`.", "question_id": 5769}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "devpoll.poll()", "intent": "Polls the set of registered file descriptors , and returns a possibly-empty list containing ( fd , event ) 2-tuples for the descriptors that have events or errors to report .", "question_id": 8178}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "loop.sock_sendfile(sock, file)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket .", "question_id": 281}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "SSLContext.wrap_socket(sock, do_handshake_on_connect=True)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `do_handshake_on_connect` specifies whether to do the SSL handshake automatically after doing a socket.connect ( ) , or whether the application program will call it explicitly , by invoking the SSLSocket.do_handshake ( ) method .", "question_id": 9024}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}
{"snippet": "message.get_params(failobj=None, unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2988}
{"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196}
{"snippet": "bytes.decode(errors=\"strict\")", "intent": "Return a string decoded from the given bytes . `errors` may be given to set a different error handling scheme .", "question_id": 9277}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "sysconfig.parse_config_h(fp, vars)", "intent": "Parse a config.h-style file . `fp` is a file-like object pointing to the config.h-like file . With arguments `vars`.", "question_id": 9873}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "XMLReader.parse(source)", "intent": "Process an input `source` , producing SAX events .", "question_id": 12613}
{"snippet": "sys.exit(arg)", "intent": "Exit from Python . The optional argument `arg` can be an integer giving the exit status ( defaulting to zero ) , or another type of object .", "question_id": 9788}
{"snippet": "UUID.is_safe", "intent": "An enumeration of SafeUUID which indicates whether the platform generated the UUID in a multiprocessing-safe way.", "question_id": 11955}
{"snippet": "cmath.polar(x)", "intent": "Return the representation of `x` in polar coordinates .", "question_id": 1094}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "tkinter.ttk.Style", "intent": "This class is used to manipulate the style database.", "question_id": 10672}
{"snippet": "@functools.total_ordering", "intent": "Given a class defining one or more rich comparison ordering methods, this class decorator supplies the rest.", "question_id": 4150}
{"snippet": "os.remove(path)", "intent": "Remove ( delete ) the file `path` .", "question_id": 6889}
{"snippet": "timer.print_exc()", "intent": "Helper to print a traceback from the timed code .", "question_id": 10515}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "Packer.pack_array(list, pack_item)", "intent": "Packs a variable length `list` of homogeneous items . With arguments `pack_item`.", "question_id": 12284}
{"snippet": "stat.ST_MTIME", "intent": "Time of last modification.", "question_id": 9082}
{"snippet": "Panel.show()", "intent": "Display the panel ( which might have been hidden ) .", "question_id": 2153}
{"snippet": "base_http_request_handler.error_content_type", "intent": "Specifies the Content-Type HTTP header of error responses sent to the client.", "question_id": 4630}
{"snippet": "CookiePolicy.hide_cookie2", "intent": "Don\u2019t add Cookie2 header to requests (the presence of this header indicates to the server that we understand RFC 2965 cookies).", "question_id": 4538}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "loop.shutdown_asyncgens()", "intent": "Schedule all currently open asynchronous generator objects to close with an aclose ( ) call .", "question_id": 188}
{"snippet": "itertools.zip_longest(*iterables, fillvalue=None)", "intent": "Make an iterator that aggregates elements from each of the iterables . If the iterables are of uneven length , missing values are filled-in with `fillvalue` . With arguments `*iterables`.", "question_id": 5269}
{"snippet": "BrokenPipeError", "intent": "A subclass of ConnectionError, raised when trying to write on a pipe while the other end has been closed, or trying to write on a socket which has been shutdown for writing.", "question_id": 3689}
{"snippet": "email.headerregistry.ParameterizedMIMEHeader", "intent": "MIME headers all start with the prefix \u2018Content-\u2018.", "question_id": 3167}
{"snippet": "email.encoders.encode_noop(msg)", "intent": "This does nothing ; it doesn \u2019 t even set the Content-Transfer-Encoding header . With arguments `msg`.", "question_id": 3072}
{"snippet": "dict.keys()", "intent": "Return a new view of the dictionary \u2019 s keys .", "question_id": 9485}
{"snippet": "connection.iterdump()", "intent": "Returns an iterator to dump the database in an SQL text format .", "question_id": 8828}
{"snippet": "contextvars.ContextVar(name)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes .", "question_id": 1638}
{"snippet": "logging.config.stopListening()", "intent": "Stops the listening server which was created with a call to listen ( ) .", "question_id": 5420}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947}
{"snippet": "Node.firstChild", "intent": "The first child of the node, if there are any, or None.", "question_id": 12320}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "turtle.end_fill()", "intent": "Fill the shape drawn after the last call to begin_fill ( ) .", "question_id": 10966}
{"snippet": "sys.dont_write_bytecode", "intent": "If this is true, Python won\u2019t try to write .pyc files on the import of source modules.", "question_id": 9780}
{"snippet": "stringprep.in_table_c7(code)", "intent": "Determine whether `code` is in tableC.7 ( Inappropriate for canonical representation ) .", "question_id": 9545}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "tkinter.tix.Meter", "intent": "The Meter widget can be used to show the progress of a background job which may take a long time to execute.", "question_id": 10558}
{"snippet": "directory.add_file(file)", "intent": "Add a `file` to the current component of the directory , starting a new one if there is no current component .", "question_id": 6103}
{"snippet": "email.header.Header()", "intent": "Create a MIME-compliant header that can contain strings in different character sets .", "question_id": 3116}
{"snippet": "MON_1 ... MON_12", "intent": "Get the name of the n-th month.", "question_id": 5361}
{"snippet": "errno.ECONNABORTED", "intent": "Software caused connection abort", "question_id": 3608}
{"snippet": "imp.get_suffixes()", "intent": "Return a list of 3-element tuples , each describing a particular type of module .", "question_id": 4761}
{"snippet": "ssl.MemoryBIO", "intent": "A memory buffer that can be used to pass data between Python and an SSL protocol instance.", "question_id": 9053}
{"snippet": "loop.sendfile(transport, file, offset=0, count=None)", "intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 260}
{"snippet": "test.support.check_free_after_iterating(test, iter, cls)", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.", "question_id": 10271}
{"snippet": "importlib.util.cache_from_source(path, optimization=None)", "intent": "Return the PEP 3147/PEP 488 `path` to the byte-compiled file associated with the source path . The `optimization` parameter is used to specify the optimization level of the bytecode file .", "question_id": 4923}
{"snippet": "statistics.median_grouped(data)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation .", "question_id": 9130}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855}
{"snippet": "grp.getgrnam(name)", "intent": "Return the group database entry for the given group `name` .", "question_id": 4270}
{"snippet": "curses.resize_term(nlines, ncols)", "intent": "Backend function used by resizeterm ( ) , performing most of the work ; when resizing the windows , resize_term ( ) blank-fills the areas that are extended . With arguments `nlines`, `ncols`.", "question_id": 1975}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "itertools.combinations_with_replacement(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` allowing individual elements to be repeated more than once .", "question_id": 5244}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}
{"snippet": "msilib.Binary(filename)", "intent": "Represents entries in the Binary table ; inserting such an object using add_data ( ) reads the file named `filename` into the table .", "question_id": 6064}
{"snippet": "timezone.utc", "intent": "The UTC timezone, timezone(timedelta(0)).", "question_id": 2363}
{"snippet": "email.header.Header(charset=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `charset` serves two purposes : it has the same meaning as the charset argument to the append ( ) method .", "question_id": 3118}
{"snippet": "devpoll.closed", "intent": "True if the polling object is closed.", "question_id": 8170}
{"snippet": "io.open(file)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`.", "question_id": 5051}
{"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919}
{"snippet": "itertools.groupby(iterable)", "intent": "Make an iterator that returns consecutive keys and groups from the `iterable` .", "question_id": 5253}
{"snippet": "dispatcher.handle_read()", "intent": "Called when the asynchronous loop detects that a read ( ) call on the channel \u2019 s socket will succeed .", "question_id": 653}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "configparser.ConfigParser(':'), ';'), delimiters=('=')", "intent": "The main configuration parser . When `delimiters` is given , it is used as the set of substrings that divide keys from values . With arguments `':')`, `';')`.", "question_id": 1500}
{"snippet": "memory_handler.flush()", "intent": "For a MemoryHandler , flushing means just sending the buffered records to the target , if there is one .", "question_id": 5538}
{"snippet": "typing.Type(GenericCT_co)", "intent": "A variable annotated with C may accept a value of type C. In contrast , a variable annotated with Type [ C ] may accept values that are classes themselves \u2013 specifically , it will accept the class object of C. For example : With arguments `GenericCT_co`.", "question_id": 11231}
{"snippet": "statistic_diff.count", "intent": "Number of memory blocks in the new snapshot (int): 0 if the memory blocks have been released in the new snapshot.", "question_id": 10885}
{"snippet": "zlib.error", "intent": "Exception raised on compression and decompression errors.", "question_id": 12892}
{"snippet": "NNTP.help()", "intent": "Send a HELP command .", "question_id": 6474}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "xml.sax.handler.all_properties", "intent": "List of all known property names.", "question_id": 12569}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}
{"snippet": "resource.RUSAGE_SELF", "intent": "Pass to getrusage() to request resources consumed by the calling process, which is the sum of resources used by all threads in the process.", "question_id": 8097}
{"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "module_type.__package__", "intent": "Which package a module belongs to.", "question_id": 11201}
{"snippet": "os.SCHED_BATCH", "intent": "Scheduling policy for CPU-intensive processes that tries to preserve interactivity on the rest of the computer.", "question_id": 7097}
{"snippet": "typing.Type()", "intent": "A variable annotated with C may accept a value of type C. In contrast , a variable annotated with Type [ C ] may accept values that are classes themselves \u2013 specifically , it will accept the class object of C. For example :", "question_id": 11232}
{"snippet": "doctest.DocTestSuite(checker=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . With arguments `checker`.", "question_id": 2813}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "subprocess.IDLE_PRIORITY_CLASS", "intent": "A Popen creationflags parameter to specify that a new process will have an idle (lowest) priority.", "question_id": 9652}
{"snippet": "difflib.diff_bytes(dfunc, a, b)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc .", "question_id": 2657}
{"snippet": "timedelta.resolution", "intent": "The smallest possible difference between non-equal timedelta objects, timedelta(microseconds=1).", "question_id": 2216}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "http_handler.mapLogRecord(record)", "intent": "Provides a dictionary , based on `record` , which is to be URL-encoded and sent to the web server .", "question_id": 5551}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "bytes(source, encoding)", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) .", "question_id": 9258}
{"snippet": "bytes_io.read1()", "intent": "In BytesIO , this is the same as read ( ) .", "question_id": 5114}
{"snippet": "DeprecationWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "question_id": 3703}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "traceback_exception.format_exception_only()", "intent": "Format the exception part of the traceback .", "question_id": 10822}
{"snippet": "dis.distb()", "intent": "Disassemble the top-of-stack function of a traceback , using the last traceback if none was passed .", "question_id": 2715}
{"snippet": "multiprocessing.set_executable()", "intent": "Sets the path of the Python interpreter to use when starting a child process .", "question_id": 6228}
{"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659}
{"snippet": "difflib.Differ()", "intent": "Optional keyword parameters `linejunk` and `charjunk` are for filter functions ( or None ) :", "question_id": 2690}
{"snippet": "lock.acquire()", "intent": "Acquire a lock , blocking or non-blocking .", "question_id": 6252}
{"snippet": "pool.join()", "intent": "Wait for the worker processes to exit .", "question_id": 6358}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "writer.send_hor_rule(*args, **kw)", "intent": "Display a horizontal rule on the output device . With arguments `*args`, `**kw`.", "question_id": 3849}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "NNTP.login()", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6451}
{"snippet": "Telnet.read_lazy()", "intent": "Process and return data already in the queues ( lazy ) .", "question_id": 10015}
{"snippet": "Panel.hide()", "intent": "Hide the panel .", "question_id": 2149}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "window.notimeout(flag)", "intent": "If `flag` is True , escape sequences will not be timed out .", "question_id": 2097}
{"snippet": "i_pv4_address.packed", "intent": "The binary representation of this address - a bytes object of the appropriate length (most significant octet first).", "question_id": 5178}
{"snippet": "queue.PriorityQueue()", "intent": "Constructor for a priority queue .", "question_id": 7841}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "ZipInfo.comment", "intent": "Comment for the individual archive member as a bytes object.", "question_id": 12866}
{"snippet": "turtle.tracer()", "intent": "Turn turtle animation on/off and set `delay` for update drawings .", "question_id": 11058}
{"snippet": "ctypes.pythonapi", "intent": "An instance of PyDLL that exposes Python C API functions as attributes.", "question_id": 1785}
{"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358}
{"snippet": "TabError", "intent": "Raised when indentation contains an inconsistent use of tabs and spaces.", "question_id": 3667}
{"snippet": "xml.sax.parse(filename_or_stream, handler)", "intent": "Create a SAX parser and use it to parse a document . The document , passed in as `filename_or_stream` , can be a filename or a file object . The `handler` parameter needs to be a SAX ContentHandler instance .", "question_id": 12593}
{"snippet": "unicodedata.name(chr, default)", "intent": "Returns the name assigned to the character `chr` as a string . If no name is defined , `default` is returned , or , if not given , ValueError is raised .", "question_id": 11341}
{"snippet": "test_result.stopTest(test)", "intent": "Called after the `test` case test has been executed , regardless of the outcome .", "question_id": 11521}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN", "intent": "Raised when an input byte could not properly be assigned to a character; for example, a NUL byte (value 0) in a UTF-8 input stream.", "question_id": 7793}
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060}
{"snippet": "base_handler._flush()", "intent": "Force buffered data to be transmitted to the client .", "question_id": 12249}
{"snippet": "winreg.LoadKey(key, sub_key, file_name)", "intent": "Creates a subkey under the specified `key` and stores registration information from a specified file into that subkey . `sub_key` is a string that identifies the subkey to load . `file_name` is the name of the file to load registry data from .", "question_id": 12137}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}
{"snippet": "urllib.parse.urlparse(urlstring, scheme='')", "intent": "Parse a URL into six components , returning a 6-item named tuple . It should be the same type ( text or bytes ) as `urlstring` , except that the default value `` is always allowed , and is automatically converted to b '' if appropriate . This corresponds to the general structure of a URL : `scheme` : //netloc/path ; parameters ? query # fragment .", "question_id": 11666}
{"snippet": "io.TextIOWrapper(buffer, newline=None)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` . `newline` controls how line endings are handled .", "question_id": 5149}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "html_diff.__init__(linejunk=None)", "intent": "Initializes instance of HtmlDiff . `linejunk` and `charjunk` are optional keyword arguments passed into ndiff ( ) ( used by HtmlDiff to generate the side by side HTML differences ) .", "question_id": 2601}
{"snippet": "mailbox.MaildirMessage()", "intent": "A `message` with Maildir-specific behaviors .", "question_id": 5811}
{"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}
{"snippet": "set.issubset(other)", "intent": "Test whether every element in the set is in `other` .", "question_id": 9439}
{"snippet": "json_decoder.raw_decode(s)", "intent": "Decode a JSON document from `s` ( a str beginning with a JSON document ) and return a 2-tuple of the Python representation and the index in s where the document ended .", "question_id": 5321}
{"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356}
{"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "email.mime.image.MIMEImage(_imagedata, **_params)", "intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . With arguments `**_params`.", "question_id": 3342}
{"snippet": "@asyncio.coroutine", "intent": "Decorator to mark generator-based coroutines.", "question_id": 644}
{"snippet": "subprocess.CREATE_NEW_PROCESS_GROUP", "intent": "A Popen creationflags parameter to specify that a new process group will be created.", "question_id": 9648}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997}
{"snippet": "json.load(fp, **kw, cls=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . With arguments `**kw`.", "question_id": 5291}
{"snippet": "str.count(sub, start, end)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9182}
{"snippet": "test_case.tearDown()", "intent": "Method called immediately after the test method has been called and the result recorded .", "question_id": 11366}
{"snippet": "types.new_class(name, bases=())", "intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11171}
{"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957}
{"snippet": "asyncio.run_coroutine_threadsafe(coro, loop)", "intent": "Submit a coroutine to the given event `loop` . With arguments `coro`.", "question_id": 619}
{"snippet": "inspect.CO_NESTED", "intent": "The flag is set when the code object is a nested function.", "question_id": 5044}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "@test.support.bigmemtest(size, memuse, dry_run=True)", "intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it . If `dry_run` is True , the value passed to the test method may be less than the requested value .", "question_id": 10228}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "base_handler.log_exception(exc_info)", "intent": "Log the `exc_info` tuple in the server log .", "question_id": 12260}
{"snippet": "traceback.print_tb(tb)", "intent": "Print up to `limit` stack trace entries from traceback object `tb` ( starting from the caller \u2019 s frame ) if limit is positive .", "question_id": 10733}
{"snippet": "array.typecode", "intent": "The typecode character used to create the array.", "question_id": 118}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}
{"snippet": "sys.dont_write_bytecode", "intent": "If this is true, Python won\u2019t try to write .pyc files on the import of source modules.", "question_id": 9780}
{"snippet": "sqlite3.enable_callback_tracebacks(flag)", "intent": "By default you will not get any tracebacks in user-defined functions , aggregates , converters , authorizer callbacks etc . If you want to debug them , you can call this function with `flag` set to True .", "question_id": 8802}
{"snippet": "ssl.OP_NO_RENEGOTIATION", "intent": "Disable all renegotiation in TLSv1.2 and earlier.", "question_id": 8937}
{"snippet": "Packer.pack_bytes(bytes)", "intent": "Packs a variable length byte stream , similarly to pack_string ( ) . With arguments `bytes`.", "question_id": 12281}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "os.fpathconf(fd, name)", "intent": "Return system configuration information relevant to an open file . As of Python 3.3 , this is equivalent to os.pathconf ( `fd` , name ) . `name` specifies the configuration value to retrieve ; it may be a string which is the name of a defined system value ; these names are specified in a number of standards ( POSIX.1 , Unix 95 , Unix 98 , and others ) .", "question_id": 6722}
{"snippet": "i_pv4_address.is_multicast", "intent": "True if the address is reserved for multicast use.", "question_id": 5180}
{"snippet": "locale.THOUSEP", "intent": "Get the separator character for thousands (groups of three digits).", "question_id": 5364}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667}
{"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}
{"snippet": "coverage_results.update(other)", "intent": "Merge in data from another CoverageResults object . With arguments `other`.", "question_id": 10724}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "tkinter.tix.TList", "intent": "The TList widget can be used to display data in a tabular format.", "question_id": 10573}
{"snippet": "glob.escape(pathname)", "intent": "Escape all special characters ( ' ? With arguments `pathname`.", "question_id": 4268}
{"snippet": "aifc.getmarkers()", "intent": "Return a list of markers in the audio file .", "question_id": 18}
{"snippet": "Telnet.read_very_eager()", "intent": "Read everything that can be without blocking in I/O ( eager ) .", "question_id": 10013}
{"snippet": "breakpoint.enable()", "intent": "Mark the breakpoint as enabled .", "question_id": 763}
{"snippet": "multiprocessing.managers.Namespace", "intent": "A type that can register with SyncManager.", "question_id": 6318}
{"snippet": "aifc.setnchannels(nchannels)", "intent": "Specify the number of channels in the audio file . With arguments `nchannels`.", "question_id": 27}
{"snippet": "errno.ELIBBAD", "intent": "Accessing a corrupted shared library", "question_id": 3585}
{"snippet": "ur_lopener.open(fullurl)", "intent": "Open `fullurl` using the appropriate protocol .", "question_id": 11892}
{"snippet": "cgi.parse()", "intent": "Parse a query in the environment or from a file ( the file defaults to sys.stdin ) .", "question_id": 1029}
{"snippet": "multiprocessing.Semaphore()", "intent": "A semaphore object : a close analog of threading.Semaphore .", "question_id": 6264}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "urllib.request.BaseHandler", "intent": "This is the base class for all registered handlers \u2014 and handles only the simple mechanics of registration.", "question_id": 11779}
{"snippet": "winsound.SND_NOSTOP", "intent": "Do not interrupt sounds currently playing.", "question_id": 12203}
{"snippet": "context.minus(x)", "intent": "Minus corresponds to the unary prefix minus operator in Python . With arguments `x`.", "question_id": 2553}
{"snippet": "winsound.SND_ASYNC", "intent": "Return immediately, allowing sounds to play asynchronously.", "question_id": 12201}
{"snippet": "@test.support.requires_mac_version(*min_version)", "intent": "Decorator for the minimum version when running test on Mac OS X . With arguments `*min_version`.", "question_id": 10213}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "errno.EBADSLT", "intent": "Invalid slot", "question_id": 3562}
{"snippet": "os.RWF_NOWAIT", "intent": "Do not wait for data which is not immediately available.", "question_id": 6786}
{"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592}
{"snippet": "sys.version", "intent": "A string containing the version number of the Python interpreter plus additional information on the build number and compiler used.", "question_id": 9852}
{"snippet": "i_pv4_address.exploded", "intent": "The string representation in dotted decimal notation.", "question_id": 5177}
{"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324}
{"snippet": "somenamedtuple._field_defaults", "intent": "Dictionary mapping field names to default values.", "question_id": 1388}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`.", "question_id": 10304}
{"snippet": "base_http_request_handler.end_headers()", "intent": "Adds a blank line ( indicating the end of the HTTP headers in the response ) to the headers buffer and calls flush_headers ( ) .", "question_id": 4646}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "formatter.vformat(format_string, args, kwargs)", "intent": "This function does the actual work of formatting . With arguments `format_string`, `args`, `kwargs`.", "question_id": 9518}
{"snippet": "cmd.Cmd(completekey='tab', stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1131}
{"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745}
{"snippet": "wsgiref.handlers.IISCGIHandler", "intent": "A specialized alternative to CGIHandler, for use when deploying on Microsoft\u2019s IIS web server, without having set the config allowPathInfo option (IIS>=7) or metabase allowPathInfoForScriptMappings (IIS<7).", "question_id": 12237}
{"snippet": "html_calendar.cssclasses", "intent": "A list of CSS classes used for each weekday.", "question_id": 970}
{"snippet": "InputSource.getByteStream()", "intent": "Get the byte stream for this input source .", "question_id": 12641}
{"snippet": "base64.urlsafe_b64encode(s)", "intent": "Encode bytes-like object `s` using the URL- and filesystem-safe alphabet , which substitutes - instead of + and _ instead of / in the standard Base64 alphabet , and return the encoded bytes .", "question_id": 716}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "datetime.timestamp()", "intent": "Return POSIX timestamp corresponding to the datetime instance .", "question_id": 2302}
{"snippet": "Wave_write.close()", "intent": "Make sure nframes is correct , and close the file if it was opened by wave .", "question_id": 12064}
{"snippet": "faulthandler.disable()", "intent": "Disable the fault handler : uninstall the signal handlers installed by enable ( ) .", "question_id": 3720}
{"snippet": "i_pv4_address.reverse_pointer", "intent": "The name of the reverse DNS PTR record for the IP address, e.g.", "question_id": 5179}
{"snippet": "completed_process.check_returncode()", "intent": "If returncode is non-zero , raise a CalledProcessError .", "question_id": 9582}
{"snippet": "socket.connect(address)", "intent": "Connect to a remote socket at `address` .", "question_id": 8676}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "ssl.SSLSyscallError", "intent": "A subclass of SSLError raised when a system error was encountered while trying to fulfill an operation on a SSL socket.", "question_id": 8879}
{"snippet": "configparser.InterpolationSyntaxError", "intent": "Exception raised when the source text into which substitutions are made does not conform to the required syntax.", "question_id": 1599}
{"snippet": "locale.atoi(string)", "intent": "Converts a `string` to an integer , following the LC_NUMERIC conventions .", "question_id": 5403}
{"snippet": "simple_http_request_handler.directory", "intent": "If not specified, the directory to serve is the current working directory.", "question_id": 4663}
{"snippet": "zipfile.ZipFile(file, mode='r')", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file .", "question_id": 12793}
{"snippet": "xml.parsers.expat.ParserCreate(namespace_separator=None)", "intent": "Creates and returns a new xmlparser object . Expat can optionally do XML namespace processing for you , enabled by providing a value for `namespace_separator` .", "question_id": 7730}
{"snippet": "formatter.push_alignment(align)", "intent": "Push a new alignment setting onto the alignment stack . If the alignment value is changed from the previous setting , the writer \u2019 s new_alignment ( ) method is called with the `align` value .", "question_id": 3826}
{"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}
{"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}
{"snippet": "turtle.onkey(fun, key)", "intent": "Bind `fun` to key-release event of `key` .", "question_id": 11067}
{"snippet": "AU_read.getnchannels()", "intent": "Returns number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 9708}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}
{"snippet": "platform.architecture()", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information .", "question_id": 7458}
{"snippet": "pickle.dump(obj, file, protocol=None, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7366}
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400}
{"snippet": "http.cookiejar.LWPCookieJar(filename)", "intent": "A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library \u2019 s Set-Cookie3 file format . With arguments `filename`.", "question_id": 4528}
{"snippet": "ctypes.PyDLL(name)", "intent": "Instances of this class behave like CDLL instances , except that the Python GIL is not released during the function call , and after the function execution the Python error flag is checked . With arguments `name`.", "question_id": 1770}
{"snippet": "xml.sax.xmlreader.IncrementalParser", "intent": "In some cases, it is desirable not to parse an input source at once, but to feed chunks of the document as they get available.", "question_id": 12607}
{"snippet": "watched_file_handler.reopenIfNeeded()", "intent": "Checks to see if the file has changed .", "question_id": 5448}
{"snippet": "opname", "intent": "human readable name for operation", "question_id": 2735}
{"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}
{"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}
{"snippet": "stat.UF_COMPRESSED", "intent": "The file is stored compressed (Mac OS X 10.6+).", "question_id": 9118}
{"snippet": "xml.sax.saxutils.unescape(data, entities={})", "intent": "Unescape ' & amp ; ' , ' & lt ; ' , and ' & gt ; ' in a string of `data` . You can unescape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12655}
{"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201}
{"snippet": "errno.EFBIG", "intent": "File too large", "question_id": 3532}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, suppress_ragged_eofs=True)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . The parameter `suppress_ragged_eofs` specifies how the SSLSocket.recv ( ) method should signal unexpected EOF from the other end of the connection .", "question_id": 9029}
{"snippet": "itertools.count()", "intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "question_id": 5246}
{"snippet": "types.FunctionType", "intent": "The type of user-defined functions and functions created by lambda  expressions.", "question_id": 11183}
{"snippet": "ctypes.c_int", "intent": "Represents the C signed int datatype.", "question_id": 1861}
{"snippet": "parser.tuple2st(sequence)", "intent": "This is the same function as sequence2st ( ) . With arguments `sequence`.", "question_id": 7213}
{"snippet": "mailbox.Message(message=None)", "intent": "A subclass of the email.message module \u2019 s Message . If `message` is omitted , the new instance is created in a default , empty state .", "question_id": 5810}
{"snippet": "pkgutil.ImpImporter()", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm .", "question_id": 7437}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328}
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934}
{"snippet": "os.utime(path, ns)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6959}
{"snippet": "null_translations.info()", "intent": "Return the \u201c protected \u201d _info variable , a dictionary containing the metadata found in the message catalog file .", "question_id": 4254}
{"snippet": "statistics.pvariance(data)", "intent": "Return the population variance of `data` , a non-empty iterable of real-valued numbers .", "question_id": 9135}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "struct.unpack(format, buffer)", "intent": "Unpack from the `buffer` buffer ( presumably packed by pack ( `format` , ... ) ) according to the format string format .", "question_id": 9553}
{"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}
{"snippet": "re.finditer(pattern, string)", "intent": "Return an iterator yielding match objects over all non-overlapping matches for the RE `pattern` in `string` .", "question_id": 7949}
{"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491}
{"snippet": "locale.LC_MESSAGES", "intent": "Locale category for message display.", "question_id": 5408}
{"snippet": "logging.config.listen()", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations .", "question_id": 5416}
{"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "array.itemsize", "intent": "The length in bytes of one array item in the internal representation.", "question_id": 119}
{"snippet": "stat_result.st_nlink", "intent": "Number of hard links.", "question_id": 6925}
{"snippet": "tkinter.tix.ListNoteBook", "intent": "The ListNoteBook widget is very similar to the TixNoteBook widget: it can be used to display many windows in a limited space using a notebook metaphor.", "question_id": 10575}
{"snippet": "asyncio.AbstractEventLoop", "intent": "Abstract base class for asyncio-compliant event loops.", "question_id": 344}
{"snippet": "msvcrt.getwch()", "intent": "Wide char variant of getch ( ) , returning a Unicode value .", "question_id": 6157}
{"snippet": "socket.sendto(bytes, address)", "intent": "Send data to the socket . Return the number of `bytes` sent . The socket should not be connected to a remote socket , since the destination socket is specified by `address` .", "question_id": 8721}
{"snippet": "gettext.install(domain, names=None)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) . For the `names` parameter , please see the description of the translation object \u2019 s install ( ) method .", "question_id": 4242}
{"snippet": "doc_test_parser.parse(string)", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings .", "question_id": 2859}
{"snippet": "null_translations.install(names=None)", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "question_id": 4259}
{"snippet": "asyncio.current_task()", "intent": "Return the currently running Task instance , or None if no task is running .", "question_id": 620}
{"snippet": "template.substitute(mapping, **kwds)", "intent": "Performs the template substitution , returning a new string . `mapping` is any dictionary-like object with keys that match the placeholders in the template . With arguments `**kwds`.", "question_id": 9526}
{"snippet": "winsound.SND_NOSTOP", "intent": "Do not interrupt sounds currently playing.", "question_id": 12203}
{"snippet": "sys.api_version", "intent": "The C API version for this interpreter.", "question_id": 9853}
{"snippet": "keyword.iskeyword(s)", "intent": "Return true if `s` is a Python keyword .", "question_id": 5341}
{"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458}
{"snippet": "nis.maps(domain=default_domain)", "intent": "Return a list of all valid maps . The `domain` argument allows overriding the NIS domain used for the lookup .", "question_id": 6396}
{"snippet": "subprocess.STARTUPINFO()", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation .", "question_id": 9625}
{"snippet": "message.get_param(param, unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2994}
{"snippet": "fraction.__round__()", "intent": "The first version returns the nearest int to self , rounding half to even .", "question_id": 3875}
{"snippet": "datetime.replace(minute=self.minute)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `minute`.", "question_id": 2289}
{"snippet": "tempfile.mkstemp()", "intent": "Creates a temporary file in the most secure manner possible .", "question_id": 10071}
{"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324}
{"snippet": "email.headerregistry.Address()", "intent": "The class used to represent an email address .", "question_id": 3186}
{"snippet": "row.keys()", "intent": "This method returns a list of column names .", "question_id": 8855}
{"snippet": "telnetlib.Telnet()", "intent": "Telnet represents a connection to a Telnet server .", "question_id": 10005}
{"snippet": "structure._anonymous_", "intent": "An optional sequence that lists the names of unnamed (anonymous) fields.", "question_id": 1892}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "collections.abc.AsyncGenerator", "intent": "ABC for asynchronous generator classes that implement the protocol defined in PEP 525 and PEP 492.", "question_id": 1334}
{"snippet": "FileCookieJar.save(ignore_discard=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4500}
{"snippet": "base_handler.os_environ", "intent": "The default environment variables to be included in every request\u2019s WSGI environment.", "question_id": 12256}
{"snippet": "MON_1 ... MON_12", "intent": "Get the name of the n-th month.", "question_id": 5361}
{"snippet": "array.tounicode()", "intent": "Convert the array to a unicode string .", "question_id": 140}
{"snippet": "decimal.DivisionByZero", "intent": "Signals the division of a non-infinite number by zero.", "question_id": 2587}
{"snippet": "_func_ptr.errcheck", "intent": "Assign a Python function or another callable to this attribute.", "question_id": 1789}
{"snippet": "bound_arguments.apply_defaults()", "intent": "Set default values for missing arguments .", "question_id": 5007}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140}
{"snippet": "terminal_size.columns", "intent": "Width of the terminal window in characters.", "question_id": 6814}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499}
{"snippet": "socket.listen()", "intent": "Enable a server to accept connections .", "question_id": 8690}
{"snippet": "epoll.poll(timeout=-1)", "intent": "Wait for events . `timeout` in seconds ( float )", "question_id": 8188}
{"snippet": "loop.call_soon(callback, *args)", "intent": "Schedule a `callback` to be called with args arguments at the next iteration of the event loop . With arguments `*args`.", "question_id": 189}
{"snippet": "window.timeout(delay)", "intent": "Set blocking or non-blocking read behavior for the window . If `delay` is negative , blocking read is used ( which will wait indefinitely for input ) .", "question_id": 2124}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}
{"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857}
{"snippet": "DocumentType.name", "intent": "The name of the root element as given in the DOCTYPE declaration, if present.", "question_id": 12341}
{"snippet": "stream_reader.readlines()", "intent": "Read all lines available on the input stream and return them as a list of lines .", "question_id": 1295}
{"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103}
{"snippet": "test.support.temp_dir(quiet=False)", "intent": "A context manager that creates a temporary directory at `path` and yields the directory . If `quiet` is False , the context manager raises an exception on error .", "question_id": 10178}
{"snippet": "binary.decode(bytes)", "intent": "Accept a base64 `bytes` object and decode it as the instance \u2019 s new data .", "question_id": 12687}
{"snippet": "doctest.DocTestSuite(extraglobs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `extraglobs` specifies an extra set of global variables , which is merged into globs .", "question_id": 2809}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "locale.ERA_T_FMT", "intent": "Get a format string for time.strftime() to represent a time in a locale-specific era-based way.", "question_id": 5371}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}
{"snippet": "traceback_exception.format_exception_only()", "intent": "Format the exception part of the traceback .", "question_id": 10822}
{"snippet": "loop.stop()", "intent": "Stop the event loop .", "question_id": 184}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "xml.parsers.expat.ParserCreate(namespace_separator=None)", "intent": "Creates and returns a new xmlparser object . Expat can optionally do XML namespace processing for you , enabled by providing a value for `namespace_separator` .", "question_id": 7730}
{"snippet": "mh.set_sequences(sequences)", "intent": "Re-define the `sequences` that exist in the mailbox based upon sequences , a dictionary of names mapped to key lists , like returned by get_sequences ( ) .", "question_id": 5784}
{"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}
{"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}
{"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "doctest.testfile(filename, package=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for a module-relative filename .", "question_id": 2769}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962}
{"snippet": "decimal.normalize()", "intent": "Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal ( ' 0 ' ) to Decimal ( '0e0 ' ) .", "question_id": 2457}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "numbers.Real", "intent": "To Complex, Real adds the operations that work on real numbers.", "question_id": 6508}
{"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363}
{"snippet": "xmlparser.ParseFile(file)", "intent": "Parse XML data reading from the object `file` .", "question_id": 7734}
{"snippet": "int.bit_length()", "intent": "Return the number of bits necessary to represent an integer in binary , excluding the sign and leading zeros :", "question_id": 9142}
{"snippet": "Locator.getColumnNumber()", "intent": "Return the column number where the current event begins .", "question_id": 12630}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "cgi.test()", "intent": "Robust test CGI script , usable as main program .", "question_id": 1052}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING", "intent": "A behavioral change was requested after parsing started that can only be changed before parsing has started.", "question_id": 7809}
{"snippet": "socket.create_connection(address)", "intent": "Connect to a TCP service listening on the Internet `address` ( a 2-tuple ( host , port ) ) , and return the socket object .", "question_id": 8629}
