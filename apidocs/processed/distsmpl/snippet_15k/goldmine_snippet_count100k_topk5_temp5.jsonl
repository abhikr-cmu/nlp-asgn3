{"snippet": "chunk.seek(pos)", "intent": "Set the chunk \u2019 s current position . With arguments `pos`.", "question_id": 1087}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "email_message.del_param(param, header='content-type')", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3271}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "http.client.HTTPResponse(sock)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`.", "question_id": 4402}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2641}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867}
{"snippet": "len(proxy)", "intent": "Return the number of items in the underlying mapping . With arguments `proxy`.", "question_id": 11210}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . With arguments `initargs`.", "question_id": 6328}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "compileall.compile_path(quiet=0)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `quiet`.", "question_id": 1433}
{"snippet": "OpenerDirector.add_handler(handler)", "intent": "`handler` should be an instance of BaseHandler .", "question_id": 11834}
{"snippet": "io.open(file, mode='r', buffering=-1)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `mode`, `buffering`.", "question_id": 5059}
{"snippet": "socket.recvfrom_into(buffer)", "intent": "Receive data from the socket , writing it into `buffer` instead of creating a new bytestring .", "question_id": 8713}
{"snippet": "plistlib.loads(data, fmt=None)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`.", "question_id": 7556}
{"snippet": "urllib.parse.urlencode(query, encoding=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11735}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}
{"snippet": "doctest.DocFileSuite(*paths, parser=DocTestParser())", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `parser` specifies a DocTestParser ( or subclass ) that should be used to extract tests from the files . With arguments `*paths`.", "question_id": 2803}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "random.choices(population, weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7900}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}
{"snippet": "cmd.Cmd(completekey='tab', stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1132}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "modulefinder.ModuleFinder(debug=0, excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6033}
{"snippet": "venv.create(env_dir, symlinks=False)", "intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument . With arguments `symlinks`.", "question_id": 11992}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080}
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695}
{"snippet": "cgitb.handler(info=None)", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) . The optional `info` argument should be a 3-tuple containing an exception type , exception value , and traceback object , exactly like the tuple returned by sys.exc_info ( ) .", "question_id": 1074}
{"snippet": "decimal.quantize(exp, rounding=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2462}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11128}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "urllib.parse.urlunsplit(parts)", "intent": "Combine the elements of a tuple as returned by urlsplit ( ) into a complete URL as a string . The `parts` argument can be any five-item iterable .", "question_id": 11694}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser(), recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2848}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "pdb.runeval(expression)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control .", "question_id": 7331}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "dbm.whichdb(filename)", "intent": "This function attempts to guess which of the several simple database modules available \u2014 dbm.gnu , dbm.ndbm or dbm.dumb \u2014 should be used to open a given file . With arguments `filename`.", "question_id": 2365}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "pdb.Pdb(stdin=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7343}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "socket.sendmsg_afalg(msg, op, iv, assoclen)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`, `assoclen`.", "question_id": 8728}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254}
{"snippet": "_c_data.from_buffer(source)", "intent": "This method returns a ctypes instance that shares the buffer of the `source` object .", "question_id": 1844}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "dispatcher.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 671}
{"snippet": "IMAP4.partial(message_num, message_part, start, length)", "intent": "Fetch truncated part of a message . With arguments `message_num`, `message_part`, `start`, `length`.", "question_id": 4720}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}
{"snippet": "textwrap.fill(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`, `width`.", "question_id": 10321}
{"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949}
{"snippet": "pprint.pprint(object, compact=False)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7648}
{"snippet": "calendar.prcal(year, l=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "question_id": 1009}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "message.del_param(param)", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3009}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2805}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "io.open(file, closefd=True)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `closefd`.", "question_id": 5057}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10976}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6047}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "os.open(path, flags)", "intent": "Open the file `path` and set various `flags` according to flags and possibly its `mode` according to mode .", "question_id": 6738}
{"snippet": "email.headerregistry.Address(display_name='', username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec . With arguments `display_name`.", "question_id": 3191}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "curses.meta(flag)", "intent": "If `flag` is True , allow 8-bit characters to be input .", "question_id": 1953}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "xml.etree.ElementTree.XMLPullParser(events=None)", "intent": "A pull parser suitable for non-blocking applications . Its input-side API is similar to that of XMLParser , but instead of pushing calls to a callback target , XMLPullParser collects an internal list of parsing `events` and lets the user read from it .", "question_id": 12557}
{"snippet": "codeop.compile_command(source, symbol=\"single\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . The `symbol` argument determines whether source is compiled as a statement ( 'single ' , the default ) or as an expression ( 'eval ' ) .", "question_id": 1306}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "copyreg.pickle(type, function)", "intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type .", "question_id": 1666}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "asyncio.start_unix_server(client_connected_cb, backlog=100)", "intent": "Start a Unix socket server . With arguments `client_connected_cb`, `backlog`.", "question_id": 498}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "FileHandler.file_open(req)", "intent": "Open the file locally , if there is no host name , or the host name is 'localhost ' . With arguments `req`.", "question_id": 11873}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this handler .", "question_id": 5602}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}
{"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "loop.set_task_factory(factory)", "intent": "Set a task `factory` that will be used by loop.create_task ( ) .", "question_id": 200}
{"snippet": "os.fdopen(fd, *args, **kwargs)", "intent": "Return an open file object connected to the file descriptor `fd` . With arguments `*args`, `**kwargs`.", "question_id": 6712}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "test_case.assertIs(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11383}
{"snippet": "email.headerregistry.Group(addresses=None)", "intent": "The class used to represent an address group . As a convenience for processing lists of `addresses` that consist of a mixture of groups and single addresses , a Group may also be used to represent single addresses that are not part of a group by setting `display_name` to None and providing a list of the single address as addresses .", "question_id": 3203}
{"snippet": "base64.standard_b64encode(s)", "intent": "Encode bytes-like object `s` using the standard Base64 alphabet and return the encoded bytes .", "question_id": 714}
{"snippet": "stream_writer.get_extra_info(name, default=None)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`, `default`.", "question_id": 516}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "element_tree.find(match)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`.", "question_id": 12512}
{"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}
{"snippet": "pool.imap(func, iterable, chunksize)", "intent": "A lazier version of map ( ) . The `chunksize` argument is the same as the one used by the map ( ) method . With arguments `func`, `iterable`.", "question_id": 6346}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used .", "question_id": 5530}
{"snippet": "turtle.screensize(bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `bg`.", "question_id": 11050}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "gettext.translation(domain)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "question_id": 4229}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "traceback_exception.from_exception(exc, lookup_lines=True)", "intent": "Capture an exception for later rendering . `limit` , `lookup_lines` and `capture_locals` are as for the StackSummary class . With arguments `exc`.", "question_id": 10814}
{"snippet": "style.lookup(style, option)", "intent": "Returns the value specified for `option` in `style` .", "question_id": 10677}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "Telnet.expect(list, timeout=None)", "intent": "Read until one from a `list` of a regular expressions matches . The optional second argument is a `timeout` , in seconds ; the default is to block indefinitely .", "question_id": 10031}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "urllib.parse.SplitResultBytes(scheme, netloc, path, query, fragment)", "intent": "Concrete class for urlsplit ( ) results containing bytes data . With arguments `scheme`, `netloc`, `path`, `query`, `fragment`.", "question_id": 11704}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6799}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132}
{"snippet": "gettext.bind_textdomain_codeset(domain, codeset=None)", "intent": "Bind the `domain` to `codeset` , changing the encoding of byte strings returned by the lgettext ( ) , ldgettext ( ) , lngettext ( ) and ldngettext ( ) functions .", "question_id": 4213}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "bytearray.partition(sep)", "intent": "Split the sequence at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9306}
{"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}
{"snippet": "__import__(name, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4137}
{"snippet": "min(iterable, key, default)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4054}
{"snippet": "random.randrange(start, stop)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7892}
{"snippet": "ur_lopener.retrieve(url, filename=None, data=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . It will be called once at the start and after each chunk of `data` is read from the network .", "question_id": 11901}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "readline.remove_history_item(pos)", "intent": "Remove history item specified by its position from the history . With arguments `pos`.", "question_id": 8032}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "property(doc=None)", "intent": "Return a property attribute . And `doc` creates a docstring for the attribute .", "question_id": 4089}
{"snippet": "code.compile_command(source, filename=\"<input>\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1172}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "window.getstr(n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `n`.", "question_id": 2060}
{"snippet": "dis.disassemble(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2719}
{"snippet": "decimal.compare_total_mag(other)", "intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . With arguments `other`.", "question_id": 2405}
{"snippet": "decimal.quantize(exp, context=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . In this case , the rounding mode is determined by the rounding argument if given , else by the given `context` argument ; if neither argument is given the rounding mode of the current thread \u2019 s context is used . With arguments `exp`.", "question_id": 2463}
{"snippet": "OpenerDirector.open(url, data=None)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11838}
{"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "IMAP4.thread(threading_algorithm, charset)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4748}
{"snippet": "multiprocessing.get_context(method=None)", "intent": "Return a context object which has the same attributes as the multiprocessing module . If `method` is None then the default context is returned .", "question_id": 6225}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}
{"snippet": "tarfile.open(**kwargs, name=None, mode='r')", "intent": "Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . With arguments `**kwargs`.", "question_id": 9895}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642}
{"snippet": "FTP.ntransfercmd(cmd, rest=None)", "intent": "Like transfercmd ( ) , but returns a tuple of the data connection and the expected size of the data . `cmd` and `rest` means the same thing as in transfercmd ( ) .", "question_id": 3946}
{"snippet": "Path.open(mode='r', buffering=-1)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `buffering`.", "question_id": 7298}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "re.split(pattern, string, maxsplit=0, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "question_id": 7946}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5868}
{"snippet": "email.utils.mktime_tz(tuple)", "intent": "Turn a 10-tuple as returned by parsedate_tz ( ) into a UTC timestamp ( seconds since the Epoch ) . If the timezone item in the `tuple` is None , assume local time .", "question_id": 3467}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10101}
{"snippet": "Record.SetString(field, value)", "intent": "Set `field` to `value` through MsiRecordSetString ( ) .", "question_id": 6084}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "ast.dump(node, annotate_fields=True)", "intent": "Return a formatted dump of the tree in `node` . If `annotate_fields` is true ( by default ) , the returned string will show the names and the values for fields .", "question_id": 164}
{"snippet": "mailbox.Maildir(dirname)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout .", "question_id": 5754}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271}
{"snippet": "turtle.ondrag(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`, `add`.", "question_id": 11030}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "codecs.getencoder(encoding)", "intent": "Look up the codec for the given `encoding` and return its encoder function .", "question_id": 1218}
{"snippet": "IMAP4.getannotation(mailbox, entry, attribute)", "intent": "Retrieve the specified ANNOTATIONs for `mailbox` . With arguments `entry`, `attribute`.", "question_id": 4703}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11609}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "base_selector.get_key(fileobj)", "intent": "Return the key associated with a registered file object . With arguments `fileobj`.", "question_id": 8223}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "Call the `function` ( a function or method object , not a string ) with the given arguments . With arguments `*args`, `**kwds`.", "question_id": 7335}
{"snippet": "definition.__qualname__", "intent": "The qualified name of the class, function, method, descriptor, or generator instance.", "question_id": 9503}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923}
{"snippet": "meta_path_finder.find_spec(fullname, path)", "intent": "An abstract method for finding a spec for the specified module . If this is a top-level import , `path` will be None . With arguments `fullname`.", "question_id": 4803}
{"snippet": "gettext.gettext(message)", "intent": "Return the localized translation of `message` , based on the current global domain , language , and locale directory .", "question_id": 4216}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "datetime.now(tz=None)", "intent": "Return the current local date and time . If optional argument `tz` is None or not specified , this is like today ( ) , but , if possible , supplies more precision than can be gotten from going through a time.time ( ) timestamp ( for example , this may be possible on platforms supplying the C gettimeofday ( ) function ) .", "question_id": 2259}
{"snippet": "typing.FrozenSet(frozenset)", "intent": "A generic version of builtins.frozenset . With arguments `frozenset`.", "question_id": 11275}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "os.waitpid(pid, options)", "intent": "The details of this function differ on Unix and Windows . On Unix : Wait for completion of a child process given by process id `pid` , and return a tuple containing its process id and exit status indication ( encoded as for wait ( ) ) . The semantics of the call are affected by the value of the integer `options` , which should be 0 for normal operation .", "question_id": 7082}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355}
{"snippet": "loop.create_connection(protocol_factory, ssl=None)", "intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation . With arguments `ssl`.", "question_id": 205}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "lzma.LZMAFile(mode=\"r\")", "intent": "Open an LZMA-compressed file in binary `mode` .", "question_id": 5668}
{"snippet": "process.join(timeout)", "intent": "If the optional argument `timeout` is None ( the default ) , the method blocks until the process whose join ( ) method is called terminates .", "question_id": 6177}
{"snippet": "len(proxy)", "intent": "Return the number of items in the underlying mapping . With arguments `proxy`.", "question_id": 11210}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4315}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}
{"snippet": "platform.libc_ver(executable=sys.executable, lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7542}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "fraction.__ceil__()", "intent": "Returns the least int > = self .", "question_id": 3874}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "zipapp.create_archive(source, target=None, filter=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The optional `filter` argument specifies a callback function that is passed a Path object representing the path to the file being added ( relative to the source directory ) .", "question_id": 12775}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "incremental_decoder.setstate(state)", "intent": "Set the `state` of the decoder to state .", "question_id": 1278}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "sysconfig.parse_config_h(fp, vars)", "intent": "Parse a config.h-style file . `fp` is a file-like object pointing to the config.h-like file . With arguments `vars`.", "question_id": 9873}
{"snippet": "bdb.get_bpbynumber(arg)", "intent": "Return a breakpoint specified by the given number . If `arg` is a string , it will be converted to a number .", "question_id": 799}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861}
{"snippet": "zlib.compressobj(method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `method` is the compression algorithm .", "question_id": 12909}
{"snippet": "SSLContext.wrap_socket(sock)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) .", "question_id": 9022}
{"snippet": "pdb.Pdb(stdout=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7344}
{"snippet": "turtle.setpos(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10915}
{"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "xmlparser.EndNamespaceDeclHandler(prefix)", "intent": "Called when the closing tag is reached for an element that contained a namespace declaration . With arguments `prefix`.", "question_id": 7768}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "random.randrange(stop)", "intent": "Return a randomly selected element from range ( start , `stop` , step ) .", "question_id": 7890}
{"snippet": "csv.DictReader(f, *args, **kwds, restkey=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`.", "question_id": 1694}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "scheduler.enterabs(time, priority, action, argument=(), kwargs={})", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "question_id": 8121}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "maildir_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5816}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750}
{"snippet": "webbrowser.open(url, new=0, autoraise=True)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12105}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "os.execvpe(file, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7016}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171}
{"snippet": "message.get_param(param, unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2994}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225}
{"snippet": "bytearray(source)", "intent": "There is no dedicated literal syntax for bytearray objects , instead they are always created by calling the constructor : With arguments `source`.", "question_id": 9265}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453}
{"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "doctest.debug(module, name)", "intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above .", "question_id": 2888}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218}
{"snippet": "open(file, newline=None)", "intent": "Open `file` and return a corresponding file object . Refer to the documentation of the `newline` parameter for further details .", "question_id": 4067}
{"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild, context)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . `context` can be used to specify the context used for starting the worker processes . With arguments `initargs`.", "question_id": 6326}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "base_manager.register(typeid, callable, proxytype, exposed, method_to_typeid)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid . `exposed` is used to specify a sequence of method names which proxies for this typeid should be allowed to access using BaseProxy._callmethod ( ) . `method_to_typeid` is a mapping used to specify the return type of those exposed methods which should return a proxy .", "question_id": 6289}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . `session` , see session .", "question_id": 9031}
{"snippet": "print(*objects, sep=' ', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4081}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "test_case.skipTest(reason)", "intent": "Calling this during a test method or setUp ( ) skips the current test . With arguments `reason`.", "question_id": 11371}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "email_message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3265}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12239}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "pprint.pformat(object, depth=None)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7636}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "sysconfig.get_path(name, scheme, vars, expand)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) . get_path ( ) will use the variables returned by get_config_vars ( ) to `expand` the path .", "question_id": 9862}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}
{"snippet": "random.SystemRandom(seed)", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system . Accordingly , the `seed` ( ) method has no effect and is ignored .", "question_id": 7920}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "turtle.onrelease(fun, btn=1)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`.", "question_id": 11024}
{"snippet": "signature.replace(parameters, return_annotation)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4988}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "pty.spawn(argv, master_read)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . The functions `master_read` and `stdin_read` are passed a file descriptor which they should read from , and they should always return a byte string . With arguments `argv`.", "question_id": 7701}
{"snippet": "pkgutil.iter_modules(path=None, prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7448}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "ContentHandler.startElementNS(name, qname, attrs)", "intent": "Signals the start of an element in namespace mode . The `name` parameter contains the name of the element type as a ( uri , localname ) tuple , the `qname` parameter contains the raw XML 1.0 name used in the source document , and the `attrs` parameter holds an instance of the AttributesNS interface ( see The AttributesNS Interface ) containing the attributes of the element .", "question_id": 12577}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11132}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "os.setxattr(path, attribute, value, flags=0)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` . `flags` may be XATTR_REPLACE or XATTR_CREATE .", "question_id": 7002}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11132}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}
{"snippet": "calendar.calendar(year, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `m`.", "question_id": 1015}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "doc_test_runner.run(test, compileflags=None, clear_globs=True)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . `compileflags` gives the set of flags that should be used by the Python compiler when running the examples . If `clear_globs` is true ( the default ) , then this namespace will be cleared after the test runs , to help with garbage collection .", "question_id": 2878}
{"snippet": "window.insnstr(str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`, `attr`.", "question_id": 2077}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "io.StringIO(initial_value='', newline='\\n')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "question_id": 5167}
{"snippet": "help(object)", "intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "question_id": 4030}
{"snippet": "ipaddress.NetmaskValueError(ValueError)", "intent": "Any value error related to the net mask . With arguments `ValueError`.", "question_id": 5238}
{"snippet": "ipaddress.NetmaskValueError(ValueError)", "intent": "Any value error related to the net mask . With arguments `ValueError`.", "question_id": 5238}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}
{"snippet": "asyncio.open_connection(ssl=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `ssl`.", "question_id": 468}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "config_parser.remove_section(section)", "intent": "Remove the specified `section` from the configuration .", "question_id": 1564}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "plistlib.loads(data, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `dict_type`.", "question_id": 7558}
{"snippet": "str.count(sub, start, end)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9182}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "loop.sendfile(transport, file, count=None)", "intent": "Send a `file` over a `transport` . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 258}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "mimetypes.init(files=None)", "intent": "Initialize the internal data structures . If given , `files` must be a sequence of file names which should be used to augment the default type map .", "question_id": 5946}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "winreg.OpenKeyEx(key, sub_key, access=KEY_READ)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12144}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966}
{"snippet": "shutil.chown(path, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8343}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}
{"snippet": "random.choices(population, weights=None, cum_weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7899}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "ast.fix_missing_locations(node)", "intent": "When you compile a `node` tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them .", "question_id": 152}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "logging.Formatter(fmt=None, style='%')", "intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5615}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "question_id": 1703}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "Node.toprettyxml(indent=\"\\t\", newl=\"\\n\")", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n .", "question_id": 12417}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}
{"snippet": "platform.architecture(executable=sys.executable, linkage='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7463}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "os.WIFEXITED(status)", "intent": "Return True if the process exited using the exit ( 2 ) system call , otherwise return False . With arguments `status`.", "question_id": 7092}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025}
{"snippet": "test.support.get_attribute(obj, name)", "intent": "Get an attribute , raising unittest.SkipTest if AttributeError is raised . With arguments `obj`, `name`.", "question_id": 10257}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "KeyboardInterrupt", "intent": "Raised when the user hits the interrupt key (normally Control-C or Delete).", "question_id": 3644}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "stat.S_ISCHR(mode)", "intent": "Return non-zero if the `mode` is from a character special device file .", "question_id": 9062}
{"snippet": "sys_log_handler.encodePriority(facility, priority)", "intent": "Encodes the `facility` and `priority` into an integer .", "question_id": 5504}
{"snippet": "print(*objects, sep=' ', flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4082}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "POP3.pass_(password)", "intent": "Send `password` , response includes message count and mailbox size .", "question_id": 7605}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "TarFile.extract(member, set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9942}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}
{"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080}
{"snippet": "asyncio.shield(aw, loop=None)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task . With arguments `loop`.", "question_id": 604}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "__import__(name, locals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4144}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "window.getstr(n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `n`.", "question_id": 2060}
{"snippet": "HTTPConnection.set_tunnel(host, headers=None)", "intent": "Set the `host` and the `port` for HTTP Connect Tunnelling . The `headers` argument should be a mapping of extra HTTP headers to send with the CONNECT request .", "question_id": 4439}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "profile.runctx(command, globals, locals, filename=None, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `filename`, `sort`.", "question_id": 7668}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "calendar.prmonth(theyear, themonth, w=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`.", "question_id": 994}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "tkinter.tix.Tk(className='Tix')", "intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `className`.", "question_id": 10547}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "Record.GetString(field)", "intent": "Return the value of `field` as a string where possible .", "question_id": 6083}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "queue_listener.__init__(level=NOTSET)", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5595}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "zlib.compressobj(method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `method` is the compression algorithm .", "question_id": 12909}
{"snippet": "counter.update(iterable-or-mapping)", "intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1348}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "codecs.CodecInfo(encode, decode, incrementalencoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementalencoder`.", "question_id": 1204}
{"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "joinable_queue.poll(timeout)", "intent": "Return whether there is any data available to be read . If `timeout` is not specified then it will return immediately .", "question_id": 6234}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "re.split(pattern, string, maxsplit=0, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "question_id": 7946}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "memory_bio.read(n=-1)", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9057}
{"snippet": "io.open(file, opener=None)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `opener`.", "question_id": 5058}
{"snippet": "doctest.debug_src(src, pm=False)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument . Optional argument `pm` has the same meaning as in function debug ( ) above .", "question_id": 2891}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "control.condition(action, condition)", "intent": "Make an entry into the ControlCondition table for this control . With arguments `action`, `condition`.", "question_id": 6131}
{"snippet": "calendar.itermonthdays(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 913}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "readline.set_completion_display_matches_hook(function)", "intent": "Set or remove the completion display `function` .", "question_id": 8048}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "sqlite3.sqlite_version_info", "intent": "The version number of the run-time SQLite library, as a tuple of integers.", "question_id": 8794}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "inspect.Signature(parameters=None)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection .", "question_id": 4980}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "plistlib.loads(data, fmt=None, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `dict_type`.", "question_id": 7560}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "locale.format_string(format, val, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5386}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "plistlib.loads(data, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `dict_type`.", "question_id": 7558}
{"snippet": "patch.multiple(target, **kwargs, create=False)", "intent": "Perform multiple patches in a single call . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11634}
{"snippet": "gzip.GzipFile(filename=None, compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4289}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371}
{"snippet": "importlib.util.spec_from_loader(name, loader, origin=None, is_package=None)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`, `origin`, `is_package`.", "question_id": 4937}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "difflib.unified_diff(a, b, fromfile='', tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2654}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "doc_test_finder.find(obj, name, module)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object .", "question_id": 2852}
{"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "turtle.onrelease(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`, `add`.", "question_id": 11026}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "smtplib.SMTP(port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8460}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752}
{"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "pdb.Pdb(stdout=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7344}
{"snippet": "iter(proxy)", "intent": "Return an iterator over the keys of the underlying mapping . With arguments `proxy`.", "question_id": 11209}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "uuid.uuid5(namespace, name)", "intent": "Generate a UUID based on the SHA-1 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11963}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "structure._pack_", "intent": "An optional small integer that allows overriding the alignment of structure fields in the instance.", "question_id": 1891}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "FTP.retrbinary(cmd, callback, blocksize=8192)", "intent": "Retrieve a file in binary transfer mode . `cmd` should be an appropriate RETR command : 'RETR filename ' . The `callback` function is called for each block of data received , with a single bytes argument giving the data block . The optional `blocksize` argument specifies the maximum chunk size to read on the low-level socket object created to do the actual transfer ( which will also be the largest size of the data blocks passed to callback ) .", "question_id": 3927}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869}
{"snippet": "null_handler.emit(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5437}
{"snippet": "Record.GetString(field)", "intent": "Return the value of `field` as a string where possible .", "question_id": 6083}
{"snippet": "crypt.crypt(word, salt=None)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "question_id": 1675}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_side=False, server_hostname=None, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9040}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296}
{"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}
{"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509}
{"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}
{"snippet": "str(object=b'', errors='strict')", "intent": "Return a str version of `object` . With arguments `errors`.", "question_id": 4120}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "loop.getaddrinfo(host, port, family=0, flags=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `flags`.", "question_id": 296}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "os.set_handle_inheritable(handle, inheritable)", "intent": "Set the \u201c `inheritable` \u201d flag of the specified `handle` .", "question_id": 6819}
{"snippet": "mock.assert_called_once_with(*args, **kwargs)", "intent": "Assert that the mock was called exactly once and that that call was with the specified arguments . With arguments `*args`, `**kwargs`.", "question_id": 11573}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "py_compile.compile(file, optimize=-1)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . `optimize` controls the optimization level and is passed to the built-in compile ( ) function .", "question_id": 7825}
{"snippet": "instance.__class__", "intent": "The class to which a class instance belongs.", "question_id": 9500}
{"snippet": "dis.disco(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2723}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "Record.GetInteger(field)", "intent": "Return the value of `field` as an integer where possible .", "question_id": 6082}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "traceback.format_exception(etype, value, tb, limit=None)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`, `limit`.", "question_id": 10778}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object .", "question_id": 5992}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1', short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12664}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "email.utils.mktime_tz(tuple)", "intent": "Turn a 10-tuple as returned by parsedate_tz ( ) into a UTC timestamp ( seconds since the Epoch ) . If the timezone item in the `tuple` is None , assume local time .", "question_id": 3467}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "mmap.mmap(fileno, length, offset, access=ACCESS_DEFAULT)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `offset` may be specified as a non-negative integer offset . `access` may be specified in lieu of flags and prot as an optional keyword parameter .", "question_id": 5987}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "ast.iter_fields(node)", "intent": "Yield a tuple of ( fieldname , value ) for each field in node._fields that is present on `node` .", "question_id": 156}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "tempfile.TemporaryFile(dir=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `dir` , `prefix` and `suffix` parameters have the same meaning and defaults as with mkstemp ( ) .", "question_id": 10040}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g .", "question_id": 4913}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "mock.assert_called_once_with(*args, **kwargs)", "intent": "Assert that the mock was called exactly once and that that call was with the specified arguments . With arguments `*args`, `**kwargs`.", "question_id": 11573}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}
{"snippet": "tempfile.TemporaryFile(mode='w+b', encoding=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10042}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`.", "question_id": 2020}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "str(encoding='utf-8', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9176}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "window.insstr(str, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`, `attr`.", "question_id": 2081}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "help(object)", "intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "question_id": 4030}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "doctest.DocTestFinder(verbose=False)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder .", "question_id": 2841}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "tempfile.TemporaryFile(mode='w+b', buffering=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10041}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "collections.Counter(iterable-or-mapping)", "intent": "A Counter is a dict subclass for counting hashable objects . With arguments `iterable-or-mapping`.", "question_id": 1340}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "locale.currency(val, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5395}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "lzma.LZMADecompressor(filters=None)", "intent": "Create a decompressor object , which can be used to decompress data incrementally . The `filters` argument specifies the filter chain that was used to create the stream being decompressed .", "question_id": 5693}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "bytes(source, encoding, errors)", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) . With arguments `errors`.", "question_id": 9257}
{"snippet": "math.log(x, base)", "intent": "With one argument , return the natural logarithm of `x` ( to `base` e ) .", "question_id": 5907}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "patch.dict(in_dict, **kwargs, clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11630}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "select.kevent(ident, filter=KQ_FILTER_READ, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `filter`, `data`.", "question_id": 8164}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "msilib.FCICreate(cabname, files)", "intent": "Create a new CAB file named `cabname` . `files` must be a list of tuples , each containing the name of the file on disk , and the name of the file inside the CAB file .", "question_id": 6058}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "dispatcher.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 671}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "bz2.BZ2File(filename, mode='r', compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 891}
{"snippet": "curses.panel.new_panel(win)", "intent": "Returns a panel object , associating it with the given window `win` .", "question_id": 2142}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "glob.iglob(pathname, recursive=False)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`, `recursive`.", "question_id": 4267}
{"snippet": "socket.sendmsg_afalg(msg, op, iv)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`.", "question_id": 8729}
{"snippet": "test_case.assertNotRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11444}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "message.__contains__(name)", "intent": "Return true if the message object has a field named `name` .", "question_id": 2965}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "tempfile.NamedTemporaryFile(newline=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `newline`.", "question_id": 10047}
{"snippet": "xml.dom.minidom.parse(filename_or_file, parser=None)", "intent": "Return a Document from the given input . `filename_or_file` may be either a file name , or a file-like object . `parser` , if given , must be a SAX2 parser object .", "question_id": 12397}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "dis.dis(x=None)", "intent": "Disassemble the `x` object .", "question_id": 2708}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "binascii.a2b_qp(data, header=False)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data . If the optional argument `header` is present and true , underscores will be decoded as spaces .", "question_id": 827}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11422}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5875}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "os.pread(fd, n, offset)", "intent": "Read at most `n` bytes from file descriptor `fd` at a position of `offset` , leaving the file offset unchanged .", "question_id": 6783}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "json.dump(obj, fp, **kw, separators=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If specified , `separators` should be an ( item_separator , key_separator ) tuple . With arguments `**kw`.", "question_id": 5277}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5709}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "locale.setlocale(category, locale=None)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5351}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "Record.GetInteger(field)", "intent": "Return the value of `field` as an integer where possible .", "question_id": 6082}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdout`, `stderr`.", "question_id": 327}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "window.border(ls, rs, ts)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`.", "question_id": 2024}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "urllib.parse.parse_qs(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11669}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "code.compile_command(source)", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1171}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584}
{"snippet": "importlib.util.find_spec(name, package=None)", "intent": "Find the spec for a module , optionally relative to the specified `package` `name` .", "question_id": 4929}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "subprocess.call(args, timeout=None)", "intent": "Run the command described by `args` . The full function signature is the same as that of the Popen constructor - this function passes all supplied arguments other than `timeout` directly through to that interface .", "question_id": 9665}
{"snippet": "Decompress.decompress(data, max_length=0)", "intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string . If the optional parameter `max_length` is non-zero then the return value will be no longer than max_length .", "question_id": 12935}
{"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218}
{"snippet": "ossaudiodev.open(device, mode)", "intent": "Open an audio `device` and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7175}
{"snippet": "trace.Trace(infile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `infile` is the name of the file from which to read stored count information .", "question_id": 10713}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "mailcap.findmatch(caps, key='view', filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5876}
{"snippet": "urllib.parse.SplitResult(scheme, netloc, path, query, fragment)", "intent": "Concrete class for urlsplit ( ) results containing str data . With arguments `scheme`, `netloc`, `path`, `query`, `fragment`.", "question_id": 11701}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "binary.encode(out)", "intent": "Write the XML-RPC base 64 encoding of this binary item to the `out` stream object .", "question_id": 12688}
{"snippet": "mmap.mmap(fileno, length, offset)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `offset` may be specified as a non-negative integer offset .", "question_id": 5984}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "widget.detach(*items)", "intent": "Unlinks all of the specified items from the tree . With arguments `*items`.", "question_id": 10628}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869}
{"snippet": "platform.win32_ver(release='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7496}
{"snippet": "TarFile.extract(member, set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9942}
{"snippet": "random.randrange(start, stop, step)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7891}
{"snippet": "hashlib.new(name, data)", "intent": "Is a generic constructor that takes the string `name` of the desired algorithm as its first parameter . With arguments `data`.", "question_id": 4297}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "pdb.Pdb(stdout=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7344}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "formatter.push_style(*styles)", "intent": "Push any number of arbitrary style specifications . With arguments `*styles`.", "question_id": 3832}
{"snippet": "IMAP4.abort", "intent": "IMAP4 server errors cause this exception to be raised.", "question_id": 4674}
{"snippet": "shlex.split(s, posix=True)", "intent": "Split the string `s` using shell-like syntax . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8270}
{"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "json.dumps(obj, **kw, default=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `default`.", "question_id": 5288}
{"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}
{"snippet": "Path.rename(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7308}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "tokenize.tokenize(readline)", "intent": "The tokenize ( ) generator requires one argument , `readline` , which must be a callable object which provides the same interface as the io.IOBase.readline ( ) method of file objects .", "question_id": 10701}
{"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618}
{"snippet": "urllib.request.Request(url, data=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed .", "question_id": 11769}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "io.TextIOWrapper(buffer)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` .", "question_id": 5146}
{"snippet": "hmac.new(key)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key .", "question_id": 4329}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}
{"snippet": "window.hline(y, x, ch, n)", "intent": "Display a horizontal line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "question_id": 2065}
{"snippet": "asyncio.wait(aws)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` .", "question_id": 607}
{"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1706}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "decimal.compare_signal(other)", "intent": "This operation is identical to the compare ( ) method , except that all NaNs signal . With arguments `other`.", "question_id": 2401}
{"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748}
{"snippet": "calendar.itermonthdays3(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 915}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "unicodedata.numeric(chr)", "intent": "Returns the numeric value assigned to the character `chr` as float .", "question_id": 11348}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "re.subn(pattern, repl, string, flags=0)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `flags`.", "question_id": 7957}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "len(proxy)", "intent": "Return the number of items in the underlying mapping . With arguments `proxy`.", "question_id": 11210}
{"snippet": "dict(iterable, **kwarg)", "intent": "Create a new dictionary . With arguments `iterable`, `**kwarg`.", "question_id": 4006}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "importlib.util.spec_from_file_location(name, location, submodule_search_locations=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`, `submodule_search_locations`.", "question_id": 4940}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "TarFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9934}
{"snippet": "slice(start, stop, step)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4106}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "cgitb.html(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1072}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}
{"snippet": "ArgumentParser.parse_args(args=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 70}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "buffered_io_base.read(size=-1)", "intent": "Read and return up to `size` bytes .", "question_id": 5093}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "traceback.print_last(chain=True)", "intent": "This is a shorthand for print_exception ( sys.last_type , sys.last_value , sys.last_traceback , `limit` , `file` , `chain` ) .", "question_id": 10756}
{"snippet": "subprocess.Popen(args, stdin=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9602}
{"snippet": "doc_test_runner.report_success(out, test, example, got)", "intent": "Report that the given `example` ran successfully . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `got` is the actual output from the example .", "question_id": 2870}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, enable_SMTPUTF8=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `enable_SMTPUTF8` determines whether the SMTPUTF8 extension ( as defined in RFC 6531 ) should be enabled .", "question_id": 8430}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11502}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "lzma.LZMACompressor(check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5680}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "xml.sax.SAXParseException(msg, exception, locator)", "intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "question_id": 12599}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "importlib.util.spec_from_file_location(name, location, loader=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . Missing information will be filled in on the spec by making use of `loader` APIs and by the implication that the module will be file-based . With arguments `name`, `location`.", "question_id": 4939}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "_thread.start_new_thread(function, args, kwargs)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "question_id": 12943}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "codecs.iterencode(iterator, encoding, **kwargs)", "intent": "Uses an incremental encoder to iteratively encode the input provided by `iterator` . With arguments `encoding`, `**kwargs`.", "question_id": 1239}
{"snippet": "BaseHandler.unknown_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs with no specific registered handler to open it . With arguments `req`.", "question_id": 11845}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "async_exit_stack.enter_async_context(cm)", "intent": "Similar to enter_context ( ) but expects an asynchronous context manager . With arguments `cm`.", "question_id": 1633}
{"snippet": "codecs.CodecInfo(encode, decode, incrementalencoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementalencoder`.", "question_id": 1204}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "asyncio.open_unix_connection(limit=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `limit`.", "question_id": 486}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "IMAP4.create(mailbox)", "intent": "Create new `mailbox` named mailbox .", "question_id": 4696}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter . If `uri` is true , database is interpreted as a URI .", "question_id": 8797}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "py_compile.compile(file, doraise=False)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . If `doraise` is true , a PyCompileError is raised when an error is encountered while compiling file .", "question_id": 7824}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "connection.cursor(factory=Cursor)", "intent": "The cursor method accepts a single optional parameter `factory` .", "question_id": 8807}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378}
{"snippet": "fileinput.input(files=None, inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "question_id": 3789}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "msilib.Feature(db, id, title, desc, display, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6118}
{"snippet": "print(*objects, sep=' ', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4081}
{"snippet": "asyncore.loop(timeout, use_poll, map)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 648}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}
{"snippet": "process.send_signal(signal)", "intent": "Sends the `signal` signal to the child process .", "question_id": 550}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, namespace=None)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2185}
{"snippet": "Telnet.set_option_negotiation_callback(callback)", "intent": "Each time a telnet option is read on the input flow , this `callback` ( if set ) is called with the following parameters : callback ( telnet socket , command ( DO/DONT/WILL/WONT ) , option ) .", "question_id": 10032}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "socket.recvmsg(bufsize)", "intent": "Receive normal data ( up to `bufsize` bytes ) and ancillary data from the socket .", "question_id": 8707}
{"snippet": "warnings.warn(message, category=None)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning .", "question_id": 12000}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "tempfile.TemporaryFile(mode='w+b', buffering=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10041}
{"snippet": "code.interact(readfunc=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . This creates a new instance of InteractiveConsole and sets `readfunc` to be used as the InteractiveConsole.raw_input ( ) method , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1169}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "str.strip(chars)", "intent": "Return a copy of the string with the leading and trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9250}
{"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "pool.imap(func, iterable, chunksize)", "intent": "A lazier version of map ( ) . The `chunksize` argument is the same as the one used by the map ( ) method . With arguments `func`, `iterable`.", "question_id": 6346}
{"snippet": "gettext.find(domain, localedir=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4226}
{"snippet": "socket.sendmsg_afalg(msg, op, iv, assoclen, flags)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . Set mode , IV , AEAD associated data length and `flags` for AF_ALG socket . With arguments `msg`, `op`, `iv`, `assoclen`.", "question_id": 8727}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}
{"snippet": "turtle.shapesize(outline=None)", "intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "question_id": 10989}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds)", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "question_id": 1702}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "io.open(file, encoding=None)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `encoding`.", "question_id": 5054}
{"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, secure=None)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . To specify the use of a `secure` protocol ( TLS ) , pass in a tuple to the secure argument . With arguments `fromaddr`.", "question_id": 5517}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "socket.sendmsg_afalg(msg, op, iv, assoclen)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`, `assoclen`.", "question_id": 8728}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "nntplib.NNTP_SSL(host, port=563, user=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `user`.", "question_id": 6436}
{"snippet": "DatagramTransport.sendto(data, addr=None)", "intent": "Send the `data` bytes to the remote peer given by `addr` ( a transport-dependent target address ) .", "question_id": 417}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "subprocess.check_call(args, stdin=None, stdout=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`, `stdin`.", "question_id": 9676}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860}
{"snippet": "XMLReader.setContentHandler(handler)", "intent": "Set the current ContentHandler . With arguments `handler`.", "question_id": 12615}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}
{"snippet": "IMAP4.login_cram_md5(user, password)", "intent": "Force use of CRAM-MD5 authentication when identifying the client to protect the `password` . With arguments `user`.", "question_id": 4710}
{"snippet": "pstats.Stats(*filenames or profile, stream=sys.stdout)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . Output will be printed to the `stream` specified by stream . With arguments `*filenames or profile`.", "question_id": 7689}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "bz2.decompress(data)", "intent": "Decompress `data` , a bytes-like object .", "question_id": 908}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "window.getstr(n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `n`.", "question_id": 2060}
{"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "socket.sendmsg_afalg(msg, op, iv, assoclen, flags)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . Set mode , IV , AEAD associated data length and `flags` for AF_ALG socket . With arguments `msg`, `op`, `iv`, `assoclen`.", "question_id": 8727}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "@functools.lru_cache(typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4148}
{"snippet": "asyncio.wait(aws)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` .", "question_id": 607}
{"snippet": "message.set_payload(payload)", "intent": "Set the entire message object \u2019 s `payload` to payload .", "question_id": 2960}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "OSError()", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) .", "question_id": 3649}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "pkgutil.ImpImporter(dirname=None)", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm . If `dirname` is a string , a PEP 302 finder is created that searches that directory .", "question_id": 7438}
{"snippet": "parser.isexpr(st)", "intent": "When `st` represents an 'eval ' form , this function returns true , otherwise it returns false .", "question_id": 7224}
{"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151}
{"snippet": "TarFile.add(name, arcname=None, filter=None)", "intent": "Add the file `name` to the archive . If given , `arcname` specifies an alternative name for the file in the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9954}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}
{"snippet": "message.get_param(param, header='content-type')", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2993}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "base_selector.register(fileobj, events)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor .", "question_id": 8215}
{"snippet": "connection.cursor(factory=Cursor)", "intent": "The cursor method accepts a single optional parameter `factory` .", "question_id": 8807}
{"snippet": "inspect.formatargspec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "intent": "Format a pretty argument spec from the values returned by getfullargspec ( ) . The first seven arguments are ( `args` , `varargs` , `varkw` , `defaults` , `kwonlyargs` , `kwonlydefaults` , `annotations` ) . With arguments `formatarg`, `formatvarargs`, `formatvarkw`, `formatvalue`, `formatreturns`.", "question_id": 5014}
{"snippet": "CookiePolicy.set_ok(cookie, request)", "intent": "Return boolean value indicating whether `cookie` should be accepted from server . `request` is an object implementing the interface defined by the documentation for CookieJar.extract_cookies ( ) .", "question_id": 4532}
{"snippet": "OpenerDirector.add_handler(handler)", "intent": "`handler` should be an instance of BaseHandler .", "question_id": 11834}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "turtle.onrelease(fun, btn=1)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`.", "question_id": 11024}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "glob.iglob(pathname, recursive=False)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`, `recursive`.", "question_id": 4267}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "xml.etree.ElementTree.iterparse(source, parser=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .", "question_id": 12444}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1560}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "webbrowser.open(url, new=0, autoraise=True)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12105}
{"snippet": "traceback.print_stack(f=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10762}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "ast.fix_missing_locations(node)", "intent": "When you compile a `node` tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them .", "question_id": 152}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='', osinfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7494}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, domain: int=None)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `domain: int`.", "question_id": 10859}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "os.WIFEXITED(status)", "intent": "Return True if the process exited using the exit ( 2 ) system call , otherwise return False . With arguments `status`.", "question_id": 7092}
{"snippet": "loop.sock_sendfile(sock, file, offset=0)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket . `offset` tells from where to start reading the file .", "question_id": 282}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "json.dumps(obj, **kw, indent=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `indent`.", "question_id": 5286}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}
{"snippet": "venv.create(env_dir, symlinks=False)", "intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument . With arguments `symlinks`.", "question_id": 11992}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "shutil.register_archive_format(name, function, extra_args)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives . If given , `extra_args` is a sequence of ( name , value ) pairs that will be used as extra keywords arguments when the archiver callable is used .", "question_id": 8360}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "os.execlp(file, arg0, arg1)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . With arguments `arg0`, `arg1`.", "question_id": 7011}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "os.setreuid(ruid, euid)", "intent": "Set the current process \u2019 s real and effective user ids . With arguments `ruid`, `euid`.", "question_id": 6703}
{"snippet": "control.condition(action, condition)", "intent": "Make an entry into the ControlCondition table for this control . With arguments `action`, `condition`.", "question_id": 6131}
{"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra)", "intent": "Element class . `tag` is the element name . With arguments `**extra`.", "question_id": 12477}
{"snippet": "uuid.uuid1(node=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `node` is not given , getnode ( ) is used to obtain the hardware address .", "question_id": 11958}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`, `errors`.", "question_id": 11730}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930}
{"snippet": "readline.set_completion_display_matches_hook(function)", "intent": "Set or remove the completion display `function` .", "question_id": 8048}
{"snippet": "os.initgroups(username, gid)", "intent": "Call the system initgroups ( ) to initialize the group access list with all of the groups of which the specified `username` is a member , plus the specified group id . With arguments `gid`.", "question_id": 6691}
{"snippet": "doctest.DebugRunner(optionflags=0)", "intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `optionflags`.", "question_id": 2897}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12225}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}
{"snippet": "http.client.HTTPResponse(sock, method=None, url=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `method`, `url`.", "question_id": 4408}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "ctypes._Pointer", "intent": "Private, abstract base class for pointers.", "question_id": 1896}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "HTTPConnection.putheader(header)", "intent": "Send an RFC 822-style `header` to the server .", "question_id": 4449}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, dict_type=collections.OrderedDict)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `dict_type`.", "question_id": 1571}
{"snippet": "config_parser.options(section)", "intent": "Return a list of options available in the specified `section` .", "question_id": 1510}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "tkinter.Tcl(className='Tk')", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `className`.", "question_id": 10530}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stderr=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`, `stdin`.", "question_id": 540}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "wsgiref.validate.validator(application)", "intent": "Wrap `application` and return a new WSGI application object .", "question_id": 12235}
{"snippet": "traceback.print_stack(f=None, file=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "question_id": 10766}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780}
{"snippet": "base64.standard_b64encode(s)", "intent": "Encode bytes-like object `s` using the standard Base64 alphabet and return the encoded bytes .", "question_id": 714}
{"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}
{"snippet": "csv.writer(csvfile, **fmtparams)", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . With arguments `**fmtparams`.", "question_id": 1682}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "lock.acquire(blocking=True)", "intent": "Acquire a lock , `blocking` or non-blocking .", "question_id": 10376}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "window.addnstr(y, x, str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2007}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "tzinfo.dst(dt)", "intent": "Return the daylight saving time ( DST ) adjustment , as a timedelta object or None if DST information isn \u2019 t known . tz.utcoffset ( `dt` ) - tz.dst ( dt )", "question_id": 2354}
{"snippet": "gettext.bindtextdomain(domain)", "intent": "Bind the `domain` to the locale directory `localedir` .", "question_id": 4210}
{"snippet": "ctypes.Structure(*args, **kw)", "intent": "Abstract base class for structures in native byte order . With arguments `*args`, `**kw`.", "question_id": 1889}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "locale.getlocale(category=LC_CTYPE)", "intent": "Returns the current setting for the given locale `category` as sequence containing language code , encoding .", "question_id": 5376}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "deque.extendleft(iterable)", "intent": "Extend the left side of the deque by appending elements from `iterable` .", "question_id": 1359}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863}
{"snippet": "stream_handler.emit(record)", "intent": "If a formatter is specified , it is used to format the `record` .", "question_id": 5423}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "gzip.open(filename, mode='rb', compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4278}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "source_file_loader.set_data(path, data)", "intent": "Concrete implementation of importlib.abc.SourceLoader.set_data ( ) . With arguments `path`, `data`.", "question_id": 4894}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995}
{"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132}
{"snippet": "gettext.find(domain, localedir=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4226}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "inspect.formatargspec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "intent": "Format a pretty argument spec from the values returned by getfullargspec ( ) . The first seven arguments are ( `args` , `varargs` , `varkw` , `defaults` , `kwonlyargs` , `kwonlydefaults` , `annotations` ) . With arguments `formatarg`, `formatvarargs`, `formatvarkw`, `formatvalue`.", "question_id": 5015}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "io.FileIO(name, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener .", "question_id": 5102}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "fileinput.input(files=None, backup='')", "intent": "Create an instance of the FileInput class . With arguments `files`, `backup`.", "question_id": 3790}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "plistlib.dumps(value, sort_keys=True)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`.", "question_id": 7573}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "buffered_io_base.read1(size)", "intent": "Read and return up to `size` bytes , with at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "question_id": 5094}
{"snippet": "turtle.back(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10905}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, headers=None)", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`.", "question_id": 3046}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513}
{"snippet": "style.configure(style, **kw)", "intent": "Query or set the default value of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10673}
{"snippet": "calendar.prcal(year, l=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `m`.", "question_id": 1010}
{"snippet": "urllib.parse.urlencode(query, encoding=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11735}
{"snippet": "zipfile.PyZipFile(file, compression=ZIP_STORED)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `compression`.", "question_id": 12848}
{"snippet": "cgi.parse_qsl(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1043}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "mock.assert_called_once_with(*args, **kwargs)", "intent": "Assert that the mock was called exactly once and that that call was with the specified arguments . With arguments `*args`, `**kwargs`.", "question_id": 11573}
{"snippet": "loader.exec_module(module)", "intent": "An abstract method that executes the `module` in its own namespace when a module is imported or reloaded .", "question_id": 4815}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "loop.sendfile(transport, file, count=None)", "intent": "Send a `file` over a `transport` . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 258}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11132}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "text_io_base.read(size=-1)", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5139}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "mailbox.Babyl(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in Babyl format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5796}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "zlib.adler32(data, value)", "intent": "Computes an Adler-32 checksum of `data` . If `value` is present , it is used as the starting value of the checksum ; otherwise , a default value of 1 is used .", "question_id": 12893}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "bdb.run(cmd)", "intent": "Debug a statement executed via the exec ( ) function . With arguments `cmd`.", "question_id": 807}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used .", "question_id": 5530}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_side=False, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9038}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "xmlrpc.client.ServerProxy(uri, encoding=None)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . The optional third argument is an `encoding` , by default UTF-8 . With arguments `uri`.", "question_id": 12671}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "cgi.parse_qs(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1039}
{"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "widget.detach(*items)", "intent": "Unlinks all of the specified items from the tree . With arguments `*items`.", "question_id": 10628}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "pdb.Pdb(completekey='tab', skip=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7350}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "IMAP4.lsub(directory='\"\"')", "intent": "List subscribed mailbox names in `directory` matching `pattern` .", "question_id": 4713}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_hostname=None, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9039}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "pickle.Unpickler(file, fix_imports=True, encoding=\"ASCII\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7402}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "mimetypes.init(files=None)", "intent": "Initialize the internal data structures . If given , `files` must be a sequence of file names which should be used to augment the default type map .", "question_id": 5946}
{"snippet": "xml.etree.ElementTree.XML(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12470}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "Path.rename(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7308}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "subprocess.call(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9664}
{"snippet": "logging.handlers.SocketHandler(host, port)", "intent": "Returns a new instance of the SocketHandler class intended to communicate with a remote machine whose address is given by `host` and `port` .", "question_id": 5482}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "curses.setupterm(term=None, fd=-1)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "question_id": 1982}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "pickle.Unpickler(file, fix_imports=True, encoding=\"ASCII\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7402}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11118}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862}
{"snippet": "pdb.runeval(expression)", "intent": "See the documentation for the functions explained above . With arguments `expression`.", "question_id": 7355}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdout=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdout`.", "question_id": 323}
{"snippet": "dbm.whichdb(filename)", "intent": "This function attempts to guess which of the several simple database modules available \u2014 dbm.gnu , dbm.ndbm or dbm.dumb \u2014 should be used to open a given file . With arguments `filename`.", "question_id": 2365}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "codecs.replace_errors(exception)", "intent": "Implements the 'replace ' error handling ( for text encodings only ) : substitutes ' ? ' With arguments `exception`.", "question_id": 1256}
{"snippet": "types.DynamicClassAttribute(doc=None)", "intent": "Route attribute access on a class to __getattr__ . With arguments `doc`.", "question_id": 11222}
{"snippet": "warnings.filterwarnings(action, message='', module='')", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`.", "question_id": 12030}
{"snippet": "ArgumentParser.get_default(dest)", "intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "question_id": 102}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "types.DynamicClassAttribute(doc=None)", "intent": "Route attribute access on a class to __getattr__ . With arguments `doc`.", "question_id": 11222}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "curses.meta(flag)", "intent": "If `flag` is True , allow 8-bit characters to be input .", "question_id": 1953}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "http.server.SimpleHTTPRequestHandler(request, client_address, server)", "intent": "This class serves files from the current `directory` and below , directly mapping the directory structure to HTTP requests . A lot of the work , such as parsing the `request` , is done by the base class BaseHTTPRequestHandler . With arguments `client_address`, `server`.", "question_id": 4659}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "datetime.time(hour=0, microsecond=0)", "intent": "All arguments are optional . With arguments `hour`, `microsecond`.", "question_id": 2323}
{"snippet": "xmlparser.ExternalEntityParserCreate(context)", "intent": "Create a \u201c child \u201d parser which can be used to parse an external parsed entity referred to by content parsed by the parent parser . The `context` parameter should be the string passed to the ExternalEntityRefHandler ( ) handler function , described below .", "question_id": 7739}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "crypt.mksalt(method=None)", "intent": "Return a randomly generated salt of the specified `method` .", "question_id": 1677}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "bz2.open(filename, mode='r', encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 883}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "prototype(address)", "intent": "Returns a foreign function at the specified `address` which must be an integer .", "question_id": 1801}
{"snippet": "webbrowser.register(name, constructor)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12110}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "dis.disco(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2723}
{"snippet": "collections.namedtuple(typename, field_names, defaults=None, module=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . `defaults` can be None or an iterable of default values . If `module` is defined , the __module__ attribute of the named tuple is set to that value .", "question_id": 1382}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "calendar.LocaleTextCalendar(firstweekday=0, locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale . With arguments `firstweekday`.", "question_id": 980}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "counter.subtract(iterable-or-mapping)", "intent": "Elements are subtracted from an iterable or from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1345}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11118}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "bdb.stop_here(frame)", "intent": "This method checks if the `frame` is somewhere below botframe in the call stack .", "question_id": 777}
{"snippet": "test_case.assertNotEqual(first, second)", "intent": "Test that `first` and `second` are not equal .", "question_id": 11377}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "tarfile.open(**kwargs, name=None, mode='r')", "intent": "Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . With arguments `**kwargs`.", "question_id": 9895}
{"snippet": "Morsel.output(attrs=None, header='Set-Cookie:')", "intent": "Return a string representation of the Morsel , suitable to be sent as an HTTP `header` . By default , all the attributes are included , unless `attrs` is given , in which case it should be a list of attributes to use .", "question_id": 4604}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "gettext.bind_textdomain_codeset(domain, codeset=None)", "intent": "Bind the `domain` to `codeset` , changing the encoding of byte strings returned by the lgettext ( ) , ldgettext ( ) , lngettext ( ) and ldngettext ( ) functions .", "question_id": 4213}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "tempfile.NamedTemporaryFile(mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `mode`.", "question_id": 10044}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "Widget.tk.createfilehandler(file, mask, func)", "intent": "Registers the `file` handler callback function `func` . The `mask` argument is an ORed combination of any of the three constants below .", "question_id": 10537}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087}
{"snippet": "r_lock.acquire(timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10383}
{"snippet": "pstats.Stats(*filenames or profile, stream=sys.stdout)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . Output will be printed to the `stream` specified by stream . With arguments `*filenames or profile`.", "question_id": 7689}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "control.event(event, argument, condition=1)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`.", "question_id": 6127}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False, exit=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . If `exit` is True , call _exit ( ) with status=1 after dumping the tracebacks .", "question_id": 3727}
{"snippet": "scheduler.enter(delay, priority, action, argument=(), kwargs={})", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`, `kwargs`.", "question_id": 8125}
{"snippet": "os.pathconf(path, name)", "intent": "Return system configuration information relevant to a named file . `name` specifies the configuration value to retrieve ; it may be a string which is the name of a defined system value ; these names are specified in a number of standards ( POSIX.1 , Unix 95 , Unix 98 , and others ) . With arguments `path`.", "question_id": 6885}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10974}
{"snippet": "urllib.parse.urlencode(query, doseq=False, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11738}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "pdb.runeval(expression)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control .", "question_id": 7331}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "queue_listener.setLevel(level)", "intent": "Sets the threshold for this logger to `level` .", "question_id": 5566}
{"snippet": "tempfile.SpooledTemporaryFile(mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10055}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : With arguments `prog`, `parser_class`, `option_string`, `required`.", "question_id": 76}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "parser.compilest(st, filename='<syntax-tree>')", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7223}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "os.fdopen(fd, *args, **kwargs)", "intent": "Return an open file object connected to the file descriptor `fd` . With arguments `*args`, `**kwargs`.", "question_id": 6712}
{"snippet": "xmlrpc.client.dumps(params, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12702}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 51}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`.", "question_id": 61}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "importlib.util.LazyLoader(loader)", "intent": "A class which postpones the execution of the `loader` of a module until the module has an attribute accessed .", "question_id": 4943}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5866}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "pprint.pformat(object, indent=1, depth=None)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7639}
{"snippet": "tempfile.TemporaryFile(mode='w+b', encoding=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10042}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_hostname=None, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9039}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "datetime.fromtimestamp(timestamp)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2261}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}
{"snippet": "mh.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return an MH instance representing it .", "question_id": 5781}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "subprocess.call(args, timeout=None)", "intent": "Run the command described by `args` . The full function signature is the same as that of the Popen constructor - this function passes all supplied arguments other than `timeout` directly through to that interface .", "question_id": 9665}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "operator.itemgetter(*items)", "intent": "Return a callable object that fetches item from its operand using the operand \u2019 s __getitem__ ( ) method . With arguments `*items`.", "question_id": 6585}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "logging.setLogRecordFactory(factory)", "intent": "Set a callable which is used to create a LogRecord . The `factory` has the following signature :", "question_id": 5652}
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_hostname=None, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9039}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . With arguments `param`.", "question_id": 2999}
{"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "ast.parse(source, filename='<unknown>')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 146}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}
{"snippet": "IMAP4.login_cram_md5(user, password)", "intent": "Force use of CRAM-MD5 authentication when identifying the client to protect the `password` . With arguments `user`.", "question_id": 4710}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312}
{"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "doc_test_finder.find(obj, name, module)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object .", "question_id": 2852}
{"snippet": "math.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "question_id": 5897}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6120}
{"snippet": "window.addch(y, x, ch)", "intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2003}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None, is_package=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g . With arguments `is_package`.", "question_id": 4917}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False)", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10970}
{"snippet": "string.Template(template)", "intent": "The constructor takes a single argument which is the `template` string .", "question_id": 9525}
{"snippet": "message.set_payload(payload, charset=None)", "intent": "Set the entire message object \u2019 s `payload` to payload . Optional `charset` sets the message \u2019 s default character set ; see set_charset ( ) for details .", "question_id": 2961}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}
{"snippet": "sys.setcheckinterval(interval)", "intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "question_id": 9834}
{"snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5863}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}
{"snippet": "warnings.warn(message, category=None, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12003}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "cgitb.handler(info=None)", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) . The optional `info` argument should be a 3-tuple containing an exception type , exception value , and traceback object , exactly like the tuple returned by sys.exc_info ( ) .", "question_id": 1074}
{"snippet": "asyncio.BoundedSemaphore(value=1)", "intent": "A bounded semaphore object . Bounded Semaphore is a version of Semaphore that raises a ValueError in release ( ) if it increases the internal counter above the initial `value` .", "question_id": 589}
{"snippet": "InteractiveInterpreter.runsource(source)", "intent": "Compile and run some `source` in the interpreter .", "question_id": 1175}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1709}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "test.support.bind_port(sock)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`.", "question_id": 10258}
{"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`.", "question_id": 2021}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "xml.sax.saxutils.XMLFilterBase(base)", "intent": "This class is designed to sit between an XMLReader and the client application \u2019 s event handlers . With arguments `base`.", "question_id": 12666}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "plistlib.load(fp, fmt=None, use_builtin_types=True)", "intent": "Read a plist file . `fp` should be a readable and binary file object . The `fmt` is the format of the file and the following values are valid : If `use_builtin_types` is true ( the default ) binary data will be returned as instances of bytes , otherwise it is returned as instances of Data .", "question_id": 7551}
{"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`.", "question_id": 9626}
{"snippet": "style.lookup(style, option, state=None, default=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "question_id": 10680}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "help(object)", "intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "question_id": 4030}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "ossaudiodev.openmixer(device)", "intent": "Open a mixer `device` and return an OSS mixer device object .", "question_id": 7176}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "calendar.prmonth(theyear, themonth, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 995}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11129}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "cgitb.html(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1072}
{"snippet": "header.encode(\\t', maxlinelen=None, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `maxlinelen` , if given , overrides the instance \u2019 s value for the maximum line length . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3136}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}
{"snippet": "threading.Timer(interval, function, args=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10413}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "unittest.main(failfast=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `failfast` , `catchbreak` and `buffer` parameters have the same effect as the same-name command-line options .", "question_id": 11553}
{"snippet": "nntplib.NNTP(host, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6412}
{"snippet": "mailbox.MH(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in MH format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5777}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "telnetlib.Telnet(timeout, port=0)", "intent": "Telnet represents a connection to a Telnet server . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . Alternatively , the `host` name and optional `port` number can be passed to the constructor too , in which case the connection to the server will be established before the constructor returns .", "question_id": 10003}
{"snippet": "os.truncate(path, length)", "intent": "Truncate the file corresponding to `path` , so that it is at most `length` bytes in size .", "question_id": 6956}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "trace.Trace(outfile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `outfile` is the name of the file in which to write updated count information .", "question_id": 10714}
{"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}
{"snippet": "email.iterators.body_line_iterator(msg, decode=False)", "intent": "This iterates over all the payloads in all the subparts of `msg` , returning the string payloads line-by-line . Optional `decode` is passed through to Message.get_payload .", "question_id": 3209}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "profile.runcall(func, *args, **kwargs)", "intent": "Profile `func` ( `*args` , `**kwargs` )", "question_id": 7687}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "dis.disassemble(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2720}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "turtle.setpos(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10915}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "cmd.Cmd(completekey='tab', stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1131}
{"snippet": "pprint.PrettyPrinter(depth=None)", "intent": "Construct a PrettyPrinter instance . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7626}
{"snippet": "email.message_from_bytes(s, _class=None)", "intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) . Optional `_class` and `policy` are interpreted as with the BytesParser class constructor .", "question_id": 3397}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "logging.handlers.RotatingFileHandler(filename, mode='a', delay=False)", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `mode` is not specified , ' a ' is used . If `delay` is true , then file opening is deferred until the first call to emit ( ) .", "question_id": 5467}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}
{"snippet": "header.append(s, errors='strict')", "intent": "Append the string `s` to the MIME header . Optional `errors` is passed as the errors argument to the decode call if s is a byte string .", "question_id": 3128}
{"snippet": "tempfile.mkdtemp(suffix=None, dir=None)", "intent": "Creates a temporary directory in the most secure manner possible . The `prefix` , `suffix` , and `dir` arguments are the same as for mkstemp ( ) .", "question_id": 10086}
{"snippet": "loop.connect_write_pipe(protocol_factory, pipe)", "intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 302}
{"snippet": "codecs.StreamReader(stream)", "intent": "Constructor for a StreamReader instance . All `stream` readers must provide this constructor interface .", "question_id": 1284}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5875}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}
{"snippet": "shutil.chown(path, user=None, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8344}
{"snippet": "parser.isexpr(st)", "intent": "When `st` represents an 'eval ' form , this function returns true , otherwise it returns false .", "question_id": 7224}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "mmap.move(dest, src, count)", "intent": "Copy the `count` bytes starting at offset `src` to the destination index `dest` .", "question_id": 6008}
{"snippet": "logging.handlers.RotatingFileHandler(filename, backupCount=0)", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . You can use the `maxBytes` and `backupCount` values to allow the file to rollover at a predetermined size .", "question_id": 5461}
{"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}
{"snippet": "ast.get_docstring(node, clean=True)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring . If `clean` is true , clean up the docstring \u2019 s indentation with inspect.cleandoc ( ) .", "question_id": 151}
{"snippet": "FTP.login(user='anonymous', passwd='', acct='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3922}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467}
{"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "http.client.HTTPConnection(host)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number .", "question_id": 4374}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "message.del_param(param, header='content-type')", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3010}
{"snippet": "glob.iglob(pathname, recursive=False)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`, `recursive`.", "question_id": 4267}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}
{"snippet": "style.lookup(style, option)", "intent": "Returns the value specified for `option` in `style` .", "question_id": 10677}
{"snippet": "bytearray.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9334}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "warnings.simplefilter(action, category=Warning, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `append`.", "question_id": 12038}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout .", "question_id": 12659}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "plistlib.load(fp, use_builtin_types=True)", "intent": "Read a plist file . `fp` should be a readable and binary file object . If `use_builtin_types` is true ( the default ) binary data will be returned as instances of bytes , otherwise it is returned as instances of Data .", "question_id": 7549}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "socket.gethostbyname_ex(hostname)", "intent": "Translate a host name to IPv4 address format , extended interface . Return a triple ( `hostname` , aliaslist , ipaddrlist ) where hostname is the primary host name responding to the given ip_address , aliaslist is a ( possibly empty ) list of alternative host names for the same address , and ipaddrlist is a list of IPv4 addresses for the same interface on the same host ( often but not always a single address ) .", "question_id": 8648}
{"snippet": "str(object=b'', errors='strict')", "intent": "Return a str version of `object` . With arguments `errors`.", "question_id": 4120}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "asyncio.open_unix_connection(ssl=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `ssl`.", "question_id": 487}
{"snippet": "test_result.addExpectedFailure(test, err)", "intent": "Called when the `test` case test fails , but was marked with the expectedFailure ( ) decorator . The default implementation appends a tuple ( test , formatted_err ) to the instance \u2019 s expectedFailures attribute , where formatted_err is a formatted traceback derived from `err` .", "question_id": 11528}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}
{"snippet": "SSLContext.wrap_socket(sock)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) .", "question_id": 9022}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "str.rsplit(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9237}
{"snippet": "ContentHandler.processingInstruction(target, data)", "intent": "Receive notification of a processing instruction . With arguments `target`, `data`.", "question_id": 12581}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "threading.Thread(daemon=None)", "intent": "This constructor should always be called with keyword arguments . If not None , `daemon` explicitly sets whether the thread is daemonic .", "question_id": 10358}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 931}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "date.replace(year=self.year, day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `year`, `day`.", "question_id": 2234}
{"snippet": "HTTPConnection.set_tunnel(host, headers=None)", "intent": "Set the `host` and the `port` for HTTP Connect Tunnelling . The `headers` argument should be a mapping of extra HTTP headers to send with the CONNECT request .", "question_id": 4439}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}
{"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}
{"snippet": "header.encode(\\t', linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3133}
{"snippet": "bytes(source, encoding)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`.", "question_id": 3986}
{"snippet": "email.utils.encode_rfc2231(s, charset=None, language=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3482}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "xml.etree.ElementTree.XMLID(text, parser=None)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12472}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "codecs.replace_errors(exception)", "intent": "Implements the 'replace ' error handling ( for text encodings only ) : substitutes ' ? ' With arguments `exception`.", "question_id": 1256}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "turtle.RawPen(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11159}
{"snippet": "importlib.__import__(name, globals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "question_id": 4784}
{"snippet": "FTP.dir(argument)", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3957}
{"snippet": "turtle.ondrag(fun, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `add`.", "question_id": 11029}
{"snippet": "hashlib.new(name, data)", "intent": "Is a generic constructor that takes the string `name` of the desired algorithm as its first parameter . With arguments `data`.", "question_id": 4297}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "stream_handler.setStream(stream)", "intent": "Sets the instance \u2019 s `stream` to the specified value , if it is different .", "question_id": 5425}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "dialog.text(name, x, y, width, height, attributes, text)", "intent": "Add and return a Text control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `text`.", "question_id": 6137}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "tkinter.tix.Tk(baseName=None)", "intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `baseName`.", "question_id": 10546}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "connection.execute(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8812}
{"snippet": "test.support.requires(resource)", "intent": "Raise ResourceDenied if `resource` is not available .", "question_id": 10147}
{"snippet": "urllib.request.Request(url, data=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed .", "question_id": 11769}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "hashlib.new(name, data)", "intent": "Is a generic constructor that takes the string `name` of the desired algorithm as its first parameter . With arguments `data`.", "question_id": 4297}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "message.get_param(param, header='content-type')", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2993}
{"snippet": "multiprocessing.connection.Client(address, family)", "intent": "Attempt to set up a connection to the listener which is using `address` address , returning a Connection . The type of the connection is determined by `family` argument , but this can generally be omitted since it can usually be inferred from the format of address .", "question_id": 6369}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "codecs.replace_errors(exception)", "intent": "Implements the 'replace ' error handling ( for text encodings only ) : substitutes ' ? ' With arguments `exception`.", "question_id": 1256}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "gettext.find(domain, localedir=None, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4228}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "select.kevent(ident, filter=KQ_FILTER_READ, fflags=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `filter`, `fflags`.", "question_id": 8163}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "robot_file_parser.can_fetch(useragent, url)", "intent": "Returns True if the `useragent` is allowed to fetch the `url` according to the rules contained in the parsed robots.txt file .", "question_id": 11912}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "uuid.uuid5(namespace, name)", "intent": "Generate a UUID based on the SHA-1 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11963}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "message.__str__()", "intent": "Equivalent to as_string ( ) .", "question_id": 2946}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "platform.mac_ver('', ''), release='')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7510}
{"snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)", "intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "question_id": 11783}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "time.replace(hour=self.hour)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2335}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "xml.etree.ElementTree.XMLPullParser(events=None)", "intent": "A pull parser suitable for non-blocking applications . Its input-side API is similar to that of XMLParser , but instead of pushing calls to a callback target , XMLPullParser collects an internal list of parsing `events` and lets the user read from it .", "question_id": 12557}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "ossaudiodev.openmixer(device)", "intent": "Open a mixer `device` and return an OSS mixer device object .", "question_id": 7176}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}
{"snippet": "plistlib.loads(data, use_builtin_types=True)", "intent": "Load a plist from a bytes object . With arguments `data`, `use_builtin_types`.", "question_id": 7557}
{"snippet": "content_manager.set_content(msg, obj, *args, **kw)", "intent": "If the maintype is multipart , raise a TypeError ; otherwise look up a handler function based on the type of `obj` ( see next paragraph ) , call clear_content ( ) on the `msg` , and call the handler function , passing through all arguments . With arguments `*args`, `**kw`.", "question_id": 3033}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . With arguments `prog`, `parser_class`.", "question_id": 80}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "element.findtext(match)", "intent": "Finds text for the first subelement matching `match` .", "question_id": 12495}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "BaseTransport.get_extra_info(name, default=None)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get . `default` is the value to return if the information is not available , or if the transport does not support querying it with the given third-party event loop implementation or on the current platform .", "question_id": 399}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "codecs.ignore_errors(exception)", "intent": "Implements the 'ignore ' error handling : malformed data is ignored and encoding or decoding is continued without further notice . With arguments `exception`.", "question_id": 1257}
{"snippet": "BaseProtocol.connection_lost(exc)", "intent": "Called when the connection is lost or closed . With arguments `exc`.", "question_id": 432}
{"snippet": "base64.standard_b64decode(s)", "intent": "Decode bytes-like object or ASCII string `s` using the standard Base64 alphabet and return the decoded bytes .", "question_id": 715}
{"snippet": "email.iterators.body_line_iterator(msg, decode=False)", "intent": "This iterates over all the payloads in all the subparts of `msg` , returning the string payloads line-by-line . Optional `decode` is passed through to Message.get_payload .", "question_id": 3209}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common, shallow=True)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` . The `shallow` parameter has the same meaning and default value as for filecmp.cmp ( ) .", "question_id": 3758}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "message.get_param(param, header='content-type', unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2997}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True, inclheader=False)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .", "question_id": 1082}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "sysconfig.get_path(name, scheme, vars, expand)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) . get_path ( ) will use the variables returned by get_config_vars ( ) to `expand` the path .", "question_id": 9862}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12226}
{"snippet": "fraction.__ceil__()", "intent": "Returns the least int > = self .", "question_id": 3874}
{"snippet": "Pattern.subn(repl, string, count=0)", "intent": "Identical to the subn ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7990}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10971}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12239}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5866}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "XMLReader.setDTDHandler(handler)", "intent": "Set the current DTDHandler . With arguments `handler`.", "question_id": 12617}
{"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}
{"snippet": "ctypes._CData", "intent": "This non-public class is the common base class of all ctypes data types.", "question_id": 1842}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861}
{"snippet": "xml.etree.ElementInclude.include(elem, loader=None)", "intent": "This function expands XInclude directives . `elem` is the root element . `loader` is an optional resource loader .", "question_id": 12476}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "smtplib.SMTP(port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8460}
{"snippet": "XMLReader.setContentHandler(handler)", "intent": "Set the current ContentHandler . With arguments `handler`.", "question_id": 12615}
{"snippet": "xmlrpc.client.ServerProxy(uri)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.", "question_id": 12669}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660}
{"snippet": "audioop.bias(fragment, width, bias)", "intent": "Return a `fragment` that is the original fragment with a `bias` added to each sample . With arguments `width`.", "question_id": 685}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "winreg.CreateKeyEx(key, sub_key, reserved=0)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `reserved` is a reserved integer , and must be zero .", "question_id": 12124}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}
{"snippet": "queue.put(obj, block)", "intent": "Put `obj` into the queue . If the optional argument `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 6201}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer)", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp .", "question_id": 1297}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "base64.a85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 729}
{"snippet": "typing.Dict(dict, MutableMappingKT, VT)", "intent": "A generic version of `dict` . With arguments `MutableMappingKT`, `VT`.", "question_id": 11298}
{"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948}
{"snippet": "FTP.dir(argument)", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3957}
{"snippet": "secrets.token_bytes(nbytes=None)", "intent": "Return a random byte string containing `nbytes` number of bytes .", "question_id": 8138}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "IMAP4.getannotation(mailbox, entry, attribute)", "intent": "Retrieve the specified ANNOTATIONs for `mailbox` . With arguments `entry`, `attribute`.", "question_id": 4703}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "socket.getaddrinfo(host, port, type=0, proto=0)", "intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None . The `family` , `type` and `proto` arguments can be optionally specified in order to narrow the list of addresses returned .", "question_id": 8643}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . With arguments `prog`.", "question_id": 81}
{"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}
{"snippet": "zlib.compressobj(zdict, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `method` is the compression algorithm .", "question_id": 12899}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "tempfile.TemporaryFile(mode='w+b', buffering=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10041}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826}
{"snippet": "subprocess.Popen(args, stdin=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9602}
{"snippet": "InteractiveInterpreter.runsource(source)", "intent": "Compile and run some `source` in the interpreter .", "question_id": 1175}
{"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}
{"snippet": "binascii.crc32(data, value)", "intent": "Compute CRC-32 , the 32-bit checksum of `data` , starting with an initial CRC of `value` .", "question_id": 841}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "bisect.insort_right(a, x, lo=0, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`, `hi`.", "question_id": 871}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8533}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823}
{"snippet": "importlib.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4798}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}
{"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "dbm.open(file)", "intent": "Open the database `file` file and return a corresponding object .", "question_id": 2366}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "email.encoders.encode_7or8bit(msg)", "intent": "This doesn \u2019 t actually modify the message \u2019 s payload , but it does set the Content-Transfer-Encoding header to either 7bit or 8bit as appropriate , based on the payload data . With arguments `msg`.", "question_id": 3071}
{"snippet": "fileinput.FileInput(files=None, inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together . With arguments `files`.", "question_id": 3807}
{"snippet": "dataclasses.field(default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2169}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}
{"snippet": "os.getpriority(which, who)", "intent": "Get program scheduling priority . The value `which` is one of PRIO_PROCESS , PRIO_PGRP , or PRIO_USER , and `who` is interpreted relative to which ( a process identifier for PRIO_PROCESS , process group identifier for PRIO_PGRP , and a user ID for PRIO_USER ) .", "question_id": 6684}
{"snippet": "codecs.CodecInfo(encode, decode, incrementaldecoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementaldecoder`.", "question_id": 1205}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "object.__setstate__(state)", "intent": "Upon unpickling , if the class defines __setstate__ ( ) , it is called with the unpickled `state` .", "question_id": 7412}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "socket.socket(fileno=None)", "intent": "Create a new socket using the given address `family` , socket `type` and protocol number . If `fileno` is specified , the values for family , type , and `proto` are auto-detected from the specified file descriptor .", "question_id": 8617}
{"snippet": "unittest.mock.mock_open(mock=None)", "intent": "A helper function to create a `mock` to replace the use of open ( ) .", "question_id": 11654}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "bytes.rsplit(maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9353}
{"snippet": "fileinput.FileInput(files=None)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `files`.", "question_id": 3801}
{"snippet": "bytes_parser.parsebytes(bytes)", "intent": "Similar to the parse ( ) method , except it takes a bytes-like object instead of a file-like object . Calling this method on a bytes-like object is equivalent to wrapping `bytes` in a BytesIO instance first and calling parse ( ) .", "question_id": 3378}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902}
{"snippet": "lock.acquire(timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12954}
{"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748}
{"snippet": "plistlib.load(fp, use_builtin_types=True)", "intent": "Read a plist file . `fp` should be a readable and binary file object . If `use_builtin_types` is true ( the default ) binary data will be returned as instances of bytes , otherwise it is returned as instances of Data .", "question_id": 7549}
{"snippet": "nntplib.NNTP(host, timeout, port=119, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6406}
{"snippet": "parser.compilest(st)", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7222}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "turtle.numinput(title, prompt, minval=None, maxval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11090}
{"snippet": "zlib.compressobj(level=-1, strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `strategy` is used to tune the compression algorithm .", "question_id": 12916}
{"snippet": "test.support.TransientResource(exc, **kwargs)", "intent": "Instances are a context manager that raises ResourceDenied if the specified exception type is raised . With arguments `exc`, `**kwargs`.", "question_id": 10285}
{"snippet": "pdb.Pdb(stdout=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7344}
{"snippet": "signal.setitimer(which, seconds)", "intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "question_id": 8391}
{"snippet": "codecs.CodecInfo(encode, decode, incrementalencoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementalencoder`.", "question_id": 1204}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "message.get_payload(i=None, decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2959}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "email_message.del_param(param, header='content-type')", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3271}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "turtle.tracer(n=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11059}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "sqlite3.version_info", "intent": "The version number of this module, as a tuple of integers.", "question_id": 8792}
{"snippet": "loop.sock_recv_into(sock, buf)", "intent": "Receive data from `sock` into the `buf` buffer .", "question_id": 277}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "incremental_decoder.setstate(state)", "intent": "Set the `state` of the decoder to state .", "question_id": 1278}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "unittest.main(verbosity=1)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . You can run tests with more detailed information by passing in the `verbosity` argument :", "question_id": 11552}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}
{"snippet": "warnings.simplefilter(action)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12033}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "base64.b64decode(s, altchars=None, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 713}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "os.lseek(fd, pos, how)", "intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "question_id": 6734}
{"snippet": "message.__bytes__()", "intent": "Equivalent to as_bytes ( ) .", "question_id": 2951}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "IMAP4.thread(threading_algorithm, charset)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4748}
{"snippet": "OpenerDirector.add_handler(handler)", "intent": "`handler` should be an instance of BaseHandler .", "question_id": 11834}
{"snippet": "HTTPConnection.request(method, url, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4429}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347}
{"snippet": "os.utime(path, ns, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6960}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "mimetypes.guess_extension(type, strict=True)", "intent": "Guess the extension for a file based on its MIME `type` , given by type . The optional `strict` argument has the same meaning as with the guess_type ( ) function .", "question_id": 5944}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "socket.getaddrinfo(host, port, type=0, proto=0)", "intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None . The `family` , `type` and `proto` arguments can be optionally specified in order to narrow the list of addresses returned .", "question_id": 8643}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "base64.encodestring(s)", "intent": "Deprecated alias of encodebytes ( ) . With arguments `s`.", "question_id": 752}
{"snippet": "OSError(errno, strerror)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`.", "question_id": 3653}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "message.__bytes__()", "intent": "Equivalent to as_bytes ( ) .", "question_id": 2951}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "sys.call_tracing(func, args)", "intent": "Call `func` ( *args ) , while tracing is enabled . With arguments `args`.", "question_id": 9772}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "timeit.repeat(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10489}
{"snippet": "control.condition(action, condition)", "intent": "Make an entry into the ControlCondition table for this control . With arguments `action`, `condition`.", "question_id": 6131}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "subprocess.check_call(args, stdout=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`.", "question_id": 9671}
{"snippet": "cmd.Cmd(completekey='tab')", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab .", "question_id": 1128}
{"snippet": "warnings.simplefilter(action, category=Warning, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `append`.", "question_id": 12038}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "copyreg.pickle(type, function)", "intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type .", "question_id": 1666}
{"snippet": "hmac.new(key, msg=None)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key . If `msg` is present , the method call update ( msg ) is made .", "question_id": 4330}
{"snippet": "chunk.seek(pos)", "intent": "Set the chunk \u2019 s current position . With arguments `pos`.", "question_id": 1087}
{"snippet": "sqlite3.Warning", "intent": "A subclass of Exception.", "question_id": 8856}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "pkgutil.ImpImporter(dirname=None)", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm . If `dirname` is a string , a PEP 302 finder is created that searches that directory .", "question_id": 7438}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "unittest.main(exit=True)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . By default main calls sys.exit ( ) with an `exit` code indicating success or failure of the tests run .", "question_id": 11551}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "sync_manager.Queue(maxsize)", "intent": "Create a shared queue.Queue object and return a proxy for it . With arguments `maxsize`.", "question_id": 6306}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "ZipFile.open(name, mode='r')", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . The `mode` parameter , if included , must be ' r ' ( the default ) or ' w ' .", "question_id": 12807}
{"snippet": "platform.win32_ver(release='', version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7500}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761}
{"snippet": "wsgiref.simple_server.WSGIRequestHandler(request, client_address, server)", "intent": "Create an HTTP handler for the given `request` ( i.e . a socket ) , `client_address` ( a ( host , port ) tuple ) , and `server` ( WSGIServer instance ) .", "question_id": 12231}
{"snippet": "IMAP4.select(mailbox='INBOX', readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4732}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, domain: int=None)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `domain: int`.", "question_id": 10859}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "email.header.Header(s=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value .", "question_id": 3117}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "asyncio.sleep(delay)", "intent": "Block for `delay` seconds .", "question_id": 595}
{"snippet": "tokenize.tokenize(readline)", "intent": "The tokenize ( ) generator requires one argument , `readline` , which must be a callable object which provides the same interface as the io.IOBase.readline ( ) method of file objects .", "question_id": 10701}
{"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}
{"snippet": "csv.DictReader(f, *args, **kwds, dialect='excel')", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `dialect`.", "question_id": 1696}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "bytearray.lstrip(chars)", "intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "question_id": 9345}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211}
{"snippet": "platform.architecture(executable=sys.executable, bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7462}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "fraction.limit_denominator(max_denominator=1000000)", "intent": "Finds and returns the closest Fraction to self that has denominator at most `max_denominator` .", "question_id": 3872}
{"snippet": "@unittest.skipIf(condition, reason)", "intent": "Skip the decorated test if `condition` is true . With arguments `reason`.", "question_id": 11359}
{"snippet": "codecs.lookup_error(name)", "intent": "Return the error handler previously registered under the `name` name .", "question_id": 1254}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}
{"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11422}
{"snippet": "xml.sax.xmlreader.AttributesImpl(attrs)", "intent": "This is an implementation of the Attributes interface ( see section The Attributes Interface ) . Objects of this class should be instantiated by readers ; `attrs` must be a dictionary-like object containing a mapping from attribute names to attribute values .", "question_id": 12611}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "bdb.Breakpoint(self, file, line, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "question_id": 757}
{"snippet": "smtplib.SMTP_SSL(port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8480}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "lzma.decompress(data, format=FORMAT_AUTO)", "intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "question_id": 5715}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213}
{"snippet": "FTP.retrlines(cmd)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "question_id": 3930}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "Telnet.open(host, port=0)", "intent": "Connect to a `host` . The optional second argument is the `port` number , which defaults to the standard Telnet port ( 23 ) .", "question_id": 10021}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . If your SMTP server requires authentication , you can specify a ( username , password ) tuple for the `credentials` argument . To specify the use of a `secure` protocol ( TLS ) , pass in a tuple to the secure argument . With arguments `fromaddr`.", "question_id": 5519}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "prototype(address)", "intent": "Returns a foreign function at the specified `address` which must be an integer .", "question_id": 1801}
{"snippet": "Panel.replace(win)", "intent": "Change the window associated with the panel to the window `win` .", "question_id": 2151}
{"snippet": "codecs.strict_errors(exception)", "intent": "Implements the 'strict ' error handling : each encoding or decoding error raises a UnicodeError . With arguments `exception`.", "question_id": 1255}
{"snippet": "mimetypes.init(files=None)", "intent": "Initialize the internal data structures . If given , `files` must be a sequence of file names which should be used to augment the default type map .", "question_id": 5946}
{"snippet": "types.new_class(name, bases=())", "intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11171}
{"snippet": "test_case.assertNotAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11428}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes .", "question_id": 12242}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "shutil.copytree(src, dst, ignore=None)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "question_id": 8325}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "wsgiref.validate.validator(application)", "intent": "Wrap `application` and return a new WSGI application object .", "question_id": 12235}
{"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831}
{"snippet": "io_base.readline(size=-1)", "intent": "Read and return one line from the stream . If `size` is specified , at most size bytes will be read .", "question_id": 5071}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "base64.b64decode(s, altchars=None, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 713}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "IMAP4.append(mailbox, flags, date_time, message)", "intent": "Append `message` to named `mailbox` . With arguments `flags`, `date_time`.", "question_id": 4691}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "inspect.Signature(parameters=None)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection .", "question_id": 4980}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "binascii.b2a_uu(data, backtick=False)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "question_id": 822}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, unsafe_hash=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2190}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 967}
{"snippet": "socket.socket(fileno=None)", "intent": "Create a new socket using the given address `family` , socket `type` and protocol number . If `fileno` is specified , the values for family , type , and `proto` are auto-detected from the specified file descriptor .", "question_id": 8617}
{"snippet": "message.get_param(param, header='content-type')", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2993}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1693}
{"snippet": "xml.sax.SAXParseException(msg, exception, locator)", "intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "question_id": 12599}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856}
{"snippet": "re.sub(pattern, repl, string, count=0, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "question_id": 7954}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11429}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11119}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`.", "question_id": 535}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "binary.encode(out)", "intent": "Write the XML-RPC base 64 encoding of this binary item to the `out` stream object .", "question_id": 12688}
{"snippet": "collections.namedtuple(typename, field_names, rename=False, module=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names . If `module` is defined , the __module__ attribute of the named tuple is set to that value .", "question_id": 1381}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220}
{"snippet": "pdb.runeval(expression)", "intent": "See the documentation for the functions explained above . With arguments `expression`.", "question_id": 7355}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "winreg.CreateKeyEx(key, sub_key, reserved=0)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `reserved` is a reserved integer , and must be zero .", "question_id": 12124}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "IMAP4.select(mailbox='INBOX', readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4732}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "subprocess.run(args, stderr=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9571}
{"snippet": "fileinput.input(files=None, inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "question_id": 3789}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "html_diff.make_file(fromlines, tolines, fromdesc='', charset='utf-8')", "intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML file containing a table showing line by line differences with inter-line and intra-line changes highlighted . `fromdesc` and `todesc` are optional keyword arguments to specify from/to file column header strings ( both default to an empty string ) . With arguments `charset`.", "question_id": 2617}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "compileall.compile_file(fullname, force=False)", "intent": "Compile the file with path `fullname` . With arguments `force`.", "question_id": 1421}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively . If the `buffer_size` is omitted it defaults to DEFAULT_BUFFER_SIZE .", "question_id": 5131}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1708}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860}
{"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}
{"snippet": "doctest.DocTestRunner(verbose=None)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `verbose` controls the DocTestRunner \u2019 s verbosity .", "question_id": 2863}
{"snippet": "FTP.retrlines(cmd)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "question_id": 3930}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}
{"snippet": "loader.exec_module(module)", "intent": "An abstract method that executes the `module` in its own namespace when a module is imported or reloaded .", "question_id": 4815}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "doctest.DocFileSuite(*paths, setUp=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `setUp` specifies a set-up function for the test suite . With arguments `*paths`.", "question_id": 2799}
{"snippet": "widget.selection_set(*items)", "intent": "items becomes the new selection . With arguments `*items`.", "question_id": 10654}
{"snippet": "tree_builder.end(tag)", "intent": "Closes the current element . `tag` is the element name .", "question_id": 12543}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "os.utime(path, times=None, dir_fd=None)", "intent": "Set the access and modified `times` of the file specified by `path` . With arguments `dir_fd`.", "question_id": 6971}
{"snippet": "message.get_params(unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2986}
{"snippet": "asyncio.Queue(loop=None)", "intent": "A first in , first out ( FIFO ) queue . With arguments `loop`.", "question_id": 447}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}
{"snippet": "pickle.load(file, encoding=\"ASCII\", errors=\"strict\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7377}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "Call the `function` ( a function or method object , not a string ) with the given arguments . With arguments `*args`, `**kwds`.", "question_id": 7335}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "os.fwalk(top='.', topdown=True)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`, `topdown`.", "question_id": 6989}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "loop.call_exception_handler(context)", "intent": "Call the current event loop exception handler . `context` is a dict object containing the following keys ( new keys may be introduced in future Python versions ) :", "question_id": 310}
{"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "tkinter.Tk(baseName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`, `className`.", "question_id": 10525}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831}
{"snippet": "FileCookieJar.save(ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4504}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "threading.Timer(interval, function)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10412}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "ur_lopener.retrieve(url, filename=None, data=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . It will be called once at the start and after each chunk of `data` is read from the network .", "question_id": 11901}
{"snippet": "base_selector.modify(fileobj, events)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8218}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "zipfile.PyZipFile(file, mode='r')", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `mode`.", "question_id": 12847}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes .", "question_id": 12242}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}
{"snippet": "base64.b64decode(s, altchars=None, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 713}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "bz2.open(filename, mode='r', newline=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 885}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "pkgutil.walk_packages(path=None, onerror=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "question_id": 7454}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "fcntl.lockf(fd, cmd, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3750}
{"snippet": "dataclasses.astuple(instance)", "intent": "Converts the dataclass `instance` to a tuple ( by using the factory function `tuple_factory` ) .", "question_id": 2181}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "config_parser.remove_section(section)", "intent": "Remove the specified `section` from the configuration .", "question_id": 1564}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "importlib.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4798}
{"snippet": "tempfile.mktemp(prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10100}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "bytes_parser.parse(fp)", "intent": "Read all the data from the binary file-like object `fp` , parse the resulting bytes , and return the message object .", "question_id": 3376}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "pickle.Unpickler(file, fix_imports=True, encoding=\"ASCII\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7402}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "calendar.yeardays2calendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 922}
{"snippet": "text_io_base.read(size=-1)", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5139}
{"snippet": "os.sendfile(out, in, offset, count, headers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6797}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "mbox_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5829}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}
{"snippet": "dialog.bitmap(name, x, y, width, height, text)", "intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "question_id": 6138}
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "calendar.prcal(year, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `m`.", "question_id": 1005}
{"snippet": "timeit.repeat(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10487}
{"snippet": "policy.fold_binary(name, value)", "intent": "The same as fold ( ) , except that the returned `value` should be a bytes object rather than a string . With arguments `name`.", "question_id": 3427}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071}
{"snippet": "select.kevent(ident)", "intent": "( Only supported on BSD . ) With arguments `ident`.", "question_id": 8156}
{"snippet": "test_case.assertIsNot(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11385}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "subprocess.run(args)", "intent": "Run the command described by `args` .", "question_id": 9567}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}
{"snippet": "POP3.getwelcome()", "intent": "Returns the greeting string sent by the POP3 server .", "question_id": 7602}
{"snippet": "fcntl.lockf(fd, cmd, start=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3753}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, inline_comment_prefixes=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `inline_comment_prefixes`.", "question_id": 1575}
{"snippet": "urllib.parse.urlencode(query, doseq=False, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11738}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "question_id": 1299}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "WriteTransport.set_write_buffer_limits(high=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 410}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "bytes.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9308}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "subprocess.call(args, stdin=None, shell=False)", "intent": "Run the command described by `args` . With arguments `stdin`, `shell`.", "question_id": 9668}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "print(*objects, sep=' ', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4081}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "pwd.getpwuid(uid)", "intent": "Return the password database entry for the given numeric user ID . With arguments `uid`.", "question_id": 7703}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945}
{"snippet": "fileinput.FileInput(mode='r')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With `mode` you can specify which file mode will be passed to open ( ) .", "question_id": 3805}
{"snippet": "ctypes.PYFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the Python calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1800}
{"snippet": "modulefinder.ModuleFinder(debug=0, excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6033}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', policy=compat32)", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . Optional `policy` argument defaults to compat32 . With arguments `**_params`.", "question_id": 3323}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607}
{"snippet": "lzma.LZMAFile(check=-1)", "intent": "Open an LZMA-compressed file in binary `mode` . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5670}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "doctest.DocFileSuite(*paths, optionflags=0)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `optionflags` specifies the default doctest options for the tests , created by or-ing together individual option flags . With arguments `*paths`.", "question_id": 2802}
{"snippet": "doc_test_runner.report_unexpected_exception(out, test, example, exc_info)", "intent": "Report that the given `example` raised an unexpected exception . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `exc_info` is a tuple containing information about the unexpected exception ( as returned by sys.exc_info ( ) ) .", "question_id": 2872}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "http.cookies.BaseCookie(input)", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "question_id": 4578}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2660}
{"snippet": "locale.setlocale(category, locale=None)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5351}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "test.support.join_thread(thread, timeout=30.0)", "intent": "Join a `thread` within `timeout` .", "question_id": 10255}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "http.client.HTTPConnection(host)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number .", "question_id": 4374}
{"snippet": "os.initgroups(username, gid)", "intent": "Call the system initgroups ( ) to initialize the group access list with all of the groups of which the specified `username` is a member , plus the specified group id . With arguments `gid`.", "question_id": 6691}
{"snippet": "parser.compilest(st)", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7222}
{"snippet": "platform.architecture(bits='', linkage='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7464}
{"snippet": "collections.Counter(iterable-or-mapping)", "intent": "A Counter is a dict subclass for counting hashable objects . With arguments `iterable-or-mapping`.", "question_id": 1340}
{"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218}
{"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "urllib.parse.urlsplit(urlstring, scheme='')", "intent": "This is similar to urlparse ( ) , but does not split the params from the URL . With arguments `urlstring`, `scheme`.", "question_id": 11691}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . With arguments `prog`, `parser_class`.", "question_id": 79}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4590}
{"snippet": "compileall.compile_path(optimize=-1)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `optimize`.", "question_id": 1435}
{"snippet": "formatter.convert_field(value, conversion)", "intent": "Converts the `value` ( returned by get_field ( ) ) given a `conversion` type ( as in the tuple returned by the parse ( ) method ) .", "question_id": 9524}
{"snippet": "turtle.setpos(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10915}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939}
{"snippet": "Path.open(mode='r', buffering=-1)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `buffering`.", "question_id": 7298}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "mailbox.Maildir(dirname)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout .", "question_id": 5754}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "datetime.now(tz=None)", "intent": "Return the current local date and time . If optional argument `tz` is None or not specified , this is like today ( ) , but , if possible , supplies more precision than can be gotten from going through a time.time ( ) timestamp ( for example , this may be possible on platforms supplying the C gettimeofday ( ) function ) .", "question_id": 2259}
{"snippet": "test.support.import_fresh_module(name, deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10245}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "logging.handlers.DatagramHandler(host, port)", "intent": "Returns a new instance of the DatagramHandler class intended to communicate with a remote machine whose address is given by `host` and `port` .", "question_id": 5490}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "sunau.open(file, mode)", "intent": "If `file` is a string , open the file by that name , otherwise treat it as a seekable file-like object . `mode` can be any of", "question_id": 9691}
{"snippet": "difflib.context_diff(a, b, fromfile='', fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2636}
{"snippet": "base_http_request_handler.log_request(size='-')", "intent": "Logs an accepted ( successful ) request . If a `size` of the response is available , then it should be passed as the size parameter .", "question_id": 4650}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578}
{"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "platform.dist('debian', 'redhat', 'mandrake', ...), version='', id='')", "intent": "This is another name for linux_distribution ( ) . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`, `version`, `id`.", "question_id": 7525}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "readline.set_completer(function)", "intent": "Set or remove the completer `function` .", "question_id": 8040}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "loader.module_repr(module)", "intent": "A legacy method which when implemented calculates and returns the given `module` \u2019 s repr , as a string .", "question_id": 4817}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "@test.support.anticipate_failure(condition)", "intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "question_id": 10208}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "bisect.insort_right(a, x, lo=0, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`, `hi`.", "question_id": 871}
{"snippet": "asyncio.Future(loop=None)", "intent": "A Future represents an eventual result of an asynchronous operation . This way alternative event `loop` implementations can inject their own optimized implementations of a Future object .", "question_id": 360}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "threading.Thread(daemon=None)", "intent": "This constructor should always be called with keyword arguments . If not None , `daemon` explicitly sets whether the thread is daemonic .", "question_id": 10358}
{"snippet": "time.strftime(format, t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10453}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10101}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12129}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10973}
{"snippet": "base_manager.register(typeid, callable, proxytype, exposed, method_to_typeid)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid . `exposed` is used to specify a sequence of method names which proxies for this typeid should be allowed to access using BaseProxy._callmethod ( ) . `method_to_typeid` is a mapping used to specify the return type of those exposed methods which should return a proxy .", "question_id": 6289}
{"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "xml.etree.ElementTree.fromstring(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12438}
{"snippet": "tkinter.tix.Tk(baseName=None)", "intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `baseName`.", "question_id": 10546}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "policy.header_store_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` provided by the application program when the application program is modifying a Message programmatically ( as opposed to a Message created by a parser ) .", "question_id": 3424}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "platform.architecture(bits='', linkage='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7464}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "memory_bio.read(n=-1)", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9057}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "bytearray.rsplit(maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9357}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}
{"snippet": "operator.__eq__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6521}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "structure._fields_", "intent": "A sequence defining the structure fields.", "question_id": 1890}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "IMAP4.recent()", "intent": "Prompt server for an update .", "question_id": 4724}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "pdb.runeval(expression)", "intent": "See the documentation for the functions explained above . With arguments `expression`.", "question_id": 7355}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "socket.getaddrinfo(host, port, type=0, proto=0)", "intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None . The `family` , `type` and `proto` arguments can be optionally specified in order to narrow the list of addresses returned .", "question_id": 8643}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "cgi.parse_qs(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1039}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "asyncio.Queue(maxsize=0)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .", "question_id": 446}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "ctypes.BigEndianStructure(*args, **kw)", "intent": "Abstract base class for structures in big endian byte order . With arguments `*args`, `**kw`.", "question_id": 1887}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "argparse.FileType(errors=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `errors`.", "question_id": 89}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, domain: int=None)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `domain: int`.", "question_id": 10859}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}
{"snippet": "readline.set_pre_input_hook(function)", "intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "question_id": 8038}
{"snippet": "os.chmod(path, mode, follow_symlinks=True)", "intent": "Change the `mode` of `path` to the numeric mode . With arguments `follow_symlinks`.", "question_id": 6837}
{"snippet": "profile.runcall(func, *args, **kwargs)", "intent": "Profile `func` ( `*args` , `**kwargs` )", "question_id": 7687}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "termios.tcsetattr(fd, when, attributes)", "intent": "Set the tty `attributes` for file descriptor `fd` from the attributes , which is a list like the one returned by tcgetattr ( ) . The `when` argument determines when the attributes are changed : TCSANOW to change immediately , TCSADRAIN to change after transmitting all queued output , or TCSAFLUSH to change after transmitting all queued output and discarding all queued input .", "question_id": 10103}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660}
{"snippet": "winreg.SetValueEx(key, value_name, reserved, type, value)", "intent": "Stores data in the `value` field of an open registry `key` . `value_name` is a string that names the subkey with which the value is associated . `reserved` can be anything \u2013 zero is always passed to the API . `type` is an integer that specifies the type of the data .", "question_id": 12151}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, init=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2186}
{"snippet": "datetime.time(second=0)", "intent": "All arguments are optional . With arguments `second`.", "question_id": 2317}
{"snippet": "dbm.open(file)", "intent": "Open the database `file` file and return a corresponding object .", "question_id": 2366}
{"snippet": "asyncio.BoundedSemaphore(value=1)", "intent": "A bounded semaphore object . Bounded Semaphore is a version of Semaphore that raises a ValueError in release ( ) if it increases the internal counter above the initial `value` .", "question_id": 589}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "readline.set_completer(function)", "intent": "Set or remove the completer `function` .", "question_id": 8040}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "platform.dist('debian', 'redhat', 'mandrake', ...), version='')", "intent": "This is another name for linux_distribution ( ) . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`, `version`.", "question_id": 7519}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, order=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2189}
{"snippet": "base64.a85encode(b, wrapcol=0, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 734}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "pprint.PrettyPrinter(depth=None)", "intent": "Construct a PrettyPrinter instance . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7626}
{"snippet": "cgitb.handler(info=None)", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) . The optional `info` argument should be a 3-tuple containing an exception type , exception value , and traceback object , exactly like the tuple returned by sys.exc_info ( ) .", "question_id": 1074}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 931}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "os.setxattr(path, attribute, value, flags=0, follow_symlinks=True)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` . `flags` may be XATTR_REPLACE or XATTR_CREATE . With arguments `follow_symlinks`.", "question_id": 7004}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "shutil.register_archive_format(name, function, extra_args)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives . If given , `extra_args` is a sequence of ( name , value ) pairs that will be used as extra keywords arguments when the archiver callable is used .", "question_id": 8360}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "pdb.run(statement)", "intent": "Execute the `statement` ( given as a string or a code object ) under debugger control .", "question_id": 7327}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "base64.b64decode(s, altchars=None)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters .", "question_id": 711}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037}
{"snippet": "IMAP4.append(mailbox, flags, date_time, message)", "intent": "Append `message` to named `mailbox` . With arguments `flags`, `date_time`.", "question_id": 4691}
{"snippet": "zipapp.create_archive(source, target=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written :", "question_id": 12768}
{"snippet": "ast.increment_lineno(node)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file .", "question_id": 153}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`.", "question_id": 11728}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "TarInfo.frombuf(buf, encoding, errors)", "intent": "Create and return a TarInfo object from string buffer `buf` . With arguments `encoding`, `errors`.", "question_id": 9971}
{"snippet": "lzma.compress(data, format=FORMAT_XZ)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5705}
{"snippet": "wsgiref.validate.validator(application)", "intent": "Wrap `application` and return a new WSGI application object .", "question_id": 12235}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "doc_test_runner.report_success(out, test, example, got)", "intent": "Report that the given `example` ran successfully . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `got` is the actual output from the example .", "question_id": 2870}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "platform.libc_ver(executable=sys.executable, lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7542}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1709}
{"snippet": "turtle.circle(radius, steps=None)", "intent": "Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10925}
{"snippet": "sunau.openfp(file, mode)", "intent": "A synonym for open ( ) , maintained for backwards compatibility . With arguments `file`, `mode`.", "question_id": 9692}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "pickletools.dis(pickle, out=None, annotate=0)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . If a nonzero value is given to `annotate` , each opcode in the output is annotated with a short description .", "question_id": 7422}
{"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "base_proxy._callmethod(methodname, args)", "intent": "Call and return the result of a method of the proxy \u2019 s referent . Note in particular that an exception will be raised if `methodname` has not been exposed . With arguments `args`.", "question_id": 6321}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "pdb.post_mortem(traceback=None)", "intent": "Enter post-mortem debugging of the given `traceback` object .", "question_id": 7339}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "formatter.push_alignment(align)", "intent": "Push a new alignment setting onto the alignment stack . If the alignment value is changed from the previous setting , the writer \u2019 s new_alignment ( ) method is called with the `align` value .", "question_id": 3826}
{"snippet": "incremental_decoder.decode(object, final)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object . If this is the last call to decode ( ) `final` must be true ( the default is false ) .", "question_id": 1274}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6794}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "stream_writer.write(object)", "intent": "Writes the `object` \u2019 s contents encoded to the stream .", "question_id": 1281}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "mailcap.findmatch(caps, key='view', filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5873}
{"snippet": "shutil.register_unpack_format(name, extensions, function, extra_args)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable .", "question_id": 8367}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5875}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "subprocess.call(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9664}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "loop.remove_writer(fd)", "intent": "Stop monitoring the `fd` file descriptor for write availability .", "question_id": 275}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6122}
{"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483}
{"snippet": "HTTPConnection.request(method, url, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4429}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "@functools.lru_cache(maxsize=128, typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4149}
{"snippet": "Record.GetInteger(field)", "intent": "Return the value of `field` as an integer where possible .", "question_id": 6082}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "joinable_queue.poll(timeout)", "intent": "Return whether there is any data available to be read . If `timeout` is not specified then it will return immediately .", "question_id": 6234}
{"snippet": "shutil.unpack_archive(filename, extract_dir, format)", "intent": "Unpack an archive . `filename` is the full path of the archive . `extract_dir` is the name of the target directory where the archive is unpacked . `format` is the archive format : one of \u201c zip \u201d , \u201c tar \u201d , \u201c gztar \u201d , \u201c bztar \u201d , or \u201c xztar \u201d .", "question_id": 8363}
{"snippet": "patch.object(target, attribute, **kwargs, new=DEFAULT)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11619}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "base64.a85decode(b, foldspaces=False, adobe=False)", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e .", "question_id": 740}
{"snippet": "HTMLParser.handle_startendtag(tag, attrs)", "intent": "Similar to handle_starttag ( ) , but called when the parser encounters an XHTML-style empty `tag` ( < img ... / > ) . With arguments `attrs`.", "question_id": 4358}
{"snippet": "test.support.join_thread(thread, timeout=30.0)", "intent": "Join a `thread` within `timeout` .", "question_id": 10255}
{"snippet": "hmac.new(key)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key .", "question_id": 4329}
{"snippet": "connection.backup(target, progress=None, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8837}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "ctypes.FormatError(code)", "intent": "Windows only : Returns a textual description of the error `code` code .", "question_id": 1821}
{"snippet": "email.utils.localtime(dt=None)", "intent": "Return local time as an aware datetime object . Otherwise `dt` argument should be a datetime instance , and it is converted to the local time zone according to the system time zone database .", "question_id": 3453}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "fileinput.FileInput(files=None, inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together . With arguments `files`.", "question_id": 3807}
{"snippet": "os.WIFSIGNALED(status)", "intent": "Return True if the process exited due to a signal , otherwise return False . With arguments `status`.", "question_id": 7091}
{"snippet": "message.get_payload(i=None, decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2959}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "stat.S_ISDIR(mode)", "intent": "Return non-zero if the `mode` is from a directory .", "question_id": 9061}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "math.log(x, base)", "intent": "With one argument , return the natural logarithm of `x` ( to `base` e ) .", "question_id": 5907}
{"snippet": "subprocess.run(args, stdin=None)", "intent": "Run the command described by `args` . The input argument is passed to Popen.communicate ( ) and thus to the subprocess \u2019 s `stdin` .", "question_id": 9568}
{"snippet": "Panel.replace(win)", "intent": "Change the window associated with the panel to the window `win` .", "question_id": 2151}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "pickle.loads(bytes_object, fix_imports=True, errors=\"strict\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7384}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "importlib.util.spec_from_file_location(name, location, loader=None, submodule_search_locations=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . Missing information will be filled in on the spec by making use of `loader` APIs and by the implication that the module will be file-based . With arguments `name`, `location`, `submodule_search_locations`.", "question_id": 4941}
{"snippet": "os.WIFCONTINUED(status)", "intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "question_id": 7089}
{"snippet": "bytearray()", "intent": "There is no dedicated literal syntax for bytearray objects , instead they are always created by calling the constructor :", "question_id": 9266}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "traceback.format_exc(chain=True)", "intent": "This is like print_exc ( `limit` ) but returns a string instead of printing to a file . With arguments `chain`.", "question_id": 10783}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "bytearray.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9310}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}
{"snippet": "types.prepare_class(name, bases=())", "intent": "Calculates the appropriate metaclass and creates the class namespace . The arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) and the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11179}
{"snippet": "msilib.FCICreate(cabname, files)", "intent": "Create a new CAB file named `cabname` . `files` must be a list of tuples , each containing the name of the file on disk , and the name of the file inside the CAB file .", "question_id": 6058}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "FTP.login(user='anonymous', acct='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3920}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes .", "question_id": 12242}
{"snippet": "base64.a85encode(b, wrapcol=0, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 734}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "FTP.set_debuglevel(level)", "intent": "Set the instance \u2019 s debugging `level` .", "question_id": 3903}
{"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928}
{"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "os.execl(path, arg0, arg1)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . With arguments `arg0`, `arg1`.", "question_id": 7009}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "logging.handlers.BaseRotatingHandler(filename, mode)", "intent": "The parameters are as for FileHandler . With arguments `filename`, `mode`.", "question_id": 5450}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "base64.standard_b64encode(s)", "intent": "Encode bytes-like object `s` using the standard Base64 alphabet and return the encoded bytes .", "question_id": 714}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`.", "question_id": 3042}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>)", "intent": "Add `headers` and payload to `msg` : With arguments `<'EmailMessage'>`.", "question_id": 3059}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}
{"snippet": "csv.register_dialect(name, dialect, **fmtparams)", "intent": "Associate `dialect` with `name` . With arguments `**fmtparams`.", "question_id": 1684}
{"snippet": "logging.config.listen(verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5418}
{"snippet": "calendar.LocaleHTMLCalendar(locale=None)", "intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 983}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra)", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.", "question_id": 12451}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "telnetlib.Telnet(port=0)", "intent": "Telnet represents a connection to a Telnet server . Alternatively , the `host` name and optional `port` number can be passed to the constructor too , in which case the connection to the server will be established before the constructor returns .", "question_id": 10007}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218}
{"snippet": "sunau.open(file, mode)", "intent": "If `file` is a string , open the file by that name , otherwise treat it as a seekable file-like object . `mode` can be any of", "question_id": 9691}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "wsgiref.validate.validator(application)", "intent": "Wrap `application` and return a new WSGI application object .", "question_id": 12235}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "audioop.alaw2lin(fragment, width)", "intent": "Convert sound fragments in a-LAW encoding to linearly encoded sound fragments . a-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .", "question_id": 682}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "property(fdel=None)", "intent": "Return a property attribute . `fdel` is a function for deleting an attribute value .", "question_id": 4088}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "shelve.open(filename, flag='c')", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) .", "question_id": 8235}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "tempfile.TemporaryFile(mode='w+b', encoding=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10042}
{"snippet": "memory_bio.write(buf)", "intent": "Write the bytes from `buf` to the memory BIO .", "question_id": 9058}
{"snippet": "turtle.shapesize(outline=None)", "intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "question_id": 10989}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698}
{"snippet": "readline.set_history_length(length)", "intent": "Set or return the desired number of lines to save in the history file . With arguments `length`.", "question_id": 8028}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10971}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "xml.etree.ElementTree.XMLPullParser(events=None)", "intent": "A pull parser suitable for non-blocking applications . Its input-side API is similar to that of XMLParser , but instead of pushing calls to a callback target , XMLPullParser collects an internal list of parsing `events` and lets the user read from it .", "question_id": 12557}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "binascii.b2a_qp(data, quotetabs=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded .", "question_id": 829}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}
{"snippet": "curses.resize_term(nlines, ncols)", "intent": "Backend function used by resizeterm ( ) , performing most of the work ; when resizing the windows , resize_term ( ) blank-fills the areas that are extended . With arguments `nlines`, `ncols`.", "question_id": 1975}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "test_case.subTest(**params)", "intent": "Return a context manager which executes the enclosed code block as a subtest . With arguments `**params`.", "question_id": 11372}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "Panel.replace(win)", "intent": "Change the window associated with the panel to the window `win` .", "question_id": 2151}
{"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378}
{"snippet": "decimal.quantize(exp)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2461}
{"snippet": "os.chmod(path, mode)", "intent": "Change the `mode` of `path` to the numeric mode .", "question_id": 6835}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "readline.set_pre_input_hook(function)", "intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "question_id": 8038}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "object.__reduce_ex__(protocol)", "intent": "Alternatively , a __reduce_ex__ ( ) method may be defined . The only difference is this method should take a single integer argument , the `protocol` version .", "question_id": 7414}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "FileCookieJar.save(ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4504}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "os.setxattr(path, attribute, value, follow_symlinks=True)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` . With arguments `follow_symlinks`.", "question_id": 7003}
{"snippet": "curses.unctrl(ch)", "intent": "Return a bytes object which is a printable representation of the character `ch` .", "question_id": 1992}
{"snippet": "queue.put(obj, block)", "intent": "Put `obj` into the queue . If the optional argument `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 6201}
{"snippet": "message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . With arguments `param`.", "question_id": 3000}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "email.encoders.encode_noop(msg)", "intent": "This does nothing ; it doesn \u2019 t even set the Content-Transfer-Encoding header . With arguments `msg`.", "question_id": 3072}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "lock.acquire(blocking=True, timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10378}
{"snippet": "SSLContext.wrap_socket(sock)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) .", "question_id": 9022}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}
{"snippet": "os.getgrouplist(user, group)", "intent": "Return list of `group` ids that `user` belongs to .", "question_id": 6677}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "Node.toprettyxml(indent=\"\\t\", newl=\"\\n\")", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n .", "question_id": 12417}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "lazy_loader.factory(loader)", "intent": "A static method which returns a callable that creates a lazy `loader` .", "question_id": 4944}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "mock.assert_has_calls(calls)", "intent": "assert the mock has been called with the specified `calls` .", "question_id": 11575}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "connection.backup(target, progress=None, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8837}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966}
{"snippet": "winreg.CreateKeyEx(key, sub_key, reserved=0, access=KEY_WRITE)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `reserved` is a reserved integer , and must be zero . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12126}
{"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}
{"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "test.support.swap_attr(obj, attr, new_val)", "intent": "Context manager to swap out an attribute with a new object . If `attr` doesn \u2019 t exist on `obj` , it will be created and then deleted at the end of the block . With arguments `new_val`.", "question_id": 10194}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "HTTPConnection.request(method, url, body=None, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4432}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "gettext.gettext(message)", "intent": "Return the localized translation of `message` , based on the current global domain , language , and locale directory .", "question_id": 4216}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578}
{"snippet": "IMAP4.status(mailbox, names)", "intent": "Request named status conditions for `mailbox` . With arguments `names`.", "question_id": 4744}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "message.set_type(type)", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3013}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "element_tree.find(match, namespaces=None)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`, `namespaces`.", "question_id": 12513}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "bdb.break_anywhere(frame)", "intent": "This method checks if there is a breakpoint in the filename of the current `frame` .", "question_id": 779}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively . If the `buffer_size` is omitted it defaults to DEFAULT_BUFFER_SIZE .", "question_id": 5131}
{"snippet": "FTP.retrlines(cmd)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "question_id": 3930}
{"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1693}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "sys.setcheckinterval(interval)", "intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "question_id": 9834}
{"snippet": "test_case.assertIsNot(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11385}
{"snippet": "asyncio.wait(aws)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` .", "question_id": 607}
{"snippet": "pprint.pformat(object, indent=1)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7634}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "Popen.send_signal(signal)", "intent": "Sends the `signal` signal to the child .", "question_id": 9616}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2845}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "traceback.print_last(chain=True)", "intent": "This is a shorthand for print_exception ( sys.last_type , sys.last_value , sys.last_traceback , `limit` , `file` , `chain` ) .", "question_id": 10756}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "asyncio.open_connection(port=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `port`.", "question_id": 465}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "ipaddress.AddressValueError(ValueError)", "intent": "Any value error related to the address . With arguments `ValueError`.", "question_id": 5237}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "base64.a85decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 741}
{"snippet": "test.support.bind_port(sock)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`.", "question_id": 10258}
{"snippet": "Path.rglob(pattern)", "intent": "This is like calling Path.glob ( ) with \u201c **/ \u201d added in front of the given relative `pattern` :", "question_id": 7312}
{"snippet": "urllib.parse.urlsplit(urlstring, scheme='')", "intent": "This is similar to urlparse ( ) , but does not split the params from the URL . With arguments `urlstring`, `scheme`.", "question_id": 11691}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "loop.getaddrinfo(host, port, type=0, proto=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `type`, `proto`.", "question_id": 297}
{"snippet": "urllib.request.ProxyHandler(proxies=None)", "intent": "Cause requests to go through a proxy . If `proxies` is given , it must be a dictionary mapping protocol names to URLs of proxies .", "question_id": 11785}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "urllib.request.urlretrieve(url, filename=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11886}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds)", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "question_id": 1702}
{"snippet": "bdb.stop_here(frame)", "intent": "This method checks if the `frame` is somewhere below botframe in the call stack .", "question_id": 777}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "profile.runcall(func, *args, **kwargs)", "intent": "Profile `func` ( `*args` , `**kwargs` )", "question_id": 7687}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "SubprocessTransport.get_pipe_transport(fd)", "intent": "Return the transport for the communication pipe corresponding to the integer file descriptor `fd` :", "question_id": 420}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "bisect.insort_right(a, x, lo=0, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`, `hi`.", "question_id": 871}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `access` may be specified in lieu of flags and prot as an optional keyword parameter .", "question_id": 5995}
{"snippet": "crypt.crypt(word, salt=None)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "question_id": 1675}
{"snippet": "pdb.Pdb(completekey='tab')", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7342}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634}
{"snippet": "frozenset(iterable)", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4023}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739}
{"snippet": "scheduler.enterabs(time, priority, action, argument=(), kwargs={})", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "question_id": 8121}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}
{"snippet": "calendar.prcal(year, l=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "question_id": 1009}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "multiprocessing.connection.deliver_challenge(connection, authkey)", "intent": "Send a randomly generated message to the other end of the `connection` and wait for a reply . If the reply matches the digest of the message using `authkey` as the key then a welcome message is sent to the other end of the connection .", "question_id": 6366}
{"snippet": "Path.replace(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7309}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}
{"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, dict_type=collections.OrderedDict)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `dict_type`.", "question_id": 1571}
{"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250}
{"snippet": "sniffer.sniff(sample, delimiters=None)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found . If the optional `delimiters` parameter is given , it is interpreted as a string containing possible valid delimiter characters .", "question_id": 1716}
{"snippet": "operator.__le__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6520}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "email.headerregistry.Address(username='', domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3194}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "operator.__eq__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6521}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "pty.spawn(argv, master_read, stdin_read)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . The functions `master_read` and `stdin_read` are passed a file descriptor which they should read from , and they should always return a byte string . With arguments `argv`.", "question_id": 7700}
{"snippet": "generator.clone(fp)", "intent": "Return an independent clone of this Generator instance with the exact same options , and `fp` as the new outfp .", "question_id": 3104}
{"snippet": "cgi.parse_qs(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1039}
{"snippet": "BaseProtocol.connection_made(transport)", "intent": "Called when a connection is made . The `transport` argument is the transport representing the connection .", "question_id": 431}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "winreg.OpenKey(key, sub_key, access=KEY_READ)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12140}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, decode_data=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `decode_data` and enable_SMTPUTF8 can not be set to True at the same time .", "question_id": 8431}
{"snippet": "dataclasses.field(compare=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "question_id": 2173}
{"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "help(object)", "intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "question_id": 4030}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "ssl.wrap_socket(sock)", "intent": "Takes an instance `sock` of socket.socket , and returns an instance of ssl.SSLSocket , a subtype of socket.socket , which wraps the underlying socket in an SSL context .", "question_id": 8901}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660}
{"snippet": "Request.remove_header(header)", "intent": "Remove named `header` from the request instance ( both from regular and unredirected headers ) .", "question_id": 11828}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "threading.Timer(interval, function, args=None, kwargs=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10415}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869}
{"snippet": "IMAP4.setannotation(mailbox, entry, attribute)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`, `attribute`.", "question_id": 4735}
{"snippet": "bytes.rpartition(sep)", "intent": "Split the sequence at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9323}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457}
{"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h')", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5471}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1', short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12664}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "doc_test_runner.run(test, clear_globs=True)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . If `clear_globs` is true ( the default ) , then this namespace will be cleared after the test runs , to help with garbage collection .", "question_id": 2876}
{"snippet": "shutil.chown(path, user=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8342}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511}
{"snippet": "SubprocessTransport.get_pipe_transport(fd)", "intent": "Return the transport for the communication pipe corresponding to the integer file descriptor `fd` :", "question_id": 420}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "fileinput.input(files=None, backup='')", "intent": "Create an instance of the FileInput class . With arguments `files`, `backup`.", "question_id": 3790}
{"snippet": "dis.stack_effect(opcode, oparg)", "intent": "Compute the stack effect of `opcode` with argument `oparg` .", "question_id": 2731}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "io.FileIO(name, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener .", "question_id": 5102}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "CGIXMLRPCRequestHandler.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request ; the return value is returned to the client as the result .", "question_id": 12744}
{"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "socket.recvfrom_into(buffer)", "intent": "Receive data from the socket , writing it into `buffer` instead of creating a new bytestring .", "question_id": 8713}
{"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "os.link(src, dst, follow_symlinks=True)", "intent": "Create a hard link pointing to `src` named `dst` . With arguments `follow_symlinks`.", "question_id": 6853}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "itertools.count(start=0)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "question_id": 5247}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "msilib.Feature(db, id, title, desc, display, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6117}
{"snippet": "decimal.fma(other, third, context=None)", "intent": "Fused multiply-add . With arguments `other`, `third`, `context`.", "question_id": 2416}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "ast.iter_fields(node)", "intent": "Yield a tuple of ( fieldname , value ) for each field in node._fields that is present on `node` .", "question_id": 156}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "question_id": 1703}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "doctest.UnexpectedException(test, example, exc_info)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` raised an unexpected exception . With arguments `test`, `exc_info`.", "question_id": 2906}
{"snippet": "tkinter.tix.Tk(className='Tix')", "intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `className`.", "question_id": 10547}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "pty.spawn(argv, master_read, stdin_read)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . The functions `master_read` and `stdin_read` are passed a file descriptor which they should read from , and they should always return a byte string . With arguments `argv`.", "question_id": 7700}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "code.interact(readfunc=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . This creates a new instance of InteractiveConsole and sets `readfunc` to be used as the InteractiveConsole.raw_input ( ) method , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1169}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdin`.", "question_id": 322}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324}
{"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout .", "question_id": 12659}
{"snippet": "turtle.turtlesize(outline=None)", "intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "question_id": 10997}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "telnetlib.Telnet(timeout, port=0)", "intent": "Telnet represents a connection to a Telnet server . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . Alternatively , the `host` name and optional `port` number can be passed to the constructor too , in which case the connection to the server will be established before the constructor returns .", "question_id": 10003}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "counter.fromkeys(iterable)", "intent": "This class method is not implemented for Counter objects . With arguments `iterable`.", "question_id": 1347}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "curses.qiflush(flag)", "intent": "If `flag` is False , the effect is the same as calling noqiflush ( ) .", "question_id": 1969}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "pprint.PrettyPrinter(depth=None)", "intent": "Construct a PrettyPrinter instance . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7626}
{"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930}
{"snippet": "quit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1609}
{"snippet": "http.client.HTTPResponse(sock)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`.", "question_id": 4402}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "email.encoders.encode_base64(msg)", "intent": "Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64 . With arguments `msg`.", "question_id": 3070}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "gzip.GzipFile(filename=None, compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4289}
{"snippet": "timer.repeat(number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) .", "question_id": 10513}
{"snippet": "cgitb.html(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1072}
{"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748}
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}
{"snippet": "subprocess.call(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9664}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11132}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "test_case.assertAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11420}
{"snippet": "window.attrset(attr)", "intent": "Set the \u201c background \u201d set of attributes to `attr` .", "question_id": 2014}
{"snippet": "dialog.text(name, x, y, width, height, attributes, text)", "intent": "Add and return a Text control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `text`.", "question_id": 6137}
{"snippet": "operator.__eq__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6521}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, defaults=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `defaults`.", "question_id": 1570}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6047}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3754}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}
{"snippet": "test_suite.addTests(tests)", "intent": "Add all the `tests` from an iterable of TestCase and TestSuite instances to this test suite .", "question_id": 11484}
{"snippet": "message.set_type(type, header='Content-Type', requote=True)", "intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "question_id": 3016}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "ctypes.wstring_at(address, size=-1)", "intent": "This function returns the wide character string starting at memory `address` address as a string . If `size` is specified , it is used as the number of characters of the string , otherwise the string is assumed to be zero-terminated .", "question_id": 1841}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "proxy[key]", "intent": "Return the item of the underlying mapping with key key.", "question_id": 11208}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "turtle.turtlesize(outline=None)", "intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "question_id": 10997}
{"snippet": "IMAP4.status(mailbox, names)", "intent": "Request named status conditions for `mailbox` . With arguments `names`.", "question_id": 4744}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "urllib.parse.quote_from_bytes(bytes, safe='/')", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding . With arguments `safe`.", "question_id": 11722}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "asyncio.open_unix_connection(limit=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `limit`.", "question_id": 486}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "math.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 5895}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11132}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "datetime.time(hour=0)", "intent": "All arguments are optional . With arguments `hour`.", "question_id": 2315}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "gettext.find(domain, localedir=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4226}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "ftplib.FTP(host='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made .", "question_id": 3879}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "Document.createProcessingInstruction(target, data)", "intent": "Create and return a processing instruction node containing the `target` and `data` passed as parameters .", "question_id": 12349}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "_thread.start_new_thread(function, args, kwargs)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "question_id": 12943}
{"snippet": "faulthandler.register(signum)", "intent": "Register a user signal : install a handler for the `signum` signal to dump the traceback of all threads , or of the current thread if `all_threads` is False , into `file` .", "question_id": 3731}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "calendar.prmonth(theyear, themonth, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 995}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12239}
{"snippet": "loop.start_tls(transport, protocol, sslcontext)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "question_id": 264}
{"snippet": "element.findall(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12493}
{"snippet": "patch.multiple(target, **kwargs, create=False)", "intent": "Perform multiple patches in a single call . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11634}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "timeit.repeat(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10492}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "http.client.HTTPResponse(sock, url=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `url`.", "question_id": 4405}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615}
{"snippet": "importlib.resources.open_binary(package, resource)", "intent": "Open for binary reading the `resource` within `package` .", "question_id": 4852}
{"snippet": "plistlib.load(fp, fmt=None, use_builtin_types=True)", "intent": "Read a plist file . `fp` should be a readable and binary file object . The `fmt` is the format of the file and the following values are valid : If `use_builtin_types` is true ( the default ) binary data will be returned as instances of bytes , otherwise it is returned as instances of Data .", "question_id": 7551}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1693}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "message.set_type(type, header='Content-Type', requote=True)", "intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "question_id": 3016}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12454}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2641}
{"snippet": "decimal.compare_total(other)", "intent": "Compare two operands using their abstract representation rather than their numerical value . With arguments `other`.", "question_id": 2403}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}
{"snippet": "generator.clone(fp)", "intent": "Return an independent clone of this Generator instance with the exact same options , and `fp` as the new outfp .", "question_id": 3104}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "os.posix_fadvise(fd, offset, len, advice)", "intent": "Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations . The `advice` applies to the region of the file specified by `fd` starting at `offset` and continuing for `len` bytes .", "question_id": 6776}
{"snippet": "loader.exec_module(module)", "intent": "An abstract method that executes the `module` in its own namespace when a module is imported or reloaded .", "question_id": 4815}
{"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 49}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "fileinput.FileInput(files=None)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `files`.", "question_id": 3801}
{"snippet": "BaseCookie.value_encode(val)", "intent": "Return a tuple ( real_value , coded_value ) . `val` can be any type , but coded_value will always be converted to a string .", "question_id": 4583}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "bdb.user_line(frame)", "intent": "This method is called from dispatch_line ( ) when either stop_here ( ) or break_here ( ) yields True . With arguments `frame`.", "question_id": 781}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'EmailMessage'>`.", "question_id": 3063}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . `session` , see session .", "question_id": 9031}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "@test.support.anticipate_failure(condition)", "intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "question_id": 10208}
{"snippet": "multiprocessing.connection.deliver_challenge(connection, authkey)", "intent": "Send a randomly generated message to the other end of the `connection` and wait for a reply . If the reply matches the digest of the message using `authkey` as the key then a welcome message is sent to the other end of the connection .", "question_id": 6366}
{"snippet": "urllib.parse.urlencode(query, errors=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11736}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "loop.run_until_complete(future)", "intent": "Run until the `future` ( an instance of Future ) has completed .", "question_id": 182}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "str(object=b'', errors='strict')", "intent": "Return a str version of `object` . With arguments `errors`.", "question_id": 4120}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multithread=True)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes . With arguments `multithread`.", "question_id": 12243}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "sysconfig.get_path(name, scheme, vars, expand)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) . get_path ( ) will use the variables returned by get_config_vars ( ) to `expand` the path .", "question_id": 9862}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "logging.FileHandler(filename, mode='a', delay=False)", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . If `delay` is true , then file opening is deferred until the first call to emit ( ) . With arguments `filename`.", "question_id": 5431}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "faulthandler.unregister(signum)", "intent": "Unregister a user signal : uninstall the handler of the `signum` signal installed by register ( ) .", "question_id": 3739}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "pdb.Pdb(stdout=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7344}
{"snippet": "msvcrt.get_osfhandle(fd)", "intent": "Return the file handle for the file descriptor `fd` .", "question_id": 6154}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None, is_package=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g . With arguments `is_package`.", "question_id": 4917}
{"snippet": "pprint.pformat(object, depth=None)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7636}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "dataclasses.field(repr=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `repr`.", "question_id": 2170}
{"snippet": "ctypes.Union(*args, **kw)", "intent": "Abstract base class for unions in native byte order . With arguments `*args`, `**kw`.", "question_id": 1886}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "hashlib.new(name, data)", "intent": "Is a generic constructor that takes the string `name` of the desired algorithm as its first parameter . With arguments `data`.", "question_id": 4297}
{"snippet": "os.pread(fd, n, offset)", "intent": "Read at most `n` bytes from file descriptor `fd` at a position of `offset` , leaving the file offset unchanged .", "question_id": 6783}
{"snippet": "urllib.request.urlopen(url, data=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "question_id": 11753}
{"snippet": "TarFile.add(name, arcname=None, recursive=True)", "intent": "Add the file `name` to the archive . If given , `arcname` specifies an alternative name for the file in the archive . This can be avoided by setting `recursive` to False .", "question_id": 9953}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "tempfile.NamedTemporaryFile(dir=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `dir`.", "question_id": 10050}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "winreg.CreateKeyEx(key, sub_key, reserved=0, access=KEY_WRITE)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `reserved` is a reserved integer , and must be zero . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12126}
{"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254}
{"snippet": "style.theme_create(themename, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10688}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "concurrent.futures.as_completed(fs)", "intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) .", "question_id": 1484}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "warnings.warn(message, category=None)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning .", "question_id": 12000}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer)", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp .", "question_id": 1297}
{"snippet": "compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3999}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "test.support.requires(resource)", "intent": "Raise ResourceDenied if `resource` is not available .", "question_id": 10147}
{"snippet": "style.theme_create(themename, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10688}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902}
{"snippet": "operator.__ge__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6523}
{"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "codecs.lookup(encoding)", "intent": "Looks up the codec info in the Python codec registry and returns a CodecInfo object as defined below . With arguments `encoding`.", "question_id": 1200}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "breakpoint.bpprint(out=None)", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 767}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "tarfile.open(**kwargs)", "intent": "Return a TarFile object for the pathname `name` . With arguments `**kwargs`.", "question_id": 9890}
{"snippet": "loop.getnameinfo(sockaddr, flags=0)", "intent": "Asynchronous version of socket.getnameinfo ( ) . With arguments `sockaddr`, `flags`.", "question_id": 300}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777}
{"snippet": "FileCookieJar.load(filename=None)", "intent": "Load cookies from a file . With arguments `filename`.", "question_id": 4507}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "doctest.DocTestFinder(verbose=False, recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2846}
{"snippet": "ZipFile.read(name, pwd=None)", "intent": "Return the bytes of the file `name` in the archive . `pwd` is the password used for encrypted files and , if specified , it will override the default password set with setpassword ( ) .", "question_id": 12829}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "inspect_loader.exec_module(module)", "intent": "Implementation of Loader.exec_module ( ) . With arguments `module`.", "question_id": 4831}
{"snippet": "element.findall(match, namespaces=None)", "intent": "Finds all matching subelements , by tag name or path . `namespaces` is an optional mapping from namespace prefix to full name . With arguments `match`.", "question_id": 12494}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296}
{"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "multiprocessing.Process(args=())", "intent": "Process objects represent activity that is run in a separate process . `args` is the argument tuple for the target invocation .", "question_id": 6169}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "sys._getframe(depth)", "intent": "Return a frame object from the call stack . If optional integer `depth` is given , return the frame object that many calls below the top of the stack .", "question_id": 9805}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "Popen.send_signal(signal)", "intent": "Sends the `signal` signal to the child .", "question_id": 9616}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11502}
{"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438}
{"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "raw_io_base.read(size=-1)", "intent": "Read up to `size` bytes from the object and return them .", "question_id": 5085}
{"snippet": "os.waitpid(pid, options)", "intent": "The details of this function differ on Unix and Windows . On Unix : Wait for completion of a child process given by process id `pid` , and return a tuple containing its process id and exit status indication ( encoded as for wait ( ) ) . The semantics of the call are affected by the value of the integer `options` , which should be 0 for normal operation .", "question_id": 7082}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12226}
{"snippet": "cmd.Cmd(stdin=None, stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1133}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171}
{"snippet": "exit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1611}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "subprocess.call(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9663}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0, hStdInput=None)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`, `hStdInput`.", "question_id": 9632}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "base_manager.register(typeid, callable, proxytype)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid .", "question_id": 6291}
{"snippet": "bz2.open(filename, mode='r', encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 883}
{"snippet": "urllib.request.Request(url, data=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed .", "question_id": 11769}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "FileHandler.file_open(req)", "intent": "Open the file locally , if there is no host name , or the host name is 'localhost ' . With arguments `req`.", "question_id": 11873}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "time.replace(hour=self.hour, minute=self.minute)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`, `minute`.", "question_id": 2341}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "bytes.lstrip(chars)", "intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "question_id": 9343}
{"snippet": "os.utime(path, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` .", "question_id": 6968}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "loop.getaddrinfo(host, port, family=0, flags=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `flags`.", "question_id": 296}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "http.client.HTTPResponse(sock, debuglevel=0, url=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `debuglevel`, `url`.", "question_id": 4407}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "turtle.tracer(n=None, delay=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11061}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "directory.add_file(file, language=None)", "intent": "Add a `file` to the current component of the directory , starting a new one if there is no current component . Optionally , a `version` and a `language` can be specified for the entry in the File table .", "question_id": 6106}
{"snippet": "msilib.Feature(db, id, title, desc, display, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6118}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}
{"snippet": "calendar.prcal(year, l=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "question_id": 1009}
{"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "calendar.LocaleTextCalendar(locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 979}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "Request.add_unredirected_header(key, header)", "intent": "Add a `header` that will not be added to a redirected request . With arguments `key`.", "question_id": 11826}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "dis.disassemble(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2719}
{"snippet": "pprint.pformat(object, compact=False)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7637}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8351}
{"snippet": "prototype(address)", "intent": "Returns a foreign function at the specified `address` which must be an integer .", "question_id": 1801}
{"snippet": "socket.recv(bufsize)", "intent": "Receive data from the socket . The maximum amount of data to be received at once is specified by `bufsize` .", "question_id": 8702}
{"snippet": "loop.getaddrinfo(host, port, family=0, type=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `type`.", "question_id": 294}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "shelve.Shelf(dict, writeback=False, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8250}
{"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}
{"snippet": "heapq.heappop(heap)", "intent": "Pop and return the smallest item from the `heap` , maintaining the heap invariant .", "question_id": 4317}
{"snippet": "window.addnstr(y, x, str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2007}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "loop.call_exception_handler(context)", "intent": "Call the current event loop exception handler . `context` is a dict object containing the following keys ( new keys may be introduced in future Python versions ) :", "question_id": 310}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "turtle.lt(angle)", "intent": "Turn turtle left by `angle` units .", "question_id": 10911}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1709}
{"snippet": "importlib.resources.open_text(package, resource)", "intent": "Open for text reading the `resource` within `package` .", "question_id": 4853}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10975}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, enable_SMTPUTF8=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `enable_SMTPUTF8` determines whether the SMTPUTF8 extension ( as defined in RFC 6531 ) should be enabled .", "question_id": 8430}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "xml.etree.ElementTree.fromstringlist(sequence, parser=None)", "intent": "Parses an XML document from a `sequence` of string fragments . `parser` is an optional parser instance .", "question_id": 12440}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "bytes_parser.parsebytes(bytes)", "intent": "Similar to the parse ( ) method , except it takes a bytes-like object instead of a file-like object . Calling this method on a bytes-like object is equivalent to wrapping `bytes` in a BytesIO instance first and calling parse ( ) .", "question_id": 3378}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004}
{"snippet": "window.addnstr(y, x, str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2007}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, domain: int=None)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `domain: int`.", "question_id": 10859}
{"snippet": "test_case.assertIsNot(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11385}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "directory.start_component(component=None, feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6099}
{"snippet": "importlib.util.LazyLoader(loader)", "intent": "A class which postpones the execution of the `loader` of a module until the module has an attribute accessed .", "question_id": 4943}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "@unittest.skip(reason)", "intent": "Unconditionally skip the decorated test . `reason` should describe why the test is being skipped .", "question_id": 11358}
{"snippet": "test.support.import_fresh_module(name, deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10245}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "gettext.find(domain, localedir=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4226}
{"snippet": "base_http_request_handler.send_header(keyword, value)", "intent": "Adds the HTTP header to an internal buffer which will be written to the output stream when either end_headers ( ) or flush_headers ( ) is invoked . `keyword` should specify the header keyword , with `value` specifying its value .", "question_id": 4643}
{"snippet": "modulefinder.ModuleFinder(debug=0, excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6033}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "pickletools.dis(pickle, out=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7416}
{"snippet": "pickletools.dis(pickle, out=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7416}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "calendar.isleap(year)", "intent": "Returns True if `year` is a leap year , otherwise False .", "question_id": 987}
{"snippet": "heapq.heappushpop(heap, item)", "intent": "Push `item` on the `heap` , then pop and return the smallest item from the heap .", "question_id": 4318}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11129}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "binascii.b2a_qp(data, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 831}
{"snippet": "pkgutil.walk_packages(path=None, onerror=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "question_id": 7454}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "SubprocessProtocol.pipe_connection_lost(fd, exc)", "intent": "Called when one of the pipes communicating with the child process is closed . `fd` is the integer file descriptor that was closed . With arguments `exc`.", "question_id": 443}
{"snippet": "Path.symlink_to(target)", "intent": "Make this path a symbolic link to `target` .", "question_id": 7315}
{"snippet": "tempfile.TemporaryFile(dir=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `dir` , `prefix` and `suffix` parameters have the same meaning and defaults as with mkstemp ( ) .", "question_id": 10040}
{"snippet": "concurrent.futures.wait(fs, return_when=ALL_COMPLETED)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `return_when` indicates when this function should return .", "question_id": 1482}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "@unittest.skipUnless(condition, reason)", "intent": "Skip the decorated test unless `condition` is true . With arguments `reason`.", "question_id": 11360}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "unicodedata.decimal(chr)", "intent": "Returns the decimal value assigned to the character `chr` as integer .", "question_id": 11344}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "compileall.compile_dir(dir, quiet=0)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `quiet` is False or 0 ( the default ) , the filenames and other information are printed to standard out .", "question_id": 1414}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903}
{"snippet": "ssl.wrap_socket(sock)", "intent": "Takes an instance `sock` of socket.socket , and returns an instance of ssl.SSLSocket , a subtype of socket.socket , which wraps the underlying socket in an SSL context .", "question_id": 8901}
{"snippet": "datetime.time(second=0)", "intent": "All arguments are optional . With arguments `second`.", "question_id": 2317}
{"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "window.addch(y, x, ch, attr)", "intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2002}
{"snippet": "IMAP4.select(mailbox='INBOX', readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4732}
{"snippet": "fraction.from_decimal(dec)", "intent": "This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .", "question_id": 3870}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "lzma.open(filename, check=-1)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5659}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "fileinput.FileInput(mode='r')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With `mode` you can specify which file mode will be passed to open ( ) .", "question_id": 3805}
{"snippet": "ZipFile.read(name, pwd=None)", "intent": "Return the bytes of the file `name` in the archive . `pwd` is the password used for encrypted files and , if specified , it will override the default password set with setpassword ( ) .", "question_id": 12829}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10975}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='', vminfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7493}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10975}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "pprint.pprint(object, stream=None)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline .", "question_id": 7644}
{"snippet": "csv.register_dialect(name, dialect)", "intent": "Associate `dialect` with `name` .", "question_id": 1685}
{"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}
{"snippet": "logging.setLoggerClass(klass)", "intent": "Tells the logging system to use the class `klass` when instantiating a logger .", "question_id": 5651}
{"snippet": "wsgiref.util.request_uri(environ, include_query=True)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . If `include_query` is false , the query string is not included in the resulting URI . With arguments `environ`.", "question_id": 12212}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "iter(proxy)", "intent": "Return an iterator over the keys of the underlying mapping . With arguments `proxy`.", "question_id": 11209}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "traceback.print_stack(f=None, file=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "question_id": 10766}
{"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}
{"snippet": "glob.glob(pathname)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification .", "question_id": 4264}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "platform.libc_ver(lib='', chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7546}
{"snippet": "email.encoders.encode_base64(msg)", "intent": "Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64 . With arguments `msg`.", "question_id": 3070}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12225}
{"snippet": "HTMLParser.handle_startendtag(tag, attrs)", "intent": "Similar to handle_starttag ( ) , but called when the parser encounters an XHTML-style empty `tag` ( < img ... / > ) . With arguments `attrs`.", "question_id": 4358}
{"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0, cond=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.", "question_id": 758}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "ctypes.wstring_at(address, size=-1)", "intent": "This function returns the wide character string starting at memory `address` address as a string . If `size` is specified , it is used as the number of characters of the string , otherwise the string is assumed to be zero-terminated .", "question_id": 1841}
{"snippet": "turtle.RawPen(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11159}
{"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930}
{"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "joinable_queue.send_bytes(buffer)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` .", "question_id": 6238}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', _subparts=None)", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . `_subparts` is a sequence of initial subparts for the payload . With arguments `**_params`.", "question_id": 3322}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761}
{"snippet": "dataclasses.field(hash=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `hash`.", "question_id": 2171}
{"snippet": "email_message.set_param(param, value, header='Content-Type', language='')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . If the value contains non-ASCII characters , the `charset` and `language` may be explicitly specified using the optional charset and language parameters . With arguments `param`.", "question_id": 3268}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}
{"snippet": "typing.Deque(deque, MutableSequenceT)", "intent": "A generic version of collections.deque . With arguments `deque`, `MutableSequenceT`.", "question_id": 11268}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "random.lognormvariate(mu, sigma)", "intent": "Log normal distribution . If you take the natural logarithm of this distribution , you \u2019 ll get a normal distribution with mean `mu` and standard deviation `sigma` .", "question_id": 7913}
{"snippet": "os.popen(cmd, mode='r')", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' .", "question_id": 7042}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184}
{"snippet": "pickle.dumps(obj, fix_imports=True)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7369}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "ctypes.LittleEndianStructure(*args, **kw)", "intent": "Abstract base class for structures in little endian byte order . With arguments `*args`, `**kw`.", "question_id": 1888}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`.", "question_id": 59}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdout=None)", "intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`.", "question_id": 525}
{"snippet": "os.utime(path, ns, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6960}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}
{"snippet": "control.event(event, argument, condition=1)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`.", "question_id": 6127}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "View.Modify(kind, data)", "intent": "Modify the view , by calling MsiViewModify ( ) . `kind` can be one of MSIMODIFY_SEEK , MSIMODIFY_REFRESH , MSIMODIFY_INSERT , MSIMODIFY_UPDATE , MSIMODIFY_ASSIGN , MSIMODIFY_REPLACE , MSIMODIFY_MERGE , MSIMODIFY_DELETE , MSIMODIFY_INSERT_TEMPORARY , MSIMODIFY_VALIDATE , MSIMODIFY_VALIDATE_NEW , MSIMODIFY_VALIDATE_FIELD , or MSIMODIFY_VALIDATE_DELETE . `data` must be a record describing the new data .", "question_id": 6075}
{"snippet": "lzma_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 5699}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}
{"snippet": "bisect.insort_right(a, x, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `hi`.", "question_id": 870}
{"snippet": "calendar.itermonthdays3(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 915}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "dbm.whichdb(filename)", "intent": "This function attempts to guess which of the several simple database modules available \u2014 dbm.gnu , dbm.ndbm or dbm.dumb \u2014 should be used to open a given file . With arguments `filename`.", "question_id": 2365}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "slice(start, stop, step)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4106}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "HTTPRedirectHandler.http_error_302(req, fp, code, msg, hdrs)", "intent": "The same as http_error_301 ( ) , but called for the \u2018 found \u2019 response . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11852}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831}
{"snippet": "email.encoders.encode_noop(msg)", "intent": "This does nothing ; it doesn \u2019 t even set the Content-Transfer-Encoding header . With arguments `msg`.", "question_id": 3072}
{"snippet": "warnings.simplefilter(action, category=Warning, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `append`.", "question_id": 12038}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10971}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761}
{"snippet": "subprocess.Popen(args, bufsize=-1)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `bufsize` will be supplied as the corresponding argument to the open ( ) function when creating the stdin/stdout/stderr pipe file objects :", "question_id": 9600}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196}
{"snippet": "callable(object)", "intent": "Return True if the `object` argument appears callable , False if not .", "question_id": 3989}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "tree_builder.end(tag)", "intent": "Closes the current element . `tag` is the element name .", "question_id": 12543}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "ctypes.CFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the standard C calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1792}
{"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "sniffer.sniff(sample, delimiters=None)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found . If the optional `delimiters` parameter is given , it is interpreted as a string containing possible valid delimiter characters .", "question_id": 1716}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "curses.resizeterm(nlines, ncols)", "intent": "Resize the standard and current windows to the specified dimensions , and adjusts other bookkeeping data used by the curses library that record the window dimensions ( in particular the SIGWINCH handler ) . With arguments `nlines`, `ncols`.", "question_id": 1976}
{"snippet": "ipaddress.AddressValueError(ValueError)", "intent": "Any value error related to the address . With arguments `ValueError`.", "question_id": 5237}
{"snippet": "asyncio.BoundedSemaphore(value=1)", "intent": "A bounded semaphore object . Bounded Semaphore is a version of Semaphore that raises a ValueError in release ( ) if it increases the internal counter above the initial `value` .", "question_id": 589}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "gzip.open(filename, newline=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4277}
{"snippet": "telnetlib.Telnet(port=0)", "intent": "Telnet represents a connection to a Telnet server . Alternatively , the `host` name and optional `port` number can be passed to the constructor too , in which case the connection to the server will be established before the constructor returns .", "question_id": 10007}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "locale.format_string(format, val, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5386}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "buffered_io_base.read1(size)", "intent": "Read and return up to `size` bytes , with at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "question_id": 5094}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "Telnet.open(host, port=0)", "intent": "Connect to a `host` . The optional second argument is the `port` number , which defaults to the standard Telnet port ( 23 ) .", "question_id": 10021}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334}
{"snippet": "os.set_handle_inheritable(handle, inheritable)", "intent": "Set the \u201c `inheritable` \u201d flag of the specified `handle` .", "question_id": 6819}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, target=None)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If no `target` is specified , the target will need to be set using setTarget ( ) before this handler does anything useful .", "question_id": 5533}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "calendar.itermonthdays3(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 915}
{"snippet": "buffered_io_base.read(size=-1)", "intent": "Read and return up to `size` bytes .", "question_id": 5093}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "asyncio.wrap_future(future, loop=None)", "intent": "Wrap a concurrent.futures.Future object in a asyncio.Future object . With arguments `future`, `loop`.", "question_id": 358}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "codecs.decode(obj)", "intent": "Decodes `obj` using the codec registered for `encoding` .", "question_id": 1196}
{"snippet": "logging.disable(level=CRITICAL)", "intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "question_id": 5645}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "json.JSONEncoder(skipkeys=False, ensure_ascii=True)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped .", "question_id": 5331}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "calendar.timegm(tuple)", "intent": "An unrelated but handy function that takes a time `tuple` such as returned by the gmtime ( ) function in the time module , and returns the corresponding Unix timestamp value , assuming an epoch of 1970 , and the POSIX encoding .", "question_id": 1021}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}
{"snippet": "os.read(fd, n)", "intent": "Read at most `n` bytes from file descriptor `fd` .", "question_id": 6793}
{"snippet": "help(object)", "intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "question_id": 4030}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "json.dumps(obj, **kw, cls=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `cls`.", "question_id": 5285}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False)", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10970}
{"snippet": "calendar.prcal(year, l=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `m`.", "question_id": 1010}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "platform.architecture(bits='', linkage='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7464}
{"snippet": "turtle.backward(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10907}
{"snippet": "gettext.install(domain, names=None)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) . For the `names` parameter , please see the description of the translation object \u2019 s install ( ) method .", "question_id": 4242}
{"snippet": "text_io_base.seek(offset, whence=SEEK_SET)", "intent": "Change the stream position to the given `offset` . Behaviour depends on the `whence` parameter .", "question_id": 5143}
{"snippet": "element_tree.find(match)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`.", "question_id": 12512}
{"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "os.link(src, dst, src_dir_fd=None)", "intent": "Create a hard link pointing to `src` named `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors , and not following symlinks .", "question_id": 6851}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "DOMImplementation.hasFeature(feature, version)", "intent": "Return true if the `feature` identified by the pair of strings feature and `version` is implemented .", "question_id": 12311}
{"snippet": "os.utime(path, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` .", "question_id": 6968}
{"snippet": "io.FileIO(name, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener .", "question_id": 5102}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11129}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "quit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1609}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "mailbox.MH(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in MH format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5777}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "os.lseek(fd, pos, how)", "intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "question_id": 6734}
{"snippet": "tkinter.Tcl(className='Tk')", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `className`.", "question_id": 10530}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "turtle.write(arg, 8, \"normal\"), font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10972}
{"snippet": "inspect.getattr_static(obj, attr, default=None)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.", "question_id": 5035}
{"snippet": "IMAP4.starttls(ssl_context=None)", "intent": "Send a STARTTLS command . The `ssl_context` argument is optional and should be a ssl.SSLContext object .", "question_id": 4743}
{"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}
{"snippet": "window.timeout(delay)", "intent": "Set blocking or non-blocking read behavior for the window . If `delay` is negative , blocking read is used ( which will wait indefinitely for input ) .", "question_id": 2124}
{"snippet": "directory.start_component(component=None, feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6099}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6047}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "lzma.LZMAFile(filters=None)", "intent": "Open an LZMA-compressed file in binary `mode` . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5672}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0, hStdOutput=None)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`, `hStdOutput`.", "question_id": 9633}
{"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "bisect.insort_right(a, x, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `hi`.", "question_id": 870}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "Wave_write.setcomptype(type, name)", "intent": "Set the compression `type` and description . With arguments `name`.", "question_id": 12069}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}
{"snippet": "os.getsid(pid)", "intent": "Call the system call getsid ( ) . With arguments `pid`.", "question_id": 6704}
{"snippet": "pickletools.dis(pickle, memo=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler .", "question_id": 7417}
{"snippet": "bytes(source)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`.", "question_id": 3987}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "binary.encode(out)", "intent": "Write the XML-RPC base 64 encoding of this binary item to the `out` stream object .", "question_id": 12688}
{"snippet": "sniffer.sniff(sample, delimiters=None)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found . If the optional `delimiters` parameter is given , it is interpreted as a string containing possible valid delimiter characters .", "question_id": 1716}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "optparse.OptionGroup(parser, title, description=None)", "intent": "where With arguments `parser`, `title`, `description`.", "question_id": 6617}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\")", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`, `subtype`.", "question_id": 3040}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp . With arguments `errors`.", "question_id": 1298}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}
{"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "doctest.UnexpectedException(test, example, exc_info)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` raised an unexpected exception . With arguments `test`, `exc_info`.", "question_id": 2906}
{"snippet": "turtle.RawPen(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11159}
{"snippet": "OpenerDirector.open(url, timeout)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "question_id": 11835}
{"snippet": "pickle.dump(obj, file)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file .", "question_id": 7363}
{"snippet": "bytes()", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added :", "question_id": 9260}
{"snippet": "codecs.open(filename, mode='r')", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "question_id": 1226}
{"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8352}
{"snippet": "bytearray.partition(sep)", "intent": "Split the sequence at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9306}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11609}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "csvreader.__next__()", "intent": "Return the next row of the reader \u2019 s iterable object as a list ( if the object was returned from reader ( ) ) or a dict ( if it is a DictReader instance ) , parsed according to the current dialect .", "question_id": 1731}
{"snippet": "compileall.compile_file(fullname)", "intent": "Compile the file with path `fullname` .", "question_id": 1419}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "dis.dis(x=None)", "intent": "Disassemble the `x` object .", "question_id": 2708}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "subprocess.call(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9663}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "json.JSONEncoder(separators=None)", "intent": "Extensible JSON encoder for Python data structures . If specified , `separators` should be an ( item_separator , key_separator ) tuple .", "question_id": 5329}
{"snippet": "chunk.Chunk(file, align=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries .", "question_id": 1076}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "ur_lopener.retrieve(url, data=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . It will be called once at the start and after each chunk of `data` is read from the network .", "question_id": 11899}
{"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "loop.sock_recv_into(sock, buf)", "intent": "Receive data from `sock` into the `buf` buffer .", "question_id": 277}
{"snippet": "controller.open(url, new=0, autoraise=True)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible . With arguments `autoraise`.", "question_id": 12117}
{"snippet": "platform.libc_ver(lib='', chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7546}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453}
{"snippet": "HTTPSHandler.https_open(req)", "intent": "Send an HTTPS request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11872}
{"snippet": "message.get_params(unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2986}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "memory_bio.read(n=-1)", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9057}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "ast.parse(source, filename='<unknown>')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 146}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "base_rotating_handler.rotate(source, dest)", "intent": "When rotating , rotate the current log . The default implementation calls the \u2018 rotator \u2019 attribute of the handler , if it \u2019 s callable , passing the `source` and `dest` arguments to it .", "question_id": 5457}
{"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957}
{"snippet": "turtle.clearstamps(n=None)", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10932}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "urllib.parse.parse_qs(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11669}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "print(*objects, end='\\n', flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4084}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "urllib.request.build_opener(handler)", "intent": "Return an OpenerDirector instance , which chains the handlers in the order given . With arguments `handler`.", "question_id": 11763}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "queue_listener.setFormatter(fmt)", "intent": "Sets the Formatter for this handler to `fmt` .", "question_id": 5600}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "SSLContext.load_verify_locations(cafile=None, capath=None, cadata=None)", "intent": "Load a set of \u201c certification authority \u201d ( CA ) certificates used to validate other peers \u2019 certificates when verify_mode is other than CERT_NONE . At least one of `cafile` or `capath` must be specified . The `cadata` object , if present , is either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates .", "question_id": 9010}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "calendar.prmonth(theyear, themonth, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 995}
{"snippet": "os.access(path, mode)", "intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions .", "question_id": 6820}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802}
{"snippet": "struct.unpack_from(buffer, offset=0)", "intent": "Identical to the unpack_from ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes , minus `offset` , must be at least size .", "question_id": 9563}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "len(proxy)", "intent": "Return the number of items in the underlying mapping . With arguments `proxy`.", "question_id": 11210}
{"snippet": "socket.recvmsg(bufsize)", "intent": "Receive normal data ( up to `bufsize` bytes ) and ancillary data from the socket .", "question_id": 8707}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "turtle.ondrag(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`, `add`.", "question_id": 11030}
{"snippet": "bz2.open(filename, errors=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 880}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "optparse.OptionGroup(parser, title, description=None)", "intent": "where With arguments `parser`, `title`, `description`.", "question_id": 6617}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `assigned`.", "question_id": 4161}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157}
{"snippet": "logging.FileHandler(filename, mode='a', encoding=None)", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . If `encoding` is not None , it is used to open the file with that encoding . With arguments `filename`.", "question_id": 5430}
{"snippet": "http.cookies.BaseCookie(input)", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "question_id": 4578}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "urllib.request.build_opener(handler)", "intent": "Return an OpenerDirector instance , which chains the handlers in the order given . With arguments `handler`.", "question_id": 11763}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802}
{"snippet": "turtle.onrelease(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`, `add`.", "question_id": 11026}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "os.setxattr(path, attribute, value, follow_symlinks=True)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` . With arguments `follow_symlinks`.", "question_id": 7003}
{"snippet": "base_rotating_handler.rotate(source, dest)", "intent": "When rotating , rotate the current log . The default implementation calls the \u2018 rotator \u2019 attribute of the handler , if it \u2019 s callable , passing the `source` and `dest` arguments to it .", "question_id": 5457}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923}
{"snippet": "json.dumps(obj, **kw, default=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `default`.", "question_id": 5288}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005}
{"snippet": "counter.subtract(iterable-or-mapping)", "intent": "Elements are subtracted from an iterable or from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1345}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}
{"snippet": "io.open(file, opener=None)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `opener`.", "question_id": 5058}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "str(encoding='utf-8', errors='strict')", "intent": "Return a str version of `object` . With arguments `encoding`, `errors`.", "question_id": 4121}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "pkgutil.extend_path(path, name)", "intent": "Extend the search `path` for the modules which comprise a package . It also looks for *.pkg files beginning where * matches the `name` argument .", "question_id": 7436}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "turtle.onrelease(fun)", "intent": "Bind `fun` to mouse-button-release events on this turtle .", "question_id": 11023}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}
{"snippet": "Decompress.decompress(data, max_length=0)", "intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string . If the optional parameter `max_length` is non-zero then the return value will be no longer than max_length .", "question_id": 12935}
{"snippet": "platform.java_ver('', ''), '', ''), release='', vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7490}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "Popen.send_signal(signal)", "intent": "Sends the `signal` signal to the child .", "question_id": 9616}
{"snippet": "logging.disable(level=CRITICAL)", "intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "question_id": 5645}
{"snippet": "urllib.request.build_opener(handler)", "intent": "Return an OpenerDirector instance , which chains the handlers in the order given . With arguments `handler`.", "question_id": 11763}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435}
{"snippet": "bisect.insort_right(a, x, lo=0, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`, `hi`.", "question_id": 871}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : With arguments `*paths`.", "question_id": 2797}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6799}
{"snippet": "bz2.open(filename, errors=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 880}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "dis.disco(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2724}
{"snippet": "bytes_io.read1(size)", "intent": "In BytesIO , this is the same as read ( ) . With arguments `size`.", "question_id": 5113}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "turtle.numinput(title, prompt, default=None, minval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11088}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}
{"snippet": "shelve.BsdDbShelf(dict, writeback=False)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "question_id": 8254}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}
{"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5866}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "os.spawnle(mode, path, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7054}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "connection.backup(target, progress=None, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8837}
{"snippet": "lzma.LZMAFile(check=-1)", "intent": "Open an LZMA-compressed file in binary `mode` . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5670}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}
{"snippet": "ctypes._CData", "intent": "This non-public class is the common base class of all ctypes data types.", "question_id": 1842}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "urllib.request.Request(url, data=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed .", "question_id": 11769}
{"snippet": "HTTPRedirectHandler.http_error_302(req, fp, code, msg, hdrs)", "intent": "The same as http_error_301 ( ) , but called for the \u2018 found \u2019 response . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11852}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "process.send_signal(signal)", "intent": "Sends the `signal` signal to the child process .", "question_id": 550}
{"snippet": "test.support.set_memlimit(limit)", "intent": "Set the values for max_memuse and real_max_memuse for big memory tests . With arguments `limit`.", "question_id": 10167}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778}
{"snippet": "mock._get_child_mock(**kw)", "intent": "Create the child mocks for attributes and return value . With arguments `**kw`.", "question_id": 11587}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172}
{"snippet": "exit_stack.callback(callback, *args, **kwds)", "intent": "Accepts an arbitrary `callback` function and arguments and adds it to the callback stack . With arguments `*args`, `**kwds`.", "question_id": 1629}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "fcntl.lockf(fd, cmd, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3749}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "calendar.LocaleHTMLCalendar(locale=None)", "intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 983}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "ast.parse(source, filename='<unknown>', mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 148}
{"snippet": "csv.DictReader(f, *args, **kwds, restkey=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`.", "question_id": 1694}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334}
{"snippet": "asyncio.Queue(loop=None)", "intent": "A first in , first out ( FIFO ) queue . With arguments `loop`.", "question_id": 447}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "binascii.b2a_qp(data, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 831}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10976}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "bytes(source)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`.", "question_id": 3987}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "datetime.datetime(year, month, day, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `second`.", "question_id": 2250}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "multiprocessing.Queue(maxsize)", "intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores . With arguments `maxsize`.", "question_id": 6195}
{"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css', encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 968}
{"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "FTP.dir(argument)", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3957}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "string.Template(template)", "intent": "The constructor takes a single argument which is the `template` string .", "question_id": 9525}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459}
{"snippet": "bdb.stop_here(frame)", "intent": "This method checks if the `frame` is somewhere below botframe in the call stack .", "question_id": 777}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}
{"snippet": "io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively . If the `buffer_size` is omitted it defaults to DEFAULT_BUFFER_SIZE .", "question_id": 5131}
{"snippet": "test.support.check_syntax_error(testcase, statement)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "question_id": 10231}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}
{"snippet": "shlex.split(s, posix=True)", "intent": "Split the string `s` using shell-like syntax . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8270}
{"snippet": "SMTP.connect(port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8513}
{"snippet": "hmac.new(key, msg=None)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key . If `msg` is present , the method call update ( msg ) is made .", "question_id": 4330}
{"snippet": "math.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 5895}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "calendar.yeardays2calendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 922}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224}
{"snippet": "HTTPConnection.putrequest(method, url)", "intent": "This should be the first call after the connection to the server has been made . It sends a line to the server consisting of the `method` string , the `url` string , and the HTTP version ( HTTP/1.1 ) .", "question_id": 4444}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "counter.subtract(iterable-or-mapping)", "intent": "Elements are subtracted from an iterable or from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1345}
{"snippet": "FieldStorage.getfirst(name, default=None)", "intent": "This method always returns only one value associated with form field `name` . 1 If no such form field or value exists then the method returns the value specified by the optional parameter `default` .", "question_id": 1027}
{"snippet": "pickletools.dis(pickle, memo=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler .", "question_id": 7417}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "@unittest.skipIf(condition, reason)", "intent": "Skip the decorated test if `condition` is true . With arguments `reason`.", "question_id": 11359}
{"snippet": "os.WIFSTOPPED(status)", "intent": "Return True if the process has been stopped , otherwise return False . With arguments `status`.", "question_id": 7090}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "element.findtext(match, namespaces=None)", "intent": "Finds text for the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12497}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "bdb.Breakpoint(self, file, line, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "question_id": 757}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "calendar.prcal(year, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `c`.", "question_id": 1004}
{"snippet": "unittest.TextTestRunner(verbosity=1)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `verbosity`.", "question_id": 11536}
{"snippet": "IMAP4.thread(threading_algorithm, charset, search_criterion)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4747}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "mmap.mmap(fileno, length, offset, access=ACCESS_DEFAULT)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `offset` may be specified as a non-negative integer offset . `access` may be specified in lieu of flags and prot as an optional keyword parameter .", "question_id": 5987}
{"snippet": "dataclasses.field(hash=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `hash`.", "question_id": 2171}
{"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "cgitb.handler(info=None)", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) . The optional `info` argument should be a 3-tuple containing an exception type , exception value , and traceback object , exactly like the tuple returned by sys.exc_info ( ) .", "question_id": 1074}
{"snippet": "base64.standard_b64encode(s)", "intent": "Encode bytes-like object `s` using the standard Base64 alphabet and return the encoded bytes .", "question_id": 714}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "loop.create_unix_server(protocol_factory, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `backlog`.", "question_id": 245}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "loop.connect_write_pipe(protocol_factory, pipe)", "intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 302}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "element.findall(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12493}
{"snippet": "asyncio.open_unix_connection(limit=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `limit`.", "question_id": 486}
{"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "os.utime(path, ns, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6960}
{"snippet": "exit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1611}
{"snippet": "ossaudiodev.openmixer(device)", "intent": "Open a mixer `device` and return an OSS mixer device object .", "question_id": 7176}
{"snippet": "window.addch(y, x, ch, attr)", "intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2002}
{"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325}
{"snippet": "message.del_param(param, header='content-type')", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3010}
{"snippet": "textwrap.TextWrapper(**kwargs)", "intent": "The TextWrapper constructor accepts a number of optional keyword arguments . With arguments `**kwargs`.", "question_id": 10326}
{"snippet": "tzinfo.dst(dt)", "intent": "Return the daylight saving time ( DST ) adjustment , as a timedelta object or None if DST information isn \u2019 t known . tz.utcoffset ( `dt` ) - tz.dst ( dt )", "question_id": 2354}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10101}
{"snippet": "@dataclasses.dataclass(repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `repr`.", "question_id": 2159}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "trace.runfunc(func, *args, **kwds)", "intent": "Call `func` with the given arguments under control of the Trace object with the current tracing parameters . With arguments `*args`, `**kwds`.", "question_id": 10721}
{"snippet": "tempfile.NamedTemporaryFile(dir=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `dir`.", "question_id": 10050}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864}
{"snippet": "ftplib.FTP_TLS(host='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `host`.", "question_id": 3889}
{"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}
{"snippet": "message.get_param(param, header='content-type')", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2993}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, secure=None)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . To specify the use of a `secure` protocol ( TLS ) , pass in a tuple to the secure argument . With arguments `fromaddr`.", "question_id": 5517}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "bytes_parser.parse(fp)", "intent": "Read all the data from the binary file-like object `fp` , parse the resulting bytes , and return the message object .", "question_id": 3376}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 51}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876}
{"snippet": "os.WIFEXITED(status)", "intent": "Return True if the process exited using the exit ( 2 ) system call , otherwise return False . With arguments `status`.", "question_id": 7092}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "meta_path_finder.find_spec(fullname, path)", "intent": "An abstract method for finding a spec for the specified module . If this is a top-level import , `path` will be None . With arguments `fullname`.", "question_id": 4803}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}
{"snippet": "tkinter.Tcl(className='Tk')", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `className`.", "question_id": 10530}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={}, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4434}
{"snippet": "chunk.seek(pos)", "intent": "Set the chunk \u2019 s current position . With arguments `pos`.", "question_id": 1087}
{"snippet": "test_case.subTest(**params, msg=None)", "intent": "Return a context manager which executes the enclosed code block as a subtest . `msg` and params are optional , arbitrary values which are displayed whenever a subtest fails , allowing you to identify them clearly . With arguments `**params`.", "question_id": 11373}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "copyright", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1612}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131}
{"snippet": "calendar.LocaleHTMLCalendar(locale=None)", "intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 983}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "zipfile.ZipFile(file, compression=ZIP_STORED)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised .", "question_id": 12794}
{"snippet": "zlib.adler32(data, value)", "intent": "Computes an Adler-32 checksum of `data` . If `value` is present , it is used as the starting value of the checksum ; otherwise , a default value of 1 is used .", "question_id": 12893}
{"snippet": "bytes(source)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`.", "question_id": 3987}
{"snippet": "email.encoders.encode_noop(msg)", "intent": "This does nothing ; it doesn \u2019 t even set the Content-Transfer-Encoding header . With arguments `msg`.", "question_id": 3072}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184}
{"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "bdb.run(cmd)", "intent": "Debug a statement executed via the exec ( ) function . With arguments `cmd`.", "question_id": 807}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12125}
{"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942}
{"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "calendar.timegm(tuple)", "intent": "An unrelated but handy function that takes a time `tuple` such as returned by the gmtime ( ) function in the time module , and returns the corresponding Unix timestamp value , assuming an epoch of 1970 , and the POSIX encoding .", "question_id": 1021}
{"snippet": "calendar.prcal(year, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `m`.", "question_id": 1005}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "test_case.assertIn(first, second)", "intent": "Test that `first` is ( or is not ) in `second` .", "question_id": 11391}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "shelve.open(filename, flag='c', writeback=False)", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) . If the optional `writeback` parameter is set to True , all entries accessed are also cached in memory , and written back on sync ( ) and close ( ) ; this can make it handier to mutate mutable entries in the persistent dictionary , but , if many entries are accessed , it can consume vast amounts of memory for the cache , and it can make the close operation very slow since all accessed entries are written back ( there is no way to determine which accessed entries are mutable , nor which ones were actually mutated ) .", "question_id": 8239}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "quit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1609}
{"snippet": "ZipFile.read(name, pwd=None)", "intent": "Return the bytes of the file `name` in the archive . `pwd` is the password used for encrypted files and , if specified , it will override the default password set with setpassword ( ) .", "question_id": 12829}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "base_selector.modify(fileobj, events)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8218}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "os.path.commonpath(paths)", "intent": "Return the longest common sub-path of each pathname in the sequence `paths` .", "question_id": 7144}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "iterator.__next__()", "intent": "Return the next item from the container .", "question_id": 9153}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "element_tree.write(file, encoding=\"us-ascii\")", "intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12528}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5866}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "config_parser.write(fileobject)", "intent": "Write a representation of the configuration to the specified file object , which must be opened in text mode ( accepting strings ) . With arguments `fileobject`.", "question_id": 1561}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11152}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}
{"snippet": "textwrap.wrap(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10319}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "sqlite3.sqlite_version", "intent": "The version number of the run-time SQLite library, as a string.", "question_id": 8793}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "asyncio.Semaphore(value=1, loop=None)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) . With arguments `loop`.", "question_id": 584}
{"snippet": "os.pathconf(path, name)", "intent": "Return system configuration information relevant to a named file . `name` specifies the configuration value to retrieve ; it may be a string which is the name of a defined system value ; these names are specified in a number of standards ( POSIX.1 , Unix 95 , Unix 98 , and others ) . With arguments `path`.", "question_id": 6885}
{"snippet": "os.sendfile(out, in, offset, count, headers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6797}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "base_selector.modify(fileobj, events)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8218}
{"snippet": "fileinput.input(files=None, inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "question_id": 3789}
{"snippet": "smtplib.SMTP_SSL(port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8480}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "io.StringIO(initial_value='', newline='\\n')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "question_id": 5167}
{"snippet": "dict.pop(key, default)", "intent": "If `key` is in the dictionary , remove it and return its value , else return `default` .", "question_id": 9486}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "turtle.setpos(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10915}
{"snippet": "marshal.dumps(value, version)", "intent": "Return the bytes object that would be written to a file by dump ( `value` , file ) . The `version` argument indicates the data format that dumps should use ( see below ) .", "question_id": 5881}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}
{"snippet": "counter.subtract(iterable-or-mapping)", "intent": "Elements are subtracted from an iterable or from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1345}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "operator.__invert__(obj)", "intent": "Return the bitwise inverse of the number `obj` .", "question_id": 6543}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459}
{"snippet": "py_zip_file.writepy(pathname, basename='')", "intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) . `basename` is intended for internal use only .", "question_id": 12857}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}
{"snippet": "abc_meta.__subclasshook__(subclass)", "intent": "( Must be defined as a class method . ) Check whether `subclass` is considered a subclass of this ABC .", "question_id": 3}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "Popen.send_signal(signal)", "intent": "Sends the `signal` signal to the child .", "question_id": 9616}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : With arguments `prog`, `parser_class`, `option_string`.", "question_id": 77}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "compile(source, filename, mode, dont_inherit=False, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3998}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "ctypes._CData", "intent": "This non-public class is the common base class of all ctypes data types.", "question_id": 1842}
{"snippet": "turtle.write(arg, 8, \"normal\"), font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10972}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885}
{"snippet": "email_message.set_param(param, value, header='Content-Type', replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3269}
{"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930}
{"snippet": "HTTPResponse.read(amt)", "intent": "Reads and returns the response body , or up to the next `amt` bytes .", "question_id": 4455}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513}
{"snippet": "SSLSocket.read(len=1024, buffer=None)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance . If `buffer` is specified , then read into the buffer instead , and return the number of bytes read .", "question_id": 8974}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11426}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}
{"snippet": "platform.dist('debian', 'redhat', 'mandrake', ...), version='')", "intent": "This is another name for linux_distribution ( ) . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`, `version`.", "question_id": 7519}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, init=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2186}
{"snippet": "timeit.timeit(stmt='pass', number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10484}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "ZipFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object .", "question_id": 12814}
{"snippet": "dataclasses.astuple(instance)", "intent": "Converts the dataclass `instance` to a tuple ( by using the factory function `tuple_factory` ) .", "question_id": 2181}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453}
{"snippet": "subprocess.run(args, timeout=None)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9575}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "sqlite3.complete_statement(sql)", "intent": "Returns True if the string `sql` contains one or more complete SQL statements terminated by semicolons .", "question_id": 8801}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "mmap.seek(pos)", "intent": "Set the file \u2019 s current position . With arguments `pos`.", "question_id": 6018}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "json.dumps(obj, **kw)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "question_id": 5280}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "frozenset(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9433}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "loop.call_at(when, callback, *args)", "intent": "Schedule `callback` to be called at the given absolute timestamp `when` ( an int or a float ) , using the same time reference as loop.time ( ) . With arguments `*args`.", "question_id": 195}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "FTP.dir(argument)", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3957}
{"snippet": "xml.etree.ElementTree.iterparse(source, events=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `events` is a sequence of events to report back .", "question_id": 12443}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`.", "question_id": 523}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "sys.excepthook(type, value, traceback)", "intent": "This function prints out a given `traceback` and exception to sys.stderr . With arguments `type`, `value`.", "question_id": 9781}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "difflib.context_diff(a, b, fromfile='', tofiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2637}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220}
{"snippet": "datetime.fromtimestamp(timestamp)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2261}
{"snippet": "SMTP.login(user, password, initial_response_ok=True)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . `initial_response_ok` is passed through to auth ( ) . With arguments `user`.", "question_id": 8523}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "mmap.seek(pos)", "intent": "Set the file \u2019 s current position . With arguments `pos`.", "question_id": 6018}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "lock.acquire(timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10377}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}
{"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108}
{"snippet": "element.findall(match, namespaces=None)", "intent": "Finds all matching subelements , by tag name or path . `namespaces` is an optional mapping from namespace prefix to full name . With arguments `match`.", "question_id": 12494}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "connection.backup(target, progress=None, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8837}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "curses.meta(flag)", "intent": "If `flag` is True , allow 8-bit characters to be input .", "question_id": 1953}
{"snippet": "@functools.lru_cache(maxsize=128)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4147}
{"snippet": "email.encoders.encode_quopri(msg)", "intent": "Encodes the payload into quoted-printable form and sets the Content-Transfer-Encoding header to quoted-printable 1 . With arguments `msg`.", "question_id": 3069}
{"snippet": "bz2.open(filename, encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 879}
{"snippet": "faulthandler.register(signum)", "intent": "Register a user signal : install a handler for the `signum` signal to dump the traceback of all threads , or of the current thread if `all_threads` is False , into `file` .", "question_id": 3731}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "DeprecationWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "question_id": 3703}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "struct.pack(v1, v2)", "intent": "Identical to the pack ( ) function , using the compiled format . With arguments `v1`, `v2`.", "question_id": 9559}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "HTTPConnection.set_tunnel(host, headers=None)", "intent": "Set the `host` and the `port` for HTTP Connect Tunnelling . The `headers` argument should be a mapping of extra HTTP headers to send with the CONNECT request .", "question_id": 4439}
{"snippet": "memory_bio.read(n=-1)", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9057}
{"snippet": "base64.a85encode(b, foldspaces=False, adobe=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `adobe` controls whether the encoded byte sequence is framed with < ~ and ~ > , which is used by the Adobe implementation .", "question_id": 733}
{"snippet": "oss_audio_device.setparameters(format, nchannels, strict=False)", "intent": "Set the key audio sampling parameters\u2014sample `format` , number of channels , and sampling rate\u2014in one method call . format , `nchannels` , and `samplerate` should be as specified in the setfmt ( ) , channels ( ) , and speed ( ) methods . If `strict` is true , setparameters ( ) checks to see if each parameter was actually set to the requested value , and raises OSSAudioError if not .", "question_id": 7194}
{"snippet": "getpass.getpass(prompt='Password: ', stream=None)", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' . On Unix , the prompt is written to the file-like object `stream` using the replace error handler if needed .", "question_id": 4207}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "faulthandler.register(signum)", "intent": "Register a user signal : install a handler for the `signum` signal to dump the traceback of all threads , or of the current thread if `all_threads` is False , into `file` .", "question_id": 3731}
{"snippet": "mailbox.Babyl(path, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in Babyl format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5797}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "fraction.__round__()", "intent": "The first version returns the nearest int to self , rounding half to even .", "question_id": 3875}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "cmd.Cmd(stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1130}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "turtle.ondrag(fun, btn=1)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`.", "question_id": 11028}
{"snippet": "base_selector.register(fileobj, events)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor .", "question_id": 8215}
{"snippet": "http.client.HTTPConnection(host, timeout)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . If the optional `timeout` parameter is given , blocking operations ( like connection attempts ) will timeout after that many seconds ( if it is not given , the global default timeout setting is used ) .", "question_id": 4366}
{"snippet": "zipapp.create_archive(source, compressed=False)", "intent": "Create an application archive from `source` . The optional `compressed` argument determines whether files are compressed .", "question_id": 12772}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084}
{"snippet": "ctypes.memset(dst, c, count)", "intent": "Same as the standard C memset library function : fills the memory block at address `dst` with `count` bytes of value c. dst must be an integer specifying an address , or a ctypes instance . With arguments `c`.", "question_id": 1827}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "unittest.main(testRunner=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "question_id": 11549}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "ipaddress.NetmaskValueError(ValueError)", "intent": "Any value error related to the net mask . With arguments `ValueError`.", "question_id": 5238}
{"snippet": "_c_data.from_buffer(source)", "intent": "This method returns a ctypes instance that shares the buffer of the `source` object .", "question_id": 1844}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "base64.b64decode(s, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 712}
{"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832}
{"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "zlib.compressobj(zdict, level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12898}
{"snippet": "logging.config.fileConfig(fname, defaults=None)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "question_id": 5413}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "shelve.Shelf(dict, protocol=None)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The version of the pickle `protocol` can be specified with the protocol parameter .", "question_id": 8245}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "lock.acquire(block=True)", "intent": "Acquire a lock , blocking or non-blocking . With the `block` argument set to True ( the default ) , the method call will block until the lock is in an unlocked state , then set it to locked and return True .", "question_id": 6253}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}
{"snippet": "gettext.install(domain, names=None)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) . For the `names` parameter , please see the description of the translation object \u2019 s install ( ) method .", "question_id": 4242}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "curses.meta(flag)", "intent": "If `flag` is True , allow 8-bit characters to be input .", "question_id": 1953}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "subprocess.call(args, stderr=None)", "intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead :", "question_id": 9662}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "element.findall(match, namespaces=None)", "intent": "Finds all matching subelements , by tag name or path . `namespaces` is an optional mapping from namespace prefix to full name . With arguments `match`.", "question_id": 12494}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "chunk.seek(pos)", "intent": "Set the chunk \u2019 s current position . With arguments `pos`.", "question_id": 1087}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "bytes.rsplit(sep=None, maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9354}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}
{"snippet": "fcntl.lockf(fd, cmd, start=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3753}
{"snippet": "logging.config.fileConfig(fname, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `disable_existing_loggers`.", "question_id": 5414}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "null_handler.emit(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5437}
{"snippet": "textwrap.fill(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`, `width`.", "question_id": 10321}
{"snippet": "IMAP4.thread(threading_algorithm, charset, search_criterion)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4747}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "mock.attach_mock(mock, attribute)", "intent": "Attach a `mock` as an `attribute` of this one , replacing its name and parent .", "question_id": 11584}
{"snippet": "urllib.error.ContentTooShortError(msg, content)", "intent": "This exception is raised when the urlretrieve ( ) function detects that the amount of the downloaded data is less than the expected amount ( given by the Content-Length header ) . The `content` attribute stores the downloaded ( and supposedly truncated ) data . With arguments `msg`.", "question_id": 11664}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "msilib.add_tables(database, module)", "intent": "Add all table content from `module` to `database` .", "question_id": 6065}
{"snippet": "dataclasses.astuple(instance)", "intent": "Converts the dataclass `instance` to a tuple ( by using the factory function `tuple_factory` ) .", "question_id": 2181}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "ZipFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory .", "question_id": 12820}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "base64.b64decode(s, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 712}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302}
{"snippet": "bytes_io.read1(size)", "intent": "In BytesIO , this is the same as read ( ) . With arguments `size`.", "question_id": 5113}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196}
{"snippet": "nntplib.NNTP_SSL(host, password=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `password`.", "question_id": 6432}
{"snippet": "asyncio.wait_for(aw, timeout)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` .", "question_id": 605}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578}
{"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, cte=None)", "intent": "Add `headers` and payload to `msg` : If `cte` is set , encode the payload using the specified content transfer encoding , and set the Content-Transfer-Encoding header to that value . With arguments `<'EmailMessage'>`.", "question_id": 3060}
{"snippet": "email.message_from_string(s, _class=None)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) . `_class` and `policy` are interpreted as with the Parser class constructor .", "question_id": 3405}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "pprint.pformat(object, depth=None)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7636}
{"snippet": "mock._get_child_mock(**kw)", "intent": "Create the child mocks for attributes and return value . With arguments `**kw`.", "question_id": 11587}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "ContentHandler.startElementNS(name, qname, attrs)", "intent": "Signals the start of an element in namespace mode . The `name` parameter contains the name of the element type as a ( uri , localname ) tuple , the `qname` parameter contains the raw XML 1.0 name used in the source document , and the `attrs` parameter holds an instance of the AttributesNS interface ( see The AttributesNS Interface ) containing the attributes of the element .", "question_id": 12577}
{"snippet": "sniffer.sniff(sample, delimiters=None)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found . If the optional `delimiters` parameter is given , it is interpreted as a string containing possible valid delimiter characters .", "question_id": 1716}
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "csv.writer(csvfile, **fmtparams, dialect='excel')", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1683}
{"snippet": "r_lock.acquire(timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10383}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698}
{"snippet": "ipaddress.NetmaskValueError(ValueError)", "intent": "Any value error related to the net mask . With arguments `ValueError`.", "question_id": 5238}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "profile.Profile(builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . With arguments `builtins`.", "question_id": 7673}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this handler .", "question_id": 5602}
{"snippet": "email.iterators._structure(msg, level=0)", "intent": "Prints an indented representation of the content types of the message object structure . `level` is used internally . With arguments `msg`.", "question_id": 3216}
{"snippet": "loop.create_connection(protocol_factory, family=0)", "intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation . The socket `family` can be either AF_INET or AF_INET6 depending on host ( or the family argument , if provided ) .", "question_id": 206}
{"snippet": "argparse.ArgumentParser(usage=None)", "intent": "Create a new ArgumentParser object . With arguments `usage`.", "question_id": 40}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`.", "question_id": 61}
{"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4119}
{"snippet": "base64.a85decode(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 743}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}
{"snippet": "platform.win32_ver(release='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7496}
{"snippet": "lzma.decompress(data, filters=None)", "intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "question_id": 5717}
{"snippet": "dict(iterable, **kwarg)", "intent": "Create a new dictionary . With arguments `iterable`, `**kwarg`.", "question_id": 4006}
{"snippet": "doc_test_runner.report_success(out, test, example, got)", "intent": "Report that the given `example` ran successfully . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `got` is the actual output from the example .", "question_id": 2870}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "lzma.LZMAFile(filters=None)", "intent": "Open an LZMA-compressed file in binary `mode` . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5672}
{"snippet": "warnings.showwarning(message, category, filename, lineno, file=None)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12018}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "ZipFile.open(name, mode='r', pwd=None)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . The `mode` parameter , if included , must be ' r ' ( the default ) or ' w ' . `pwd` is the password used to decrypt encrypted ZIP files .", "question_id": 12810}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "IMAP4.select(mailbox='INBOX', readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4732}
{"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}
{"snippet": "incremental_decoder.setstate(state)", "intent": "Set the `state` of the decoder to state .", "question_id": 1278}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "heapq.heapreplace(heap, item)", "intent": "Pop and return the smallest `item` from the `heap` , and also push the new item .", "question_id": 4320}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, defaults=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `defaults`.", "question_id": 1570}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "os.WIFSIGNALED(status)", "intent": "Return True if the process exited due to a signal , otherwise return False . With arguments `status`.", "question_id": 7091}
{"snippet": "str.endswith(suffix, start, end)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position . With optional `end` , stop comparing at that position .", "question_id": 9189}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "os.pwrite(fd, str, offset)", "intent": "Write the bytestring in `str` to file descriptor `fd` at position of `offset` , leaving the file offset unchanged .", "question_id": 6788}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "_c_data.in_dll(library, name)", "intent": "This method returns a ctypes type instance exported by a shared `library` . `name` is the name of the symbol that exports the data , library is the loaded shared library .", "question_id": 1849}
{"snippet": "urllib.parse.parse_qs(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11669}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 931}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "fractions.Fraction(denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3861}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}
{"snippet": "base64.b64encode(s, altchars=None)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes . Optional `altchars` must be a bytes-like object of at least length 2 ( additional characters are ignored ) which specifies an alternative alphabet for the + and / characters .", "question_id": 709}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "quit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1609}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}
{"snippet": "sqlite3.complete_statement(sql)", "intent": "Returns True if the string `sql` contains one or more complete SQL statements terminated by semicolons .", "question_id": 8801}
{"snippet": "unicodedata.digit(chr)", "intent": "Returns the digit value assigned to the character `chr` as integer .", "question_id": 11346}
{"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}
{"snippet": "message.__delitem__(name)", "intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "question_id": 2968}
{"snippet": "unpickler.find_class(module, name)", "intent": "Import `module` if necessary and return the object called `name` from it , where the module and name arguments are str objects .", "question_id": 7408}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "textwrap.fill(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`, `width`.", "question_id": 10321}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "loop.getaddrinfo(host, port, type=0, proto=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `type`, `proto`.", "question_id": 297}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "dataclasses.field(default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2169}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}
{"snippet": "mh_message.remove_sequence(sequence)", "intent": "Remove `sequence` from the list of sequences that include this message .", "question_id": 5837}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "compileall.compile_file(fullname, ddir=None, rx=None)", "intent": "Compile the file with path `fullname` . If `ddir` is given , it is prepended to the path to the file being compiled for use in compilation time tracebacks , and is also compiled in to the byte-code file , where it will be used in tracebacks and other messages in cases where the source file does not exist at the time the byte-code file is executed . If `rx` is given , its search method is passed the full path name to the file being compiled , and if it returns a true value , the file is not compiled and True is returned .", "question_id": 1428}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "warnings.warn(message, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12001}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "subprocess.Popen(args, cwd=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `cwd` is not None , the function changes the working directory to cwd before executing the child .", "question_id": 9608}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11609}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "window.border(ls, rs, ts, bs, tl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`.", "question_id": 2022}
{"snippet": "bdb.Breakpoint(self, file, line, cond=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.", "question_id": 756}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "timezone.utcoffset(dt)", "intent": "Return the fixed value specified when the timezone instance is constructed . The `dt` argument is ignored .", "question_id": 2359}
{"snippet": "message.set_param(param, value, language='')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional `language` specifies the RFC 2231 language , defaulting to the empty string . With arguments `param`.", "question_id": 3003}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}
{"snippet": "text_calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 935}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "mock.attach_mock(mock, attribute)", "intent": "Attach a `mock` as an `attribute` of this one , replacing its name and parent .", "question_id": 11584}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, loop=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`, `loop`.", "question_id": 541}
{"snippet": "bdb.break_anywhere(frame)", "intent": "This method checks if there is a breakpoint in the filename of the current `frame` .", "question_id": 779}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "mmap.mmap(fileno, length, offset)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `offset` may be specified as a non-negative integer offset .", "question_id": 5976}
{"snippet": "io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively . If the `buffer_size` is omitted it defaults to DEFAULT_BUFFER_SIZE .", "question_id": 5131}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`, `MIMEtype`.", "question_id": 5862}
{"snippet": "test_case.assertNotEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are not equal . With arguments `msg`.", "question_id": 11378}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`.", "question_id": 523}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088}
{"snippet": "loop.create_server(protocol_factory, ssl=None)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `ssl`.", "question_id": 239}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "venv.EnvBuilder(system_site_packages=False, clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `system_site_packages`, `clear`.", "question_id": 11979}
{"snippet": "base64.b64encode(s, altchars=None)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes . Optional `altchars` must be a bytes-like object of at least length 2 ( additional characters are ignored ) which specifies an alternative alphabet for the + and / characters .", "question_id": 709}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "bisect.insort_right(a, x, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `hi`.", "question_id": 870}
{"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "message.get_param(param, header='content-type')", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2993}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "tempfile.NamedTemporaryFile(dir=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `dir`.", "question_id": 10050}
{"snippet": "asyncio.open_connection(family=0)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `family`.", "question_id": 469}
{"snippet": "locale.nl_langinfo(option)", "intent": "Return some locale-specific information as a string . With arguments `option`.", "question_id": 5353}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "style.theme_create(themename, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10688}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "directory.glob(pattern)", "intent": "Add a list of files to the current component as specified in the glob `pattern` .", "question_id": 6111}
{"snippet": "winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12125}
{"snippet": "io_base.readline(size=-1)", "intent": "Read and return one line from the stream . If `size` is specified , at most size bytes will be read .", "question_id": 5071}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None, loader_state=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g . With arguments `loader_state`.", "question_id": 4916}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}
{"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra)", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.", "question_id": 12451}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "typing.Deque(deque, MutableSequenceT)", "intent": "A generic version of collections.deque . With arguments `deque`, `MutableSequenceT`.", "question_id": 11268}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966}
{"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8351}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "platform.libc_ver(chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7541}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}
{"snippet": "shlex.shlex(instream=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d .", "question_id": 8274}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "calendar.itermonthdays4(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 916}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "message.set_param(param, value, requote=True)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional header specifies an alternative header to Content-Type , and all parameters will be quoted as necessary unless optional `requote` is False ( the default is True ) . With arguments `param`.", "question_id": 3001}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "glob.glob(pathname)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification .", "question_id": 4264}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "calendar.LocaleHTMLCalendar(locale=None)", "intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 983}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "types.ModuleType(name, doc=None)", "intent": "The type of modules . Constructor takes the `name` of the module to be created and optionally its docstring . With arguments `doc`.", "question_id": 11197}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "socket.CMSG_SPACE(length)", "intent": "Return the buffer size needed for recvmsg ( ) to receive an ancillary data item with associated data of the given `length` , along with any trailing padding .", "question_id": 8666}
{"snippet": "decimal.Context(prec=None, rounding=None)", "intent": "Creates a new context . `prec` is an integer in the range [ 1 , MAX_PREC ] that sets the precision for arithmetic operations in the context . The `rounding` option is one of the constants listed in the section Rounding Modes .", "question_id": 2508}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "bz2.open(filename, mode='r', compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 882}
{"snippet": "NotImplemented", "intent": "Special value which should be returned by the binary special methods (e.g.", "question_id": 1605}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116}
{"snippet": "os.lchown(path, uid, gid)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` .", "question_id": 6849}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "email.headerregistry.Address(display_name='', username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec . With arguments `display_name`.", "question_id": 3191}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "doctest.debug_src(src)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "question_id": 2890}
{"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "CGIXMLRPCRequestHandler.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request ; the return value is returned to the client as the result .", "question_id": 12744}
{"snippet": "tempfile.TemporaryFile(mode='w+b', encoding=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10042}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "calendar.yeardays2calendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 922}
{"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE, stdout=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdin`, `stdout`.", "question_id": 325}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "FTP.dir(argument)", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3957}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037}
{"snippet": "r_lock.acquire(blocking=True)", "intent": "Acquire a lock , `blocking` or non-blocking .", "question_id": 10382}
{"snippet": "tempfile.TemporaryFile(mode='w+b', buffering=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10041}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421}
{"snippet": "socket.recvfrom_into(buffer)", "intent": "Receive data from the socket , writing it into `buffer` instead of creating a new bytestring .", "question_id": 8713}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "tkinter.Tk(baseName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`, `className`.", "question_id": 10525}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "turtle.bk(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10906}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "random.setstate(state)", "intent": "`state` should have been obtained from a previous call to getstate ( ) , and setstate ( ) restores the internal state of the generator to what it was at the time getstate ( ) was called .", "question_id": 7888}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "urllib.parse.quote_from_bytes(bytes, safe='/')", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding . With arguments `safe`.", "question_id": 11722}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "InteractiveInterpreter.runsource(source, filename=\"<input>\", symbol=\"single\")", "intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "question_id": 1178}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}
{"snippet": "doctest.DocFileSuite(*paths, parser=DocTestParser())", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `parser` specifies a DocTestParser ( or subclass ) that should be used to extract tests from the files . With arguments `*paths`.", "question_id": 2803}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037}
{"snippet": "platform.mac_ver('', ''), release='')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7510}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "subprocess.check_output(args, cwd=None)", "intent": "Run command with arguments and return its output . With arguments `args`, `cwd`.", "question_id": 9683}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "bdb.run(cmd, locals=None)", "intent": "Debug a statement executed via the exec ( ) function . `globals` defaults to __main__.__dict__ , `locals` defaults to globals . With arguments `cmd`.", "question_id": 809}
{"snippet": "importlib.util.spec_from_file_location(name, location, submodule_search_locations=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`, `submodule_search_locations`.", "question_id": 4940}
{"snippet": "re.error(msg, pattern=None, pos=None)", "intent": "Exception raised when a string passed to one of the functions here is not a valid regular expression ( for example , it might contain unmatched parentheses ) or when some other error occurs during compilation or matching . It is never an error if a string contains no match for a `pattern` . With arguments `msg`, `pos`.", "question_id": 7964}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "NNTP.login(user=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6452}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "Morsel.set(key, value, coded_value)", "intent": "Set the `key` , `value` and `coded_value` attributes .", "question_id": 4599}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "traceback.extract_stack(f=None)", "intent": "Extract the raw traceback from the current stack frame . The optional `f` and `limit` arguments have the same meaning as for print_stack ( ) .", "question_id": 10772}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "formatter.push_style(*styles)", "intent": "Push any number of arbitrary style specifications . With arguments `*styles`.", "question_id": 3832}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "xml.dom.minidom.parse(filename_or_file, parser=None)", "intent": "Return a Document from the given input . `filename_or_file` may be either a file name , or a file-like object . `parser` , if given , must be a SAX2 parser object .", "question_id": 12397}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "formatter.NullFormatter(writer=None)", "intent": "A formatter which does nothing . If `writer` is omitted , a NullWriter instance is created .", "question_id": 3839}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607}
{"snippet": "types.ModuleType(name, doc=None)", "intent": "The type of modules . Constructor takes the `name` of the module to be created and optionally its docstring . With arguments `doc`.", "question_id": 11197}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "urllib.parse.urlunsplit(parts)", "intent": "Combine the elements of a tuple as returned by urlsplit ( ) into a complete URL as a string . The `parts` argument can be any five-item iterable .", "question_id": 11694}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11109}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "types.ModuleType(name, doc=None)", "intent": "The type of modules . Constructor takes the `name` of the module to be created and optionally its docstring . With arguments `doc`.", "question_id": 11197}
{"snippet": "collections.Counter(iterable-or-mapping)", "intent": "A Counter is a dict subclass for counting hashable objects . With arguments `iterable-or-mapping`.", "question_id": 1340}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "xmlparser.EndNamespaceDeclHandler(prefix)", "intent": "Called when the closing tag is reached for an element that contained a namespace declaration . With arguments `prefix`.", "question_id": 7768}
{"snippet": "element.iterfind(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12502}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098}
{"snippet": "time.strftime(format, t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10453}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "sys.call_tracing(func, args)", "intent": "Call `func` ( *args ) , while tracing is enabled . With arguments `args`.", "question_id": 9772}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849}
{"snippet": "binascii.a2b_qp(data, header=False)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data . If the optional argument `header` is present and true , underscores will be decoded as spaces .", "question_id": 827}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "smtplib.SMTP(timeout, port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8450}
{"snippet": "proxy[key]", "intent": "Return the item of the underlying mapping with key key.", "question_id": 11208}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "window.vline(ch, n)", "intent": "Display a vertical line starting at ( y , x ) with length `n` consisting of the character `ch` .", "question_id": 2129}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "str(object=b'')", "intent": "Return a string version of `object` .", "question_id": 9171}
{"snippet": "parser.compilest(st, filename='<syntax-tree>')", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7223}
{"snippet": "asyncio.ensure_future(obj)", "intent": "Return : If `obj` is neither of the above a TypeError is raised .", "question_id": 355}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "ZipFile.open(name, pwd=None)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . `pwd` is the password used to decrypt encrypted ZIP files .", "question_id": 12808}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371}
{"snippet": "socket.getaddrinfo(host, port)", "intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None .", "question_id": 8635}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "fileinput.input(files=None, backup='')", "intent": "Create an instance of the FileInput class . With arguments `files`, `backup`.", "question_id": 3790}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra)", "intent": "Element class . `tag` is the element name . With arguments `**extra`.", "question_id": 12477}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "subprocess.check_output(args, timeout=None)", "intent": "Run command with arguments and return its output . With arguments `args`, `timeout`.", "question_id": 9687}
{"snippet": "joinable_queue.recv_bytes_into(buffer)", "intent": "Read into `buffer` a complete message of byte data sent from the other end of the connection and return the number of bytes in the message .", "question_id": 6242}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "tarfile.open(**kwargs, name=None)", "intent": "Return a TarFile object for the pathname `name` . With arguments `**kwargs`.", "question_id": 9891}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "fcntl.lockf(fd, cmd)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values :", "question_id": 3747}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726}
{"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}
{"snippet": "venv.create(env_dir, clear=False)", "intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument . With arguments `clear`.", "question_id": 11991}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "urllib.request.urlopen(url, cadefault=False)", "intent": "Open the URL `url` , which can be either a string or a Request object . The `cadefault` parameter is ignored .", "question_id": 11756}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "random.choices(population, weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7900}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "TarFile.list(members=None)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9929}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "dis.disassemble(code, lasti=-1, file=None)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "question_id": 2722}
{"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "codecs.CodecInfo(encode, decode, name=None)", "intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`.", "question_id": 1206}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "quopri.decodestring(s, header=False)", "intent": "Like decode ( ) , except that it accepts a source bytes and returns the corresponding decoded bytes . With arguments `s`, `header`.", "question_id": 7878}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "dis.disassemble(code, lasti=-1, file=None)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "question_id": 2722}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "Element.getElementsByTagName(tagName)", "intent": "Same as equivalent method in the Document class . With arguments `tagName`.", "question_id": 12355}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "dialog.bitmap(name, x, y, width, height, text)", "intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "question_id": 6138}
{"snippet": "gettext.find(domain)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes .", "question_id": 4221}
{"snippet": "mmap.rfind(sub, start, end)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6014}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "style.configure(style, **kw)", "intent": "Query or set the default value of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10673}
{"snippet": "random.lognormvariate(mu, sigma)", "intent": "Log normal distribution . If you take the natural logarithm of this distribution , you \u2019 ll get a normal distribution with mean `mu` and standard deviation `sigma` .", "question_id": 7913}
{"snippet": "zipfile.PyZipFile(file, optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `optimize`.", "question_id": 12850}
{"snippet": "xml.etree.ElementInclude.include(elem)", "intent": "This function expands XInclude directives . `elem` is the root element .", "question_id": 12475}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "Decompress.decompress(data, max_length=0)", "intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string . If the optional parameter `max_length` is non-zero then the return value will be no longer than max_length .", "question_id": 12935}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}
{"snippet": "min(iterable, key, default)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4054}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037}
{"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780}
{"snippet": "complex()", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4002}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "ctypes.BigEndianStructure(*args, **kw)", "intent": "Abstract base class for structures in big endian byte order . With arguments `*args`, `**kw`.", "question_id": 1887}
{"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080}
{"snippet": "IMAP4.login_cram_md5(user, password)", "intent": "Force use of CRAM-MD5 authentication when identifying the client to protect the `password` . With arguments `user`.", "question_id": 4710}
{"snippet": "plistlib.loads(data, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `dict_type`.", "question_id": 7558}
{"snippet": "ZipFile.extract(member, path=None)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object . `path` specifies a different directory to extract to .", "question_id": 12815}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957}
{"snippet": "codecs.CodecInfo(encode, decode, incrementalencoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementalencoder`.", "question_id": 1204}
{"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886}
{"snippet": "lzma.open(filename, mode=\"rb\")", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to .", "question_id": 5657}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "base64.b64decode(s, altchars=None)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters .", "question_id": 711}
{"snippet": "operator.__eq__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6521}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, frozen=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2191}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "null_translations.install(names=None)", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "question_id": 4259}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925}
{"snippet": "doctest.DocTestFinder(recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2843}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849}
{"snippet": "collections.namedtuple(typename, field_names, rename=False)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names .", "question_id": 1377}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "breakpoint.bpprint(out=None)", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 767}
{"snippet": "doc_test_runner.report_success(out, test, example, got)", "intent": "Report that the given `example` ran successfully . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `got` is the actual output from the example .", "question_id": 2870}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "urllib.parse.quote_plus(string, encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `encoding`.", "question_id": 11715}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "warnings.catch_warnings(record=False, module=None)", "intent": "A context manager that copies and , upon exit , restores the warnings filter and the showwarning ( ) function . If the `record` argument is False ( the default ) the context manager returns None on entry . The `module` argument takes a module that will be used instead of the module returned when you import warnings whose filter will be protected .", "question_id": 12045}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "timeit.repeat(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10494}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108}
{"snippet": "os.fwalk(top='.', topdown=True)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`, `topdown`.", "question_id": 6989}
{"snippet": "os.lchmod(path, mode)", "intent": "Change the `mode` of `path` to the numeric mode .", "question_id": 6848}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "os.setpriority(which, who, priority)", "intent": "Set program scheduling `priority` . The value `which` is one of PRIO_PROCESS , PRIO_PGRP , or PRIO_USER , and `who` is interpreted relative to which ( a process identifier for PRIO_PROCESS , process group identifier for PRIO_PGRP , and a user ID for PRIO_USER ) .", "question_id": 6699}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "gettext.bind_textdomain_codeset(domain)", "intent": "Bind the `domain` to `codeset` , changing the encoding of byte strings returned by the lgettext ( ) , ldgettext ( ) , lngettext ( ) and ldngettext ( ) functions .", "question_id": 4212}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, dict_type=collections.OrderedDict)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `dict_type`.", "question_id": 1571}
{"snippet": "subprocess.Popen(args, stderr=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9604}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "traceback.format_exc(chain=True)", "intent": "This is like print_exc ( `limit` ) but returns a string instead of printing to a file . With arguments `chain`.", "question_id": 10783}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "email_message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3265}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551}
{"snippet": "IMAP4.abort", "intent": "IMAP4 server errors cause this exception to be raised.", "question_id": 4674}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "ctypes.memset(dst, c, count)", "intent": "Same as the standard C memset library function : fills the memory block at address `dst` with `count` bytes of value c. dst must be an integer specifying an address , or a ctypes instance . With arguments `c`.", "question_id": 1827}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "nntplib.NNTP(host, port=119, usenetrc=False)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6418}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "struct.pack(v1, v2)", "intent": "Identical to the pack ( ) function , using the compiled format . With arguments `v1`, `v2`.", "question_id": 9559}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "turtle.turtlesize(outline=None)", "intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "question_id": 10997}
{"snippet": "tempfile.mkstemp(suffix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10078}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "epoll.poll(timeout=-1)", "intent": "Wait for events . `timeout` in seconds ( float )", "question_id": 8188}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "mailbox.Maildir(dirname, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5757}
{"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "statistics.pstdev(data, mu=None)", "intent": "Return the population standard deviation ( the square root of the population variance ) . With arguments `data`, `mu`.", "question_id": 9134}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout .", "question_id": 12659}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "subprocess.Popen(args, stdout=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9603}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "mailbox.MMDF(path, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in MMDF format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5805}
{"snippet": "tarfile.open(**kwargs)", "intent": "Return a TarFile object for the pathname `name` . With arguments `**kwargs`.", "question_id": 9890}
{"snippet": "dataclasses.field(hash=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `hash`.", "question_id": 2171}
{"snippet": "@unittest.skipIf(condition, reason)", "intent": "Skip the decorated test if `condition` is true . With arguments `reason`.", "question_id": 11359}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "FTP.voidcmd(cmd)", "intent": "Send a simple command string to the server and handle the response . With arguments `cmd`.", "question_id": 3925}
{"snippet": "statistics.pstdev(data, mu=None)", "intent": "Return the population standard deviation ( the square root of the population variance ) . With arguments `data`, `mu`.", "question_id": 9134}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "mh_message.set_sequences(sequences)", "intent": "Set the list of `sequences` that include this message .", "question_id": 5835}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "mailcap.findmatch(caps, MIMEtype, plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5864}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338}
{"snippet": "test.support.DirsOnSysPath(*paths)", "intent": "A context manager to temporarily add directories to sys.path . With arguments `*paths`.", "question_id": 10291}
{"snippet": "mailcap.findmatch(caps, key='view', filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5873}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "multiprocessing.Process(args=())", "intent": "Process objects represent activity that is run in a separate process . `args` is the argument tuple for the target invocation .", "question_id": 6169}
{"snippet": "asyncio.Queue(loop=None)", "intent": "A first in , first out ( FIFO ) queue . With arguments `loop`.", "question_id": 447}
{"snippet": "uuid.UUID(hex=None, bytes_le=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11946}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "nntplib.NNTP(host, timeout, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6402}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6120}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "locale.resetlocale(category=LC_ALL)", "intent": "Sets the locale for `category` to the default setting .", "question_id": 5381}
{"snippet": "filecmp.dircmp(a, b, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3762}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "calendar.yeardays2calendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 922}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "turtle.RawPen(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11159}
{"snippet": "turtle.textinput(title, prompt)", "intent": "Pop up a dialog window for input of a string . Parameter `title` is the title of the dialog window , `prompt` is a text mostly describing what information to input .", "question_id": 11083}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404}
{"snippet": "loop.set_default_executor(executor)", "intent": "Set `executor` as the default executor used by run_in_executor ( ) .", "question_id": 306}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "ctypes.CDLL(name, handle=None)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `handle`.", "question_id": 1742}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1709}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}
{"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618}
{"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "windows_proactor_event_loop_policy.attach_loop(loop)", "intent": "Attach the watcher to an event `loop` .", "question_id": 386}
{"snippet": "smtplib.SMTP_SSL(host='', port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `host` is not specified , the local host is used . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8486}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "cmd.Cmd(stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1130}
{"snippet": "mimetypes.init(files=None)", "intent": "Initialize the internal data structures . If given , `files` must be a sequence of file names which should be used to augment the default type map .", "question_id": 5946}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "writer.new_alignment(align)", "intent": "Set the alignment style . The `align` value can be any object , but by convention is a string or None , where None indicates that the writer \u2019 s \u201c preferred \u201d alignment should be used .", "question_id": 3842}
{"snippet": "test.support.TransientResource(exc, **kwargs)", "intent": "Instances are a context manager that raises ResourceDenied if the specified exception type is raised . With arguments `exc`, `**kwargs`.", "question_id": 10285}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499}
{"snippet": "shlex.shlex(instream=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d .", "question_id": 8274}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "test_result.addSubTest(test, subtest, outcome)", "intent": "Called when a `subtest` finishes . `test` is the test case corresponding to the test method . If `outcome` is None , the subtest succeeded .", "question_id": 11530}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "json.JSONEncoder(separators=None)", "intent": "Extensible JSON encoder for Python data structures . If specified , `separators` should be an ( item_separator , key_separator ) tuple .", "question_id": 5329}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}
{"snippet": "threading.Condition(lock=None)", "intent": "This class implements condition variable objects . If the `lock` argument is given and not None , it must be a Lock or RLock object , and it is used as the underlying lock .", "question_id": 10387}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "tempfile.mkdtemp(suffix=None, dir=None)", "intent": "Creates a temporary directory in the most secure manner possible . The `prefix` , `suffix` , and `dir` arguments are the same as for mkstemp ( ) .", "question_id": 10086}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12226}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}
{"snippet": "email.headerregistry.Address(display_name='', username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec . With arguments `display_name`.", "question_id": 3191}
{"snippet": "mailcap.findmatch(caps, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5874}
{"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}
{"snippet": "window.attron(attr)", "intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2013}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509}
{"snippet": "itertools.count(start=0)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "question_id": 5247}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`.", "question_id": 61}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "connection.executemany(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executemany ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8814}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "config_parser.optionxform(option)", "intent": "Transforms the `option` name option as found in an input file or as passed in by client code to the form that should be used in the internal structures .", "question_id": 1565}
{"snippet": "connection.backup(target, progress=None, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8837}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "ctypes.WinError(descr=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "question_id": 1838}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "snapshot.compare_to(old_snapshot: Snapshot, key_type: str, cumulative: bool=False)", "intent": "Compute the differences with an old snapshot . With arguments `old_snapshot: Snapshot`, `key_type: str`, `cumulative: bool`.", "question_id": 10872}
{"snippet": "email.utils.encode_rfc2231(s, charset=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3480}
{"snippet": "timer.repeat(number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) .", "question_id": 10513}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "logging.captureWarnings(capture)", "intent": "This function is used to turn the `capture` of warnings by logging on and off .", "question_id": 5654}
{"snippet": "subprocess.check_output(args, errors=None)", "intent": "Run command with arguments and return its output . This behaviour may be overridden by setting text , encoding , `errors` , or `universal_newlines` to True as described in Frequently Used Arguments and run ( ) . With arguments `args`.", "question_id": 9685}
{"snippet": "doctest.DocTestFinder(verbose=False)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder .", "question_id": 2841}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "ftplib.FTP(host='', passwd='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3886}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "style.lookup(style, option)", "intent": "Returns the value specified for `option` in `style` .", "question_id": 10677}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "ctypes.WinDLL(name, mode=DEFAULT_MODE)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return int by default . With arguments `name`, `mode`.", "question_id": 1761}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "types.new_class(name, bases=())", "intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11171}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "compileall.compile_path(force=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `force`.", "question_id": 1432}
{"snippet": "csv.writer(csvfile, **fmtparams, dialect='excel')", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1683}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "policy.header_store_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` provided by the application program when the application program is modifying a Message programmatically ( as opposed to a Message created by a parser ) .", "question_id": 3424}
{"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "io.open(file, mode='r')", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `mode`.", "question_id": 5052}
{"snippet": "joinable_queue.send_bytes(buffer)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` .", "question_id": 6238}
{"snippet": "dataclasses.field(compare=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "question_id": 2173}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "raw_io_base.read(size=-1)", "intent": "Read up to `size` bytes from the object and return them .", "question_id": 5085}
{"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3754}
{"snippet": "types.MappingProxyType(mapping)", "intent": "Read-only proxy of a `mapping` .", "question_id": 11206}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "memory_bio.write(buf)", "intent": "Write the bytes from `buf` to the memory BIO .", "question_id": 9058}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6794}
{"snippet": "mailbox.MH(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in MH format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5777}
{"snippet": "readline.set_completer(function)", "intent": "Set or remove the completer `function` .", "question_id": 8040}
{"snippet": "ftplib.FTP(host='', passwd='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3886}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "window.hline(y, x, ch, n)", "intent": "Display a horizontal line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "question_id": 2065}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`, `after_in_child`.", "question_id": 7052}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "property(fset=None, fdel=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value . `fdel` is a function for deleting an attribute value .", "question_id": 4093}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "http.server.SimpleHTTPRequestHandler(request, client_address, server)", "intent": "This class serves files from the current `directory` and below , directly mapping the directory structure to HTTP requests . A lot of the work , such as parsing the `request` , is done by the base class BaseHTTPRequestHandler . With arguments `client_address`, `server`.", "question_id": 4659}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "pkgutil.extend_path(path, name)", "intent": "Extend the search `path` for the modules which comprise a package . It also looks for *.pkg files beginning where * matches the `name` argument .", "question_id": 7436}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "parser.compilest(st, filename='<syntax-tree>')", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7223}
{"snippet": "socket.sendmsg_afalg(msg, op, iv)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`.", "question_id": 8729}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "incremental_decoder.decode(object)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object .", "question_id": 1275}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "window.getstr(n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `n`.", "question_id": 2060}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "HTTPConnection.set_tunnel(host, headers=None)", "intent": "Set the `host` and the `port` for HTTP Connect Tunnelling . The `headers` argument should be a mapping of extra HTTP headers to send with the CONNECT request .", "question_id": 4439}
{"snippet": "OpenerDirector.add_handler(handler)", "intent": "`handler` should be an instance of BaseHandler .", "question_id": 11834}
{"snippet": "xml.sax.xmlreader.AttributesImpl(attrs)", "intent": "This is an implementation of the Attributes interface ( see section The Attributes Interface ) . Objects of this class should be instantiated by readers ; `attrs` must be a dictionary-like object containing a mapping from attribute names to attribute values .", "question_id": 12611}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "memoryview(obj)", "intent": "Create a memoryview that references `obj` .", "question_id": 9411}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "multiprocessing.Process(kwargs={})", "intent": "Process objects represent activity that is run in a separate process . `kwargs` is a dictionary of keyword arguments for the target invocation .", "question_id": 6170}
{"snippet": "warnings.simplefilter(action, category=Warning, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `append`.", "question_id": 12038}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876}
{"snippet": "Path.rename(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7308}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "importlib.util.LazyLoader(loader)", "intent": "A class which postpones the execution of the `loader` of a module until the module has an attribute accessed .", "question_id": 4943}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171}
{"snippet": "nntplib.NNTP_SSL(host, timeout, user=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`, `user`.", "question_id": 6421}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "fileinput.FileInput(files=None, inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together . With arguments `files`.", "question_id": 3807}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "dataclasses.field(default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2169}
{"snippet": "http.server.SimpleHTTPRequestHandler(request, client_address, server)", "intent": "This class serves files from the current `directory` and below , directly mapping the directory structure to HTTP requests . A lot of the work , such as parsing the `request` , is done by the base class BaseHTTPRequestHandler . With arguments `client_address`, `server`.", "question_id": 4659}
{"snippet": "dis.dis(x=None, file=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "question_id": 2711}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "widget.get_children(item=None)", "intent": "Returns the list of children belonging to `item` .", "question_id": 10623}
{"snippet": "importlib.__import__(name, locals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `locals`.", "question_id": 4785}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "output_checker.check_output(want, got, optionflags)", "intent": "Return True iff the actual output from an example ( `got` ) matches the expected output ( `want` ) . With arguments `optionflags`.", "question_id": 2884}
{"snippet": "shelve.DbfilenameShelf(filename, flag='c')", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object . The optional `flag` parameter has the same interpretation as for the open ( ) function .", "question_id": 8261}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "SSLContext.wrap_socket(sock)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) .", "question_id": 9022}
{"snippet": "__import__(name, globals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4142}
{"snippet": "scheduler.enterabs(time, priority, action, argument=(), kwargs={})", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "question_id": 8121}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005}
{"snippet": "profile.Profile(builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . With arguments `builtins`.", "question_id": 7673}
{"snippet": "doctest.testmod(report=True)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2781}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673}
{"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}
{"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622}
{"snippet": "os.spawnlpe(mode, file, env)", "intent": "Execute the program path in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The variants which include a second \u201c p \u201d near the end ( spawnlp ( ) , spawnlpe ( ) , spawnvp ( ) , and spawnvpe ( ) ) will use the PATH environment variable to locate the program `file` . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7056}
{"snippet": "definition.__qualname__", "intent": "The qualified name of the class, function, method, descriptor, or generator instance.", "question_id": 9503}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "urllib.parse.urlencode(query, encoding=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11735}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "config_parser.items(raw=False)", "intent": "When section is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `raw`.", "question_id": 1553}
{"snippet": "email_message.set_param(param, value, requote=True)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . Use of the `requote` parameter with EmailMessage objects is deprecated . With arguments `param`.", "question_id": 3262}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "FileCookieJar.load(ignore_discard=False, ignore_expires=False)", "intent": "Load cookies from a file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4512}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087}
{"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "gc.get_referrers(*objs)", "intent": "Return the list of objects that directly refer to any of objs . With arguments `*objs`.", "question_id": 4181}
{"snippet": "argparse.FileType(bufsize=-1, encoding=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`, `encoding`.", "question_id": 93}
{"snippet": "proxy[key]", "intent": "Return the item of the underlying mapping with key key.", "question_id": 11208}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "decimal.compare_signal(other)", "intent": "This operation is identical to the compare ( ) method , except that all NaNs signal . With arguments `other`.", "question_id": 2401}
{"snippet": "xml.etree.ElementTree.register_namespace(prefix, uri)", "intent": "Registers a namespace `prefix` . `uri` is a namespace uri .", "question_id": 12450}
{"snippet": "test.support.check_syntax_error(testcase, statement)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "question_id": 10231}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}
{"snippet": "locale.format(format, val)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`.", "question_id": 5388}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "bz2.BZ2File(filename, mode='r', buffering=None, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . The `buffering` argument is ignored . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 893}
{"snippet": "memory_bio.write(buf)", "intent": "Write the bytes from `buf` to the memory BIO .", "question_id": 9058}
{"snippet": "scheduler.enter(delay, priority, action, argument=())", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`.", "question_id": 8123}
{"snippet": "subprocess.Popen(args, bufsize=-1)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `bufsize` will be supplied as the corresponding argument to the open ( ) function when creating the stdin/stdout/stderr pipe file objects :", "question_id": 9600}
{"snippet": "__import__(name, locals=None, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4143}
{"snippet": "style.configure(style, **kw)", "intent": "Query or set the default value of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10673}
{"snippet": "Record.GetInteger(field)", "intent": "Return the value of `field` as an integer where possible .", "question_id": 6082}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "Template.prepend(cmd, kind)", "intent": "Add a new action at the beginning . With arguments `cmd`, `kind`.", "question_id": 7432}
{"snippet": "ast.iter_fields(node)", "intent": "Yield a tuple of ( fieldname , value ) for each field in node._fields that is present on `node` .", "question_id": 156}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247}
{"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934}
{"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220}
{"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "header.append(s, errors='strict')", "intent": "Append the string `s` to the MIME header . Optional `errors` is passed as the errors argument to the decode call if s is a byte string .", "question_id": 3128}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}
{"snippet": "timeit.repeat(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10494}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334}
{"snippet": "Node.toprettyxml(newl=\"\\n\", encoding=None)", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "question_id": 12419}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131}
{"snippet": "help(object)", "intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "question_id": 4030}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "message.__delitem__(name)", "intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "question_id": 2968}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}
{"snippet": "os.getxattr(path, attribute)", "intent": "Return the value of the extended filesystem `attribute` attribute for `path` .", "question_id": 6993}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262}
{"snippet": "struct.pack_into(format, buffer, offset, v1, v2)", "intent": "Pack the values `v1` , `v2` , \u2026 according to the `format` string format and write the packed bytes into the writable `buffer` buffer starting at position `offset` .", "question_id": 9552}
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701}
{"snippet": "message.del_param(param)", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3009}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "base64.a85encode(b, wrapcol=0, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 734}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "calendar.yeardays2calendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 922}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "winreg.SetValue(key, sub_key, type, value)", "intent": "Associates a `value` with a specified `key` . `sub_key` is a string that names the subkey with which the value is associated . `type` is an integer that specifies the type of the data .", "question_id": 12150}
{"snippet": "zipapp.create_archive(source, target=None, compressed=False)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The optional `compressed` argument determines whether files are compressed .", "question_id": 12776}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "logging.handlers.SocketHandler(host, port)", "intent": "Returns a new instance of the SocketHandler class intended to communicate with a remote machine whose address is given by `host` and `port` .", "question_id": 5482}
{"snippet": "compat32.header_source_parse(sourcelines)", "intent": "The name is parsed as everything up to the \u2018 : \u2019 and returned unmodified . With arguments `sourcelines`.", "question_id": 3446}
{"snippet": "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request . If the optional `allow_dotted_names` argument is true and the instance does not have a _dispatch ( ) method , then if the requested method name contains periods , each component of the method name is searched for individually , with the effect that a simple hierarchical search is performed .", "question_id": 12736}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : With arguments `prog`, `parser_class`, `option_string`, `required`.", "question_id": 76}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "email.message_from_string(s, policy=policy.compat32)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) . `_class` and `policy` are interpreted as with the Parser class constructor .", "question_id": 3406}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "pickletools.dis(pickle, out=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7416}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "doctest.run_docstring_examples(f, globs, verbose=False, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . If optional argument `verbose` is true , output is generated even if there are no failures . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2793}
{"snippet": "tkinter.Tk(baseName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`, `className`.", "question_id": 10525}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}
{"snippet": "readline.set_pre_input_hook(function)", "intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "question_id": 8038}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "urllib.parse.urlencode(query, errors=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11736}
{"snippet": "bytes.lstrip(chars)", "intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "question_id": 9343}
{"snippet": "socket.recvfrom(bufsize)", "intent": "Receive data from the socket . With arguments `bufsize`.", "question_id": 8704}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "dbm.open(file)", "intent": "Open the database `file` file and return a corresponding object .", "question_id": 2366}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}
{"snippet": "SimpleXMLRPCServer.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request .", "question_id": 12735}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "task.get_stack(limit=None)", "intent": "Return the list of stack frames for this Task . The optional `limit` argument sets the maximum number of frames to return ; by default all available frames are returned .", "question_id": 635}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "pdb.runeval(expression)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control .", "question_id": 7331}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "locale.resetlocale(category=LC_ALL)", "intent": "Sets the locale for `category` to the default setting .", "question_id": 5381}
{"snippet": "struct.pack_into(buffer, offset, v1, v2)", "intent": "Identical to the pack_into ( ) function , using the compiled format . With arguments `buffer`, `offset`, `v1`, `v2`.", "question_id": 9560}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "policy.header_fetch_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message when that header is requested by the application program , and whatever the method returns is what is passed back to the application as the value of the header being retrieved .", "question_id": 3425}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860}
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}
{"snippet": "parser.compilest(st, filename='<syntax-tree>')", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7223}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "compileall.compile_file(fullname, ddir=None, force=False)", "intent": "Compile the file with path `fullname` . If `ddir` is given , it is prepended to the path to the file being compiled for use in compilation time tracebacks , and is also compiled in to the byte-code file , where it will be used in tracebacks and other messages in cases where the source file does not exist at the time the byte-code file is executed . With arguments `force`.", "question_id": 1427}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "winreg.CreateKeyEx(key, sub_key, reserved=0)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `reserved` is a reserved integer , and must be zero .", "question_id": 12124}
{"snippet": "tarfile.open(**kwargs, name=None)", "intent": "Return a TarFile object for the pathname `name` . With arguments `**kwargs`.", "question_id": 9891}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098}
{"snippet": "scheduler.enterabs(time, priority, action, argument=(), kwargs={})", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "question_id": 8121}
{"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "Telnet.read_until(expected)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10009}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6794}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11138}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "email.headerregistry.Address(username='', domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3194}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "calendar.itermonthdays(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 913}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080}
{"snippet": "turtle.numinput(title, prompt, default=None, minval=None, maxval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11091}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "str.endswith(suffix, start, end)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position . With optional `end` , stop comparing at that position .", "question_id": 9189}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, frozen=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2191}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "functools.update_wrapper(wrapper, wrapped, updated=WRAPPER_UPDATES)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4158}
{"snippet": "pprint.PrettyPrinter(indent=1, compact=False)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7632}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "types.MappingProxyType(mapping)", "intent": "Read-only proxy of a `mapping` .", "question_id": 11206}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5865}
{"snippet": "binary.encode(out)", "intent": "Write the XML-RPC base 64 encoding of this binary item to the `out` stream object .", "question_id": 12688}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "quopri.encodestring(s, header=False)", "intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . With arguments `s`, `header`.", "question_id": 7881}
{"snippet": "ipaddress.NetmaskValueError(ValueError)", "intent": "Any value error related to the net mask . With arguments `ValueError`.", "question_id": 5238}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "len(proxy)", "intent": "Return the number of items in the underlying mapping . With arguments `proxy`.", "question_id": 11210}
{"snippet": "turtle.onrelease(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`, `add`.", "question_id": 11026}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "curses.unget_wch(ch)", "intent": "Push `ch` so the next get_wch ( ) will return it .", "question_id": 1995}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\", method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12468}
{"snippet": "gettext.gettext(message)", "intent": "Return the localized translation of `message` , based on the current global domain , language , and locale directory .", "question_id": 4216}
{"snippet": "plistlib.loads(data, fmt=None)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`.", "question_id": 7556}
{"snippet": "message.__str__()", "intent": "Equivalent to as_string ( ) .", "question_id": 2946}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "xml.etree.ElementInclude.include(elem, loader=None)", "intent": "This function expands XInclude directives . `elem` is the root element . `loader` is an optional resource loader .", "question_id": 12476}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "random.gammavariate(alpha, beta)", "intent": "Gamma distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7911}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "doctest.Example(source, want, exc_msg=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `exc_msg`.", "question_id": 2825}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "test.support.calcvobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nPn { `fmt` } 0n or , if gettotalrefcount exists , 2PnPn { fmt } 0P .", "question_id": 10201}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "@unittest.skipIf(condition, reason)", "intent": "Skip the decorated test if `condition` is true . With arguments `reason`.", "question_id": 11359}
{"snippet": "FTP.connect(port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3906}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "OpenerDirector.add_handler(handler)", "intent": "`handler` should be an instance of BaseHandler .", "question_id": 11834}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "copyreg.constructor(object)", "intent": "Declares `object` to be a valid constructor .", "question_id": 1665}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459}
{"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}
{"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "null_handler.emit(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5437}
{"snippet": "socket.recvmsg(bufsize)", "intent": "Receive normal data ( up to `bufsize` bytes ) and ancillary data from the socket .", "question_id": 8707}
{"snippet": "turtle.onkeypress(fun)", "intent": "Bind `fun` to key-press event of `key` if key is given , or to any key-press-event if no key is given .", "question_id": 11069}
{"snippet": "decimal.fma(other, third, context=None)", "intent": "Fused multiply-add . With arguments `other`, `third`, `context`.", "question_id": 2416}
{"snippet": "widget.insert(pos, child, **kw)", "intent": "Inserts a pane at the specified position . `pos` is either the string \u201c end \u201d , an integer index , or the name of a managed `child` . With arguments `**kw`.", "question_id": 10608}
{"snippet": "str.rsplit(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9237}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "formatter.assert_line_data(flag=1)", "intent": "Inform the formatter that data has been added to the current paragraph out-of-band . The optional `flag` argument can be set to false if the writer manipulations produced a hard line break at the end of the output .", "question_id": 3837}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . `session` , see session .", "question_id": 9031}
{"snippet": "__import__(name, globals=None, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4141}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "Decompress.decompress(data, max_length=0)", "intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string . If the optional parameter `max_length` is non-zero then the return value will be no longer than max_length .", "question_id": 12935}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "os.link(src, dst, dst_dir_fd=None)", "intent": "Create a hard link pointing to `src` named `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors , and not following symlinks .", "question_id": 6852}
{"snippet": "turtle.tracer(n=None, delay=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11061}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994}
{"snippet": "xmlparser.EndNamespaceDeclHandler(prefix)", "intent": "Called when the closing tag is reached for an element that contained a namespace declaration . With arguments `prefix`.", "question_id": 7768}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 967}
{"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "calendar.itermonthdays(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 913}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "warnings.filterwarnings(action, message='', category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `category`.", "question_id": 12029}
{"snippet": "nntplib.NNTP_SSL(host, timeout, port=563, password=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`, `password`.", "question_id": 6427}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "bz2.open(filename, mode='r', errors=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 884}
{"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796}
{"snippet": "bdb.set_break(filename, lineno, cond, funcname)", "intent": "Set a new breakpoint . If the `lineno` line doesn \u2019 t exist for the `filename` passed as argument , return an error message . With arguments `cond`, `funcname`.", "question_id": 793}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes .", "question_id": 12242}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "codecs.open(filename)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "question_id": 1225}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "InteractiveInterpreter.runsource(source, filename=\"<input>\")", "intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "question_id": 1176}
{"snippet": "turtle.onrelease(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`, `add`.", "question_id": 11026}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "sysconfig.get_path(name, scheme, vars)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) .", "question_id": 9863}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}
{"snippet": "element_tree.find(match)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`.", "question_id": 12512}
{"snippet": "HTTPPasswordMgr.find_user_password(realm, authuri)", "intent": "Same as for HTTPPasswordMgrWithDefaultRealm objects With arguments `realm`, `authuri`.", "question_id": 11861}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "stream_handler.setStream(stream)", "intent": "Sets the instance \u2019 s `stream` to the specified value , if it is different .", "question_id": 5425}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "bytearray.partition(sep)", "intent": "Split the sequence at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9306}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}
{"snippet": "Pattern.subn(repl, string, count=0)", "intent": "Identical to the subn ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7990}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "message.__str__()", "intent": "Equivalent to as_string ( ) .", "question_id": 2946}
{"snippet": "unittest.mock.patch(target, **kwargs)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11608}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "email.utils.formatdate(localtime=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account .", "question_id": 3470}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "compile(source, filename, mode, flags=0, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3996}
{"snippet": "connection.execute(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8812}
{"snippet": "style.theme_create(themename, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10688}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "ZipFile.extract(member, path=None, pwd=None)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "question_id": 12817}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "test_case.assertIsNot(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11385}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "turtle.onrelease(fun, btn=1)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`.", "question_id": 11024}
{"snippet": "operator.itemgetter(*items)", "intent": "Return a callable object that fetches item from its operand using the operand \u2019 s __getitem__ ( ) method . With arguments `*items`.", "question_id": 6585}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11426}
{"snippet": "IMAP4.uid(command, arg)", "intent": "Execute `command` args with messages identified by UID , rather than message number . With arguments `arg`.", "question_id": 4749}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "types.prepare_class(name, bases=())", "intent": "Calculates the appropriate metaclass and creates the class namespace . The arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) and the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11179}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "readline.set_pre_input_hook(function)", "intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "question_id": 8038}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262}
{"snippet": "socket.sendmsg_afalg(msg, op, iv, assoclen, flags)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . Set mode , IV , AEAD associated data length and `flags` for AF_ALG socket . With arguments `msg`, `op`, `iv`, `assoclen`.", "question_id": 8727}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "calendar.calendar(year, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `m`.", "question_id": 1015}
{"snippet": "platform.architecture(executable=sys.executable)", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information .", "question_id": 7459}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "cgi.parse_qsl(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1043}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661}
{"snippet": "syslog.syslog(priority, message)", "intent": "Send the string `message` to the system logger . Each message is tagged with a `priority` composed of a facility and a level .", "question_id": 9878}
{"snippet": "test.support.start_threads(threads, unlock=None)", "intent": "Context manager to start `threads` . With arguments `unlock`.", "question_id": 10199}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5709}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}
{"snippet": "test.support.import_fresh_module(name, fresh=(), deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10247}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "importlib.util.spec_from_loader(name, loader, origin=None)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`, `origin`.", "question_id": 4935}
{"snippet": "config_parser.remove_section(section)", "intent": "Remove the specified `section` from the configuration .", "question_id": 1564}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, unsafe_hash=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2190}
{"snippet": "os.setreuid(ruid, euid)", "intent": "Set the current process \u2019 s real and effective user ids . With arguments `ruid`, `euid`.", "question_id": 6703}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "code.interact(banner=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1167}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "mock._get_child_mock(**kw)", "intent": "Create the child mocks for attributes and return value . With arguments `**kw`.", "question_id": 11587}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016}
{"snippet": "test.support.calcvobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nPn { `fmt` } 0n or , if gettotalrefcount exists , 2PnPn { fmt } 0P .", "question_id": 10201}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "calendar.yeardayscalendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 924}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312}
{"snippet": "loop.sock_sendall(sock, data)", "intent": "Send `data` to the `sock` socket .", "question_id": 278}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "Telnet.read_until(expected)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10009}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "csv.DictReader(f, *args, **kwds, restkey=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`.", "question_id": 1694}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "platform.libc_ver(lib='', chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7546}
{"snippet": "concurrent.futures.wait(fs, timeout=None)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `timeout` can be used to control the maximum number of seconds to wait before returning .", "question_id": 1481}
{"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "sys.setcheckinterval(interval)", "intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "question_id": 9834}
{"snippet": "bdb.Breakpoint(self, file, line, cond=None, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`, `cond`.", "question_id": 760}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "scheduler.enter(delay, priority, action, argument=())", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`.", "question_id": 8123}
{"snippet": "queue.put(obj, block)", "intent": "Put `obj` into the queue . If the optional argument `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 6201}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "email.iterators.typed_subpart_iterator(msg, maintype='text')", "intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "question_id": 3211}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0, cond=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.", "question_id": 758}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)", "intent": "Return a new Dialog object . An entry in the Dialog table is made , with the specified coordinates , dialog attributes , `title` , `name` of the `first` , `default` , and `cancel` controls . With arguments `db`, `x`, `y`, `w`, `h`, `attr`.", "question_id": 6135}
{"snippet": "DatagramTransport.sendto(data, addr=None)", "intent": "Send the `data` bytes to the remote peer given by `addr` ( a transport-dependent target address ) .", "question_id": 417}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "TarFile.extractall(path=\".\", members=None, numeric_owner=False)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "question_id": 9939}
{"snippet": "loop.sendfile(transport, file, count=None)", "intent": "Send a `file` over a `transport` . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 258}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "robot_file_parser.parse(lines)", "intent": "Parses the `lines` argument .", "question_id": 11911}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "bdb.runeval(expr)", "intent": "Debug an expression executed via the eval ( ) function . With arguments `expr`.", "question_id": 811}
{"snippet": "ctypes._Pointer", "intent": "Private, abstract base class for pointers.", "question_id": 1896}
{"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this handler .", "question_id": 5602}
{"snippet": "bisect.insort_right(a, x, lo=0, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`, `hi`.", "question_id": 871}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "traceback.FrameSummary(filename, lineno, name)", "intent": "Represent a single frame in the traceback or stack that is being formatted or printed . With arguments `filename`, `lineno`, `name`.", "question_id": 10833}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "test.support.join_thread(thread, timeout=30.0)", "intent": "Join a `thread` within `timeout` .", "question_id": 10255}
{"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145}
{"snippet": "subprocess.Popen(args, stdin=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9602}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "difflib.context_diff(a, b, fromfile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2629}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1706}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "subprocess.run(args, stderr=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9571}
{"snippet": "ArgumentParser.get_default(dest)", "intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "question_id": 102}
{"snippet": "message.get_param(param, header='content-type')", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2993}
{"snippet": "sync_manager.Barrier(parties, action)", "intent": "Create a shared threading.Barrier object and return a proxy for it . With arguments `parties`, `action`.", "question_id": 6297}
{"snippet": "test_case.assertNotRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11444}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stderr=None)", "intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`.", "question_id": 526}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "test_case.assertAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11420}
{"snippet": "telnetlib.Telnet(timeout, port=0)", "intent": "Telnet represents a connection to a Telnet server . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . Alternatively , the `host` name and optional `port` number can be passed to the constructor too , in which case the connection to the server will be established before the constructor returns .", "question_id": 10003}
{"snippet": "dbm.open(file)", "intent": "Open the database `file` file and return a corresponding object .", "question_id": 2366}
{"snippet": "connection.cursor(factory=Cursor)", "intent": "The cursor method accepts a single optional parameter `factory` .", "question_id": 8807}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "message.get_param(param)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2991}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "re.findall(pattern, string, flags=0)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings . With arguments `flags`.", "question_id": 7948}
{"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra)", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.", "question_id": 12451}
{"snippet": "code.interact(banner=None, readfunc=None)", "intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided . This creates a new instance of InteractiveConsole and sets `readfunc` to be used as the InteractiveConsole.raw_input ( ) method , if provided .", "question_id": 1166}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "subprocess.call(args, stdin=None, stdout=None)", "intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `stdin`.", "question_id": 9666}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "message.get_param(param, failobj=None, unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . If the message has no Content-Type header or if there is no such parameter , then `failobj` is returned ( defaults to None ) . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2996}
{"snippet": "FileCookieJar.load(ignore_discard=False, ignore_expires=False)", "intent": "Load cookies from a file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4512}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}
{"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}
{"snippet": "TarInfo.tobuf(format=DEFAULT_FORMAT, encoding=ENCODING)", "intent": "Create a string buffer from a TarInfo object . With arguments `format`, `encoding`.", "question_id": 9977}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "email.utils.localtime(dt=None)", "intent": "Return local time as an aware datetime object . Otherwise `dt` argument should be a datetime instance , and it is converted to the local time zone according to the system time zone database .", "question_id": 3453}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "inspect.Parameter(name, kind)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`.", "question_id": 4993}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "curses.setupterm(term=None, fd=-1)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "question_id": 1982}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`, `MIMEtype`.", "question_id": 5862}
{"snippet": "difflib.unified_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2653}
{"snippet": "concurrent.futures.wait(fs, timeout=None)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `timeout` can be used to control the maximum number of seconds to wait before returning .", "question_id": 1481}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`.", "question_id": 75}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "bz2.BZ2File(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly .", "question_id": 887}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "BaseHandler.http_error_<nnn>(req, fp, code, msg, hdrs)", "intent": "nnn should be a three-digit HTTP error `code` . With arguments `req`, `fp`, `msg`, `hdrs`.", "question_id": 11847}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508}
{"snippet": "FTP.retrlines(cmd)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "question_id": 3930}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}
{"snippet": "bz2.open(filename, mode='r', compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 882}
{"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615}
{"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}
{"snippet": "io.FileIO(name, closefd=True)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : With arguments `closefd`.", "question_id": 5101}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797}
{"snippet": "timeit.repeat(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10494}
{"snippet": "BufferedProtocol.buffer_updated(nbytes)", "intent": "Called when the buffer was updated with the received data . `nbytes` is the total number of bytes that were written to the buffer .", "question_id": 438}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "ipaddress.AddressValueError(ValueError)", "intent": "Any value error related to the address . With arguments `ValueError`.", "question_id": 5237}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}
{"snippet": "POP3.rset()", "intent": "Remove any deletion marks for the mailbox .", "question_id": 7613}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`, `add`.", "question_id": 11074}
{"snippet": "threading.Thread(daemon=None)", "intent": "This constructor should always be called with keyword arguments . If not None , `daemon` explicitly sets whether the thread is daemonic .", "question_id": 10358}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "doctest.Example(source, want, lineno=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`.", "question_id": 2826}
{"snippet": "pprint.pformat(object, indent=1, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7638}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11149}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`.", "question_id": 75}
{"snippet": "subprocess.run(args, check=False)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9576}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "test.support.requires(resource)", "intent": "Raise ResourceDenied if `resource` is not available .", "question_id": 10147}
{"snippet": "inspect_loader.exec_module(module)", "intent": "Implementation of Loader.exec_module ( ) . With arguments `module`.", "question_id": 4831}
{"snippet": "nntplib.NNTP(host, timeout, user=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6401}
{"snippet": "finder.find_module(fullname)", "intent": "An abstract method for finding a loader for the specified module . With arguments `fullname`.", "question_id": 4800}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "dispatcher.create_socket(family=socket.AF_INET)", "intent": "This is identical to the creation of a normal socket , and will use the same options for creation . With arguments `family`.", "question_id": 664}
{"snippet": "ast.parse(source, filename='<unknown>', mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 148}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "xmlrpc.server.DocXMLRPCServer(addr)", "intent": "Create a new server instance . With arguments `addr`.", "question_id": 12749}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "os.spawnv(mode, path, args)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "question_id": 7057}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "object.__reduce_ex__(protocol)", "intent": "Alternatively , a __reduce_ex__ ( ) method may be defined . The only difference is this method should take a single integer argument , the `protocol` version .", "question_id": 7414}
{"snippet": "doctest.testmod(report=True)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2781}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "xml.sax.saxutils.quoteattr(data, entities={})", "intent": "Similar to escape ( ) , but also prepares `data` to be used as an attribute value . With arguments `entities`.", "question_id": 12657}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "doc_test_runner.summarize(verbose=None)", "intent": "Print a summary of all the test cases that have been run by this DocTestRunner , and return a named tuple TestResults ( failed , attempted ) . The optional `verbose` argument controls how detailed the summary is .", "question_id": 2882}
{"snippet": "memory_bio.write(buf)", "intent": "Write the bytes from `buf` to the memory BIO .", "question_id": 9058}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802}
{"snippet": "email_message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3261}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1709}
{"snippet": "uuid.UUID(hex=None, bytes_le=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11946}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080}
{"snippet": "socket.sendmsg_afalg(msg, op, iv, assoclen, flags)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . Set mode , IV , AEAD associated data length and `flags` for AF_ALG socket . With arguments `msg`, `op`, `iv`, `assoclen`.", "question_id": 8727}
{"snippet": "inspect.getattr_static(obj, attr, default=None)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.", "question_id": 5035}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409}
{"snippet": "glob.iglob(pathname, recursive=False)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`, `recursive`.", "question_id": 4267}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "connection.cursor(factory=Cursor)", "intent": "The cursor method accepts a single optional parameter `factory` .", "question_id": 8807}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "element.makeelement(tag, attrib)", "intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "question_id": 12505}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}
{"snippet": "inspect.Parameter(name, kind)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`.", "question_id": 4993}
{"snippet": "connection.backup(target, pages=0)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time .", "question_id": 8830}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11129}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375}
{"snippet": "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY, reserved=0)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `access` is an integer that specifies an access mask that describes the desired security access for the key . `reserved` is a reserved integer , and must be zero .", "question_id": 12131}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "parser.compilest(st, filename='<syntax-tree>')", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7223}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10971}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923}
{"snippet": "base64.a85encode(b, wrapcol=0, adobe=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it . `adobe` controls whether the encoded byte sequence is framed with < ~ and ~ > , which is used by the Adobe implementation .", "question_id": 735}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "decimal.quantize(exp, rounding=None, context=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . In this case , the rounding mode is determined by the rounding argument if given , else by the given `context` argument ; if neither argument is given the rounding mode of the current thread \u2019 s context is used . With arguments `exp`.", "question_id": 2464}
{"snippet": "XMLReader.setContentHandler(handler)", "intent": "Set the current ContentHandler . With arguments `handler`.", "question_id": 12615}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "_thread.start_new_thread(function, args, kwargs)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "question_id": 12943}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494}
{"snippet": "random.setstate(state)", "intent": "`state` should have been obtained from a previous call to getstate ( ) , and setstate ( ) restores the internal state of the generator to what it was at the time getstate ( ) was called .", "question_id": 7888}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild, context)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . `context` can be used to specify the context used for starting the worker processes . With arguments `initargs`.", "question_id": 6326}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347}
{"snippet": "NNTP.newnews(group, date)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "question_id": 6463}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "loop.create_unix_server(protocol_factory, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `backlog`.", "question_id": 245}
{"snippet": "unittest.TextTestRunner(verbosity=1)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `verbosity`.", "question_id": 11536}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10976}
{"snippet": "xml.sax.saxutils.unescape(data, entities={})", "intent": "Unescape ' & amp ; ' , ' & lt ; ' , and ' & gt ; ' in a string of `data` . You can unescape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12655}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "email.utils.formatdate(localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3474}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494}
{"snippet": "fileinput.FileInput(mode='r')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With `mode` you can specify which file mode will be passed to open ( ) .", "question_id": 3805}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "calendar.timegm(tuple)", "intent": "An unrelated but handy function that takes a time `tuple` such as returned by the gmtime ( ) function in the time module , and returns the corresponding Unix timestamp value , assuming an epoch of 1970 , and the POSIX encoding .", "question_id": 1021}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "ZipFile.setpassword(pwd)", "intent": "Set `pwd` as default password to extract encrypted files .", "question_id": 12827}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10975}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}
{"snippet": "FTP.sendcmd(cmd)", "intent": "Send a simple command string to the server and return the response string . With arguments `cmd`.", "question_id": 3924}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "queue.put(obj, block)", "intent": "Put `obj` into the queue . If the optional argument `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 6201}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "winreg.SetValueEx(key, value_name, reserved, type, value)", "intent": "Stores data in the `value` field of an open registry `key` . `value_name` is a string that names the subkey with which the value is associated . `reserved` can be anything \u2013 zero is always passed to the API . `type` is an integer that specifies the type of the data .", "question_id": 12151}
{"snippet": "ContentHandler.startElementNS(name, qname, attrs)", "intent": "Signals the start of an element in namespace mode . The `name` parameter contains the name of the element type as a ( uri , localname ) tuple , the `qname` parameter contains the raw XML 1.0 name used in the source document , and the `attrs` parameter holds an instance of the AttributesNS interface ( see The AttributesNS Interface ) containing the attributes of the element .", "question_id": 12577}
{"snippet": "ctypes.Union(*args, **kw)", "intent": "Abstract base class for unions in native byte order . With arguments `*args`, `**kw`.", "question_id": 1886}
{"snippet": "logging.basicConfig(**kwargs)", "intent": "Does basic configuration for the logging system by creating a StreamHandler with a default Formatter and adding it to the root logger . With arguments `**kwargs`.", "question_id": 5649}
{"snippet": "sync_manager.dict(sequence)", "intent": "Create a shared dict object and return a proxy for it . With arguments `sequence`.", "question_id": 6315}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "mmap.mmap(fileno, length, offset, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `offset` may be specified as a non-negative integer offset . With arguments `access`.", "question_id": 5978}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}
{"snippet": "email.iterators.body_line_iterator(msg, decode=False)", "intent": "This iterates over all the payloads in all the subparts of `msg` , returning the string payloads line-by-line . Optional `decode` is passed through to Message.get_payload .", "question_id": 3209}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "ctypes._Pointer", "intent": "Private, abstract base class for pointers.", "question_id": 1896}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "profile.Profile(timeunit=0.0, builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . If the number is an integer , the `timeunit` specifies a multiplier that specifies the duration of each unit of time . With arguments `builtins`.", "question_id": 7678}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}
{"snippet": "datetime.time(hour=0, microsecond=0)", "intent": "All arguments are optional . With arguments `hour`, `microsecond`.", "question_id": 2323}
{"snippet": "POP3.getwelcome()", "intent": "Returns the greeting string sent by the POP3 server .", "question_id": 7602}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "writer.new_styles(styles)", "intent": "Set additional `styles` .", "question_id": 3846}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "chunk.seek(pos)", "intent": "Set the chunk \u2019 s current position . With arguments `pos`.", "question_id": 1087}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}
{"snippet": "sync_manager.list(sequence)", "intent": "Create a shared list object and return a proxy for it . With arguments `sequence`.", "question_id": 6317}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "urllib.parse.urlencode(query, encoding=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11735}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "warnings.showwarning(message, category, filename, lineno)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12017}
{"snippet": "bdb.effective(file, line, frame)", "intent": "Determine if there is an effective ( active ) breakpoint at this `line` of code . With arguments `file`, `frame`.", "question_id": 818}
{"snippet": "mailcap.findmatch(caps, plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5872}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'str'>`.", "question_id": 3044}
{"snippet": "str.rstrip(chars)", "intent": "Return a copy of the string with trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9239}
{"snippet": "calendar.yeardayscalendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 924}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302}
{"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056}
{"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'EmailMessage'>`.", "question_id": 3063}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "types.ModuleType(name, doc=None)", "intent": "The type of modules . Constructor takes the `name` of the module to be created and optionally its docstring . With arguments `doc`.", "question_id": 11197}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302}
{"snippet": "window.border(ls, rs, ts, bs, tl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`.", "question_id": 2022}
{"snippet": "email.encoders.encode_quopri(msg)", "intent": "Encodes the payload into quoted-printable form and sets the Content-Transfer-Encoding header to quoted-printable 1 . With arguments `msg`.", "question_id": 3069}
{"snippet": "ast.fix_missing_locations(node)", "intent": "When you compile a `node` tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them .", "question_id": 152}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}
{"snippet": "bdb.checkfuncname(b, frame)", "intent": "Check whether we should break here , depending on the way the breakpoint `b` was set . If it was set via line number , it checks if b.line is the same as the one in the `frame` also passed as argument .", "question_id": 817}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "ZipFile.setpassword(pwd)", "intent": "Set `pwd` as default password to extract encrypted files .", "question_id": 12827}
{"snippet": "winreg.OpenKey(key, sub_key, access=KEY_READ)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12140}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "signal.setitimer(which, seconds)", "intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "question_id": 8391}
{"snippet": "http.server.SimpleHTTPRequestHandler(request, client_address, server)", "intent": "This class serves files from the current `directory` and below , directly mapping the directory structure to HTTP requests . A lot of the work , such as parsing the `request` , is done by the base class BaseHTTPRequestHandler . With arguments `client_address`, `server`.", "question_id": 4659}
{"snippet": "InteractiveInterpreter.runsource(source)", "intent": "Compile and run some `source` in the interpreter .", "question_id": 1175}
{"snippet": "codecs.decode(obj)", "intent": "Decodes `obj` using the codec registered for `encoding` .", "question_id": 1196}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "os.popen(cmd, mode='r')", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' .", "question_id": 7042}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "os.lseek(fd, pos, how)", "intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "question_id": 6734}
{"snippet": "zlib.compressobj(level=-1, wbits=MAX_WBITS)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . The `wbits` argument controls the size of the history buffer ( or the \u201c window size \u201d ) used when compressing data , and whether a header and trailer is included in the output .", "question_id": 12914}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "unicodedata.digit(chr)", "intent": "Returns the digit value assigned to the character `chr` as integer .", "question_id": 11346}
{"snippet": "locale.nl_langinfo(option)", "intent": "Return some locale-specific information as a string . With arguments `option`.", "question_id": 5353}
{"snippet": "multiprocessing.sharedctypes.synchronized(obj, lock)", "intent": "Return a process-safe wrapper object for a ctypes object which uses `lock` to synchronize access . With arguments `obj`.", "question_id": 6276}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "mailcap.findmatch(caps, plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5872}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "DatagramProtocol.datagram_received(data, addr)", "intent": "Called when a datagram is received . `data` is a bytes object containing the incoming data . `addr` is the address of the peer sending the data ; the exact format depends on the transport .", "question_id": 440}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "asyncio.open_connection(ssl=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `ssl`.", "question_id": 468}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "sqlite3.version_info", "intent": "The version number of this module, as a tuple of integers.", "question_id": 8792}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "datetime.fromtimestamp(timestamp)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2261}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "ipaddress.AddressValueError(ValueError)", "intent": "Any value error related to the address . With arguments `ValueError`.", "question_id": 5237}
{"snippet": "re.subn(pattern, repl, string, count=0)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `count`.", "question_id": 7956}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "bytes.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9308}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "str.endswith(suffix, start, end)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position . With optional `end` , stop comparing at that position .", "question_id": 9189}
{"snippet": "turtle.onrelease(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`, `add`.", "question_id": 11026}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "incremental_decoder.setstate(state)", "intent": "Set the `state` of the decoder to state .", "question_id": 1278}
{"snippet": "mmap.seek(pos)", "intent": "Set the file \u2019 s current position . With arguments `pos`.", "question_id": 6018}
{"snippet": "ur_lopener.open(fullurl)", "intent": "Open `fullurl` using the appropriate protocol .", "question_id": 11892}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "subprocess.Popen(args, stdout=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9603}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "configparser.RawConfigParser(':'), ';'), defaults=None)", "intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`, `defaults`.", "question_id": 1580}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}
{"snippet": "BaseProtocol.connection_lost(exc)", "intent": "Called when the connection is lost or closed . With arguments `exc`.", "question_id": 432}
{"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}
{"snippet": "window.attrset(attr)", "intent": "Set the \u201c background \u201d set of attributes to `attr` .", "question_id": 2014}
{"snippet": "WriteTransport.set_write_buffer_limits(high=None, low=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 412}
{"snippet": "lzma.LZMAFile(check=-1)", "intent": "Open an LZMA-compressed file in binary `mode` . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5670}
{"snippet": "mailbox.Maildir(dirname, factory=None)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation .", "question_id": 5755}
{"snippet": "context_var.get(default)", "intent": "Return a value for the context variable for the current context . With arguments `default`.", "question_id": 1640}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "InteractiveConsole.raw_input(prompt=\"\")", "intent": "Write a `prompt` and read a line .", "question_id": 1191}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "plistlib.loads(data, use_builtin_types=True, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `use_builtin_types`, `dict_type`.", "question_id": 7561}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "style.lookup(style, option, default=None)", "intent": "Returns the value specified for `option` in `style` . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "question_id": 10679}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "help(object)", "intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "question_id": 4030}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}
{"snippet": "POP3.pass_(password)", "intent": "Send `password` , response includes message count and mailbox size .", "question_id": 7605}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "ipaddress.NetmaskValueError(ValueError)", "intent": "Any value error related to the net mask . With arguments `ValueError`.", "question_id": 5238}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051}
{"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, comment_prefixes=('#')", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `comment_prefixes`.", "question_id": 1574}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "loader.create_module(spec)", "intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "question_id": 4814}
{"snippet": "null_translations.install(names=None)", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "question_id": 4259}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "nntplib.NNTP_SSL(host, user=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `user`.", "question_id": 6431}
{"snippet": "future.set_exception(exception)", "intent": "Mark the Future as done and set an `exception` .", "question_id": 363}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "AU_write.setcomptype(type, name)", "intent": "Set the compression `type` and description . With arguments `name`.", "question_id": 9725}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "platform.libc_ver(version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7540}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "window.border(ls, rs, ts, bs, tl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`.", "question_id": 2022}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "FTP.transfercmd(cmd)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection .", "question_id": 3943}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}
{"snippet": "datetime.isoformat(sep='T', timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2309}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "InteractiveInterpreter.runsource(source)", "intent": "Compile and run some `source` in the interpreter .", "question_id": 1175}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "os.symlink(src, dst, target_is_directory=False)", "intent": "Create a symbolic link pointing to `src` named `dst` . Otherwise , the symlink will be created as a directory if `target_is_directory` is True or a file symlink ( the default ) otherwise .", "question_id": 6952}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196}
{"snippet": "Codec.encode(input, errors)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "question_id": 1261}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "Telnet.expect(list, timeout=None)", "intent": "Read until one from a `list` of a regular expressions matches . The optional second argument is a `timeout` , in seconds ; the default is to block indefinitely .", "question_id": 10031}
{"snippet": "window.chgat(y, x, num, attr)", "intent": "Set the attributes of `num` characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2033}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css', encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 969}
{"snippet": "xmlparser.EndNamespaceDeclHandler(prefix)", "intent": "Called when the closing tag is reached for an element that contained a namespace declaration . With arguments `prefix`.", "question_id": 7768}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "style.layout(style)", "intent": "Define the widget layout for given `style` .", "question_id": 10681}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "msilib.FCICreate(cabname, files)", "intent": "Create a new CAB file named `cabname` . `files` must be a list of tuples , each containing the name of the file on disk , and the name of the file inside the CAB file .", "question_id": 6058}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "math.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 5895}
{"snippet": "ftplib.FTP(host='', passwd='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3886}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "mailcap.findmatch(caps, MIMEtype)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . With arguments `caps`, `MIMEtype`.", "question_id": 5861}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "bytearray.partition(sep)", "intent": "Split the sequence at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9306}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673}
{"snippet": "NNTP.xhdr(hdr, str, file=None)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search . If the `file` parameter is supplied , then the output of the XHDR command is stored in a file .", "question_id": 6498}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}
{"snippet": "pprint.PrettyPrinter(depth=None)", "intent": "Construct a PrettyPrinter instance . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7626}
{"snippet": "test_case.assertNotIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11397}
{"snippet": "email.utils.formataddr(pair, charset='utf-8')", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified . Optional `charset` is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters .", "question_id": 3462}
{"snippet": "socket.ioctl(control, option)", "intent": "The ioctl ( ) method is a limited interface to the WSAIoctl system interface . Currently only the following `control` codes are supported : SIO_RCVALL , SIO_KEEPALIVE_VALS , and SIO_LOOPBACK_FAST_PATH . With arguments `option`.", "question_id": 8688}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "timeit.timeit(stmt='pass', number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10484}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "incremental_decoder.decode(object)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object .", "question_id": 1275}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "turtle.textinput(title, prompt)", "intent": "Pop up a dialog window for input of a string . Parameter `title` is the title of the dialog window , `prompt` is a text mostly describing what information to input .", "question_id": 11083}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "pty.spawn(argv, master_read)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . The functions `master_read` and `stdin_read` are passed a file descriptor which they should read from , and they should always return a byte string . With arguments `argv`.", "question_id": 7701}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "ossaudiodev.open(device, mode)", "intent": "Open an audio `device` and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7175}
{"snippet": "str.strip(chars)", "intent": "Return a copy of the string with the leading and trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9250}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "email.iterators.typed_subpart_iterator(msg, maintype='text', subtype=None)", "intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "question_id": 3213}
{"snippet": "curses.unctrl(ch)", "intent": "Return a bytes object which is a printable representation of the character `ch` .", "question_id": 1992}
{"snippet": "pdb.run(statement)", "intent": "Execute the `statement` ( given as a string or a code object ) under debugger control .", "question_id": 7327}
{"snippet": "profile.Profile(timeunit=0.0, builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . If the number is an integer , the `timeunit` specifies a multiplier that specifies the duration of each unit of time . With arguments `builtins`.", "question_id": 7678}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild, context)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . `context` can be used to specify the context used for starting the worker processes . With arguments `initargs`.", "question_id": 6326}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "loop.set_debug(enabled: bool)", "intent": "Set the debug mode of the event loop . With arguments `enabled: bool`.", "question_id": 312}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "os.chmod(path, mode)", "intent": "Change the `mode` of `path` to the numeric mode .", "question_id": 6835}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_side=False, server_hostname=None, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9040}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "faulthandler.register(signum)", "intent": "Register a user signal : install a handler for the `signum` signal to dump the traceback of all threads , or of the current thread if `all_threads` is False , into `file` .", "question_id": 3731}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "argparse.ArgumentParser(usage=None)", "intent": "Create a new ArgumentParser object . With arguments `usage`.", "question_id": 50}
{"snippet": "doctest.Example(source, want, exc_msg=None, lineno=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `exc_msg`, `lineno`.", "question_id": 2829}
{"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "ctypes.wstring_at(address)", "intent": "This function returns the wide character string starting at memory `address` address as a string .", "question_id": 1840}
{"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483}
{"snippet": "BaseCookie.output(header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4586}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "shutil.copymode(src, dst, follow_symlinks=True)", "intent": "Copy the permission bits from `src` to `dst` . If `follow_symlinks` is false , and both src and dst are symbolic links , copymode ( ) will attempt to modify the mode of dst itself ( rather than the file it points to ) .", "question_id": 8315}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "locale.currency(val, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5395}
{"snippet": "io.open(file, closefd=True)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `closefd`.", "question_id": 5057}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "codecs.strict_errors(exception)", "intent": "Implements the 'strict ' error handling : each encoding or decoding error raises a UnicodeError . With arguments `exception`.", "question_id": 1255}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688}
{"snippet": "connection.executemany(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executemany ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8814}
{"snippet": "urllib.request.ProxyHandler(proxies=None)", "intent": "Cause requests to go through a proxy . If `proxies` is given , it must be a dictionary mapping protocol names to URLs of proxies .", "question_id": 11785}
{"snippet": "Widget.tk.createfilehandler(file, mask, func)", "intent": "Registers the `file` handler callback function `func` . The `mask` argument is an ORed combination of any of the three constants below .", "question_id": 10537}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "operator.__ne__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6522}
{"snippet": "FTP.dir(argument)", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3957}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "doctest.DocFileSuite(*paths, parser=DocTestParser())", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `parser` specifies a DocTestParser ( or subclass ) that should be used to extract tests from the files . With arguments `*paths`.", "question_id": 2803}
{"snippet": "mailbox.__len__()", "intent": "Return a count of messages in the mailbox .", "question_id": 5744}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}
{"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, enable_SMTPUTF8=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `enable_SMTPUTF8` determines whether the SMTPUTF8 extension ( as defined in RFC 6531 ) should be enabled .", "question_id": 8430}
{"snippet": "lzma_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 5699}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889}
{"snippet": "Pattern.subn(repl, string, count=0)", "intent": "Identical to the subn ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7990}
{"snippet": "subprocess.call(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9663}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11139}
{"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'EmailMessage'>`.", "question_id": 3061}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . With arguments `prog`, `parser_class`.", "question_id": 79}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "turtle.distance(x, y=None)", "intent": "Return the distance from the turtle to ( `x` , `y` ) , the given vector , or the given other turtle , in turtle step units .", "question_id": 10944}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "patch.object(target, attribute, **kwargs, new=DEFAULT)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11619}
{"snippet": "message.del_param(param, requote=True)", "intent": "Remove the given parameter completely from the Content-Type `header` . All values will be quoted as necessary unless `requote` is False ( the default is True ) . With arguments `param`.", "question_id": 3011}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "Record.SetInteger(field, value)", "intent": "Set `field` to `value` through MsiRecordSetInteger ( ) .", "question_id": 6086}
{"snippet": "difflib.diff_bytes(dfunc, a, b, lineterm=b'\\n')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2663}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "BaseCookie.output(attrs=None, header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4591}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "calendar.LocaleHTMLCalendar(locale=None)", "intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 983}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1709}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}
{"snippet": "patch.object(target, attribute, **kwargs, new=DEFAULT, create=False)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11626}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "os.WIFCONTINUED(status)", "intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "question_id": 7089}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "lock.acquire(blocking=True, timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10378}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "zipfile.PyZipFile(file, optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `optimize`.", "question_id": 12850}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}
{"snippet": "random.randrange(start, stop, step)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7891}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "connection.backup(target, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8831}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "zipapp.create_archive(source, target=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written :", "question_id": 12768}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885}
{"snippet": "chunk.Chunk(file, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1077}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`.", "question_id": 10854}
{"snippet": "generator.clone(fp)", "intent": "Return an independent clone of this Generator instance with the exact same options , and `fp` as the new outfp .", "question_id": 3104}
{"snippet": "Template.prepend(cmd, kind)", "intent": "Add a new action at the beginning . With arguments `cmd`, `kind`.", "question_id": 7432}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "xml.dom.pulldom.parseString(string, parser=None)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` . With arguments `parser`.", "question_id": 12430}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "os.spawnlp(mode, file)", "intent": "Execute the program path in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The variants which include a second \u201c p \u201d near the end ( spawnlp ( ) , spawnlpe ( ) , spawnvp ( ) , and spawnvpe ( ) ) will use the PATH environment variable to locate the program `file` .", "question_id": 7055}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "turtle.RawPen(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11159}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12662}
{"snippet": "IMAP4.select(mailbox='INBOX', readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4732}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "queue.get(block, timeout)", "intent": "Remove and return an item from the queue . If optional args `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 6204}
{"snippet": "_thread.start_new_thread(function, args)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "question_id": 12944}
{"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "print(*objects, end='\\n', flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4084}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "test.support.import_fresh_module(name, fresh=(), deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10247}
{"snippet": "sniffer.sniff(sample, delimiters=None)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found . If the optional `delimiters` parameter is given , it is interpreted as a string containing possible valid delimiter characters .", "question_id": 1716}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481}
{"snippet": "test_case.assertNotAlmostEqual(first, second, msg=None, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta . With arguments `msg`.", "question_id": 11431}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "Pattern.match(string, pos)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "question_id": 7974}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "email_message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 3244}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "ast.iter_fields(node)", "intent": "Yield a tuple of ( fieldname , value ) for each field in node._fields that is present on `node` .", "question_id": 156}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "dataclasses.field(repr=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `repr`.", "question_id": 2170}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "str(object=b'', encoding='utf-8', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9177}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer)", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp .", "question_id": 1297}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945}
{"snippet": "sync_manager.Condition(lock)", "intent": "Create a shared threading.Condition object and return a proxy for it . If `lock` is supplied then it should be a proxy for a threading.Lock or threading.RLock object .", "question_id": 6301}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997}
{"snippet": "bytes_parser.parse(fp)", "intent": "Read all the data from the binary file-like object `fp` , parse the resulting bytes , and return the message object .", "question_id": 3376}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "doctest.DocTest(examples, globs, name, filename, lineno, docstring)", "intent": "A collection of doctest `examples` that should be run in a single namespace . With arguments `globs`, `name`, `filename`, `lineno`, `docstring`.", "question_id": 2817}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}
{"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1705}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "signature.replace(parameters, return_annotation)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4988}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra)", "intent": "Element class . `tag` is the element name . With arguments `**extra`.", "question_id": 12477}
{"snippet": "CookieJar.clear(domain, path, name)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed . If given three arguments , then the cookie with the specified domain , path and `name` is removed .", "question_id": 4493}
{"snippet": "scheduler.enter(delay, priority, action, argument=())", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`.", "question_id": 8123}
{"snippet": "IMAP4.namespace()", "intent": "Returns IMAP namespaces as defined in RFC 2342 .", "question_id": 4717}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "format(value, format_spec)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4021}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "email.utils.encode_rfc2231(s, language=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3481}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10101}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "traceback.format_exception(etype, value, tb, chain=True)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`, `chain`.", "question_id": 10779}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "lock.acquire(block=True)", "intent": "Acquire a lock , blocking or non-blocking . With the `block` argument set to True ( the default ) , the method call will block until the lock is in an unlocked state , then set it to locked and return True .", "question_id": 6253}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "turtle.setpos(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10915}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247}
{"snippet": "Record.GetString(field)", "intent": "Return the value of `field` as a string where possible .", "question_id": 6083}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}
{"snippet": "hmac.new(key, digestmod=None)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key . `digestmod` is the digest name , digest constructor or module for the HMAC object to use .", "question_id": 4331}
{"snippet": "scheduler.enter(delay, priority, action, argument=(), kwargs={})", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`, `kwargs`.", "question_id": 8125}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "codecs.open(filename, mode='r', buffering=1)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `buffering` has the same meaning as for the built-in open ( ) function . With arguments `filename`.", "question_id": 1232}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, preset=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5710}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "pickletools.dis(pickle, out=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7416}
{"snippet": "platform.win32_ver(release='', version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7500}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "zipapp.create_archive(source, target=None, interpreter=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12773}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}
{"snippet": "resource.getrusage(who)", "intent": "This function returns an object that describes the resources consumed by either the current process or its children , as specified by the `who` parameter .", "question_id": 8095}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5709}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdin`, `stdout`, `stderr`.", "question_id": 328}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used .", "question_id": 5530}
{"snippet": "bdb.stop_here(frame)", "intent": "This method checks if the `frame` is somewhere below botframe in the call stack .", "question_id": 777}
{"snippet": "signal.getitimer(which)", "intent": "Returns current value of a given interval timer specified by `which` .", "question_id": 8393}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131}
{"snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8533}
{"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832}
{"snippet": "SystemExit", "intent": "This exception is raised by the sys.exit() function.", "question_id": 3669}
{"snippet": "time.strftime(format, t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10453}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9036}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "base64.standard_b64encode(s)", "intent": "Encode bytes-like object `s` using the standard Base64 alphabet and return the encoded bytes .", "question_id": 714}
{"snippet": "connection.backup(target, progress=None, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8837}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800}
{"snippet": "os.minor(device)", "intent": "Extract the `device` minor number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6883}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "bdb.break_anywhere(frame)", "intent": "This method checks if there is a breakpoint in the filename of the current `frame` .", "question_id": 779}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "zipfile.PyZipFile(file, compression=ZIP_STORED)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `compression`.", "question_id": 12848}
{"snippet": "heapq.nsmallest(n, iterable, key=None)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4328}
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`.", "question_id": 59}
{"snippet": "io.FileIO(name, mode='r', opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending . A custom `opener` can be used by passing a callable as opener .", "question_id": 5104}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578}
{"snippet": "unittest.mock.Mock(**kwargs, side_effect=None)", "intent": "Create a new Mock object . With arguments `**kwargs`, `side_effect`.", "question_id": 11562}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "message.set_type(type)", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3013}
{"snippet": "re.subn(pattern, repl, string, flags=0)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `flags`.", "question_id": 7957}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}
{"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, order=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2189}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "ContentHandler.startElement(name, attrs)", "intent": "Signals the start of an element in non-namespace mode . The `name` parameter contains the raw XML 1.0 name of the element type as a string and the `attrs` parameter holds an object of the Attributes interface ( see The Attributes Interface ) containing the attributes of the element .", "question_id": 12575}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "bytearray.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9334}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, backupCount=0)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If `backupCount` is nonzero , at most backupCount files will be kept , and if more would be created when rollover occurs , the oldest one is deleted .", "question_id": 5473}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "window.attrset(attr)", "intent": "Set the \u201c background \u201d set of attributes to `attr` .", "question_id": 2014}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "os.setxattr(path, attribute, value)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` .", "question_id": 7001}
{"snippet": "struct.pack_into(format, buffer, offset, v1, v2)", "intent": "Pack the values `v1` , `v2` , \u2026 according to the `format` string format and write the packed bytes into the writable `buffer` buffer starting at position `offset` .", "question_id": 9552}
{"snippet": "asyncio.ensure_future(obj)", "intent": "Return : If `obj` is neither of the above a TypeError is raised .", "question_id": 355}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "auto.with_traceback(tb)", "intent": "This method sets `tb` as the new traceback for the exception and returns the exception object .", "question_id": 3630}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "cmd.Cmd(stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1130}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer)", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp .", "question_id": 1297}
{"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "urllib.parse.quote(string, safe='/', encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11709}
{"snippet": "HTTPConnection.putheader(header)", "intent": "Send an RFC 822-style `header` to the server .", "question_id": 4449}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "imaplib.Internaldate2tuple(datestr)", "intent": "Parse an IMAP4 INTERNALDATE string and return corresponding local time . With arguments `datestr`.", "question_id": 4687}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "logging.handlers.NTEventLogHandler(appname)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "question_id": 5506}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "threading.Timer(interval, function, args=None, kwargs=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10415}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213}
{"snippet": "loader.exec_module(module)", "intent": "An abstract method that executes the `module` in its own namespace when a module is imported or reloaded .", "question_id": 4815}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}
{"snippet": "element.findall(match, namespaces=None)", "intent": "Finds all matching subelements , by tag name or path . `namespaces` is an optional mapping from namespace prefix to full name . With arguments `match`.", "question_id": 12494}
{"snippet": "dataclasses.field(hash=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `hash`.", "question_id": 2171}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra, attrib={})", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12452}
{"snippet": "base_selector.modify(fileobj, events)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8218}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "readline.set_completer(function)", "intent": "Set or remove the completer `function` .", "question_id": 8040}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "subprocess.check_output(args, errors=None)", "intent": "Run command with arguments and return its output . This behaviour may be overridden by setting text , encoding , `errors` , or `universal_newlines` to True as described in Frequently Used Arguments and run ( ) . With arguments `args`.", "question_id": 9685}
{"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "style.theme_create(themename, parent=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme .", "question_id": 10687}
{"snippet": "nntplib.NNTP_SSL(host, port=563)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port .", "question_id": 6430}
{"snippet": "control.condition(action, condition)", "intent": "Make an entry into the ControlCondition table for this control . With arguments `action`, `condition`.", "question_id": 6131}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "importlib.util.spec_from_file_location(name, location, loader=None, submodule_search_locations=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . Missing information will be filled in on the spec by making use of `loader` APIs and by the implication that the module will be file-based . With arguments `name`, `location`, `submodule_search_locations`.", "question_id": 4941}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}
{"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056}
{"snippet": "collections.namedtuple(typename, field_names, rename=False, defaults=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names . `defaults` can be None or an iterable of default values .", "question_id": 1380}
{"snippet": "ctypes.FormatError(code)", "intent": "Windows only : Returns a textual description of the error `code` code .", "question_id": 1821}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "http.server.SimpleHTTPRequestHandler(request, client_address, server)", "intent": "This class serves files from the current `directory` and below , directly mapping the directory structure to HTTP requests . A lot of the work , such as parsing the `request` , is done by the base class BaseHTTPRequestHandler . With arguments `client_address`, `server`.", "question_id": 4659}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "cgitb.html(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1072}
{"snippet": "fileinput.input(mode='r')", "intent": "Create an instance of the FileInput class . With arguments `mode`.", "question_id": 3787}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "operator.__eq__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6521}
{"snippet": "test_case.assertRaises(exception, callable, *args, **kwds)", "intent": "Test that an `exception` is raised when `callable` is called with any positional or keyword arguments that are also passed to assertRaises ( ) . With arguments `*args`, `**kwds`.", "question_id": 11399}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, all_frames: bool=False)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `all_frames: bool`.", "question_id": 10856}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "SSLContext.load_verify_locations(cafile=None, capath=None, cadata=None)", "intent": "Load a set of \u201c certification authority \u201d ( CA ) certificates used to validate other peers \u2019 certificates when verify_mode is other than CERT_NONE . At least one of `cafile` or `capath` must be specified . The `cadata` object , if present , is either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates .", "question_id": 9010}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "instance.__class__", "intent": "The class to which a class instance belongs.", "question_id": 9500}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "importlib.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4798}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "bytearray.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9380}
{"snippet": "tempfile.mktemp(prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10100}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "sqlite3.PARSE_DECLTYPES", "intent": "This constant is meant to be used with the detect_types parameter of the connect() function.", "question_id": 8795}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116}
{"snippet": "re.subn(pattern, repl, string)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`.", "question_id": 7955}
{"snippet": "mailcap.findmatch(caps, key='view', filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5873}
{"snippet": "context_var.get(default)", "intent": "Return a value for the context variable for the current context . With arguments `default`.", "question_id": 1640}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "window.getstr(n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `n`.", "question_id": 2060}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "bytes(source)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`.", "question_id": 3987}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "BaseProtocol.connection_lost(exc)", "intent": "Called when the connection is lost or closed . With arguments `exc`.", "question_id": 432}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "formatter.NullFormatter(writer=None)", "intent": "A formatter which does nothing . If `writer` is omitted , a NullWriter instance is created .", "question_id": 3839}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "decimal.quantize(exp, rounding=None, context=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . In this case , the rounding mode is determined by the rounding argument if given , else by the given `context` argument ; if neither argument is given the rounding mode of the current thread \u2019 s context is used . With arguments `exp`.", "question_id": 2464}
{"snippet": "code.InteractiveInterpreter(locals=None)", "intent": "This class deals with parsing and interpreter state ( the user \u2019 s namespace ) ; it does not deal with input buffering or prompting or input file naming ( the filename is always passed in explicitly ) . The optional `locals` argument specifies the dictionary in which code will be executed ; it defaults to a newly created dictionary with key '__name__ ' set to '__console__ ' and key '__doc__ ' set to None .", "question_id": 1156}
{"snippet": "platform.architecture(executable=sys.executable, bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7462}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}
{"snippet": "nntplib.NNTP(host, port=119, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6416}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "warnings.warn(message, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12001}
{"snippet": "msilib.FCICreate(cabname, files)", "intent": "Create a new CAB file named `cabname` . `files` must be a list of tuples , each containing the name of the file on disk , and the name of the file inside the CAB file .", "question_id": 6058}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}
{"snippet": "str(encoding='utf-8', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9176}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "file_handler.emit(record)", "intent": "Outputs the `record` to the file .", "question_id": 5435}
{"snippet": "directory.start_component(component=None, uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6102}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "tempfile.TemporaryFile(mode='w+b', buffering=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10041}
{"snippet": "urllib.parse.urlunsplit(parts)", "intent": "Combine the elements of a tuple as returned by urlsplit ( ) into a complete URL as a string . The `parts` argument can be any five-item iterable .", "question_id": 11694}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939}
{"snippet": "tempfile.TemporaryFile(dir=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `dir` , `prefix` and `suffix` parameters have the same meaning and defaults as with mkstemp ( ) .", "question_id": 10040}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1708}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9036}
{"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra)", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.", "question_id": 12451}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}
{"snippet": "os.setxattr(path, attribute, value, flags=0)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` . `flags` may be XATTR_REPLACE or XATTR_CREATE .", "question_id": 7002}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "SubprocessProtocol.pipe_connection_lost(fd, exc)", "intent": "Called when one of the pipes communicating with the child process is closed . `fd` is the integer file descriptor that was closed . With arguments `exc`.", "question_id": 443}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "test.support.is_resource_enabled(resource)", "intent": "Return True if `resource` is enabled and available .", "question_id": 10144}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "socket.recvfrom_into(buffer)", "intent": "Receive data from the socket , writing it into `buffer` instead of creating a new bytestring .", "question_id": 8713}
{"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131}
{"snippet": "message.__bytes__()", "intent": "Equivalent to as_bytes ( ) .", "question_id": 2951}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}
{"snippet": "calendar.prmonth(theyear, themonth, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 995}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "OSError(errno, strerror)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`.", "question_id": 3653}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "difflib.diff_bytes(dfunc, a, b, lineterm=b'\\n')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2663}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "message.set_param(param, value, header='Content-Type', charset=None)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If optional `charset` is specified , the parameter will be encoded according to RFC 2231 . With arguments `param`.", "question_id": 3006}
{"snippet": "widget.tag_has(tagname)", "intent": "If `item` is specified , returns 1 or 0 depending on whether the specified item has the given `tagname` .", "question_id": 10668}
{"snippet": "turtle.pen(**pendict, pen=None)", "intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "question_id": 10959}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220}
{"snippet": "r_lock.acquire(blocking=True)", "intent": "Acquire a lock , `blocking` or non-blocking .", "question_id": 10382}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "test.support.calcvobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nPn { `fmt` } 0n or , if gettotalrefcount exists , 2PnPn { fmt } 0P .", "question_id": 10201}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}
{"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}
{"snippet": "tempfile.mktemp(suffix='', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10099}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "datetime.isoformat(sep='T', timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2309}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "calendar.LocaleTextCalendar(firstweekday=0, locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale . With arguments `firstweekday`.", "question_id": 980}
{"snippet": "importlib.util.resolve_name(name, package)", "intent": "Resolve a relative module `name` to an absolute one . This allows for usage such as importlib.util.resolve_name ( 'sys ' , __package__ ) without doing a check to see if the `package` argument is needed .", "question_id": 4927}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "future.set_exception(exception)", "intent": "Mark the Future as done and set an `exception` .", "question_id": 363}
{"snippet": "lock.acquire(block=True)", "intent": "Acquire a lock , blocking or non-blocking . With the `block` argument set to True ( the default ) , the method call will block until the lock is in an unlocked state , then set it to locked and return True .", "question_id": 6253}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "element.find(match, namespaces=None)", "intent": "Finds the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12492}
{"snippet": "ensurepip.bootstrap(upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3491}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "str(object=b'', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9175}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "pty.spawn(argv, master_read)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . The functions `master_read` and `stdin_read` are passed a file descriptor which they should read from , and they should always return a byte string . With arguments `argv`.", "question_id": 7701}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "doc_test_runner.run(test, out=None)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2875}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "os.fwalk(top='.', dir_fd=None)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6992}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "os.getsid(pid)", "intent": "Call the system call getsid ( ) . With arguments `pid`.", "question_id": 6704}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "loop.getaddrinfo(host, port, family=0, flags=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `flags`.", "question_id": 296}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "null_translations.install(names=None)", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "question_id": 4259}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}
{"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662}
{"snippet": "base_http_request_handler.send_header(keyword, value)", "intent": "Adds the HTTP header to an internal buffer which will be written to the output stream when either end_headers ( ) or flush_headers ( ) is invoked . `keyword` should specify the header keyword , with `value` specifying its value .", "question_id": 4643}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "base64.standard_b64decode(s)", "intent": "Decode bytes-like object or ASCII string `s` using the standard Base64 alphabet and return the decoded bytes .", "question_id": 715}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "importlib.resources.open_text(package, resource)", "intent": "Open for text reading the `resource` within `package` .", "question_id": 4853}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "code.interact(readfunc=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . This creates a new instance of InteractiveConsole and sets `readfunc` to be used as the InteractiveConsole.raw_input ( ) method , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1169}
{"snippet": "FTP.mkd(pathname)", "intent": "Create a new directory on the server . With arguments `pathname`.", "question_id": 3962}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868}
{"snippet": "unittest.TextTestRunner(stream=None, descriptions=True)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `descriptions`.", "question_id": 11542}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "dialog.control(name, type, x, y, width, height, attributes, property, text, control_next, help)", "intent": "Return a new Control object . With arguments `name`, `type`, `x`, `y`, `width`, `height`, `attributes`, `property`, `text`, `control_next`, `help`.", "question_id": 6136}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}
{"snippet": "mailbox.MMDF(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in MMDF format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5804}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "codecs.decode(obj)", "intent": "Decodes `obj` using the codec registered for `encoding` .", "question_id": 1196}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}
{"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}
{"snippet": "bytearray.lstrip(chars)", "intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "question_id": 9345}
{"snippet": "logging.handlers.NTEventLogHandler(appname, dllname=None, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `dllname` should give the fully qualified pathname of a .dll or .exe which contains message definitions to hold in the log ( if not specified , 'win32service.pyd ' is used - this is installed with the Win32 extensions and contains some basic placeholder message definitions . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5509}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "operator.methodcaller(name, args...)", "intent": "Return a callable object that calls the method `name` on its operand . With arguments `args...`.", "question_id": 6586}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5863}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "http.cookies.BaseCookie(input)", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "question_id": 4578}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "logging.disable(level=CRITICAL)", "intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "question_id": 5645}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stderr=None)", "intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`.", "question_id": 526}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "bytes_parser.parse(fp)", "intent": "Read all the data from the binary file-like object `fp` , parse the resulting bytes , and return the message object .", "question_id": 3376}
{"snippet": "ZipFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object .", "question_id": 12814}
{"snippet": "exit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1611}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "turtle.setposition(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10917}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661}
{"snippet": "http.server.CGIHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to serve either files or output of CGI scripts from the current directory and below . The do_GET ( ) and do_HEAD ( ) functions are modified to run CGI scripts and serve the output , instead of serving files , if the `request` leads to somewhere below the cgi_directories path . Only directory-based CGI are used \u2014 the other common `server` configuration is to treat special extensions as denoting CGI scripts . With arguments `client_address`.", "question_id": 4666}
{"snippet": "cgitb.html(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1072}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "turtle.write(arg, 8, \"normal\"), font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10972}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10974}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "sqlite3.complete_statement(sql)", "intent": "Returns True if the string `sql` contains one or more complete SQL statements terminated by semicolons .", "question_id": 8801}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, decode_data=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `decode_data` and enable_SMTPUTF8 can not be set to True at the same time .", "question_id": 8431}
{"snippet": "pickle.loads(bytes_object, encoding=\"ASCII\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7381}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867}
{"snippet": "POP3.apop(user, secret)", "intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "question_id": 7606}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}
{"snippet": "time.replace(minute=self.minute)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `minute`.", "question_id": 2336}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}
{"snippet": "StopIteration", "intent": "Raised by built-in function next() and an iterator\u2019s __next__() method to signal that there are no further items produced by the iterator.", "question_id": 3663}
{"snippet": "base64.b64decode(s, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 712}
{"snippet": "http.cookies.BaseCookie(input)", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "question_id": 4578}
{"snippet": "DatagramProtocol.datagram_received(data, addr)", "intent": "Called when a datagram is received . `data` is a bytes object containing the incoming data . `addr` is the address of the peer sending the data ; the exact format depends on the transport .", "question_id": 440}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "traceback.print_last(chain=True)", "intent": "This is a shorthand for print_exception ( sys.last_type , sys.last_value , sys.last_traceback , `limit` , `file` , `chain` ) .", "question_id": 10756}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "email_message.del_param(param, requote=True)", "intent": "Remove the given parameter completely from the Content-Type `header` . Use of the `requote` parameter with EmailMessage objects is deprecated . With arguments `param`.", "question_id": 3272}
{"snippet": "dbm.open(file)", "intent": "Open the database `file` file and return a corresponding object .", "question_id": 2366}
{"snippet": "shelve.open(filename, flag='c', protocol=None)", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) . The version of the pickle `protocol` can be specified with the protocol parameter .", "question_id": 8238}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "codecs.decode(obj)", "intent": "Decodes `obj` using the codec registered for `encoding` .", "question_id": 1196}
{"snippet": "Record.GetInteger(field)", "intent": "Return the value of `field` as an integer where possible .", "question_id": 6082}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "r_lock.acquire(block=True)", "intent": "Acquire a lock , blocking or non-blocking . When invoked with the `block` argument set to True , block until the lock is in an unlocked state ( not owned by any process or thread ) unless the lock is already owned by the current process or thread .", "question_id": 6259}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6123}
{"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "hashlib.new(name, data)", "intent": "Is a generic constructor that takes the string `name` of the desired algorithm as its first parameter . With arguments `data`.", "question_id": 4297}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}
{"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "ftplib.FTP(passwd='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3881}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, loop=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`, `loop`.", "question_id": 541}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "test.support.is_resource_enabled(resource)", "intent": "Return True if `resource` is enabled and available .", "question_id": 10144}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "asyncio.BoundedSemaphore(value=1)", "intent": "A bounded semaphore object . Bounded Semaphore is a version of Semaphore that raises a ValueError in release ( ) if it increases the internal counter above the initial `value` .", "question_id": 589}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501}
{"snippet": "subprocess.Popen(args, bufsize=-1)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `bufsize` will be supplied as the corresponding argument to the open ( ) function when creating the stdin/stdout/stderr pipe file objects :", "question_id": 9600}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "Record.SetString(field, value)", "intent": "Set `field` to `value` through MsiRecordSetString ( ) .", "question_id": 6084}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925}
{"snippet": "fileinput.input(files=None, bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `files`, `bufsize`.", "question_id": 3791}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "sysconfig.get_path(name, scheme, vars)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) .", "question_id": 9863}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "control.mapping(event, attribute)", "intent": "Make an entry into the EventMapping table for this control . With arguments `event`, `attribute`.", "question_id": 6130}
{"snippet": "HTTPConnection.putrequest(method, url, skip_host=False)", "intent": "This should be the first call after the connection to the server has been made . It sends a line to the server consisting of the `method` string , the `url` string , and the HTTP version ( HTTP/1.1 ) . To disable automatic sending of Host : or Accept-Encoding : headers ( for example to accept additional content encodings ) , specify `skip_host` or `skip_accept_encoding` with non-False values .", "question_id": 4445}
{"snippet": "operator.__not__(obj)", "intent": "Return the outcome of not `obj` .", "question_id": 6526}
{"snippet": "os.sched_getparam(pid)", "intent": "Return the scheduling parameters as a sched_param instance for the process with PID `pid` .", "question_id": 7110}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "IMAP4.thread(threading_algorithm, charset)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4748}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}
{"snippet": "mailcap.findmatch(caps, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5874}
{"snippet": "OpenerDirector.open(url, timeout)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "question_id": 11835}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "Decompress.decompress(data, max_length=0)", "intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string . If the optional parameter `max_length` is non-zero then the return value will be no longer than max_length .", "question_id": 12935}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "readline.set_history_length(length)", "intent": "Set or return the desired number of lines to save in the history file . With arguments `length`.", "question_id": 8028}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "email_message.set_param(param, value, header='Content-Type', language='')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . If the value contains non-ASCII characters , the `charset` and `language` may be explicitly specified using the optional charset and language parameters . With arguments `param`.", "question_id": 3268}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "IMAP4.readline()", "intent": "Reads one line from the remote server .", "question_id": 4723}
{"snippet": "bdb.stop_here(frame)", "intent": "This method checks if the `frame` is somewhere below botframe in the call stack .", "question_id": 777}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, flushOnClose=True)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If `flushOnClose` is specified as False , then the buffer is not flushed when the handler is closed .", "question_id": 5534}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "binary.encode(out)", "intent": "Write the XML-RPC base 64 encoding of this binary item to the `out` stream object .", "question_id": 12688}
{"snippet": "locale.currency(val, symbol=True)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default .", "question_id": 5393}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`.", "question_id": 11072}
{"snippet": "window.attrset(attr)", "intent": "Set the \u201c background \u201d set of attributes to `attr` .", "question_id": 2014}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661}
{"snippet": "doctest.DocTestFinder(verbose=False, exclude_empty=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "question_id": 2847}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "webbrowser.open(url, new=0, autoraise=True)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12105}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777}
{"snippet": "coverage_results.write_results(summary=False, coverdir=None)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module . `coverdir` specifies the directory into which the coverage result files will be output .", "question_id": 10731}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "filecmp.dircmp(a, b, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3762}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950}
{"snippet": "tempfile.NamedTemporaryFile(dir=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `dir`.", "question_id": 10050}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "formatter.NullFormatter(writer=None)", "intent": "A formatter which does nothing . If `writer` is omitted , a NullWriter instance is created .", "question_id": 3839}
{"snippet": "connection.execute(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8812}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "hmac.new(key, msg=None)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key . If `msg` is present , the method call update ( msg ) is made .", "question_id": 4330}
{"snippet": "snapshot.filter_traces(filters)", "intent": "Create a new Snapshot instance with a filtered traces sequence , `filters` is a list of DomainFilter and Filter instances .", "question_id": 10874}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683}
{"snippet": "ZipFile.extract(member, pwd=None)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object . `pwd` is the password used for encrypted files .", "question_id": 12816}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}
{"snippet": "shutil.move(src, dst, copy_function=copy2)", "intent": "Recursively move a file or directory ( `src` ) to another location ( `dst` ) and return the destination . Otherwise , src is copied to dst using `copy_function` and then removed .", "question_id": 8339}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "message.get_param(param, header='content-type')", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2993}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "exit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1611}
{"snippet": "header.encode(\\t', maxlinelen=None)", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `maxlinelen` , if given , overrides the instance \u2019 s value for the maximum line length . With arguments `\\t'`.", "question_id": 3132}
{"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "datetime.time(tzinfo=None)", "intent": "All arguments are optional . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2319}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "pickle.dumps(obj, fix_imports=True)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7369}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "logging.setLogRecordFactory(factory)", "intent": "Set a callable which is used to create a LogRecord . The `factory` has the following signature :", "question_id": 5652}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "Request.has_header(header)", "intent": "Return whether the instance has the named `header` ( checks both regular and unredirected ) .", "question_id": 11827}
{"snippet": "base64.b64encode(s, altchars=None)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes . Optional `altchars` must be a bytes-like object of at least length 2 ( additional characters are ignored ) which specifies an alternative alphabet for the + and / characters .", "question_id": 709}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "Codec.decode(input)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1264}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdout=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdout`.", "question_id": 323}
{"snippet": "message.get_params(unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2986}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "tkinter.tix.Tk(className='Tix')", "intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `className`.", "question_id": 10547}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "tarfile.open(**kwargs)", "intent": "Return a TarFile object for the pathname `name` . With arguments `**kwargs`.", "question_id": 9890}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10973}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "smtplib.SMTP_SSL(host='', port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `host` is not specified , the local host is used . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8486}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "question_id": 1119}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "str(object=b'', encoding='utf-8', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9177}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, decode_data=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `decode_data` and enable_SMTPUTF8 can not be set to True at the same time .", "question_id": 8431}
{"snippet": "cgi.parse_qsl(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1043}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "bisect.insort_right(a, x, lo=0, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`, `hi`.", "question_id": 871}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172}
{"snippet": "doctest.debug_src(src)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "question_id": 2890}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797}
{"snippet": "memoryview.__eq__(exporter)", "intent": "A memoryview and a PEP 3118 `exporter` are equal if their shapes are equivalent and if all corresponding values are equal when the operands \u2019 respective format codes are interpreted using struct syntax .", "question_id": 9412}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "super(type, object-or-type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` . With arguments `object-or-type`.", "question_id": 4125}
{"snippet": "test_case.assertNotEqual(first, second)", "intent": "Test that `first` and `second` are not equal .", "question_id": 11377}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5863}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer)", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp .", "question_id": 1297}
{"snippet": "math.log(x, base)", "intent": "With one argument , return the natural logarithm of `x` ( to `base` e ) .", "question_id": 5907}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "stream_writer.write(object)", "intent": "Writes the `object` \u2019 s contents encoded to the stream .", "question_id": 1281}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "nntplib.NNTP(host, timeout, port=119, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6406}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used .", "question_id": 5530}
{"snippet": "asyncio.open_connection(family=0)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `family`.", "question_id": 469}
{"snippet": "bz2.BZ2Decompressor", "intent": "Create a new decompressor object.", "question_id": 900}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "mock.attach_mock(mock, attribute)", "intent": "Attach a `mock` as an `attribute` of this one , replacing its name and parent .", "question_id": 11584}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}
{"snippet": "operator.__not__(obj)", "intent": "Return the outcome of not `obj` .", "question_id": 6526}
{"snippet": "os.rename(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6892}
{"snippet": "atexit.unregister(func)", "intent": "Remove `func` from the list of functions to be run at interpreter shutdown .", "question_id": 678}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "logging.FileHandler(filename, mode='a')", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . With arguments `filename`.", "question_id": 5427}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3754}
{"snippet": "calendar.prcal(year, l=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `m`.", "question_id": 1010}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "IMAP4.create(mailbox)", "intent": "Create new `mailbox` named mailbox .", "question_id": 4696}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}
{"snippet": "range(start, stop, step)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` . If the `step` argument is omitted , it defaults to 1 .", "question_id": 9163}
{"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "window.chgat(y, x, num, attr)", "intent": "Set the attributes of `num` characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2033}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "mailbox.__len__()", "intent": "Return a count of messages in the mailbox .", "question_id": 5744}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}
{"snippet": "loader.exec_module(module)", "intent": "An abstract method that executes the `module` in its own namespace when a module is imported or reloaded .", "question_id": 4815}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "ossaudiodev.open(device, mode)", "intent": "Open an audio `device` and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7175}
{"snippet": "element_tree.write(file, encoding=\"us-ascii\", method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12535}
{"snippet": "urllib.request.build_opener(handler)", "intent": "Return an OpenerDirector instance , which chains the handlers in the order given . With arguments `handler`.", "question_id": 11763}
{"snippet": "logging.setLogRecordFactory(factory)", "intent": "Set a callable which is used to create a LogRecord . The `factory` has the following signature :", "question_id": 5652}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "IMAP4.open(host, port)", "intent": "Opens socket to `port` at `host` .", "question_id": 4719}
{"snippet": "threading.Thread(daemon=None)", "intent": "This constructor should always be called with keyword arguments . If not None , `daemon` explicitly sets whether the thread is daemonic .", "question_id": 10358}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "lock.acquire(timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10377}
{"snippet": "ctypes._Pointer", "intent": "Private, abstract base class for pointers.", "question_id": 1896}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "turtle.tilt(angle)", "intent": "Rotate the turtleshape by `angle` from its current tilt-angle , but do not change the turtle \u2019 s heading ( direction of movement ) .", "question_id": 11004}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}
{"snippet": "dis.findlinestarts(code)", "intent": "This generator function uses the co_firstlineno and co_lnotab attributes of the `code` object code to find the offsets which are starts of lines in the source code .", "question_id": 2729}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_side=False, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9038}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11152}
{"snippet": "scheduler.enterabs(time, priority, action, kwargs={})", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "question_id": 8120}
{"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "curses.unget_wch(ch)", "intent": "Push `ch` so the next get_wch ( ) will return it .", "question_id": 1995}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "calendar.calendar(year, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `m`.", "question_id": 1015}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "calendar.itermonthdays2(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 914}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "doctest.testfile(filename, name=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `name` gives the name of the test ; by default , or if None , os.path.basename ( filename ) is used .", "question_id": 2768}
{"snippet": "sysconfig.get_path(name, scheme, vars, expand)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) . get_path ( ) will use the variables returned by get_config_vars ( ) to `expand` the path .", "question_id": 9862}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "fileinput.FileInput(mode='r')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With `mode` you can specify which file mode will be passed to open ( ) .", "question_id": 3805}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "msvcrt.open_osfhandle(handle, flags)", "intent": "Create a C runtime file descriptor from the file `handle` handle . The `flags` parameter should be a bitwise OR of os.O_APPEND , os.O_RDONLY , and os.O_TEXT .", "question_id": 6153}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "collections.namedtuple(typename, field_names)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format .", "question_id": 1376}
{"snippet": "venv.EnvBuilder(system_site_packages=False, clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `system_site_packages`, `clear`.", "question_id": 11979}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}
{"snippet": "stream_handler.setStream(stream)", "intent": "Sets the instance \u2019 s `stream` to the specified value , if it is different .", "question_id": 5425}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "coverage_results.write_results(summary=False, coverdir=None)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module . `coverdir` specifies the directory into which the coverage result files will be output .", "question_id": 10731}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, comment_prefixes=('#')", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `comment_prefixes`.", "question_id": 1574}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1', short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12664}
{"snippet": "base_selector.get_key(fileobj)", "intent": "Return the key associated with a registered file object . With arguments `fileobj`.", "question_id": 8223}
{"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "Morsel.output(header='Set-Cookie:')", "intent": "Return a string representation of the Morsel , suitable to be sent as an HTTP `header` .", "question_id": 4603}
{"snippet": "tarfile.open(**kwargs, mode='r', fileobj=None)", "intent": "Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . If `fileobj` is specified , it is used as an alternative to a file object opened in binary mode for name . With arguments `**kwargs`.", "question_id": 9898}
{"snippet": "multiprocessing.Process(group=None)", "intent": "Process objects represent activity that is run in a separate process . `group` should always be None ; it exists solely for compatibility with threading.Thread .", "question_id": 6166}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "traceback.print_tb(tb)", "intent": "Print up to `limit` stack trace entries from traceback object `tb` ( starting from the caller \u2019 s frame ) if limit is positive .", "question_id": 10733}
{"snippet": "test_case.assertAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11420}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "pprint.pformat(object, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7635}
{"snippet": "__import__(name, locals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4144}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "heapq.heappush(heap, item)", "intent": "Push the value `item` onto the `heap` , maintaining the heap invariant .", "question_id": 4316}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "random.SystemRandom(seed)", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system . Accordingly , the `seed` ( ) method has no effect and is ignored .", "question_id": 7920}
{"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}
{"snippet": "math.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "question_id": 5897}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "shelve.BsdDbShelf(dict, writeback=False)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "question_id": 8254}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131}
{"snippet": "http.cookies.BaseCookie(input)", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "question_id": 4578}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "CGIXMLRPCRequestHandler.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request ; the return value is returned to the client as the result .", "question_id": 12744}
{"snippet": "message.set_param(param, value, header='Content-Type', charset=None)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If optional `charset` is specified , the parameter will be encoded according to RFC 2231 . With arguments `param`.", "question_id": 3006}
{"snippet": "HTTPConnection.putrequest(method, url)", "intent": "This should be the first call after the connection to the server has been made . It sends a line to the server consisting of the `method` string , the `url` string , and the HTTP version ( HTTP/1.1 ) .", "question_id": 4444}
{"snippet": "config_parser.read_file(f, source=None)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) . Optional argument `source` specifies the name of the file being read .", "question_id": 1515}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11422}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "formatter.DumbWriter(file=None, maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3858}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}
{"snippet": "mmap.move(dest, src, count)", "intent": "Copy the `count` bytes starting at offset `src` to the destination index `dest` .", "question_id": 6008}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470}
{"snippet": "binascii.b2a_qp(data, istext=True)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded .", "question_id": 830}
{"snippet": "element.iterfind(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12502}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "connection.execute(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8811}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True .", "question_id": 3723}
{"snippet": "header.encode(\\t', maxlinelen=None, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `maxlinelen` , if given , overrides the instance \u2019 s value for the maximum line length . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3136}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "str.encode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9188}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "style.layout(style)", "intent": "Define the widget layout for given `style` .", "question_id": 10681}
{"snippet": "fcntl.lockf(fd, cmd, len=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3752}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "POP3.rpop(user)", "intent": "Use RPOP authentication ( similar to UNIX r-commands ) to log into POP3 server . With arguments `user`.", "question_id": 7607}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar, dest)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`, `dest`.", "question_id": 58}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494}
{"snippet": "syslog.syslog(priority, message)", "intent": "Send the string `message` to the system logger . Each message is tagged with a `priority` composed of a facility and a level .", "question_id": 9878}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016}
{"snippet": "codecs.strict_errors(exception)", "intent": "Implements the 'strict ' error handling : each encoding or decoding error raises a UnicodeError . With arguments `exception`.", "question_id": 1255}
{"snippet": "profile.Profile(timer=None, builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument . With arguments `builtins`.", "question_id": 7676}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "shutil.copytree(src, dst, symlinks=False, ignore=None)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `symlinks` is true , symbolic links in the source tree are represented as symbolic links in the new tree and the metadata of the original links will be copied as far as the platform allows ; if false or omitted , the contents and metadata of the linked files are copied to the new tree . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "question_id": 8328}
{"snippet": "style.theme_create(themename, parent=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme .", "question_id": 10687}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "frozenset()", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4024}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "time.isoformat(timespec='auto')", "intent": "Return a string representing the time in ISO 8601 format , HH : MM : SS.ffffff or , if microsecond is 0 , HH : MM : SS If utcoffset ( ) does not return None , a string is appended , giving the UTC offset : HH : MM : SS.ffffff+HH : MM [ : SS [ .ffffff ] ] or , if self.microsecond is 0 , HH : MM : SS+HH : MM [ : SS [ .ffffff ] ] . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2345}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11502}
{"snippet": "concurrent.futures.as_completed(fs)", "intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) .", "question_id": 1484}
{"snippet": "lzma.open(filename, newline=None)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 5664}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "traceback.print_stack(f=None, file=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "question_id": 10766}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}
{"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903}
{"snippet": "element_tree.write(file, encoding=\"us-ascii\", method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12535}
{"snippet": "parser.compilest(st, filename='<syntax-tree>')", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7223}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "WriteTransport.set_write_buffer_limits(low=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 411}
{"snippet": "loader.module_repr(module)", "intent": "A legacy method which when implemented calculates and returns the given `module` \u2019 s repr , as a string .", "question_id": 4817}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', policy=compat32)", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . Optional `policy` argument defaults to compat32 . With arguments `**_params`.", "question_id": 3323}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "dbm.whichdb(filename)", "intent": "This function attempts to guess which of the several simple database modules available \u2014 dbm.gnu , dbm.ndbm or dbm.dumb \u2014 should be used to open a given file . With arguments `filename`.", "question_id": 2365}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "object.__setstate__(state)", "intent": "Upon unpickling , if the class defines __setstate__ ( ) , it is called with the unpickled `state` .", "question_id": 7412}
{"snippet": "threading.Timer(interval, function, kwargs=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10414}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "str.strip(chars)", "intent": "Return a copy of the string with the leading and trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9250}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10101}
{"snippet": "xml.sax.xmlreader.AttributesImpl(attrs)", "intent": "This is an implementation of the Attributes interface ( see section The Attributes Interface ) . Objects of this class should be instantiated by readers ; `attrs` must be a dictionary-like object containing a mapping from attribute names to attribute values .", "question_id": 12611}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, target=None)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If no `target` is specified , the target will need to be set using setTarget ( ) before this handler does anything useful .", "question_id": 5533}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826}
{"snippet": "window.attron(attr)", "intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2013}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . `session` , see session .", "question_id": 9031}
{"snippet": "email.headerregistry.Group(display_name=None, addresses=None)", "intent": "The class used to represent an address group . As a convenience for processing lists of `addresses` that consist of a mixture of groups and single addresses , a Group may also be used to represent single addresses that are not part of a group by setting `display_name` to None and providing a list of the single address as addresses .", "question_id": 3204}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "io.open(file, opener=None)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `opener`.", "question_id": 5058}
{"snippet": "__import__(name, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4137}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461}
{"snippet": "http.client.HTTPConnection(host)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number .", "question_id": 4374}
{"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "stats.add(*filenames)", "intent": "This method of the Stats class accumulates additional profiling information into the current profiling object . With arguments `*filenames`.", "question_id": 7691}
{"snippet": "loop.sock_sendfile(sock, file, offset=0)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket . `offset` tells from where to start reading the file .", "question_id": 282}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "process.communicate(input=None)", "intent": "Interact with process : The optional `input` argument is the data ( bytes object ) that will be sent to the child process .", "question_id": 549}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "typing.get_type_hints(obj, globals, locals)", "intent": "Return a dictionary containing type hints for a function , method , module or class object . In addition , forward references encoded as string literals are handled by evaluating them in `globals` and `locals` namespaces . With arguments `obj`.", "question_id": 11324}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "fcntl.lockf(fd, cmd, len=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3752}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "socket.getaddrinfo(host, port, family=0, type=0)", "intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None . The `family` , `type` and `proto` arguments can be optionally specified in order to narrow the list of addresses returned .", "question_id": 8640}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}
{"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}
{"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}
{"snippet": "asyncio.wait(aws)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` .", "question_id": 607}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "SSLContext.load_verify_locations(cafile=None, capath=None, cadata=None)", "intent": "Load a set of \u201c certification authority \u201d ( CA ) certificates used to validate other peers \u2019 certificates when verify_mode is other than CERT_NONE . At least one of `cafile` or `capath` must be specified . The `cadata` object , if present , is either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates .", "question_id": 9010}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "TarInfo.tobuf(format=DEFAULT_FORMAT, encoding=ENCODING)", "intent": "Create a string buffer from a TarInfo object . With arguments `format`, `encoding`.", "question_id": 9977}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "element.findtext(match)", "intent": "Finds text for the first subelement matching `match` .", "question_id": 12495}
{"snippet": "BaseHandler.unknown_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs with no specific registered handler to open it . With arguments `req`.", "question_id": 11845}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}
{"snippet": "mmap.move(dest, src, count)", "intent": "Copy the `count` bytes starting at offset `src` to the destination index `dest` .", "question_id": 6008}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016}
{"snippet": "shlex.error_leader(infile=None)", "intent": "This method generates an error message leader in the format of a Unix C compiler error label ; the format is ' '' % s '' , line % d : ' , where the % s is replaced with the name of the current source file and the % d with the current input line number ( the optional arguments can be used to override these ) . With arguments `infile`.", "question_id": 8291}
{"snippet": "zlib.decompressobj(wbits=MAX_WBITS)", "intent": "Returns a decompression object , to be used for decompressing data streams that won \u2019 t fit into memory at once . The `wbits` parameter controls the size of the history buffer ( or the \u201c window size \u201d ) , and what header and trailer format is expected .", "question_id": 12926}
{"snippet": "fcntl.lockf(fd, cmd, len=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3752}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}
{"snippet": "select.kevent(ident, filter=KQ_FILTER_READ, fflags=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `filter`, `fflags`.", "question_id": 8163}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "task.get_stack(limit=None)", "intent": "Return the list of stack frames for this Task . The optional `limit` argument sets the maximum number of frames to return ; by default all available frames are returned .", "question_id": 635}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "window.border(ls, rs, ts)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`.", "question_id": 2024}
{"snippet": "quopri.encodestring(s, header=False)", "intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . With arguments `s`, `header`.", "question_id": 7881}
{"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012}
{"snippet": "scheduler.enterabs(time, priority, action, argument=(), kwargs={})", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "question_id": 8121}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902}
{"snippet": "window.hline(y, x, ch, n)", "intent": "Display a horizontal line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "question_id": 2065}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "re.sub(pattern, repl, string, count=0, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "question_id": 7954}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4315}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}
{"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "element_tree.find(match)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`.", "question_id": 12512}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "base64.a85decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 741}
{"snippet": "Decompress.decompress(data, max_length=0)", "intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string . If the optional parameter `max_length` is non-zero then the return value will be no longer than max_length .", "question_id": 12935}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "crypt.mksalt(method=None, rounds=None)", "intent": "Return a randomly generated salt of the specified `method` . `rounds` specifies the number of rounds for METHOD_SHA256 , METHOD_SHA512 and METHOD_BLOWFISH .", "question_id": 1679}
{"snippet": "sqlite3.sqlite_version", "intent": "The version number of the run-time SQLite library, as a string.", "question_id": 8793}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "Codec.decode(input, errors)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "question_id": 1263}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "tracemalloc.DomainFilter(inclusive: bool, domain: int)", "intent": "Filter traces of memory blocks by their address space ( domain ) . With arguments `inclusive: bool`, `domain: int`.", "question_id": 10851}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6799}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "email.utils.encode_rfc2231(s, charset=None, language=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3482}
{"snippet": "sqlite3.version_info", "intent": "The version number of this module, as a tuple of integers.", "question_id": 8792}
{"snippet": "HTTPPasswordMgr.find_user_password(realm, authuri)", "intent": "Same as for HTTPPasswordMgrWithDefaultRealm objects With arguments `realm`, `authuri`.", "question_id": 11861}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "FTP.login(user='anonymous', passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3919}
{"snippet": "style.theme_create(themename, parent=None, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10689}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "smtplib.SMTP(host='', port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8463}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741}
{"snippet": "os.symlink(src, dst)", "intent": "Create a symbolic link pointing to `src` named `dst` .", "question_id": 6951}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}
{"snippet": "test_case.assertAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11420}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost', socktype=socket.SOCK_DGRAM)", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . The type of socket opened depends on the `socktype` argument , which defaults to socket.SOCK_DGRAM and thus opens a UDP socket . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5499}
{"snippet": "codecs.strict_errors(exception)", "intent": "Implements the 'strict ' error handling : each encoding or decoding error raises a UnicodeError . With arguments `exception`.", "question_id": 1255}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, frozen=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2191}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`, `tearDown`.", "question_id": 11477}
{"snippet": "ossaudiodev.openmixer(device)", "intent": "Open a mixer `device` and return an OSS mixer device object .", "question_id": 7176}
{"snippet": "OSError(errno, strerror, filename, winerror)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`, `winerror`.", "question_id": 3651}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}
{"snippet": "mailbox.__setitem__(key, message)", "intent": "Replace the `message` corresponding to `key` with message .", "question_id": 5728}
{"snippet": "email.message_from_bytes(s, _class=None)", "intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) . Optional `_class` and `policy` are interpreted as with the BytesParser class constructor .", "question_id": 3397}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "question_id": 1299}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "msilib.Feature(db, id, title, desc, display, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6117}
{"snippet": "socket.recv_into(buffer)", "intent": "Receive up to `nbytes` bytes from the socket , storing the data into a `buffer` rather than creating a new bytestring .", "question_id": 8716}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}
{"snippet": "BaseHandler.http_error_default(req, fp, code, msg, hdrs)", "intent": "This method is not defined in BaseHandler , but subclasses should override it if they intend to provide a catch-all for otherwise unhandled HTTP errors . `req` will be a Request object , `fp` will be a file-like object with the HTTP error body , `code` will be the three-digit code of the error , `msg` will be the user-visible explanation of the code and `hdrs` will be a mapping object with the headers of the error .", "question_id": 11846}
{"snippet": "binascii.b2a_qp(data, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 831}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, flushOnClose=True)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If `flushOnClose` is specified as False , then the buffer is not flushed when the handler is closed .", "question_id": 5534}
{"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "subprocess.run(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9574}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "difflib.context_diff(a, b, fromfile='', tofiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2637}
{"snippet": "fileinput.input(files=None, inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "question_id": 3789}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "BaseProtocol.connection_made(transport)", "intent": "Called when a connection is made . The `transport` argument is the transport representing the connection .", "question_id": 431}
{"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this screen .", "question_id": 11071}
{"snippet": "unittest.mock.Mock(**kwargs, side_effect=None)", "intent": "Create a new Mock object . With arguments `**kwargs`, `side_effect`.", "question_id": 11562}
{"snippet": "operator.__ge__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6523}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "tree_builder.end(tag)", "intent": "Closes the current element . `tag` is the element name .", "question_id": 12543}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "multiprocessing.Process(kwargs={})", "intent": "Process objects represent activity that is run in a separate process . `kwargs` is a dictionary of keyword arguments for the target invocation .", "question_id": 6170}
{"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "calendar.itermonthdays2(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 914}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}
{"snippet": "binascii.b2a_qp(data, istext=True)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded .", "question_id": 830}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`.", "question_id": 64}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "SSLSocket.read(len=1024, buffer=None)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance . If `buffer` is specified , then read into the buffer instead , and return the number of bytes read .", "question_id": 8974}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501}
{"snippet": "unittest.mock.patch(target, **kwargs)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11608}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "timeit.Timer(setup='pass', timer=<timer function>)", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10505}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "message.__bytes__()", "intent": "Equivalent to as_bytes ( ) .", "question_id": 2951}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "locale.resetlocale(category=LC_ALL)", "intent": "Sets the locale for `category` to the default setting .", "question_id": 5381}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172}
{"snippet": "logging.handlers.QueueListener(queue, *handlers, respect_handler_level=False)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . If `respect_handler_level` is True , a handler \u2019 s level is respected ( compared with the level for the message ) when deciding whether to pass messages to that handler ; otherwise , the behaviour is as in previous Python versions - to always pass each message to each handler . With arguments `*handlers`.", "question_id": 5558}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "os.execlp(file, arg0, arg1)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . With arguments `arg0`, `arg1`.", "question_id": 7011}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "os.spawnle(mode, path, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7054}
{"snippet": "base_selector.register(fileobj, events)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor .", "question_id": 8215}
{"snippet": "http.server.CGIHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to serve either files or output of CGI scripts from the current directory and below . The do_GET ( ) and do_HEAD ( ) functions are modified to run CGI scripts and serve the output , instead of serving files , if the `request` leads to somewhere below the cgi_directories path . Only directory-based CGI are used \u2014 the other common `server` configuration is to treat special extensions as denoting CGI scripts . With arguments `client_address`.", "question_id": 4666}
{"snippet": "iterator.__iter__()", "intent": "Return the iterator object itself .", "question_id": 9152}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "xml.sax.SAXParseException(msg, exception, locator)", "intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "question_id": 12599}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}
{"snippet": "asyncio.open_unix_connection(ssl=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `ssl`.", "question_id": 487}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "ur_lopener.retrieve(url, filename=None)", "intent": "Retrieves the contents of `url` and places it in `filename` .", "question_id": 11897}
{"snippet": "traceback.print_stack(f=None, file=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "question_id": 10766}
{"snippet": "unittest.TestCase(methodName='runTest')", "intent": "Instances of the TestCase class represent the logical test units in the unittest universe . Each instance of TestCase will run a single base method : the method named `methodName` .", "question_id": 11364}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`, `errors`.", "question_id": 11730}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947}
{"snippet": "subprocess.check_output(args, shell=False)", "intent": "Run command with arguments and return its output . With arguments `args`, `shell`.", "question_id": 9682}
{"snippet": "msilib.Feature(db, id, title, desc, display, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6117}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087}
{"snippet": "FTP.sendcmd(cmd)", "intent": "Send a simple command string to the server and return the response string . With arguments `cmd`.", "question_id": 3924}
{"snippet": "proxy[key]", "intent": "Return the item of the underlying mapping with key key.", "question_id": 11208}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "gettext.gettext(message)", "intent": "Return the localized translation of `message` , based on the current global domain , language , and locale directory .", "question_id": 4216}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12225}
{"snippet": "turtle.numinput(title, prompt, default=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11085}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "test_loader.loadTestsFromName(name, module=None)", "intent": "Return a suite of all test cases given a string specifier . The specifier `name` is a \u201c dotted name \u201d that may resolve either to a `module` , a test case class , a test method within a test case class , a TestSuite instance , or a callable object which returns a TestCase or TestSuite instance .", "question_id": 11495}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "xmlrpc.client.ServerProxy(uri)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.", "question_id": 12669}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}
{"snippet": "pdb.Pdb(stdin=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7343}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "logging.handlers.RotatingFileHandler(filename, mode='a', delay=False)", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `mode` is not specified , ' a ' is used . If `delay` is true , then file opening is deferred until the first call to emit ( ) .", "question_id": 5467}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "msilib.Feature(db, id, title, desc, display, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6117}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "str.startswith(prefix)", "intent": "Return True if string starts with the `prefix` , otherwise return False .", "question_id": 9249}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "email.headerregistry.Address(username='', domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3194}
{"snippet": "ctypes.BigEndianStructure(*args, **kw)", "intent": "Abstract base class for structures in big endian byte order . With arguments `*args`, `**kw`.", "question_id": 1887}
{"snippet": "datetime.isoformat(sep='T', timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2309}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "parser.compilest(st)", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7222}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "style.configure(style, **kw)", "intent": "Query or set the default value of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10673}
{"snippet": "widget.insert(pos, child, **kw)", "intent": "Inserts a pane at the specified position . `pos` is either the string \u201c end \u201d , an integer index , or the name of a managed `child` . With arguments `**kw`.", "question_id": 10608}
{"snippet": "calendar.isleap(year)", "intent": "Returns True if `year` is a leap year , otherwise False .", "question_id": 987}
{"snippet": "email_message.del_param(param)", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3270}
{"snippet": "http.server.SimpleHTTPRequestHandler(request, client_address, server)", "intent": "This class serves files from the current `directory` and below , directly mapping the directory structure to HTTP requests . A lot of the work , such as parsing the `request` , is done by the base class BaseHTTPRequestHandler . With arguments `client_address`, `server`.", "question_id": 4659}
{"snippet": "kqueue.control(changelist, max_events)", "intent": "Low level interface to kevent With arguments `changelist`, `max_events`.", "question_id": 8202}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "types.new_class(name, bases=())", "intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11171}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}
{"snippet": "decimal.copy_sign(other)", "intent": "Return a copy of the first operand with the sign set to be the same as the sign of the second operand . With arguments `other`.", "question_id": 2410}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "cgitb.enable(logdir=None, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1068}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "getpass.getpass(prompt='Password: ', stream=None)", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' . On Unix , the prompt is written to the file-like object `stream` using the replace error handler if needed .", "question_id": 4207}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "_thread.start_new_thread(function, args, kwargs)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "question_id": 12943}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459}
{"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}
{"snippet": "http.server.CGIHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to serve either files or output of CGI scripts from the current directory and below . The do_GET ( ) and do_HEAD ( ) functions are modified to run CGI scripts and serve the output , instead of serving files , if the `request` leads to somewhere below the cgi_directories path . Only directory-based CGI are used \u2014 the other common `server` configuration is to treat special extensions as denoting CGI scripts . With arguments `client_address`.", "question_id": 4666}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860}
{"snippet": "gzip.open(filename, mode='rb', compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4278}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "io.BufferedWriter(raw)", "intent": "A buffer providing higher-level access to a writeable , sequential RawIOBase object . The constructor creates a BufferedWriter for the given writeable `raw` stream .", "question_id": 5124}
{"snippet": "Morsel.setdefault(key)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) .", "question_id": 4611}
{"snippet": "test.support.temp_cwd(quiet=False)", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . If `quiet` is False and it is not possible to create or change the CWD , an error is raised .", "question_id": 10184}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "html_diff.make_file(fromlines, tolines, charset='utf-8')", "intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML file containing a table showing line by line differences with inter-line and intra-line changes highlighted . With arguments `charset`.", "question_id": 2613}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`.", "question_id": 535}
{"snippet": "codecs.StreamReader(stream)", "intent": "Constructor for a StreamReader instance . All `stream` readers must provide this constructor interface .", "question_id": 1284}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "pickle.Unpickler(file, encoding=\"ASCII\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7400}
{"snippet": "bytearray()", "intent": "There is no dedicated literal syntax for bytearray objects , instead they are always created by calling the constructor :", "question_id": 9266}
{"snippet": "os.setxattr(path, attribute, value, flags=0)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` . `flags` may be XATTR_REPLACE or XATTR_CREATE .", "question_id": 7002}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively . If the `buffer_size` is omitted it defaults to DEFAULT_BUFFER_SIZE .", "question_id": 5131}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "bdb.effective(file, line, frame)", "intent": "Determine if there is an effective ( active ) breakpoint at this `line` of code . With arguments `file`, `frame`.", "question_id": 818}
{"snippet": "csv.DictReader(f, *args, **kwds, dialect='excel')", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `dialect`.", "question_id": 1696}
{"snippet": "os.WIFSTOPPED(status)", "intent": "Return True if the process has been stopped , otherwise return False . With arguments `status`.", "question_id": 7090}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "readline.set_completer(function)", "intent": "Set or remove the completer `function` .", "question_id": 8040}
{"snippet": "text_calendar.prmonth(theyear, themonth, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 934}
{"snippet": "crypt.mksalt(method=None)", "intent": "Return a randomly generated salt of the specified `method` .", "question_id": 1677}
{"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}
{"snippet": "logging.config.listen(verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5418}
{"snippet": "multiprocessing.Barrier(parties, action)", "intent": "A barrier object : a clone of threading.Barrier . With arguments `parties`, `action`.", "question_id": 6244}
{"snippet": "IMAP4.partial(message_num, message_part, start, length)", "intent": "Fetch truncated part of a message . With arguments `message_num`, `message_part`, `start`, `length`.", "question_id": 4720}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "mock.assert_called_once_with(*args, **kwargs)", "intent": "Assert that the mock was called exactly once and that that call was with the specified arguments . With arguments `*args`, `**kwargs`.", "question_id": 11573}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "dis.findlinestarts(code)", "intent": "This generator function uses the co_firstlineno and co_lnotab attributes of the `code` object code to find the offsets which are starts of lines in the source code .", "question_id": 2729}
{"snippet": "shelve.Shelf(dict, writeback=False)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times .", "question_id": 8246}
{"snippet": "socket.sendmsg_afalg(msg, op)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`.", "question_id": 8730}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "IndexError", "intent": "Raised when a sequence subscript is out of range.", "question_id": 3642}
{"snippet": "tkinter.Tk(baseName=None)", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`.", "question_id": 10519}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "pickle.load(file, encoding=\"ASCII\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7373}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "ur_lopener.retrieve(url, filename=None, reporthook=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . If `reporthook` is given , it must be a function accepting three numeric parameters : A chunk number , the maximum size chunks are read in and the total size of the download ( -1 if unknown ) .", "question_id": 11900}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "pkgutil.walk_packages(prefix='')", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output .", "question_id": 7451}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "memory_bio.read(n=-1)", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9057}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "element.findall(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12493}
{"snippet": "os.sched_getparam(pid)", "intent": "Return the scheduling parameters as a sched_param instance for the process with PID `pid` .", "question_id": 7110}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "sunau.open(file, mode)", "intent": "If `file` is a string , open the file by that name , otherwise treat it as a seekable file-like object . `mode` can be any of", "question_id": 9691}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005}
{"snippet": "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4159}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860}
{"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "asyncore.loop(timeout, use_poll, map, count)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 647}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "ZipFile.extract(member, pwd=None)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object . `pwd` is the password used for encrypted files .", "question_id": 12816}
{"snippet": "heapq.nsmallest(n, iterable)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` .", "question_id": 4327}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "Path.open(newline=None)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `newline`.", "question_id": 7297}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "FTP.storbinary(cmd, fp, rest=None)", "intent": "Store a file in binary transfer mode . `cmd` should be an appropriate STOR command : `` STOR filename '' . `fp` is a file object ( opened in binary mode ) which is read until EOF using its read ( ) method in blocks of size `blocksize` to provide the data to be stored . `rest` means the same thing as in the transfercmd ( ) method .", "question_id": 3936}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "multiprocessing.sharedctypes.synchronized(obj, lock)", "intent": "Return a process-safe wrapper object for a ctypes object which uses `lock` to synchronize access . With arguments `obj`.", "question_id": 6276}
{"snippet": "loop.connect_write_pipe(protocol_factory, pipe)", "intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 302}
{"snippet": "BaseCookie.value_encode(val)", "intent": "Return a tuple ( real_value , coded_value ) . `val` can be any type , but coded_value will always be converted to a string .", "question_id": 4583}
{"snippet": "cmd.Cmd(completekey='tab', stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1132}
{"snippet": "compileall.compile_dir(dir, rx=None)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `rx` is given , its search method is called on the complete path to each file considered for compilation , and if it returns a true value , the file is skipped .", "question_id": 1413}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "definition.__qualname__", "intent": "The qualified name of the class, function, method, descriptor, or generator instance.", "question_id": 9503}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "xml.sax.saxutils.XMLFilterBase(base)", "intent": "This class is designed to sit between an XMLReader and the client application \u2019 s event handlers . With arguments `base`.", "question_id": 12666}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213}
{"snippet": "parser.isexpr(st)", "intent": "When `st` represents an 'eval ' form , this function returns true , otherwise it returns false .", "question_id": 7224}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "bdb.Breakpoint(self, file, line, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "question_id": 757}
{"snippet": "warnings.warn(message, stacklevel=1, source=None)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this : This makes the warning refer to deprecation ( ) \u2019 s caller , rather than to the `source` of deprecation ( ) itself ( since the latter would defeat the purpose of the warning message ) .", "question_id": 12005}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}
{"snippet": "@functools.lru_cache(maxsize=128, typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4149}
{"snippet": "gzip.GzipFile(filename=None, mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4291}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "message.get_param(param, failobj=None, unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . If the message has no Content-Type header or if there is no such parameter , then `failobj` is returned ( defaults to None ) . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2996}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "trace.Trace(outfile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `outfile` is the name of the file in which to write updated count information .", "question_id": 10714}
{"snippet": "Panel.replace(win)", "intent": "Change the window associated with the panel to the window `win` .", "question_id": 2151}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "os.walk(top, onerror=None)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `onerror` is specified , it should be a function ; it will be called with one argument , an OSError instance .", "question_id": 6977}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "locale.currency(val, symbol=True, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5397}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "binascii.crc32(data, value)", "intent": "Compute CRC-32 , the 32-bit checksum of `data` , starting with an initial CRC of `value` .", "question_id": 841}
{"snippet": "email_message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 3244}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "sniffer.sniff(sample, delimiters=None)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found . If the optional `delimiters` parameter is given , it is interpreted as a string containing possible valid delimiter characters .", "question_id": 1716}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "traceback.FrameSummary(filename, lineno, name)", "intent": "Represent a single frame in the traceback or stack that is being formatted or printed . With arguments `filename`, `lineno`, `name`.", "question_id": 10833}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "Record.SetString(field, value)", "intent": "Set `field` to `value` through MsiRecordSetString ( ) .", "question_id": 6084}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "platform.libc_ver(chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7541}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, decode_data=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `decode_data` and enable_SMTPUTF8 can not be set to True at the same time .", "question_id": 8431}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "binascii.b2a_qp(data, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 831}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "SMTP.login(user, password, initial_response_ok=True)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . `initial_response_ok` is passed through to auth ( ) . With arguments `user`.", "question_id": 8523}
{"snippet": "bytearray.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9310}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "header.encode(\\t', linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3133}
{"snippet": "io.open(file, buffering=-1)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `buffering`.", "question_id": 5053}
{"snippet": "os.symlink(src, dst)", "intent": "Create a symbolic link pointing to `src` named `dst` .", "question_id": 6951}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "modulefinder.ModuleFinder(path=None, debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6040}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "os.initgroups(username, gid)", "intent": "Call the system initgroups ( ) to initialize the group access list with all of the groups of which the specified `username` is a member , plus the specified group id . With arguments `gid`.", "question_id": 6691}
{"snippet": "HTTPConnection.set_debuglevel(level)", "intent": "Set the debugging `level` .", "question_id": 4436}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948}
{"snippet": "NNTP.login(user=None, password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6455}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "email_message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 3244}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "io.open(file, mode='r')", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `mode`.", "question_id": 5052}
{"snippet": "argparse.FileType(bufsize=-1, encoding=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`, `encoding`.", "question_id": 93}
{"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8533}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714}
{"snippet": "http.client.HTTPResponse(sock)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`.", "question_id": 4402}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "element.findall(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12493}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "socket.listen(backlog)", "intent": "Enable a server to accept connections . If `backlog` is specified , it must be at least 0 ( if it is lower , it is set to 0 ) ; it specifies the number of unaccepted connections that the system will allow before refusing new connections .", "question_id": 8689}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar, dest)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`, `dest`.", "question_id": 58}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196}
{"snippet": "style.lookup(style, option, default=None)", "intent": "Returns the value specified for `option` in `style` . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "question_id": 10679}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "str(object=b'')", "intent": "Return a string version of `object` .", "question_id": 9171}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "IMAP4.namespace()", "intent": "Returns IMAP namespaces as defined in RFC 2342 .", "question_id": 4717}
{"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218}
{"snippet": "config_parser.readfp(fp)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .", "question_id": 1566}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "IMAP4.thread(threading_algorithm, charset)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4748}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "test_case.assertIsNot(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11385}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "traceback.print_last(chain=True)", "intent": "This is a shorthand for print_exception ( sys.last_type , sys.last_value , sys.last_traceback , `limit` , `file` , `chain` ) .", "question_id": 10756}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "profile.runctx(cmd, globals, locals)", "intent": "Profile the `cmd` via exec ( ) with the specified global and local environment . With arguments `globals`, `locals`.", "question_id": 7686}
{"snippet": "test_case.assertNotEqual(first, second)", "intent": "Test that `first` and `second` are not equal .", "question_id": 11377}
{"snippet": "window.addch(ch)", "intent": "Paint character `ch` at ( y , x ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2001}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}
{"snippet": "pickle.dump(obj, file)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file .", "question_id": 7363}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`, `MIMEtype`.", "question_id": 5862}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "asyncio.wrap_future(future)", "intent": "Wrap a concurrent.futures.Future object in a asyncio.Future object . With arguments `future`.", "question_id": 357}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}
{"snippet": "fileinput.FileInput(files=None, inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together . With arguments `files`.", "question_id": 3807}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "windows_proactor_event_loop_policy.attach_loop(loop)", "intent": "Attach the watcher to an event `loop` .", "question_id": 386}
{"snippet": "HTTPResponse.read(amt)", "intent": "Reads and returns the response body , or up to the next `amt` bytes .", "question_id": 4455}
{"snippet": "signature.from_callable(obj, follow_wrapped=True)", "intent": "Return a Signature ( or its subclass ) object for a given callable `obj` . With arguments `follow_wrapped`.", "question_id": 4992}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923}
{"snippet": "compileall.compile_file(fullname, optimize=-1)", "intent": "Compile the file with path `fullname` . `optimize` specifies the optimization level for the compiler .", "question_id": 1425}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "ur_lopener.retrieve(url, filename=None)", "intent": "Retrieves the contents of `url` and places it in `filename` .", "question_id": 11897}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084}
{"snippet": "fileinput.FileInput(files=None, inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together . With arguments `files`.", "question_id": 3807}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "ContentHandler.startElementNS(name, qname, attrs)", "intent": "Signals the start of an element in namespace mode . The `name` parameter contains the name of the element type as a ( uri , localname ) tuple , the `qname` parameter contains the raw XML 1.0 name used in the source document , and the `attrs` parameter holds an instance of the AttributesNS interface ( see The AttributesNS Interface ) containing the attributes of the element .", "question_id": 12577}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}
{"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}
{"snippet": "readline.set_completion_display_matches_hook(function)", "intent": "Set or remove the completion display `function` .", "question_id": 8048}
{"snippet": "ctypes.FormatError(code)", "intent": "Windows only : Returns a textual description of the error `code` code .", "question_id": 1821}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "DatagramProtocol.error_received(exc)", "intent": "Called when a previous send or receive operation raises an OSError . `exc` is the OSError instance .", "question_id": 441}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164}
{"snippet": "BaseHandler.unknown_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs with no specific registered handler to open it . With arguments `req`.", "question_id": 11845}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "os.fwalk(top='.', follow_symlinks=False)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . Note however that , unlike other functions , the fwalk ( ) default value for `follow_symlinks` is False . With arguments `top`.", "question_id": 6991}
{"snippet": "pdb.Pdb(stdout=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7344}
{"snippet": "pkgutil.ImpImporter(dirname=None)", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm . If `dirname` is a string , a PEP 302 finder is created that searches that directory .", "question_id": 7438}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "xmlparser.StartNamespaceDeclHandler(prefix, uri)", "intent": "Called when an element contains a namespace declaration . With arguments `prefix`, `uri`.", "question_id": 7767}
{"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}
{"snippet": "buffered_io_base.read1(size)", "intent": "Read and return up to `size` bytes , with at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "question_id": 5094}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "OpenerDirector.add_handler(handler)", "intent": "`handler` should be an instance of BaseHandler .", "question_id": 11834}
{"snippet": "typing.get_type_hints(obj, globals, locals)", "intent": "Return a dictionary containing type hints for a function , method , module or class object . In addition , forward references encoded as string literals are handled by evaluating them in `globals` and `locals` namespaces . With arguments `obj`.", "question_id": 11324}
{"snippet": "urllib.error.ContentTooShortError(msg, content)", "intent": "This exception is raised when the urlretrieve ( ) function detects that the amount of the downloaded data is less than the expected amount ( given by the Content-Length header ) . The `content` attribute stores the downloaded ( and supposedly truncated ) data . With arguments `msg`.", "question_id": 11664}
{"snippet": "curses.newwin(nlines, ncols)", "intent": "Return a new window , whose left-upper corner is at ( begin_y , begin_x ) , and whose height/width is nlines/ncols . With arguments `nlines`, `ncols`.", "question_id": 1958}
{"snippet": "datetime.time(minute=0)", "intent": "All arguments are optional . With arguments `minute`.", "question_id": 2316}
{"snippet": "ftplib.FTP_TLS(host='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `host`.", "question_id": 3889}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_hostname=None, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9039}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost')", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5495}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9036}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "readline.set_completer(function)", "intent": "Set or remove the completer `function` .", "question_id": 8040}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "urllib.parse.unquote_plus(string, errors='replace')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `errors`.", "question_id": 11729}
{"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "platform.libc_ver(executable=sys.executable, chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7544}
{"snippet": "charset.__eq__(other)", "intent": "This method allows you to compare two Charset instances for equality . With arguments `other`.", "question_id": 2924}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "message.set_payload(payload, charset=None)", "intent": "Set the entire message object \u2019 s `payload` to payload . Optional `charset` sets the message \u2019 s default character set ; see set_charset ( ) for details .", "question_id": 2961}
{"snippet": "inspect.Signature(parameters=None)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection .", "question_id": 4980}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2112}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . If your SMTP server requires authentication , you can specify a ( username , password ) tuple for the `credentials` argument . With arguments `fromaddr`.", "question_id": 5516}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "calendar.prcal(year, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `m`.", "question_id": 1005}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "base_http_request_handler.send_header(keyword, value)", "intent": "Adds the HTTP header to an internal buffer which will be written to the output stream when either end_headers ( ) or flush_headers ( ) is invoked . `keyword` should specify the header keyword , with `value` specifying its value .", "question_id": 4643}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "unittest.mock.Mock(**kwargs, return_value=DEFAULT)", "intent": "Create a new Mock object . With arguments `**kwargs`, `return_value`.", "question_id": 11563}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}
{"snippet": "tempfile.mktemp(prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10100}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "urllib.error.ContentTooShortError(msg, content)", "intent": "This exception is raised when the urlretrieve ( ) function detects that the amount of the downloaded data is less than the expected amount ( given by the Content-Length header ) . The `content` attribute stores the downloaded ( and supposedly truncated ) data . With arguments `msg`.", "question_id": 11664}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}
{"snippet": "logging.basicConfig(**kwargs)", "intent": "Does basic configuration for the logging system by creating a StreamHandler with a default Formatter and adding it to the root logger . With arguments `**kwargs`.", "question_id": 5649}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "dialog.bitmap(name, x, y, width, height, text)", "intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "question_id": 6138}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "mmap.seek(pos)", "intent": "Set the file \u2019 s current position . With arguments `pos`.", "question_id": 6018}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11138}
{"snippet": "message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . With arguments `param`.", "question_id": 2999}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`.", "question_id": 11072}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "bytes()", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added :", "question_id": 9260}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "style.theme_create(themename, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10688}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "FTP.login(user='anonymous', passwd='', acct='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3922}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "XMLReader.setDTDHandler(handler)", "intent": "Set the current DTDHandler . With arguments `handler`.", "question_id": 12617}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "xml.etree.ElementTree.tostring(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12456}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "FileCookieJar.save(ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4504}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "socket.gethostbyname_ex(hostname)", "intent": "Translate a host name to IPv4 address format , extended interface . Return a triple ( `hostname` , aliaslist , ipaddrlist ) where hostname is the primary host name responding to the given ip_address , aliaslist is a ( possibly empty ) list of alternative host names for the same address , and ipaddrlist is a list of IPv4 addresses for the same interface on the same host ( often but not always a single address ) .", "question_id": 8648}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "fileinput.input(bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `bufsize`.", "question_id": 3786}
{"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}
{"snippet": "mh_message.set_sequences(sequences)", "intent": "Set the list of `sequences` that include this message .", "question_id": 5835}
{"snippet": "plistlib.loads(data, fmt=None, use_builtin_types=True)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `use_builtin_types`.", "question_id": 7559}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}
{"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877}
{"snippet": "maildir_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5816}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "collections.namedtuple(typename, field_names, rename=False)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names .", "question_id": 1377}
{"snippet": "urllib.parse.urlencode(query, encoding=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11735}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "test_case.subTest(**params)", "intent": "Return a context manager which executes the enclosed code block as a subtest . With arguments `**params`.", "question_id": 11372}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12125}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, bases=())", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2184}
{"snippet": "parser.compilest(st, filename='<syntax-tree>')", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7223}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "socket.CMSG_LEN(length)", "intent": "Return the total `length` , without trailing padding , of an ancillary data item with associated data of the given length .", "question_id": 8665}
{"snippet": "curses.panel.new_panel(win)", "intent": "Returns a panel object , associating it with the given window `win` .", "question_id": 2142}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "io.FileIO(name, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener .", "question_id": 5102}
{"snippet": "csv.DictReader(f, *args, **kwds, restkey=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`.", "question_id": 1694}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11421}
{"snippet": "bytes_io.read1(size)", "intent": "In BytesIO , this is the same as read ( ) . With arguments `size`.", "question_id": 5113}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "mailcap.findmatch(caps)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . With arguments `caps`.", "question_id": 5869}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "csv.writer(csvfile, **fmtparams, dialect='excel')", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1683}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "test.support.join_thread(thread, timeout=30.0)", "intent": "Join a `thread` within `timeout` .", "question_id": 10255}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "datetime.fromtimestamp(timestamp)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2261}
{"snippet": "string.Template(template)", "intent": "The constructor takes a single argument which is the `template` string .", "question_id": 9525}
{"snippet": "difflib.unified_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2653}
{"snippet": "Queue.get(block=True)", "intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 7855}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "random.SystemRandom(seed)", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system . Accordingly , the `seed` ( ) method has no effect and is ignored .", "question_id": 7920}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "readline.set_completion_display_matches_hook(function)", "intent": "Set or remove the completion display `function` .", "question_id": 8048}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, backupCount=0)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If `backupCount` is nonzero , at most backupCount files will be kept , and if more would be created when rollover occurs , the oldest one is deleted .", "question_id": 5473}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}
{"snippet": "message.set_payload(payload)", "intent": "Set the entire message object \u2019 s `payload` to payload .", "question_id": 2960}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}
{"snippet": "property(fset=None, doc=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value . And `doc` creates a docstring for the attribute .", "question_id": 4094}
{"snippet": "SMTP.docmd(cmd, args='')", "intent": "Send a command `cmd` to the server . The optional argument `args` is simply concatenated to the command , separated by a space .", "question_id": 8510}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}
{"snippet": "readline.set_pre_input_hook(function)", "intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "question_id": 8038}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 966}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "os.nice(increment)", "intent": "Add `increment` to the process \u2019 s \u201c niceness \u201d .", "question_id": 7039}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "nntplib.NNTP_SSL(host, timeout, port=563)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`.", "question_id": 6420}
{"snippet": "ctypes.string_at(address)", "intent": "This function returns the C string starting at memory `address` address as a bytes object .", "question_id": 1834}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780}
{"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132}
{"snippet": "IMAP4.thread(threading_algorithm, charset)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4748}
{"snippet": "sqlite3.complete_statement(sql)", "intent": "Returns True if the string `sql` contains one or more complete SQL statements terminated by semicolons .", "question_id": 8801}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "mailbox.Maildir(dirname, factory=None)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation .", "question_id": 5755}
{"snippet": "ftplib.FTP(host='', passwd='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3886}
{"snippet": "msilib.FCICreate(cabname, files)", "intent": "Create a new CAB file named `cabname` . `files` must be a list of tuples , each containing the name of the file on disk , and the name of the file inside the CAB file .", "question_id": 6058}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "random.choices(population, weights=None, cum_weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7902}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "lock.acquire(blocking=True, timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10378}
{"snippet": "timeit.Timer(setup='pass')", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10499}
{"snippet": "os.open(path, flags)", "intent": "Open the file `path` and set various `flags` according to flags and possibly its `mode` according to mode .", "question_id": 6738}
{"snippet": "FTP.login(passwd='', acct='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3921}
{"snippet": "config_parser.read_file(f, source=None)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) . Optional argument `source` specifies the name of the file being read .", "question_id": 1515}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "hmac.new(key)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key .", "question_id": 4329}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "sysconfig.get_paths(scheme)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` .", "question_id": 9868}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}
{"snippet": "null_handler.emit(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5437}
{"snippet": "sync_manager.Condition(lock)", "intent": "Create a shared threading.Condition object and return a proxy for it . If `lock` is supplied then it should be a proxy for a threading.Lock or threading.RLock object .", "question_id": 6301}
{"snippet": "xmlparser.EndNamespaceDeclHandler(prefix)", "intent": "Called when the closing tag is reached for an element that contained a namespace declaration . With arguments `prefix`.", "question_id": 7768}
{"snippet": "email.headerregistry.Address(display_name='', username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec . With arguments `display_name`.", "question_id": 3191}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "@functools.lru_cache(maxsize=128)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4147}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "SMTP.login(user, password, initial_response_ok=True)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . `initial_response_ok` is passed through to auth ( ) . With arguments `user`.", "question_id": 8523}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "os.minor(device)", "intent": "Extract the `device` minor number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6883}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "formatter.set_spacing(spacing)", "intent": "Set the `spacing` style for the writer .", "question_id": 3835}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "bdb.runcall(func, *args, **kwds)", "intent": "Debug a single function call , and return its result . With arguments `func`, `*args`, `**kwds`.", "question_id": 816}
{"snippet": "readline.remove_history_item(pos)", "intent": "Remove history item specified by its position from the history . With arguments `pos`.", "question_id": 8032}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "policy.header_fetch_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message when that header is requested by the application program , and whatever the method returns is what is passed back to the application as the value of the header being retrieved .", "question_id": 3425}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, filters=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5711}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}
{"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}
{"snippet": "dbm.open(file)", "intent": "Open the database `file` file and return a corresponding object .", "question_id": 2366}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "calendar.LocaleTextCalendar(locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 979}
{"snippet": "test_case.assertWarns(warning, msg=None)", "intent": "Test that a `warning` is triggered when callable is called with any positional or keyword arguments that are also passed to assertWarns ( ) . If only the warning and possibly the `msg` arguments are given , return a context manager so that the code under test can be written inline rather than as a function :", "question_id": 11407}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "operator.__ne__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6522}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "bytes(source, encoding)", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) .", "question_id": 9258}
{"snippet": "SIG*", "intent": "All the signal numbers are defined symbolically.", "question_id": 8375}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`.", "question_id": 59}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "urllib.parse.urlencode(query, encoding=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11735}
{"snippet": "logging.handlers.WatchedFileHandler(filename, mode='a', delay=False)", "intent": "Returns a new instance of the WatchedFileHandler class . If `mode` is not specified , ' a ' is used . If `delay` is true , then file opening is deferred until the first call to emit ( ) . With arguments `filename`.", "question_id": 5445}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, bases=())", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2184}
{"snippet": "IMAP4.append(mailbox, flags, date_time, message)", "intent": "Append `message` to named `mailbox` . With arguments `flags`, `date_time`.", "question_id": 4691}
{"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777}
{"snippet": "logging.handlers.HTTPHandler(host, url, secure=False, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `secure` is true , a HTTPS connection will be used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5549}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}
{"snippet": "importlib.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4798}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp . With arguments `errors`.", "question_id": 1298}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "IMAP4.status(mailbox, names)", "intent": "Request named status conditions for `mailbox` . With arguments `names`.", "question_id": 4744}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "window.border(ls, rs, ts, bs, tl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`.", "question_id": 2022}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "element.makeelement(tag, attrib)", "intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "question_id": 12505}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, filters=None)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "question_id": 5685}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "tarfile.open(**kwargs, name=None, mode='r')", "intent": "Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . With arguments `**kwargs`.", "question_id": 9895}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "test_case.assertAlmostEqual(first, second, msg=None, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta . With arguments `msg`.", "question_id": 11423}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "fileinput.input(mode='r')", "intent": "Create an instance of the FileInput class . With arguments `mode`.", "question_id": 3787}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "random.gammavariate(alpha, beta)", "intent": "Gamma distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7911}
{"snippet": "date.replace(month=self.month, day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `month`, `day`.", "question_id": 2235}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}
{"snippet": "curses.meta(flag)", "intent": "If `flag` is True , allow 8-bit characters to be input .", "question_id": 1953}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "xmlparser.ExternalEntityParserCreate(context)", "intent": "Create a \u201c child \u201d parser which can be used to parse an external parsed entity referred to by content parsed by the parent parser . The `context` parameter should be the string passed to the ExternalEntityRefHandler ( ) handler function , described below .", "question_id": 7739}
{"snippet": "ast.fix_missing_locations(node)", "intent": "When you compile a `node` tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them .", "question_id": 152}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "mmap.flush(offset)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6006}
{"snippet": "test_loader.loadTestsFromName(name, module=None)", "intent": "Return a suite of all test cases given a string specifier . The specifier `name` is a \u201c dotted name \u201d that may resolve either to a `module` , a test case class , a test method within a test case class , a TestSuite instance , or a callable object which returns a TestCase or TestSuite instance .", "question_id": 11495}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "asyncio.ensure_future(obj)", "intent": "Return : If `obj` is neither of the above a TypeError is raised .", "question_id": 355}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "multiprocessing.Process(name=None)", "intent": "Process objects represent activity that is run in a separate process . `name` is the process name ( see name for more details ) .", "question_id": 6168}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "http.server.SimpleHTTPRequestHandler(request, client_address, server, directory=None)", "intent": "This class serves files from the current `directory` and below , directly mapping the directory structure to HTTP requests . A lot of the work , such as parsing the `request` , is done by the base class BaseHTTPRequestHandler . With arguments `client_address`, `server`.", "question_id": 4660}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "@test.support.bigmemtest(size, memuse, dry_run=True)", "intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it . If `dry_run` is True , the value passed to the test method may be less than the requested value .", "question_id": 10228}
{"snippet": "socket.getaddrinfo(host, port)", "intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None .", "question_id": 8635}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11138}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894}
{"snippet": "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4590}
{"snippet": "winreg.SetValueEx(key, value_name, reserved, type, value)", "intent": "Stores data in the `value` field of an open registry `key` . `value_name` is a string that names the subkey with which the value is associated . `reserved` can be anything \u2013 zero is always passed to the API . `type` is an integer that specifies the type of the data .", "question_id": 12151}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`.", "question_id": 75}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "policy.header_store_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` provided by the application program when the application program is modifying a Message programmatically ( as opposed to a Message created by a parser ) .", "question_id": 3424}
{"snippet": "calendar.LocaleTextCalendar(locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 979}
{"snippet": "traceback.extract_stack(f=None)", "intent": "Extract the raw traceback from the current stack frame . The optional `f` and `limit` arguments have the same meaning as for print_stack ( ) .", "question_id": 10772}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}
{"snippet": "sync_manager.Queue(maxsize)", "intent": "Create a shared queue.Queue object and return a proxy for it . With arguments `maxsize`.", "question_id": 6306}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "turtle.onrelease(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`, `add`.", "question_id": 11026}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "doctest.DocFileSuite(*paths, optionflags=0)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `optionflags` specifies the default doctest options for the tests , created by or-ing together individual option flags . With arguments `*paths`.", "question_id": 2802}
{"snippet": "test_case.assertIs(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11383}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "compileall.compile_dir(dir, legacy=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1415}
{"snippet": "io.FileIO(name, mode='r', opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending . A custom `opener` can be used by passing a callable as opener .", "question_id": 5104}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "queue.put(obj, block)", "intent": "Put `obj` into the queue . If the optional argument `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 6201}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "Telnet.open(host, port=0)", "intent": "Connect to a `host` . The optional second argument is the `port` number , which defaults to the standard Telnet port ( 23 ) .", "question_id": 10021}
{"snippet": "ipaddress.NetmaskValueError(ValueError)", "intent": "Any value error related to the net mask . With arguments `ValueError`.", "question_id": 5238}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "CGIXMLRPCRequestHandler.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request ; the return value is returned to the client as the result .", "question_id": 12744}
{"snippet": "element.iterfind(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12502}
{"snippet": "message.del_param(param)", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3009}
{"snippet": "Codec.decode(input)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1264}
{"snippet": "null_importer.find_module(fullname, path)", "intent": "This method always returns None , indicating that the requested module could not be found . With arguments `fullname`, `path`.", "question_id": 4781}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "formatter.convert_field(value, conversion)", "intent": "Converts the `value` ( returned by get_field ( ) ) given a `conversion` type ( as in the tuple returned by the parse ( ) method ) .", "question_id": 9524}
{"snippet": "webbrowser.open(url, autoraise=True)", "intent": "Display `url` using the default browser . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12104}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4157}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "AU_read.setpos(pos)", "intent": "Set the file pointer to the specified position . Only values returned from tell ( ) should be used for `pos` .", "question_id": 9717}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "csv.DictReader(f, *args, **kwds, dialect='excel')", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `dialect`.", "question_id": 1696}
{"snippet": "turtle.setposition(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10917}
{"snippet": "mmdf_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5853}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499}
{"snippet": "dataclasses.astuple(instance)", "intent": "Converts the dataclass `instance` to a tuple ( by using the factory function `tuple_factory` ) .", "question_id": 2181}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "incremental_decoder.setstate(state)", "intent": "Set the `state` of the decoder to state .", "question_id": 1278}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "tarfile.open(**kwargs, name=None, mode='r')", "intent": "Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . With arguments `**kwargs`.", "question_id": 9895}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "sysconfig.get_paths(scheme, vars)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9867}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}
{"snippet": "locale.currency(val, symbol=True, grouping=False, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default . If `grouping` is true ( which is not the default ) , grouping is done with the value . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5399}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "random.SystemRandom(seed)", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system . Accordingly , the `seed` ( ) method has no effect and is ignored .", "question_id": 7920}
{"snippet": "Popen.send_signal(signal)", "intent": "Sends the `signal` signal to the child .", "question_id": 9616}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "structure._anonymous_", "intent": "An optional sequence that lists the names of unnamed (anonymous) fields.", "question_id": 1892}
{"snippet": "os.waitpid(pid, options)", "intent": "The details of this function differ on Unix and Windows . On Unix : Wait for completion of a child process given by process id `pid` , and return a tuple containing its process id and exit status indication ( encoded as for wait ( ) ) . The semantics of the call are affected by the value of the integer `options` , which should be 0 for normal operation .", "question_id": 7082}
{"snippet": "window.insnstr(str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "question_id": 2078}
{"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}
{"snippet": "importlib.util.spec_from_file_location(name, location, submodule_search_locations=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`, `submodule_search_locations`.", "question_id": 4940}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "OptionParser.set_defaults(dest=value)", "intent": "Set default values for several option destinations at once . With arguments `dest`.", "question_id": 6648}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this handler .", "question_id": 5602}
{"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "doctest.debug(module, name)", "intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above .", "question_id": 2888}
{"snippet": "asyncio.BoundedSemaphore(value=1)", "intent": "A bounded semaphore object . Bounded Semaphore is a version of Semaphore that raises a ValueError in release ( ) if it increases the internal counter above the initial `value` .", "question_id": 589}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "scheduler.enterabs(time, priority, action, kwargs={})", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "question_id": 8120}
{"snippet": "socket.recv(bufsize)", "intent": "Receive data from the socket . The maximum amount of data to be received at once is specified by `bufsize` .", "question_id": 8702}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "scheduler.enter(delay, priority, action)", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`.", "question_id": 8122}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9174}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6119}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "base_http_request_handler.send_error(code, explain=None)", "intent": "Sends and logs a complete error reply to the client . The numeric `code` specifies the HTTP error code , with `message` as an optional , short , human readable description of the error . The `explain` argument can be used to provide more detailed information about the error ; it will be formatted using the error_message_format attribute and emitted , after a complete set of headers , as the response body .", "question_id": 4639}
{"snippet": "bz2.open(filename, encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 879}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "platform.java_ver('', ''), '', ''), release='', vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7490}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "readline.set_completion_display_matches_hook(function)", "intent": "Set or remove the completion display `function` .", "question_id": 8048}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "readline.set_pre_input_hook(function)", "intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "question_id": 8038}
{"snippet": "dis.Bytecode(x, current_offset=None)", "intent": "Analyse the bytecode corresponding to a function , generator , asynchronous generator , coroutine , method , string of source code , or a code object ( as returned by compile ( ) ) . If `current_offset` is not None , it refers to an instruction offset in the disassembled code . With arguments `x`.", "question_id": 2697}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "Codec.decode(input)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1264}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "io.open(file, opener=None)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `opener`.", "question_id": 5058}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "str(object=b'', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9175}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501}
{"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}
{"snippet": "window.addch(ch)", "intent": "Paint character `ch` at ( y , x ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2001}
{"snippet": "tempfile.mkstemp(text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10075}
{"snippet": "doctest.run_docstring_examples(f, globs, name=\"NoName\")", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `name` is used in failure messages , and defaults to `` NoName '' .", "question_id": 2788}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491}
{"snippet": "winreg.SetValue(key, sub_key, type, value)", "intent": "Associates a `value` with a specified `key` . `sub_key` is a string that names the subkey with which the value is associated . `type` is an integer that specifies the type of the data .", "question_id": 12150}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "hmac.new(key)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key .", "question_id": 4329}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "window.chgat(attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( y , x ) if supplied . With arguments `attr`.", "question_id": 2030}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "ast.iter_fields(node)", "intent": "Yield a tuple of ( fieldname , value ) for each field in node._fields that is present on `node` .", "question_id": 156}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5863}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}
{"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "FileCookieJar.revert(ignore_discard=False, ignore_expires=False)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4520}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12239}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "compile(source, filename, mode, flags=0, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3997}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227}
{"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "nntplib.NNTP(host, timeout, user=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6401}
{"snippet": "Cmd.completedefault(text, line, begidx, endidx)", "intent": "Method called to complete an input `line` when no command-specific complete_* ( ) method is available . With arguments `text`, `begidx`, `endidx`.", "question_id": 1140}
{"snippet": "message.__str__()", "intent": "Equivalent to as_string ( ) .", "question_id": 2946}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, istext=True)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded .", "question_id": 832}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}
{"snippet": "dataclasses.field(hash=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `hash`.", "question_id": 2171}
{"snippet": "socket.listen(backlog)", "intent": "Enable a server to accept connections . If `backlog` is specified , it must be at least 0 ( if it is lower , it is set to 0 ) ; it specifies the number of unaccepted connections that the system will allow before refusing new connections .", "question_id": 8689}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "turtle.bk(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10906}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "config_parser.options(section)", "intent": "Return a list of options available in the specified `section` .", "question_id": 1510}
{"snippet": "shutil.copytree(src, dst, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8326}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "Path.rglob(pattern)", "intent": "This is like calling Path.glob ( ) with \u201c **/ \u201d added in front of the given relative `pattern` :", "question_id": 7312}
{"snippet": "calendar.prcal(year, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `m`.", "question_id": 1005}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0, target=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . It can be fed XML data incrementally with the feed ( ) method , and parsing events are translated to a push API - by invoking callbacks on the `target` object .", "question_id": 12550}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, enable_SMTPUTF8=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `enable_SMTPUTF8` determines whether the SMTPUTF8 extension ( as defined in RFC 6531 ) should be enabled .", "question_id": 8430}
{"snippet": "window.addnstr(y, x, str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2007}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "logging.handlers.WatchedFileHandler(filename, mode='a')", "intent": "Returns a new instance of the WatchedFileHandler class . If `mode` is not specified , ' a ' is used . With arguments `filename`.", "question_id": 5441}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "lzma.is_check_supported(check)", "intent": "Returns true if the given integrity `check` is supported on this system .", "question_id": 5722}
{"snippet": "fcntl.ioctl(fd, request, arg=0)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . The parameter `arg` can be one of an integer , an object supporting the read-only buffer interface ( like bytes ) or an object supporting the read-write buffer interface ( like bytearray ) . With arguments `fd`.", "question_id": 3743}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194}
{"snippet": "type(object)", "intent": "With one argument , return the type of an `object` .", "question_id": 4130}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "question_id": 1299}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "warnings.warn_explicit(message, category, filename, lineno, registry=None)", "intent": "This is a low-level interface to the functionality of warn ( ) , passing in explicitly the `message` , `category` , `filename` and line number , and optionally the `module` name and the `registry` ( which should be the __warningregistry__ dictionary of the module ) . With arguments `lineno`.", "question_id": 12009}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "zlib.compressobj(zdict, strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `strategy` is used to tune the compression algorithm .", "question_id": 12902}
{"snippet": "connection.backup(target)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance .", "question_id": 8829}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "bytes.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9308}
{"snippet": "xml.dom.minidom.parse(filename_or_file, parser=None)", "intent": "Return a Document from the given input . `filename_or_file` may be either a file name , or a file-like object . `parser` , if given , must be a SAX2 parser object .", "question_id": 12397}
{"snippet": "doctest.DocFileSuite(*paths, parser=DocTestParser())", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `parser` specifies a DocTestParser ( or subclass ) that should be used to extract tests from the files . With arguments `*paths`.", "question_id": 2803}
{"snippet": "venv.create(env_dir, clear=False)", "intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument . With arguments `clear`.", "question_id": 11991}
{"snippet": "tixCommand.tix_cget(option)", "intent": "Returns the current value of the configuration `option` given by option .", "question_id": 10582}
{"snippet": "random.SystemRandom(seed)", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system . Accordingly , the `seed` ( ) method has no effect and is ignored .", "question_id": 7920}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer)", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp .", "question_id": 1297}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "quit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1609}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "mmap.flush(offset)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6006}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "locale.currency(val, grouping=False, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `grouping` is true ( which is not the default ) , grouping is done with the value . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5398}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}
{"snippet": "InteractiveConsole.raw_input(prompt=\"\")", "intent": "Write a `prompt` and read a line .", "question_id": 1191}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "zipapp.create_archive(source, target=None, compressed=False)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The optional `compressed` argument determines whether files are compressed .", "question_id": 12776}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp . With arguments `errors`.", "question_id": 1298}
{"snippet": "test.support.bind_unix_socket(sock, addr)", "intent": "Bind a unix socket , raising unittest.SkipTest if PermissionError is raised . With arguments `sock`, `addr`.", "question_id": 10260}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "base_manager.register(typeid, callable)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object .", "question_id": 6292}
{"snippet": "HTTPConnection.request(method, url, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4429}
{"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "style.lookup(style, option)", "intent": "Returns the value specified for `option` in `style` .", "question_id": 10677}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "gzip.GzipFile(mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4287}
{"snippet": "base64.b16decode(s)", "intent": "Decode the Base16 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 724}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "gc.get_referents(*objs)", "intent": "Return a list of objects directly referred to by any of the arguments . With arguments `*objs`.", "question_id": 4182}
{"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}
{"snippet": "null_handler.handle(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5438}
{"snippet": "NNTP.login(user=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6452}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435}
{"snippet": "os.utime(path, times=None, dir_fd=None)", "intent": "Set the access and modified `times` of the file specified by `path` . With arguments `dir_fd`.", "question_id": 6971}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "calendar.LocaleHTMLCalendar(firstweekday=0, locale=None)", "intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale . With arguments `firstweekday`.", "question_id": 984}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "itertools.compress(data, selectors)", "intent": "Make an iterator that filters elements from `data` returning only those that have a corresponding element in `selectors` that evaluates to True .", "question_id": 5245}
{"snippet": "datetime.time(microsecond=0)", "intent": "All arguments are optional . With arguments `microsecond`.", "question_id": 2318}
{"snippet": "lzma_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 5699}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "hmac.new(key)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key .", "question_id": 4329}
{"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480}
{"snippet": "http.server.CGIHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to serve either files or output of CGI scripts from the current directory and below . The do_GET ( ) and do_HEAD ( ) functions are modified to run CGI scripts and serve the output , instead of serving files , if the `request` leads to somewhere below the cgi_directories path . Only directory-based CGI are used \u2014 the other common `server` configuration is to treat special extensions as denoting CGI scripts . With arguments `client_address`.", "question_id": 4666}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "doctest.Example(source, want, options=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `options`.", "question_id": 2828}
{"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886}
{"snippet": "gettext.find(domain, localedir=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4226}
{"snippet": "nntplib.NNTP_SSL(host, timeout, password=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`, `password`.", "question_id": 6422}
{"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "os.fwalk(top='.', dir_fd=None)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6992}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "curses.typeahead(fd)", "intent": "Specify that the file descriptor `fd` be used for typeahead checking .", "question_id": 1991}
{"snippet": "window.chgat(y, x, attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2032}
{"snippet": "platform.win32_ver(release='', version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7500}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "OpenerDirector.add_handler(handler)", "intent": "`handler` should be an instance of BaseHandler .", "question_id": 11834}
{"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}
{"snippet": "pprint.pprint(object, width=80)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7646}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "mbox_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5829}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "modulefinder.ModuleFinder(debug=0, excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6033}
{"snippet": "ctypes.LittleEndianStructure(*args, **kw)", "intent": "Abstract base class for structures in little endian byte order . With arguments `*args`, `**kw`.", "question_id": 1888}
{"snippet": "subprocess.check_call(args, stdin=None, shell=False)", "intent": "Run command with arguments . With arguments `args`, `stdin`, `shell`.", "question_id": 9678}
{"snippet": "os.fpathconf(fd, name)", "intent": "Return system configuration information relevant to an open file . As of Python 3.3 , this is equivalent to os.pathconf ( `fd` , name ) . `name` specifies the configuration value to retrieve ; it may be a string which is the name of a defined system value ; these names are specified in a number of standards ( POSIX.1 , Unix 95 , Unix 98 , and others ) .", "question_id": 6722}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "FTP.connect(host='', port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3909}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "joinable_queue.send_bytes(buffer)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` .", "question_id": 6238}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "multiprocessing.Process(kwargs={})", "intent": "Process objects represent activity that is run in a separate process . `kwargs` is a dictionary of keyword arguments for the target invocation .", "question_id": 6170}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "ctypes._CData", "intent": "This non-public class is the common base class of all ctypes data types.", "question_id": 1842}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "smtplib.SMTP_SSL(timeout, port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . The optional arguments `local_hostname` , `timeout` and `source_address` have the same meaning as they do in the SMTP class . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8470}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "threading.Semaphore(value=1)", "intent": "This class implements semaphore objects . A semaphore manages an atomic counter representing the number of release ( ) calls minus the number of acquire ( ) calls , plus an initial `value` .", "question_id": 10398}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "sys.settrace(tracefunc)", "intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "question_id": 9839}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938}
{"snippet": "test_case.subTest(**params, msg=None)", "intent": "Return a context manager which executes the enclosed code block as a subtest . `msg` and params are optional , arbitrary values which are displayed whenever a subtest fails , allowing you to identify them clearly . With arguments `**params`.", "question_id": 11373}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "pprint.pprint(object, indent=1)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7645}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856}
{"snippet": "loader.exec_module(module)", "intent": "An abstract method that executes the `module` in its own namespace when a module is imported or reloaded .", "question_id": 4815}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "resource.prlimit(pid, resource, limits)", "intent": "Combines setrlimit ( ) and getrlimit ( ) in one function and supports to get and set the resources `limits` of an arbitrary process . If `pid` is 0 , then the call applies to the current process . `resource` and limits have the same meaning as in setrlimit ( ) , except that limits is optional .", "question_id": 8073}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "ssl.match_hostname(cert, hostname)", "intent": "Verify that `cert` ( in decoded format as returned by SSLSocket.getpeercert ( ) ) matches the given `hostname` .", "question_id": 8890}
{"snippet": "multiprocessing.connection.deliver_challenge(connection, authkey)", "intent": "Send a randomly generated message to the other end of the `connection` and wait for a reply . If the reply matches the digest of the message using `authkey` as the key then a welcome message is sent to the other end of the connection .", "question_id": 6366}
{"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509}
{"snippet": "string.Template(template)", "intent": "The constructor takes a single argument which is the `template` string .", "question_id": 9525}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548}
{"snippet": "gettext.find(domain, localedir=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4226}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923}
{"snippet": "CookiePolicy.return_ok(cookie, request)", "intent": "Return boolean value indicating whether `cookie` should be returned to server . `request` is an object implementing the interface defined by the documentation for CookieJar.add_cookie_header ( ) .", "question_id": 4533}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "loop.getaddrinfo(host, port, family=0, type=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `type`.", "question_id": 294}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "readline.set_pre_input_hook(function)", "intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "question_id": 8038}
{"snippet": "decimal.compare_total_mag(other)", "intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . With arguments `other`.", "question_id": 2405}
{"snippet": "lzma_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 5699}
{"snippet": "test_case.assertRaisesRegex(exception, regex, msg=None)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` . With arguments `msg`.", "question_id": 11404}
{"snippet": "queue.put(obj, block)", "intent": "Put `obj` into the queue . If the optional argument `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 6201}
{"snippet": "tkinter.Tk(baseName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`, `className`.", "question_id": 10525}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "cgi.parse_qs(qs, keep_blank_values=False)", "intent": "This function is deprecated in this module . With arguments `qs`, `keep_blank_values`.", "question_id": 1040}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "profile.runctx(cmd, globals, locals)", "intent": "Profile the `cmd` via exec ( ) with the specified global and local environment . With arguments `globals`, `locals`.", "question_id": 7686}
{"snippet": "time.replace(hour=self.hour)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2335}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1706}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "test.support.swap_attr(obj, attr, new_val)", "intent": "Context manager to swap out an attribute with a new object . If `attr` doesn \u2019 t exist on `obj` , it will be created and then deleted at the end of the block . With arguments `new_val`.", "question_id": 10194}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "test.support.check_syntax_error(testcase, statement, errtext='')", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . `errtext` is the text of the error raised by SyntaxError .", "question_id": 10232}
{"snippet": "threading.Timer(interval, function, args=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10413}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "importlib.util.module_from_spec(spec)", "intent": "Create a new module based on `spec` and spec.loader.create_module .", "question_id": 4930}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "profile.runctx(cmd, globals, locals)", "intent": "Profile the `cmd` via exec ( ) with the specified global and local environment . With arguments `globals`, `locals`.", "question_id": 7686}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404}
{"snippet": "tkinter.Tcl(baseName=None, useTk=0)", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `baseName`, `useTk`.", "question_id": 10536}
{"snippet": "IMAP4.starttls(ssl_context=None)", "intent": "Send a STARTTLS command . The `ssl_context` argument is optional and should be a ssl.SSLContext object .", "question_id": 4743}
{"snippet": "xml.etree.ElementTree.fromstring(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12438}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "FileCookieJar.save(ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4504}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9036}
{"snippet": "threading.Thread(daemon=None)", "intent": "This constructor should always be called with keyword arguments . If not None , `daemon` explicitly sets whether the thread is daemonic .", "question_id": 10358}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "raw_io_base.read(size=-1)", "intent": "Read up to `size` bytes from the object and return them .", "question_id": 5085}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "mock.assert_called_once_with(*args, **kwargs)", "intent": "Assert that the mock was called exactly once and that that call was with the specified arguments . With arguments `*args`, `**kwargs`.", "question_id": 11573}
{"snippet": "fileinput.input(files=None, inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "question_id": 3789}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "format(value, format_spec)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4021}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', backupCount=0)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` . If `backupCount` is nonzero , at most backupCount files will be kept , and if more would be created when rollover occurs , the oldest one is deleted .", "question_id": 5479}
{"snippet": "operator.__le__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6520}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help, metavar)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`, `metavar`.", "question_id": 74}
{"snippet": "curses.unget_wch(ch)", "intent": "Push `ch` so the next get_wch ( ) will return it .", "question_id": 1995}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "socket.listen(backlog)", "intent": "Enable a server to accept connections . If `backlog` is specified , it must be at least 0 ( if it is lower , it is set to 0 ) ; it specifies the number of unaccepted connections that the system will allow before refusing new connections .", "question_id": 8689}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642}
{"snippet": "datetime.datetime(year, month, day, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `minute`.", "question_id": 2249}
{"snippet": "Path.symlink_to(target)", "intent": "Make this path a symbolic link to `target` .", "question_id": 7315}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}
{"snippet": "tempfile.TemporaryFile(mode='w+b', encoding=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10042}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None, dialect='excel')", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `dialect`.", "question_id": 1699}
{"snippet": "shutil.register_unpack_format(name, extensions, function, extra_args, description)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable . `description` can be provided to describe the format , and will be returned by the get_unpack_formats ( ) function .", "question_id": 8366}
{"snippet": "mmap.rfind(sub, start, end)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6014}
{"snippet": "zlib.compressobj(level=-1, wbits=MAX_WBITS)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . The `wbits` argument controls the size of the history buffer ( or the \u201c window size \u201d ) used when compressing data , and whether a header and trailer is included in the output .", "question_id": 12914}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "email.encoders.encode_quopri(msg)", "intent": "Encodes the payload into quoted-printable form and sets the Content-Transfer-Encoding header to quoted-printable 1 . With arguments `msg`.", "question_id": 3069}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, order=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2189}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "datetime.datetime(year, month, day, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `minute`.", "question_id": 2249}
{"snippet": "FTP.connect(host='', port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3909}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "os.WIFSIGNALED(status)", "intent": "Return True if the process exited due to a signal , otherwise return False . With arguments `status`.", "question_id": 7091}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "cgitb.enable(logdir=None, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1068}
{"snippet": "DatagramTransport.sendto(data, addr=None)", "intent": "Send the `data` bytes to the remote peer given by `addr` ( a transport-dependent target address ) .", "question_id": 417}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "unittest.mock.seal(mock)", "intent": "Seal will disable the automatic creation of mocks when accessing an attribute of the `mock` being sealed or any of its attributes that are already mocks recursively .", "question_id": 11657}
{"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72}
{"snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5863}
{"snippet": "xml.sax.SAXParseException(msg, exception, locator)", "intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "question_id": 12599}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087}
{"snippet": "IMAP4.thread(threading_algorithm, charset)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4748}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "os.WIFSTOPPED(status)", "intent": "Return True if the process has been stopped , otherwise return False . With arguments `status`.", "question_id": 7090}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "XMLReader.setContentHandler(handler)", "intent": "Set the current ContentHandler . With arguments `handler`.", "question_id": 12615}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "locale.format(format, val)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`.", "question_id": 5388}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "zipfile.PyZipFile(file, optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `optimize`.", "question_id": 12850}
{"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}
{"snippet": "queue.PriorityQueue(maxsize=0)", "intent": "Constructor for a priority queue . `maxsize` is an integer that sets the upperbound limit on the number of items that can be placed in the queue .", "question_id": 7842}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "lzma.is_check_supported(check)", "intent": "Returns true if the given integrity `check` is supported on this system .", "question_id": 5722}
{"snippet": "fileinput.FileInput(mode='r')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With `mode` you can specify which file mode will be passed to open ( ) .", "question_id": 3805}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726}
{"snippet": "window.addnstr(y, x, str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2007}
{"snippet": "sysconfig.get_path(name, scheme, vars, expand)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) . get_path ( ) will use the variables returned by get_config_vars ( ) to `expand` the path .", "question_id": 9862}
{"snippet": "bdb.get_bpbynumber(arg)", "intent": "Return a breakpoint specified by the given number . If `arg` is a string , it will be converted to a number .", "question_id": 799}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "code.compile_command(source, filename=\"<input>\", symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1174}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405}
{"snippet": "pdb.Pdb(stdin=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7343}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}
{"snippet": "timezone.utcoffset(dt)", "intent": "Return the fixed value specified when the timezone instance is constructed . The `dt` argument is ignored .", "question_id": 2359}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "style.configure(style, **kw)", "intent": "Query or set the default value of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10673}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "importlib.__import__(name, locals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `locals`.", "question_id": 4785}
{"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "loop.sock_sendall(sock, data)", "intent": "Send `data` to the `sock` socket .", "question_id": 278}
{"snippet": "webbrowser.register(name, constructor)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12110}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "audioop.findfit(fragment, reference)", "intent": "Try to match `reference` as well as possible to a portion of `fragment` ( which should be the longer fragment ) .", "question_id": 689}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "warnings.filterwarnings(action, message='', lineno=0)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `lineno`.", "question_id": 12031}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005}
{"snippet": "decimal.quantize(exp)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2461}
{"snippet": "base_rotating_handler.rotate(source, dest)", "intent": "When rotating , rotate the current log . The default implementation calls the \u2018 rotator \u2019 attribute of the handler , if it \u2019 s callable , passing the `source` and `dest` arguments to it .", "question_id": 5457}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "random.choices(population, weights=None, cum_weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7902}
{"snippet": "task.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Task is done .", "question_id": 631}
{"snippet": "TarFile.add(name, arcname=None, recursive=True)", "intent": "Add the file `name` to the archive . If given , `arcname` specifies an alternative name for the file in the archive . This can be avoided by setting `recursive` to False .", "question_id": 9953}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802}
{"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}
{"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True .", "question_id": 3723}
{"snippet": "math.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 5895}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "BaseCookie.output(attrs=None, sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4589}
{"snippet": "scheduler.enter(delay, priority, action, argument=())", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`.", "question_id": 8123}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`, `add`.", "question_id": 11074}
{"snippet": "quopri.decodestring(s, header=False)", "intent": "Like decode ( ) , except that it accepts a source bytes and returns the corresponding decoded bytes . With arguments `s`, `header`.", "question_id": 7878}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "traceback.print_last(chain=True)", "intent": "This is a shorthand for print_exception ( sys.last_type , sys.last_value , sys.last_traceback , `limit` , `file` , `chain` ) .", "question_id": 10756}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "property(doc=None)", "intent": "Return a property attribute . And `doc` creates a docstring for the attribute .", "question_id": 4089}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "datetime.timedelta(microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2207}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "email.utils.formatdate(localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3474}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "doctest.DocTestRunner(verbose=None, optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `verbose` controls the DocTestRunner \u2019 s verbosity . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2867}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "xmlparser.StartNamespaceDeclHandler(prefix, uri)", "intent": "Called when an element contains a namespace declaration . With arguments `prefix`, `uri`.", "question_id": 7767}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957}
{"snippet": "structure._pack_", "intent": "An optional small integer that allows overriding the alignment of structure fields in the instance.", "question_id": 1891}
{"snippet": "msilib.Feature(db, id, title, desc, display, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6117}
{"snippet": "doctest.testmod(name=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional argument `name` gives the name of the module ; by default , or if None , m.__name__ is used .", "question_id": 2778}
{"snippet": "bytearray.endswith(suffix)", "intent": "Return True if the binary data ends with the specified `suffix` , otherwise return False .", "question_id": 9288}
{"snippet": "bytes(source, encoding, errors)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`, `errors`.", "question_id": 3985}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "os.wait4(pid, options)", "intent": "Similar to waitpid ( ) , except a 3-element tuple , containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `pid`, `options`.", "question_id": 7084}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "base64.a85encode(b, foldspaces=False, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 732}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196}
{"snippet": "typing.Deque(deque, MutableSequenceT)", "intent": "A generic version of collections.deque . With arguments `deque`, `MutableSequenceT`.", "question_id": 11268}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\", charset='utf-8'                     cte=None)", "intent": "Add `headers` and payload to `msg` : If `charset` is provided ( which is valid only for str ) , encode the string to bytes using the specified character set . With arguments `<'str'>`, `subtype`.", "question_id": 3047}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, params=None)", "intent": "Add `headers` and payload to `msg` : If `params` is specified , iterate its items method and use the resulting ( key , value ) pairs to set additional parameters on the Content-Type header . With arguments `<'str'>`.", "question_id": 3045}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "pstats.Stats(*filenames or profile, stream=sys.stdout)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . Output will be printed to the `stream` specified by stream . With arguments `*filenames or profile`.", "question_id": 7689}
{"snippet": "str.strip(chars)", "intent": "Return a copy of the string with the leading and trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9250}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312}
{"snippet": "dis.disassemble(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2719}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11122}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}
{"snippet": "json.JSONDecodeError(msg, doc, pos)", "intent": "Subclass of ValueError with the following additional attributes : With arguments `msg`, `doc`, `pos`.", "question_id": 5335}
{"snippet": "IMAP4.thread(threading_algorithm, charset)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4748}
{"snippet": "FTP.login(passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3917}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`.", "question_id": 59}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "curses.unctrl(ch)", "intent": "Return a bytes object which is a printable representation of the character `ch` .", "question_id": 1992}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12226}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "msilib.Control(dlg, name)", "intent": "Base class of the dialog controls . `dlg` is the dialog object the control belongs to , and `name` is the control \u2019 s name .", "question_id": 6125}
{"snippet": "config_parser.items(section, raw=False)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `raw`.", "question_id": 1557}
{"snippet": "fileinput.FileInput(files=None)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `files`.", "question_id": 3801}
{"snippet": "base_manager.register(typeid, callable, proxytype, exposed, method_to_typeid)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid . `exposed` is used to specify a sequence of method names which proxies for this typeid should be allowed to access using BaseProxy._callmethod ( ) . `method_to_typeid` is a mapping used to specify the return type of those exposed methods which should return a proxy .", "question_id": 6289}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "test.support.is_resource_enabled(resource)", "intent": "Return True if `resource` is enabled and available .", "question_id": 10144}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11119}
{"snippet": "dialog.line(name, x, y, width, height)", "intent": "Add and return a Line control . With arguments `name`, `x`, `y`, `width`, `height`.", "question_id": 6139}
{"snippet": "timeit.repeat(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10488}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "ctypes._SimpleCData", "intent": "This non-public class is the base class of all fundamental ctypes data types.", "question_id": 1853}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "logging.handlers.NTEventLogHandler(appname)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "question_id": 5506}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "zlib.compressobj(level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12913}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None, file=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML . The tree is initialized with the contents of the XML `file` if given .", "question_id": 12510}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False)", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10970}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903}
{"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "message.set_type(type, requote=True)", "intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "question_id": 3015}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}
{"snippet": "len(proxy)", "intent": "Return the number of items in the underlying mapping . With arguments `proxy`.", "question_id": 11210}
{"snippet": "doctest.debug_src(src, pm=False, globs=None)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument . Optional argument `pm` has the same meaning as in function debug ( ) above . Optional argument `globs` gives a dictionary to use as both local and global execution context .", "question_id": 2893}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956}
{"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802}
{"snippet": "FTP.connect(port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3906}
{"snippet": "email.encoders.encode_base64(msg)", "intent": "Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64 . With arguments `msg`.", "question_id": 3070}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "marshal.dumps(value, version)", "intent": "Return the bytes object that would be written to a file by dump ( `value` , file ) . The `version` argument indicates the data format that dumps should use ( see below ) .", "question_id": 5881}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "fileinput.input(bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `bufsize`.", "question_id": 3786}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945}
{"snippet": "operator.__lt__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6519}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "@functools.lru_cache(maxsize=128)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4147}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "sysconfig.get_paths(scheme, vars)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9867}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "inspect_loader.exec_module(module)", "intent": "Implementation of Loader.exec_module ( ) . With arguments `module`.", "question_id": 4831}
{"snippet": "FileCookieJar.load(ignore_discard=False, ignore_expires=False)", "intent": "Load cookies from a file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4512}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "pprint.pformat(object, indent=1, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7638}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400}
{"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "concurrent.futures.as_completed(fs, timeout=None)", "intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) . The returned iterator raises a concurrent.futures.TimeoutError if __next__ ( ) is called and the result isn \u2019 t available after `timeout` seconds from the original call to as_completed ( ) .", "question_id": 1485}
{"snippet": "fileinput.FileInput(files=None)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `files`.", "question_id": 3801}
{"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}
{"snippet": "inspect_loader.exec_module(module)", "intent": "Implementation of Loader.exec_module ( ) . With arguments `module`.", "question_id": 4831}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "parser.compilest(st, filename='<syntax-tree>')", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7223}
{"snippet": "ctypes.Union(*args, **kw)", "intent": "Abstract base class for unions in native byte order . With arguments `*args`, `**kw`.", "question_id": 1886}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css', encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 969}
{"snippet": "pstats.Stats(*filenames or profile, stream=sys.stdout)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . Output will be printed to the `stream` specified by stream . With arguments `*filenames or profile`.", "question_id": 7689}
{"snippet": "@unittest.skipUnless(condition, reason)", "intent": "Skip the decorated test unless `condition` is true . With arguments `reason`.", "question_id": 11360}
{"snippet": "email.utils.formatdate(localtime=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account .", "question_id": 3470}
{"snippet": "test.support.open_urlresource(url, *args, **kw)", "intent": "Open `url` . With arguments `*args`, `**kw`.", "question_id": 10239}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "TarFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9934}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087}
{"snippet": "os.tcsetpgrp(fd, pg)", "intent": "Set the process group associated with the terminal given by `fd` ( an open file descriptor as returned by os.open ( ) ) to `pg` .", "question_id": 6807}
{"snippet": "operator.__ne__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6522}
{"snippet": "gettext.find(domain, localedir=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4226}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "modulefinder.ModuleFinder(debug=0, excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6033}
{"snippet": "calendar.prcal(year, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `c`.", "question_id": 1004}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "traceback_exception.from_exception(exc)", "intent": "Capture an exception for later rendering . With arguments `exc`.", "question_id": 10812}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost')", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5495}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}
{"snippet": "maildir_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5816}
{"snippet": "FileCookieJar.revert(ignore_discard=False, ignore_expires=False)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4520}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "readline.set_pre_input_hook(function)", "intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "question_id": 8038}
{"snippet": "bytearray.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9282}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "Codec.decode(input)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1264}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "ossaudiodev.open(device, mode)", "intent": "Open an audio `device` and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7175}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203}
{"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "zlib.compressobj(level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12913}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp . With arguments `errors`.", "question_id": 1298}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262}
{"snippet": "typing.Dict(dict, MutableMappingKT, VT)", "intent": "A generic version of `dict` . With arguments `MutableMappingKT`, `VT`.", "question_id": 11298}
{"snippet": "pprint.pprint(object, width=80)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7646}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "null_translations.install(names=None)", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "question_id": 4259}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "profile.Profile(timeunit=0.0)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . If the number is an integer , the `timeunit` specifies a multiplier that specifies the duration of each unit of time .", "question_id": 7671}
{"snippet": "timeit.repeat(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10489}
{"snippet": "turtle.ondrag(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`, `add`.", "question_id": 11030}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037}
{"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654}
{"snippet": "readline.set_history_length(length)", "intent": "Set or return the desired number of lines to save in the history file . With arguments `length`.", "question_id": 8028}
{"snippet": "test_case.subTest(**params, msg=None)", "intent": "Return a context manager which executes the enclosed code block as a subtest . `msg` and params are optional , arbitrary values which are displayed whenever a subtest fails , allowing you to identify them clearly . With arguments `**params`.", "question_id": 11373}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "base64.b85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using base85 ( as used in e.g . If `pad` is true , the input is padded with b'\\0 ' so its length is a multiple of 4 bytes before encoding .", "question_id": 745}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "Queue.get(block=True)", "intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 7855}
{"snippet": "pprint.pformat(object, indent=1, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7638}
{"snippet": "loader.create_module(spec)", "intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "question_id": 4814}
{"snippet": "test.support.check__all__(test_case, module, extra=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `extra` argument can be a set of names that wouldn \u2019 t otherwise be automatically detected as \u201c public \u201d , like objects without a proper __module__ attribute . With arguments `test_case`.", "question_id": 10279}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "ctypes.FormatError(code)", "intent": "Windows only : Returns a textual description of the error `code` code .", "question_id": 1821}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', backupCount=0)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` . If `backupCount` is nonzero , at most backupCount files will be kept , and if more would be created when rollover occurs , the oldest one is deleted .", "question_id": 5479}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "tempfile.TemporaryFile(mode='w+b', buffering=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10041}
{"snippet": "sysconfig.get_paths(scheme, vars)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9867}
{"snippet": "textwrap.wrap(text, **kwargs)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10318}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "traceback.print_exc(chain=True)", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10748}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "tkinter.Tk(screenName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `screenName`, `className`.", "question_id": 10523}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "cgitb.handler(info=None)", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) . The optional `info` argument should be a 3-tuple containing an exception type , exception value , and traceback object , exactly like the tuple returned by sys.exc_info ( ) .", "question_id": 1074}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "IMAP4.select(mailbox='INBOX', readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4732}
{"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}
{"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "locale.format_string(format, val, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5386}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "counter.fromkeys(iterable)", "intent": "This class method is not implemented for Counter objects . With arguments `iterable`.", "question_id": 1347}
{"snippet": "test.support.get_attribute(obj, name)", "intent": "Get an attribute , raising unittest.SkipTest if AttributeError is raised . With arguments `obj`, `name`.", "question_id": 10257}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "directory.start_component(feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6095}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout .", "question_id": 12659}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "hmac.new(key)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key .", "question_id": 4329}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057}
{"snippet": "fileinput.input(files=None, inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "question_id": 3789}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "shlex.error_leader(infile=None)", "intent": "This method generates an error message leader in the format of a Unix C compiler error label ; the format is ' '' % s '' , line % d : ' , where the % s is replaced with the name of the current source file and the % d with the current input line number ( the optional arguments can be used to override these ) . With arguments `infile`.", "question_id": 8291}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "window.inch(y)", "intent": "Return the character at the given position in the window . With arguments `y`.", "question_id": 2070}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}
{"snippet": "fileinput.input(files=None, backup='')", "intent": "Create an instance of the FileInput class . With arguments `files`, `backup`.", "question_id": 3790}
{"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}
{"snippet": "mailbox.Maildir(dirname, factory=None)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation .", "question_id": 5755}
{"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720}
{"snippet": "bytes(source, encoding, errors)", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) . With arguments `errors`.", "question_id": 9257}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777}
{"snippet": "FileCookieJar.revert(ignore_discard=False, ignore_expires=False)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4520}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "ctypes._Pointer", "intent": "Private, abstract base class for pointers.", "question_id": 1896}
{"snippet": "buffered_io_base.read1(size)", "intent": "Read and return up to `size` bytes , with at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "question_id": 5094}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "definition.__qualname__", "intent": "The qualified name of the class, function, method, descriptor, or generator instance.", "question_id": 9503}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11430}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "ContentHandler.startElementNS(name, qname, attrs)", "intent": "Signals the start of an element in namespace mode . The `name` parameter contains the name of the element type as a ( uri , localname ) tuple , the `qname` parameter contains the raw XML 1.0 name used in the source document , and the `attrs` parameter holds an instance of the AttributesNS interface ( see The AttributesNS Interface ) containing the attributes of the element .", "question_id": 12577}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683}
{"snippet": "random.choices(population, weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7900}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296}
{"snippet": "socket.sendmsg_afalg(msg, op, iv)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`.", "question_id": 8729}
{"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508}
{"snippet": "bz2.open(filename, errors=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 880}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "IMAP4.select(mailbox='INBOX', readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4732}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "io.FileIO(name, closefd=True)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : With arguments `closefd`.", "question_id": 5101}
{"snippet": "lock.acquire(block=True)", "intent": "Acquire a lock , blocking or non-blocking . With the `block` argument set to True ( the default ) , the method call will block until the lock is in an unlocked state , then set it to locked and return True .", "question_id": 6253}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "multiprocessing.sharedctypes.synchronized(obj, lock)", "intent": "Return a process-safe wrapper object for a ctypes object which uses `lock` to synchronize access . With arguments `obj`.", "question_id": 6276}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "binascii.b2a_qp(data, quotetabs=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded .", "question_id": 829}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8350}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "plistlib.loads(data, fmt=None, use_builtin_types=True)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `use_builtin_types`.", "question_id": 7559}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "nntplib.NNTP(host, user=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6411}
{"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}
{"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "style.lookup(style, option, default=None)", "intent": "Returns the value specified for `option` in `style` . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "question_id": 10679}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "Panel.replace(win)", "intent": "Change the window associated with the panel to the window `win` .", "question_id": 2151}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "ZipFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory .", "question_id": 12820}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005}
{"snippet": "calendar.prcal(year, l=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "question_id": 1009}
{"snippet": "unpickler.find_class(module, name)", "intent": "Import `module` if necessary and return the object called `name` from it , where the module and name arguments are str objects .", "question_id": 7408}
{"snippet": "loop.sendfile(transport, file)", "intent": "Send a `file` over a `transport` .", "question_id": 256}
{"snippet": "message.set_payload(payload)", "intent": "Set the entire message object \u2019 s `payload` to payload .", "question_id": 2960}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "json.JSONEncoder(separators=None)", "intent": "Extensible JSON encoder for Python data structures . If specified , `separators` should be an ( item_separator , key_separator ) tuple .", "question_id": 5329}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "email_message.del_param(param, requote=True)", "intent": "Remove the given parameter completely from the Content-Type `header` . Use of the `requote` parameter with EmailMessage objects is deprecated . With arguments `param`.", "question_id": 3272}
{"snippet": "os.path.commonpath(paths)", "intent": "Return the longest common sub-path of each pathname in the sequence `paths` .", "question_id": 7144}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}
{"snippet": "cgitb.handler(info=None)", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) . The optional `info` argument should be a 3-tuple containing an exception type , exception value , and traceback object , exactly like the tuple returned by sys.exc_info ( ) .", "question_id": 1074}
{"snippet": "asyncore.loop(timeout, use_poll, map)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 648}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464}
{"snippet": "InteractiveInterpreter.runsource(source)", "intent": "Compile and run some `source` in the interpreter .", "question_id": 1175}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . `session` , see session .", "question_id": 9031}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}
{"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "loop.sock_recv(sock, nbytes)", "intent": "Receive up to `nbytes` from `sock` .", "question_id": 276}
{"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796}
{"snippet": "plistlib.loads(data, use_builtin_types=True, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `use_builtin_types`, `dict_type`.", "question_id": 7561}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615}
{"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}
{"snippet": "heapq.heappop(heap)", "intent": "Pop and return the smallest item from the `heap` , maintaining the heap invariant .", "question_id": 4317}
{"snippet": "bytes.partition(sep)", "intent": "Split the sequence at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9305}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "fraction.__ceil__()", "intent": "Returns the least int > = self .", "question_id": 3874}
{"snippet": "bytes.lstrip(chars)", "intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "question_id": 9343}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}
{"snippet": "xml.dom.pulldom.parseString(string, parser=None)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` . With arguments `parser`.", "question_id": 12430}
{"snippet": "timeit.Timer(setup='pass')", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10499}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697}
{"snippet": "subprocess.check_output(args, shell=False)", "intent": "Run command with arguments and return its output . With arguments `args`, `shell`.", "question_id": 9682}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5865}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "asyncio.Future(loop=None)", "intent": "A Future represents an eventual result of an asynchronous operation . This way alternative event `loop` implementations can inject their own optimized implementations of a Future object .", "question_id": 360}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "asyncore.loop(timeout, use_poll, map, count)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 647}
{"snippet": "config_parser.options(section)", "intent": "Return a list of options available in the specified `section` .", "question_id": 1510}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, delimiters=('=')", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `delimiters`.", "question_id": 1573}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "nntplib.NNTP(host, port=119)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port .", "question_id": 6410}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "tkinter.Tk(baseName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`, `className`.", "question_id": 10525}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "element.findtext(match)", "intent": "Finds text for the first subelement matching `match` .", "question_id": 12495}
{"snippet": "pty.spawn(argv, master_read)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . The functions `master_read` and `stdin_read` are passed a file descriptor which they should read from , and they should always return a byte string . With arguments `argv`.", "question_id": 7701}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "io.FileIO(name, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener .", "question_id": 5102}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "sniffer.sniff(sample, delimiters=None)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found . If the optional `delimiters` parameter is given , it is interpreted as a string containing possible valid delimiter characters .", "question_id": 1716}
{"snippet": "compileall.compile_path(skip_curdir=True, maxlevels=0)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . Note that unlike the other compile functions , `maxlevels` defaults to 0 .", "question_id": 1437}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}
{"snippet": "@unittest.skipUnless(condition, reason)", "intent": "Skip the decorated test unless `condition` is true . With arguments `reason`.", "question_id": 11360}
{"snippet": "timeit.Timer(globals=None)", "intent": "Class for timing execution speed of small code snippets . The statement will by default be executed within timeit \u2019 s namespace ; this behavior can be controlled by passing a namespace to `globals` .", "question_id": 10501}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683}
{"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11129}
{"snippet": "ftplib.FTP_TLS(passwd='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `passwd`.", "question_id": 3891}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "ZipFile.open(name, mode='r', pwd=None)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . The `mode` parameter , if included , must be ' r ' ( the default ) or ' w ' . `pwd` is the password used to decrypt encrypted ZIP files .", "question_id": 12810}
{"snippet": "FTP.sendcmd(cmd)", "intent": "Send a simple command string to the server and return the response string . With arguments `cmd`.", "question_id": 3924}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "bz2.compress(data, compresslevel=9)", "intent": "Compress `data` , a bytes-like object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 907}
{"snippet": "sys.setcheckinterval(interval)", "intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "question_id": 9834}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1705}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "doctest.run_docstring_examples(f, globs, verbose=False)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . If optional argument `verbose` is true , output is generated even if there are no failures .", "question_id": 2787}
{"snippet": "bdb.get_bpbynumber(arg)", "intent": "Return a breakpoint specified by the given number . If `arg` is a string , it will be converted to a number .", "question_id": 799}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778}
{"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615}
{"snippet": "str.endswith(suffix)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False .", "question_id": 9191}
{"snippet": "profile.Profile(timer=None, builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument . With arguments `builtins`.", "question_id": 7676}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "dict.pop(key, default)", "intent": "If `key` is in the dictionary , remove it and return its value , else return `default` .", "question_id": 9486}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "wsgiref.simple_server.WSGIRequestHandler(request, client_address, server)", "intent": "Create an HTTP handler for the given `request` ( i.e . a socket ) , `client_address` ( a ( host , port ) tuple ) , and `server` ( WSGIServer instance ) .", "question_id": 12231}
{"snippet": "formatter.NullFormatter(writer=None)", "intent": "A formatter which does nothing . If `writer` is omitted , a NullWriter instance is created .", "question_id": 3839}
{"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}
{"snippet": "pprint.PrettyPrinter(depth=None)", "intent": "Construct a PrettyPrinter instance . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7626}
{"snippet": "operator.__le__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6520}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "POP3.list(which)", "intent": "Request message list , result is in the form ( response , [ 'mesg_num octets ' , ... ] , octets ) . If `which` is set , it is the message to list .", "question_id": 7609}
{"snippet": "mbox_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5829}
{"snippet": "shutil.copytree(src, dst, symlinks=False, ignore=None)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `symlinks` is true , symbolic links in the source tree are represented as symbolic links in the new tree and the metadata of the original links will be copied as far as the platform allows ; if false or omitted , the contents and metadata of the linked files are copied to the new tree . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "question_id": 8328}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "directory.start_component(component=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory .", "question_id": 6094}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "pdb.run(statement)", "intent": "Execute the `statement` ( given as a string or a code object ) under debugger control .", "question_id": 7327}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087}
{"snippet": "ipaddress.collapse_addresses(addresses)", "intent": "Return an iterator of the collapsed IPv4Network or IPv6Network objects . `addresses` is an iterator of IPv4Network or IPv6Network objects .", "question_id": 5235}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, defaults=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `defaults`.", "question_id": 1570}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "binary.encode(out)", "intent": "Write the XML-RPC base 64 encoding of this binary item to the `out` stream object .", "question_id": 12688}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557}
{"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "dialog.line(name, x, y, width, height)", "intent": "Add and return a Line control . With arguments `name`, `x`, `y`, `width`, `height`.", "question_id": 6139}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', _subparts=None)", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . `_subparts` is a sequence of initial subparts for the payload . With arguments `**_params`.", "question_id": 3322}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : With arguments `*paths`.", "question_id": 2797}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "formatter.NullFormatter(writer=None)", "intent": "A formatter which does nothing . If `writer` is omitted , a NullWriter instance is created .", "question_id": 3839}
{"snippet": "mime_types.guess_type(url, strict=True)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`, `strict`.", "question_id": 5967}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}
{"snippet": "element.findtext(match)", "intent": "Finds text for the first subelement matching `match` .", "question_id": 12495}
{"snippet": "base_manager.register(typeid, callable, proxytype, exposed, method_to_typeid)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid . `exposed` is used to specify a sequence of method names which proxies for this typeid should be allowed to access using BaseProxy._callmethod ( ) . `method_to_typeid` is a mapping used to specify the return type of those exposed methods which should return a proxy .", "question_id": 6289}
{"snippet": "os.spawnve(mode, path, args, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7058}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}
{"snippet": "io_base.readline(size=-1)", "intent": "Read and return one line from the stream . If `size` is specified , at most size bytes will be read .", "question_id": 5071}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "xmlrpc.client.ServerProxy(uri)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.", "question_id": 12669}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "bytes_parser.parse(fp)", "intent": "Read all the data from the binary file-like object `fp` , parse the resulting bytes , and return the message object .", "question_id": 3376}
{"snippet": "email.message_from_string(s, _class=None)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) . `_class` and `policy` are interpreted as with the Parser class constructor .", "question_id": 3405}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "loop.connect_write_pipe(protocol_factory, pipe)", "intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 302}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5867}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`.", "question_id": 5585}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "turtle.back(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10905}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "Panel.replace(win)", "intent": "Change the window associated with the panel to the window `win` .", "question_id": 2151}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "doc_test_finder.find(obj, name, module, globs)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object . The globals for each DocTest is formed by combining `globs` and `extraglobs` ( bindings in extraglobs override bindings in globs ) .", "question_id": 2851}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "InteractiveConsole.interact(banner=None)", "intent": "Closely emulate the interactive Python console . The optional `banner` argument specify the banner to print before the first interaction ; by default it prints a banner similar to the one printed by the standard Python interpreter , followed by the class name of the console object in parentheses ( so as not to confuse this with the real interpreter \u2013 since it \u2019 s so close !", "question_id": 1185}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "ast.fix_missing_locations(node)", "intent": "When you compile a `node` tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them .", "question_id": 152}
{"snippet": "calendar.prcal(year, l=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "question_id": 1009}
{"snippet": "dis.dis(depth=None)", "intent": "Disassemble the `x` object . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2710}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "nntplib.NNTP(host, timeout, port=119, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6406}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "lzma.LZMACompressor(check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5680}
{"snippet": "calendar.LocaleTextCalendar(firstweekday=0, locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale . With arguments `firstweekday`.", "question_id": 980}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "mailbox.Babyl(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in Babyl format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5796}
{"snippet": "NNTP.xover(start, end, file=None)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select . With arguments `file`.", "question_id": 6500}
{"snippet": "pprint.pprint(object, compact=False)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7648}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}
{"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}
{"snippet": "pdb.runeval(expression)", "intent": "See the documentation for the functions explained above . With arguments `expression`.", "question_id": 7355}
{"snippet": "bz2.open(filename, errors=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 880}
{"snippet": "smtp_server.process_message(peer, mailfrom, rcpttos, data, **kwargs)", "intent": "Raise a NotImplementedError exception . `peer` is the remote host \u2019 s address , `mailfrom` is the envelope originator , `rcpttos` are the envelope recipients and `data` is a string containing the contents of the e-mail ( which should be in RFC 5321 format ) . Implementations of process_message should use the `**kwargs` signature to accept arbitrary keyword arguments , since future feature enhancements may add keys to the kwargs dictionary .", "question_id": 8422}
{"snippet": "unicodedata.digit(chr)", "intent": "Returns the digit value assigned to the character `chr` as integer .", "question_id": 11346}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "gzip.GzipFile(filename=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value .", "question_id": 4283}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184}
{"snippet": "property(fget=None, fset=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value . `fset` is a function for setting an attribute value .", "question_id": 4090}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "dispatcher.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 671}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}
{"snippet": "test_result.addFailure(test, err)", "intent": "Called when the `test` case test signals a failure . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11525}
{"snippet": "wsgiref.validate.validator(application)", "intent": "Wrap `application` and return a new WSGI application object .", "question_id": 12235}
{"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "ossaudiodev.open(mode)", "intent": "Open an audio device and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7174}
{"snippet": "View.Modify(kind, data)", "intent": "Modify the view , by calling MsiViewModify ( ) . `kind` can be one of MSIMODIFY_SEEK , MSIMODIFY_REFRESH , MSIMODIFY_INSERT , MSIMODIFY_UPDATE , MSIMODIFY_ASSIGN , MSIMODIFY_REPLACE , MSIMODIFY_MERGE , MSIMODIFY_DELETE , MSIMODIFY_INSERT_TEMPORARY , MSIMODIFY_VALIDATE , MSIMODIFY_VALIDATE_NEW , MSIMODIFY_VALIDATE_FIELD , or MSIMODIFY_VALIDATE_DELETE . `data` must be a record describing the new data .", "question_id": 6075}
{"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multithread=True)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes . With arguments `multithread`.", "question_id": 12243}
{"snippet": "Decompress.decompress(data, max_length=0)", "intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string . If the optional parameter `max_length` is non-zero then the return value will be no longer than max_length .", "question_id": 12935}
{"snippet": "process.send_signal(signal)", "intent": "Sends the `signal` signal to the child process .", "question_id": 550}
{"snippet": "resource_reader.resource_path(resource)", "intent": "Returns the file system path to the `resource` .", "question_id": 4820}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "subprocess.check_call(args, stderr=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`.", "question_id": 9672}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "loop.remove_signal_handler(sig)", "intent": "Remove the handler for the `sig` signal .", "question_id": 304}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "os.utime(path, ns)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6959}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942}
{"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "mh.set_sequences(sequences)", "intent": "Re-define the `sequences` that exist in the mailbox based upon sequences , a dictionary of names mapped to key lists , like returned by get_sequences ( ) .", "question_id": 5784}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "email.header.Header(s=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value .", "question_id": 3117}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "text_io_base.seek(offset)", "intent": "Change the stream position to the given `offset` .", "question_id": 5142}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "meta_path_finder.find_module(fullname, path)", "intent": "A legacy method for finding a loader for the specified module . If this is a top-level import , `path` will be None . With arguments `fullname`.", "question_id": 4805}
{"snippet": "platform.mac_ver('', ''), machine='')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7512}
{"snippet": "SSLContext.load_verify_locations(cafile=None, capath=None, cadata=None)", "intent": "Load a set of \u201c certification authority \u201d ( CA ) certificates used to validate other peers \u2019 certificates when verify_mode is other than CERT_NONE . At least one of `cafile` or `capath` must be specified . The `cadata` object , if present , is either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates .", "question_id": 9010}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "message.get_param(param)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2991}
{"snippet": "csv.writer(csvfile, **fmtparams)", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . With arguments `**fmtparams`.", "question_id": 1682}
{"snippet": "unittest.main(exit=True)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . By default main calls sys.exit ( ) with an `exit` code indicating success or failure of the tests run .", "question_id": 11551}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "turtle.back(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10905}
{"snippet": "style.layout(style)", "intent": "Define the widget layout for given `style` .", "question_id": 10681}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "config_parser.read(filenames, encoding=None)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed . With arguments `encoding`.", "question_id": 1513}
{"snippet": "base_manager.register(typeid, callable, proxytype, exposed)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid . `exposed` is used to specify a sequence of method names which proxies for this typeid should be allowed to access using BaseProxy._callmethod ( ) .", "question_id": 6290}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "http.client.HTTPConnection(host)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number .", "question_id": 4374}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer)", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp .", "question_id": 1297}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "coverage_results.write_results(show_missing=True, summary=False)", "intent": "Write coverage results . Set `show_missing` to show lines that had no hits . Set `summary` to include in the output the coverage summary per module .", "question_id": 10729}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "str.endswith(suffix, start, end)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position . With optional `end` , stop comparing at that position .", "question_id": 9189}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "atexit.unregister(func)", "intent": "Remove `func` from the list of functions to be run at interpreter shutdown .", "question_id": 678}
{"snippet": "warnings.warn(message, category=None)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning .", "question_id": 12000}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "HTTPPasswordMgrWithPriorAuth.add_password(realm, uri, user, passwd)", "intent": "`realm` , `uri` , `user` , `passwd` are as for HTTPPasswordMgr.add_password ( ) .", "question_id": 11859}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "curses.panel.new_panel(win)", "intent": "Returns a panel object , associating it with the given window `win` .", "question_id": 2142}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "importlib.util.spec_from_file_location(name, location, submodule_search_locations=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`, `submodule_search_locations`.", "question_id": 4940}
{"snippet": "ctypes.PYFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the Python calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1800}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "@functools.wraps(wrapped)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`.", "question_id": 4160}
{"snippet": "directory.glob(pattern)", "intent": "Add a list of files to the current component as specified in the glob `pattern` .", "question_id": 6111}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "base_manager.register(typeid, callable, proxytype)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid .", "question_id": 6291}
{"snippet": "context_var.get(default)", "intent": "Return a value for the context variable for the current context . With arguments `default`.", "question_id": 1640}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "IMAP4.thread(threading_algorithm, charset)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4748}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, defaults=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `defaults`.", "question_id": 1570}
{"snippet": "config_parser.write(fileobject)", "intent": "Write a representation of the configuration to the specified file object , which must be opened in text mode ( accepting strings ) . With arguments `fileobject`.", "question_id": 1561}
{"snippet": "doc_test_parser.get_doctest(string, globs, name, filename, lineno)", "intent": "Extract all doctest examples from the given `string` , and collect them into a DocTest object . `globs` , `name` , `filename` , and `lineno` are attributes for the new DocTest object .", "question_id": 2856}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994}
{"snippet": "FileCookieJar.save(ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4504}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "print(*objects, sep=' ', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4081}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost', facility=LOG_USER)", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . If `facility` is not specified , LOG_USER is used . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5498}
{"snippet": "datetime.replace(day=self.day)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2287}
{"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "bz2.BZ2File(filename, buffering=None)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . The `buffering` argument is ignored .", "question_id": 888}
{"snippet": "urllib.parse.quote_plus(string, safe='')", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` .", "question_id": 11714}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262}
{"snippet": "importlib.resources.open_binary(package, resource)", "intent": "Open for binary reading the `resource` within `package` .", "question_id": 4852}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "ctypes.cast(obj, type)", "intent": "This function is similar to the cast operator in C. It returns a new instance of `type` which points to the same memory block as `obj` .", "question_id": 1812}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "curses.panel.new_panel(win)", "intent": "Returns a panel object , associating it with the given window `win` .", "question_id": 2142}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}
{"snippet": "datetime.replace(tzinfo=self.tzinfo)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "question_id": 2292}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10976}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "divmod(a, b)", "intent": "Take two ( non complex ) numbers as arguments and return `a` pair of numbers consisting of their quotient and remainder when using integer division . For integers , the result is the same as ( a // `b` , a % b ) .", "question_id": 4009}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "profile.Profile(builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . With arguments `builtins`.", "question_id": 7673}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "gettext.find(domain, localedir=None, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4228}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12662}
{"snippet": "OpenerDirector.open(url, data=None)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11838}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "dataclasses.field(hash=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `hash`.", "question_id": 2171}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "window.addnstr(y, x, str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2006}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}
{"snippet": "ctypes.memset(dst, c, count)", "intent": "Same as the standard C memset library function : fills the memory block at address `dst` with `count` bytes of value c. dst must be an integer specifying an address , or a ctypes instance . With arguments `c`.", "question_id": 1827}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "csv.DictReader(f, *args, **kwds, dialect='excel')", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `dialect`.", "question_id": 1696}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\", charset='utf-8'                     cte=None)", "intent": "Add `headers` and payload to `msg` : If `charset` is provided ( which is valid only for str ) , encode the string to bytes using the specified character set . With arguments `<'str'>`, `subtype`.", "question_id": 3047}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "controller.open(url, new=0, autoraise=True)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible . With arguments `autoraise`.", "question_id": 12117}
{"snippet": "asyncio.as_completed(aws)", "intent": "Run awaitable objects in the `aws` set concurrently .", "question_id": 615}
{"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "http.client.HTTPResponse(sock)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`.", "question_id": 4402}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "loop.sendfile(transport, file, offset=0)", "intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file .", "question_id": 257}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196}
{"snippet": "audioop.bias(fragment, width, bias)", "intent": "Return a `fragment` that is the original fragment with a `bias` added to each sample . With arguments `width`.", "question_id": 685}
{"snippet": "Path.rglob(pattern)", "intent": "This is like calling Path.glob ( ) with \u201c **/ \u201d added in front of the given relative `pattern` :", "question_id": 7312}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multithread=True)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes . With arguments `multithread`.", "question_id": 12243}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "tempfile.NamedTemporaryFile(mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `mode`.", "question_id": 10044}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "connection.backup(target, progress=None, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8837}
{"snippet": "random.gammavariate(alpha, beta)", "intent": "Gamma distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7911}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "Path.rename(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7308}
{"snippet": "HTTPSHandler.https_open(req)", "intent": "Send an HTTPS request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11872}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325}
{"snippet": "test.support.join_thread(thread, timeout=30.0)", "intent": "Join a `thread` within `timeout` .", "question_id": 10255}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "bz2.compress(data, compresslevel=9)", "intent": "Compress `data` , a bytes-like object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 907}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "TarInfo.tobuf(encoding=ENCODING)", "intent": "Create a string buffer from a TarInfo object . With arguments `encoding`.", "question_id": 9975}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "loop.set_task_factory(factory)", "intent": "Set a task `factory` that will be used by loop.create_task ( ) .", "question_id": 200}
{"snippet": "wsgiref.validate.validator(application)", "intent": "Wrap `application` and return a new WSGI application object .", "question_id": 12235}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "AU_read.setpos(pos)", "intent": "Set the file pointer to the specified position . Only values returned from tell ( ) should be used for `pos` .", "question_id": 9717}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "lzma_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 5699}
{"snippet": "TarInfo.fromtarfile(tarfile)", "intent": "Read the next member from the TarFile object `tarfile` and return it as a TarInfo object .", "question_id": 9972}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "shlex.error_leader(infile=None)", "intent": "This method generates an error message leader in the format of a Unix C compiler error label ; the format is ' '' % s '' , line % d : ' , where the % s is replaced with the name of the current source file and the % d with the current input line number ( the optional arguments can be used to override these ) . With arguments `infile`.", "question_id": 8291}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "pprint.pprint(object, indent=1)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7645}
{"snippet": "text_io_base.read(size=-1)", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5139}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "iter(proxy)", "intent": "Return an iterator over the keys of the underlying mapping . With arguments `proxy`.", "question_id": 11209}
{"snippet": "shutil.copyfile(src, dst)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst .", "question_id": 8311}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "collections.namedtuple(typename, field_names, defaults=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . `defaults` can be None or an iterable of default values .", "question_id": 1378}
{"snippet": "OpenerDirector.add_handler(handler)", "intent": "`handler` should be an instance of BaseHandler .", "question_id": 11834}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "meta_path_finder.find_spec(fullname, path, target=None)", "intent": "An abstract method for finding a spec for the specified module . If this is a top-level import , `path` will be None . When passed in , `target` is a module object that the finder may use to make a more educated guess about what spec to return . With arguments `fullname`.", "question_id": 4804}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "asyncio.as_completed(aws)", "intent": "Run awaitable objects in the `aws` set concurrently .", "question_id": 615}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`.", "question_id": 65}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "platform.architecture(executable=sys.executable)", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information .", "question_id": 7459}
{"snippet": "gc.get_referrers(*objs)", "intent": "Return the list of objects that directly refer to any of objs . With arguments `*objs`.", "question_id": 4181}
{"snippet": "bytearray.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9310}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "Node.toprettyxml(indent=\"\\t\", encoding=None)", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "question_id": 12418}
{"snippet": "config_parser.read(filenames)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .", "question_id": 1512}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "asyncio.shield(aw)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task .", "question_id": 603}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "definition.__qualname__", "intent": "The qualified name of the class, function, method, descriptor, or generator instance.", "question_id": 9503}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}
{"snippet": "profile.Profile(timer=None, timeunit=0.0)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument . If the number is an integer , the `timeunit` specifies a multiplier that specifies the duration of each unit of time .", "question_id": 7674}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982}
{"snippet": "nntplib.NNTP_SSL(host, timeout, password=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`, `password`.", "question_id": 6422}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "difflib.SequenceMatcher(isjunk=None, b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2675}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', backupCount=0)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` . If `backupCount` is nonzero , at most backupCount files will be kept , and if more would be created when rollover occurs , the oldest one is deleted .", "question_id": 5479}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "platform.libc_ver(version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7540}
{"snippet": "__import__(name, globals=None, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4140}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "doctest.DocFileSuite(*paths, optionflags=0)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `optionflags` specifies the default doctest options for the tests , created by or-ing together individual option flags . With arguments `*paths`.", "question_id": 2802}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "os.spawnlpe(mode, file, env)", "intent": "Execute the program path in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The variants which include a second \u201c p \u201d near the end ( spawnlp ( ) , spawnlpe ( ) , spawnvp ( ) , and spawnvpe ( ) ) will use the PATH environment variable to locate the program `file` . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7056}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`, `MIMEtype`.", "question_id": 5862}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "operator.__ge__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6523}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "IMAP4.create(mailbox)", "intent": "Create new `mailbox` named mailbox .", "question_id": 4696}
{"snippet": "pool.apply_async(func, args, kwds, callback)", "intent": "A variant of the apply ( ) method which returns a result object . If `callback` is specified then it should be a callable which accepts a single argument . With arguments `func`, `args`, `kwds`.", "question_id": 6336}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . `session` , see session .", "question_id": 9031}
{"snippet": "tempfile.TemporaryDirectory(suffix=None, dir=None)", "intent": "This function securely creates a temporary directory using the same rules as mkdtemp ( ) . With arguments `suffix`, `dir`.", "question_id": 10068}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "test_result.addExpectedFailure(test, err)", "intent": "Called when the `test` case test fails , but was marked with the expectedFailure ( ) decorator . The default implementation appends a tuple ( test , formatted_err ) to the instance \u2019 s expectedFailures attribute , where formatted_err is a formatted traceback derived from `err` .", "question_id": 11528}
{"snippet": "re.fullmatch(pattern, string, flags=0)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7942}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "message.set_payload(payload)", "intent": "Set the entire message object \u2019 s `payload` to payload .", "question_id": 2960}
{"snippet": "message.get_params(failobj=None, unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2988}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "binascii.b2a_qp(data, quotetabs=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded .", "question_id": 829}
{"snippet": "RuntimeError", "intent": "Raised when an error is detected that doesn\u2019t fall in any of the other categories.", "question_id": 3662}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "config_parser.items(section)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT .", "question_id": 1556}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "ur_lopener.retrieve(url, data=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . It will be called once at the start and after each chunk of `data` is read from the network .", "question_id": 11899}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "test_case.assertIsNot(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11385}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459}
{"snippet": "math.log(x, base)", "intent": "With one argument , return the natural logarithm of `x` ( to `base` e ) .", "question_id": 5907}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, comment_prefixes=('#')", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `comment_prefixes`.", "question_id": 1574}
{"snippet": "element_tree.write(file, encoding=\"us-ascii\")", "intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12528}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "CookiePolicy.set_ok(cookie, request)", "intent": "Return boolean value indicating whether `cookie` should be accepted from server . `request` is an object implementing the interface defined by the documentation for CookieJar.extract_cookies ( ) .", "question_id": 4532}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "patch.object(target, attribute, **kwargs, new=DEFAULT, create=False)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11626}
{"snippet": "Record.SetString(field, value)", "intent": "Set `field` to `value` through MsiRecordSetString ( ) .", "question_id": 6084}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "tempfile.mkstemp(suffix=None, dir=None)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `dir` is not None , the file will be created in that directory ; otherwise , a default directory is used .", "question_id": 10077}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "doctest.UnexpectedException(test, example, exc_info)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` raised an unexpected exception . With arguments `test`, `exc_info`.", "question_id": 2906}
{"snippet": "operator.__eq__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6521}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "urllib.error.ContentTooShortError(msg, content)", "intent": "This exception is raised when the urlretrieve ( ) function detects that the amount of the downloaded data is less than the expected amount ( given by the Content-Length header ) . The `content` attribute stores the downloaded ( and supposedly truncated ) data . With arguments `msg`.", "question_id": 11664}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "element_tree.find(match)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`.", "question_id": 12512}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11138}
{"snippet": "FileCookieJar.load(ignore_discard=False, ignore_expires=False)", "intent": "Load cookies from a file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4512}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request . If the optional `allow_dotted_names` argument is true and the instance does not have a _dispatch ( ) method , then if the requested method name contains periods , each component of the method name is searched for individually , with the effect that a simple hierarchical search is performed .", "question_id": 12736}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "bdb.Breakpoint(self, file, line, cond=None, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`, `cond`.", "question_id": 760}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively . If the `buffer_size` is omitted it defaults to DEFAULT_BUFFER_SIZE .", "question_id": 5131}
{"snippet": "re.split(pattern, string, maxsplit=0, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "question_id": 7946}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "fileinput.FileInput(mode='r')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With `mode` you can specify which file mode will be passed to open ( ) .", "question_id": 3805}
{"snippet": "turtle.left(angle)", "intent": "Turn turtle left by `angle` units .", "question_id": 10910}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "http.client.HTTPSConnection(host, timeout)", "intent": "A subclass of HTTPConnection that uses SSL for communication with secure servers . With arguments `host`, `timeout`.", "question_id": 4382}
{"snippet": "Wave_write.setcomptype(type, name)", "intent": "Set the compression `type` and description . With arguments `name`.", "question_id": 12069}
{"snippet": "os.WIFSIGNALED(status)", "intent": "Return True if the process exited due to a signal , otherwise return False . With arguments `status`.", "question_id": 7091}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}
{"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}
{"snippet": "dis.disassemble(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2719}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}
{"snippet": "datetime.astimezone(tz=None)", "intent": "Return a datetime object with new tzinfo attribute `tz` , adjusting the date and time data so the result is the same UTC time as self , but in tz \u2019 s local time .", "question_id": 2295}
{"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787}
{"snippet": "windows_proactor_event_loop_policy.attach_loop(loop)", "intent": "Attach the watcher to an event `loop` .", "question_id": 386}
{"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}
{"snippet": "bdb.break_anywhere(frame)", "intent": "This method checks if there is a breakpoint in the filename of the current `frame` .", "question_id": 779}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}
{"snippet": "io.FileIO(name, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener .", "question_id": 5102}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "urllib.parse.quote_from_bytes(bytes, safe='/')", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding . With arguments `safe`.", "question_id": 11722}
{"snippet": "turtle.ondrag(fun)", "intent": "Bind `fun` to mouse-move events on this turtle .", "question_id": 11027}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "gettext.gettext(message)", "intent": "Return the localized translation of `message` , based on the current global domain , language , and locale directory .", "question_id": 4216}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "header.__str__()", "intent": "Returns an approximation of the Header as a string , using an unlimited line length .", "question_id": 3138}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "http.cookies.BaseCookie(input)", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "question_id": 4578}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "memory_bio.read(n=-1)", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9057}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "ast.iter_fields(node)", "intent": "Yield a tuple of ( fieldname , value ) for each field in node._fields that is present on `node` .", "question_id": 156}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}
{"snippet": "profile.runcall(func, *args, **kwargs)", "intent": "Profile `func` ( `*args` , `**kwargs` )", "question_id": 7687}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "subprocess.call(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9664}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "doc_test_runner.report_failure(out, test, example, got)", "intent": "Report that the given `example` failed . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `got` is the actual output from the example .", "question_id": 2871}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, unsafe_hash=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2190}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, enable_SMTPUTF8=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `enable_SMTPUTF8` determines whether the SMTPUTF8 extension ( as defined in RFC 6531 ) should be enabled .", "question_id": 8430}
{"snippet": "os.WIFSIGNALED(status)", "intent": "Return True if the process exited due to a signal , otherwise return False . With arguments `status`.", "question_id": 7091}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "statistics.pstdev(data, mu=None)", "intent": "Return the population standard deviation ( the square root of the population variance ) . With arguments `data`, `mu`.", "question_id": 9134}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "loop.getaddrinfo(host, port, family=0, proto=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `proto`.", "question_id": 295}
{"snippet": "Record.GetString(field)", "intent": "Return the value of `field` as a string where possible .", "question_id": 6083}
{"snippet": "crypt.mksalt(method=None)", "intent": "Return a randomly generated salt of the specified `method` .", "question_id": 1677}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "bytearray()", "intent": "There is no dedicated literal syntax for bytearray objects , instead they are always created by calling the constructor :", "question_id": 9266}
{"snippet": "crypt.mksalt(method=None, rounds=None)", "intent": "Return a randomly generated salt of the specified `method` . `rounds` specifies the number of rounds for METHOD_SHA256 , METHOD_SHA512 and METHOD_BLOWFISH .", "question_id": 1679}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "question_id": 1703}
{"snippet": "compile(source, filename, mode, flags=0, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3996}
{"snippet": "base64.a85decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 741}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}
{"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480}
{"snippet": "codecs.open(filename, buffering=1)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `buffering` has the same meaning as for the built-in open ( ) function . With arguments `filename`.", "question_id": 1229}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11129}
{"snippet": "readline.remove_history_item(pos)", "intent": "Remove history item specified by its position from the history . With arguments `pos`.", "question_id": 8032}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}
{"snippet": "cgi.parse_qs(qs, keep_blank_values=False)", "intent": "This function is deprecated in this module . With arguments `qs`, `keep_blank_values`.", "question_id": 1040}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . With arguments `prog`.", "question_id": 81}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "mock.attach_mock(mock, attribute)", "intent": "Attach a `mock` as an `attribute` of this one , replacing its name and parent .", "question_id": 11584}
{"snippet": "operator.__ge__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6523}
{"snippet": "Codec.decode(input)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1264}
{"snippet": "email_message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3261}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777}
{"snippet": "difflib.context_diff(a, b, fromfile='', tofiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2637}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "shlex.split(s, posix=True)", "intent": "Split the string `s` using shell-like syntax . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8270}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "turtle.setposition(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10917}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642}
{"snippet": "io.FileIO(name, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener .", "question_id": 5102}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "question_id": 1299}
{"snippet": "tarfile.open(**kwargs)", "intent": "Return a TarFile object for the pathname `name` . With arguments `**kwargs`.", "question_id": 9890}
{"snippet": "patch.multiple(target, **kwargs, spec=None, create=False)", "intent": "Perform multiple patches in a single call . The arguments `spec` , `spec_set` , create , `autospec` and `new_callable` have the same meaning as for patch ( ) . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11638}
{"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}
{"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752}
{"snippet": "trace.Trace(timing=False)", "intent": "Create an object to `trace` execution of a single statement or expression . `timing` enables a timestamp relative to when tracing was started to be displayed .", "question_id": 10715}
{"snippet": "shutil.register_archive_format(name, function)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .", "question_id": 8361}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}
{"snippet": "io_base.truncate(size=None)", "intent": "Resize the stream to the given `size` in bytes ( or the current position if size is not specified ) .", "question_id": 5079}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "frozenset()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9434}
{"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108}
{"snippet": "sunau.open(file, mode)", "intent": "If `file` is a string , open the file by that name , otherwise treat it as a seekable file-like object . `mode` can be any of", "question_id": 9691}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 833}
{"snippet": "subprocess.Popen(args, bufsize=-1)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `bufsize` will be supplied as the corresponding argument to the open ( ) function when creating the stdin/stdout/stderr pipe file objects :", "question_id": 9600}
{"snippet": "shutil.register_archive_format(name, function, extra_args)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives . If given , `extra_args` is a sequence of ( name , value ) pairs that will be used as extra keywords arguments when the archiver callable is used .", "question_id": 8360}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, secure=None)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . To specify the use of a `secure` protocol ( TLS ) , pass in a tuple to the secure argument . With arguments `fromaddr`.", "question_id": 5517}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11129}
{"snippet": "buffered_io_base.read(size=-1)", "intent": "Read and return up to `size` bytes .", "question_id": 5093}
{"snippet": "argparse.FileType(bufsize=-1, encoding=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`, `encoding`.", "question_id": 93}
{"snippet": "random.randrange(stop)", "intent": "Return a randomly selected element from range ( start , `stop` , step ) .", "question_id": 7890}
{"snippet": "marshal.loads(bytes)", "intent": "Convert the bytes-like object to a value . Extra `bytes` in the input are ignored .", "question_id": 5883}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "os.symlink(src, dst)", "intent": "Create a symbolic link pointing to `src` named `dst` .", "question_id": 6951}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "@unittest.skipUnless(condition, reason)", "intent": "Skip the decorated test unless `condition` is true . With arguments `reason`.", "question_id": 11360}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203}
{"snippet": "platform.java_ver('', ''), '', ''), release='', vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7490}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "policy.header_store_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` provided by the application program when the application program is modifying a Message programmatically ( as opposed to a Message created by a parser ) .", "question_id": 3424}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "ftplib.FTP_TLS(host='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `host`.", "question_id": 3889}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "connection.backup(target, progress=None, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8837}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "inspect.formatargvalues(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "intent": "Format a pretty argument spec from the four values returned by getargvalues ( ) . With arguments `args`, `varargs`, `varkw`, `locals`, `formatarg`, `formatvarargs`, `formatvarkw`.", "question_id": 5017}
{"snippet": "dis.stack_effect(opcode, oparg)", "intent": "Compute the stack effect of `opcode` with argument `oparg` .", "question_id": 2731}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild, context)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . `context` can be used to specify the context used for starting the worker processes . With arguments `initargs`.", "question_id": 6326}
{"snippet": "IMAP4.open(host, port)", "intent": "Opens socket to `port` at `host` .", "question_id": 4719}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "Match.group(group1)", "intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "question_id": 7996}
{"snippet": "tempfile.mkdtemp(prefix=None, dir=None)", "intent": "Creates a temporary directory in the most secure manner possible . The `prefix` , `suffix` , and `dir` arguments are the same as for mkstemp ( ) .", "question_id": 10087}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "base64.a85encode(b, foldspaces=False, adobe=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `adobe` controls whether the encoded byte sequence is framed with < ~ and ~ > , which is used by the Adobe implementation .", "question_id": 733}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}
{"snippet": "gettext.ngettext(singular, plural, n)", "intent": "Like gettext ( ) , but consider `plural` forms . If no translation is found , return `singular` if n is 1 ; return plural otherwise . If a translation is found , apply the plural formula to `n` , and return the resulting message ( some languages have more than two plural forms ) .", "question_id": 4218}
{"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "FTP.connect(host='')", "intent": "Connect to the given `host` and `port` .", "question_id": 3905}
{"snippet": "fcntl.lockf(fd, cmd, len=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3752}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "platform.architecture(executable=sys.executable, linkage='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7463}
{"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}
{"snippet": "cgi.parse_qs(qs, keep_blank_values=False)", "intent": "This function is deprecated in this module . With arguments `qs`, `keep_blank_values`.", "question_id": 1040}
{"snippet": "chunk.seek(pos, whence=0)", "intent": "Set the chunk \u2019 s current position . The `whence` argument is optional and defaults to 0 ( absolute file positioning ) ; other values are 1 ( seek relative to the current position ) and 2 ( seek relative to the file \u2019 s end ) . With arguments `pos`.", "question_id": 1088}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}
{"snippet": "doctest.DocFileSuite(*paths, parser=DocTestParser())", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `parser` specifies a DocTestParser ( or subclass ) that should be used to extract tests from the files . With arguments `*paths`.", "question_id": 2803}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "test_case.assertNotIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11397}
{"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491}
{"snippet": "doctest.DocFileSuite(*paths, setUp=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `setUp` specifies a set-up function for the test suite . With arguments `*paths`.", "question_id": 2799}
{"snippet": "traceback.format_exception(etype, value, tb, chain=True)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`, `chain`.", "question_id": 10779}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861}
{"snippet": "platform.libc_ver(lib='', version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7545}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823}
{"snippet": "formatter.NullFormatter(writer=None)", "intent": "A formatter which does nothing . If `writer` is omitted , a NullWriter instance is created .", "question_id": 3839}
{"snippet": "config_parser.readfp(fp)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .", "question_id": 1566}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "exit_stack.callback(callback, *args, **kwds)", "intent": "Accepts an arbitrary `callback` function and arguments and adds it to the callback stack . With arguments `*args`, `**kwds`.", "question_id": 1629}
{"snippet": "os.set_blocking(fd, blocking)", "intent": "Set the `blocking` mode of the specified file descriptor . With arguments `fd`.", "question_id": 6801}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10973}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "base_rotating_handler.rotate(source, dest)", "intent": "When rotating , rotate the current log . The default implementation calls the \u2018 rotator \u2019 attribute of the handler , if it \u2019 s callable , passing the `source` and `dest` arguments to it .", "question_id": 5457}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}
{"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400}
{"snippet": "test_case.assertNotIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11397}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "urllib.request.URLopener(**x509)", "intent": "Base class for opening and reading URLs . With arguments `**x509`.", "question_id": 11890}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "tokenize.tokenize(readline)", "intent": "The tokenize ( ) generator requires one argument , `readline` , which must be a callable object which provides the same interface as the io.IOBase.readline ( ) method of file objects .", "question_id": 10701}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "ZipFile.read(name, pwd=None)", "intent": "Return the bytes of the file `name` in the archive . `pwd` is the password used for encrypted files and , if specified , it will override the default password set with setpassword ( ) .", "question_id": 12829}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "sys.excepthook(type, value, traceback)", "intent": "This function prints out a given `traceback` and exception to sys.stderr . With arguments `type`, `value`.", "question_id": 9781}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698}
{"snippet": "message.__str__()", "intent": "Equivalent to as_string ( ) .", "question_id": 2946}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748}
{"snippet": "asyncio.BoundedSemaphore(value=1)", "intent": "A bounded semaphore object . Bounded Semaphore is a version of Semaphore that raises a ValueError in release ( ) if it increases the internal counter above the initial `value` .", "question_id": 589}
{"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "warnings.warn(message, category=None)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning .", "question_id": 12000}
{"snippet": "collections.deque(iterable)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` .", "question_id": 1351}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "pprint.pformat(object, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7635}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925}
{"snippet": "memory_bio.write(buf)", "intent": "Write the bytes from `buf` to the memory BIO .", "question_id": 9058}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}
{"snippet": "frozenset(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9433}
{"snippet": "DeprecationWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "question_id": 3703}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`, `MIMEtype`.", "question_id": 5862}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "fileinput.FileInput(files=None)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `files`.", "question_id": 3801}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "email.encoders.encode_7or8bit(msg)", "intent": "This doesn \u2019 t actually modify the message \u2019 s payload , but it does set the Content-Transfer-Encoding header to either 7bit or 8bit as appropriate , based on the payload data . With arguments `msg`.", "question_id": 3071}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "difflib.context_diff(a, b, tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2630}
{"snippet": "urllib.request.urlretrieve(url, filename=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11882}
{"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}
{"snippet": "http.client.HTTPResponse(sock)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`.", "question_id": 4402}
{"snippet": "str.endswith(suffix, start, end)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position . With optional `end` , stop comparing at that position .", "question_id": 9189}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1', short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12664}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "timeit.repeat(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10494}
{"snippet": "@dataclasses.dataclass(repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `repr`.", "question_id": 2159}
{"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}
{"snippet": "doctest.DocTestFinder(verbose=False, recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2846}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}
{"snippet": "importlib.__import__(name, locals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `locals`.", "question_id": 4785}
{"snippet": "tempfile.TemporaryFile(newline=None)", "intent": "Return a file-like object that can be used as a temporary storage area . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10037}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "os.spawnle(mode, path, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7054}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "bytes(source, encoding)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`.", "question_id": 3986}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "ctypes._Pointer", "intent": "Private, abstract base class for pointers.", "question_id": 1896}
{"snippet": "FTP.login(user='anonymous', passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3919}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}
{"snippet": "types.ModuleType(name, doc=None)", "intent": "The type of modules . Constructor takes the `name` of the module to be created and optionally its docstring . With arguments `doc`.", "question_id": 11197}
{"snippet": "async_exit_stack.enter_async_context(cm)", "intent": "Similar to enter_context ( ) but expects an asynchronous context manager . With arguments `cm`.", "question_id": 1633}
{"snippet": "FTP.retrbinary(cmd, callback, blocksize=8192)", "intent": "Retrieve a file in binary transfer mode . `cmd` should be an appropriate RETR command : 'RETR filename ' . The `callback` function is called for each block of data received , with a single bytes argument giving the data block . The optional `blocksize` argument specifies the maximum chunk size to read on the low-level socket object created to do the actual transfer ( which will also be the largest size of the data blocks passed to callback ) .", "question_id": 3927}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "asyncio.BoundedSemaphore(value=1)", "intent": "A bounded semaphore object . Bounded Semaphore is a version of Semaphore that raises a ValueError in release ( ) if it increases the internal counter above the initial `value` .", "question_id": 589}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None, is_package=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g . With arguments `is_package`.", "question_id": 4917}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11421}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "pyclbr.readmodule(module, path=None)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package . If given , `path` is a sequence of directory paths prepended to sys.path , which is used to locate the module source code .", "question_id": 7707}
{"snippet": "r_lock.acquire(blocking=True)", "intent": "Acquire a lock , `blocking` or non-blocking .", "question_id": 10382}
{"snippet": "style.theme_create(themename, parent=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme .", "question_id": 10687}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, spec=None)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . The `spec` and `spec_set` keyword arguments are passed to the MagicMock if patch is creating one for you . With arguments `**kwargs`.", "question_id": 11615}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "message.set_type(type)", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3013}
{"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}
{"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0, target=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . It can be fed XML data incrementally with the feed ( ) method , and parsing events are translated to a push API - by invoking callbacks on the `target` object .", "question_id": 12550}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "message.get_param(param, header='content-type')", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2993}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "gettext.gettext(message)", "intent": "Return the localized translation of `message` , based on the current global domain , language , and locale directory .", "question_id": 4216}
{"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950}
{"snippet": "os.fwalk(top='.', follow_symlinks=False)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . Note however that , unlike other functions , the fwalk ( ) default value for `follow_symlinks` is False . With arguments `top`.", "question_id": 6991}
{"snippet": "dataclasses.field(repr=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `repr`.", "question_id": 2170}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "os.execvpe(file, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7016}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "HTTPSHandler.https_open(req)", "intent": "Send an HTTPS request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11872}
{"snippet": "subprocess.run(args, stdin=None)", "intent": "Run the command described by `args` . The input argument is passed to Popen.communicate ( ) and thus to the subprocess \u2019 s `stdin` .", "question_id": 9568}
{"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\", method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12460}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "scheduler.enterabs(time, priority, action, argument=(), kwargs={})", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "question_id": 8121}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, preset=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5710}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667}
{"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "pdb.Pdb(completekey='tab', skip=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7350}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "incremental_decoder.decode(object)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object .", "question_id": 1275}
{"snippet": "doctest.DocFileSuite(*paths, parser=DocTestParser())", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `parser` specifies a DocTestParser ( or subclass ) that should be used to extract tests from the files . With arguments `*paths`.", "question_id": 2803}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "difflib.unified_diff(a, b, tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2649}
{"snippet": "IMAP4.create(mailbox)", "intent": "Create new `mailbox` named mailbox .", "question_id": 4696}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "pkgutil.walk_packages(path=None, prefix='', onerror=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "question_id": 7456}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "turtle.onrelease(fun, btn=1)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`.", "question_id": 11024}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "webbrowser.open(url, autoraise=True)", "intent": "Display `url` using the default browser . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12104}
{"snippet": "nntplib.NNTP_SSL(host, timeout, port=563)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`.", "question_id": 6420}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "nntplib.NNTP_SSL(host, user=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `user`.", "question_id": 6431}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . `session` , see session .", "question_id": 9031}
{"snippet": "bytes.lstrip(chars)", "intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "question_id": 9343}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "calendar.LocaleHTMLCalendar(locale=None)", "intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 983}
{"snippet": "ftplib.FTP_TLS(host='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `host`.", "question_id": 3889}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "base_http_request_handler.log_request(size='-')", "intent": "Logs an accepted ( successful ) request . If a `size` of the response is available , then it should be passed as the size parameter .", "question_id": 4650}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "InteractiveInterpreter.runsource(source, symbol=\"single\")", "intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "question_id": 1177}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "nntplib.NNTP(host, user=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6411}
{"snippet": "bdb.break_anywhere(frame)", "intent": "This method checks if there is a breakpoint in the filename of the current `frame` .", "question_id": 779}
{"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "subprocess.check_call(args, stdin=None, shell=False)", "intent": "Run command with arguments . With arguments `args`, `stdin`, `shell`.", "question_id": 9678}
{"snippet": "lzma.LZMACompressor(check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5680}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "test.support.join_thread(thread, timeout=30.0)", "intent": "Join a `thread` within `timeout` .", "question_id": 10255}
{"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}
{"snippet": "ossaudiodev.openmixer(device)", "intent": "Open a mixer `device` and return an OSS mixer device object .", "question_id": 7176}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}
{"snippet": "FTP.set_debuglevel(level)", "intent": "Set the instance \u2019 s debugging `level` .", "question_id": 3903}
{"snippet": "message.get_param(param, header='content-type')", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2993}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "parser.issuite(st)", "intent": "This function mirrors isexpr ( ) in that it reports whether an ST object represents an 'exec ' form , commonly known as a \u201c suite. \u201d It is not safe to assume that this function is equivalent to not isexpr ( `st` ) , as additional syntactic fragments may be supported in the future .", "question_id": 7225}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "object.__setstate__(state)", "intent": "Upon unpickling , if the class defines __setstate__ ( ) , it is called with the unpickled `state` .", "question_id": 7412}
{"snippet": "str(encoding='utf-8', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9176}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "doctest.testfile(filename, report=True)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `report` prints a summary at the end when true , else prints nothing at the end .", "question_id": 2772}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "os.getpriority(which, who)", "intent": "Get program scheduling priority . The value `which` is one of PRIO_PROCESS , PRIO_PGRP , or PRIO_USER , and `who` is interpreted relative to which ( a process identifier for PRIO_PROCESS , process group identifier for PRIO_PGRP , and a user ID for PRIO_USER ) .", "question_id": 6684}
{"snippet": "email.utils.encode_rfc2231(s, language=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3481}
{"snippet": "urllib.request.urlopen(url, data=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "question_id": 11753}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "frozenset(iterable)", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4023}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "asyncore.loop(timeout, use_poll, map)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 648}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "pprint.pformat(object, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7635}
{"snippet": "window.insstr(str, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`, `attr`.", "question_id": 2081}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2112}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "message.__str__()", "intent": "Equivalent to as_string ( ) .", "question_id": 2946}
{"snippet": "datetime.replace(day=self.day)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2287}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "dispatcher.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 671}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "message.__str__()", "intent": "Equivalent to as_string ( ) .", "question_id": 2946}
{"snippet": "re.split(pattern, string, maxsplit=0, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "question_id": 7946}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "io.FileIO(name, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener .", "question_id": 5102}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11118}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`, `tearDown`.", "question_id": 11477}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11502}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "email.headerregistry.Address(display_name='', username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec . With arguments `display_name`.", "question_id": 3191}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "poplib.POP3(host, timeout)", "intent": "This class implements the actual POP3 protocol . The optional `timeout` parameter specifies a timeout in seconds for the connection attempt ( if not specified , the global default timeout setting will be used ) . With arguments `host`.", "question_id": 7586}
{"snippet": "tempfile.TemporaryFile(newline=None)", "intent": "Return a file-like object that can be used as a temporary storage area . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10037}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "readline.set_completer(function)", "intent": "Set or remove the completer `function` .", "question_id": 8040}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "Path.rglob(pattern)", "intent": "This is like calling Path.glob ( ) with \u201c **/ \u201d added in front of the given relative `pattern` :", "question_id": 7312}
{"snippet": "codecs.IncrementalEncoder(errors='strict')", "intent": "Constructor for an IncrementalEncoder instance . The IncrementalEncoder may implement different error handling schemes by providing the `errors` keyword argument .", "question_id": 1266}
{"snippet": "curses.newwin(nlines, ncols)", "intent": "Return a new window , whose left-upper corner is at ( begin_y , begin_x ) , and whose height/width is nlines/ncols . With arguments `nlines`, `ncols`.", "question_id": 1958}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "InteractiveInterpreter.runsource(source, filename=\"<input>\", symbol=\"single\")", "intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "question_id": 1178}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "calendar.itermonthdays4(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 916}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "os.register_at_fork(before=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order .", "question_id": 7046}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "question_id": 1299}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101}
{"snippet": "calendar.LocaleTextCalendar(locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 979}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "test.support.calcvobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nPn { `fmt` } 0n or , if gettotalrefcount exists , 2PnPn { fmt } 0P .", "question_id": 10201}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714}
{"snippet": "heapq.heapreplace(heap, item)", "intent": "Pop and return the smallest `item` from the `heap` , and also push the new item .", "question_id": 4320}
{"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12225}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "widget.insert(pos, child, **kw)", "intent": "Inserts a pane at the specified position . `pos` is either the string \u201c end \u201d , an integer index , or the name of a managed `child` . With arguments `**kw`.", "question_id": 10608}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . If your SMTP server requires authentication , you can specify a ( username , password ) tuple for the `credentials` argument . To specify the use of a `secure` protocol ( TLS ) , pass in a tuple to the secure argument . With arguments `fromaddr`.", "question_id": 5519}
{"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "traceback.print_stack(f=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10762}
{"snippet": "code.interact(readfunc=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . This creates a new instance of InteractiveConsole and sets `readfunc` to be used as the InteractiveConsole.raw_input ( ) method , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1169}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511}
{"snippet": "dis.disco(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2724}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "dataclasses.field(repr=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `repr`.", "question_id": 2170}
{"snippet": "style.lookup(style, option)", "intent": "Returns the value specified for `option` in `style` .", "question_id": 10677}
{"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "message.get_param(param, header='content-type')", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2993}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557}
{"snippet": "os.WIFSTOPPED(status)", "intent": "Return True if the process has been stopped , otherwise return False . With arguments `status`.", "question_id": 7090}
{"snippet": "cmd.Cmd(stdin=None, stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1133}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "stats.add(*filenames)", "intent": "This method of the Stats class accumulates additional profiling information into the current profiling object . With arguments `*filenames`.", "question_id": 7691}
{"snippet": "chunk.seek(pos)", "intent": "Set the chunk \u2019 s current position . With arguments `pos`.", "question_id": 1087}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "shlex.split(s, comments=False, posix=True)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8271}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "bytes_generator.clone(fp)", "intent": "Return an independent clone of this BytesGenerator instance with the exact same option settings , and `fp` as the new outfp .", "question_id": 3090}
{"snippet": "Morsel.set(key, value, coded_value)", "intent": "Set the `key` , `value` and `coded_value` attributes .", "question_id": 4599}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12662}
{"snippet": "doctest.run_docstring_examples(f, globs)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context .", "question_id": 2786}
{"snippet": "urllib.parse.urlencode(query, encoding=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11735}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`.", "question_id": 11072}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "timer.repeat(number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) .", "question_id": 10513}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211}
{"snippet": "SubprocessProtocol.pipe_connection_lost(fd, exc)", "intent": "Called when one of the pipes communicating with the child process is closed . `fd` is the integer file descriptor that was closed . With arguments `exc`.", "question_id": 443}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "importlib.find_loader(name, path=None)", "intent": "Find the loader for a module , optionally within the specified `path` . If the module is in sys.modules , then sys.modules [ `name` ] .__loader__ is returned ( unless the loader would be None or is not set , in which case ValueError is raised ) .", "question_id": 4796}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "FTP.login(passwd='', acct='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3921}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "@functools.lru_cache(typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4148}
{"snippet": "unittest.mock.Mock(**kwargs, spec=None, return_value=DEFAULT)", "intent": "Create a new Mock object . With arguments `**kwargs`, `spec`, `return_value`.", "question_id": 11569}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1705}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "bytearray.partition(sep)", "intent": "Split the sequence at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9306}
{"snippet": "binary.encode(out)", "intent": "Write the XML-RPC base 64 encoding of this binary item to the `out` stream object .", "question_id": 12688}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338}
{"snippet": "asyncore.loop(timeout, use_poll, map, count)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 647}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes .", "question_id": 12242}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10974}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "logging.FileHandler(filename, mode='a')", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . With arguments `filename`.", "question_id": 5427}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "test_case.assertNotAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11428}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "locale.currency(val, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5395}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "test_case.assertFalse(expr)", "intent": "Test that `expr` is true ( or false ) .", "question_id": 11381}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "window.attron(attr)", "intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2013}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "gettext.bindtextdomain(domain)", "intent": "Bind the `domain` to the locale directory `localedir` .", "question_id": 4210}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "importlib.find_loader(name, path=None)", "intent": "Find the loader for a module , optionally within the specified `path` . If the module is in sys.modules , then sys.modules [ `name` ] .__loader__ is returned ( unless the loader would be None or is not set , in which case ValueError is raised ) .", "question_id": 4796}
{"snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5867}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "async_exit_stack.enter_async_context(cm)", "intent": "Similar to enter_context ( ) but expects an asynchronous context manager . With arguments `cm`.", "question_id": 1633}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, filters=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5711}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "mailbox.Maildir(dirname)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout .", "question_id": 5754}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}
{"snippet": "code.InteractiveInterpreter(locals=None)", "intent": "This class deals with parsing and interpreter state ( the user \u2019 s namespace ) ; it does not deal with input buffering or prompting or input file naming ( the filename is always passed in explicitly ) . The optional `locals` argument specifies the dictionary in which code will be executed ; it defaults to a newly created dictionary with key '__name__ ' set to '__console__ ' and key '__doc__ ' set to None .", "question_id": 1156}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}
{"snippet": "oss_audio_device.setparameters(format, nchannels, strict=False)", "intent": "Set the key audio sampling parameters\u2014sample `format` , number of channels , and sampling rate\u2014in one method call . format , `nchannels` , and `samplerate` should be as specified in the setfmt ( ) , channels ( ) , and speed ( ) methods . If `strict` is true , setparameters ( ) checks to see if each parameter was actually set to the requested value , and raises OSSAudioError if not .", "question_id": 7194}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247}
{"snippet": "window.attron(attr)", "intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2013}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "shutil.copyfile(src, dst, follow_symlinks=True)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst . If `follow_symlinks` is false and src is a symbolic link , a new symbolic link will be created instead of copying the file src points to .", "question_id": 8312}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856}
{"snippet": "config_parser.items(section, raw=False)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `raw`.", "question_id": 1557}
{"snippet": "bytearray.lstrip(chars)", "intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "question_id": 9345}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "argparse.FileType(bufsize=-1, encoding=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`, `encoding`.", "question_id": 93}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "importlib.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4798}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "@unittest.skip(reason)", "intent": "Unconditionally skip the decorated test . `reason` should describe why the test is being skipped .", "question_id": 11358}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "type(object)", "intent": "With one argument , return the type of an `object` .", "question_id": 4130}
{"snippet": "NNTP.xover(start, end, file=None)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select . With arguments `file`.", "question_id": 6500}
{"snippet": "codecs.lookup_error(name)", "intent": "Return the error handler previously registered under the `name` name .", "question_id": 1254}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "mailbox.Maildir(dirname)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout .", "question_id": 5754}
{"snippet": "asyncio.ensure_future(obj)", "intent": "Return : If `obj` is neither of the above a TypeError is raised .", "question_id": 355}
{"snippet": "shlex.shlex(instream=None, infile=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d . The second optional argument is a filename string , which sets the initial value of the `infile` attribute .", "question_id": 8278}
{"snippet": "email.encoders.encode_noop(msg)", "intent": "This does nothing ; it doesn \u2019 t even set the Content-Transfer-Encoding header . With arguments `msg`.", "question_id": 3072}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "IMAP4.create(mailbox)", "intent": "Create new `mailbox` named mailbox .", "question_id": 4696}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "element.remove(subelement)", "intent": "Removes `subelement` from the element .", "question_id": 12506}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "Codec.decode(input)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1264}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp . With arguments `errors`.", "question_id": 1298}
{"snippet": "window.insnstr(str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`, `attr`.", "question_id": 2077}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "ur_lopener.open(fullurl)", "intent": "Open `fullurl` using the appropriate protocol .", "question_id": 11892}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "FTP.login(user='anonymous', passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3919}
{"snippet": "ast.fix_missing_locations(node)", "intent": "When you compile a `node` tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them .", "question_id": 152}
{"snippet": "base64.b64decode(s, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 712}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615}
{"snippet": "asyncio.gather(*aws, return_exceptions=False)", "intent": "Run awaitable objects in the aws sequence concurrently . If `return_exceptions` is False ( default ) , the first raised exception is immediately propagated to the task that awaits on gather ( ) . With arguments `*aws`.", "question_id": 601}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "wsgiref.util.FileWrapper(filelike)", "intent": "A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object \u2019 s read ( ) method to obtain bytestrings to yield .", "question_id": 12217}
{"snippet": "test_case.subTest(**params, msg=None)", "intent": "Return a context manager which executes the enclosed code block as a subtest . `msg` and params are optional , arbitrary values which are displayed whenever a subtest fails , allowing you to identify them clearly . With arguments `**params`.", "question_id": 11373}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "glob.glob(pathname, recursive=False)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification . If `recursive` is true , the pattern \u201c ** \u201d will match any files and zero or more directories , subdirectories and symbolic links to directories .", "question_id": 4265}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "os.wait4(pid, options)", "intent": "Similar to waitpid ( ) , except a 3-element tuple , containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `pid`, `options`.", "question_id": 7084}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "chunk.Chunk(file, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1077}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}
{"snippet": "timeit.repeat(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10488}
{"snippet": "http.client.HTTPResponse(sock, debuglevel=0, method=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `debuglevel`, `method`.", "question_id": 4406}
{"snippet": "Cmd.postcmd(stop, line)", "intent": "Hook method executed just after a command dispatch is finished . `line` is the command line which was executed , and `stop` is a flag which indicates whether execution will be terminated after the call to postcmd ( ) ; this will be the return value of the onecmd ( ) method .", "question_id": 1142}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "doctest.run_docstring_examples(f, globs, verbose=False)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . If optional argument `verbose` is true , output is generated even if there are no failures .", "question_id": 2787}
{"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10101}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "wsgiref.validate.validator(application)", "intent": "Wrap `application` and return a new WSGI application object .", "question_id": 12235}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "socket.getaddrinfo(host, port, type=0, proto=0)", "intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None . The `family` , `type` and `proto` arguments can be optionally specified in order to narrow the list of addresses returned .", "question_id": 8643}
{"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True .", "question_id": 3723}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}
{"snippet": "message.__contains__(name)", "intent": "Return true if the message object has a field named `name` .", "question_id": 2965}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "sync_manager.Barrier(parties, action)", "intent": "Create a shared threading.Barrier object and return a proxy for it . With arguments `parties`, `action`.", "question_id": 6297}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "locale.format_string(format, val, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5386}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "r_lock.acquire(block=True)", "intent": "Acquire a lock , blocking or non-blocking . When invoked with the `block` argument set to True , block until the lock is in an unlocked state ( not owned by any process or thread ) unless the lock is already owned by the current process or thread .", "question_id": 6259}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642}
{"snippet": "element.findtext(match)", "intent": "Finds text for the first subelement matching `match` .", "question_id": 12495}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831}
{"snippet": "asyncio.wrap_future(future)", "intent": "Wrap a concurrent.futures.Future object in a asyncio.Future object . With arguments `future`.", "question_id": 357}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "warnings.simplefilter(action, category=Warning, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `append`.", "question_id": 12038}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "pkgutil.walk_packages(path=None, prefix='')", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output .", "question_id": 7453}
{"snippet": "code.interact(banner=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1167}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698}
{"snippet": "ctypes.memset(dst, c, count)", "intent": "Same as the standard C memset library function : fills the memory block at address `dst` with `count` bytes of value c. dst must be an integer specifying an address , or a ctypes instance . With arguments `c`.", "question_id": 1827}
{"snippet": "tempfile.TemporaryFile(mode='w+b', buffering=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10041}
{"snippet": "bytearray()", "intent": "There is no dedicated literal syntax for bytearray objects , instead they are always created by calling the constructor :", "question_id": 9266}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "concurrent.futures.wait(fs, timeout=None)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `timeout` can be used to control the maximum number of seconds to wait before returning .", "question_id": 1481}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "sys.call_tracing(func, args)", "intent": "Call `func` ( *args ) , while tracing is enabled . With arguments `args`.", "question_id": 9772}
{"snippet": "socket.sendfile(file, offset=0, count=None)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 8735}
{"snippet": "__import__(name, locals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4144}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "FTP.retrlines(cmd)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "question_id": 3930}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "quit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1609}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499}
{"snippet": "Pattern.fullmatch(string, pos)", "intent": "If the whole `string` matches this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "question_id": 7977}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "nntplib.NNTP(host, timeout, port=119, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6406}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "xml.sax.SAXParseException(msg, exception, locator)", "intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "question_id": 12599}
{"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "cmd.Cmd(stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1130}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}
{"snippet": "xmlrpc.server.DocXMLRPCServer(addr)", "intent": "Create a new server instance . With arguments `addr`.", "question_id": 12749}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "compileall.compile_path(skip_curdir=True, maxlevels=0)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . Note that unlike the other compile functions , `maxlevels` defaults to 0 .", "question_id": 1437}
{"snippet": "os.getxattr(path, attribute)", "intent": "Return the value of the extended filesystem `attribute` attribute for `path` .", "question_id": 6993}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "FileHandler.file_open(req)", "intent": "Open the file locally , if there is no host name , or the host name is 'localhost ' . With arguments `req`.", "question_id": 11873}
{"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "writer.new_styles(styles)", "intent": "Set additional `styles` .", "question_id": 3846}
{"snippet": "xml.etree.ElementTree.XML(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12470}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "RuntimeError", "intent": "Raised when an error is detected that doesn\u2019t fall in any of the other categories.", "question_id": 3662}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "curses.panel.new_panel(win)", "intent": "Returns a panel object , associating it with the given window `win` .", "question_id": 2142}
{"snippet": "dis.Bytecode(x, current_offset=None)", "intent": "Analyse the bytecode corresponding to a function , generator , asynchronous generator , coroutine , method , string of source code , or a code object ( as returned by compile ( ) ) . If `current_offset` is not None , it refers to an instruction offset in the disassembled code . With arguments `x`.", "question_id": 2697}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "text_calendar.prmonth(theyear, themonth, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 934}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "str.count(sub, start, end)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9182}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, enable_SMTPUTF8=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `enable_SMTPUTF8` determines whether the SMTPUTF8 extension ( as defined in RFC 6531 ) should be enabled .", "question_id": 8430}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8350}
{"snippet": "ssl.wrap_socket(sock, ciphers=None)", "intent": "Takes an instance `sock` of socket.socket , and returns an instance of ssl.SSLSocket , a subtype of socket.socket , which wraps the underlying socket in an SSL context . If parameters `keyfile` , `certfile` , `ca_certs` or `ciphers` are set , then the values are passed to SSLContext.load_cert_chain ( ) , SSLContext.load_verify_locations ( ) , and SSLContext.set_ciphers ( ) .", "question_id": 8910}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "Path.open(mode='r', buffering=-1)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `buffering`.", "question_id": 7298}
{"snippet": "joinable_queue.send_bytes(buffer)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` .", "question_id": 6238}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "gettext.find(domain, localedir=None, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4228}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}
{"snippet": "platform.libc_ver(executable=sys.executable, lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7542}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213}
{"snippet": "resource.setrlimit(resource, limits)", "intent": "Sets new `limits` of consumption of `resource` .", "question_id": 8072}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "base64.a85encode(b, foldspaces=False, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 731}
{"snippet": "msvcrt.open_osfhandle(handle, flags)", "intent": "Create a C runtime file descriptor from the file `handle` handle . The `flags` parameter should be a bitwise OR of os.O_APPEND , os.O_RDONLY , and os.O_TEXT .", "question_id": 6153}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "loader.module_repr(module)", "intent": "A legacy method which when implemented calculates and returns the given `module` \u2019 s repr , as a string .", "question_id": 4817}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "urllib.request.Request(url, data=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed .", "question_id": 11769}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667}
{"snippet": "CGIXMLRPCRequestHandler.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request ; the return value is returned to the client as the result .", "question_id": 12744}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720}
{"snippet": "IMAP4.append(mailbox, flags, date_time, message)", "intent": "Append `message` to named `mailbox` . With arguments `flags`, `date_time`.", "question_id": 4691}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171}
{"snippet": "turtle.bk(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10906}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "turtle.tracer(n=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11059}
{"snippet": "json.load(fp, **kw, cls=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . With arguments `**kw`.", "question_id": 5291}
{"snippet": "Node.cloneNode(deep)", "intent": "Clone this node . Setting `deep` means to clone all child nodes as well .", "question_id": 12335}
{"snippet": "timeit.repeat(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10487}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "platform.architecture(executable=sys.executable)", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information .", "question_id": 7459}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "binary.encode(out)", "intent": "Write the XML-RPC base 64 encoding of this binary item to the `out` stream object .", "question_id": 12688}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "window.addch(ch)", "intent": "Paint character `ch` at ( y , x ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2001}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "Call the `function` ( a function or method object , not a string ) with the given arguments . With arguments `*args`, `**kwds`.", "question_id": 7335}
{"snippet": "unpickler.find_class(module, name)", "intent": "Import `module` if necessary and return the object called `name` from it , where the module and name arguments are str objects .", "question_id": 7408}
{"snippet": "pool.apply(func, args, kwds)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6332}
{"snippet": "test_case.subTest(**params, msg=None)", "intent": "Return a context manager which executes the enclosed code block as a subtest . `msg` and params are optional , arbitrary values which are displayed whenever a subtest fails , allowing you to identify them clearly . With arguments `**params`.", "question_id": 11373}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "shlex.split(s, posix=True)", "intent": "Split the string `s` using shell-like syntax . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8270}
{"snippet": "multiprocessing.Process(args=())", "intent": "Process objects represent activity that is run in a separate process . `args` is the argument tuple for the target invocation .", "question_id": 6169}
{"snippet": "bz2.BZ2Decompressor", "intent": "Create a new decompressor object.", "question_id": 900}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "window.border(ls, rs, ts)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`.", "question_id": 2024}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "shelve.BsdDbShelf(dict, writeback=False)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "question_id": 8254}
{"snippet": "os.symlink(src, dst)", "intent": "Create a symbolic link pointing to `src` named `dst` .", "question_id": 6951}
{"snippet": "socket_handler.send(packet)", "intent": "Send a pickled byte-string `packet` to the socket .", "question_id": 5488}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "logging.FileHandler(filename, mode='a', encoding=None)", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . If `encoding` is not None , it is used to open the file with that encoding . With arguments `filename`.", "question_id": 5430}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "test.support.requires(resource)", "intent": "Raise ResourceDenied if `resource` is not available .", "question_id": 10147}
{"snippet": "tokenize.tokenize(readline)", "intent": "The tokenize ( ) generator requires one argument , `readline` , which must be a callable object which provides the same interface as the io.IOBase.readline ( ) method of file objects .", "question_id": 10701}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "zipfile.ZipFile(file, compression=ZIP_STORED)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised .", "question_id": 12794}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_side=False, server_hostname=None, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9040}
{"snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8533}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4315}
{"snippet": "calendar.calendar(year, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `m`.", "question_id": 1015}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11109}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "platform.mac_ver('', ''), release='', machine='')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7514}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425}
{"snippet": "email.utils.formatdate(localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3474}
{"snippet": "io.TextIOWrapper(buffer)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` .", "question_id": 5146}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "io.open(file, buffering=-1)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `buffering`.", "question_id": 5053}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "fcntl.lockf(fd, cmd, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3749}
{"snippet": "email.headerregistry.Address(username='', domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3194}
{"snippet": "urllib.parse.SplitResultBytes(scheme, netloc, path, query, fragment)", "intent": "Concrete class for urlsplit ( ) results containing bytes data . With arguments `scheme`, `netloc`, `path`, `query`, `fragment`.", "question_id": 11704}
{"snippet": "csv.DictReader(f, *args, **kwds, restval=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `restval`.", "question_id": 1695}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h')", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5471}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}
{"snippet": "mailbox.Maildir(dirname)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout .", "question_id": 5754}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5709}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080}
{"snippet": "inspect.Signature(parameters=None)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection .", "question_id": 4980}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . With arguments `prog`.", "question_id": 81}
{"snippet": "sys.excepthook(type, value, traceback)", "intent": "This function prints out a given `traceback` and exception to sys.stderr . With arguments `type`, `value`.", "question_id": 9781}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "fileinput.input(files=None, inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "question_id": 3789}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, enable_SMTPUTF8=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `enable_SMTPUTF8` determines whether the SMTPUTF8 extension ( as defined in RFC 6531 ) should be enabled .", "question_id": 8430}
{"snippet": "style.theme_create(themename, parent=None, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10689}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720}
{"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "FileCookieJar.load(ignore_discard=False, ignore_expires=False)", "intent": "Load cookies from a file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4512}
{"snippet": "stream_writer.write(object)", "intent": "Writes the `object` \u2019 s contents encoded to the stream .", "question_id": 1281}
{"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "tempfile.NamedTemporaryFile(mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `mode`.", "question_id": 10044}
{"snippet": "test.support.import_fresh_module(name, deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10245}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "parser.sequence2st(sequence)", "intent": "This function accepts a parse tree represented as a `sequence` and builds an internal representation if possible .", "question_id": 7212}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "gzip.GzipFile(filename=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value .", "question_id": 4283}
{"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}
{"snippet": "doctest.DocTestRunner(verbose=None)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `verbose` controls the DocTestRunner \u2019 s verbosity .", "question_id": 2863}
{"snippet": "turtle.setpos(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10915}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952}
{"snippet": "wsgiref.validate.validator(application)", "intent": "Wrap `application` and return a new WSGI application object .", "question_id": 12235}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "directory.start_component(feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6095}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "stream_handler.setStream(stream)", "intent": "Sets the instance \u2019 s `stream` to the specified value , if it is different .", "question_id": 5425}
{"snippet": "message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If `replace` is False ( the default ) the header is moved to the end of the list of headers . With arguments `param`.", "question_id": 3004}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css', encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 968}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "base64.a85decode(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 743}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "patch.dict(in_dict, **kwargs, clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11630}
{"snippet": "POP3.rset()", "intent": "Remove any deletion marks for the mailbox .", "question_id": 7613}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "FTP.dir(argument)", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3957}
{"snippet": "bytes()", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added :", "question_id": 9260}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "urllib.request.ProxyHandler(proxies=None)", "intent": "Cause requests to go through a proxy . If `proxies` is given , it must be a dictionary mapping protocol names to URLs of proxies .", "question_id": 11785}
{"snippet": "Record.GetInteger(field)", "intent": "Return the value of `field` as an integer where possible .", "question_id": 6082}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`.", "question_id": 535}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "connection.execute(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8812}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "dataclasses.field(default=MISSING, repr=True)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . With arguments `repr`.", "question_id": 2176}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost')", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5495}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "tokenize.tokenize(readline)", "intent": "The tokenize ( ) generator requires one argument , `readline` , which must be a callable object which provides the same interface as the io.IOBase.readline ( ) method of file objects .", "question_id": 10701}
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984}
{"snippet": "datetime.replace(day=self.day)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2287}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "ossaudiodev.open(device, mode)", "intent": "Open an audio `device` and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7175}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "pow(x, y)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4074}
{"snippet": "urllib.request.build_opener(handler)", "intent": "Return an OpenerDirector instance , which chains the handlers in the order given . With arguments `handler`.", "question_id": 11763}
{"snippet": "os.setxattr(path, attribute, value, flags=0, follow_symlinks=True)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` . `flags` may be XATTR_REPLACE or XATTR_CREATE . With arguments `follow_symlinks`.", "question_id": 7004}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "concurrent.futures.wait(fs, timeout=None)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `timeout` can be used to control the maximum number of seconds to wait before returning .", "question_id": 1481}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "r_lock.acquire(blocking=True, timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10384}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, target=None)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If no `target` is specified , the target will need to be set using setTarget ( ) before this handler does anything useful .", "question_id": 5533}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "os.register_at_fork(before=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order .", "question_id": 7046}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "style.theme_create(themename, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10688}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "unittest.main(exit=True)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . By default main calls sys.exit ( ) with an `exit` code indicating success or failure of the tests run .", "question_id": 11551}
{"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "subprocess.call(args, stdin=None, stdout=None)", "intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `stdin`.", "question_id": 9666}
{"snippet": "pdb.Pdb(skip=None)", "intent": "Pdb is the debugger class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7345}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "xml.etree.ElementTree.fromstring(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12438}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdout`, `stderr`.", "question_id": 327}
{"snippet": "ctypes._SimpleCData", "intent": "This non-public class is the base class of all fundamental ctypes data types.", "question_id": 1853}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "turtle.numinput(title, prompt, maxval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11087}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "unpickler.find_class(module, name)", "intent": "Import `module` if necessary and return the object called `name` from it , where the module and name arguments are str objects .", "question_id": 7408}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "print(*objects, end='\\n', flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4084}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "turtle.numinput(title, prompt, maxval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11087}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "marshal.loads(bytes)", "intent": "Convert the bytes-like object to a value . Extra `bytes` in the input are ignored .", "question_id": 5883}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "os.WIFCONTINUED(status)", "intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "question_id": 7089}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "mailcap.findmatch(caps, key='view', filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5873}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "calendar.itermonthdays2(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 914}
{"snippet": "dispatcher.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 671}
{"snippet": "scheduler.enterabs(time, priority, action, argument=(), kwargs={})", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "question_id": 8121}
{"snippet": "shutil.register_unpack_format(name, extensions, function, extra_args, description)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable . `description` can be provided to describe the format , and will be returned by the get_unpack_formats ( ) function .", "question_id": 8366}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "SubprocessProtocol.pipe_connection_lost(fd, exc)", "intent": "Called when one of the pipes communicating with the child process is closed . `fd` is the integer file descriptor that was closed . With arguments `exc`.", "question_id": 443}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "executor.submit(fn, *args, **kwargs)", "intent": "Schedules the callable , `fn` , to be executed as fn ( `*args` `**kwargs` ) and returns a Future object representing the execution of the callable .", "question_id": 1440}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "ArgumentParser.parse_args(namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 71}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "Request.has_header(header)", "intent": "Return whether the instance has the named `header` ( checks both regular and unredirected ) .", "question_id": 11827}
{"snippet": "multiprocessing.Process(args=())", "intent": "Process objects represent activity that is run in a separate process . `args` is the argument tuple for the target invocation .", "question_id": 6169}
{"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}
{"snippet": "test.support.start_threads(threads)", "intent": "Context manager to start `threads` .", "question_id": 10198}
{"snippet": "os.symlink(src, dst)", "intent": "Create a symbolic link pointing to `src` named `dst` .", "question_id": 6951}
{"snippet": "sync_manager.list(sequence)", "intent": "Create a shared list object and return a proxy for it . With arguments `sequence`.", "question_id": 6317}
{"snippet": "winreg.OpenKeyEx(key, sub_key, access=KEY_READ)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12144}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`.", "question_id": 535}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "signature.replace(parameters)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4989}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "Template.append(cmd, kind)", "intent": "Append a new action at the end . The `cmd` variable must be a valid bourne shell command . The `kind` variable consists of two letters .", "question_id": 7431}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4431}
{"snippet": "bytearray.endswith(suffix)", "intent": "Return True if the binary data ends with the specified `suffix` , otherwise return False .", "question_id": 9288}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "turtle.towards(x, y=None)", "intent": "Return the angle between the line from turtle position to position specified by ( `x` , `y` ) , the vector or the other turtle .", "question_id": 10939}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8352}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "gettext.translation(domain)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "question_id": 4229}
{"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012}
{"snippet": "os.chmod(path, mode)", "intent": "Change the `mode` of `path` to the numeric mode .", "question_id": 6835}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "urllib.request.ProxyHandler(proxies=None)", "intent": "Cause requests to go through a proxy . If `proxies` is given , it must be a dictionary mapping protocol names to URLs of proxies .", "question_id": 11785}
{"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213}
{"snippet": "calendar.prcal(year, l=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "question_id": 1009}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "mailbox.Babyl(path, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in Babyl format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5797}
{"snippet": "inspect.Parameter(name, kind)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`.", "question_id": 4993}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "connection.executemany(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executemany ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8813}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "fileinput.FileInput(mode='r')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With `mode` you can specify which file mode will be passed to open ( ) .", "question_id": 3805}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`, `add`.", "question_id": 11074}
{"snippet": "bz2.open(filename, encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 879}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "ArgumentParser.exit(status=0, message=None)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 113}
{"snippet": "ArgumentParser.get_default(dest)", "intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "question_id": 102}
{"snippet": "turtle.onrelease(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`, `add`.", "question_id": 11026}
{"snippet": "concurrent.futures.as_completed(fs)", "intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) .", "question_id": 1484}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "test.support.check__all__(test_case, module, extra=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `extra` argument can be a set of names that wouldn \u2019 t otherwise be automatically detected as \u201c public \u201d , like objects without a proper __module__ attribute . With arguments `test_case`.", "question_id": 10279}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "os.pathconf(path, name)", "intent": "Return system configuration information relevant to a named file . `name` specifies the configuration value to retrieve ; it may be a string which is the name of a defined system value ; these names are specified in a number of standards ( POSIX.1 , Unix 95 , Unix 98 , and others ) . With arguments `path`.", "question_id": 6885}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`, `add`.", "question_id": 11074}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "compileall.compile_file(fullname, rx=None)", "intent": "Compile the file with path `fullname` . If `rx` is given , its search method is passed the full path name to the file being compiled , and if it returns a true value , the file is not compiled and True is returned .", "question_id": 1422}
{"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}
{"snippet": "calendar.LocaleHTMLCalendar(locale=None)", "intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 983}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "header.append(s, errors='strict')", "intent": "Append the string `s` to the MIME header . Optional `errors` is passed as the errors argument to the decode call if s is a byte string .", "question_id": 3128}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164}
{"snippet": "ftplib.FTP(passwd='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3881}
{"snippet": "shutil.register_unpack_format(name, extensions, function, extra_args)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable .", "question_id": 8367}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8533}
{"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "Path.mkdir(parents=False)", "intent": "Create a new directory at this given path . If `parents` is true , any missing parents of this path are created as needed ; they are created with the default permissions without taking mode into account ( mimicking the POSIX mkdir -p command ) .", "question_id": 7286}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "_thread.start_new_thread(function, args, kwargs)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "question_id": 12943}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "concurrent.futures.as_completed(fs)", "intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) .", "question_id": 1484}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "prototype(vtbl_index, name, paramflags, iid)", "intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method . `iid` is an optional pointer to the interface identifier which is used in extended error reporting . With arguments `paramflags`.", "question_id": 1805}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513}
{"snippet": "ContentHandler.startElement(name, attrs)", "intent": "Signals the start of an element in non-namespace mode . The `name` parameter contains the raw XML 1.0 name of the element type as a string and the `attrs` parameter holds an object of the Attributes interface ( see The Attributes Interface ) containing the attributes of the element .", "question_id": 12575}
{"snippet": "logging.handlers.QueueListener(queue, *handlers, respect_handler_level=False)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . If `respect_handler_level` is True , a handler \u2019 s level is respected ( compared with the level for the message ) when deciding whether to pass messages to that handler ; otherwise , the behaviour is as in previous Python versions - to always pass each message to each handler . With arguments `*handlers`.", "question_id": 5558}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "socket.CMSG_SPACE(length)", "intent": "Return the buffer size needed for recvmsg ( ) to receive an ancillary data item with associated data of the given `length` , along with any trailing padding .", "question_id": 8666}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203}
{"snippet": "min(iterable, key, default)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4054}
{"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "timeit.timeit(stmt='pass', number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10484}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "os.fwalk(top='.', onerror=None)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`, `onerror`.", "question_id": 6990}
{"snippet": "msvcrt.locking(fd, mode, nbytes)", "intent": "Lock part of a file based on file descriptor `fd` from the C runtime . `mode` must be one of the LK_* constants listed below . The locked region of the file extends from the current file position for `nbytes` bytes , and may continue beyond the end of the file .", "question_id": 6146}
{"snippet": "gettext.translation(domain)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "question_id": 4229}
{"snippet": "message.set_type(type, header='Content-Type', requote=True)", "intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "question_id": 3016}
{"snippet": "asyncio.Semaphore(value=1, loop=None)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) . With arguments `loop`.", "question_id": 584}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "io.FileIO(name, closefd=True)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : With arguments `closefd`.", "question_id": 5101}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360}
{"snippet": "shutil.copytree(src, dst, symlinks=False, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `symlinks` is true , symbolic links in the source tree are represented as symbolic links in the new tree and the metadata of the original links will be copied as far as the platform allows ; if false or omitted , the contents and metadata of the linked files are copied to the new tree . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8329}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "chunk.Chunk(file, inclheader=False)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .", "question_id": 1078}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "BaseHandler.unknown_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs with no specific registered handler to open it . With arguments `req`.", "question_id": 11845}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491}
{"snippet": "xml.sax.SAXParseException(msg, exception, locator)", "intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "question_id": 12599}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "tarfile.TarFile(encoding=ENCODING)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . The `encoding` and errors arguments define the character encoding to be used for reading or writing the archive and how conversion errors are going to be handled .", "question_id": 9921}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "null_handler.emit(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5437}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "subprocess.Popen(args, bufsize=-1)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `bufsize` will be supplied as the corresponding argument to the open ( ) function when creating the stdin/stdout/stderr pipe file objects :", "question_id": 9600}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949}
{"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, init=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2186}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . With arguments `param`.", "question_id": 2999}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "time.replace(tzinfo=self.tzinfo)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "question_id": 2339}
{"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "incremental_decoder.decode(object, final)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object . If this is the last call to decode ( ) `final` must be true ( the default is false ) .", "question_id": 1274}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively . If the `buffer_size` is omitted it defaults to DEFAULT_BUFFER_SIZE .", "question_id": 5131}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12225}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10976}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "calendar.isleap(year)", "intent": "Returns True if `year` is a leap year , otherwise False .", "question_id": 987}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "DeprecationWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "question_id": 3703}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}
{"snippet": "random.choices(population, weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7900}
{"snippet": "shlex.shlex(instream=None, infile=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d . The second optional argument is a filename string , which sets the initial value of the `infile` attribute .", "question_id": 8278}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "zlib.compressobj(level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12913}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 931}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "ArgumentParser.get_default(dest)", "intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "question_id": 102}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "doc_test_finder.find(obj, name, module, globs, extraglobs)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object . The globals for each DocTest is formed by combining `globs` and `extraglobs` ( bindings in extraglobs override bindings in globs ) .", "question_id": 2850}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "os.fwalk(top='.', topdown=True)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`, `topdown`.", "question_id": 6989}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`.", "question_id": 2020}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "cgitb.handler(info=None)", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) . The optional `info` argument should be a 3-tuple containing an exception type , exception value , and traceback object , exactly like the tuple returned by sys.exc_info ( ) .", "question_id": 1074}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "xml.etree.ElementTree.register_namespace(prefix, uri)", "intent": "Registers a namespace `prefix` . `uri` is a namespace uri .", "question_id": 12450}
{"snippet": "pickle.load(file, fix_imports=True, errors=\"strict\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7376}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "Widget.tk.createfilehandler(file, mask, func)", "intent": "Registers the `file` handler callback function `func` . The `mask` argument is an ORed combination of any of the three constants below .", "question_id": 10537}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483}
{"snippet": "dataclasses.field(compare=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "question_id": 2173}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10971}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "loop.remove_signal_handler(sig)", "intent": "Remove the handler for the `sig` signal .", "question_id": 304}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "py_compile.compile(file, doraise=False)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . If `doraise` is true , a PyCompileError is raised when an error is encountered while compiling file .", "question_id": 7824}
{"snippet": "unicodedata.digit(chr)", "intent": "Returns the digit value assigned to the character `chr` as integer .", "question_id": 11346}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "turtle.ondrag(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`, `add`.", "question_id": 11030}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}
{"snippet": "traceback.print_last(chain=True)", "intent": "This is a shorthand for print_exception ( sys.last_type , sys.last_value , sys.last_traceback , `limit` , `file` , `chain` ) .", "question_id": 10756}
{"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338}
{"snippet": "calendar.prcal(year, l=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "question_id": 1009}
{"snippet": "tempfile.mkstemp(suffix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10078}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12226}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "curses.setupterm(fd=-1)", "intent": "Initialize the terminal . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "question_id": 1981}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "oss_audio_device.setparameters(format, nchannels, samplerate, strict=False)", "intent": "Set the key audio sampling parameters\u2014sample `format` , number of channels , and sampling rate\u2014in one method call . format , `nchannels` , and `samplerate` should be as specified in the setfmt ( ) , channels ( ) , and speed ( ) methods . If `strict` is true , setparameters ( ) checks to see if each parameter was actually set to the requested value , and raises OSSAudioError if not .", "question_id": 7192}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, domain: int=None)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `domain: int`.", "question_id": 10859}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "datetime.datetime(year, month, day, hour=0, microsecond=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `microsecond`.", "question_id": 2256}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}
{"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "IMAP4.thread(threading_algorithm, charset, search_criterion)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4747}
{"snippet": "ur_lopener.retrieve(url, data=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . It will be called once at the start and after each chunk of `data` is read from the network .", "question_id": 11899}
{"snippet": "ContentHandler.startPrefixMapping(prefix, uri)", "intent": "Begin the scope of a prefix-URI Namespace mapping . With arguments `prefix`, `uri`.", "question_id": 12573}
{"snippet": "stream_writer.write(object)", "intent": "Writes the `object` \u2019 s contents encoded to the stream .", "question_id": 1281}
{"snippet": "cgitb.handler(info=None)", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) . The optional `info` argument should be a 3-tuple containing an exception type , exception value , and traceback object , exactly like the tuple returned by sys.exc_info ( ) .", "question_id": 1074}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "collections.namedtuple(typename, field_names, rename=False, module=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names . If `module` is defined , the __module__ attribute of the named tuple is set to that value .", "question_id": 1381}
{"snippet": "re.split(pattern, string, maxsplit=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list .", "question_id": 7944}
{"snippet": "print(*objects, end='\\n', flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4084}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202}
{"snippet": "json.loads(s, **kw, encoding=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . The other arguments have the same meaning as in load ( ) , except `encoding` which is ignored and deprecated . With arguments `**kw`.", "question_id": 5301}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5709}
{"snippet": "ssl.match_hostname(cert, hostname)", "intent": "Verify that `cert` ( in decoded format as returned by SSLSocket.getpeercert ( ) ) matches the given `hostname` .", "question_id": 8890}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}
{"snippet": "turtle.towards(x, y=None)", "intent": "Return the angle between the line from turtle position to position specified by ( `x` , `y` ) , the vector or the other turtle .", "question_id": 10939}
{"snippet": "urllib.parse.quote_from_bytes(bytes, safe='/')", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding . With arguments `safe`.", "question_id": 11722}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "platform.win32_ver(release='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7496}
{"snippet": "shutil.chown(path, user=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8342}
{"snippet": "crypt.crypt(word, salt=None)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "question_id": 1675}
{"snippet": "shutil.copytree(src, dst, ignore=None)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "question_id": 8325}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "formatter.NullFormatter(writer=None)", "intent": "A formatter which does nothing . If `writer` is omitted , a NullWriter instance is created .", "question_id": 3839}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "asyncore.loop(timeout, use_poll, map, count)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 647}
{"snippet": "base64.a85decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 741}
{"snippet": "cursor.execute(sql)", "intent": "Executes an SQL statement . With arguments `sql`.", "question_id": 8841}
{"snippet": "buffered_io_base.read(size=-1)", "intent": "Read and return up to `size` bytes .", "question_id": 5093}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "urllib.parse.quote(string, safe='/', encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11709}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "str(object=b'', errors='strict')", "intent": "Return a str version of `object` . With arguments `errors`.", "question_id": 4120}
{"snippet": "quopri.encodestring(s, quotetabs=False, header=False)", "intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . By default , it sends a False value to `quotetabs` parameter of the encode ( ) function . With arguments `s`, `header`.", "question_id": 7882}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "OptionParser.set_defaults(dest=value)", "intent": "Set default values for several option destinations at once . With arguments `dest`.", "question_id": 6648}
{"snippet": "xml.etree.ElementInclude.include(elem)", "intent": "This function expands XInclude directives . `elem` is the root element .", "question_id": 12475}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h')", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5471}
{"snippet": "resource.prlimit(pid, resource, limits)", "intent": "Combines setrlimit ( ) and getrlimit ( ) in one function and supports to get and set the resources `limits` of an arbitrary process . If `pid` is 0 , then the call applies to the current process . `resource` and limits have the same meaning as in setrlimit ( ) , except that limits is optional .", "question_id": 8073}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "fraction.__ceil__()", "intent": "Returns the least int > = self .", "question_id": 3874}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "dict(mapping, **kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . If a positional argument is given and it is a `mapping` object , a dictionary is created with the same key-value pairs as the mapping object . With arguments `**kwarg`.", "question_id": 9468}
{"snippet": "tkinter.Tk(screenName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `screenName`, `className`.", "question_id": 10523}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861}
{"snippet": "math.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "question_id": 5897}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "BaseProtocol.connection_made(transport)", "intent": "Called when a connection is made . The `transport` argument is the transport representing the connection .", "question_id": 431}
{"snippet": "header.encode(\\t', linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3133}
{"snippet": "Path.rename(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7308}
{"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "joinable_queue.poll(timeout)", "intent": "Return whether there is any data available to be read . If `timeout` is not specified then it will return immediately .", "question_id": 6234}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "message.set_type(type)", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3013}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "SimpleQueue.get(block=True)", "intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 7869}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object .", "question_id": 5992}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "subprocess.check_output(args, errors=None)", "intent": "Run command with arguments and return its output . This behaviour may be overridden by setting text , encoding , `errors` , or `universal_newlines` to True as described in Frequently Used Arguments and run ( ) . With arguments `args`.", "question_id": 9685}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "locale.format(format, val)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`.", "question_id": 5388}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "cmd.Cmd(completekey='tab', stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1131}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "null_handler.handle(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5438}
{"snippet": "types.prepare_class(name, bases=())", "intent": "Calculates the appropriate metaclass and creates the class namespace . The arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) and the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11179}
{"snippet": "subprocess.call(args, stdin=None, shell=False)", "intent": "Run the command described by `args` . With arguments `stdin`, `shell`.", "question_id": 9668}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}
{"snippet": "PurePath.with_suffix(suffix)", "intent": "Return a new path with the `suffix` changed .", "question_id": 7261}
{"snippet": "pty.spawn(argv, master_read)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . The functions `master_read` and `stdin_read` are passed a file descriptor which they should read from , and they should always return a byte string . With arguments `argv`.", "question_id": 7701}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "pool.apply(func, args, kwds)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6332}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . With arguments `prog`, `parser_class`.", "question_id": 79}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296}
{"snippet": "os.WIFEXITED(status)", "intent": "Return True if the process exited using the exit ( 2 ) system call , otherwise return False . With arguments `status`.", "question_id": 7092}
{"snippet": "types.DynamicClassAttribute(doc=None)", "intent": "Route attribute access on a class to __getattr__ . With arguments `doc`.", "question_id": 11222}
{"snippet": "os.mknod(path, mode=0o600, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` . `mode` specifies both the permissions to use and the type of node to be created , being combined ( bitwise OR ) with one of stat.S_IFREG , stat.S_IFCHR , stat.S_IFBLK , and stat.S_IFIFO ( those constants are available in stat ) .", "question_id": 6878}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903}
{"snippet": "property(fdel=None)", "intent": "Return a property attribute . `fdel` is a function for deleting an attribute value .", "question_id": 4088}
{"snippet": "type(object)", "intent": "With one argument , return the type of an `object` .", "question_id": 4130}
{"snippet": "copyright", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1612}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "task.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Task is done .", "question_id": 631}
{"snippet": "io_base.readline(size=-1)", "intent": "Read and return one line from the stream . If `size` is specified , at most size bytes will be read .", "question_id": 5071}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622}
{"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}
{"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout .", "question_id": 12659}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}
{"snippet": "email.encoders.encode_base64(msg)", "intent": "Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64 . With arguments `msg`.", "question_id": 3070}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087}
{"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}
{"snippet": "patch.object(target, attribute, **kwargs, new=DEFAULT, create=False)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11626}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "pdb.Pdb(stdout=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7344}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}
{"snippet": "Element.setAttributeNode(newAttr)", "intent": "Add a new attribute node to the element , replacing an existing attribute if necessary if the name attribute matches . If `newAttr` is already in use , InuseAttributeErr will be raised .", "question_id": 12367}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "mailcap.findmatch(caps, key='view', filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5873}
{"snippet": "asyncio.sleep(delay)", "intent": "Block for `delay` seconds .", "question_id": 595}
{"snippet": "FTP.login(user='anonymous', passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3919}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "pkgutil.walk_packages(prefix='')", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output .", "question_id": 7451}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "NotImplementedError", "intent": "This exception is derived from RuntimeError.", "question_id": 3647}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "timeit.repeat(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10494}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : With arguments `prog`, `parser_class`, `option_string`.", "question_id": 77}
{"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra)", "intent": "Element class . `tag` is the element name . With arguments `**extra`.", "question_id": 12477}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "incremental_decoder.setstate(state)", "intent": "Set the `state` of the decoder to state .", "question_id": 1278}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "timeit.repeat(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10489}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "scheduler.enterabs(time, priority, action, argument=(), kwargs={})", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "question_id": 8121}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost', socktype=socket.SOCK_DGRAM)", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . The type of socket opened depends on the `socktype` argument , which defaults to socket.SOCK_DGRAM and thus opens a UDP socket . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5499}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10101}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`, `after_in_child`.", "question_id": 7052}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "turtle.ondrag(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`, `add`.", "question_id": 11030}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "test.support.swap_attr(obj, attr, new_val)", "intent": "Context manager to swap out an attribute with a new object . If `attr` doesn \u2019 t exist on `obj` , it will be created and then deleted at the end of the block . With arguments `new_val`.", "question_id": 10194}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, decode_data=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `decode_data` and enable_SMTPUTF8 can not be set to True at the same time .", "question_id": 8431}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "random.randrange(start, stop, step)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7891}
{"snippet": "inspect.getinnerframes(traceback, context=1)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "question_id": 5028}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "os.utime(path, times=None, dir_fd=None)", "intent": "Set the access and modified `times` of the file specified by `path` . With arguments `dir_fd`.", "question_id": 6971}
{"snippet": "urllib.parse.quote_from_bytes(bytes, safe='/')", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding . With arguments `safe`.", "question_id": 11722}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "timeit.Timer(setup='pass')", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10499}
{"snippet": "traceback.format_stack(f=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10788}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "datetime.replace(tzinfo=self.tzinfo)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "question_id": 2292}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "loop.getaddrinfo(host, port, family=0, type=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `type`.", "question_id": 294}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5709}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "FieldStorage.getfirst(name, default=None)", "intent": "This method always returns only one value associated with form field `name` . 1 If no such form field or value exists then the method returns the value specified by the optional parameter `default` .", "question_id": 1027}
{"snippet": "ctypes.FormatError(code)", "intent": "Windows only : Returns a textual description of the error `code` code .", "question_id": 1821}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "proxy[key]", "intent": "Return the item of the underlying mapping with key key.", "question_id": 11208}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "ctypes.BigEndianStructure(*args, **kw)", "intent": "Abstract base class for structures in big endian byte order . With arguments `*args`, `**kw`.", "question_id": 1887}
{"snippet": "mmap.move(dest, src, count)", "intent": "Copy the `count` bytes starting at offset `src` to the destination index `dest` .", "question_id": 6008}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}
{"snippet": "stream_writer.write(object)", "intent": "Writes the `object` \u2019 s contents encoded to the stream .", "question_id": 1281}
{"snippet": "Pattern.subn(repl, string, count=0)", "intent": "Identical to the subn ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7990}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . If your SMTP server requires authentication , you can specify a ( username , password ) tuple for the `credentials` argument . With arguments `fromaddr`.", "question_id": 5516}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "turtle.setpos(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10915}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935}
{"snippet": "loop.create_unix_server(protocol_factory, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `backlog`.", "question_id": 245}
{"snippet": "lzma.is_check_supported(check)", "intent": "Returns true if the given integrity `check` is supported on this system .", "question_id": 5722}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "sys.setcheckinterval(interval)", "intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "question_id": 9834}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "test.support.get_attribute(obj, name)", "intent": "Get an attribute , raising unittest.SkipTest if AttributeError is raised . With arguments `obj`, `name`.", "question_id": 10257}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "tempfile.mkstemp(suffix=None, dir=None)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `dir` is not None , the file will be created in that directory ; otherwise , a default directory is used .", "question_id": 10077}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "ensurepip.bootstrap(upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3491}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . `session` , see session .", "question_id": 9031}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "email.encoders.encode_quopri(msg)", "intent": "Encodes the payload into quoted-printable form and sets the Content-Transfer-Encoding header to quoted-printable 1 . With arguments `msg`.", "question_id": 3069}
{"snippet": "difflib.unified_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2653}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "connection.backup(target, progress=None, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8837}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "process.send_signal(signal)", "intent": "Sends the `signal` signal to the child process .", "question_id": 550}
{"snippet": "__import__(name, globals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4142}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "FTP.voidcmd(cmd)", "intent": "Send a simple command string to the server and handle the response . With arguments `cmd`.", "question_id": 3925}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157}
{"snippet": "pprint.PrettyPrinter(depth=None)", "intent": "Construct a PrettyPrinter instance . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7626}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}
{"snippet": "difflib.unified_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2653}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "zlib.compressobj(zdict, level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12898}
{"snippet": "inspect_loader.exec_module(module)", "intent": "Implementation of Loader.exec_module ( ) . With arguments `module`.", "question_id": 4831}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "test.support.check_syntax_error(testcase, statement, errtext='')", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . `errtext` is the text of the error raised by SyntaxError .", "question_id": 10232}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11430}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}
{"snippet": "Morsel.setdefault(key)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) .", "question_id": 4611}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "os.major(device)", "intent": "Extract the `device` major number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6882}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "mimetypes.init(files=None)", "intent": "Initialize the internal data structures . If given , `files` must be a sequence of file names which should be used to augment the default type map .", "question_id": 5946}
{"snippet": "os.walk(top, onerror=None)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `onerror` is specified , it should be a function ; it will be called with one argument , an OSError instance .", "question_id": 6977}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003}
{"snippet": "meta_path_finder.find_module(fullname, path)", "intent": "A legacy method for finding a loader for the specified module . If this is a top-level import , `path` will be None . With arguments `fullname`.", "question_id": 4805}
{"snippet": "View.Modify(kind, data)", "intent": "Modify the view , by calling MsiViewModify ( ) . `kind` can be one of MSIMODIFY_SEEK , MSIMODIFY_REFRESH , MSIMODIFY_INSERT , MSIMODIFY_UPDATE , MSIMODIFY_ASSIGN , MSIMODIFY_REPLACE , MSIMODIFY_MERGE , MSIMODIFY_DELETE , MSIMODIFY_INSERT_TEMPORARY , MSIMODIFY_VALIDATE , MSIMODIFY_VALIDATE_NEW , MSIMODIFY_VALIDATE_FIELD , or MSIMODIFY_VALIDATE_DELETE . `data` must be a record describing the new data .", "question_id": 6075}
{"snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8533}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "importlib.__import__(name, globals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "question_id": 4784}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "stream_writer.write(object)", "intent": "Writes the `object` \u2019 s contents encoded to the stream .", "question_id": 1281}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "pickle.loads(bytes_object, encoding=\"ASCII\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7381}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "binascii.a2b_qp(data, header=False)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data . If the optional argument `header` is present and true , underscores will be decoded as spaces .", "question_id": 827}
{"snippet": "turtle.screensize(canvwidth=None, canvheight=None, bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvwidth`, `canvheight`, `bg`.", "question_id": 11054}
{"snippet": "concurrent.futures.wait(fs, timeout=None)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `timeout` can be used to control the maximum number of seconds to wait before returning .", "question_id": 1481}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}
{"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "logging.config.fileConfig(fname, defaults=None)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "question_id": 5413}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "formatter.DumbWriter(maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3857}
{"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "operator.__le__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6520}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "definition.__name__", "intent": "The name of the class, function, method, descriptor, or generator instance.", "question_id": 9502}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "Codec.decode(input)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1264}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "bytearray.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9310}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "parser.parsestr(text, headersonly=False)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) . Optional `headersonly` is as with the parse ( ) method .", "question_id": 3391}
{"snippet": "calendar.itermonthdays4(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 916}
{"snippet": "code.interact(banner=None)", "intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided .", "question_id": 1162}
{"snippet": "widget.insert(pos, child, **kw)", "intent": "Inserts a pane at the specified position . `pos` is either the string \u201c end \u201d , an integer index , or the name of a managed `child` . With arguments `**kw`.", "question_id": 10608}
{"snippet": "types.new_class(name, bases=())", "intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11171}
{"snippet": "msilib.FCICreate(cabname, files)", "intent": "Create a new CAB file named `cabname` . `files` must be a list of tuples , each containing the name of the file on disk , and the name of the file inside the CAB file .", "question_id": 6058}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "test_result.addExpectedFailure(test, err)", "intent": "Called when the `test` case test fails , but was marked with the expectedFailure ( ) decorator . The default implementation appends a tuple ( test , formatted_err ) to the instance \u2019 s expectedFailures attribute , where formatted_err is a formatted traceback derived from `err` .", "question_id": 11528}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "warnings.showwarning(message, category, filename, lineno)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12017}
{"snippet": "codecs.open(filename)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "question_id": 1225}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "asyncio.open_connection(port=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `port`.", "question_id": 465}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "turtle.ondrag(fun, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `add`.", "question_id": 11029}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "IMAP4.thread(threading_algorithm, charset, search_criterion)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4747}
{"snippet": "sqlite3.complete_statement(sql)", "intent": "Returns True if the string `sql` contains one or more complete SQL statements terminated by semicolons .", "question_id": 8801}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2805}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "zlib.compressobj(zdict, level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12898}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11426}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}
{"snippet": "text_io_base.seek(offset)", "intent": "Change the stream position to the given `offset` .", "question_id": 5142}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "message.set_type(type, header='Content-Type', requote=True)", "intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "question_id": 3016}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "string.Template(template)", "intent": "The constructor takes a single argument which is the `template` string .", "question_id": 9525}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "ssl.wrap_socket(sock)", "intent": "Takes an instance `sock` of socket.socket , and returns an instance of ssl.SSLSocket , a subtype of socket.socket , which wraps the underlying socket in an SSL context .", "question_id": 8901}
{"snippet": "smtplib.SMTP_SSL(timeout, port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . The optional arguments `local_hostname` , `timeout` and `source_address` have the same meaning as they do in the SMTP class . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8470}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1693}
{"snippet": "Decompress.decompress(data, max_length=0)", "intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string . If the optional parameter `max_length` is non-zero then the return value will be no longer than max_length .", "question_id": 12935}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}
{"snippet": "parser.parse(fp)", "intent": "Read all the data from the text-mode file-like object `fp` , parse the resulting text , and return the root message object .", "question_id": 3388}
{"snippet": "IMAP4.thread(threading_algorithm, charset, search_criterion)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4747}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087}
{"snippet": "difflib.unified_diff(a, b, tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2649}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12225}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "Codec.encode(input, errors)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "question_id": 1261}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "datetime.time(minute=0)", "intent": "All arguments are optional . With arguments `minute`.", "question_id": 2316}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "bz2.open(filename, mode='r', encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 883}
{"snippet": "formatter.set_spacing(spacing)", "intent": "Set the `spacing` style for the writer .", "question_id": 3835}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "shutil.register_unpack_format(name, extensions, function, extra_args, description)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable . `description` can be provided to describe the format , and will be returned by the get_unpack_formats ( ) function .", "question_id": 8366}
{"snippet": "ur_lopener.retrieve(url, filename=None, data=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . It will be called once at the start and after each chunk of `data` is read from the network .", "question_id": 11901}
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "doc_test_runner.run(test, out=None, clear_globs=True)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . If `clear_globs` is true ( the default ) , then this namespace will be cleared after the test runs , to help with garbage collection .", "question_id": 2879}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "str(object=b'', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9175}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "pdb.Pdb(stdout=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7344}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "curses.unctrl(ch)", "intent": "Return a bytes object which is a printable representation of the character `ch` .", "question_id": 1992}
{"snippet": "doc_test_runner.report_success(out, test, example, got)", "intent": "Report that the given `example` ran successfully . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `got` is the actual output from the example .", "question_id": 2870}
{"snippet": "watched_file_handler.emit(record)", "intent": "Outputs the `record` to the file , but first calls reopenIfNeeded ( ) to reopen the file if it has changed .", "question_id": 5449}
{"snippet": "tempfile.NamedTemporaryFile(dir=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `dir`.", "question_id": 10050}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "BaseTransport.set_protocol(protocol)", "intent": "Set a new `protocol` .", "question_id": 400}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "sysconfig.get_path(name, scheme, vars)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) .", "question_id": 9863}
{"snippet": "mmap.seek(pos)", "intent": "Set the file \u2019 s current position . With arguments `pos`.", "question_id": 6018}
{"snippet": "test.support.check_syntax_error(testcase, statement)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "question_id": 10231}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12226}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}
{"snippet": "os.WIFSTOPPED(status)", "intent": "Return True if the process has been stopped , otherwise return False . With arguments `status`.", "question_id": 7090}
{"snippet": "gettext.bind_textdomain_codeset(domain)", "intent": "Bind the `domain` to `codeset` , changing the encoding of byte strings returned by the lgettext ( ) , ldgettext ( ) , lngettext ( ) and ldngettext ( ) functions .", "question_id": 4212}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "inspect.getmembers(object, predicate)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name . If the optional `predicate` argument is supplied , only members for which the predicate returns a true value are included .", "question_id": 4945}
{"snippet": "msilib.FCICreate(cabname, files)", "intent": "Create a new CAB file named `cabname` . `files` must be a list of tuples , each containing the name of the file on disk , and the name of the file inside the CAB file .", "question_id": 6058}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "gc.set_debug(flags)", "intent": "Set the garbage collection debugging `flags` .", "question_id": 4172}
{"snippet": "loop.set_debug(enabled: bool)", "intent": "Set the debug mode of the event loop . With arguments `enabled: bool`.", "question_id": 312}
{"snippet": "CookiePolicy.return_ok(cookie, request)", "intent": "Return boolean value indicating whether `cookie` should be returned to server . `request` is an object implementing the interface defined by the documentation for CookieJar.add_cookie_header ( ) .", "question_id": 4533}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "frozenset(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9433}
{"snippet": "argparse.ArgumentParser(parents=)", "intent": "Create a new ArgumentParser object . With arguments `parents`.", "question_id": 43}
{"snippet": "element.findtext(match)", "intent": "Finds text for the first subelement matching `match` .", "question_id": 12495}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11129}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "prototype(address)", "intent": "Returns a foreign function at the specified `address` which must be an integer .", "question_id": 1801}
{"snippet": "locale.resetlocale(category=LC_ALL)", "intent": "Sets the locale for `category` to the default setting .", "question_id": 5381}
{"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "doc_test_runner.run(test, clear_globs=True)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . If `clear_globs` is true ( the default ) , then this namespace will be cleared after the test runs , to help with garbage collection .", "question_id": 2876}
{"snippet": "timezone.utcoffset(dt)", "intent": "Return the fixed value specified when the timezone instance is constructed . The `dt` argument is ignored .", "question_id": 2359}
{"snippet": "Record.GetString(field)", "intent": "Return the value of `field` as a string where possible .", "question_id": 6083}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012}
{"snippet": "operator.__lt__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6519}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "fileinput.input(files=None, inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "question_id": 3789}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10971}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}
{"snippet": "__import__(name, locals=None, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4143}
{"snippet": "asyncio.start_unix_server(client_connected_cb, backlog=100)", "intent": "Start a Unix socket server . With arguments `client_connected_cb`, `backlog`.", "question_id": 498}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "audioop.getsample(fragment, width, index)", "intent": "Return the value of sample `index` from the `fragment` . With arguments `width`.", "question_id": 691}
{"snippet": "os.replace(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6897}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860}
{"snippet": "doctest.testmod(optionflags=0)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2782}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "xml.etree.ElementTree.fromstringlist(sequence, parser=None)", "intent": "Parses an XML document from a `sequence` of string fragments . `parser` is an optional parser instance .", "question_id": 12440}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "profile.Profile(builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . With arguments `builtins`.", "question_id": 7673}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "importlib.resources.read_binary(package, resource)", "intent": "Read and return the contents of the `resource` within `package` as bytes .", "question_id": 4857}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697}
{"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}
{"snippet": "@functools.wraps(wrapped, updated=WRAPPER_UPDATES)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `updated`.", "question_id": 4162}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "re.error(msg, pattern=None, pos=None)", "intent": "Exception raised when a string passed to one of the functions here is not a valid regular expression ( for example , it might contain unmatched parentheses ) or when some other error occurs during compilation or matching . It is never an error if a string contains no match for a `pattern` . With arguments `msg`, `pos`.", "question_id": 7964}
{"snippet": "telnetlib.Telnet(timeout, port=0)", "intent": "Telnet represents a connection to a Telnet server . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . Alternatively , the `host` name and optional `port` number can be passed to the constructor too , in which case the connection to the server will be established before the constructor returns .", "question_id": 10003}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "stream_handler.setStream(stream)", "intent": "Sets the instance \u2019 s `stream` to the specified value , if it is different .", "question_id": 5425}
{"snippet": "zlib.compressobj(zdict, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `method` is the compression algorithm .", "question_id": 12899}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "winreg.OpenKey(key, sub_key, access=KEY_READ)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12140}
{"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . With arguments `initargs`.", "question_id": 6327}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "msilib.FCICreate(cabname, files)", "intent": "Create a new CAB file named `cabname` . `files` must be a list of tuples , each containing the name of the file on disk , and the name of the file inside the CAB file .", "question_id": 6058}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5866}
{"snippet": "plistlib.load(fp, fmt=None, use_builtin_types=True)", "intent": "Read a plist file . `fp` should be a readable and binary file object . The `fmt` is the format of the file and the following values are valid : If `use_builtin_types` is true ( the default ) binary data will be returned as instances of bytes , otherwise it is returned as instances of Data .", "question_id": 7551}
{"snippet": "os.replace(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6897}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "fileinput.input(files=None, inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "question_id": 3789}
{"snippet": "element.findall(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12493}
{"snippet": "bytes.lstrip(chars)", "intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "question_id": 9343}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, dict_type=collections.OrderedDict)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `dict_type`.", "question_id": 1571}
{"snippet": "loop.sock_sendall(sock, data)", "intent": "Send `data` to the `sock` socket .", "question_id": 278}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "glob.escape(pathname)", "intent": "Escape all special characters ( ' ? With arguments `pathname`.", "question_id": 4268}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "html_diff.make_file(fromlines, tolines, fromdesc='', charset='utf-8')", "intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML file containing a table showing line by line differences with inter-line and intra-line changes highlighted . `fromdesc` and `todesc` are optional keyword arguments to specify from/to file column header strings ( both default to an empty string ) . With arguments `charset`.", "question_id": 2617}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "tkinter.Tcl(screenName=None, className='Tk')", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `screenName`, `className`.", "question_id": 10533}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5875}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "platform.mac_ver('', ''), release='', versioninfo=('', machine='')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7516}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12239}
{"snippet": "ContentHandler.startElement(name, attrs)", "intent": "Signals the start of an element in non-namespace mode . The `name` parameter contains the raw XML 1.0 name of the element type as a string and the `attrs` parameter holds an object of the Attributes interface ( see The Attributes Interface ) containing the attributes of the element .", "question_id": 12575}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084}
{"snippet": "xml.sax.SAXParseException(msg, exception, locator)", "intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "question_id": 12599}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "HTTPSHandler.https_open(req)", "intent": "Send an HTTPS request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11872}
{"snippet": "gzip.open(filename, mode='rb', encoding=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4279}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11148}
{"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "Morsel.output(header='Set-Cookie:')", "intent": "Return a string representation of the Morsel , suitable to be sent as an HTTP `header` .", "question_id": 4603}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "element.iterfind(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12502}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "BaseProtocol.connection_made(transport)", "intent": "Called when a connection is made . The `transport` argument is the transport representing the connection .", "question_id": 431}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10971}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "audioop.mul(fragment, width, factor)", "intent": "Return a `fragment` that has all samples in the original fragment multiplied by the floating-point value `factor` . With arguments `width`.", "question_id": 699}
{"snippet": "email.encoders.encode_7or8bit(msg)", "intent": "This doesn \u2019 t actually modify the message \u2019 s payload , but it does set the Content-Transfer-Encoding header to either 7bit or 8bit as appropriate , based on the payload data . With arguments `msg`.", "question_id": 3071}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "ur_lopener.retrieve(url, filename=None)", "intent": "Retrieves the contents of `url` and places it in `filename` .", "question_id": 11897}
{"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_side=False, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9038}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "str.rsplit(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9237}
{"snippet": "py_compile.main(args=None)", "intent": "Compile several source files . The files named in `args` ( or on the command line , if args is None ) are compiled and the resulting byte-code is cached in the normal manner .", "question_id": 7836}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947}
{"snippet": "os.minor(device)", "intent": "Extract the `device` minor number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6883}
{"snippet": "loop.sock_recv_into(sock, buf)", "intent": "Receive data from `sock` into the `buf` buffer .", "question_id": 277}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "connection.executemany(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executemany ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8814}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "locale.currency(val, symbol=True)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default .", "question_id": 5393}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "asyncio.Future(loop=None)", "intent": "A Future represents an eventual result of an asynchronous operation . This way alternative event `loop` implementations can inject their own optimized implementations of a Future object .", "question_id": 360}
{"snippet": "locale.nl_langinfo(option)", "intent": "Return some locale-specific information as a string . With arguments `option`.", "question_id": 5353}
{"snippet": "queue_listener.setLevel(level)", "intent": "Sets the threshold for this handler to `level` .", "question_id": 5599}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "fraction.__floor__()", "intent": "Returns the greatest int < = self .", "question_id": 3873}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "warnings.simplefilter(action, category=Warning, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `append`.", "question_id": 12038}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "calendar.itermonthdays3(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 915}
{"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994}
{"snippet": "pyclbr.readmodule(module, path=None)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package . If given , `path` is a sequence of directory paths prepended to sys.path , which is used to locate the module source code .", "question_id": 7707}
{"snippet": "json.dumps(obj, **kw, default=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `default`.", "question_id": 5288}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}
{"snippet": "cgitb.html(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1072}
{"snippet": "traceback.format_stack(f=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10788}
{"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}
{"snippet": "readline.set_history_length(length)", "intent": "Set or return the desired number of lines to save in the history file . With arguments `length`.", "question_id": 8028}
{"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957}
{"snippet": "parser.parsestr(text, headersonly=False)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) . Optional `headersonly` is as with the parse ( ) method .", "question_id": 3391}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "os.getpgid(pid)", "intent": "Return the process group id of the process with process id `pid` .", "question_id": 6680}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "test_result.addExpectedFailure(test, err)", "intent": "Called when the `test` case test fails , but was marked with the expectedFailure ( ) decorator . The default implementation appends a tuple ( test , formatted_err ) to the instance \u2019 s expectedFailures attribute , where formatted_err is a formatted traceback derived from `err` .", "question_id": 11528}
{"snippet": "socket.CMSG_LEN(length)", "intent": "Return the total `length` , without trailing padding , of an ancillary data item with associated data of the given length .", "question_id": 8665}
{"snippet": "textwrap.fill(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`, `width`.", "question_id": 10321}
{"snippet": "sysconfig.get_path(name, scheme, vars, expand)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) . get_path ( ) will use the variables returned by get_config_vars ( ) to `expand` the path .", "question_id": 9862}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "POP3.apop(user, secret)", "intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "question_id": 7606}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "datetime.replace(day=self.day)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2287}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615}
{"snippet": "asyncio.open_connection(port=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `port`.", "question_id": 465}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stderr=None)", "intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`.", "question_id": 526}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "pow(x, y)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4074}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}
{"snippet": "tempfile.TemporaryFile(mode='w+b', buffering=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10041}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "window.hline(y, x, ch, n)", "intent": "Display a horizontal line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "question_id": 2065}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "TarInfo.fromtarfile(tarfile)", "intent": "Read the next member from the TarFile object `tarfile` and return it as a TarInfo object .", "question_id": 9972}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "FTP.set_debuglevel(level)", "intent": "Set the instance \u2019 s debugging `level` .", "question_id": 3903}
{"snippet": "test_case.assertAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11420}
{"snippet": "bytes(source, encoding, errors)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`, `errors`.", "question_id": 3985}
{"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "os.set_blocking(fd, blocking)", "intent": "Set the `blocking` mode of the specified file descriptor . With arguments `fd`.", "question_id": 6801}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "tkinter.Tcl(baseName=None)", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `baseName`.", "question_id": 10529}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10976}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "asyncio.ensure_future(obj)", "intent": "Return : If `obj` is neither of the above a TypeError is raised .", "question_id": 355}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11429}
{"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196}
{"snippet": "fileinput.input(files=None, inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "question_id": 3789}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "dataclasses.field(default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2169}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "winreg.DeleteKeyEx(key, sub_key, reserved=0)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `reserved` is a reserved integer , and must be zero .", "question_id": 12130}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "doctest.DebugRunner(verbose=None)", "intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `verbose`.", "question_id": 2896}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "connection.execute(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8812}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "BaseProtocol.connection_lost(exc)", "intent": "Called when the connection is lost or closed . With arguments `exc`.", "question_id": 432}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1706}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "ftplib.FTP_TLS(passwd='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `passwd`.", "question_id": 3891}
{"snippet": "test.support.get_attribute(obj, name)", "intent": "Get an attribute , raising unittest.SkipTest if AttributeError is raised . With arguments `obj`, `name`.", "question_id": 10257}
{"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551}
{"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653}
{"snippet": "bdb.effective(file, line, frame)", "intent": "Determine if there is an effective ( active ) breakpoint at this `line` of code . With arguments `file`, `frame`.", "question_id": 818}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "bdb.user_line(frame)", "intent": "This method is called from dispatch_line ( ) when either stop_here ( ) or break_here ( ) yields True . With arguments `frame`.", "question_id": 781}
{"snippet": "os.initgroups(username, gid)", "intent": "Call the system initgroups ( ) to initialize the group access list with all of the groups of which the specified `username` is a member , plus the specified group id . With arguments `gid`.", "question_id": 6691}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "dbm.open(file)", "intent": "Open the database `file` file and return a corresponding object .", "question_id": 2366}
{"snippet": "os.symlink(src, dst)", "intent": "Create a symbolic link pointing to `src` named `dst` .", "question_id": 6951}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "binary.encode(out)", "intent": "Write the XML-RPC base 64 encoding of this binary item to the `out` stream object .", "question_id": 12688}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "__import__(name, globals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4136}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, defaults=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `defaults`.", "question_id": 1570}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "test.support.check_free_after_iterating(test, iter, cls, args=())", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`, `args`.", "question_id": 10272}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864}
{"snippet": "os.chmod(path, mode)", "intent": "Change the `mode` of `path` to the numeric mode .", "question_id": 6835}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "readline.set_completion_display_matches_hook(function)", "intent": "Set or remove the completion display `function` .", "question_id": 8048}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "pprint.pformat(object, depth=None)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7636}
{"snippet": "timeit.repeat(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10494}
{"snippet": "element_tree.write(file, encoding=\"us-ascii\")", "intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12528}
{"snippet": "xml.dom.pulldom.parseString(string, parser=None)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` . With arguments `parser`.", "question_id": 12430}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983}
{"snippet": "super(type, object-or-type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` . With arguments `object-or-type`.", "question_id": 4125}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "mime_types.read_windows_registry(strict=True)", "intent": "Load MIME type information from the Windows registry . If `strict` is True , information will be added to the list of standard types , else to the list of non-standard types .", "question_id": 5975}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10976}
{"snippet": "profile.runctx(cmd, globals, locals)", "intent": "Profile the `cmd` via exec ( ) with the specified global and local environment . With arguments `globals`, `locals`.", "question_id": 7686}
{"snippet": "difflib.unified_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2653}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "bdb.effective(file, line, frame)", "intent": "Determine if there is an effective ( active ) breakpoint at this `line` of code . With arguments `file`, `frame`.", "question_id": 818}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "bisect.insort_right(a, x, lo=0, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`, `hi`.", "question_id": 871}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "socket.socketpair(family)", "intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "question_id": 8625}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, decode_data=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `decode_data` and enable_SMTPUTF8 can not be set to True at the same time .", "question_id": 8431}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "turtle.bk(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10906}
{"snippet": "test.support.swap_attr(obj, attr, new_val)", "intent": "Context manager to swap out an attribute with a new object . If `attr` doesn \u2019 t exist on `obj` , it will be created and then deleted at the end of the block . With arguments `new_val`.", "question_id": 10194}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "datetime.timedelta(minutes=0)", "intent": "All arguments are optional and default to 0 . With arguments `minutes`.", "question_id": 2209}
{"snippet": "xml.dom.minidom.parse(filename_or_file, parser=None)", "intent": "Return a Document from the given input . `filename_or_file` may be either a file name , or a file-like object . `parser` , if given , must be a SAX2 parser object .", "question_id": 12397}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "connection.backup(target, progress=None, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8837}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "POP3.apop(user, secret)", "intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "question_id": 7606}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "urllib.parse.SplitResultBytes(scheme, netloc, path, query, fragment)", "intent": "Concrete class for urlsplit ( ) results containing bytes data . With arguments `scheme`, `netloc`, `path`, `query`, `fragment`.", "question_id": 11704}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "zipapp.create_archive(source, target=None, interpreter=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12773}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "io.open(file, mode='r', buffering=-1)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `mode`, `buffering`.", "question_id": 5059}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "aifc.readframes(nframes)", "intent": "Read and return the next `nframes` frames from the audio file .", "question_id": 20}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "subprocess.call(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9664}
{"snippet": "element.findall(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12493}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "pyclbr.readmodule(module, path=None)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package . If given , `path` is a sequence of directory paths prepended to sys.path , which is used to locate the module source code .", "question_id": 7707}
{"snippet": "test.support.import_fresh_module(name, deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10245}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "gzip.open(filename, mode='rb', compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4278}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "Path.open(mode='r', buffering=-1)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `buffering`.", "question_id": 7298}
{"snippet": "control.event(event, argument, condition=1)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`.", "question_id": 6127}
{"snippet": "code.interact(banner=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1167}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "csv.writer(csvfile, **fmtparams, dialect='excel')", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1683}
{"snippet": "random.randrange(stop)", "intent": "Return a randomly selected element from range ( start , `stop` , step ) .", "question_id": 7890}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "compileall.compile_file(fullname)", "intent": "Compile the file with path `fullname` .", "question_id": 1419}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5868}
{"snippet": "fileinput.hook_compressed(filename, mode)", "intent": "Transparently opens files compressed with gzip and bzip2 ( recognized by the extensions '.gz ' and '.bz2 ' ) using the gzip and bz2 modules . If the `filename` extension is not '.gz ' or '.bz2 ' , the file is opened normally ( ie , using open ( ) without any decompression ) . With arguments `mode`.", "question_id": 3810}
{"snippet": "os.set_blocking(fd, blocking)", "intent": "Set the `blocking` mode of the specified file descriptor . With arguments `fd`.", "question_id": 6801}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "window.inch(y)", "intent": "Return the character at the given position in the window . With arguments `y`.", "question_id": 2070}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "codecs.strict_errors(exception)", "intent": "Implements the 'strict ' error handling : each encoding or decoding error raises a UnicodeError . With arguments `exception`.", "question_id": 1255}
{"snippet": "tarfile.open(**kwargs, name=None, mode='r')", "intent": "Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . With arguments `**kwargs`.", "question_id": 9895}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`.", "question_id": 5585}
{"snippet": "HTMLParser.handle_startendtag(tag, attrs)", "intent": "Similar to handle_starttag ( ) , but called when the parser encounters an XHTML-style empty `tag` ( < img ... / > ) . With arguments `attrs`.", "question_id": 4358}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "ctypes.WinDLL(name, use_errno=False)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return int by default . With arguments `name`, `use_errno`.", "question_id": 1763}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "socket.socketpair(family)", "intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "question_id": 8625}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}
{"snippet": "Record.GetInteger(field)", "intent": "Return the value of `field` as an integer where possible .", "question_id": 6082}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "os.access(path, mode, follow_symlinks=True)", "intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions . With arguments `follow_symlinks`.", "question_id": 6823}
{"snippet": "socket.sendmsg_afalg(msg, op)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`.", "question_id": 8730}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683}
{"snippet": "TarFile.gettarinfo(name=None, fileobj=None)", "intent": "Create a TarInfo object from the result of os.stat ( ) or equivalent on an existing file . The file is either named by `name` , or specified as a file object `fileobj` with a file descriptor .", "question_id": 9964}
{"snippet": "IMAP4.lsub(directory='\"\"')", "intent": "List subscribed mailbox names in `directory` matching `pattern` .", "question_id": 4713}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "smtplib.SMTP(timeout, host='', port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8453}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923}
{"snippet": "xmlparser.StartElementHandler(name, attributes)", "intent": "Called for the start of every element . `name` is a string containing the element name , and `attributes` is the element attributes .", "question_id": 7760}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "zlib.compressobj(level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12913}
{"snippet": "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4590}
{"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}
{"snippet": "FileCookieJar.load(ignore_discard=False, ignore_expires=False)", "intent": "Load cookies from a file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4512}
{"snippet": "plistlib.loads(data, use_builtin_types=True, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `use_builtin_types`, `dict_type`.", "question_id": 7561}
{"snippet": "Morsel.setdefault(key)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) .", "question_id": 4611}
{"snippet": "window.chgat(y, x, num, attr)", "intent": "Set the attributes of `num` characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2033}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11118}
{"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr, exit=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . ( Note _exit ( ) exits the process immediately , which means it doesn \u2019 t do any cleanup like flushing `file` buffers . ) If `exit` is True , call _exit ( ) with status=1 after dumping the tracebacks .", "question_id": 3729}
{"snippet": "test_case.subTest(**params, msg=None)", "intent": "Return a context manager which executes the enclosed code block as a subtest . `msg` and params are optional , arbitrary values which are displayed whenever a subtest fails , allowing you to identify them clearly . With arguments `**params`.", "question_id": 11373}
{"snippet": "warnings.warn(message, category=None)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning .", "question_id": 12000}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "CookieJar.clear(domain, path, name)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed . If given three arguments , then the cookie with the specified domain , path and `name` is removed .", "question_id": 4493}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "dataclasses.field(repr=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `repr`.", "question_id": 2170}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "tzinfo.fromutc(dt)", "intent": "This is called from the default datetime.astimezone ( ) implementation . When called from that , dt.tzinfo is self , and `dt` \u2019 s date and time data are to be viewed as expressing a UTC time .", "question_id": 2356}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "textwrap.indent(text, prefix, predicate=None)", "intent": "Add `prefix` to the beginning of selected lines in `text` . The optional `predicate` argument can be used to control which lines are indented .", "question_id": 10325}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "pickletools.dis(pickle, memo=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler .", "question_id": 7417}
{"snippet": "bytes.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9308}
{"snippet": "xml.dom.getDOMImplementation(name=None, features=())", "intent": "Return a suitable DOM implementation . The `name` is either well-known , the module name of a DOM implementation , or None . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "question_id": 12306}
{"snippet": "NNTP.login(user=None, password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6455}
{"snippet": "doc_test_finder.find(obj, name, module)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object .", "question_id": 2852}
{"snippet": "zlib.compressobj(method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `method` is the compression algorithm .", "question_id": 12909}
{"snippet": "random.normalvariate(mu, sigma)", "intent": "Normal distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7914}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={}, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4434}
{"snippet": "pprint.pprint(object, indent=1)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7645}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "doctest.debug(module, name)", "intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above .", "question_id": 2888}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098}
{"snippet": "doc_test_runner.report_success(out, test, example, got)", "intent": "Report that the given `example` ran successfully . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `got` is the actual output from the example .", "question_id": 2870}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797}
{"snippet": "struct.pack(v1, v2)", "intent": "Identical to the pack ( ) function , using the compiled format . With arguments `v1`, `v2`.", "question_id": 9559}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "mimetypes.init(files=None)", "intent": "Initialize the internal data structures . If given , `files` must be a sequence of file names which should be used to augment the default type map .", "question_id": 5946}
{"snippet": "re.sub(pattern, repl, string, count=0, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "question_id": 7954}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "decimal.Context(prec=None, rounding=None)", "intent": "Creates a new context . `prec` is an integer in the range [ 1 , MAX_PREC ] that sets the precision for arithmetic operations in the context . The `rounding` option is one of the constants listed in the section Rounding Modes .", "question_id": 2508}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "ossaudiodev.openmixer(device)", "intent": "Open a mixer `device` and return an OSS mixer device object .", "question_id": 7176}
{"snippet": "mock.assert_called_once_with(*args, **kwargs)", "intent": "Assert that the mock was called exactly once and that that call was with the specified arguments . With arguments `*args`, `**kwargs`.", "question_id": 11573}
{"snippet": "mimetypes.init(files=None)", "intent": "Initialize the internal data structures . If given , `files` must be a sequence of file names which should be used to augment the default type map .", "question_id": 5946}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "difflib.context_diff(a, b, fromfile='', tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2635}
{"snippet": "ZipFile.extractall(pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "question_id": 12821}
{"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778}
{"snippet": "policy.header_store_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` provided by the application program when the application program is modifying a Message programmatically ( as opposed to a Message created by a parser ) .", "question_id": 3424}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help, metavar)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`, `metavar`.", "question_id": 74}
{"snippet": "os.WIFSIGNALED(status)", "intent": "Return True if the process exited due to a signal , otherwise return False . With arguments `status`.", "question_id": 7091}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "shlex.error_leader(lineno=None)", "intent": "This method generates an error message leader in the format of a Unix C compiler error label ; the format is ' '' % s '' , line % d : ' , where the % s is replaced with the name of the current source file and the % d with the current input line number ( the optional arguments can be used to override these ) . With arguments `lineno`.", "question_id": 8292}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "shutil.move(src, dst, copy_function=copy2)", "intent": "Recursively move a file or directory ( `src` ) to another location ( `dst` ) and return the destination . Otherwise , src is copied to dst using `copy_function` and then removed .", "question_id": 8339}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "test_case.subTest(**params)", "intent": "Return a context manager which executes the enclosed code block as a subtest . With arguments `**params`.", "question_id": 11372}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "locale.format(format, val)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`.", "question_id": 5388}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016}
{"snippet": "socket.sendmsg_afalg(msg, op)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`.", "question_id": 8730}
{"snippet": "sysconfig.parse_config_h(fp, vars)", "intent": "Parse a config.h-style file . `fp` is a file-like object pointing to the config.h-like file . With arguments `vars`.", "question_id": 9873}
{"snippet": "io.StringIO(initial_value='', newline='\\n')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "question_id": 5167}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "datetime.datetime(year, month, day, hour=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`.", "question_id": 2248}
{"snippet": "text_io_base.seek(offset)", "intent": "Change the stream position to the given `offset` .", "question_id": 5142}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "subprocess.call(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9664}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "HTTPConnection.putheader(header)", "intent": "Send an RFC 822-style `header` to the server .", "question_id": 4449}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}
{"snippet": "structure._fields_", "intent": "A sequence defining the structure fields.", "question_id": 1890}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697}
{"snippet": "os.lockf(fd, cmd, len)", "intent": "Apply , test or remove a POSIX lock on an open file descriptor . `fd` is an open file descriptor . `cmd` specifies the command to use - one of F_LOCK , F_TLOCK , F_ULOCK or F_TEST . `len` specifies the section of the file to lock .", "question_id": 6729}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "textwrap.wrap(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10319}
{"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}
{"snippet": "ur_lopener.open(fullurl, data=None)", "intent": "Open `fullurl` using the appropriate protocol . The `data` argument has the same meaning as the data argument of urlopen ( ) .", "question_id": 11893}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "re.sub(pattern, repl, string, count=0, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "question_id": 7954}
{"snippet": "importlib.util.spec_from_file_location(name, location, submodule_search_locations=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`, `submodule_search_locations`.", "question_id": 4940}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "BaseCookie.value_encode(val)", "intent": "Return a tuple ( real_value , coded_value ) . `val` can be any type , but coded_value will always be converted to a string .", "question_id": 4583}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "ctypes._CData", "intent": "This non-public class is the common base class of all ctypes data types.", "question_id": 1842}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "os.rename(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6892}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "statistics.pstdev(data, mu=None)", "intent": "Return the population standard deviation ( the square root of the population variance ) . With arguments `data`, `mu`.", "question_id": 9134}
{"snippet": "zlib.compressobj(level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12913}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra)", "intent": "Element class . `tag` is the element name . With arguments `**extra`.", "question_id": 12477}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "fcntl.flock(fd, operation)", "intent": "Perform the lock `operation` operation on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "question_id": 3746}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "scheduler.enter(delay, priority, action, argument=(), kwargs={})", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`, `kwargs`.", "question_id": 8125}
{"snippet": "FileCookieJar.revert(ignore_discard=False, ignore_expires=False)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4520}
{"snippet": "xml.dom.getDOMImplementation(name=None, features=())", "intent": "Return a suitable DOM implementation . The `name` is either well-known , the module name of a DOM implementation , or None . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "question_id": 12306}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "plistlib.load(fp, use_builtin_types=True)", "intent": "Read a plist file . `fp` should be a readable and binary file object . If `use_builtin_types` is true ( the default ) binary data will be returned as instances of bytes , otherwise it is returned as instances of Data .", "question_id": 7549}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "BaseCookie.output(attrs=None, header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4588}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "fcntl.lockf(fd, cmd, len=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3752}
{"snippet": "pprint.pformat(object, depth=None)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7636}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "csv.register_dialect(name, dialect)", "intent": "Associate `dialect` with `name` .", "question_id": 1685}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "lzma.compress(data, format=FORMAT_XZ)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5705}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761}
{"snippet": "turtle.ondrag(fun, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `add`.", "question_id": 11029}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "email.message.EmailMessage(policy=default)", "intent": "If `policy` is specified use the rules it specifies to update and serialize the representation of the message .", "question_id": 3223}
{"snippet": "importlib.__import__(name, locals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `locals`.", "question_id": 4785}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0, target=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . It can be fed XML data incrementally with the feed ( ) method , and parsing events are translated to a push API - by invoking callbacks on the `target` object .", "question_id": 12550}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "doctest.UnexpectedException(test, example, exc_info)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` raised an unexpected exception . With arguments `test`, `exc_info`.", "question_id": 2906}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "ctypes.memset(dst, c, count)", "intent": "Same as the standard C memset library function : fills the memory block at address `dst` with `count` bytes of value c. dst must be an integer specifying an address , or a ctypes instance . With arguments `c`.", "question_id": 1827}
{"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}
{"snippet": "compile(source, filename, mode, flags=0, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3996}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "difflib.SequenceMatcher(isjunk=None, b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2675}
{"snippet": "mock._get_child_mock(**kw)", "intent": "Create the child mocks for attributes and return value . With arguments `**kw`.", "question_id": 11587}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}
{"snippet": "binascii.b2a_qp(data, istext=True)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded .", "question_id": 830}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "http.server.SimpleHTTPRequestHandler(request, client_address, server)", "intent": "This class serves files from the current `directory` and below , directly mapping the directory structure to HTTP requests . A lot of the work , such as parsing the `request` , is done by the base class BaseHTTPRequestHandler . With arguments `client_address`, `server`.", "question_id": 4659}
{"snippet": "dis.disassemble(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2719}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}
{"snippet": "window.attron(attr)", "intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2013}
{"snippet": "telnetlib.Telnet(timeout, port=0)", "intent": "Telnet represents a connection to a Telnet server . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . Alternatively , the `host` name and optional `port` number can be passed to the constructor too , in which case the connection to the server will be established before the constructor returns .", "question_id": 10003}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "difflib.restore(sequence, which)", "intent": "Return one of the two sequences that generated a delta . Given a `sequence` produced by Differ.compare ( ) or ndiff ( ) , extract lines originating from file 1 or 2 ( parameter `which` ) , stripping off line prefixes .", "question_id": 2646}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "quopri.encode(input, output, quotetabs, header=False)", "intent": "Encode the contents of the `input` file and write the resulting quoted-printable data to the `output` file . `quotetabs` , a non-optional flag which controls whether to encode embedded spaces and tabs ; when true it encodes such embedded whitespace , and when false it leaves them unencoded . Note that spaces and tabs appearing at the end of lines are always encoded , as per RFC 1521. `header` is a flag which controls if spaces are encoded as underscores as per RFC 1522 .", "question_id": 7876}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "email.encoders.encode_noop(msg)", "intent": "This does nothing ; it doesn \u2019 t even set the Content-Transfer-Encoding header . With arguments `msg`.", "question_id": 3072}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "ctypes.string_at(address)", "intent": "This function returns the C string starting at memory `address` address as a bytes object .", "question_id": 1834}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "control.mapping(event, attribute)", "intent": "Make an entry into the EventMapping table for this control . With arguments `event`, `attribute`.", "question_id": 6130}
{"snippet": "shelve.open(filename, flag='c', protocol=None)", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) . The version of the pickle `protocol` can be specified with the protocol parameter .", "question_id": 8238}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}
{"snippet": "doctest.DebugRunner(optionflags=0)", "intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `optionflags`.", "question_id": 2897}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "dialog.control(name, type, x, y, width, height, attributes, property, text, control_next, help)", "intent": "Return a new Control object . With arguments `name`, `type`, `x`, `y`, `width`, `height`, `attributes`, `property`, `text`, `control_next`, `help`.", "question_id": 6136}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}
{"snippet": "bdb.run(cmd, locals=None)", "intent": "Debug a statement executed via the exec ( ) function . `globals` defaults to __main__.__dict__ , `locals` defaults to globals . With arguments `cmd`.", "question_id": 809}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "ur_lopener.retrieve(url, filename=None)", "intent": "Retrieves the contents of `url` and places it in `filename` .", "question_id": 11897}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "Call the `function` ( a function or method object , not a string ) with the given arguments . With arguments `*args`, `**kwds`.", "question_id": 7335}
{"snippet": "IMAP4.starttls(ssl_context=None)", "intent": "Send a STARTTLS command . The `ssl_context` argument is optional and should be a ssl.SSLContext object .", "question_id": 4743}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "select.kevent(ident, udata=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `udata`.", "question_id": 8161}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947}
{"snippet": "FieldStorage.getfirst(name, default=None)", "intent": "This method always returns only one value associated with form field `name` . 1 If no such form field or value exists then the method returns the value specified by the optional parameter `default` .", "question_id": 1027}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "charset.__eq__(other)", "intent": "This method allows you to compare two Charset instances for equality . With arguments `other`.", "question_id": 2924}
{"snippet": "ctypes.BigEndianStructure(*args, **kw)", "intent": "Abstract base class for structures in big endian byte order . With arguments `*args`, `**kw`.", "question_id": 1887}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "traceback.print_last(limit=None, chain=True)", "intent": "This is a shorthand for print_exception ( sys.last_type , sys.last_value , sys.last_traceback , `limit` , `file` , `chain` ) .", "question_id": 10758}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "smtplib.SMTP_SSL(timeout, port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . The optional arguments `local_hostname` , `timeout` and `source_address` have the same meaning as they do in the SMTP class . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8470}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "io.BufferedWriter(raw)", "intent": "A buffer providing higher-level access to a writeable , sequential RawIOBase object . The constructor creates a BufferedWriter for the given writeable `raw` stream .", "question_id": 5124}
{"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "@unittest.skip(reason)", "intent": "Unconditionally skip the decorated test . `reason` should describe why the test is being skipped .", "question_id": 11358}
{"snippet": "IMAP4.select(mailbox='INBOX', readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4732}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "socket.socketpair(family)", "intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "question_id": 8625}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "xml.etree.ElementInclude.include(elem)", "intent": "This function expands XInclude directives . `elem` is the root element .", "question_id": 12475}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "compileall.compile_dir(dir, force=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `force` is true , modules are re-compiled even if the timestamps are up to date .", "question_id": 1412}
{"snippet": "email_message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3265}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "io.BufferedRandom(raw)", "intent": "A buffered interface to random access streams . The constructor creates a reader and writer for a seekable `raw` stream , given in the first argument .", "question_id": 5128}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "Cmd.cmdloop(intro=None)", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument . The optional argument is a banner or `intro` string to be issued before the first prompt ( this overrides the intro class attribute ) .", "question_id": 1136}
{"snippet": "XMLReader.setContentHandler(handler)", "intent": "Set the current ContentHandler . With arguments `handler`.", "question_id": 12615}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "connection.cursor(factory=Cursor)", "intent": "The cursor method accepts a single optional parameter `factory` .", "question_id": 8807}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "async_exit_stack.push_async_callback(callback, *args, **kwds)", "intent": "Similar to `callback` ( ) but expects a coroutine function . With arguments `*args`, `**kwds`.", "question_id": 1635}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, loop=None)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `loop`.", "question_id": 527}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "glob.glob(pathname, recursive=False)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification . If `recursive` is true , the pattern \u201c ** \u201d will match any files and zero or more directories , subdirectories and symbolic links to directories .", "question_id": 4265}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "shlex.shlex(infile=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The second optional argument is a filename string , which sets the initial value of the `infile` attribute .", "question_id": 8275}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "ZipFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory .", "question_id": 12820}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "tree_builder.end(tag)", "intent": "Closes the current element . `tag` is the element name .", "question_id": 12543}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "Call the `function` ( a function or method object , not a string ) with the given arguments . With arguments `*args`, `**kwds`.", "question_id": 7335}
{"snippet": "FTP.connect(host='', port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3909}
{"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}
{"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "BaseHandler.unknown_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs with no specific registered handler to open it . With arguments `req`.", "question_id": 11845}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "winreg.SetValue(key, sub_key, type, value)", "intent": "Associates a `value` with a specified `key` . `sub_key` is a string that names the subkey with which the value is associated . `type` is an integer that specifies the type of the data .", "question_id": 12150}
{"snippet": "re.subn(pattern, repl, string, count=0, flags=0)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `count`, `flags`.", "question_id": 7958}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "pprint.pformat(object, compact=False)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7637}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "question_id": 759}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "code.interact(readfunc=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . This creates a new instance of InteractiveConsole and sets `readfunc` to be used as the InteractiveConsole.raw_input ( ) method , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1169}
{"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}
{"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer)", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp .", "question_id": 1297}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}
{"snippet": "tempfile.SpooledTemporaryFile(max_size=0, mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10062}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}
{"snippet": "InteractiveInterpreter.runsource(source)", "intent": "Compile and run some `source` in the interpreter .", "question_id": 1175}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "logging.handlers.RotatingFileHandler(filename, mode='a')", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `mode` is not specified , ' a ' is used .", "question_id": 5459}
{"snippet": "mmap.rfind(sub, start, end)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6014}
{"snippet": "range(start, stop, step)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` . If the `step` argument is omitted , it defaults to 1 .", "question_id": 9163}
{"snippet": "html_calendar.formatyearpage(theyear, width=3)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 963}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "FTP.retrlines(cmd)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "question_id": 3930}
{"snippet": "widget.insert(parent, index, **kw, iid=None)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . If `iid` is specified , it is used as the item identifier ; iid must not already exist in the tree . With arguments `**kw`.", "question_id": 10641}
{"snippet": "Queue.put(item, block=True)", "intent": "Put `item` into the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 7850}
{"snippet": "@test.support.run_with_locale(catstr, *locales)", "intent": "A decorator for running a function in a different locale , correctly resetting it after it has finished . `catstr` is the locale category as a string ( for example `` LC_ALL '' ) . With arguments `*locales`.", "question_id": 10209}
{"snippet": "shelve.open(filename, flag='c')", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) .", "question_id": 8235}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}
{"snippet": "BaseException", "intent": "The base class for all built-in exceptions.", "question_id": 3628}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "gettext.find(domain)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes .", "question_id": 4221}
{"snippet": "json.JSONDecodeError(msg, doc, pos)", "intent": "Subclass of ValueError with the following additional attributes : With arguments `msg`, `doc`, `pos`.", "question_id": 5335}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10975}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "Telnet.read_until(expected)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10009}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "plistlib.loads(data, fmt=None)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`.", "question_id": 7556}
{"snippet": "io.open(file, opener=None)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `opener`.", "question_id": 5058}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "io_base.readline(size=-1)", "intent": "Read and return one line from the stream . If `size` is specified , at most size bytes will be read .", "question_id": 5071}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10101}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "zlib.compressobj(zdict, level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12903}
{"snippet": "platform.mac_ver('', ''), release='', machine='')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7514}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "timeit.repeat(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10489}
{"snippet": "FTP.login(user='anonymous', passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3919}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "turtle.back(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10905}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`.", "question_id": 75}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "winreg.OpenKeyEx(key, sub_key, reserved=0)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `reserved` is a reserved integer , and must be zero .", "question_id": 12143}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "bdb.set_break(filename, lineno, cond, funcname)", "intent": "Set a new breakpoint . If the `lineno` line doesn \u2019 t exist for the `filename` passed as argument , return an error message . With arguments `cond`, `funcname`.", "question_id": 793}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "super(type, object-or-type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` . With arguments `object-or-type`.", "question_id": 4125}
{"snippet": "logging.captureWarnings(capture)", "intent": "This function is used to turn the `capture` of warnings by logging on and off .", "question_id": 5654}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "test.support.check_syntax_error(testcase, statement)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "question_id": 10231}
{"snippet": "urllib.parse.urlparse(urlstring, scheme='')", "intent": "Parse a URL into six components , returning a 6-item named tuple . It should be the same type ( text or bytes ) as `urlstring` , except that the default value `` is always allowed , and is automatically converted to b '' if appropriate . This corresponds to the general structure of a URL : `scheme` : //netloc/path ; parameters ? query # fragment .", "question_id": 11666}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "email.encoders.encode_quopri(msg)", "intent": "Encodes the payload into quoted-printable form and sets the Content-Transfer-Encoding header to quoted-printable 1 . With arguments `msg`.", "question_id": 3069}
{"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019}
{"snippet": "FTP.login(passwd='', acct='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3921}
{"snippet": "base_http_request_handler.log_request(size='-')", "intent": "Logs an accepted ( successful ) request . If a `size` of the response is available , then it should be passed as the size parameter .", "question_id": 4650}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "IMAP4.thread(threading_algorithm, charset)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4748}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761}
{"snippet": "str.rstrip(chars)", "intent": "Return a copy of the string with trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9239}
{"snippet": "bytes.partition(sep)", "intent": "Split the sequence at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9305}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "plistlib.loads(data, use_builtin_types=True, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `use_builtin_types`, `dict_type`.", "question_id": 7561}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "zipfile.PyZipFile(file, optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `optimize`.", "question_id": 12850}
{"snippet": "timeit.repeat(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10494}
{"snippet": "datetime.replace(day=self.day)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2287}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12125}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "tzinfo.dst(dt)", "intent": "Return the daylight saving time ( DST ) adjustment , as a timedelta object or None if DST information isn \u2019 t known . tz.utcoffset ( `dt` ) - tz.dst ( dt )", "question_id": 2354}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}
{"snippet": "fcntl.lockf(fd, cmd, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3750}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None, is_package=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g . With arguments `is_package`.", "question_id": 4917}
{"snippet": "chunk.Chunk(file, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1077}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "str(object=b'', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9175}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "bytearray(source)", "intent": "There is no dedicated literal syntax for bytearray objects , instead they are always created by calling the constructor : With arguments `source`.", "question_id": 9265}
{"snippet": "str(object=b'')", "intent": "Return a string version of `object` .", "question_id": 9171}
{"snippet": "parser.issuite(st)", "intent": "This function mirrors isexpr ( ) in that it reports whether an ST object represents an 'exec ' form , commonly known as a \u201c suite. \u201d It is not safe to assume that this function is equivalent to not isexpr ( `st` ) , as additional syntactic fragments may be supported in the future .", "question_id": 7225}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "FTP.ntransfercmd(cmd, rest=None)", "intent": "Like transfercmd ( ) , but returns a tuple of the data connection and the expected size of the data . `cmd` and `rest` means the same thing as in transfercmd ( ) .", "question_id": 3946}
{"snippet": "venv.EnvBuilder(system_site_packages=False, upgrade=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `system_site_packages`, `upgrade`.", "question_id": 11981}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "fraction.__round__(ndigits)", "intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "question_id": 3876}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "Element.getElementsByTagName(tagName)", "intent": "Same as equivalent method in the Document class . With arguments `tagName`.", "question_id": 12355}
{"snippet": "select.kevent(ident)", "intent": "( Only supported on BSD . ) With arguments `ident`.", "question_id": 8156}
{"snippet": "base_manager.register(typeid, callable, proxytype, exposed)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid . `exposed` is used to specify a sequence of method names which proxies for this typeid should be allowed to access using BaseProxy._callmethod ( ) .", "question_id": 6290}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "urllib.request.urlopen(url, timeout, data=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "question_id": 11743}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132}
{"snippet": "turtle.towards(x, y=None)", "intent": "Return the angle between the line from turtle position to position specified by ( `x` , `y` ) , the vector or the other turtle .", "question_id": 10939}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "xml.sax.SAXParseException(msg, exception, locator)", "intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "question_id": 12599}
{"snippet": "loop.connect_write_pipe(protocol_factory, pipe)", "intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 302}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "datetime.datetime(year, month, day, microsecond=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `microsecond`.", "question_id": 2251}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "multiprocessing.connection.deliver_challenge(connection, authkey)", "intent": "Send a randomly generated message to the other end of the `connection` and wait for a reply . If the reply matches the digest of the message using `authkey` as the key then a welcome message is sent to the other end of the connection .", "question_id": 6366}
{"snippet": "policy.fold_binary(name, value)", "intent": "The same as fold ( ) , except that the returned `value` should be a bytes object rather than a string . With arguments `name`.", "question_id": 3427}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "os.WIFCONTINUED(status)", "intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "question_id": 7089}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "dataclasses.field(repr=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `repr`.", "question_id": 2170}
{"snippet": "os.kill(pid, sig)", "intent": "Send signal `sig` to the process `pid` .", "question_id": 7037}
{"snippet": "csv.writer(csvfile, **fmtparams)", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . With arguments `**fmtparams`.", "question_id": 1682}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "random.randrange(start, stop, step)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7891}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}
{"snippet": "email.message_from_bytes(s, policy=policy.compat32)", "intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) . Optional `_class` and `policy` are interpreted as with the BytesParser class constructor .", "question_id": 3398}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "msvcrt.locking(fd, mode, nbytes)", "intent": "Lock part of a file based on file descriptor `fd` from the C runtime . `mode` must be one of the LK_* constants listed below . The locked region of the file extends from the current file position for `nbytes` bytes , and may continue beyond the end of the file .", "question_id": 6146}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925}
{"snippet": "IMAP4.readonly", "intent": "This exception is raised when a writable mailbox has its status changed by the server.", "question_id": 4675}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "pickletools.dis(pickle, memo=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler .", "question_id": 7417}
{"snippet": "tempfile.SpooledTemporaryFile(mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10055}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720}
{"snippet": "turtle.onrelease(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`, `add`.", "question_id": 11026}
{"snippet": "meta_path_finder.find_spec(fullname, path, target=None)", "intent": "An abstract method for finding a spec for the specified module . If this is a top-level import , `path` will be None . When passed in , `target` is a module object that the finder may use to make a more educated guess about what spec to return . With arguments `fullname`.", "question_id": 4804}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863}
{"snippet": "warnings.showwarning(message, category, filename, lineno, line=None)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12019}
{"snippet": "compileall.compile_file(fullname, ddir=None, force=False)", "intent": "Compile the file with path `fullname` . If `ddir` is given , it is prepended to the path to the file being compiled for use in compilation time tracebacks , and is also compiled in to the byte-code file , where it will be used in tracebacks and other messages in cases where the source file does not exist at the time the byte-code file is executed . With arguments `force`.", "question_id": 1427}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10975}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "style.lookup(style, option, default=None)", "intent": "Returns the value specified for `option` in `style` . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "question_id": 10679}
{"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "fileinput.FileInput(files=None, bufsize=0)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `files`, `bufsize`.", "question_id": 3809}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . If your SMTP server requires authentication , you can specify a ( username , password ) tuple for the `credentials` argument . With arguments `fromaddr`.", "question_id": 5516}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "sysconfig.get_path(name, scheme, vars, expand)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) . get_path ( ) will use the variables returned by get_config_vars ( ) to `expand` the path .", "question_id": 9862}
{"snippet": "sysconfig.get_paths(scheme)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` .", "question_id": 9868}
{"snippet": "datetime.time(tzinfo=None)", "intent": "All arguments are optional . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2319}
{"snippet": "dis.Bytecode(x, current_offset=None)", "intent": "Analyse the bytecode corresponding to a function , generator , asynchronous generator , coroutine , method , string of source code , or a code object ( as returned by compile ( ) ) . If `current_offset` is not None , it refers to an instruction offset in the disassembled code . With arguments `x`.", "question_id": 2697}
{"snippet": "property(fdel=None)", "intent": "Return a property attribute . `fdel` is a function for deleting an attribute value .", "question_id": 4088}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "subprocess.call(args, timeout=None)", "intent": "Run the command described by `args` . The full function signature is the same as that of the Popen constructor - this function passes all supplied arguments other than `timeout` directly through to that interface .", "question_id": 9665}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157}
{"snippet": "windows_proactor_event_loop_policy.attach_loop(loop)", "intent": "Attach the watcher to an event `loop` .", "question_id": 386}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "os.walk(top, onerror=None)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `onerror` is specified , it should be a function ; it will be called with one argument , an OSError instance .", "question_id": 6977}
{"snippet": "io.open(file, mode='r')", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `mode`.", "question_id": 5052}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "operator.__ne__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6522}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "timeit.repeat(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10488}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, strict=True)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `strict`.", "question_id": 1576}
{"snippet": "codecs.lookup_error(name)", "intent": "Return the error handler previously registered under the `name` name .", "question_id": 1254}
{"snippet": "urllib.parse.urlencode(query, errors=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11736}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "base_manager.register(typeid, callable)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object .", "question_id": 6292}
{"snippet": "bz2.open(filename, mode='r', errors=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 884}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "window.vline(ch, n)", "intent": "Display a vertical line starting at ( y , x ) with length `n` consisting of the character `ch` .", "question_id": 2129}
{"snippet": "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)", "intent": "Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , \u2026 `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .", "question_id": 7759}
{"snippet": "unicodedata.decimal(chr)", "intent": "Returns the decimal value assigned to the character `chr` as integer .", "question_id": 11344}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "dis.disco(code, lasti=-1, file=None)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "question_id": 2726}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "ssl.wrap_socket(sock)", "intent": "Takes an instance `sock` of socket.socket , and returns an instance of ssl.SSLSocket , a subtype of socket.socket , which wraps the underlying socket in an SSL context .", "question_id": 8901}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11421}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "zipfile.ZipFile(file, compression=ZIP_STORED, allowZip64=True)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised . If `allowZip64` is True ( the default ) zipfile will create ZIP files that use the ZIP64 extensions when the zipfile is larger than 4 GiB .", "question_id": 12800}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`.", "question_id": 63}
{"snippet": "io_base.readline(size=-1)", "intent": "Read and return one line from the stream . If `size` is specified , at most size bytes will be read .", "question_id": 5071}
{"snippet": "profile.runctx(cmd, globals, locals)", "intent": "Profile the `cmd` via exec ( ) with the specified global and local environment . With arguments `globals`, `locals`.", "question_id": 7686}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "email_message.del_param(param, header='content-type')", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3271}
{"snippet": "ctypes.CDLL(name, mode=DEFAULT_MODE)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `mode`.", "question_id": 1741}
{"snippet": "window.insnstr(str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`, `attr`.", "question_id": 2077}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "connection.executemany(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executemany ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8814}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "compileall.compile_path(legacy=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `legacy`.", "question_id": 1434}
{"snippet": "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4159}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733}
{"snippet": "json.dump(obj, fp, **kw, indent=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level . With arguments `**kw`.", "question_id": 5276}
{"snippet": "connection.cursor(factory=Cursor)", "intent": "The cursor method accepts a single optional parameter `factory` .", "question_id": 8807}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "style.layout(style)", "intent": "Define the widget layout for given `style` .", "question_id": 10681}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "timeit.timeit(stmt='pass', number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10484}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . With arguments `prog`.", "question_id": 81}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}
{"snippet": "mimetypes.MimeTypes(strict=True)", "intent": "This class represents a MIME-types database . With arguments `strict`.", "question_id": 5958}
{"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "asyncio.gather(*aws)", "intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`.", "question_id": 599}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634}
{"snippet": "SimpleXMLRPCServer.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request .", "question_id": 12735}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . `session` , see session .", "question_id": 9031}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "io.BufferedRandom(raw)", "intent": "A buffered interface to random access streams . The constructor creates a reader and writer for a seekable `raw` stream , given in the first argument .", "question_id": 5128}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "fcntl.flock(fd, operation)", "intent": "Perform the lock `operation` operation on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "question_id": 3746}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "timeit.repeat(stmt='pass', repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10495}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "fileinput.FileInput(mode='r')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With `mode` you can specify which file mode will be passed to open ( ) .", "question_id": 3805}
{"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "ctypes.string_at(address, size=-1)", "intent": "This function returns the C string starting at memory `address` address as a bytes object . If `size` is specified , it is used as size , otherwise the string is assumed to be zero-terminated .", "question_id": 1835}
{"snippet": "turtle.numinput(title, prompt, maxval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11087}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}
{"snippet": "counter.update(iterable-or-mapping)", "intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1348}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}
{"snippet": "style.lookup(style, option)", "intent": "Returns the value specified for `option` in `style` .", "question_id": 10677}
{"snippet": "process.communicate(input=None)", "intent": "Interact with process : The optional `input` argument is the data ( bytes object ) that will be sent to the child process .", "question_id": 549}
{"snippet": "SubprocessProtocol.pipe_data_received(fd, data)", "intent": "Called when the child process writes `data` into its stdout or stderr pipe . `fd` is the integer file descriptor of the pipe .", "question_id": 442}
{"snippet": "test.support.setswitchinterval(interval)", "intent": "Set the sys.setswitchinterval ( ) to the given `interval` .", "question_id": 10162}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "msilib.Directory(database, cab, basedir, physical, logical, default)", "intent": "Create a new directory in the Directory table . Files are added into the current component , and into the `cab` file . To create a directory , a base directory object needs to be specified ( can be None ) , the path to the `physical` directory , and a `logical` directory name . `default` specifies the DefaultDir slot in the directory table . With arguments `database`, `basedir`.", "question_id": 6092}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "inspect.Parameter(name, kind)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`.", "question_id": 4993}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084}
{"snippet": "dis.disco(code, lasti=-1, file=None)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "question_id": 2726}
{"snippet": "readline.set_history_length(length)", "intent": "Set or return the desired number of lines to save in the history file . With arguments `length`.", "question_id": 8028}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, target=None)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If no `target` is specified , the target will need to be set using setTarget ( ) before this handler does anything useful .", "question_id": 5533}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "json.JSONEncoder(default=None)", "intent": "Extensible JSON encoder for Python data structures . Supports the following objects and types by `default` :", "question_id": 5330}
{"snippet": "types.ModuleType(name, doc=None)", "intent": "The type of modules . Constructor takes the `name` of the module to be created and optionally its docstring . With arguments `doc`.", "question_id": 11197}
{"snippet": "venv.EnvBuilder(system_site_packages=False, clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `system_site_packages`, `clear`.", "question_id": 11979}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "base_proxy._callmethod(methodname)", "intent": "Call and return the result of a method of the proxy \u2019 s referent . Note in particular that an exception will be raised if `methodname` has not been exposed .", "question_id": 6322}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4119}
{"snippet": "calendar.LocaleTextCalendar(locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 979}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}
{"snippet": "message.set_param(param, value, requote=True)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional header specifies an alternative header to Content-Type , and all parameters will be quoted as necessary unless optional `requote` is False ( the default is True ) . With arguments `param`.", "question_id": 3001}
{"snippet": "element_tree.parse(source, parser=None)", "intent": "Loads an external XML section into this element tree . `source` is a file name or file object . `parser` is an optional parser instance .", "question_id": 12526}
{"snippet": "datetime.fromtimestamp(timestamp)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2261}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "webbrowser.register(name, constructor, instance=None)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12111}
{"snippet": "unicodedata.digit(chr)", "intent": "Returns the digit value assigned to the character `chr` as integer .", "question_id": 11346}
{"snippet": "SimpleQueue.put(item, block=True)", "intent": "Put `item` into the queue . The optional args `block` and `timeout` are ignored and only provided for compatibility with Queue.put ( ) .", "question_id": 7864}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088}
{"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "codecs.lookup_error(name)", "intent": "Return the error handler previously registered under the `name` name .", "question_id": 1254}
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, defaults=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `defaults`.", "question_id": 1570}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "SSLContext.load_verify_locations(cafile=None, capath=None, cadata=None)", "intent": "Load a set of \u201c certification authority \u201d ( CA ) certificates used to validate other peers \u2019 certificates when verify_mode is other than CERT_NONE . At least one of `cafile` or `capath` must be specified . The `cadata` object , if present , is either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates .", "question_id": 9010}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084}
{"snippet": "mimetypes.MimeTypes(filenames=(), strict=True)", "intent": "This class represents a MIME-types database . The optional `filenames` parameter can be used to cause additional files to be loaded \u201c on top \u201d of the default database . With arguments `strict`.", "question_id": 5959}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "imaplib.IMAP4(port=IMAP4_PORT)", "intent": "This class implements the actual IMAP4 protocol . If `port` is omitted , the standard IMAP4 port ( 143 ) is used .", "question_id": 4671}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "audioop.findfit(fragment, reference)", "intent": "Try to match `reference` as well as possible to a portion of `fragment` ( which should be the longer fragment ) .", "question_id": 689}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost')", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5495}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "CookiePolicy.set_ok(cookie, request)", "intent": "Return boolean value indicating whether `cookie` should be accepted from server . `request` is an object implementing the interface defined by the documentation for CookieJar.extract_cookies ( ) .", "question_id": 4532}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "fileinput.FileInput(mode='r')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With `mode` you can specify which file mode will be passed to open ( ) .", "question_id": 3805}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds)", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "question_id": 1702}
{"snippet": "HTTPConnection.putrequest(method, url)", "intent": "This should be the first call after the connection to the server has been made . It sends a line to the server consisting of the `method` string , the `url` string , and the HTTP version ( HTTP/1.1 ) .", "question_id": 4444}
{"snippet": "message.__str__()", "intent": "Equivalent to as_string ( ) .", "question_id": 2946}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005}
{"snippet": "os.getxattr(path, attribute)", "intent": "Return the value of the extended filesystem `attribute` attribute for `path` .", "question_id": 6993}
{"snippet": "base64.a85decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 741}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "py_zip_file.writepy(pathname, basename='')", "intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) . `basename` is intended for internal use only .", "question_id": 12857}
{"snippet": "json.dumps(obj, **kw)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "question_id": 5280}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "importlib.util.spec_from_file_location(name, location, loader=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . Missing information will be filled in on the spec by making use of `loader` APIs and by the implication that the module will be file-based . With arguments `name`, `location`.", "question_id": 4939}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950}
{"snippet": "breakpoint.bpprint(out=None)", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 767}
{"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056}
{"snippet": "imaplib.IMAP4(port=IMAP4_PORT)", "intent": "This class implements the actual IMAP4 protocol . If `port` is omitted , the standard IMAP4 port ( 143 ) is used .", "question_id": 4671}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "locale.format_string(format, val, grouping=False, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5387}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}
{"snippet": "ArgumentParser.parse_args(namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 71}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "kqueue.control(changelist, max_events)", "intent": "Low level interface to kevent With arguments `changelist`, `max_events`.", "question_id": 8202}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0, cond=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.", "question_id": 758}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4431}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867}
{"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678}
{"snippet": "turtle.turtlesize(outline=None)", "intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "question_id": 10997}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "calendar.prcal(year, w=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `c`.", "question_id": 1007}
{"snippet": "HTTPSHandler.https_open(req)", "intent": "Send an HTTPS request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11872}
{"snippet": "multiprocessing.Process(group=None)", "intent": "Process objects represent activity that is run in a separate process . `group` should always be None ; it exists solely for compatibility with threading.Thread .", "question_id": 6166}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "window.addch(ch)", "intent": "Paint character `ch` at ( y , x ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2001}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "NNTP.login(user=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6452}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "IMAP4.select(mailbox='INBOX', readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4732}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435}
{"snippet": "pickle.Unpickler(file, fix_imports=True, errors=\"strict\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7403}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "doctest.DocTestFinder(recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2843}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "ast.increment_lineno(node)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file .", "question_id": 153}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "process.send_signal(signal)", "intent": "Sends the `signal` signal to the child process .", "question_id": 550}
{"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "print(*objects, sep=' ', flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4082}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : With arguments `prog`, `parser_class`, `option_string`, `required`.", "question_id": 76}
{"snippet": "SimpleXMLRPCServer.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request .", "question_id": 12735}
{"snippet": "IMAP4.thread(threading_algorithm, charset, search_criterion)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4747}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707}
{"snippet": "nntplib.NNTP_SSL(host, password=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `password`.", "question_id": 6432}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "test_result.addExpectedFailure(test, err)", "intent": "Called when the `test` case test fails , but was marked with the expectedFailure ( ) decorator . The default implementation appends a tuple ( test , formatted_err ) to the instance \u2019 s expectedFailures attribute , where formatted_err is a formatted traceback derived from `err` .", "question_id": 11528}
{"snippet": "ZipFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object .", "question_id": 12814}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "tkinter.Tcl(className='Tk')", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `className`.", "question_id": 10530}
{"snippet": "os.setxattr(path, attribute, value, flags=0)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` . `flags` may be XATTR_REPLACE or XATTR_CREATE .", "question_id": 7002}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "quit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1609}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help, metavar)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`, `metavar`.", "question_id": 74}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "header.encode(\\t', maxlinelen=None, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `maxlinelen` , if given , overrides the instance \u2019 s value for the maximum line length . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3136}
{"snippet": "bz2.BZ2Compressor()", "intent": "Create a new compressor object .", "question_id": 896}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}
{"snippet": "logging.FileHandler(filename, mode='a')", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . With arguments `filename`.", "question_id": 5427}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "type(object)", "intent": "With one argument , return the type of an `object` .", "question_id": 4130}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "SimpleXMLRPCServer.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request .", "question_id": 12735}
{"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11119}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, istext=True)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded .", "question_id": 832}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . With arguments `prog`.", "question_id": 81}
{"snippet": "_c_data.from_buffer(source)", "intent": "This method returns a ctypes instance that shares the buffer of the `source` object .", "question_id": 1844}
{"snippet": "window.border(ls, rs, ts, bs, tl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`.", "question_id": 2022}
{"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "bdb.checkfuncname(b, frame)", "intent": "Check whether we should break here , depending on the way the breakpoint `b` was set . If it was set via line number , it checks if b.line is the same as the one in the `frame` also passed as argument .", "question_id": 817}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "msilib.Feature(db, id, title, desc, display, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6117}
{"snippet": "profile.runctx(command, globals, locals, filename=None, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `filename`, `sort`.", "question_id": 7668}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "SubprocessProtocol.pipe_data_received(fd, data)", "intent": "Called when the child process writes `data` into its stdout or stderr pipe . `fd` is the integer file descriptor of the pipe .", "question_id": 442}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "subprocess.check_call(args, timeout=None)", "intent": "Run command with arguments . The full function signature is the same as that of the Popen constructor - this function passes all supplied arguments other than `timeout` directly through to that interface . With arguments `args`.", "question_id": 9675}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "unicodedata.digit(chr)", "intent": "Returns the digit value assigned to the character `chr` as integer .", "question_id": 11346}
{"snippet": "robot_file_parser.parse(lines)", "intent": "Parses the `lines` argument .", "question_id": 11911}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "textwrap.wrap(text, **kwargs)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10318}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}
{"snippet": "subprocess.call(args, stderr=None)", "intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead :", "question_id": 9662}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "ssl.wrap_socket(sock)", "intent": "Takes an instance `sock` of socket.socket , and returns an instance of ssl.SSLSocket , a subtype of socket.socket , which wraps the underlying socket in an SSL context .", "question_id": 8901}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "BaseCookie.value_encode(val)", "intent": "Return a tuple ( real_value , coded_value ) . `val` can be any type , but coded_value will always be converted to a string .", "question_id": 4583}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "print(*objects, sep=' ', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4081}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "asyncio.Queue(loop=None)", "intent": "A first in , first out ( FIFO ) queue . With arguments `loop`.", "question_id": 447}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157}
{"snippet": "sqlite3.sqlite_version", "intent": "The version number of the run-time SQLite library, as a string.", "question_id": 8793}
{"snippet": "ipaddress.AddressValueError(ValueError)", "intent": "Any value error related to the address . With arguments `ValueError`.", "question_id": 5237}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "joinable_queue.send_bytes(buffer)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` .", "question_id": 6238}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "calendar.timegm(tuple)", "intent": "An unrelated but handy function that takes a time `tuple` such as returned by the gmtime ( ) function in the time module , and returns the corresponding Unix timestamp value , assuming an epoch of 1970 , and the POSIX encoding .", "question_id": 1021}
{"snippet": "lzma.decompress(data, format=FORMAT_AUTO)", "intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "question_id": 5715}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "unittest.main(exit=True)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . By default main calls sys.exit ( ) with an `exit` code indicating success or failure of the tests run .", "question_id": 11551}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491}
{"snippet": "chunk.Chunk(file, inclheader=False)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .", "question_id": 1078}
{"snippet": "loader.module_repr(module)", "intent": "A legacy method which when implemented calculates and returns the given `module` \u2019 s repr , as a string .", "question_id": 4817}
{"snippet": "element.remove(subelement)", "intent": "Removes `subelement` from the element .", "question_id": 12506}
{"snippet": "readline.set_completer(function)", "intent": "Set or remove the completer `function` .", "question_id": 8040}
{"snippet": "ZipFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory .", "question_id": 12820}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "doctest.debug(module, name)", "intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above .", "question_id": 2888}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "loop.create_unix_server(protocol_factory, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `backlog`.", "question_id": 245}
{"snippet": "set | other | ...", "intent": "Return a new set with elements from the set and all others.", "question_id": 9446}
{"snippet": "socket.sendmsg_afalg(msg, op)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`.", "question_id": 8730}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "directory.start_component(feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6095}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "bytearray.rsplit(sep=None, maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9358}
{"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606}
{"snippet": "doc_test_parser.get_doctest(string, globs, name, filename, lineno)", "intent": "Extract all doctest examples from the given `string` , and collect them into a DocTest object . `globs` , `name` , `filename` , and `lineno` are attributes for the new DocTest object .", "question_id": 2856}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}
{"snippet": "loop.sock_connect(sock, address)", "intent": "Connect `sock` to a remote socket at `address` .", "question_id": 279}
{"snippet": "asyncio.Future(loop=None)", "intent": "A Future represents an eventual result of an asynchronous operation . This way alternative event `loop` implementations can inject their own optimized implementations of a Future object .", "question_id": 360}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "ipaddress.NetmaskValueError(ValueError)", "intent": "Any value error related to the net mask . With arguments `ValueError`.", "question_id": 5238}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11142}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11148}
{"snippet": "time.replace(microsecond=self.microsecond)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `microsecond`.", "question_id": 2338}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070}
{"snippet": "lzma.open(filename, mode=\"rb\")", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to .", "question_id": 5657}
{"snippet": "ctypes.wstring_at(address, size=-1)", "intent": "This function returns the wide character string starting at memory `address` address as a string . If `size` is specified , it is used as the number of characters of the string , otherwise the string is assumed to be zero-terminated .", "question_id": 1841}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "asyncio.open_connection(ssl=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `ssl`.", "question_id": 468}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "controller.open(url, new=0, autoraise=True)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible . With arguments `autoraise`.", "question_id": 12117}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "queue_listener.setLevel(level)", "intent": "Sets the threshold for this handler to `level` .", "question_id": 5599}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "pwd.getpwuid(uid)", "intent": "Return the password database entry for the given numeric user ID . With arguments `uid`.", "question_id": 7703}
{"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "style.theme_create(themename, parent=None, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10689}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this handler .", "question_id": 5602}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11132}
{"snippet": "mailcap.findmatch(caps, MIMEtype)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . With arguments `caps`, `MIMEtype`.", "question_id": 5861}
{"snippet": "OpenerDirector.open(url, data=None)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11838}
{"snippet": "bytes_parser.parsebytes(bytes)", "intent": "Similar to the parse ( ) method , except it takes a bytes-like object instead of a file-like object . Calling this method on a bytes-like object is equivalent to wrapping `bytes` in a BytesIO instance first and calling parse ( ) .", "question_id": 3378}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "counter.fromkeys(iterable)", "intent": "This class method is not implemented for Counter objects . With arguments `iterable`.", "question_id": 1347}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 996}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "re.fullmatch(pattern, string)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object .", "question_id": 7941}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, decode_data=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `decode_data` and enable_SMTPUTF8 can not be set to True at the same time .", "question_id": 8431}
{"snippet": "raw_io_base.read(size=-1)", "intent": "Read up to `size` bytes from the object and return them .", "question_id": 5085}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "Record.SetInteger(field, value)", "intent": "Set `field` to `value` through MsiRecordSetInteger ( ) .", "question_id": 6086}
{"snippet": "str(object=b'')", "intent": "Return a string version of `object` .", "question_id": 9171}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "decimal.quantize(exp, rounding=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2462}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "email_message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 3244}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "ssl.wrap_socket(sock)", "intent": "Takes an instance `sock` of socket.socket , and returns an instance of ssl.SSLSocket , a subtype of socket.socket , which wraps the underlying socket in an SSL context .", "question_id": 8901}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . If your SMTP server requires authentication , you can specify a ( username , password ) tuple for the `credentials` argument . To specify the use of a `secure` protocol ( TLS ) , pass in a tuple to the secure argument . With arguments `fromaddr`.", "question_id": 5519}
{"snippet": "codecs.strict_errors(exception)", "intent": "Implements the 'strict ' error handling : each encoding or decoding error raises a UnicodeError . With arguments `exception`.", "question_id": 1255}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}
{"snippet": "difflib.unified_diff(a, b, fromfile='', tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2654}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10976}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "pdb.post_mortem(traceback=None)", "intent": "Enter post-mortem debugging of the given `traceback` object .", "question_id": 7339}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, domain: int=None)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `domain: int`.", "question_id": 10859}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "os.sched_getparam(pid)", "intent": "Return the scheduling parameters as a sched_param instance for the process with PID `pid` .", "question_id": 7110}
{"snippet": "difflib.SequenceMatcher(isjunk=None, a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2674}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "code.InteractiveConsole(locals=None, filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`, `filename`.", "question_id": 1160}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "@test.support.run_with_locale(catstr, *locales)", "intent": "A decorator for running a function in a different locale , correctly resetting it after it has finished . `catstr` is the locale category as a string ( for example `` LC_ALL '' ) . With arguments `*locales`.", "question_id": 10209}
{"snippet": "IMAP4.thread(threading_algorithm, charset, search_criterion)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4747}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "locale.resetlocale(category=LC_ALL)", "intent": "Sets the locale for `category` to the default setting .", "question_id": 5381}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "turtle.bk(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10906}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "bdb.checkfuncname(b, frame)", "intent": "Check whether we should break here , depending on the way the breakpoint `b` was set . If it was set via line number , it checks if b.line is the same as the one in the `frame` also passed as argument .", "question_id": 817}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "message.get_payload(i=None, decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2959}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478}
{"snippet": "ZipFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory .", "question_id": 12820}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}
{"snippet": "locale.setlocale(category, locale=None)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5351}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "xml.sax.xmlreader.AttributesImpl(attrs)", "intent": "This is an implementation of the Attributes interface ( see section The Attributes Interface ) . Objects of this class should be instantiated by readers ; `attrs` must be a dictionary-like object containing a mapping from attribute names to attribute values .", "question_id": 12611}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`, `MIMEtype`.", "question_id": 5862}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 833}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, flushOnClose=True)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If `flushOnClose` is specified as False , then the buffer is not flushed when the handler is closed .", "question_id": 5534}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "loop.getaddrinfo(host, port, family=0, proto=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `proto`.", "question_id": 295}
{"snippet": "datetime.replace(second=self.second)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `second`.", "question_id": 2290}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "tkinter.tix.Tk(baseName=None)", "intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `baseName`.", "question_id": 10546}
{"snippet": "directory.start_component(component=None, uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6102}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "urllib.parse.parse_qs(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11669}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 833}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "difflib.unified_diff(a, b, fromfile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2648}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "message.__bytes__()", "intent": "Equivalent to as_bytes ( ) .", "question_id": 2951}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "shutil.chown(path, user=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8342}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "stat.S_ISCHR(mode)", "intent": "Return non-zero if the `mode` is from a character special device file .", "question_id": 9062}
{"snippet": "bytes.rpartition(sep)", "intent": "Split the sequence at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9323}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "loop.create_unix_server(protocol_factory, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `backlog`.", "question_id": 245}
{"snippet": "element.remove(subelement)", "intent": "Removes `subelement` from the element .", "question_id": 12506}
{"snippet": "code.interact(banner=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1167}
{"snippet": "test.support.check__all__(test_case, module, extra=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `extra` argument can be a set of names that wouldn \u2019 t otherwise be automatically detected as \u201c public \u201d , like objects without a proper __module__ attribute . With arguments `test_case`.", "question_id": 10279}
{"snippet": "json.loads(s, **kw, cls=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`, `cls`.", "question_id": 5302}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "warnings.warn(message, stacklevel=1, source=None)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this : This makes the warning refer to deprecation ( ) \u2019 s caller , rather than to the `source` of deprecation ( ) itself ( since the latter would defeat the purpose of the warning message ) .", "question_id": 12005}
{"snippet": "difflib.diff_bytes(dfunc, a, b, lineterm=b'\\n')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2663}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "wsgiref.validate.validator(application)", "intent": "Wrap `application` and return a new WSGI application object .", "question_id": 12235}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "urllib.parse.quote(string, safe='/', encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11709}
{"snippet": "email_message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3260}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, flushOnClose=True)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If `flushOnClose` is specified as False , then the buffer is not flushed when the handler is closed .", "question_id": 5534}
{"snippet": "quit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1609}
{"snippet": "zipfile.ZipFile(file, compression=ZIP_STORED, allowZip64=True)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised . If `allowZip64` is True ( the default ) zipfile will create ZIP files that use the ZIP64 extensions when the zipfile is larger than 4 GiB .", "question_id": 12800}
{"snippet": "collections.deque(iterable)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` .", "question_id": 1351}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "locale.format(format, val)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`.", "question_id": 5388}
{"snippet": "SimpleXMLRPCServer.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request .", "question_id": 12735}
{"snippet": "traceback.print_last(chain=True)", "intent": "This is a shorthand for print_exception ( sys.last_type , sys.last_value , sys.last_traceback , `limit` , `file` , `chain` ) .", "question_id": 10756}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "exit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1611}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost')", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5495}
{"snippet": "xml.dom.getDOMImplementation(name=None, features=())", "intent": "Return a suitable DOM implementation . The `name` is either well-known , the module name of a DOM implementation , or None . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "question_id": 12306}
{"snippet": "socket.gethostbyname_ex(hostname)", "intent": "Translate a host name to IPv4 address format , extended interface . Return a triple ( `hostname` , aliaslist , ipaddrlist ) where hostname is the primary host name responding to the given ip_address , aliaslist is a ( possibly empty ) list of alternative host names for the same address , and ipaddrlist is a list of IPv4 addresses for the same interface on the same host ( often but not always a single address ) .", "question_id": 8648}
{"snippet": "bytes_io.read1(size)", "intent": "In BytesIO , this is the same as read ( ) . With arguments `size`.", "question_id": 5113}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "email_message.get_content(*args, **kw)", "intent": "Call the get_content ( ) method of the `content_manager` , passing self as the message object , and passing along any other arguments or keywords as additional arguments . With arguments `*args`, `**kw`.", "question_id": 3290}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "@dataclasses.dataclass(repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `repr`.", "question_id": 2159}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "base_selector.modify(fileobj, events)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8218}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "pprint.PrettyPrinter(indent=1, depth=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7630}
{"snippet": "turtle.turtlesize(outline=None)", "intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "question_id": 10997}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}
{"snippet": "operator.__le__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6520}
{"snippet": "FTP.transfercmd(cmd)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection .", "question_id": 3943}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "base_manager.register(typeid, callable, proxytype, exposed)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid . `exposed` is used to specify a sequence of method names which proxies for this typeid should be allowed to access using BaseProxy._callmethod ( ) .", "question_id": 6290}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634}
{"snippet": "dataclasses.astuple(instance)", "intent": "Converts the dataclass `instance` to a tuple ( by using the factory function `tuple_factory` ) .", "question_id": 2181}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used .", "question_id": 5530}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}
{"snippet": "test_case.assertIsNot(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11385}
{"snippet": "Path.open(mode='r', buffering=-1)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `buffering`.", "question_id": 7298}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}
{"snippet": "header.encode(\\t', splitchars=';, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3135}
{"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}
{"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}
{"snippet": "calendar.prcal(year, l=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "question_id": 1009}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "IMAP4.namespace()", "intent": "Returns IMAP namespaces as defined in RFC 2342 .", "question_id": 4717}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "os.WIFSTOPPED(status)", "intent": "Return True if the process has been stopped , otherwise return False . With arguments `status`.", "question_id": 7090}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "dis.disassemble(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2720}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "zlib.compressobj(level=-1, strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `strategy` is used to tune the compression algorithm .", "question_id": 12916}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "platform.win32_ver(release='', version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7500}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172}
{"snippet": "FileCookieJar.revert(ignore_discard=False, ignore_expires=False)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4520}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "importlib.util.find_spec(name, package=None)", "intent": "Find the spec for a module , optionally relative to the specified `package` `name` .", "question_id": 4929}
{"snippet": "warnings.simplefilter(action, category=Warning, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `append`.", "question_id": 12038}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "fileinput.FileInput(mode='r')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With `mode` you can specify which file mode will be passed to open ( ) .", "question_id": 3805}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "element_tree.find(match)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`.", "question_id": 12512}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "subprocess.run(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9574}
{"snippet": "warnings.warn(message, category=None)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning .", "question_id": 12000}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}
{"snippet": "window.attrset(attr)", "intent": "Set the \u201c background \u201d set of attributes to `attr` .", "question_id": 2014}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "datetime.time(microsecond=0)", "intent": "All arguments are optional . With arguments `microsecond`.", "question_id": 2318}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994}
{"snippet": "ctypes.LittleEndianStructure(*args, **kw)", "intent": "Abstract base class for structures in little endian byte order . With arguments `*args`, `**kw`.", "question_id": 1888}
{"snippet": "heapq.heappush(heap, item)", "intent": "Push the value `item` onto the `heap` , maintaining the heap invariant .", "question_id": 4316}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "shlex.split(s, posix=True)", "intent": "Split the string `s` using shell-like syntax . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8270}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "trace.Trace(infile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `infile` is the name of the file from which to read stored count information .", "question_id": 10713}
{"snippet": "socket.sendfile(file, offset=0)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file .", "question_id": 8733}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012}
{"snippet": "test_case.subTest(**params, msg=None)", "intent": "Return a context manager which executes the enclosed code block as a subtest . `msg` and params are optional , arbitrary values which are displayed whenever a subtest fails , allowing you to identify them clearly . With arguments `**params`.", "question_id": 11373}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "filter(function, iterable)", "intent": "Construct an iterator from those elements of `iterable` for which `function` returns true .", "question_id": 4018}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "ftplib.FTP(host='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made .", "question_id": 3879}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "pkgutil.extend_path(path, name)", "intent": "Extend the search `path` for the modules which comprise a package . It also looks for *.pkg files beginning where * matches the `name` argument .", "question_id": 7436}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037}
{"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654}
{"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "quopri.decodestring(s, header=False)", "intent": "Like decode ( ) , except that it accepts a source bytes and returns the corresponding decoded bytes . With arguments `s`, `header`.", "question_id": 7878}
{"snippet": "re.subn(pattern, repl, string, flags=0)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `flags`.", "question_id": 7957}
{"snippet": "operator.itemgetter(*items)", "intent": "Return a callable object that fetches item from its operand using the operand \u2019 s __getitem__ ( ) method . With arguments `*items`.", "question_id": 6585}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "queue.put(obj, block)", "intent": "Put `obj` into the queue . If the optional argument `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 6201}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "plistlib.dumps(value, sort_keys=True)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`.", "question_id": 7573}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026}
{"snippet": "os.path.commonpath(paths)", "intent": "Return the longest common sub-path of each pathname in the sequence `paths` .", "question_id": 7144}
{"snippet": "incremental_decoder.decode(object)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object .", "question_id": 1275}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "Cmd.cmdloop(intro=None)", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument . The optional argument is a banner or `intro` string to be issued before the first prompt ( this overrides the intro class attribute ) .", "question_id": 1136}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "urllib.request.ProxyHandler(proxies=None)", "intent": "Cause requests to go through a proxy . If `proxies` is given , it must be a dictionary mapping protocol names to URLs of proxies .", "question_id": 11785}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "base64.standard_b64decode(s)", "intent": "Decode bytes-like object or ASCII string `s` using the standard Base64 alphabet and return the decoded bytes .", "question_id": 715}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 931}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "shelve.open(filename, flag='c', writeback=False)", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) . If the optional `writeback` parameter is set to True , all entries accessed are also cached in memory , and written back on sync ( ) and close ( ) ; this can make it handier to mutate mutable entries in the persistent dictionary , but , if many entries are accessed , it can consume vast amounts of memory for the cache , and it can make the close operation very slow since all accessed entries are written back ( there is no way to determine which accessed entries are mutable , nor which ones were actually mutated ) .", "question_id": 8239}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "inspect.Parameter(name, kind)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`.", "question_id": 4993}
{"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "zipapp.create_archive(source, target=None, compressed=False)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The optional `compressed` argument determines whether files are compressed .", "question_id": 12776}
{"snippet": "logging.handlers.QueueListener(queue, *handlers, respect_handler_level=False)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . If `respect_handler_level` is True , a handler \u2019 s level is respected ( compared with the level for the message ) when deciding whether to pass messages to that handler ; otherwise , the behaviour is as in previous Python versions - to always pass each message to each handler . With arguments `*handlers`.", "question_id": 5558}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "uuid.uuid5(namespace, name)", "intent": "Generate a UUID based on the SHA-1 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11963}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "config_parser.optionxform(option)", "intent": "Transforms the `option` name option as found in an input file or as passed in by client code to the form that should be used in the internal structures .", "question_id": 1565}
{"snippet": "importlib.util.spec_from_loader(name, loader, origin=None)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`, `origin`.", "question_id": 4935}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "calendar.itermonthdays2(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 914}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "ssl.wrap_socket(sock)", "intent": "Takes an instance `sock` of socket.socket , and returns an instance of ssl.SSLSocket , a subtype of socket.socket , which wraps the underlying socket in an SSL context .", "question_id": 8901}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "str.format_map(mapping)", "intent": "Similar to str.format ( **mapping ) , except that `mapping` is used directly and not copied to a dict .", "question_id": 9198}
{"snippet": "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4159}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "calendar.prcal(year, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `m`.", "question_id": 1005}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "logging.StreamHandler(stream=None)", "intent": "Returns a new instance of the StreamHandler class . If `stream` is specified , the instance will use it for logging output ; otherwise , sys.stderr will be used .", "question_id": 5422}
{"snippet": "platform.java_ver('', ''), '', ''), release='', vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7490}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "logging.handlers.QueueListener(queue, *handlers, respect_handler_level=False)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . If `respect_handler_level` is True , a handler \u2019 s level is respected ( compared with the level for the message ) when deciding whether to pass messages to that handler ; otherwise , the behaviour is as in previous Python versions - to always pass each message to each handler . With arguments `*handlers`.", "question_id": 5558}
{"snippet": "stat.S_ISCHR(mode)", "intent": "Return non-zero if the `mode` is from a character special device file .", "question_id": 9062}
{"snippet": "IMAP4.starttls(ssl_context=None)", "intent": "Send a STARTTLS command . The `ssl_context` argument is optional and should be a ssl.SSLContext object .", "question_id": 4743}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}
{"snippet": "pdb.Pdb(stdin=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7343}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184}
{"snippet": "Request.has_header(header)", "intent": "Return whether the instance has the named `header` ( checks both regular and unredirected ) .", "question_id": 11827}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={}, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4434}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "socket.socket(fileno=None)", "intent": "Create a new socket using the given address `family` , socket `type` and protocol number . If `fileno` is specified , the values for family , type , and `proto` are auto-detected from the specified file descriptor .", "question_id": 8617}
{"snippet": "bdb.run(cmd)", "intent": "Debug a statement executed via the exec ( ) function . With arguments `cmd`.", "question_id": 807}
{"snippet": "textwrap.fill(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`, `width`.", "question_id": 10321}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "element.findall(match, namespaces=None)", "intent": "Finds all matching subelements , by tag name or path . `namespaces` is an optional mapping from namespace prefix to full name . With arguments `match`.", "question_id": 12494}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "timezone.utcoffset(dt)", "intent": "Return the fixed value specified when the timezone instance is constructed . The `dt` argument is ignored .", "question_id": 2359}
{"snippet": "compileall.compile_file(fullname, ddir=None, rx=None)", "intent": "Compile the file with path `fullname` . If `ddir` is given , it is prepended to the path to the file being compiled for use in compilation time tracebacks , and is also compiled in to the byte-code file , where it will be used in tracebacks and other messages in cases where the source file does not exist at the time the byte-code file is executed . If `rx` is given , its search method is passed the full path name to the file being compiled , and if it returns a true value , the file is not compiled and True is returned .", "question_id": 1428}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940}
{"snippet": "xml.etree.ElementInclude.include(elem)", "intent": "This function expands XInclude directives . `elem` is the root element .", "question_id": 12475}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6047}
{"snippet": "turtle.RawPen(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11159}
{"snippet": "window.addstr(str, attr)", "intent": "Paint the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2008}
{"snippet": "min(iterable, key, default)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4054}
{"snippet": "select.epoll(sizehint=-1, flags=0)", "intent": "( Only supported on Linux 2.5.44 and newer . ) `sizehint` informs epoll about the expected number of events to be registered . `flags` is deprecated and completely ignored .", "question_id": 8153}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "random.setstate(state)", "intent": "`state` should have been obtained from a previous call to getstate ( ) , and setstate ( ) restores the internal state of the generator to what it was at the time getstate ( ) was called .", "question_id": 7888}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "Widget.tk.createfilehandler(file, mask, func)", "intent": "Registers the `file` handler callback function `func` . The `mask` argument is an ORed combination of any of the three constants below .", "question_id": 10537}
{"snippet": "exit_stack.callback(callback, *args, **kwds)", "intent": "Accepts an arbitrary `callback` function and arguments and adds it to the callback stack . With arguments `*args`, `**kwds`.", "question_id": 1629}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227}
{"snippet": "threading.Condition(lock=None)", "intent": "This class implements condition variable objects . If the `lock` argument is given and not None , it must be a Lock or RLock object , and it is used as the underlying lock .", "question_id": 10387}
{"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "turtle.RawPen(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11159}
{"snippet": "__import__(name, globals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4142}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "turtle.RawPen(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11159}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404}
{"snippet": "pickle.load(file, encoding=\"ASCII\", errors=\"strict\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7377}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "process.join(timeout)", "intent": "If the optional argument `timeout` is None ( the default ) , the method blocks until the process whose join ( ) method is called terminates .", "question_id": 6177}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10975}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "subprocess.Popen(args, bufsize=-1)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `bufsize` will be supplied as the corresponding argument to the open ( ) function when creating the stdin/stdout/stderr pipe file objects :", "question_id": 9600}
{"snippet": "IMAP4.readline()", "intent": "Reads one line from the remote server .", "question_id": 4723}
{"snippet": "mmap.mmap(fileno, length, offset)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `offset` may be specified as a non-negative integer offset .", "question_id": 5984}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "importlib.resources.open_binary(package, resource)", "intent": "Open for binary reading the `resource` within `package` .", "question_id": 4852}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "mimetypes.MimeTypes(filenames=())", "intent": "This class represents a MIME-types database . The optional `filenames` parameter can be used to cause additional files to be loaded \u201c on top \u201d of the default database .", "question_id": 5957}
{"snippet": "os.fwalk(top='.', follow_symlinks=False)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . Note however that , unlike other functions , the fwalk ( ) default value for `follow_symlinks` is False . With arguments `top`.", "question_id": 6991}
{"snippet": "timeit.Timer(timer=<timer function>)", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10500}
{"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "dict(mapping, **kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . If a positional argument is given and it is a `mapping` object , a dictionary is created with the same key-value pairs as the mapping object . With arguments `**kwarg`.", "question_id": 9468}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "gettext.find(domain, localedir=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4226}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "str(encoding='utf-8', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9176}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688}
{"snippet": "ipaddress.AddressValueError(ValueError)", "intent": "Any value error related to the address . With arguments `ValueError`.", "question_id": 5237}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "curses.panel.new_panel(win)", "intent": "Returns a panel object , associating it with the given window `win` .", "question_id": 2142}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, inline_comment_prefixes=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `inline_comment_prefixes`.", "question_id": 1575}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "ctypes.Union(*args, **kw)", "intent": "Abstract base class for unions in native byte order . With arguments `*args`, `**kw`.", "question_id": 1886}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "codecs.lookup_error(name)", "intent": "Return the error handler previously registered under the `name` name .", "question_id": 1254}
{"snippet": "email.mime.application.MIMEApplication(_data, **_params, _subtype='octet-stream')", "intent": "Module : email.mime.application `_data` is a string containing the raw byte data . Optional `_subtype` specifies the MIME subtype and defaults to octet-stream . With arguments `**_params`.", "question_id": 3327}
{"snippet": "warnings.warn(message, category=None, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12003}
{"snippet": "bytearray.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9310}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "config_parser.read(filenames)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .", "question_id": 1512}
{"snippet": "io.FileIO(name, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener .", "question_id": 5102}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "incremental_decoder.decode(object)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object .", "question_id": 1275}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11502}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}
{"snippet": "bytearray.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9310}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "difflib.restore(sequence, which)", "intent": "Return one of the two sequences that generated a delta . Given a `sequence` produced by Differ.compare ( ) or ndiff ( ) , extract lines originating from file 1 or 2 ( parameter `which` ) , stripping off line prefixes .", "question_id": 2646}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557}
{"snippet": "ctypes.memset(dst, c, count)", "intent": "Same as the standard C memset library function : fills the memory block at address `dst` with `count` bytes of value c. dst must be an integer specifying an address , or a ctypes instance . With arguments `c`.", "question_id": 1827}
{"snippet": "shelve.Shelf(dict, writeback=False, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8250}
{"snippet": "filecmp.dircmp(a, b, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3762}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, secure=None)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . To specify the use of a `secure` protocol ( TLS ) , pass in a tuple to the secure argument . With arguments `fromaddr`.", "question_id": 5517}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "@test.support.anticipate_failure(condition)", "intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "question_id": 10208}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}
{"snippet": "trace.Trace(infile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `infile` is the name of the file from which to read stored count information .", "question_id": 10713}
{"snippet": "urllib.request.URLopener(**x509)", "intent": "Base class for opening and reading URLs . With arguments `**x509`.", "question_id": 11890}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost', socktype=socket.SOCK_DGRAM)", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . The type of socket opened depends on the `socktype` argument , which defaults to socket.SOCK_DGRAM and thus opens a UDP socket . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5499}
{"snippet": "functools.update_wrapper(wrapper, wrapped, updated=WRAPPER_UPDATES)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4158}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "calendar.LocaleTextCalendar(firstweekday=0, locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale . With arguments `firstweekday`.", "question_id": 980}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "email.message_from_bytes(s, policy=policy.compat32)", "intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) . Optional `_class` and `policy` are interpreted as with the BytesParser class constructor .", "question_id": 3398}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "os.WIFCONTINUED(status)", "intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "question_id": 7089}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "Path.rglob(pattern)", "intent": "This is like calling Path.glob ( ) with \u201c **/ \u201d added in front of the given relative `pattern` :", "question_id": 7312}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "Telnet.open(host, port=0)", "intent": "Connect to a `host` . The optional second argument is the `port` number , which defaults to the standard Telnet port ( 23 ) .", "question_id": 10021}
{"snippet": "io.open(file, mode='r')", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `mode`.", "question_id": 5052}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "dis.dis(x=None, file=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "question_id": 2711}
{"snippet": "robot_file_parser.parse(lines)", "intent": "Parses the `lines` argument .", "question_id": 11911}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6122}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "base_proxy._callmethod(methodname, args)", "intent": "Call and return the result of a method of the proxy \u2019 s referent . Note in particular that an exception will be raised if `methodname` has not been exposed . With arguments `args`.", "question_id": 6321}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "cgitb.enable(logdir=None, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1068}
{"snippet": "doctest.Example(source, want, options=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `options`.", "question_id": 2828}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "IMAP4.append(mailbox, flags, date_time, message)", "intent": "Append `message` to named `mailbox` . With arguments `flags`, `date_time`.", "question_id": 4691}
{"snippet": "header.append(s, charset=None)", "intent": "Append the string `s` to the MIME header . Optional `charset` , if given , should be a Charset instance ( see email.charset ) or the name of a character set , which will be converted to a Charset instance .", "question_id": 3127}
{"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}
{"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378}
{"snippet": "re.fullmatch(pattern, string)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object .", "question_id": 7941}
{"snippet": "connection.cursor(factory=Cursor)", "intent": "The cursor method accepts a single optional parameter `factory` .", "question_id": 8807}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "unittest.main(exit=True)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . By default main calls sys.exit ( ) with an `exit` code indicating success or failure of the tests run .", "question_id": 11551}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "tzinfo.fromutc(dt)", "intent": "This is called from the default datetime.astimezone ( ) implementation . When called from that , dt.tzinfo is self , and `dt` \u2019 s date and time data are to be viewed as expressing a UTC time .", "question_id": 2356}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673}
{"snippet": "datetime.datetime(year, month, day, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `minute`.", "question_id": 2249}
{"snippet": "frozenset()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9434}
{"snippet": "FileHandler.file_open(req)", "intent": "Open the file locally , if there is no host name , or the host name is 'localhost ' . With arguments `req`.", "question_id": 11873}
{"snippet": "unicodedata.numeric(chr)", "intent": "Returns the numeric value assigned to the character `chr` as float .", "question_id": 11348}
{"snippet": "FTP.dir(argument)", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3957}
{"snippet": "CGIXMLRPCRequestHandler.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request ; the return value is returned to the client as the result .", "question_id": 12744}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "getpass.getpass(stream=None)", "intent": "Prompt the user for a password without echoing . On Unix , the prompt is written to the file-like object `stream` using the replace error handler if needed .", "question_id": 4206}
{"snippet": "pyclbr.readmodule(module, path=None)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package . If given , `path` is a sequence of directory paths prepended to sys.path , which is used to locate the module source code .", "question_id": 7707}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "bz2.BZ2Decompressor", "intent": "Create a new decompressor object.", "question_id": 900}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6121}
{"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "fcntl.lockf(fd, cmd, len=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3752}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "time.gmtime(secs)", "intent": "Convert a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10441}
{"snippet": "operator.__index__(a)", "intent": "Return `a` converted to an integer .", "question_id": 6539}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}
{"snippet": "test_case.assertNotAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11428}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "filecmp.cmp(f1, f2, shallow=True)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise . If `shallow` is true , files with identical os.stat ( ) signatures are taken to be equal .", "question_id": 3756}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`, `add`.", "question_id": 11074}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2664}
{"snippet": "os.execvpe(file, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7016}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "test.support.join_thread(thread, timeout=30.0)", "intent": "Join a `thread` within `timeout` .", "question_id": 10255}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp . With arguments `errors`.", "question_id": 1298}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`.", "question_id": 10854}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "min(iterable, key, default)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4054}
{"snippet": "urllib.request.urlretrieve(url, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11884}
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866}
{"snippet": "os.getsid(pid)", "intent": "Call the system call getsid ( ) . With arguments `pid`.", "question_id": 6704}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "os.fwalk(top='.', topdown=True)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`, `topdown`.", "question_id": 6989}
{"snippet": "policy.fold(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message for a given header .", "question_id": 3426}
{"snippet": "pdb.Pdb(stdout=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7344}
{"snippet": "property(fget=None, fset=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value . `fset` is a function for setting an attribute value .", "question_id": 4090}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "pprint.pprint(object, stream=None, width=80)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7650}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10973}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "textwrap.wrap(text, **kwargs)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10318}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "logging.handlers.HTTPHandler(host, url, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5544}
{"snippet": "platform.win32_ver(release='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7496}
{"snippet": "doctest.debug(module, name, pm=False)", "intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above . Optional argument `pm` controls whether post-mortem debugging is used .", "question_id": 2889}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003}
{"snippet": "winreg.SetValueEx(key, value_name, reserved, type, value)", "intent": "Stores data in the `value` field of an open registry `key` . `value_name` is a string that names the subkey with which the value is associated . `reserved` can be anything \u2013 zero is always passed to the API . `type` is an integer that specifies the type of the data .", "question_id": 12151}
{"snippet": "bdb.Breakpoint(self, file, line, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "question_id": 757}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459}
{"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "subprocess.Popen(args, stderr=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9604}
{"snippet": "subprocess.check_call(args, cwd=None)", "intent": "Run command with arguments . With arguments `args`, `cwd`.", "question_id": 9674}
{"snippet": "dispatcher.create_socket(family=socket.AF_INET)", "intent": "This is identical to the creation of a normal socket , and will use the same options for creation . With arguments `family`.", "question_id": 664}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "logging.basicConfig(**kwargs)", "intent": "Does basic configuration for the logging system by creating a StreamHandler with a default Formatter and adding it to the root logger . With arguments `**kwargs`.", "question_id": 5649}
{"snippet": "msilib.FCICreate(cabname, files)", "intent": "Create a new CAB file named `cabname` . `files` must be a list of tuples , each containing the name of the file on disk , and the name of the file inside the CAB file .", "question_id": 6058}
{"snippet": "pty.spawn(argv, master_read)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . The functions `master_read` and `stdin_read` are passed a file descriptor which they should read from , and they should always return a byte string . With arguments `argv`.", "question_id": 7701}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "operator.itemgetter(*items)", "intent": "Return a callable object that fetches item from its operand using the operand \u2019 s __getitem__ ( ) method . With arguments `*items`.", "question_id": 6585}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}
{"snippet": "config_parser.has_section(section)", "intent": "Indicates whether the named `section` is present in the configuration .", "question_id": 1509}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "property(fdel=None)", "intent": "Return a property attribute . `fdel` is a function for deleting an attribute value .", "question_id": 4088}
{"snippet": "test.support.start_threads(threads, unlock=None)", "intent": "Context manager to start `threads` . With arguments `unlock`.", "question_id": 10199}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "str.encode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9188}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively . If the `buffer_size` is omitted it defaults to DEFAULT_BUFFER_SIZE .", "question_id": 5131}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "traceback.extract_stack(f=None)", "intent": "Extract the raw traceback from the current stack frame . The optional `f` and `limit` arguments have the same meaning as for print_stack ( ) .", "question_id": 10772}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "typing.Deque(deque, MutableSequenceT)", "intent": "A generic version of collections.deque . With arguments `deque`, `MutableSequenceT`.", "question_id": 11268}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994}
{"snippet": "base_rotating_handler.rotate(source, dest)", "intent": "When rotating , rotate the current log . The default implementation calls the \u2018 rotator \u2019 attribute of the handler , if it \u2019 s callable , passing the `source` and `dest` arguments to it .", "question_id": 5457}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "mimetypes.guess_all_extensions(type, strict=True)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type . The optional `strict` argument has the same meaning as with the guess_type ( ) function .", "question_id": 5942}
{"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481}
{"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "os.WIFEXITED(status)", "intent": "Return True if the process exited using the exit ( 2 ) system call , otherwise return False . With arguments `status`.", "question_id": 7092}
